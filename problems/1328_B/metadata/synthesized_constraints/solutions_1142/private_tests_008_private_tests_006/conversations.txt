system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

For the given integer n (n > 2) let's write down all the strings of length n which contain n-2 letters 'a' and two letters 'b' in lexicographical (alphabetical) order.

Recall that the string s of length n is lexicographically less than string t of length n, if there exists such i (1 ≤ i ≤ n), that s_i < t_i, and for any j (1 ≤ j < i) s_j = t_j. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.

For example, if n=5 the strings are (the order does matter):

  1. aaabb
  2. aabab
  3. aabba
  4. abaab
  5. ababa
  6. abbaa
  7. baaab
  8. baaba
  9. babaa
  10. bbaaa



It is easy to show that such a list of strings will contain exactly (n ⋅ (n-1))/(2) strings.

You are given n (n > 2) and k (1 ≤ k ≤ (n ⋅ (n-1))/(2)). Print the k-th string from the list.

Input

The input contains one or more test cases.

The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.

Each test case is written on the the separate line containing two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ min(2⋅10^9, (n ⋅ (n-1))/(2)).

The sum of values n over all test cases in the test doesn't exceed 10^5.

Output

For each test case print the k-th string from the list of all described above strings of length n. Strings in the list are sorted lexicographically (alphabetically).

Example

Input


7
5 1
5 2
5 8
5 10
3 1
3 2
20 100


Output


aaabb
aabab
baaba
bbaaa
abb
bab
aaaaabaaaaabaaaaaaaa

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void solve() {
  long long n, k, i = 1;
  cin >> n >> k;
  string s(n - 2, 'a');
  s = s + "bb";
  if (k == 1) {
    cout << s << endl;
    return;
  }
  while (k >= 0) {
    k = k - i;
    i++;
    if (k - i <= 0) break;
  }
  long long y = n - i - 1, a = y;
  while (y--) cout << "a";
  cout << "b";
  long long x = i - k, b = x;
  while (x--) cout << "a";
  cout << "b";
  long long c = n - a - b - 2;
  while (c--) cout << "a";
  cout << "\n";
}
int main() {
  int t = 1;
  cin >> t;
  while (t--) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000 2000000000


(G.2) Fast Input

1
100000 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k, i = 1; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  string s(n - 2, 'a'); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  s = s + "bb"; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cout << s << endl; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (k >= 0) { /* line 12 slow_hit_count: 63245, fast_hit_count: 0 */
    k = k - i; /* line 13 slow_hit_count: 63245, fast_hit_count: 0 */
    i++; /* line 14 slow_hit_count: 63245, fast_hit_count: 0 */
    if (k - i <= 0) break; /* line 15 slow_hit_count: 63245, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  long long y = n - i - 1, a = y; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  while (y--) cout << "a"; /* line 18 slow_hit_count: 36754, fast_hit_count: 0 */
  cout << "b"; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
  long long x = i - k, b = x; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
  while (x--) cout << "a"; /* line 21 slow_hit_count: 59882, fast_hit_count: 0 */
  cout << "b"; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  long long c = n - a - b - 2; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  while (c--) cout << "a"; /* line 24 slow_hit_count: 3365, fast_hit_count: 0 */
  cout << "\n"; /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - The line-level hit counts show significant differences in the execution of lines within the `solve()` function when comparing the fast and slow inputs.
   - Lines 12 to 15 (`while (k >= 0)` loop) are executed 63,245 times for the slow input, but not at all for the fast input.
   - Lines 18, 21, and 24 are also executed a significant number of times for the slow input (36,754 times for line 18, 59,882 times for line 21, and 3,365 times for line 24) but not for the fast input.

2. **Pinpointed Lines:**
   - The lines inside the `while (k >= 0)` loop (lines 12 to 15) are pinpointed as potentially problematic, as they are executed many times in the slow run.
   - The loop has high hit counts for line 13 (`k = k - i;`), line 14 (`i++;`), and line 15 (`if (k - i <= 0) break;`), which indicates that it iterates a large number of times before breaking.

3. **Inference on Interaction with Data Structures:**
   - The loop at lines 12 to 15 adjusts variables `k` and `i` iteratively until a stopping condition is met. This suggests a computational overhead in determining the correct positions for the characters `'b'` in the string by decrementing `k`. 
   - The lines following this loop (lines 17-23) handle constructing the output string, which entails significant I/O operations—particularly the multiple `cout` operations in loops that are executed a large number of times.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Iterative Decrement of `k` in the Loop**
   - **Natural Language Invariant:** "When `k` is large relative to `n`, the loop determining the positions of `'b'` iteratively decreases `k` many times, causing a performance slowdown."
   - **Explanation:** The slow input hits the loop at lines 12-15 many times due to a large `k` value, requiring multiple iterations to decrement `k` to a point where the loop exits. This results in significant computational overhead.

2. **Invariant 2: Extensive String Construction with Output Operations**
   - **Natural Language Invariant:** "If the final positions for the `'b'` characters require many characters to be printed before them, the program will perform excessive output operations, leading to performance issues."
   - **Explanation:** Lines 18, 21, and 24 involve printing a large number of `'a'` characters before and between the `'b'` characters. This string construction and output is repetitive and costly for large values of `n`.

### Recommendations for Improvement

- **Optimize Loop Logic:** Consider optimizing the loop at lines 12-15 to calculate the positions of `'b'` more directly without iterative decrementing of `k`, potentially using mathematical derivation or precomputed results.
- **Efficient Output Handling:** Minimize repetitive `cout` calls by constructing the entire string in memory first and using a single output operation, which could reduce I/O overhead significantly.

These performance-characterizing invariants help identify conditions leading to slow execution, particularly when `k` is large and near its upper bound relative to `n`, and when output operations become extensive due to large string construction.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
For the given integer n (n > 2) let's write down all the strings of length n which contain n-2 letters 'a' and two letters 'b' in lexicographical (alphabetical) order.

Recall that the string s of length n is lexicographically less than string t of length n, if there exists such i (1 ≤ i ≤ n), that s_i < t_i, and for any j (1 ≤ j < i) s_j = t_j. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.

For example, if n=5 the strings are (the order does matter):

  1. aaabb
  2. aabab
  3. aabba
  4. abaab
  5. ababa
  6. abbaa
  7. baaab
  8. baaba
  9. babaa
  10. bbaaa



It is easy to show that such a list of strings will contain exactly (n ⋅ (n-1))/(2) strings.

You are given n (n > 2) and k (1 ≤ k ≤ (n ⋅ (n-1))/(2)). Print the k-th string from the list.

Input

The input contains one or more test cases.

The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.

Each test case is written on the the separate line containing two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ min(2⋅10^9, (n ⋅ (n-1))/(2)).

The sum of values n over all test cases in the test doesn't exceed 10^5.

Output

For each test case print the k-th string from the list of all described above strings of length n. Strings in the list are sorted lexicographically (alphabetically).

Example

Input


7
5 1
5 2
5 8
5 10
3 1
3 2
20 100


Output


aaabb
aabab
baaba
bbaaa
abb
bab
aaaaabaaaaabaaaaaaaa

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each natural language invariant identified, the corresponding C++ code will be implemented as a checker function that will detect when the performance bottleneck condition is met.

#### Invariant 1: Iterative Decrement of `k` in the Loop
**Checker Code:**
```cpp
void check_loop_invariant(long long k, long long n) {
    // Check if k is large relative to n, potentially causing a slow loop
    if (k > n * (n - 1) / 4) { // Example threshold to trigger the invariant
        cerr << "Warning: Performance bottleneck condition triggered in loop - k is large relative to n!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive String Construction with Output Operations
**Checker Code:**
```cpp
void check_output_invariant(long long n, long long i) {
    // Check for extensive output operations due to large n and calculated i values
    if (i > n / 2) { // Example threshold to consider excessive output
        cerr << "Warning: Performance bottleneck condition triggered in output operations - extensive string construction!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Now we integrate the checker functions at appropriate locations in the existing C++ program.

**Instrumented C++ Code:**
```cpp
#include <bits/stdc++.h>
using namespace std;

void check_loop_invariant(long long k, long long n) {
    // Check if k is large relative to n, potentially causing a slow loop
    if (k > n * (n - 1) / 4) { // Example threshold to trigger the invariant
        cerr << "Warning: Performance bottleneck condition triggered in loop - k is large relative to n!" << endl;
        abort();
    }
}

void check_output_invariant(long long n, long long i) {
    // Check for extensive output operations due to large n and calculated i values
    if (i > n / 2) { // Example threshold to consider excessive output
        cerr << "Warning: Performance bottleneck condition triggered in output operations - extensive string construction!" << endl;
        abort();
    }
}

void solve() {
    long long n, k, i = 1;
    cin >> n >> k;
    
    // Check for potential loop bottleneck
    check_loop_invariant(k, n);

    string s(n - 2, 'a');
    s = s + "bb";
    if (k == 1) {
        cout << s << endl;
        return;
    }
    while (k >= 0) {
        k = k - i;
        i++;
        if (k - i <= 0) break;
    }
    
    // Check for potential output bottleneck
    check_output_invariant(n, i);

    long long y = n - i - 1, a = y;
    while (y--) cout << "a";
    cout << "b";
    long long x = i - k, b = x;
    while (x--) cout << "a";
    cout << "b";
    long long c = n - a - b - 2;
    while (c--) cout << "a";
    cout << "\n";
}

int main() {
    int t = 1;
    cin >> t;
    while (t--) solve();
    return 0;
}
```

### Explanation:

- **`check_loop_invariant`:** This function checks if `k` is large relative to `n`, which could cause a slow loop. The condition is evaluated once after reading the input values for each test case.
  
- **`check_output_invariant`:** This function checks if the string construction operations could become excessive due to large values of `n` and calculated `i`. The condition is evaluated right before the string construction takes place.

The integration points are chosen such that the checkers are executed without adding significant overhead in tight loops, ensuring efficient detection of performance bottlenecks.

