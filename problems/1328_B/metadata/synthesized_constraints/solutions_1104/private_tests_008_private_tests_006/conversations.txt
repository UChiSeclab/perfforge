system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

For the given integer n (n > 2) let's write down all the strings of length n which contain n-2 letters 'a' and two letters 'b' in lexicographical (alphabetical) order.

Recall that the string s of length n is lexicographically less than string t of length n, if there exists such i (1 ≤ i ≤ n), that s_i < t_i, and for any j (1 ≤ j < i) s_j = t_j. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.

For example, if n=5 the strings are (the order does matter):

  1. aaabb
  2. aabab
  3. aabba
  4. abaab
  5. ababa
  6. abbaa
  7. baaab
  8. baaba
  9. babaa
  10. bbaaa



It is easy to show that such a list of strings will contain exactly (n ⋅ (n-1))/(2) strings.

You are given n (n > 2) and k (1 ≤ k ≤ (n ⋅ (n-1))/(2)). Print the k-th string from the list.

Input

The input contains one or more test cases.

The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.

Each test case is written on the the separate line containing two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ min(2⋅10^9, (n ⋅ (n-1))/(2)).

The sum of values n over all test cases in the test doesn't exceed 10^5.

Output

For each test case print the k-th string from the list of all described above strings of length n. Strings in the list are sorted lexicographically (alphabetically).

Example

Input


7
5 1
5 2
5 8
5 10
3 1
3 2
20 100


Output


aaabb
aabab
baaba
bbaaa
abb
bab
aaaaabaaaaabaaaaaaaa

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int tt;
  cin >> tt;
  while (tt--) {
    int n, k;
    cin >> n >> k;
    string ans(n, 'a');
    for (int i = n - 2; i >= 0; i--) {
      if (k <= n - i - 1) {
        ans[i] = ans[n - k] = 'b';
        break;
      }
      k -= (n - i - 1);
    }
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000 2000000000


(G.2) Fast Input

1
100000 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int tt; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> tt; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (tt--) { /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
    int n, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    string ans(n, 'a'); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    for (int i = n - 2; i >= 0; i--) { /* line 10 slow_hit_count: 63246, fast_hit_count: 1 */
      if (k <= n - i - 1) { /* line 11 slow_hit_count: 63246, fast_hit_count: 1 */
        ans[i] = ans[n - k] = 'b'; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      k -= (n - i - 1); /* line 15 slow_hit_count: 63245, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C code and the hit count information for both the slow and fast inputs, we can deduce the following performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Iteration Bottleneck**: The `for` loop on line 10 is identified as a significant bottleneck for the slow input. It is executed 63,246 times compared to just once for the fast input. This loop iterates backward from `n-2` to `0`, decrementing `k` in each iteration until the condition on line 11 is met.

2. **Condition Evaluation**: The condition `k <= n - i - 1` on line 11 is evaluated multiple times on the slow input, indicating that `k` is initially much larger than the typical decrement size (`n - i - 1`), thus causing the loop to iterate many times.

3. **Decrement Operation**: Line 15, which decrements `k`, is executed 63,245 times during the slow run, showing that this decrement occurs almost each time within the loop.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above observations, here are some performance-characterizing invariants in natural language:

1. **High Initial Value of `k`**: When `k` is close to its maximum permissible value `(n ⋅ (n-1))/2`, the loop iterates many times because `k` remains large compared to the decrement size `n - i - 1`. This leads to a significant slowdown.

   - **Natural Language Invariant**: "If `k` is close to the maximum value `(n ⋅ (n-1))/2` for a given `n`, the program may slow down significantly due to many iterations needed to decrement `k` to a manageable size."

2. **Large `n` with High `k`**: The combination of a large `n` and a high `k` value exacerbates the slowdown, as it prolongs the initial loop before the condition `k <= n - i - 1` becomes true.

   - **Natural Language Invariant**: "For large values of `n` (close to its upper constraint) with `k` also near its upper limit, the number of iterations increases significantly, causing performance degradation."

3. **Inefficient `k` Decrement**: Frequent recalculation and decrement of `k` when `k` is much larger than typical decrement values (like `n - i - 1`) results in inefficient computation.

   - **Natural Language Invariant**: "When `k` is large relative to typical decrement values in the loop, excessive iterations and recalculations can slow down the program."

These invariants encapsulate the conditions under which the code enters a slow path, based on the given input constraints and the observed behavior in the slow input run. They help in identifying potential slowdowns without being tied to specific input values, thus aiding in understanding and mitigating performance issues in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
For the given integer n (n > 2) let's write down all the strings of length n which contain n-2 letters 'a' and two letters 'b' in lexicographical (alphabetical) order.

Recall that the string s of length n is lexicographically less than string t of length n, if there exists such i (1 ≤ i ≤ n), that s_i < t_i, and for any j (1 ≤ j < i) s_j = t_j. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.

For example, if n=5 the strings are (the order does matter):

  1. aaabb
  2. aabab
  3. aabba
  4. abaab
  5. ababa
  6. abbaa
  7. baaab
  8. baaba
  9. babaa
  10. bbaaa



It is easy to show that such a list of strings will contain exactly (n ⋅ (n-1))/(2) strings.

You are given n (n > 2) and k (1 ≤ k ≤ (n ⋅ (n-1))/(2)). Print the k-th string from the list.

Input

The input contains one or more test cases.

The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.

Each test case is written on the the separate line containing two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ min(2⋅10^9, (n ⋅ (n-1))/(2)).

The sum of values n over all test cases in the test doesn't exceed 10^5.

Output

For each test case print the k-th string from the list of all described above strings of length n. Strings in the list are sorted lexicographically (alphabetically).

Example

Input


7
5 1
5 2
5 8
5 10
3 1
3 2
20 100


Output


aaabb
aabab
baaba
bbaaa
abb
bab
aaaaabaaaaabaaaaaaaa

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Let's translate the previously derived performance-characterizing invariants into runtime checks in C++.

1. **High Initial Value of `k`**: Check if `k` is close to the maximum value `(n ⋅ (n-1))/2`.

2. **Large `n` with High `k`**: Check if `n` is large and `k` is near its upper limit.

3. **Inefficient `k` Decrement**: Check if `k` is large relative to the typical decrement value.

Here is the C++ code implementing these checks:

```cpp
void check_k_max_invariant(int n, int k) {
    int max_k = (n * (n - 1)) / 2;
    if (k > max_k * 0.9) {  // Arbitrary threshold at 90% of maximum
        cerr << "Warning: Performance bottleneck condition triggered - k is close to maximum value!" << endl;
        abort();
    }
}

void check_large_n_k_invariant(int n, int k) {
    int max_k = (n * (n - 1)) / 2;
    if (n > 90000 && k > max_k * 0.8) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - large n with high k!" << endl;
        abort();
    }
}

void check_inefficient_k_decrement(int n, int k, int i) {
    int decrement_size = n - i - 1;
    if (k > decrement_size * 1000) {  // Arbitrary multiplier
        cerr << "Warning: Performance bottleneck condition triggered - inefficient k decrement!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checks into the Original Program

Now, let's integrate these checkers into the original C++ program provided:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_k_max_invariant(int n, int k) {
    int max_k = (n * (n - 1)) / 2;
    if (k > max_k * 0.9) {  // Arbitrary threshold at 90% of maximum
        cerr << "Warning: Performance bottleneck condition triggered - k is close to maximum value!" << endl;
        abort();
    }
}

void check_large_n_k_invariant(int n, int k) {
    int max_k = (n * (n - 1)) / 2;
    if (n > 90000 && k > max_k * 0.8) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - large n with high k!" << endl;
        abort();
    }
}

void check_inefficient_k_decrement(int n, int k, int i) {
    int decrement_size = n - i - 1;
    if (k > decrement_size * 1000) {  // Arbitrary multiplier
        cerr << "Warning: Performance bottleneck condition triggered - inefficient k decrement!" << endl;
        abort();
    }
}

int main() {
    int tt;
    cin >> tt;
    while (tt--) {
        int n, k;
        cin >> n >> k;
        
        // Check conditions after reading input
        check_k_max_invariant(n, k);
        check_large_n_k_invariant(n, k);
        
        string ans(n, 'a');
        
        for (int i = n - 2; i >= 0; i--) {
            check_inefficient_k_decrement(n, k, i); // Check inside loop but not in tight spot
            if (k <= n - i - 1) {
                ans[i] = ans[n - k] = 'b';
                break;
            }
            k -= (n - i - 1);
        }
        
        cout << ans << endl;
    }
    return 0;
}
```

### Explanation

- **Placement of Checks**: 
  - The `check_k_max_invariant` and `check_large_n_k_invariant` checks are placed after reading the input for each test case, ensuring they run once per test case.
  - The `check_inefficient_k_decrement` is inside the loop to catch inefficient decrements but is not placed inside every iteration of the loop's body since it could add overhead.

- **Thresholds**: Arbitrary thresholds are used based on a percentage of `max_k` or large values of `n` to detect high load scenarios.

