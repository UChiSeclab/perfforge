system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
void minn(T &a, T b) {
  a = min(a, b);
}
template <class T>
void maxx(T &a, T b) {
  a = max(a, b);
}
void io() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}
const long long MOD = 1000000007LL;
const long long PRIME = 105943LL;
const long long INF = 1e18;
int n;
string s;
long long a[101];
long long ans[100][100];
long long dp[100][100][2][101];
long long fans(int l, int r);
long long fdp(int l, int r, int t, int c);
long long fans(int l, int r) {
  if (l > r) return 0;
  long long &best = ans[l][r];
  if (best != 0x3F3F3F3F3F3F3F3F) return best;
  best = -INF;
  for (int c = 1; c <= (int)r - l + 1; c++)
    for (int t = 0; t < (int)(2); t++) maxx(best, fdp(l, r, t, c) + a[c]);
  return best;
}
long long fdp(int l, int r, int t, int c) {
  if (c == 0) return fans(l, r);
  if (l > r) return -INF;
  int psz = 0;
  for (int i = l; i <= (int)r; i++)
    if (s[i] == t + '0') psz++;
  if (c > psz) return -INF;
  long long &best = dp[l][r][t][c];
  if (best != 0x3F3F3F3F3F3F3F3F) return best;
  best = -INF;
  for (int m = l; m <= (int)r; m++)
    if (s[m] == t + '0') maxx(best, fans(l, m - 1) + fdp(m + 1, r, t, c - 1));
  return best;
}
int main() {
  io();
  cin >> n >> s;
  for (int i = 1; i <= (int)n; i++) cin >> a[i];
  memset(ans, 0x3F3F3F3F3F3F3F3F, sizeof ans);
  memset(dp, 0x3F3F3F3F3F3F3F3F, sizeof dp);
  cout << fans(0, n - 1) << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 1 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void minn(T &a, T b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  a = min(a, b); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void maxx(T &a, T b) { /* line 8 slow_hit_count: 52650, fast_hit_count: 139 */
  a = max(a, b); /* line 9 slow_hit_count: 52650, fast_hit_count: 139 */
} /* line 10 slow_hit_count: 52650, fast_hit_count: 139 */
void io() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
const long long MOD = 1000000007LL; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const long long PRIME = 105943LL; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e18; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long a[101]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long ans[100][100]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[100][100][2][101]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long fans(int l, int r); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long fdp(int l, int r, int t, int c); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
long long fans(int l, int r) { /* line 25 slow_hit_count: 47691, fast_hit_count: 105 */
  if (l > r) return 0; /* line 26 slow_hit_count: 47691, fast_hit_count: 105 */
  long long &best = ans[l][r]; /* line 27 slow_hit_count: 44475, fast_hit_count: 67 */
  if (best != 0x3F3F3F3F3F3F3F3F) return best; /* line 28 slow_hit_count: 44475, fast_hit_count: 67 */
  best = -INF; /* line 29 slow_hit_count: 465, fast_hit_count: 15 */
  for (int c = 1; c <= (int)r - l + 1; c++) /* line 30 slow_hit_count: 5425, fast_hit_count: 50 */
    for (int t = 0; t < (int)(2); t++) maxx(best, fdp(l, r, t, c) + a[c]); /* line 31 slow_hit_count: 14880, fast_hit_count: 105 */
  return best; /* line 32 slow_hit_count: 465, fast_hit_count: 15 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long fdp(int l, int r, int t, int c) { /* line 34 slow_hit_count: 52650, fast_hit_count: 139 */
  if (c == 0) return fans(l, r); /* line 35 slow_hit_count: 52650, fast_hit_count: 139 */
  if (l > r) return -INF; /* line 36 slow_hit_count: 47690, fast_hit_count: 104 */
  int psz = 0; /* line 37 slow_hit_count: 45144, fast_hit_count: 93 */
  for (int i = l; i <= (int)r; i++) /* line 38 slow_hit_count: 531777, fast_hit_count: 341 */
    if (s[i] == t + '0') psz++; /* line 39 slow_hit_count: 486633, fast_hit_count: 248 */
  if (c > psz) return -INF; /* line 40 slow_hit_count: 45144, fast_hit_count: 93 */
  long long &best = dp[l][r][t][c]; /* line 41 slow_hit_count: 23845, fast_hit_count: 52 */
  if (best != 0x3F3F3F3F3F3F3F3F) return best; /* line 42 slow_hit_count: 23845, fast_hit_count: 52 */
  best = -INF; /* line 43 slow_hit_count: 4960, fast_hit_count: 35 */
  for (int m = l; m <= (int)r; m++) /* line 44 slow_hit_count: 81840, fast_hit_count: 140 */
    if (s[m] == t + '0') maxx(best, fans(l, m - 1) + fdp(m + 1, r, t, c - 1)); /* line 45 slow_hit_count: 76880, fast_hit_count: 105 */
  return best; /* line 46 slow_hit_count: 4960, fast_hit_count: 35 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  io(); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> s; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= (int)n; i++) cin >> a[i]; /* line 51 slow_hit_count: 31, fast_hit_count: 6 */
  memset(ans, 0x3F3F3F3F3F3F3F3F, sizeof ans); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0x3F3F3F3F3F3F3F3F, sizeof dp); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fans(0, n - 1) << "\n"; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Lines that have significantly higher hit counts in the slow input compared to the fast input are:
     - Line 8-9 (`maxx` function): Slow: 52650, Fast: 139
     - Line 25-31 (`fans` function): Slow: 47691, Fast: 105
     - Line 34-45 (`fdp` function): Slow: 52650, Fast: 139
     - Line 38-39 (loop inside `fdp`): Slow: 531777, Fast: 341
     - Line 44-45 (loop inside `fdp`): Slow: 81840, Fast: 140

2. **Pinpoint Lines/Functions with More Hits:**
   - The nested loops in the `fdp` function, particularly lines 38-39 and 44-45, are hit frequently in the slow input, indicating they are a significant contributor to the slowdown.

3. **Infer Interactions with Data Structures and Loops:**
   - The `fdp` function's inner loop (lines 38 and 44) iterates over a range and performs checks and calculations that seem to be related to substrings of characters in `s` and their associated scores.
   - The higher number of hits in the slow input suggest that the structure or sequence of the input string `s` and the high score for certain substring lengths are causing the algorithm to perform many recursive calls and computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1: Repeated Recursive Calls with High Branching Factor**
     - "If the input string `s` contains many repeated sequences of the same character, and if the scores for longer substrings are significantly high, the algorithm may slow down due to excessive recursive calculations. Specifically, the nested loops within the recursive function could lead to a high branching factor that drastically increases computation time."

   - **Invariant 2: Large Contribution Factors**
     - "When the points associated with erasing longer substrings (`a[i]`) are disproportionately large compared to smaller substrings, the recursive function tends to explore many potential splits and merge operations, leading to performance bottlenecks."

   - **Invariant 3: Deep Recursive Exploration**
     - "If there is a large number of consecutive characters in the string `s` with high associated scores, the recursive depth and branching of the dynamic programming solution may cause significant slowdowns. The computation becomes expensive when the `fdp` function evaluates numerous combinations of splitting and merging operations."

2. **Threshold Values and Input Patterns:**
   - These invariants should account for patterns where sequences of characters in `s` can produce many recursive calls due to high values in the array `a` for certain substring lengths, especially considering the constraints (n <= 100).

3. **Avoid Hardcoding and Focus on Patterns:**
   - These invariants do not rely on specific numeric values from the provided slow input but rather focus on the overall structure and scoring pattern of the input that causes increased recursive depth and branching.

### Conclusion

The slow performance is primarily caused by recursive calls in the presence of many repeated characters and high scoring opportunities for longer substrings, leading to excessive branching in the dynamic programming approach.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

For each of the natural language invariants derived in Phase 2, we will implement corresponding checker code in C++.

#### Invariant 1: Repeated Recursive Calls with High Branching Factor
This invariant concerns the potential for excessive recursive calls due to many repeated sequences of the same character combined with high scores for longer substrings.

```cpp
void check_recursive_calls(int max_consecutive, int max_score) {
    if (max_consecutive > 25 && max_score > 1000000000) { // Reasonable thresholds based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered due to high branching factor and deep recursion!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Contribution Factors
This invariant addresses the disproportionate score contributions of longer substrings, which may lead to excessive exploration.

```cpp
void check_score_invariant(long long* a, int n) {
    bool excessive_score = false;
    for (int i = 1; i <= n; i++) {
        if (a[i] > 1000000000) {
            excessive_score = true;
            break;
        }
    }
    if (excessive_score) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive score contribution for longer substrings!" << endl;
        abort();
    }
}
```

#### Invariant 3: Deep Recursive Exploration
This invariant considers the high depth of recursive exploration when there are large consecutive sequences.

```cpp
void check_consecutive_sequences(const string& s) {
    int max_consecutive = 0;
    int current_consecutive = 1;
    for (size_t i = 1; i < s.size(); i++) {
        if (s[i] == s[i - 1]) {
            current_consecutive++;
        } else {
            max_consecutive = max(max_consecutive, current_consecutive);
            current_consecutive = 1;
        }
    }
    max_consecutive = max(max_consecutive, current_consecutive);
    
    if (max_consecutive > 25) { // Threshold indicating high potential for deep exploration
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursive exploration!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original C++ Program

We will integrate these checkers into the provided C++ solution at strategic locations to avoid adding overhead to tight loops. 

```cpp
#include <bits/stdc++.h>
using namespace std;

template <class T>
void minn(T &a, T b) {
    a = min(a, b);
}

template <class T>
void maxx(T &a, T b) {
    a = max(a, b);
}

void io() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
}

const long long MOD = 1000000007LL;
const long long PRIME = 105943LL;
const long long INF = 1e18;
int n;
string s;
long long a[101];
long long ans[100][100];
long long dp[100][100][2][101];

long long fans(int l, int r);
long long fdp(int l, int r, int t, int c);

void check_recursive_calls(int max_consecutive, int max_score) {
    if (max_consecutive > 25 && max_score > 1000000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high branching factor and deep recursion!" << endl;
        abort();
    }
}

void check_score_invariant(long long* a, int n) {
    bool excessive_score = false;
    for (int i = 1; i <= n; i++) {
        if (a[i] > 1000000000) {
            excessive_score = true;
            break;
        }
    }
    if (excessive_score) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive score contribution for longer substrings!" << endl;
        abort();
    }
}

void check_consecutive_sequences(const string& s) {
    int max_consecutive = 0;
    int current_consecutive = 1;
    for (size_t i = 1; i < s.size(); i++) {
        if (s[i] == s[i - 1]) {
            current_consecutive++;
        } else {
            max_consecutive = max(max_consecutive, current_consecutive);
            current_consecutive = 1;
        }
    }
    max_consecutive = max(max_consecutive, current_consecutive);
    
    if (max_consecutive > 25) {
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursive exploration!" << endl;
        abort();
    }
}

long long fans(int l, int r) {
    if (l > r) return 0;
    long long &best = ans[l][r];
    if (best != 0x3F3F3F3F3F3F3F3F) return best;
    best = -INF;
    for (int c = 1; c <= (int)r - l + 1; c++)
        for (int t = 0; t < (int)(2); t++) maxx(best, fdp(l, r, t, c) + a[c]);
    return best;
}

long long fdp(int l, int r, int t, int c) {
    if (c == 0) return fans(l, r);
    if (l > r) return -INF;
    int psz = 0;
    for (int i = l; i <= (int)r; i++)
        if (s[i] == t + '0') psz++;
    if (c > psz) return -INF;
    long long &best = dp[l][r][t][c];
    if (best != 0x3F3F3F3F3F3F3F3F) return best;
    best = -INF;
    for (int m = l; m <= (int)r; m++)
        if (s[m] == t + '0') maxx(best, fans(l, m - 1) + fdp(m + 1, r, t, c - 1));
    return best;
}

int main() {
    io();
    cin >> n >> s;
    for (int i = 1; i <= (int)n; i++) cin >> a[i];

    // Insert performance checks
    check_score_invariant(a, n); // Check for excessive score contributions
    check_consecutive_sequences(s); // Check for long consecutive sequences

    memset(ans, 0x3F3F3F3F3F3F3F3F, sizeof ans);
    memset(dp, 0x3F3F3F3F3F3F3F3F, sizeof dp);

    cout << fans(0, n - 1) << "\n";
}
```

**Explanation:**
- The check for excessive scores (`check_score_invariant`) is placed after reading `a`, ensuring we detect potential bottlenecks from extreme score values.
- The check for consecutive sequences (`check_consecutive_sequences`) is placed after reading `s`, verifying if the input string contains problematic patterns that might lead to deep recursion.
- These checks ensure that potential performance bottlenecks are detected early without adding overhead within the tight recursive loops of the solution.

