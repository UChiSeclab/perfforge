system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize "-O3"
#pragma GCC target "tune=native"
int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
using namespace std;
const bool DEBUG = false;
struct TupleHasher {
  std::size_t operator()(
      const std::tuple<long long int, long long int, long long int,
                       long long int>& k) const {
    return std::get<0>(k) ^ (std::get<1>(k) << 8) ^ (std::get<2>(k) << 16) ^
           (std::get<3>(k) << 30);
  }
};
std::unordered_map<
    std::tuple<long long int, long long int, long long int, long long int>,
    long long int, TupleHasher>
    dyna;
struct TrieNode {
  TrieNode() : word_score(-1), children('z' - 'a' + 1, -1) {}
  long long int word_score;
  std::vector<long long int> children;
};
struct Trie {
  Trie() : nodes_(1) {}
  void Add(const std::string& word, long long int score) {
    assert(score >= 0);
    long long int trie_pos = 0;
    if (DEBUG) {
      std::cout << "Adding: '" << word << "': " << score << std::endl;
    }
    TrieNode* cur = &nodes_[0];
    for (long long int i = 0; i < word.size(); ++i) {
      long long int c = word[i] - '0';
      long long int& next_index = cur->children.at(c);
      if (next_index < 0) {
        next_index = nodes_.size();
        nodes_.push_back(TrieNode());
      }
      cur = &nodes_[next_index];
    }
    cur->word_score = std::max(cur->word_score, score);
  }
  long long int GetScore(long long int trie_pos) const {
    if (trie_pos < 0) {
      return -1;
    }
    return nodes_.at(trie_pos).word_score;
  }
  long long int Next(long long int trie_pos, char c) const {
    if (trie_pos < 0) {
      return trie_pos;
    }
    return nodes_.at(trie_pos).children.at(c - '0');
  }
  std::vector<TrieNode> nodes_;
};
long long int solve(const std::string& s, const Trie& trie, long long int i,
                    long long int j, long long int trie_pos, bool require_match,
                    long long int debug_word_start) {
  if (DEBUG) {
    std::cout << "COMPUTE: i=" << i << " j = " << j << " trie_pos: " << trie_pos
              << " debug_word_start: " << debug_word_start << std::endl;
  }
  if (i == j) {
    long long int score = trie.GetScore(trie_pos);
    if (DEBUG) {
      std::cout << "SCORE: i=" << i << " trie_pos: " << trie_pos
                << " score: " << score << std::endl;
    }
    if (!require_match && score < 0) return 0;
    return score;
  }
  assert(i < j);
  assert(j <= s.size());
  auto t = std::make_tuple(i, j, trie_pos, require_match);
  auto it = dyna.find(t);
  if (it != dyna.end()) return it->second;
  long long int& res = dyna[t];
  res = require_match ? -1 : 0;
  const long long int next_trie_pos = trie.Next(trie_pos, s[i]);
  if (next_trie_pos >= 0) {
    long long int res_next = solve(s, trie, i + 1, j, next_trie_pos,
                                   require_match, debug_word_start);
    if (DEBUG) {
      std::cout << "continue: i=" << i << " j=" << j << " trie_pos=" << trie_pos
                << " debug_word_start=" << debug_word_start
                << " res= " << res_next << std::endl;
    }
    if (res_next >= 0) {
      res = res_next;
    }
  }
  for (long long int k = i + 1; k <= j; ++k) {
    if (k == j && trie_pos == 0) continue;
    long long int left = solve(s, trie, i, k, 0, trie_pos != 0, i);
    long long int right =
        solve(s, trie, k, j, trie_pos, require_match, debug_word_start);
    if (DEBUG) {
      std::cout << "skip: i=" << i << " j=" << j << " trie_pos=" << trie_pos
                << " k1=" << i + 1 << " k=" << k
                << " debug_word_start=" << debug_word_start << " left=" << left
                << " right=" << right << std::endl;
    }
    if (left >= 0 && right >= 0) {
      res = std::max(res, left + right);
    }
  }
  return res;
}
int main() {
  Trie trie;
  int n;
  scanf("%d", &n);
  std::string s;
  std::cin >> s;
  std::string word, word2;
  for (int i = 0; i < n; ++i) {
    word += '1';
    word2 += '0';
    long long int score;
    std::cin >> score;
    trie.Add(word, score);
    trie.Add(word2, score);
  }
  if (DEBUG) {
    std::cout << "input string:'" << s << "'" << std::endl;
    std::cout << "Trie size: " << trie.nodes_.size() << std::endl;
  }
  long long int res = solve(s, trie, 0, s.size(), 0, false, 0);
  std::cout << res << std::endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 1 1 2 1 1 1 1


(G.2) Fast Input

5
01111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize "-O3" /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target "tune=native" /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {0, 0, 1, -1, 1, 1, -1, -1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {1, -1, 0, 0, 1, -1, 1, -1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const bool DEBUG = false; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
struct TupleHasher { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  std::size_t operator()( /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      const std::tuple<long long int, long long int, long long int, /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
                       long long int>& k) const { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return std::get<0>(k) ^ (std::get<1>(k) << 8) ^ (std::get<2>(k) << 16) ^ /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
           (std::get<3>(k) << 30); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
std::unordered_map< /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    std::tuple<long long int, long long int, long long int, long long int>, /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    long long int, TupleHasher> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    dyna; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
struct TrieNode { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  TrieNode() : word_score(-1), children('z' - 'a' + 1, -1) {} /* line 21 slow_hit_count: 61, fast_hit_count: 11 */
  long long int word_score; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<long long int> children; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
struct Trie { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  Trie() : nodes_(1) {} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  void Add(const std::string& word, long long int score) { /* line 27 slow_hit_count: 60, fast_hit_count: 10 */
    assert(score >= 0); /* line 28 slow_hit_count: 60, fast_hit_count: 10 */
    long long int trie_pos = 0; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (DEBUG) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << "Adding: '" << word << "': " << score << std::endl; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    TrieNode* cur = &nodes_[0]; /* line 33 slow_hit_count: 60, fast_hit_count: 10 */
    for (long long int i = 0; i < word.size(); ++i) { /* line 34 slow_hit_count: 990, fast_hit_count: 40 */
      long long int c = word[i] - '0'; /* line 35 slow_hit_count: 930, fast_hit_count: 30 */
      long long int& next_index = cur->children.at(c); /* line 36 slow_hit_count: 930, fast_hit_count: 30 */
      if (next_index < 0) { /* line 37 slow_hit_count: 930, fast_hit_count: 30 */
        next_index = nodes_.size(); /* line 38 slow_hit_count: 60, fast_hit_count: 10 */
        nodes_.push_back(TrieNode()); /* line 39 slow_hit_count: 60, fast_hit_count: 10 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      cur = &nodes_[next_index]; /* line 41 slow_hit_count: 930, fast_hit_count: 30 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    cur->word_score = std::max(cur->word_score, score); /* line 43 slow_hit_count: 60, fast_hit_count: 10 */
  } /* line 44 slow_hit_count: 60, fast_hit_count: 10 */
  long long int GetScore(long long int trie_pos) const { /* line 45 slow_hit_count: 9065, fast_hit_count: 51 */
    if (trie_pos < 0) { /* line 46 slow_hit_count: 9065, fast_hit_count: 51 */
      return -1; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    return nodes_.at(trie_pos).word_score; /* line 49 slow_hit_count: 9065, fast_hit_count: 51 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  long long int Next(long long int trie_pos, char c) const { /* line 51 slow_hit_count: 9455, fast_hit_count: 55 */
    if (trie_pos < 0) { /* line 52 slow_hit_count: 9455, fast_hit_count: 55 */
      return trie_pos; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    return nodes_.at(trie_pos).children.at(c - '0'); /* line 55 slow_hit_count: 9455, fast_hit_count: 55 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<TrieNode> nodes_; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
long long int solve(const std::string& s, const Trie& trie, long long int i, /* line 59 slow_hit_count: 157179, fast_hit_count: 206 */
                    long long int j, long long int trie_pos, bool require_match, /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
                    long long int debug_word_start) { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  if (DEBUG) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    std::cout << "COMPUTE: i=" << i << " j = " << j << " trie_pos: " << trie_pos /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
              << " debug_word_start: " << debug_word_start << std::endl; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  if (i == j) { /* line 66 slow_hit_count: 157179, fast_hit_count: 206 */
    long long int score = trie.GetScore(trie_pos); /* line 67 slow_hit_count: 9065, fast_hit_count: 51 */
    if (DEBUG) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << "SCORE: i=" << i << " trie_pos: " << trie_pos /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
                << " score: " << score << std::endl; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    if (!require_match && score < 0) return 0; /* line 72 slow_hit_count: 9065, fast_hit_count: 51 */
    return score; /* line 73 slow_hit_count: 9065, fast_hit_count: 51 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  assert(i < j); /* line 75 slow_hit_count: 148114, fast_hit_count: 155 */
  assert(j <= s.size()); /* line 76 slow_hit_count: 148114, fast_hit_count: 155 */
  auto t = std::make_tuple(i, j, trie_pos, require_match); /* line 77 slow_hit_count: 148114, fast_hit_count: 155 */
  auto it = dyna.find(t); /* line 78 slow_hit_count: 148114, fast_hit_count: 155 */
  if (it != dyna.end()) return it->second; /* line 79 slow_hit_count: 148114, fast_hit_count: 155 */
  long long int& res = dyna[t]; /* line 80 slow_hit_count: 9455, fast_hit_count: 55 */
  res = require_match ? -1 : 0; /* line 81 slow_hit_count: 9455, fast_hit_count: 55 */
  const long long int next_trie_pos = trie.Next(trie_pos, s[i]); /* line 82 slow_hit_count: 9455, fast_hit_count: 55 */
  if (next_trie_pos >= 0) { /* line 83 slow_hit_count: 9455, fast_hit_count: 55 */
    long long int res_next = solve(s, trie, i + 1, j, next_trie_pos, /* line 84 slow_hit_count: 5218, fast_hit_count: 45 */
                                   require_match, debug_word_start); /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    if (DEBUG) { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << "continue: i=" << i << " j=" << j << " trie_pos=" << trie_pos /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
                << " debug_word_start=" << debug_word_start /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
                << " res= " << res_next << std::endl; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    if (res_next >= 0) { /* line 91 slow_hit_count: 5218, fast_hit_count: 45 */
      res = res_next; /* line 92 slow_hit_count: 5218, fast_hit_count: 45 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int k = i + 1; k <= j; ++k) { /* line 95 slow_hit_count: 86335, fast_hit_count: 160 */
    if (k == j && trie_pos == 0) continue; /* line 96 slow_hit_count: 76880, fast_hit_count: 105 */
    long long int left = solve(s, trie, i, k, 0, trie_pos != 0, i); /* line 97 slow_hit_count: 75980, fast_hit_count: 80 */
    long long int right = /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
        solve(s, trie, k, j, trie_pos, require_match, debug_word_start); /* line 99 slow_hit_count: 75980, fast_hit_count: 80 */
    if (DEBUG) { /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << "skip: i=" << i << " j=" << j << " trie_pos=" << trie_pos /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
                << " k1=" << i + 1 << " k=" << k /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
                << " debug_word_start=" << debug_word_start << " left=" << left /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
                << " right=" << right << std::endl; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
    if (left >= 0 && right >= 0) { /* line 106 slow_hit_count: 75980, fast_hit_count: 80 */
      res = std::max(res, left + right); /* line 107 slow_hit_count: 75980, fast_hit_count: 80 */
    } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 110 slow_hit_count: 9455, fast_hit_count: 55 */
} /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
  Trie trie; /* line 113 slow_hit_count: 2, fast_hit_count: 2 */
  int n; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 115 slow_hit_count: 1, fast_hit_count: 1 */
  std::string s; /* line 116 slow_hit_count: 2, fast_hit_count: 2 */
  std::cin >> s; /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
  std::string word, word2; /* line 118 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; ++i) { /* line 119 slow_hit_count: 31, fast_hit_count: 6 */
    word += '1'; /* line 120 slow_hit_count: 30, fast_hit_count: 5 */
    word2 += '0'; /* line 121 slow_hit_count: 30, fast_hit_count: 5 */
    long long int score; /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    std::cin >> score; /* line 123 slow_hit_count: 30, fast_hit_count: 5 */
    trie.Add(word, score); /* line 124 slow_hit_count: 30, fast_hit_count: 5 */
    trie.Add(word2, score); /* line 125 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  if (DEBUG) { /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
    std::cout << "input string:'" << s << "'" << std::endl; /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
    std::cout << "Trie size: " << trie.nodes_.size() << std::endl; /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = solve(s, trie, 0, s.size(), 0, false, 0); /* line 131 slow_hit_count: 1, fast_hit_count: 1 */
  std::cout << res << std::endl; /* line 132 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 133 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, we will follow the tasks outlined in the prompt.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare line-level hit counts:**
   - The `solve` function is hit significantly more during the slow run compared to the fast run, particularly lines 59, 66, 67, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, and 95-107. This indicates that it is part of a computationally expensive segment, especially in recursive calls.
   - The lines in the `Trie::Add` method (lines 27, 33-43) also have higher hit counts during the slow run, but not as disproportionately as the `solve` function.

2. **Pinpoint lines/functions with more hits:**
   - The `solve` function is significantly more resource-intensive in the slow run. The high hit counts on lines 66, 67, and 81 suggest a deep recursion or frequent recursive calls.

3. **Infer data structure interaction:**
   - The `solve` function uses a tuple-based memoization (`dyna`) to cache solutions, suggesting an attempt to optimize recursive calls. The deep recursion and memoization indicate complex interactions with the input string and patterns.
   - The recursion explores different combinations of substrings, with high branching (suggested by line 95) and depth.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursion depth and branching factor:**
   - **Natural language description:** "If the recursion depth increases significantly due to a high branching factor and a long input string with repetitive patterns, the computation may become expensive."
   - **Explanation:** High recursion depth combined with large branching factors suggests the algorithm explores many potential substring combinations. The memoization helps but does not eliminate all redundant calculations.

2. **String pattern complexity:**
   - **Natural language description:** "When the string consists of long and repetitive patterns that allow multiple valid substring selections, the number of recursive evaluations increases, leading to a slowdown."
   - **Explanation:** Complex repetitive patterns in the string lead to multiple valid substring erasure options, increasing computational complexity.

3. **Trie interactions:**
   - **Natural language description:** "If the trie is frequently accessed or modified with a large number of nodes due to repetitive string patterns, performance may degrade."
   - **Explanation:** The trie is used to store potential scores for substrings. With repetitive patterns, the trie is accessed more frequently, impacting performance.

4. **Input length and complexity:**
   - **Natural language description:** "Given the constraints, if 'n' approaches the upper limit with complex and repetitive patterns, recursive calls may increase significantly."
   - **Explanation:** A large input size (close to n=100) combined with complex pattern structures pushes the recursive function to its limits, as seen in the slow input.

These invariants provide insight into why the program may slow down, focusing on recursion depth, pattern complexity, and data structure interactions without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language invariants, we'll implement runtime checks as C++ code snippets. These checks will aim to identify potential performance bottlenecks.

#### 1. Recursion Depth and Branching Factor

**Invariant:** If the recursion depth increases significantly due to a high branching factor and a long input string with repetitive patterns, the computation may become expensive.

```cpp
void check_recursion_depth_and_branching(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}
```

#### 2. String Pattern Complexity

**Invariant:** When the string consists of long and repetitive patterns that allow multiple valid substring selections, the number of recursive evaluations increases, leading to a slowdown.

```cpp
void check_string_pattern_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex string patterns!" << endl;
        abort();
    }
}
```

#### 3. Trie Interactions

**Invariant:** If the trie is frequently accessed or modified with a large number of nodes due to repetitive string patterns, performance may degrade.

```cpp
void check_trie_interactions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent trie interactions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Below is the instrumented C++ code with the checker functions integrated at appropriate points to monitor potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize "-O3"
#pragma GCC target "tune=native"
using namespace std;

const bool DEBUG = false;

// Checker functions
void check_recursion_depth_and_branching(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}

void check_string_pattern_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex string patterns!" << endl;
        abort();
    }
}

void check_trie_interactions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent trie interactions!" << endl;
        abort();
    }
}

struct TupleHasher {
    std::size_t operator()(
        const std::tuple<long long int, long long int, long long int, long long int>& k) const {
        return std::get<0>(k) ^ (std::get<1>(k) << 8) ^ (std::get<2>(k) << 16) ^ (std::get<3>(k) << 30);
    }
};

std::unordered_map<
    std::tuple<long long int, long long int, long long int, long long int>,
    long long int, TupleHasher> dyna;

struct TrieNode {
    TrieNode() : word_score(-1), children('z' - 'a' + 1, -1) {}
    long long int word_score;
    std::vector<long long int> children;
};

struct Trie {
    Trie() : nodes_(1) {}

    void Add(const std::string& word, long long int score) {
        assert(score >= 0);
        long long int trie_pos = 0;
        if (DEBUG) {
            std::cout << "Adding: '" << word << "': " << score << std::endl;
        }
        TrieNode* cur = &nodes_[0];
        for (long long int i = 0; i < word.size(); ++i) {
            long long int c = word[i] - '0';
            long long int& next_index = cur->children.at(c);
            if (next_index < 0) {
                next_index = nodes_.size();
                nodes_.push_back(TrieNode());
            }
            cur = &nodes_[next_index];
        }
        cur->word_score = std::max(cur->word_score, score);
    }

    long long int GetScore(long long int trie_pos) const {
        if (trie_pos < 0) {
            return -1;
        }
        return nodes_.at(trie_pos).word_score;
    }

    long long int Next(long long int trie_pos, char c) const {
        if (trie_pos < 0) {
            return trie_pos;
        }
        return nodes_.at(trie_pos).children.at(c - '0');
    }

    std::vector<TrieNode> nodes_;
};

long long int solve(const std::string& s, const Trie& trie, long long int i, long long int j, long long int trie_pos, bool require_match, long long int debug_word_start) {
    if (DEBUG) {
        std::cout << "COMPUTE: i=" << i << " j = " << j << " trie_pos: " << trie_pos << " debug_word_start: " << debug_word_start << std::endl;
    }
    if (i == j) {
        long long int score = trie.GetScore(trie_pos);
        if (DEBUG) {
            std::cout << "SCORE: i=" << i << " trie_pos: " << trie_pos << " score: " << score << std::endl;
        }
        if (!require_match && score < 0) return 0;
        return score;
    }
    assert(i < j);
    assert(j <= s.size());
    auto t = std::make_tuple(i, j, trie_pos, require_match);
    auto it = dyna.find(t);
    if (it != dyna.end()) return it->second;
    long long int& res = dyna[t];
    res = require_match ? -1 : 0;
    const long long int next_trie_pos = trie.Next(trie_pos, s[i]);
    if (next_trie_pos >= 0) {
        long long int res_next = solve(s, trie, i + 1, j, next_trie_pos, require_match, debug_word_start);
        if (DEBUG) {
            std::cout << "continue: i=" << i << " j=" << j << " trie_pos=" << trie_pos << " debug_word_start=" << debug_word_start << " res= " << res_next << std::endl;
        }
        if (res_next >= 0) {
            res = res_next;
        }
    }
    for (long long int k = i + 1; k <= j; ++k) {
        if (k == j && trie_pos == 0) continue;
        long long int left = solve(s, trie, i, k, 0, trie_pos != 0, i);
        long long int right = solve(s, trie, k, j, trie_pos, require_match, debug_word_start);
        if (DEBUG) {
            std::cout << "skip: i=" << i << " j=" << j << " trie_pos=" << trie_pos << " k1=" << i + 1 << " k=" << k << " debug_word_start=" << debug_word_start << " left=" << left << " right=" << right << std::endl;
        }
        if (left >= 0 && right >= 0) {
            res = std::max(res, left + right);
        }
    }

    // Check for recursion depth and branching
    const int maxDepthThreshold = 50;  // Arbitrary threshold
    const int maxBranchFactor = 10;    // Arbitrary threshold
    check_recursion_depth_and_branching((j - i > maxDepthThreshold) && (j - i > maxBranchFactor));

    return res;
}

int main() {
    Trie trie;
    int n;
    scanf("%d", &n);
    std::string s;
    std::cin >> s;
    std::string word, word2;
    for (int i = 0; i < n; ++i) {
        word += '1';
        word2 += '0';
        long long int score;
        std::cin >> score;
        trie.Add(word, score);
        trie.Add(word2, score);
    }

    // Check for complex string patterns
    check_string_pattern_complexity(s.find("000") != std::string::npos || s.find("111") != std::string::npos);

    // Check for frequent trie interactions
    check_trie_interactions(trie.nodes_.size() > 100);  // Arbitrary threshold

    long long int res = solve(s, trie, 0, s.size(), 0, false, 0);
    std::cout << res << std::endl;
}
```

### Explanation

- **Recursion Depth and Branching Factor:** This check is integrated within the `solve` function to monitor the recursion depth and branching factor, using arbitrary thresholds to trigger a warning if exceeded.
- **String Pattern Complexity:** This check is placed in the `main` function after the string input is read to look for complex patterns that might lead to excessive computations.
- **Trie Interactions:** This check is placed in the `main` function after the trie is populated to ensure it doesn't exceed a certain size, which could indicate potential performance issues. 

The added checks help in detecting potential bottlenecks by monitoring specific conditions and aborting the program execution when these conditions are met, providing useful warnings to guide further optimization.

