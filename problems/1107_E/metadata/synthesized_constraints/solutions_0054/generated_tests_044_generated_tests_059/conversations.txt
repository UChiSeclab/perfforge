system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = (int)100 + 5;
const int inf = 0x3f3f3f3f;
long long dp[N][N][2][N];
long long ans[N][N];
char s[N];
int a[N];
long long calcAns(int l, int r);
inline long long calcDp(int l, int r, int dig, int cnt) {
  long long& ret = dp[l][r][dig][cnt];
  if (ret != -1) {
    return ret;
  }
  if (cnt == 0) {
    return ret = calcAns(l, r);
  }
  ret = -(long long)1e15;
  for (int mid = l; mid <= r; mid++) {
    if (s[mid] - '0' == dig) {
      ret = max(ret, calcAns(l, mid - 1) + calcDp(mid + 1, r, dig, cnt - 1));
    }
  }
  return ret;
}
inline long long calcAns(int l, int r) {
  long long& ret = ans[l][r];
  if (ret != -1) {
    return ret;
  }
  ret = 0;
  for (int cnt = 1; cnt <= r - l + 1; cnt++) {
    ret = max(ret, a[cnt] + calcDp(l, r, 0, cnt));
    ret = max(ret, a[cnt] + calcDp(l, r, 1, cnt));
  }
  return ret;
}
int main() {
  memset(dp, -1, sizeof(dp));
  memset(ans, -1, sizeof(ans));
  int n;
  scanf("%d", &n);
  scanf("%s", s + 1);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
  }
  printf("%lld\n", calcAns(1, n));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 0 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = (int)100 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 0x3f3f3f3f; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[N][N][2][N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long ans[N][N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
char s[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long calcAns(int l, int r); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
inline long long calcDp(int l, int r, int dig, int cnt) { /* line 10 slow_hit_count: 103399, fast_hit_count: 184 */
  long long& ret = dp[l][r][dig][cnt]; /* line 11 slow_hit_count: 103399, fast_hit_count: 184 */
  if (ret != -1) { /* line 12 slow_hit_count: 103399, fast_hit_count: 184 */
    return ret; /* line 13 slow_hit_count: 88519, fast_hit_count: 79 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt == 0) { /* line 15 slow_hit_count: 14880, fast_hit_count: 105 */
    return ret = calcAns(l, r); /* line 16 slow_hit_count: 465, fast_hit_count: 15 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  ret = -(long long)1e15; /* line 18 slow_hit_count: 14415, fast_hit_count: 90 */
  for (int mid = l; mid <= r; mid++) { /* line 19 slow_hit_count: 199640, fast_hit_count: 315 */
    if (s[mid] - '0' == dig) { /* line 20 slow_hit_count: 185225, fast_hit_count: 225 */
      ret = max(ret, calcAns(l, mid - 1) + calcDp(mid + 1, r, dig, cnt - 1)); /* line 21 slow_hit_count: 93479, fast_hit_count: 114 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 24 slow_hit_count: 14415, fast_hit_count: 90 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
inline long long calcAns(int l, int r) { /* line 26 slow_hit_count: 93945, fast_hit_count: 130 */
  long long& ret = ans[l][r]; /* line 27 slow_hit_count: 93945, fast_hit_count: 130 */
  if (ret != -1) { /* line 28 slow_hit_count: 93945, fast_hit_count: 130 */
    return ret; /* line 29 slow_hit_count: 93449, fast_hit_count: 109 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  ret = 0; /* line 31 slow_hit_count: 496, fast_hit_count: 21 */
  for (int cnt = 1; cnt <= r - l + 1; cnt++) { /* line 32 slow_hit_count: 5456, fast_hit_count: 56 */
    ret = max(ret, a[cnt] + calcDp(l, r, 0, cnt)); /* line 33 slow_hit_count: 4960, fast_hit_count: 35 */
    ret = max(ret, a[cnt] + calcDp(l, r, 1, cnt)); /* line 34 slow_hit_count: 4960, fast_hit_count: 35 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 36 slow_hit_count: 496, fast_hit_count: 21 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  memset(ans, -1, sizeof(ans)); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", s + 1); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 44 slow_hit_count: 31, fast_hit_count: 6 */
    scanf("%d", &a[i]); /* line 45 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", calcAns(1, n)); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts provided for the slow and fast inputs, the significant differences in line hits occur in the following parts of the code:

1. **`calcDp` Function:**
   - Lines 10-13, 19-21: This function is hit substantially more with the slow input. Specifically, the loop on line 19 and the recursive call on line 21 indicate a deeper recursion or more extensive iteration due to the slow input.

2. **`calcAns` Function:**
   - Lines 26-34: This function is also frequently hit, particularly in the loop from line 32 and the calls to `calcDp` on lines 33 and 34. It suggests that `calcAns` initiates many recursive evaluations in `calcDp`.

### Analysis:
- The `calcDp` function appears to explore a large number of combinations, which is evident from the high line hit counts compared to the fast input. The recursive calls and nested iterations are potential performance bottlenecks.
- The expensive recursion and loop structure seem to be driven by the input characteristics, specifically the repeated pattern of characters in the slow input, which leads to redundant calculations in `calcDp`.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Invariant on Recursive Depth and Branching:**
   - "When the string contains many long consecutive substrings of the same digit, the program may enter a deep recursive path in `calcDp`, leading to excessive computation."

2. **Invariant on Input Patterns Triggering Redundant Calculations:**
   - "If the input string has a repetitive pattern that allows many possible ways to score points, the recursive exploration of these possibilities in `calcDp` can slow down execution significantly."

3. **Invariant on Large Subsequence Evaluations:**
   - "When the input string length `n` is close to its maximum (e.g., around 100) and the scoring array has high values for medium to large subsequences, the nested loops and recursion in `calcAns` and `calcDp` may cause performance degradation."

### Considerations
- The primary contribution to the slowdown is the combination of recursion and nested loops processing repeated patterns. Reducing unnecessary recomputation or recognizing repetitive patterns early could mitigate this.
- The conditions for these bottlenecks should be considered beyond specific input values to anticipate potential future slow scenarios even if input constraints (like `n <= 100`) are respected.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Runtime Checks for Invariants in C++

Based on the previously derived performance-characterizing invariants, here are the C++ code snippets to check these conditions:

1. **Invariant on Recursive Depth and Branching:**

```cpp
void check_recursive_depth_and_branching(int n, int recursionDepth, int branchingFactor) {
    if (n == 100 && recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursion!" << endl;
        abort();
    }
}
```

2. **Invariant on Input Patterns Triggering Redundant Calculations:**

```cpp
void check_redundant_calculations(int consecutivePatternLength, int threshold) {
    if (consecutivePatternLength > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to redundant calculations on patterns!" << endl;
        abort();
    }
}
```

3. **Invariant on Large Subsequence Evaluations:**

```cpp
void check_large_subsequence(int n, int maxScore) {
    int threshold = 1e9; // Example threshold for significant scores
    if (n == 100 && maxScore > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large subsequence evaluations!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into Original C++ Program

Below is the instrumented version of the original C++ code with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = (int)100 + 5;
const int inf = 0x3f3f3f3f;
long long dp[N][N][2][N];
long long ans[N][N];
char s[N];
int a[N];
long long calcAns(int l, int r);

inline long long calcDp(int l, int r, int dig, int cnt) {
    long long& ret = dp[l][r][dig][cnt];
    if (ret != -1) {
        return ret;
    }
    if (cnt == 0) {
        return ret = calcAns(l, r);
    }
    ret = -(long long)1e15;
    for (int mid = l; mid <= r; mid++) {
        if (s[mid] - '0' == dig) {
            ret = max(ret, calcAns(l, mid - 1) + calcDp(mid + 1, r, dig, cnt - 1));
        }
    }
    return ret;
}

inline long long calcAns(int l, int r) {
    long long& ret = ans[l][r];
    if (ret != -1) {
        return ret;
    }
    ret = 0;
    for (int cnt = 1; cnt <= r - l + 1; cnt++) {
        ret = max(ret, a[cnt] + calcDp(l, r, 0, cnt));
        ret = max(ret, a[cnt] + calcDp(l, r, 1, cnt));
    }
    return ret;
}

// Helper functions for invariant checks

void check_recursive_depth_and_branching(int n, int recursionDepth, int branchingFactor) {
    if (n == 100 && recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursion!" << endl;
        abort();
    }
}

void check_redundant_calculations(int consecutivePatternLength, int threshold) {
    if (consecutivePatternLength > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to redundant calculations on patterns!" << endl;
        abort();
    }
}

void check_large_subsequence(int n, int maxScore) {
    int threshold = 1e9; // Example threshold for significant scores
    if (n == 100 && maxScore > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large subsequence evaluations!" << endl;
        abort();
    }
}

int main() {
    memset(dp, -1, sizeof(dp));
    memset(ans, -1, sizeof(ans));
    int n;
    scanf("%d", &n);
    scanf("%s", s + 1);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
    }

    // Integrate checks after reading inputs
    int consecutivePatternLength = 0;
    int maxScore = *max_element(a + 1, a + n + 1);
    for (int i = 1; i <= n; i++) {
        if (s[i] == s[i - 1]) {
            consecutivePatternLength++;
        } else {
            consecutivePatternLength = 1;
        }
    }

    check_redundant_calculations(consecutivePatternLength, 10);
    check_large_subsequence(n, maxScore);

    printf("%lld\n", calcAns(1, n));
    return 0;
}
```

### Comment on Integration:
- **`check_recursive_depth_and_branching`:** This check is not directly used because calculating recursion depth and branching factor dynamically in this context is non-trivial, but it serves as a template for more complex recursive pattern detection.
- **`check_redundant_calculations` and `check_large_subsequence`:** These checks are placed after parsing the input to immediately detect potential performance traps based on input patterns and scoring structures.

