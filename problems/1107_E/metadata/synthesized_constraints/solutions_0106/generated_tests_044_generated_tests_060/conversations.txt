system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
const int mod = 1e9 + 7;
int add(int a, int b, int m = mod) { return a + b < mod ? a + b : a + b - mod; }
int mul(ll a, ll b, int m = mod) { return a * b % mod; }
int ex(int a, int b, int m = mod) {
  int r = 1;
  while (b > 0) {
    if (b & 1) r = mul(r, a);
    a = mul(a, a);
    b >>= 1;
  }
  return r;
}
const ll inf = 1e15;
const int maxn = 110;
bool vis[2][maxn][maxn][maxn];
ll memo[2][maxn][maxn][maxn];
bool vis2[maxn][maxn];
ll memo2[maxn][maxn];
int a[maxn];
string s;
ll calc_2(int, int);
ll calc(bool c, int l, int r, int cnt) {
  if (cnt == 0) return calc_2(l, r);
  if (vis[c][l][r][cnt]) return memo[c][l][r][cnt];
  ll& ans = memo[c][l][r][cnt] = -inf;
  for (int i = l; i <= r; ++i) {
    if (s[i] == '0' + c) {
      ans = max(ans, calc_2(l, i - 1) + calc(c, i + 1, r, cnt - 1));
    }
  }
  vis[c][l][r][cnt] = 1;
  return ans;
}
ll calc_2(int l, int r) {
  if (l > r) return 0;
  if (vis2[l][r]) return memo2[l][r];
  ll& ans = memo2[l][r] = -inf;
  for (int i = 1; i <= r - l + 1; ++i) {
    for (int d = 0; d < 2; ++d) {
      ans = max(ans, a[i] + calc(d, l, r, i));
    }
  }
  vis2[l][r] = 1;
  return ans;
}
class Solver {
 public:
  void solveOne(istream& in, ostream& out) {
    int n;
    in >> n;
    in >> s;
    for (int i = 1; i <= n; ++i) in >> a[i];
    out << calc_2(0, n - 1) << '\n';
  }
  void solve(istream& in, ostream& out) {
    out.precision(10);
    out << fixed;
    int testNumber = 1;
    for (int tc = 0; tc < testNumber; ++tc) {
      solveOne(in, out);
    }
  }
};
int main() {
  Solver solver;
  string file = "";
  if (!file.empty()) {
    ifstream in(file + ".in");
    ofstream out(file + ".out");
    in.tie(nullptr);
    in.exceptions(in.failbit);
    solver.solve(in, out);
  } else {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    solver.solve(cin, cout);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 0 1 2 1 1 1 1


(G.2) Fast Input

5
01111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ii = pair<int, int>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using vii = vector<ii>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int add(int a, int b, int m = mod) { return a + b < mod ? a + b : a + b - mod; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int mul(ll a, ll b, int m = mod) { return a * b % mod; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int ex(int a, int b, int m = mod) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  int r = 1; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) r = mul(r, a); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    a = mul(a, a); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const ll inf = 1e15; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 110; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[2][maxn][maxn][maxn]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
ll memo[2][maxn][maxn][maxn]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
bool vis2[maxn][maxn]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
ll memo2[maxn][maxn]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
ll calc_2(int, int); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
ll calc(bool c, int l, int r, int cnt) { /* line 28 slow_hit_count: 103399, fast_hit_count: 190 */
  if (cnt == 0) return calc_2(l, r); /* line 29 slow_hit_count: 103399, fast_hit_count: 190 */
  if (vis[c][l][r][cnt]) return memo[c][l][r][cnt]; /* line 30 slow_hit_count: 98439, fast_hit_count: 155 */
  ll& ans = memo[c][l][r][cnt] = -inf; /* line 31 slow_hit_count: 14415, fast_hit_count: 90 */
  for (int i = l; i <= r; ++i) { /* line 32 slow_hit_count: 199640, fast_hit_count: 315 */
    if (s[i] == '0' + c) { /* line 33 slow_hit_count: 185225, fast_hit_count: 225 */
      ans = max(ans, calc_2(l, i - 1) + calc(c, i + 1, r, cnt - 1)); /* line 34 slow_hit_count: 93479, fast_hit_count: 120 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  vis[c][l][r][cnt] = 1; /* line 37 slow_hit_count: 14415, fast_hit_count: 90 */
  return ans; /* line 38 slow_hit_count: 14415, fast_hit_count: 90 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
ll calc_2(int l, int r) { /* line 40 slow_hit_count: 98440, fast_hit_count: 156 */
  if (l > r) return 0; /* line 41 slow_hit_count: 98440, fast_hit_count: 156 */
  if (vis2[l][r]) return memo2[l][r]; /* line 42 slow_hit_count: 91609, fast_hit_count: 96 */
  ll& ans = memo2[l][r] = -inf; /* line 43 slow_hit_count: 465, fast_hit_count: 15 */
  for (int i = 1; i <= r - l + 1; ++i) { /* line 44 slow_hit_count: 5425, fast_hit_count: 50 */
    for (int d = 0; d < 2; ++d) { /* line 45 slow_hit_count: 14880, fast_hit_count: 105 */
      ans = max(ans, a[i] + calc(d, l, r, i)); /* line 46 slow_hit_count: 9920, fast_hit_count: 70 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  vis2[l][r] = 1; /* line 49 slow_hit_count: 465, fast_hit_count: 15 */
  return ans; /* line 50 slow_hit_count: 465, fast_hit_count: 15 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
class Solver { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  void solveOne(istream& in, ostream& out) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    int n; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    in >> n; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    in >> s; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; ++i) in >> a[i]; /* line 58 slow_hit_count: 31, fast_hit_count: 6 */
    out << calc_2(0, n - 1) << '\n'; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  void solve(istream& in, ostream& out) { /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    out.precision(10); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    out << fixed; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
    int testNumber = 1; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    for (int tc = 0; tc < testNumber; ++tc) { /* line 65 slow_hit_count: 2, fast_hit_count: 2 */
      solveOne(in, out); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
}; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  Solver solver; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  string file = ""; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  if (!file.empty()) { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
    ifstream in(file + ".in"); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    ofstream out(file + ".out"); /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    in.tie(nullptr); /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    in.exceptions(in.failbit); /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    solver.solve(in, out); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    ios_base::sync_with_stdio(false); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(nullptr); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
    solver.solve(cin, cout); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 85 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issue, let's analyze the code and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The function `calc(bool c, int l, int r, int cnt)` is hit significantly more often in the slow input, particularly lines 28, 29, 30, 31, 32, 33, 34, and 38.
   - Inside `calc`, the nested loop from lines 32 to 36 iterates over a range and performs recursive calls, leading to a high number of hits.
   - The function `calc_2(int l, int r)` also shows high hit counts on lines 40, 41, 42, and 46, indicating repeated calls.

2. **Pinpoint Inefficiencies**:
   - The inefficiency likely comes from the high number of recursive calls in `calc`, especially when processing segments of the string that lead to multiple recursive decompositions.
   - The high branching factor in these recursive calls, combined with the cost of evaluating the maximum points for each substring, contributes to the slowdown.

3. **Data Structures and Recursion**:
   - Both `calc` and `calc_2` utilize dynamic programming with memoization (`memo` and `vis` arrays) but the recursive nature and multiple branching decisions might not be fully optimized for certain input patterns.
   - The nested loops and recursive calls for computing maximum points from substring erasure operations suggest a combinatorial explosion for certain input configurations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and understanding of the algorithm, we can derive the following performance-characterizing invariants:

1. **Invariant on Input Composition**:
   - Natural Language Description: "If the input string has long contiguous segments of identical characters that result in frequent recursive calls with high branching in the `calc` function, the program may slow down significantly."
   - Such input patterns force the algorithm to explore many possible ways of segment erasure, causing excessive recursive depth and branching.

2. **Invariant on Recursive Call Depth and Branching**:
   - Natural Language Description: "When the recursive function `calc` is invoked with a high depth of nested recursive calls, combined with a significant branching factor (i.e., many possible substrings to consider at each step), computation becomes expensive."
   - This occurs because the dynamic programming structure is taxed by needing to recompute or evaluate many potential substring configurations.

3. **Invariant on Points Array Configuration**:
   - Natural Language Description: "If the points array contains values that create a strong incentive to keep processing smaller segments, leading to a deep recursion in `calc_2`, the performance can degrade."
   - Specific configurations of the points array may encourage the algorithm to explore a larger state space, increasing recursive overhead.

### Conclusion

By addressing these invariants, we can inform potential optimizations or warn of input cases that might require special handling to improve the performance of the algorithm under specific circumstances. Additionally, these invariants serve as a guide for detecting similar performance pitfalls in related problems or future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Let's create the C++ code snippets that implement the previously inferred performance-characterizing invariants. These snippets will serve as runtime checks to detect conditions that may lead to performance bottlenecks.

#### Invariant 1: Input Composition
```cpp
void check_input_composition(const string& s) {
    int max_segment_length = 0;
    char last_char = s[0];
    int current_length = 1;
    
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] == last_char) {
            ++current_length;
        } else {
            max_segment_length = max(max_segment_length, current_length);
            current_length = 1;
            last_char = s[i];
        }
    }
    max_segment_length = max(max_segment_length, current_length);
    
    if (max_segment_length > 10) {  // Assuming a threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - long segment of identical characters!" << endl;
        abort();
    }
}
```

#### Invariant 2: Recursive Call Depth and Branching
```cpp
void check_recursion_depth_branching(int current_depth, int max_possible_depth, int branching_factor, int threshold_depth = 50, int threshold_branching = 10) {
    if (current_depth > threshold_depth || branching_factor > threshold_branching) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth or branching!" << endl;
        abort();
    }
}
```

#### Invariant 3: Points Array Configuration
```cpp
void check_points_configuration(const vector<int>& a) {
    int high_value_count = 0;
    for (int points : a) {
        if (points > 100000000) {  // Arbitrarily chosen high value for threshold
            ++high_value_count;
        }
    }
    if (high_value_count > 5) {  // Assuming more than 5 high values in `a` can cause issues
        cerr << "Warning: Performance bottleneck condition triggered - points array configuration!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the given C++ code. We'll place the checks at strategic points to ensure they do not introduce significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const ll inf = 1e15;
const int maxn = 110;
bool vis[2][maxn][maxn][maxn];
ll memo[2][maxn][maxn][maxn];
bool vis2[maxn][maxn];
ll memo2[maxn][maxn];
int a[maxn];
string s;

// Checker function for input composition
void check_input_composition(const string& s) {
    int max_segment_length = 0;
    char last_char = s[0];
    int current_length = 1;
    
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] == last_char) {
            ++current_length;
        } else {
            max_segment_length = max(max_segment_length, current_length);
            current_length = 1;
            last_char = s[i];
        }
    }
    max_segment_length = max(max_segment_length, current_length);
    
    if (max_segment_length > 10) {  // Assuming a threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - long segment of identical characters!" << endl;
        abort();
    }
}

// Checker function for recursion depth and branching
void check_recursion_depth_branching(int current_depth, int max_possible_depth, int branching_factor, int threshold_depth = 50, int threshold_branching = 10) {
    if (current_depth > threshold_depth || branching_factor > threshold_branching) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth or branching!" << endl;
        abort();
    }
}

// Checker function for points array configuration
void check_points_configuration(const vector<int>& a) {
    int high_value_count = 0;
    for (int points : a) {
        if (points > 100000000) {  // Arbitrarily chosen high value for threshold
            ++high_value_count;
        }
    }
    if (high_value_count > 5) {  // Assuming more than 5 high values in `a` can cause issues
        cerr << "Warning: Performance bottleneck condition triggered - points array configuration!" << endl;
        abort();
    }
}

ll calc_2(int, int);
ll calc(bool c, int l, int r, int cnt) {
    if (cnt == 0) return calc_2(l, r);
    if (vis[c][l][r][cnt]) return memo[c][l][r][cnt];
    ll& ans = memo[c][l][r][cnt] = -inf;
    for (int i = l; i <= r; ++i) {
        if (s[i] == '0' + c) {
            ans = max(ans, calc_2(l, i - 1) + calc(c, i + 1, r, cnt - 1));
        }
    }
    vis[c][l][r][cnt] = 1;
    return ans;
}
ll calc_2(int l, int r) {
    if (l > r) return 0;
    if (vis2[l][r]) return memo2[l][r];
    ll& ans = memo2[l][r] = -inf;
    for (int i = 1; i <= r - l + 1; ++i) {
        for (int d = 0; d < 2; ++d) {
            ans = max(ans, a[i] + calc(d, l, r, i));
        }
    }
    vis2[l][r] = 1;
    return ans;
}

class Solver {
public:
    void solveOne(istream& in, ostream& out) {
        int n;
        in >> n;
        in >> s;
        for (int i = 1; i <= n; ++i) in >> a[i];

        // Insert checkers
        check_input_composition(s); // Check for long segments of identical characters
        check_points_configuration(vector<int>(a + 1, a + n + 1)); // Check for problematic points configuration

        out << calc_2(0, n - 1) << '\n';
    }
    
    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        for (int tc = 0; tc < testNumber; ++tc) {
            solveOne(in, out);
        }
    }
};

int main() {
    Solver solver;
    string file = "";
    if (!file.empty()) {
        ifstream in(file + ".in");
        ofstream out(file + ".out");
        in.tie(nullptr);
        in.exceptions(in.failbit);
        solver.solve(in, out);
    } else {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        solver.solve(cin, cout);
    }
    return 0;
}
```

### Explanation

1. **Checker Integration**:
   - `check_input_composition(s)` is called after reading the string `s` to detect long segments of identical characters.
   - `check_points_configuration(...)` is called after initializing the points array to ensure there aren't too many high-value scores that could lead to performance issues.
   - `check_recursion_depth_branching(...)` could be incorporated within recursive functions if needed. However, it requires tracking current recursion depth and branching factors which weren't directly part of the original implementation. Adjustments to recursion parameters would be necessary to implement this fully.

2. **Placement**:
   - Checkers are inserted at strategic points to avoid interfering with performance-sensitive parts of the code, ensuring they don't add significant overhead during execution.

These modifications will help to catch potential performance bottlenecks during execution, allowing for runtime diagnostics if the code enters a problematic state.

