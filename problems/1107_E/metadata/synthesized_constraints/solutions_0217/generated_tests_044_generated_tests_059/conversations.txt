system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;
using ll = long long;
const ll INF = 1e18;
int main() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  vector<ll> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  vector<vector<ll> > dp(n, vector<ll>(n));
  for (int i = 0; i < n; i++) {
    dp[i][i] = a[0];
  }
  for (int len = 2; len <= n; len++) {
    for (int l = 0; l < n; l++) {
      int r = l + len - 1;
      if (r >= n) break;
      bool ok = 1;
      for (int i = l + 1; i <= r; i++) {
        if (s[i] != s[l]) {
          ok = 0;
          break;
        }
      }
      if (ok) dp[l][r] = max(dp[l][r], a[len - 1]);
      for (int i = l + 1; i <= r; i++) {
        dp[l][r] = max(dp[l][r], dp[l][i - 1] + dp[i][r]);
      }
      vector<vector<ll> > dp1(len, vector<ll>(len, -INF));
      dp1[0][0] = 0;
      for (int i = 0; i < len - 1; i++) {
        for (int len1 = 0; len1 < len - 1; len1++) {
          if (dp[i][len1] == -INF) continue;
          for (int j = i + 1; j < len; j++) {
            if (s[l + i] == s[l + j]) {
              dp1[j][len1 + 1] = max(dp1[j][len1 + 1],
                                     dp1[i][len1] + dp[l + i + 1][l + j - 1]);
            }
          }
        }
      }
      for (int len1 = 0; len1 < len; len1++) {
        dp[l][r] = max(dp[l][r], dp1[len - 1][len1] + a[len1]);
      }
    }
  }
  cout << dp[0][n - 1] << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 0 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("O3") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const ll INF = 1e18; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  vector<ll> a(n); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < n; i++) { /* line 12 slow_hit_count: 31, fast_hit_count: 6 */
    cin >> a[i]; /* line 13 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<ll> > dp(n, vector<ll>(n)); /* line 15 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < n; i++) { /* line 16 slow_hit_count: 31, fast_hit_count: 6 */
    dp[i][i] = a[0]; /* line 17 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int len = 2; len <= n; len++) { /* line 19 slow_hit_count: 30, fast_hit_count: 5 */
    for (int l = 0; l < n; l++) { /* line 20 slow_hit_count: 464, fast_hit_count: 14 */
      int r = l + len - 1; /* line 21 slow_hit_count: 464, fast_hit_count: 14 */
      if (r >= n) break; /* line 22 slow_hit_count: 464, fast_hit_count: 14 */
      bool ok = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = l + 1; i <= r; i++) { /* line 24 slow_hit_count: 578, fast_hit_count: 18 */
        if (s[i] != s[l]) { /* line 25 slow_hit_count: 564, fast_hit_count: 14 */
          ok = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (ok) dp[l][r] = max(dp[l][r], a[len - 1]); /* line 30 slow_hit_count: 435, fast_hit_count: 10 */
      for (int i = l + 1; i <= r; i++) { /* line 31 slow_hit_count: 4930, fast_hit_count: 30 */
        dp[l][r] = max(dp[l][r], dp[l][i - 1] + dp[i][r]); /* line 32 slow_hit_count: 4495, fast_hit_count: 20 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      vector<vector<ll> > dp1(len, vector<ll>(len, -INF)); /* line 34 slow_hit_count: 1305, fast_hit_count: 30 */
      dp1[0][0] = 0; /* line 35 slow_hit_count: 435, fast_hit_count: 10 */
      for (int i = 0; i < len - 1; i++) { /* line 36 slow_hit_count: 4930, fast_hit_count: 30 */
        for (int len1 = 0; len1 < len - 1; len1++) { /* line 37 slow_hit_count: 71920, fast_hit_count: 70 */
          if (dp[i][len1] == -INF) continue; /* line 38 slow_hit_count: 67425, fast_hit_count: 50 */
          for (int j = i + 1; j < len; j++) { /* line 39 slow_hit_count: 707513, fast_hit_count: 148 */
            if (s[l + i] == s[l + j]) { /* line 40 slow_hit_count: 640088, fast_hit_count: 98 */
              dp1[j][len1 + 1] = max(dp1[j][len1 + 1], /* line 41 slow_hit_count: 677274, fast_hit_count: 88 */
                                     dp1[i][len1] + dp[l + i + 1][l + j - 1]); /* line 42 slow_hit_count: 1015911, fast_hit_count: 132 */
            } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      for (int len1 = 0; len1 < len; len1++) { /* line 47 slow_hit_count: 5365, fast_hit_count: 40 */
        dp[l][r] = max(dp[l][r], dp1[len - 1][len1] + a[len1]); /* line 48 slow_hit_count: 4930, fast_hit_count: 30 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[0][n - 1] << endl; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, we can identify the following segments as potential performance bottlenecks:

1. **Lines 31-32**: The loop `for (int i = l + 1; i <= r; i++)` that updates `dp[l][r]` is executed significantly more times for the slow input (4,930 hits) compared to the fast input (30 hits). This indicates a potentially expensive nested operation related to the dynamic programming state updates.

2. **Lines 36-46**: The nested loops inside `for (int i = 0; i < len - 1; i++)` and `for (int len1 = 0; len1 < len - 1; len1++)` are executed an enormous number of times under the slow input, particularly the inner loop at line 39 (`707,513 hits`). These loops involve checking conditions and updating a secondary dynamic programming table (`dp1`), which suggests expensive computations due to high-dimensional state space exploration.

3. **Lines 40-42**: Inside the highly executed loop, there are conditional checks and updates to `dp1`, which are also executed frequently. This signifies a complex conditional logic that iterates over potential states, further contributing to the slow performance.

The performance difference arises from the complex nested loops that repeatedly evaluate state conditions and update dynamic programming tables, which increase exponentially with input combinations.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language statements to describe the conditions under which the program likely enters a slow path:

1. **Repeated State Exploration Invariant**:
   - **Natural Language Description**: "When the input string length `n` is close to 100, and there are numerous substrings of equal characters causing extensive state exploration in dynamic programming updates, performance may degrade significantly."
   - **Abstract Reasoning**: The complexity grows with the combinatorial explosion of possible substrings and the subsequent dynamic programming calculations needed to maximize points.

2. **Dense Substring Invariant**:
   - **Natural Language Description**: "If the string contains many dense and repetitive substrings, the nested loops in dynamic programming logic may iterate excessively over these combinations, leading to slowdowns."
   - **Abstract Reasoning**: Dense substrings increase the number of potential erasure operations, thereby inflating the number of states checked and updated.

3. **Large Matrix Operations Invariant**:
   - **Natural Language Description**: "When conditions lead to large internal matrix operations due to closely packed repetitive substrings, computation becomes expensive, affecting performance."
   - **Abstract Reasoning**: The construction and frequent updates to large 2D arrays (`dp` and `dp1`) become costly as they grow with input size and complexity.

These invariants highlight the conditions under which the algorithm's performance deteriorates, largely due to the intricate and repeated evaluations in the dynamic programming approach, especially with near-maximum input sizes and complex substring patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ checks for the performance-characterizing invariants derived earlier:

1. **Repeated State Exploration Invariant**:
   ```cpp
   void check_repeated_state_invariant(int n, const string& s) {
       int max_repeats = 0;
       for (size_t i = 0; i < s.size();) {
           char current = s[i];
           int count = 0;
           while (i < s.size() && s[i] == current) {
               ++count;
               ++i;
           }
           max_repeats = max(max_repeats, count);
       }
       if (n > 80 && max_repeats > 20) {
           cerr << "Warning: Repeated state exploration invariant triggered - excessive state exploration due to repeated substrings." << endl;
           abort();
       }
   }
   ```

2. **Dense Substring Invariant**:
   ```cpp
   void check_dense_substring_invariant(const string& s) {
       int density = 0;
       for (size_t i = 1; i < s.size(); ++i) {
           if (s[i] == s[i - 1]) {
               density++;
           }
       }
       if (density > 50) {
           cerr << "Warning: Dense substring invariant triggered - excessive substrings of repeated characters." << endl;
           abort();
       }
   }
   ```

3. **Large Matrix Operations Invariant**:
   ```cpp
   void check_large_matrix_invariant(int n) {
       if (n > 80) {
           cerr << "Warning: Large matrix operations invariant triggered - potentially expensive matrix operations." << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the invariant checks integrated:

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;
using ll = long long;
const ll INF = 1e18;

// Phase 3: Invariant checkers
void check_repeated_state_invariant(int n, const string& s) {
    int max_repeats = 0;
    for (size_t i = 0; i < s.size();) {
        char current = s[i];
        int count = 0;
        while (i < s.size() && s[i] == current) {
            ++count;
            ++i;
        }
        max_repeats = max(max_repeats, count);
    }
    if (n > 80 && max_repeats > 20) {
        cerr << "Warning: Repeated state exploration invariant triggered - excessive state exploration due to repeated substrings." << endl;
        abort();
    }
}

void check_dense_substring_invariant(const string& s) {
    int density = 0;
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] == s[i - 1]) {
            density++;
        }
    }
    if (density > 50) {
        cerr << "Warning: Dense substring invariant triggered - excessive substrings of repeated characters." << endl;
        abort();
    }
}

void check_large_matrix_invariant(int n) {
    if (n > 80) {
        cerr << "Warning: Large matrix operations invariant triggered - potentially expensive matrix operations." << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<ll> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    // Insert checks after input is read
    check_repeated_state_invariant(n, s);
    check_dense_substring_invariant(s);
    check_large_matrix_invariant(n);

    vector<vector<ll> > dp(n, vector<ll>(n));
    for (int i = 0; i < n; i++) {
        dp[i][i] = a[0];
    }
    for (int len = 2; len <= n; len++) {
        for (int l = 0; l < n; l++) {
            int r = l + len - 1;
            if (r >= n) break;
            bool ok = 1;
            for (int i = l + 1; i <= r; i++) {
                if (s[i] != s[l]) {
                    ok = 0;
                    break;
                }
            }
            if (ok) dp[l][r] = max(dp[l][r], a[len - 1]);
            for (int i = l + 1; i <= r; i++) {
                dp[l][r] = max(dp[l][r], dp[l][i - 1] + dp[i][r]);
            }
            vector<vector<ll> > dp1(len, vector<ll>(len, -INF));
            dp1[0][0] = 0;
            for (int i = 0; i < len - 1; i++) {
                for (int len1 = 0; len1 < len - 1; len1++) {
                    if (dp[i][len1] == -INF) continue;
                    for (int j = i + 1; j < len; j++) {
                        if (s[l + i] == s[l + j]) {
                            dp1[j][len1 + 1] = max(dp1[j][len1 + 1],
                                                   dp1[i][len1] + dp[l + i + 1][l + j - 1]);
                        }
                    }
                }
            }
            for (int len1 = 0; len1 < len; len1++) {
                dp[l][r] = max(dp[l][r], dp1[len - 1][len1] + a[len1]);
            }
        }
    }
    cout << dp[0][n - 1] << endl;
}
```

### Explanation of Check Integration

- **Checker Functions**: I added checker functions for each invariant to detect performance bottlenecks.
- **Insertion Point**: The checks are placed after reading input values, allowing us to verify conditions with minimal runtime overhead.
- **Abort on Trigger**: Each checker, upon detecting a performance risk, will output a warning message and abort the program to prevent further execution in a potentially slow path.

