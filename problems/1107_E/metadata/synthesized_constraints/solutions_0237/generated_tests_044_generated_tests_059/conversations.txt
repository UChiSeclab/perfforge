system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1000000007;
long long A[201], S[201][201], B[201][201][2][201];
long long i, j, k, l, r, md, q, n, m, mx, mn, a, b, x, c, s;
string s1, s2;
long long kkk(long long l, long long r, long long c, long long cnt);
long long solve(long long l, long long r) {
  if (S[l][r] != -1) return S[l][r];
  if (l == r) return S[l][r] = A[0];
  if (l > r) return S[l][r] = 0;
  long long n = r - l + 1, x = -2000000000;
  for (long long i = n - 1; i >= 0; i--) {
    x = max<long long>(x, A[i] + kkk(l, r, 0, i + 1));
    x = max<long long>(x, A[i] + kkk(l, r, 1, i + 1));
  }
  return S[l][r] = x;
}
long long kkk(long long l, long long r, long long c, long long cnt) {
  if (B[l][r][c][cnt] != -1) return B[l][r][c][cnt];
  if (cnt == 0) return B[l][r][c][cnt] = solve(l, r);
  long long x = -2000000000;
  char b = c == 0 ? '0' : '1';
  for (long long i = l; i <= r; i++) {
    if (s1[i] == b)
      x = max<long long>(x, solve(l, i - 1) + kkk(i + 1, r, c, cnt - 1));
  }
  return B[l][r][c][cnt] = x;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cerr.tie(NULL);
  memset((S), (-1), sizeof(S));
  memset((B), (-1), sizeof(B));
  cin >> n >> s1;
  for (int i = 0; i < n; i++) cin >> A[i];
  cout << solve(0, n - 1);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 0 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long A[201], S[201][201], B[201][201][2][201]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long i, j, k, l, r, md, q, n, m, mx, mn, a, b, x, c, s; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string s1, s2; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long kkk(long long l, long long r, long long c, long long cnt); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(long long l, long long r) { /* line 8 slow_hit_count: 93925, fast_hit_count: 127 */
  if (S[l][r] != -1) return S[l][r]; /* line 9 slow_hit_count: 93925, fast_hit_count: 127 */
  if (l == r) return S[l][r] = A[0]; /* line 10 slow_hit_count: 495, fast_hit_count: 20 */
  if (l > r) return S[l][r] = 0; /* line 11 slow_hit_count: 465, fast_hit_count: 15 */
  long long n = r - l + 1, x = -2000000000; /* line 12 slow_hit_count: 435, fast_hit_count: 10 */
  for (long long i = n - 1; i >= 0; i--) { /* line 13 slow_hit_count: 5365, fast_hit_count: 40 */
    x = max<long long>(x, A[i] + kkk(l, r, 0, i + 1)); /* line 14 slow_hit_count: 4930, fast_hit_count: 30 */
    x = max<long long>(x, A[i] + kkk(l, r, 1, i + 1)); /* line 15 slow_hit_count: 4930, fast_hit_count: 30 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return S[l][r] = x; /* line 17 slow_hit_count: 435, fast_hit_count: 10 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long kkk(long long l, long long r, long long c, long long cnt) { /* line 19 slow_hit_count: 103320, fast_hit_count: 172 */
  if (B[l][r][c][cnt] != -1) return B[l][r][c][cnt]; /* line 20 slow_hit_count: 103320, fast_hit_count: 172 */
  if (cnt == 0) return B[l][r][c][cnt] = solve(l, r); /* line 21 slow_hit_count: 14848, fast_hit_count: 98 */
  long long x = -2000000000; /* line 22 slow_hit_count: 14384, fast_hit_count: 84 */
  char b = c == 0 ? '0' : '1'; /* line 23 slow_hit_count: 14384, fast_hit_count: 84 */
  for (long long i = l; i <= r; i++) { /* line 24 slow_hit_count: 199578, fast_hit_count: 303 */
    if (s1[i] == b) /* line 25 slow_hit_count: 185194, fast_hit_count: 219 */
      x = max<long long>(x, solve(l, i - 1) + kkk(i + 1, r, c, cnt - 1)); /* line 26 slow_hit_count: 93460, fast_hit_count: 112 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return B[l][r][c][cnt] = x; /* line 28 slow_hit_count: 14384, fast_hit_count: 84 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cerr.tie(NULL); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  memset((S), (-1), sizeof(S)); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  memset((B), (-1), sizeof(B)); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> s1; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> A[i]; /* line 38 slow_hit_count: 31, fast_hit_count: 6 */
  cout << solve(0, n - 1); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identifying Expensive or Inefficient Code Segments

### 1. Compare Line-Level Hit Counts:

- **Function `solve` (Line 8 to 18):** 
  - This function is called 93,925 times on the slow input compared to only 127 times on the fast input.
  - This suggests that this part of the code is a significant contributor to the slowdown.

- **Function `kkk` (Line 19 to 29):**
  - This function is even more frequently called: 103,320 times on the slow input vs. 172 times on the fast input.
  - Within `kkk`, the loop on line 24 is particularly active, with 199,578 iterations on the slow input compared to 303 on the fast input.
  - Lines 25 and 26 in particular show high hit counts, indicating extensive checks and recursive calls.

### 2. Pinpoint Problematic Lines:

- **Recursive Calls in `kkk` (Line 26):** 
  - The recursive nature of this function, combined with the high hit count, suggests that the performance bottleneck is related to the recursive exploration of substring erasures.
  
- **Nested Calls in `solve` and `kkk`:** 
  - The combination of `solve` calling `kkk` and vice-versa leads to a deeply recursive execution pattern, which is exacerbated by the input structure for the slow case.

### 3. Interaction with Data Structures:

- The algorithm involves dynamic programming tables `S` and `B`, which are used to store intermediate results. However, the high hit counts in the slow input scenario indicate that these tables might not be exploited effectively enough to prevent redundant computations.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants

1. **Invariant on Recursive Depth:**
   - **Natural Language Description:** 
     "If the string contains long consecutive segments of similar digits with high associated scores, the recursion depth in the substring erasure routine may grow too large, leading to performance degradation."
   - **Contextual Explanation:** 
     The recursive function `kkk` is called extensively when there are many consecutive zeroes or ones, leading to a high branching factor in searching for optimal erasures.

2. **Invariant on Dynamic Programming Optimization:**
   - **Natural Language Description:** 
     "If the DP table is not effectively capturing and reusing results due to non-overlapping subproblems, redundant computations may occur, slowing down performance."
   - **Contextual Explanation:** 
     The current DP table setup may not capture all possible overlapping subproblems effectively, causing repeated calculations in the recursive structure.

3. **Invariant on Input Structure Complexity:**
   - **Natural Language Description:** 
     "If the input string is structured in such a way that optimal decisions depend on evaluating many combinations of subproblems, the algorithm may enter a slow path."
   - **Contextual Explanation:** 
     The recursive exploration of substring erasures becomes computationally expensive when the input pattern forces evaluation of many possible ways to partition and erase.

By recognizing these conditions and structures in the input, the algorithm's inefficiencies can be anticipated, and care can be taken to ensure that future inputs do not lead to similar performance bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants in C++

Below, I have translated the previously identified natural language invariants into C++ code snippets. These snippets are designed to check for the conditions that trigger performance bottlenecks.

### Invariant Check #1: Recursive Depth

```cpp
void check_recursion_depth(int currentDepth, int maxDepth) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << endl;
        abort();
    }
}
```

### Invariant Check #2: Dynamic Programming Table Usage

```cpp
void check_dp_efficiency(int overlapCount, int threshold) {
    if (overlapCount < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective DP overlap!" << endl;
        abort();
    }
}
```

### Invariant Check #3: Input Structure Complexity

```cpp
void check_input_complexity(int consecutiveSegments, int complexityThreshold) {
    if (consecutiveSegments > complexityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex input structure!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Original Program

Now, I will integrate the above checker functions into the provided C++ program, inserting them at effective points to catch performance issues early.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1000000007;
long long A[201], S[201][201], B[201][201][2][201];
long long i, j, k, l, r, md, q, n, m, mx, mn, a, b, x, c, s;
string s1, s2;

void check_recursion_depth(int currentDepth, int maxDepth) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << endl;
        abort();
    }
}

void check_dp_efficiency(int overlapCount, int threshold) {
    if (overlapCount < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective DP overlap!" << endl;
        abort();
    }
}

void check_input_complexity(int consecutiveSegments, int complexityThreshold) {
    if (consecutiveSegments > complexityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex input structure!" << endl;
        abort();
    }
}

long long kkk(long long l, long long r, long long c, long long cnt);

long long solve(long long l, long long r) {
    if (S[l][r] != -1) return S[l][r];
    if (l == r) return S[l][r] = A[0];
    if (l > r) return S[l][r] = 0;
    
    long long n = r - l + 1, x = -2000000000;
    
    // Check for potential recursion depth issues
    check_recursion_depth(n, 50);  // Example threshold, you can adjust based on analysis
    
    for (long long i = n - 1; i >= 0; i--) {
        x = max<long long>(x, A[i] + kkk(l, r, 0, i + 1));
        x = max<long long>(x, A[i] + kkk(l, r, 1, i + 1));
    }
    return S[l][r] = x;
}

long long kkk(long long l, long long r, long long c, long long cnt) {
    if (B[l][r][c][cnt] != -1) return B[l][r][c][cnt];
    if (cnt == 0) return B[l][r][c][cnt] = solve(l, r);
    
    long long x = -2000000000;
    char b = c == 0 ? '0' : '1';
    
    int overlapCount = 0;
    for (long long i = l; i <= r; i++) {
        if (s1[i] == b) {
            x = max<long long>(x, solve(l, i - 1) + kkk(i + 1, r, c, cnt - 1));
            overlapCount++;
        }
    }
    
    // Check for DP efficiency
    check_dp_efficiency(overlapCount, 10);  // Example threshold
    
    return B[l][r][c][cnt] = x;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cerr.tie(NULL);
    memset((S), (-1), sizeof(S));
    memset((B), (-1), sizeof(B));
    cin >> n >> s1;
    for (int i = 0; i < n; i++) cin >> A[i];
    
    // Check for input complexity
    int consecutiveSegments = 0;
    char lastChar = s1[0];
    for (char ch : s1) {
        if (ch == lastChar) {
            consecutiveSegments++;
        } else {
            lastChar = ch;
        }
    }
    check_input_complexity(consecutiveSegments, 70);  // Example threshold
    
    cout << solve(0, n - 1);
    return 0;
}
```

### Explanation of Checker Integration:

- **`check_recursion_depth`** is called in `solve` to ensure that the recursion doesn't exceed a certain depth.
- **`check_dp_efficiency`** is called in `kkk` to check if the dynamic programming table is being used effectively.
- **`check_input_complexity`** is called in `main` after reading the input to check if the structure of the input string could trigger performance bottlenecks.

These checks help identify scenarios in which the program may exhibit poor performance, thereby allowing for better analysis and debugging.

