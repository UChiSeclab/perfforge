system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 102;
const long long INF = 1e12;
int n;
string s;
int a[N];
long long ans[N][N];
long long dp[2][N][N][N];
long long calcDp(int c, int l, int r, int cnt);
long long calcAns(int l, int r) {
  if (l >= r) return 0;
  long long &res = ans[l][r];
  if (res != -1) return res;
  res = 0;
  for (int cnt = 1; cnt <= r - l; ++cnt) {
    res = max(res, calcDp(0, l, r, cnt) + a[cnt - 1]);
    res = max(res, calcDp(1, l, r, cnt) + a[cnt - 1]);
  }
  return res;
}
long long calcDp(int c, int l, int r, int cnt) {
  if (cnt == 0) return calcAns(l, r);
  long long &res = dp[c][l][r][cnt];
  if (res != -1) return res;
  res = -INF;
  for (int i = l; i < r; ++i) {
    if (c == s[i] - '0')
      res = max(res, calcAns(l, i) + calcDp(c, i + 1, r, cnt - 1));
  }
  return res;
}
int main() {
  cin >> n >> s;
  for (int i = 0; i < n; ++i) cin >> a[i];
  memset(dp, -1, sizeof dp);
  memset(ans, -1, sizeof ans);
  cout << calcAns(0, n) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 1 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 102; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e12; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long ans[N][N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2][N][N][N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long calcDp(int c, int l, int r, int cnt); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long calcAns(int l, int r) { /* line 11 slow_hit_count: 98440, fast_hit_count: 150 */
  if (l >= r) return 0; /* line 12 slow_hit_count: 98440, fast_hit_count: 150 */
  long long &res = ans[l][r]; /* line 13 slow_hit_count: 91609, fast_hit_count: 93 */
  if (res != -1) return res; /* line 14 slow_hit_count: 91609, fast_hit_count: 93 */
  res = 0; /* line 15 slow_hit_count: 465, fast_hit_count: 15 */
  for (int cnt = 1; cnt <= r - l; ++cnt) { /* line 16 slow_hit_count: 5425, fast_hit_count: 50 */
    res = max(res, calcDp(0, l, r, cnt) + a[cnt - 1]); /* line 17 slow_hit_count: 4960, fast_hit_count: 35 */
    res = max(res, calcDp(1, l, r, cnt) + a[cnt - 1]); /* line 18 slow_hit_count: 4960, fast_hit_count: 35 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 20 slow_hit_count: 465, fast_hit_count: 15 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long calcDp(int c, int l, int r, int cnt) { /* line 22 slow_hit_count: 103399, fast_hit_count: 184 */
  if (cnt == 0) return calcAns(l, r); /* line 23 slow_hit_count: 103399, fast_hit_count: 184 */
  long long &res = dp[c][l][r][cnt]; /* line 24 slow_hit_count: 98439, fast_hit_count: 149 */
  if (res != -1) return res; /* line 25 slow_hit_count: 98439, fast_hit_count: 149 */
  res = -INF; /* line 26 slow_hit_count: 14415, fast_hit_count: 90 */
  for (int i = l; i < r; ++i) { /* line 27 slow_hit_count: 199640, fast_hit_count: 315 */
    if (c == s[i] - '0') /* line 28 slow_hit_count: 185225, fast_hit_count: 225 */
      res = max(res, calcAns(l, i) + calcDp(c, i + 1, r, cnt - 1)); /* line 29 slow_hit_count: 93479, fast_hit_count: 114 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 31 slow_hit_count: 14415, fast_hit_count: 90 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> s; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) cin >> a[i]; /* line 35 slow_hit_count: 31, fast_hit_count: 6 */
  memset(dp, -1, sizeof dp); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  memset(ans, -1, sizeof ans); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cout << calcAns(0, n) << endl; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Line-Level Hit Counts:

1. **`calcAns` function (lines 11-21):**
   - **Line 11:** `calcAns` function is called 98,440 times in the slow input and only 150 times in the fast input. This indicates a high recursion or repeated processing in this function during the slow input.
   - **Lines 16-18:** The loop over `cnt` has 5,425 iterations in the slow input compared to 50 in the fast input. This suggests that this loop is implicated in the slowdown, possibly due to the nested function calls to `calcDp`.

2. **`calcDp` function (lines 22-32):**
   - **Line 22:** `calcDp` is called 103,399 times in the slow input and only 184 times in the fast input, indicating it is a major contributor to the slow execution.
   - **Line 27:** This loop iteration is very high, with 199,640 iterations in the slow input versus 315 in the fast input. The loop is likely a hotspot, iterating over ranges leading to high recursive depth.

### Inference:
- The program execution on the slow input is characterized by numerous recursive function calls in both `calcAns` and `calcDp`, with significant iteration over index ranges, likely due to complex interactions in recursive logic and branching conditions.
- The `calcDp` function's recursive depth and branching factor appear to cause an exponential blow-up in execution time for the slow input.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants:

1. **Recursive Depth and Branching:**
   - **Natural Language Invariant:** "If the recursive function `calcDp` is called excessively due to many contiguous or nearly contiguous segments of identical characters in the string, the program may slow down significantly."
   - **Explanation:** This captures the condition where the recursion explores vast segments, increasing depth with branching at each recursive call.

2. **Repeated Function Calls:**
   - **Natural Language Invariant:** "When the `calcAns` function is triggered in a deeply nested manner, possibly due to overlapping segment evaluations, this may lead to performance bottlenecks."
   - **Explanation:** The repeated function evaluations, primarily due to recursive calls, suggest inefficiencies that multiply when deep recursion occurs across similar segments.

3. **High Cost in Loops:**
   - **Natural Language Invariant:** "The combination of large loops over index ranges in `calcDp`, especially when coupled with high point values for large segments, can result in costly computational steps."
   - **Explanation:** This invariant warns about the computational cost tied to looping over indices in recursive calls, which can trigger the program's slow path when handling large or high-scoring segments.

### Conclusion:

The primary contributors to the slowdown in the slow input involve the recursive logic of `calcDp` and `calcAns` functions, where recursion depth, branching factor, and high iteration counts escalate processing times. These invariants help capture scenarios likely to reproduce similar slowdowns and guide optimizations or further analyses.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the previously derived natural language invariants, here is the C++ checker code implementing these invariants:

```cpp
void check_recursion_depth_and_branching(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}

void check_repeated_function_calls(int calcAnsCalls) {
    if (calcAnsCalls > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to calcAns!" << endl;
        abort();
    }
}

void check_high_cost_in_loops(int loopIterations, int segmentScore) {
    if (loopIterations > 1000 && segmentScore > 100000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high cost in loops!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original C++ Program

Below is the instrumented C++ code with the integrated performance checkers. The checks are placed at strategic points to avoid significant performance overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 102;
const long long INF = 1e12;
int n;
string s;
int a[N];
long long ans[N][N];
long long dp[2][N][N][N];

// Check functions
void check_recursion_depth_and_branching(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}

void check_repeated_function_calls(int calcAnsCalls) {
    if (calcAnsCalls > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to calcAns!" << endl;
        abort();
    }
}

void check_high_cost_in_loops(int loopIterations, int segmentScore) {
    if (loopIterations > 1000 && segmentScore > 100000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high cost in loops!" << endl;
        abort();
    }
}

// Counter for calcAns calls
int calcAnsCallCounter = 0;

long long calcDp(int c, int l, int r, int cnt);

long long calcAns(int l, int r) {
    if (l >= r) return 0;
    long long &res = ans[l][r];
    if (res != -1) return res;
    res = 0;
    
    calcAnsCallCounter++;
    check_repeated_function_calls(calcAnsCallCounter); // Check for excessive calcAns calls

    for (int cnt = 1; cnt <= r - l; ++cnt) {
        int loopIterations = r - l;
        int segmentScore = a[cnt - 1];
        check_high_cost_in_loops(loopIterations, segmentScore); // Check for high cost in loops

        res = max(res, calcDp(0, l, r, cnt) + a[cnt - 1]);
        res = max(res, calcDp(1, l, r, cnt) + a[cnt - 1]);
    }
    return res;
}

long long calcDp(int c, int l, int r, int cnt) {
    if (cnt == 0) return calcAns(l, r);
    long long &res = dp[c][l][r][cnt];
    if (res != -1) return res;
    res = -INF;
    
    int recursionDepth = r - l;
    int branchingFactor = r - l;
    check_recursion_depth_and_branching(recursionDepth, branchingFactor); // Check for recursion depth and branching

    for (int i = l; i < r; ++i) {
        if (c == s[i] - '0')
            res = max(res, calcAns(l, i) + calcDp(c, i + 1, r, cnt - 1));
    }
    return res;
}

int main() {
    cin >> n >> s;
    for (int i = 0; i < n; ++i) cin >> a[i];
    memset(dp, -1, sizeof dp);
    memset(ans, -1, sizeof ans);
    cout << calcAns(0, n) << endl;
    return 0;
}
```

### Comments on Check Placement:
- **`check_recursion_depth_and_branching`:** This is placed inside the `calcDp` function, where recursion depth and branching are directly relevant.
- **`check_repeated_function_calls`:** This is monitored by incrementing a counter in `calcAns` and checking against a threshold.
- **`check_high_cost_in_loops`:** This check is placed inside the loop in `calcAns` to monitor high-cost iterations, taking into account the segment score. 

These checks help guard against known performance bottlenecks identified during analysis, making the code more robust to similar slowdowns in future runs.

