system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 105;
int n;
long long a[N], f[N][N][2][N];
int c[N];
void cmax(long long &x, long long y) { x = max(y, x); }
int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (int i = 1; i <= n; i++) {
    char ch;
    cin >> ch;
    c[i] = ch - '0';
  }
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    for (int j = 0; j < i; j++) a[i] = max(a[j] + a[i - j], a[i]);
  }
  memset(f, -0x3f, sizeof(f));
  for (int i = 1; i <= n; i++) {
    f[i][i][0][0] = f[i][i][1][0] = a[1];
    f[i][i][c[i]][1] = 0;
  }
  for (int len = 2; len <= n; len++)
    for (int i = 1; i + len - 1 <= n; i++) {
      int j = i + len - 1;
      for (int k = 0; k <= n; k++) {
        for (int cut = i; cut < j; cut++) {
          if (k)
            cmax(f[i][j][0][k], f[i][cut][0][k - 1] + f[cut + 1][j][0][1]),
                cmax(f[i][j][1][k], f[i][cut][1][k - 1] + f[cut + 1][j][1][1]);
          cmax(f[i][j][0][k], f[i][cut][0][k] + f[cut + 1][j][0][0]);
          cmax(f[i][j][1][k], f[i][cut][1][k] + f[cut + 1][j][0][0]);
          cmax(f[i][j][0][0], f[i][j][0][k] + a[k]);
          cmax(f[i][j][0][0], f[i][j][1][k] + a[k]);
        }
        for (int cut = j; cut < k; cut++) {
          if (k)
            cmax(f[i][j][0][k], f[i][cut][0][1] + f[cut + 1][j][0][k - 1]),
                cmax(f[i][j][1][k], f[i][cut][1][1] + f[cut + 1][j][1][k - 1]);
          cmax(f[i][j][0][k], f[i][cut][0][0] + f[cut + 1][j][0][k]);
          cmax(f[i][j][1][k], f[i][cut][0][0] + f[cut + 1][j][1][k]);
          cmax(f[i][j][0][0], f[i][j][0][k] + a[k]);
          cmax(f[i][j][0][0], f[i][j][1][k] + a[k]);
        }
      }
      f[i][j][1][0] = f[i][j][0][0];
    }
  cout << f[1][n][0][0] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 1 1 2 1 1 1 1


(G.2) Fast Input

5
00111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 105; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long a[N], f[N][N][2][N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int c[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void cmax(long long &x, long long y) { x = max(y, x); } /* line 7 slow_hit_count: 1015870, fast_hit_count: 770 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(false); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 13 slow_hit_count: 31, fast_hit_count: 6 */
    char ch; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> ch; /* line 15 slow_hit_count: 30, fast_hit_count: 5 */
    c[i] = ch - '0'; /* line 16 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 31, fast_hit_count: 6 */
    cin >> a[i]; /* line 19 slow_hit_count: 30, fast_hit_count: 5 */
    for (int j = 0; j < i; j++) a[i] = max(a[j] + a[i - j], a[i]); /* line 20 slow_hit_count: 495, fast_hit_count: 20 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  memset(f, -0x3f, sizeof(f)); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 23 slow_hit_count: 31, fast_hit_count: 6 */
    f[i][i][0][0] = f[i][i][1][0] = a[1]; /* line 24 slow_hit_count: 30, fast_hit_count: 5 */
    f[i][i][c[i]][1] = 0; /* line 25 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (int len = 2; len <= n; len++) /* line 27 slow_hit_count: 30, fast_hit_count: 5 */
    for (int i = 1; i + len - 1 <= n; i++) { /* line 28 slow_hit_count: 464, fast_hit_count: 14 */
      int j = i + len - 1; /* line 29 slow_hit_count: 435, fast_hit_count: 10 */
      for (int k = 0; k <= n; k++) { /* line 30 slow_hit_count: 13920, fast_hit_count: 70 */
        for (int cut = i; cut < j; cut++) { /* line 31 slow_hit_count: 152830, fast_hit_count: 180 */
          if (k) /* line 32 slow_hit_count: 139345, fast_hit_count: 120 */
            cmax(f[i][j][0][k], f[i][cut][0][k - 1] + f[cut + 1][j][0][1]), /* line 33 slow_hit_count: 134850, fast_hit_count: 100 */
                cmax(f[i][j][1][k], f[i][cut][1][k - 1] + f[cut + 1][j][1][1]); /* line 34 slow_hit_count: 134850, fast_hit_count: 100 */
          cmax(f[i][j][0][k], f[i][cut][0][k] + f[cut + 1][j][0][0]); /* line 35 slow_hit_count: 139345, fast_hit_count: 120 */
          cmax(f[i][j][1][k], f[i][cut][1][k] + f[cut + 1][j][0][0]); /* line 36 slow_hit_count: 139345, fast_hit_count: 120 */
          cmax(f[i][j][0][0], f[i][j][0][k] + a[k]); /* line 37 slow_hit_count: 139345, fast_hit_count: 120 */
          cmax(f[i][j][0][0], f[i][j][1][k] + a[k]); /* line 38 slow_hit_count: 139345, fast_hit_count: 120 */
        } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        for (int cut = j; cut < k; cut++) { /* line 40 slow_hit_count: 44950, fast_hit_count: 75 */
          if (k) /* line 41 slow_hit_count: 31465, fast_hit_count: 15 */
            cmax(f[i][j][0][k], f[i][cut][0][1] + f[cut + 1][j][0][k - 1]), /* line 42 slow_hit_count: 31465, fast_hit_count: 15 */
                cmax(f[i][j][1][k], f[i][cut][1][1] + f[cut + 1][j][1][k - 1]); /* line 43 slow_hit_count: 31465, fast_hit_count: 15 */
          cmax(f[i][j][0][k], f[i][cut][0][0] + f[cut + 1][j][0][k]); /* line 44 slow_hit_count: 31465, fast_hit_count: 15 */
          cmax(f[i][j][1][k], f[i][cut][0][0] + f[cut + 1][j][1][k]); /* line 45 slow_hit_count: 31465, fast_hit_count: 15 */
          cmax(f[i][j][0][0], f[i][j][0][k] + a[k]); /* line 46 slow_hit_count: 31465, fast_hit_count: 15 */
          cmax(f[i][j][0][0], f[i][j][1][k] + a[k]); /* line 47 slow_hit_count: 31465, fast_hit_count: 15 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      f[i][j][1][0] = f[i][j][0][0]; /* line 50 slow_hit_count: 435, fast_hit_count: 10 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  cout << f[1][n][0][0] << endl; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we first need to carefully analyze the hit counts for each line of code when run with both the fast and slow inputs, identify patterns that could be causing the slowdown, and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts from the slow and fast runs, we can identify which lines are significantly more active during the slow run:

1. **Line 7 (cmax function)**: The `cmax` function is hit 1,015,870 times in the slow run compared to just 770 times in the fast run. This function is critical because it performs the actual logic of updating the maximum score.

2. **Line 30-38 and Line 40-47 (Nested loops)**: The nested loops in these lines are executed significantly more times in the slow run, indicating that the dynamic programming recursion is deeply exploring possible subproblems.

3. **Line 31 and Line 40 (Inner loop for cuts)**: The `cut` loop within these nested loops is heavily executed, meaning that the combinations of subproblems are being recalculated excessively.

4. **Line 33-38 and Line 42-47**: These lines are called inside the nested loop structure, and given their high hit counts, they are likely recalculating and comparing many potential solutions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the performance bottleneck can be characterized by the nature of the operations within the nested loops and how they interact with the input values:

1. **Invariant 1: Recursion Depth and Subproblem Combinations**
   - **Natural Language Description**: "If the dynamic programming solution involves deeply nested loops with a high number of subproblem evaluations, especially with high branching factors, the program may slow down significantly."
   - **Contextual Explanation**: Given that the dynamic programming table `f[i][j][c][k]` dimensions are being filled extensively, the recursive exploration of subproblem combinations (especially with high potential branching for different lengths `k`) is costly.

2. **Invariant 2: High Value of Points Array**
   - **Natural Language Description**: "If the points array `a` contains values that allow frequent recombination yielding high scores, the exploration of potential combinations may become extensive and slow."
   - **Contextual Explanation**: The array `a` determines the potential score for each substring length. If these values are large or configured such that recombinations frequently yield better scores, the decision tree explored by the dynamic programming approach grows larger.

3. **Invariant 3: Dense Patterns in Input String**
   - **Natural Language Description**: "If the input string contains dense, repeating patterns, the dynamic programming solution might need to evaluate many similar subproblem configurations, leading to slow execution."
   - **Contextual Explanation**: The nature of repeating groups of '0's or '1's can dramatically increase the number of states that need to be evaluated, particularly if many substrings can potentially be removed to optimize the score.

These invariants characterize conditions that lead to slow execution by capturing how the recursive and combinatorial nature of the solution is exacerbated by specific input configurations and operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checker Code

Here, we will translate the previously derived natural language invariants into C++ checker code snippets. These will help detect performance bottlenecks at runtime.

#### Invariant 1: Recursion Depth and Subproblem Combinations
```cpp
void check_recursion_depth(int len, int k, int n) {
    if (len > 20 && k > n / 2) {  // Assuming a threshold for deep recursion & branching
        cerr << "Warning: Performance bottleneck due to deep recursion and high branching factor!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Value of Points Array
```cpp
void check_points_array(const long long a[], int n) {
    for (int i = 1; i <= n; i++) {
        if (a[i] > 500000000) {  // Threshold can be set to half of the maximum allowed value for a[i]
            cerr << "Warning: Performance bottleneck due to high value in points array!" << endl;
            abort();
        }
    }
}
```

#### Invariant 3: Dense Patterns in Input String
```cpp
void check_dense_patterns(const int c[], int n) {
    int consecutive = 1;
    for (int i = 2; i <= n; i++) {
        if (c[i] == c[i-1]) {
            consecutive++;
            if (consecutive > n / 4) {  // Assume dense patterns occur if a sequence exceeds a quarter of n
                cerr << "Warning: Performance bottleneck due to dense patterns in input string!" << endl;
                abort();
            }
        } else {
            consecutive = 1;
        }
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Now, let's integrate these checkers into the provided program. We'll place the checks at appropriate points in the code to ensure they do not add unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 105;
int n;
long long a[N], f[N][N][2][N];
int c[N];

void cmax(long long &x, long long y) { x = max(y, x); }

// Checkers for performance invariants
void check_recursion_depth(int len, int k, int n) {
    if (len > 20 && k > n / 2) {
        cerr << "Warning: Performance bottleneck due to deep recursion and high branching factor!" << endl;
        abort();
    }
}

void check_points_array(const long long a[], int n) {
    for (int i = 1; i <= n; i++) {
        if (a[i] > 500000000) {
            cerr << "Warning: Performance bottleneck due to high value in points array!" << endl;
            abort();
        }
    }
}

void check_dense_patterns(const int c[], int n) {
    int consecutive = 1;
    for (int i = 2; i <= n; i++) {
        if (c[i] == c[i-1]) {
            consecutive++;
            if (consecutive > n / 4) {
                cerr << "Warning: Performance bottleneck due to dense patterns in input string!" << endl;
                abort();
            }
        } else {
            consecutive = 1;
        }
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n;
    for (int i = 1; i <= n; i++) {
        char ch;
        cin >> ch;
        c[i] = ch - '0';
    }

    // Check for dense patterns in input string
    check_dense_patterns(c, n);

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        for (int j = 0; j < i; j++) a[i] = max(a[j] + a[i - j], a[i]);
    }

    // Check for high values in points array
    check_points_array(a, n);

    memset(f, -0x3f, sizeof(f));
    for (int i = 1; i <= n; i++) {
        f[i][i][0][0] = f[i][i][1][0] = a[1];
        f[i][i][c[i]][1] = 0;
    }
    for (int len = 2; len <= n; len++) {
        for (int i = 1; i + len - 1 <= n; i++) {
            int j = i + len - 1;
            for (int k = 0; k <= n; k++) {
                check_recursion_depth(len, k, n);  // Check for deep recursion and branching

                for (int cut = i; cut < j; cut++) {
                    if (k)
                        cmax(f[i][j][0][k], f[i][cut][0][k - 1] + f[cut + 1][j][0][1]),
                        cmax(f[i][j][1][k], f[i][cut][1][k - 1] + f[cut + 1][j][1][1]);
                    cmax(f[i][j][0][k], f[i][cut][0][k] + f[cut + 1][j][0][0]);
                    cmax(f[i][j][1][k], f[i][cut][1][k] + f[cut + 1][j][0][0]);
                    cmax(f[i][j][0][0], f[i][j][0][k] + a[k]);
                    cmax(f[i][j][0][0], f[i][j][1][k] + a[k]);
                }
                for (int cut = j; cut < k; cut++) {
                    if (k)
                        cmax(f[i][j][0][k], f[i][cut][0][1] + f[cut + 1][j][0][k - 1]),
                        cmax(f[i][j][1][k], f[i][cut][1][1] + f[cut + 1][j][1][k - 1]);
                    cmax(f[i][j][0][k], f[i][cut][0][0] + f[cut + 1][j][0][k]);
                    cmax(f[i][j][1][k], f[i][cut][0][0] + f[cut + 1][j][1][k]);
                    cmax(f[i][j][0][0], f[i][j][0][k] + a[k]);
                    cmax(f[i][j][0][0], f[i][j][1][k] + a[k]);
                }
            }
            f[i][j][1][0] = f[i][j][0][0];
        }
    }
    cout << f[1][n][0][0] << endl;
    return 0;
}
```

### Comments:
- **Dense Pattern Checker**: Placed after reading the input string to catch patterns early.
- **Points Array Check**: Conducted after reading the array to avoid setting up costly conditions in loops.
- **Recursion Depth Check**: Integrated within the nested loop to monitor for excessive recursion and branching during execution.

