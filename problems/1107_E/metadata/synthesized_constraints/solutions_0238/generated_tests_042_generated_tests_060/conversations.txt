system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const long long INFF = (long long)1e15;
const int mod = 998244353;
const int MXN = (int)1e2 + 7;
char s[MXN];
long long a[MXN];
int b[MXN];
long long dp[MXN][MXN][MXN][2];
long long val[MXN << 1];
int main() {
  int n;
  scanf("%d %s", &n, s + 1);
  for (int i = 1; i <= n; i++) scanf("%lld", a + i);
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j < i; j++) a[i] = max(a[i], a[j] + a[i - j]);
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      for (int k = 0; k <= n; k++) {
        dp[i][j][k][0] = dp[i][j][k][1] = -INFF;
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    int v = s[i] - '0';
    dp[i][i][0][v] = a[1];
    dp[i][i][1][v] = 0;
    dp[i][i][0][v ^ 1] = a[1];
  }
  for (int len = 2; len <= n; len++) {
    for (int ll = 1; ll + len - 1 <= n; ll++) {
      int rr = ll + len - 1;
      for (int p = 0; p < 2; p++) {
        for (int num = 0; num <= n; num++) {
          if (s[ll] - '0' == p && num) {
            long long v = dp[ll][ll][1][p] + dp[ll + 1][rr][num - 1][p];
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
          }
          for (int mid = ll; mid < rr; mid++) {
            long long v = dp[ll][mid][num][p] + dp[mid + 1][rr][0][p];
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
            v = dp[ll][mid][0][p] + dp[mid + 1][rr][num][p];
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
          }
          for (int j = num; j >= 0; j--) {
            dp[ll][rr][j][p] =
                max(dp[ll][rr][j][p], dp[ll][rr][num][p] + a[num - j]);
          }
        }
        dp[ll][rr][0][p ^ 1] = max(dp[ll][rr][0][p ^ 1], dp[ll][rr][0][p]);
      }
    }
  }
  printf("%lld\n", dp[1][n][0][1]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
011010010010010010010010010000
3 1 1000000010 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 2 0 1 1 1 1 2 1 1 1 1


(G.2) Fast Input

5
01111
8 1 60 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-13; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = acos(-1); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)1e9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFF = (long long)1e15; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 998244353; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int MXN = (int)1e2 + 7; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
char s[MXN]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long a[MXN]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int b[MXN]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MXN][MXN][MXN][2]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long val[MXN << 1]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %s", &n, s + 1); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%lld", a + i); /* line 17 slow_hit_count: 31, fast_hit_count: 6 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 31, fast_hit_count: 6 */
    for (int j = 1; j < i; j++) a[i] = max(a[i], a[j] + a[i - j]); /* line 19 slow_hit_count: 465, fast_hit_count: 15 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 21 slow_hit_count: 31, fast_hit_count: 6 */
    for (int j = 1; j <= n; j++) { /* line 22 slow_hit_count: 930, fast_hit_count: 30 */
      for (int k = 0; k <= n; k++) { /* line 23 slow_hit_count: 28800, fast_hit_count: 175 */
        dp[i][j][k][0] = dp[i][j][k][1] = -INFF; /* line 24 slow_hit_count: 27900, fast_hit_count: 150 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 28 slow_hit_count: 31, fast_hit_count: 6 */
    int v = s[i] - '0'; /* line 29 slow_hit_count: 30, fast_hit_count: 5 */
    dp[i][i][0][v] = a[1]; /* line 30 slow_hit_count: 30, fast_hit_count: 5 */
    dp[i][i][1][v] = 0; /* line 31 slow_hit_count: 30, fast_hit_count: 5 */
    dp[i][i][0][v ^ 1] = a[1]; /* line 32 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int len = 2; len <= n; len++) { /* line 34 slow_hit_count: 30, fast_hit_count: 5 */
    for (int ll = 1; ll + len - 1 <= n; ll++) { /* line 35 slow_hit_count: 464, fast_hit_count: 14 */
      int rr = ll + len - 1; /* line 36 slow_hit_count: 435, fast_hit_count: 10 */
      for (int p = 0; p < 2; p++) { /* line 37 slow_hit_count: 1305, fast_hit_count: 30 */
        for (int num = 0; num <= n; num++) { /* line 38 slow_hit_count: 27840, fast_hit_count: 140 */
          if (s[ll] - '0' == p && num) { /* line 39 slow_hit_count: 26970, fast_hit_count: 120 */
            long long v = dp[ll][ll][1][p] + dp[ll + 1][rr][num - 1][p]; /* line 40 slow_hit_count: 13050, fast_hit_count: 50 */
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v); /* line 41 slow_hit_count: 13050, fast_hit_count: 50 */
          } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
          for (int mid = ll; mid < rr; mid++) { /* line 43 slow_hit_count: 305660, fast_hit_count: 360 */
            long long v = dp[ll][mid][num][p] + dp[mid + 1][rr][0][p]; /* line 44 slow_hit_count: 278690, fast_hit_count: 240 */
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v); /* line 45 slow_hit_count: 278690, fast_hit_count: 240 */
            v = dp[ll][mid][0][p] + dp[mid + 1][rr][num][p]; /* line 46 slow_hit_count: 278690, fast_hit_count: 240 */
            dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v); /* line 47 slow_hit_count: 278690, fast_hit_count: 240 */
          } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
          for (int j = num; j >= 0; j--) { /* line 49 slow_hit_count: 458490, fast_hit_count: 540 */
            dp[ll][rr][j][p] = /* line 50 slow_hit_count: 431520, fast_hit_count: 420 */
                max(dp[ll][rr][j][p], dp[ll][rr][num][p] + a[num - j]); /* line 51 slow_hit_count: 431520, fast_hit_count: 420 */
          } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        dp[ll][rr][0][p ^ 1] = max(dp[ll][rr][0][p ^ 1], dp[ll][rr][0][p]); /* line 54 slow_hit_count: 870, fast_hit_count: 20 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", dp[1][n][0][1]); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue, let's break down the problem into two phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - Lines within the nested loops in the dynamic programming setup (lines 19, 24, 40-47, 49-51) have significantly higher hit counts in the slow input compared to the fast input.
   - Particularly, lines 43-47 (nested loops dealing with `dp` array updates) and lines 49-51 (another loop handling maximization of points) show a large disparity in hit counts, indicating potential performance bottlenecks.

2. **Insights on Code Interactions:**
   - The code uses a four-dimensional DP array (`dp[i][j][k][p]`) which is filled using multiple nested loops. Given the constraints, this results in numerous iterations, particularly when `n` is large.
   - The function and nested loops seem to calculate the maximum points Vasya can score by iteratively evaluating all possible substrings of the string `s` and updating the DP table.

3. **Data Structures and Input Constraints:**
   - The DP table's dimensions are directly tied to `n`, and operations within the nested loops are heavily dependent on the current state of the DP table and the input structure. This results in increased complexity and running time for larger `n` or more complex strings with more potential substrings.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Invariant 1: Large Search Space for Substrings**
   - **Natural Language Description:** "When the string contains numerous or lengthy contiguous substrings of the same character, the search space for optimal substring removals increases significantly, leading to a slowdown."
   - **Reasoning:** The nested loops hinge on evaluating possible substrings, and a string with many long contiguous segments leads to more possible combinations and consequently more iterations.

2. **Invariant 2: High-Dimensional Dynamic Programming Overhead**
   - **Natural Language Description:** "If the input length `n` is large, the dynamic programming table operations become computationally expensive due to the four-dimensional nature of the state space, especially with extensive nested looping."
   - **Reasoning:** The four-dimensional DP table results in `O(n^4)` operations, causing a significant slowdown as `n` approaches the upper constraint limit.

3. **Invariant 3: Repeated Scanning of String Segments**
   - **Natural Language Description:** "When the string structure allows numerous overlapping segments of equal characters, the program's repeated evaluations and updates of overlapping DP states contribute to the slowdown."
   - **Reasoning:** Overlapping segments require multiple updates in the DP table, further exacerbating performance concerns due to repeated evaluations of similar states.

### Conclusion

These invariants highlight the structural complexity and overlapping evaluations inherent in the DP approach for this problem, pinpointing the potential for slowdowns given particular input characteristics without specific input values. These insights guide the need for optimizations, potentially through reducing dimensionality or improving loop efficiency.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has a string s of length n consisting only of digits 0 and 1. Also he has an array a of length n. 

Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets a_x points for erasing substring of length x.

Vasya wants to maximize his total points, so help him with this! 

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.

The second line contains string s, consisting only of digits 0 and 1.

The third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i.

Output

Print one integer — the maximum total points Vasya can get.

Examples

Input


7
1101001
3 4 9 100 1 2 3


Output


109


Input


5
10101
3 10 15 15 15


Output


23

Note

In the first example the optimal sequence of erasings is: 1101001 → 111001 → 11101 → 1111 → ∅.

In the second example the optimal sequence of erasings is: 10101 → 1001 → 11 → ∅.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the previously defined performance-characterizing invariants into runtime checks in C++.

1. **Invariant 1: Large Search Space for Substrings**
   - **Condition:** If there are many long contiguous substrings of the same character.
   - **Checker Code:**

```cpp
void check_contiguous_substrings(const string &s, int threshold) {
    int max_length = 0;
    int current_length = 1;
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] == s[i - 1]) {
            ++current_length;
            max_length = max(max_length, current_length);
        } else {
            current_length = 1;
        }
    }
    if (max_length > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to long contiguous substrings!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High-Dimensional Dynamic Programming Overhead**
   - **Condition:** If the input length `n` is large.
   - **Checker Code:**

```cpp
void check_large_n(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large input size!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Repeated Scanning of String Segments**
   - **Condition:** If the structure allows many overlapping segments of equal characters.
   - **Checker Code:**

```cpp
void check_overlapping_segments(const string &s, int segment_threshold) {
    int segment_count = 0;
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] == s[i - 1]) {
            ++segment_count;
            if (segment_count > segment_threshold) {
                cerr << "Warning: Performance bottleneck due to overlapping segments!" << endl;
                abort();
            }
        } else {
            segment_count = 0;
        }
    }
}
```

### Phase 4: Integrate Checkers into the C++ Program

Now, let's integrate these checks into the original C++ code to ensure they trigger under potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MXN = (int)1e2 + 7;
char s[MXN];
long long a[MXN];
long long dp[MXN][MXN][MXN][2];

void check_contiguous_substrings(const string &s, int threshold) {
    int max_length = 0;
    int current_length = 1;
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] == s[i - 1]) {
            ++current_length;
            max_length = max(max_length, current_length);
        } else {
            current_length = 1;
        }
    }
    if (max_length > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to long contiguous substrings!" << endl;
        abort();
    }
}

void check_large_n(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large input size!" << endl;
        abort();
    }
}

void check_overlapping_segments(const string &s, int segment_threshold) {
    int segment_count = 0;
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] == s[i - 1]) {
            ++segment_count;
            if (segment_count > segment_threshold) {
                cerr << "Warning: Performance bottleneck due to overlapping segments!" << endl;
                abort();
            }
        } else {
            segment_count = 0;
        }
    }
}

int main() {
    int n;
    scanf("%d %s", &n, s + 1);
    for (int i = 1; i <= n; i++) scanf("%lld", a + i);

    // Check for large input size
    check_large_n(n, 50); // where 50 is a reasonable threshold given n <= 100

    // Check for long contiguous substrings
    check_contiguous_substrings(s + 1, 10); // arbitrary threshold for demonstration

    // Check for many overlapping segments
    check_overlapping_segments(s + 1, 10); // arbitrary threshold for demonstration

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j < i; j++) a[i] = max(a[i], a[j] + a[i - j]);
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            for (int k = 0; k <= n; k++) {
                dp[i][j][k][0] = dp[i][j][k][1] = -INFF;
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        int v = s[i] - '0';
        dp[i][i][0][v] = a[1];
        dp[i][i][1][v] = 0;
        dp[i][i][0][v ^ 1] = a[1];
    }
    for (int len = 2; len <= n; len++) {
        for (int ll = 1; ll + len - 1 <= n; ll++) {
            int rr = ll + len - 1;
            for (int p = 0; p < 2; p++) {
                for (int num = 0; num <= n; num++) {
                    if (s[ll] - '0' == p && num) {
                        long long v = dp[ll][ll][1][p] + dp[ll + 1][rr][num - 1][p];
                        dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
                    }
                    for (int mid = ll; mid < rr; mid++) {
                        long long v = dp[ll][mid][num][p] + dp[mid + 1][rr][0][p];
                        dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
                        v = dp[ll][mid][0][p] + dp[mid + 1][rr][num][p];
                        dp[ll][rr][num][p] = max(dp[ll][rr][num][p], v);
                    }
                    for (int j = num; j >= 0; j--) {
                        dp[ll][rr][j][p] =
                            max(dp[ll][rr][j][p], dp[ll][rr][num][p] + a[num - j]);
                    }
                }
                dp[ll][rr][0][p ^ 1] = max(dp[ll][rr][0][p ^ 1], dp[ll][rr][0][p]);
            }
        }
    }
    printf("%lld\n", dp[1][n][0][1]);
    return 0;
}
```

### Explanation:

- The checkers are added before the nested loops to avoid performance degradation.
- Each checker has a reasonable threshold based on the problem constraints. The thresholds and conditions are chosen to highlight potential performance bottlenecks without relying on exact input values.
- These checks provide guidance on when the algorithm's complexity might lead to significant slowdowns, helping to identify problematic inputs.

