system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;
vector<int> divs(int x) {
  vector<int> res;
  for (int i = 1; i * i <= x; i++) {
    if (x % i == 0) {
      res.push_back(i);
      if (x / i != i) res.push_back(x / i);
    }
  }
  reverse(res.begin(), res.end());
  return res;
}
int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++) cin >> a[i];
  vector<int> d(*max_element(a.begin(), a.end()) + 1, 0);
  d[0] = 1;
  for (int i = 0; i < n; i++) {
    for (int j : divs(a[i])) d[j] = (d[j] % MOD + d[j - 1] % MOD) % MOD;
  }
  int ans = 0;
  for (int i = 1; i < d.size(); i++) ans = (ans % MOD + d[i] % MOD) % MOD;
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
758890 37311 92074 618927 991732 219352 8737 541583 552857 299118 773097 33928


(G.2) Fast Input

12
758890 37311 92074 618927 520505 219352 8737 541583 552857 299118 773097 33928


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> divs(int x) { /* line 4 slow_hit_count: 12, fast_hit_count: 12 */
  vector<int> res; /* line 5 slow_hit_count: 12, fast_hit_count: 12 */
  for (int i = 1; i * i <= x; i++) { /* line 6 slow_hit_count: 6808, fast_hit_count: 6534 */
    if (x % i == 0) { /* line 7 slow_hit_count: 6796, fast_hit_count: 6522 */
      res.push_back(i); /* line 8 slow_hit_count: 54, fast_hit_count: 52 */
      if (x / i != i) res.push_back(x / i); /* line 9 slow_hit_count: 54, fast_hit_count: 52 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  reverse(res.begin(), res.end()); /* line 12 slow_hit_count: 12, fast_hit_count: 12 */
  return res; /* line 13 slow_hit_count: 12, fast_hit_count: 12 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) cin >> a[i]; /* line 19 slow_hit_count: 13, fast_hit_count: 13 */
  vector<int> d(*max_element(a.begin(), a.end()) + 1, 0); /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
  d[0] = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 22 slow_hit_count: 13, fast_hit_count: 13 */
    for (int j : divs(a[i])) d[j] = (d[j] % MOD + d[j - 1] % MOD) % MOD; /* line 23 slow_hit_count: 120, fast_hit_count: 116 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < d.size(); i++) ans = (ans % MOD + d[i] % MOD) % MOD; /* line 26 slow_hit_count: 991733, fast_hit_count: 773098 */
  cout << ans; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `divs` function is called 12 times for both inputs. The key difference lies in the loop inside the `divs` function (line 6), which is hit more often for the slow input: 6808 times compared to 6534 times for the fast input.
   - The loop on line 26 within `main`, which accumulates the answer, is hit 991,733 times for the slow input versus 773,098 times for the fast input.

2. **Potential Bottlenecks:**
   - The `divs` function's loop (lines 6-9) seems to be a bottleneck where the number of iterations is dependent on the factors of each element in the array `a`.
   - The final loop (line 26) where the answer is accumulated highlights a significant difference in execution frequency, suggesting that larger numbers or numbers with many divisors might be driving the slowdown.

3. **Interaction with Data Structures:**
   - The array `d` is significantly sized based on the maximum element in the array `a`. The frequency of access to this array in line 23 and its size affects the loop on line 26, correlating with the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can form the following performance-characterizing invariants in natural language:

1. **Invariant Related to Number Divisors:**
   - "If the elements of the array have large values with many divisors, especially those close to the maximum value of `a_i`, the computation of divisors becomes expensive and increases hit counts in the divisor function."

2. **Invariant Related to Array Size:**
   - "When elements in the array `a` include very large numbers or numbers with high divisor counts, the array `d` becomes large, leading to excessive iterations in the summation loop, which significantly slows down the computation."

3. **Invariant Related to Final Accumulation:**
   - "If the maximum value of `a_i` is close to the upper limit (10^6), the length of the dynamic programming array `d` grows significantly, and the final accumulation loop may run for an extended period, causing performance degradation."

These invariants abstractly describe the conditions leading to performance issues without relying on specific numeric values from the slow input. They instead focus on the characteristics of the input that can trigger a slowdown, such as large numbers with many divisors, aligning with the problem constraints (e.g., `n <= 100,000`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants into C++ checker functions:

1. **Checker for Large Number of Divisors:**

   This checker will ensure that if elements in the array `a` have many divisors, it will trigger a warning.

   ```cpp
   void check_large_divisors(int divisorCount) {
       if (divisorCount > 1000) { // Threshold based on a reasonable divisor count
           cerr << "Warning: Performance bottleneck condition triggered - large number of divisors!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Large Dynamic Array:**

   This checker will verify if the dynamically sized array `d` becomes too large, potentially causing performance issues.

   ```cpp
   void check_large_dynamic_array(int arraySize) {
       if (arraySize > 500000) { // Assuming a threshold for array size
           cerr << "Warning: Performance bottleneck condition triggered - large dynamic array size!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Accumulation Loop:**

   This checker will ensure that the summation loop does not iterate excessively due to large `max_element`.

   ```cpp
   void check_accumulation_iterations(int iterations) {
       if (iterations > 1000000) { // Threshold for excessive iterations
           cerr << "Warning: Performance bottleneck condition triggered - excessive accumulation iterations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's instrument the original C++ code with these checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;

vector<int> divs(int x) {
  vector<int> res;
  for (int i = 1; i * i <= x; i++) {
    if (x % i == 0) {
      res.push_back(i);
      if (x / i != i) res.push_back(x / i);
    }
  }
  reverse(res.begin(), res.end());
  return res;
}

// Checkers for performance-characterizing invariants
void check_large_divisors(int divisorCount) {
    if (divisorCount > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of divisors!" << endl;
        abort();
    }
}

void check_large_dynamic_array(int arraySize) {
    if (arraySize > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered - large dynamic array size!" << endl;
        abort();
    }
}

void check_accumulation_iterations(int iterations) {
    if (iterations > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive accumulation iterations!" << endl;
        abort();
    }
}

int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++) cin >> a[i];
  vector<int> d(*max_element(a.begin(), a.end()) + 1, 0);
  
  // Check for large dynamic array
  check_large_dynamic_array(d.size());
  
  d[0] = 1;
  for (int i = 0; i < n; i++) {
    vector<int> divisors = divs(a[i]);
    
    // Check for large number of divisors
    check_large_divisors(divisors.size());
    
    for (int j : divisors) {
      d[j] = (d[j] % MOD + d[j - 1] % MOD) % MOD;
    }
  }
  
  int ans = 0;
  int iterationCount = 0;
  for (int i = 1; i < d.size(); i++) {
    ans = (ans % MOD + d[i] % MOD) % MOD;
    iterationCount++;
  }
  
  // Check for excessive accumulation iterations
  check_accumulation_iterations(iterationCount);
  
  cout << ans;
}
```

### Notes:
- **Placement of Checkers**: The checkers are placed after relevant operations, such as after computing divisors and initializing the dynamic array `d`.
- **Thresholds**: The thresholds are chosen based on reasonable assumptions for potential bottlenecks, ensuring they align with input constraints yet alert of problematic cases.
- **Checker Function Calls**: These calls are outside of tight loops to avoid additional runtime overhead.

This instrumented code should provide warnings and insights when the performance bottlenecks are likely to occur, assisting in further analysis and optimization.

