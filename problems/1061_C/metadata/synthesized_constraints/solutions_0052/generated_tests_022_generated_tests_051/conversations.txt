system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
int maxa;
int a[100005];
int dp[1000005];
vector<int> d[1000005];
void sieve(int x) {
  for (int i = 1; i <= x; i++) {
    for (int j = 1; j <= x / i; j++) {
      d[i * j].push_back(i);
    }
  }
}
int cmp(int x, int y) { return x > y; }
int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
    maxa = max(maxa, a[i]);
  }
  dp[0] = 1;
  sieve(maxa);
  for (int i = 1; i <= n; i++) {
    for (int j = d[a[i]].size() - 1; j >= 0; j--) {
      int x = d[a[i]][j];
      dp[x] += dp[x - 1];
      dp[x] %= 1000000007;
    }
  }
  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    ans += dp[i];
  }
  ans %= 1000000007;
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13
300181 586155 96820 776974 965896 799976 192615 725571 487013 603301 832 626376 583769


(G.2) Fast Input

13
300181 586155 96820 776974 581793 799976 192615 725571 487013 603301 832 626376 583769


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int maxa; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[100005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1000005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> d[1000005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void sieve(int x) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= x; i++) { /* line 9 slow_hit_count: 965897, fast_hit_count: 799977 */
    for (int j = 1; j <= x / i; j++) { /* line 10 slow_hit_count: 14425886, fast_hit_count: 11797044 */
      d[i * j].push_back(i); /* line 11 slow_hit_count: 13459990, fast_hit_count: 10997068 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
int cmp(int x, int y) { return x > y; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 14, fast_hit_count: 14 */
    scanf("%d", &a[i]); /* line 19 slow_hit_count: 13, fast_hit_count: 13 */
    maxa = max(maxa, a[i]); /* line 20 slow_hit_count: 13, fast_hit_count: 13 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0] = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  sieve(maxa); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 24 slow_hit_count: 14, fast_hit_count: 14 */
    for (int j = d[a[i]].size() - 1; j >= 0; j--) { /* line 25 slow_hit_count: 187, fast_hit_count: 187 */
      int x = d[a[i]][j]; /* line 26 slow_hit_count: 174, fast_hit_count: 174 */
      dp[x] += dp[x - 1]; /* line 27 slow_hit_count: 174, fast_hit_count: 174 */
      dp[x] %= 1000000007; /* line 28 slow_hit_count: 174, fast_hit_count: 174 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 14, fast_hit_count: 14 */
    ans += dp[i]; /* line 33 slow_hit_count: 13, fast_hit_count: 13 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  ans %= 1000000007; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks and understand why the program runs slower for the slow input compared to the fast input, we'll follow the tasks laid out. We'll analyze the code and hit count data to derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The line `for (int i = 1; i <= x; i++)` (line 9) in the `sieve` function is hit significantly more often in the slow input (965,897 times) compared to the fast input (799,977 times).
   - The inner loop `for (int j = 1; j <= x / i; j++)` (line 10) also sees a large number of executions, with the slow input causing 14,425,886 hits versus 11,797,044 for the fast input. This is a significant increase, suggesting that this line of code is contributing to the slowdown.
   - The line `d[i * j].push_back(i)` (line 11) is hit approximately 13,459,990 times for the slow input, compared to 10,997,068 times for the fast input.

2. **Pinpoint Inefficiencies:**
   - The inefficiency likely arises from the nested loop structure within the `sieve` function. As `x` increases, the inner loop runs more iterations, which implies a quadratic behavior relative to the size of `x`.

3. **Data Structure Interaction:**
   - The vector `d[]` has elements appended multiple times, likely because of a high number of divisors for the elements in the array `a` with high values, causing a significant increase in operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are some performance-characterizing invariants in natural language:

1. **High Maximum Value in Input Array:**
   - **Description**: If the maximum value in the input array `a` is high, the sieve function's inner loop (`j <= x / i`) will execute many more times, causing performance to degrade.
   - **Invariant**: “When the maximum element in the array `a` is large, particularly close to the maximum constraint (1,000,000), the sieve function will perform excessive operations, leading to a slowdown.”

2. **High Number of Divisors for Elements:**
   - **Description**: If elements of the array `a` have a large number of divisors, the sieve function will add many elements to the divisor lists, increasing computational overhead.
   - **Invariant**: “When elements of the array `a` have many divisors, especially when combined with high maximum value, the divisor list building in the sieve function becomes a bottleneck.”

3. **Large Input Size and High Array Values:**
   - **Description**: A combination of a large input size `n` and high values in `a` will exacerbate the nested loops in the sieve function.
   - **Invariant**: “If the input size `n` is large and the values in the array `a` are close to their maximum possible values, the sieve function will execute a prohibitive number of operations.”

These performance-characterizing invariants focus on conditions that lead to slow execution and can be used to optimize or refactor the code to handle such cases more efficiently. They do not rely on specific values but rather on the structure and constraints of the input, making them useful for future scenarios that may cause similar slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3 by translating the natural language invariants into checker code in C++.

### Phase 3: C++ Checker Code Implementation

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets that will check those conditions at runtime:

1. **High Maximum Value in Input Array:**
    ```cpp
    void check_max_value_invariant(int max_value) {
        if (max_value > 900000) { // A high threshold close to the maximum constraint
            cerr << "Warning: Performance bottleneck condition triggered - maximum array value is high!" << endl;
            abort();
        }
    }
    ```

2. **High Number of Divisors for Elements:**
    ```cpp
    void check_divisors_invariant(const vector<int>& divisors) {
        for (size_t i = 0; i < divisors.size(); ++i) {
            if (divisors[i] > 1000) { // Arbitrary threshold for excessive number of divisors
                cerr << "Warning: Performance bottleneck condition triggered - element has many divisors!" << endl;
                abort();
            }
        }
    }
    ```

3. **Large Input Size and High Array Values:**
    ```cpp
    void check_large_input_invariant(int n, int max_value) {
        if (n > 90000 && max_value > 800000) { // Combined condition for large n and high values
            cerr << "Warning: Performance bottleneck condition triggered - large input size and high values!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate Checker Code into the Original Program

Now we'll place these checks in the relevant parts of the original program.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
int maxa;
int a[100005];
int dp[1000005];
vector<int> d[1000005];

void sieve(int x) {
    for (int i = 1; i <= x; i++) {
        for (int j = 1; j <= x / i; j++) {
            d[i * j].push_back(i);
        }
    }
}

// Checkers based on derived performance invariants

// Check for high maximum value in the array
void check_max_value_invariant(int max_value) {
    if (max_value > 900000) { // A high threshold close to the maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered - maximum array value is high!" << endl;
        abort();
    }
}

// Check for high number of divisors for any element
void check_divisors_invariant(const vector<int>& divisors) {
    for (size_t i = 0; i < divisors.size(); ++i) {
        if (divisors[i] > 1000) { // Arbitrary threshold for excessive number of divisors
            cerr << "Warning: Performance bottleneck condition triggered - element has many divisors!" << endl;
            abort();
        }
    }
}

// Check for large input size combined with high array values
void check_large_input_invariant(int n, int max_value) {
    if (n > 90000 && max_value > 800000) { // Combined condition for large n and high values
        cerr << "Warning: Performance bottleneck condition triggered - large input size and high values!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        maxa = max(maxa, a[i]);
    }

    // Insert check after reading inputs
    check_max_value_invariant(maxa);
    check_large_input_invariant(n, maxa);
    
    dp[0] = 1;
    sieve(maxa);
    
    for (int i = 1; i <= n; i++) {
        check_divisors_invariant(d[a[i]]);
        for (int j = d[a[i]].size() - 1; j >= 0; j--) {
            int x = d[a[i]][j];
            dp[x] += dp[x - 1];
            dp[x] %= 1000000007;
        }
    }
    
    long long ans = 0;
    for (int i = 1; i <= n; i++) {
        ans += dp[i];
    }
    ans %= 1000000007;
    cout << ans;
}
```

### Explanation of Inserted Checks

- **`check_max_value_invariant(maxa)`**: Checks right after reading inputs to ensure the maximum value in the array is not too high.
- **`check_large_input_invariant(n, maxa)`**: Combines `n` and `maxa` to catch conditions where both are large, potentially triggering slowdowns.
- **`check_divisors_invariant(d[a[i]])`**: Checks within the main loop to ensure no element's divisor list becomes excessively large, which could indicate a performance issue.

