system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class X, class Y>
void amax(X& x, const Y& y) {
  if (x < y) x = y;
}
template <class X, class Y>
void amin(X& x, const Y& y) {
  if (x > y) x = y;
}
const int INF = 1e9 + 10;
const long long INFL = (long long)1e18 + 10;
const int MAX = 1e6 + 10;
const int MOD = 1e9 + 7;
int n;
int a[MAX];
int f[MAX];
vector<int> dv[MAX];
int add(int a, int b) { return (a + b) % MOD; }
void process() {
  cin >> n;
  for (int i = 1; i <= n; i++) cin >> a[i];
  int maxa = *max_element(a + 1, a + n + 1);
  for (int i = 1; i <= maxa; i++)
    for (int j = 1; j <= maxa / i; j++) dv[i * j].push_back(i);
  f[0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = int((dv[a[i]]).size()) - 1; j >= 0; j--) {
      f[dv[a[i]][j]] = add(f[dv[a[i]][j]], f[dv[a[i]][j] - 1]);
    }
  }
  int res = 0;
  for (int i = 1; i <= n; i++) res = add(res, f[i]);
  cout << res;
}
int main() {
  ios_base::sync_with_stdio(false);
  process();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13
300181 586155 96820 776974 965896 799976 192615 725571 487013 603301 832 626376 583769


(G.2) Fast Input

13
300181 586155 96820 776974 581793 799976 192615 725571 487013 603301 832 626376 583769


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class X, class Y> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void amax(X& x, const Y& y) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < y) x = y; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class X, class Y> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void amin(X& x, const Y& y) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) x = y; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9 + 10; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFL = (long long)1e18 + 10; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 1e6 + 10; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAX]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int f[MAX]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> dv[MAX]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int add(int a, int b) { return (a + b) % MOD; } /* line 19 slow_hit_count: 187, fast_hit_count: 187 */
void process() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i]; /* line 22 slow_hit_count: 14, fast_hit_count: 14 */
  int maxa = *max_element(a + 1, a + n + 1); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= maxa; i++) /* line 24 slow_hit_count: 965897, fast_hit_count: 799977 */
    for (int j = 1; j <= maxa / i; j++) dv[i * j].push_back(i); /* line 25 slow_hit_count: 14425886, fast_hit_count: 11797044 */
  f[0] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 27 slow_hit_count: 14, fast_hit_count: 14 */
    for (int j = int((dv[a[i]]).size()) - 1; j >= 0; j--) { /* line 28 slow_hit_count: 187, fast_hit_count: 187 */
      f[dv[a[i]][j]] = add(f[dv[a[i]][j]], f[dv[a[i]][j] - 1]); /* line 29 slow_hit_count: 174, fast_hit_count: 174 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) res = add(res, f[i]); /* line 33 slow_hit_count: 14, fast_hit_count: 14 */
  cout << res; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  process(); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Given the code and the hit count information, we can analyze the performance bottlenecks and derive performance-characterizing invariants. The major difference between the fast and slow input runs is observed in lines 24 and 25, where the divisor lists are prepared. The slow input leads to significantly more hits, indicating a slowdown when processing certain inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 24-25**: These lines are responsible for populating the divisor list `dv` for each integer up to `maxa`. The hit count difference suggests that the division loop (`for (int j = 1; j <= maxa / i; j++)`) is significantly more intensive for the slow input.

2. **Dynamic Divisor Calculation**: The slowdown is caused by the number of divisors processed for each element in the array, which is related to the range and distribution of values in the array `a`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive natural language invariants that explain the slowdown conditions:

1. **High Maximum Element Value**:
   - **Invariant**: "When the maximum element in the array `a` is large, the divisor computation for each number can become expensive, leading to a slowdown."
   - **Explanation**: The value of `maxa` directly influences how many times the inner loop on line 25 executes, as it defines the range of divisors computed.

2. **Large Number of Divisors**:
   - **Invariant**: "If the numbers in the array have a high number of divisors, the computation of possible divisors results in a substantial increase in processing time."
   - **Explanation**: Numbers with many divisors (especially composite numbers with small prime factors) cause the inner loop to execute more iterations.

3. **Value Distribution and Density**:
   - **Invariant**: "When the numbers in the array are densely packed around certain values, the divisor calculation can lead to overlapping computations, causing inefficiencies."
   - **Explanation**: A dense concentration of values results in repeated divisor calculations for similar numbers, worsening performance due to redundant operations.

4. **High frequency of large composite numbers**:
   - **Invariant**: "If the array contains many large composite numbers, this increases the divisor count for each, leading to repeated operations and potential slowdowns."
   - **Explanation**: Composite numbers, especially those with small prime factors, increase divisor checks, which is computationally expensive.

By considering these invariants, one can proactively analyze input scenarios that might result in performance degradation, allowing for optimizations or alternate strategies to be employed in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an integer array a_1, a_2, …, a_n.

The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b.

Array b_1, b_2, …, b_k is called to be good if it is not empty and for every i (1 ≤ i ≤ k) b_i is divisible by i.

Find the number of good subsequences in a modulo 10^9 + 7. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array a has exactly 2^n - 1 different subsequences (excluding an empty subsequence).

Input

The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the array a.

The next line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).

Output

Print exactly one integer — the number of good subsequences taken modulo 10^9 + 7.

Examples

Input

2
1 2


Output

3

Input

5
2 2 1 22 14


Output

13

Note

In the first example, all three non-empty possible subsequences are good: \{1\}, \{1, 2\}, \{2\}

In the second example, the possible good subsequences are: \{2\}, \{2, 2\}, \{2, 22\}, \{2, 14\}, \{2\}, \{2, 22\}, \{2, 14\}, \{1\}, \{1, 22\}, \{1, 14\}, \{22\}, \{22, 14\}, \{14\}.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here are the C++ checker code snippets for each invariant identified:

1. **High Maximum Element Value**
```cpp
void check_max_element_invariant(int maxa) {
    if (maxa > 1e6) {
        cerr << "Warning: High maximum element value detected!" << endl;
        abort();
    }
}
```

2. **Large Number of Divisors**
```cpp
void check_large_divisor_count_invariant(int element, int divisor_count_threshold) {
    if (dv[element].size() > divisor_count_threshold) {
        cerr << "Warning: Large number of divisors for element detected!" << endl;
        abort();
    }
}
```

3. **Value Distribution and Density**
```cpp
void check_value_density_invariant(const vector<int>& a, int density_threshold) {
    map<int, int> frequency;
    for (int num : a) {
        frequency[num]++;
    }
    for (const auto& pair : frequency) {
        if (pair.second > density_threshold) {
            cerr << "Warning: High density of value detected!" << endl;
            abort();
        }
    }
}
```

4. **High Frequency of Large Composite Numbers**
```cpp
void check_large_composite_invariant(const vector<int>& a, int composite_threshold) {
    int composite_count = 0;
    for (int num : a) {
        if (dv[num].size() > 2) { // More than two divisors indicates it's composite
            composite_count++;
        }
    }
    if (composite_count > composite_threshold) {
        cerr << "Warning: High frequency of large composite numbers detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ code with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;
const int MAX = 1e6 + 10;
int n;
int a[MAX];
int f[MAX];
vector<int> dv[MAX];

int add(int a, int b) { return (a + b) % MOD; }

// High maximum element value invariant
void check_max_element_invariant(int maxa) {
    if (maxa > 1e6) {
        cerr << "Warning: High maximum element value detected!" << endl;
        abort();
    }
}

// Large number of divisors invariant
void check_large_divisor_count_invariant(int element, int divisor_count_threshold) {
    if (dv[element].size() > divisor_count_threshold) {
        cerr << "Warning: Large number of divisors for element detected!" << endl;
        abort();
    }
}

// Value distribution and density invariant
void check_value_density_invariant(const vector<int>& a, int density_threshold) {
    map<int, int> frequency;
    for (int num : a) {
        frequency[num]++;
    }
    for (const auto& pair : frequency) {
        if (pair.second > density_threshold) {
            cerr << "Warning: High density of value detected!" << endl;
            abort();
        }
    }
}

// High frequency of large composite numbers invariant
void check_large_composite_invariant(const vector<int>& a, int composite_threshold) {
    int composite_count = 0;
    for (int num : a) {
        if (dv[num].size() > 2) { // More than two divisors indicates it's composite
            composite_count++;
        }
    }
    if (composite_count > composite_threshold) {
        cerr << "Warning: High frequency of large composite numbers detected!" << endl;
        abort();
    }
}

void process() {
    cin >> n;
    vector<int> input_a(n);
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        input_a[i - 1] = a[i];
    }
    int maxa = *max_element(a + 1, a + n + 1);
    
    // Insert check for high maximum element value
    check_max_element_invariant(maxa);
    
    // Precompute divisor lists
    for (int i = 1; i <= maxa; i++)
        for (int j = 1; j <= maxa / i; j++) dv[i * j].push_back(i);

    // Insert checks related to divisors
    for (int i = 1; i <= maxa; i++) {
        check_large_divisor_count_invariant(i, 1000); // Arbitrary threshold
    }
    
    // Check value density in the input array
    check_value_density_invariant(input_a, 10); // Arbitrary density threshold
    
    // Check for large composite numbers
    check_large_composite_invariant(input_a, 50); // Arbitrary composite threshold

    f[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = int((dv[a[i]]).size()) - 1; j >= 0; j--) {
            f[dv[a[i]][j]] = add(f[dv[a[i]][j]], f[dv[a[i]][j] - 1]);
        }
    }

    int res = 0;
    for (int i = 1; i <= n; i++) res = add(res, f[i]);
    cout << res;
}

int main() {
    ios_base::sync_with_stdio(false);
    process();
}
```

### Explanation

- **Placement of Checks**: Each check is placed strategically after input processing and before the computational loops that could potentially trigger the slowdown conditions.
- **Threshold Values**: Arbitrary thresholds are set for demonstration purposes. These should be fine-tuned based on practical performance testing and profiling.
- **Abort on Trigger**: If any invariant condition is met, the program will output a warning and abort to help identify the performance bottleneck during testing or fuzzing.

