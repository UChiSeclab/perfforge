system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long sq(long long m) {
  long long left = 0, right = m + 1;
  while (right - left > 1ll) {
    long long mid = (left + right) / 2;
    if (mid * mid <= m) {
      left = mid;
    } else {
      right = mid;
    }
  }
  return left;
}
signed main() {
  long long n;
  cin >> n;
  vector<long long> a(n);
  long long num = 0;
  for (long long i = 0; i < n; i++) {
    cin >> a[i];
    long long m = sq(a[i]);
    if (m * m == a[i]) {
      num += 1;
    }
  }
  if (num == n / 2) {
    cout << 0 << endl;
  } else if (num > n / 2) {
    vector<long long> vars;
    for (long long i = 0; i < n; i++) {
      long long m = sq(a[i]);
      if (m * m == a[i]) {
        if (a[i] == 0) {
          vars.push_back(2);
        } else {
          vars.push_back(1);
        }
      }
    }
    sort(vars.begin(), vars.end());
    long long res = 0;
    for (long long i = 0; i < num - n / 2; i++) {
      res += vars[i];
    }
    cout << res << endl;
  } else {
    vector<long long> vars;
    for (long long i = 0; i < n; i++) {
      long long m = sq(a[i]);
      if (m * m != a[i]) {
        vars.push_back(min(a[i] - m * m, (m + 1) * (m + 1) - a[i]));
      }
    }
    sort(vars.begin(), vars.end());
    long long res = 0;
    for (long long i = 0; i < n / 2 - num; i++) {
      res += vars[i];
    }
    cout << res << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
444272562 25 25 0 49 73291074 64 100 638092144 756033694 0 700405846 16 25 25 100 36 25 269573395 288578186 366853675 36 81 49 4 0 25 49 9 64 0 4 36 36 49 0 64 64 532899768 1 64 9 549673690 25 64 4 817183855 25 146555318 36 495564252 100 49 9 36 100 49 100 4 100 9 64 9 432227412 756728309 25 0 332072516 100 64 0 92286436 49 0 81 49 0 49 0 100 409473792 25 814343057 81 1 16 0 16 886097466 64 492116229 81 270298243 64 81 100 0 49 16 16


(G.2) Fast Input

4
13 9 30 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long sq(long long m) { /* line 3 slow_hit_count: 200, fast_hit_count: 4 */
  long long left = 0, right = m + 1; /* line 4 slow_hit_count: 200, fast_hit_count: 4 */
  while (right - left > 1ll) { /* line 5 slow_hit_count: 2158, fast_hit_count: 17 */
    long long mid = (left + right) / 2; /* line 6 slow_hit_count: 1958, fast_hit_count: 13 */
    if (mid * mid <= m) { /* line 7 slow_hit_count: 1958, fast_hit_count: 13 */
      left = mid; /* line 8 slow_hit_count: 656, fast_hit_count: 5 */
    } else { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      right = mid; /* line 10 slow_hit_count: 1302, fast_hit_count: 8 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return left; /* line 13 slow_hit_count: 200, fast_hit_count: 4 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> a(n); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  long long num = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 20 slow_hit_count: 101, fast_hit_count: 5 */
    cin >> a[i]; /* line 21 slow_hit_count: 100, fast_hit_count: 4 */
    long long m = sq(a[i]); /* line 22 slow_hit_count: 100, fast_hit_count: 4 */
    if (m * m == a[i]) { /* line 23 slow_hit_count: 100, fast_hit_count: 4 */
      num += 1; /* line 24 slow_hit_count: 78, fast_hit_count: 2 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (num == n / 2) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
  } else if (num > n / 2) { /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
    vector<long long> vars; /* line 30 slow_hit_count: 2, fast_hit_count: 0 */
    for (long long i = 0; i < n; i++) { /* line 31 slow_hit_count: 101, fast_hit_count: 0 */
      long long m = sq(a[i]); /* line 32 slow_hit_count: 100, fast_hit_count: 0 */
      if (m * m == a[i]) { /* line 33 slow_hit_count: 100, fast_hit_count: 0 */
        if (a[i] == 0) { /* line 34 slow_hit_count: 78, fast_hit_count: 0 */
          vars.push_back(2); /* line 35 slow_hit_count: 12, fast_hit_count: 0 */
        } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
          vars.push_back(1); /* line 37 slow_hit_count: 66, fast_hit_count: 0 */
        } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    sort(vars.begin(), vars.end()); /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
    long long res = 0; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 0; i < num - n / 2; i++) { /* line 43 slow_hit_count: 29, fast_hit_count: 0 */
      res += vars[i]; /* line 44 slow_hit_count: 28, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    vector<long long> vars; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < n; i++) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      long long m = sq(a[i]); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      if (m * m != a[i]) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        vars.push_back(min(a[i] - m * m, (m + 1) * (m + 1) - a[i])); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    sort(vars.begin(), vars.end()); /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    long long res = 0; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < n / 2 - num; i++) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      res += vars[i]; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the given C program runs slowly for the slow input and derive performance-characterizing invariants, we can break down the process into two phases as outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The line-level hit counts show that the function `sq(long long m)` and the associated loop are hit significantly more often in the slow input compared to the fast input. Specifically, lines 5, 6, 7, 8, and 10 are hit much more in the slow input.
   - The loop within the `sq` function is executed repeatedly, indicating that the binary search within this function is a hotspot for performance issues.

2. **Pinpoint Performance Bottlenecks:**
   - The loop `while (right - left > 1ll)` in the `sq` function is the primary area where performance degrades. This loop is essentially a binary search to find the integer square root of `m`.
   - The repeated execution suggests that for certain inputs, this binary search is performed an excessive number of times, which might be due to large values of `a[i]`.

3. **Interaction with Data Structures:**
   - The interaction primarily happens with the array `a` and involves computing whether each element is a perfect square. The repeated evaluations for large values in the array lead to higher hit counts in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**
   - "When the number of piles (`n`) is large, the binary search for determining square roots (`sq` function) is invoked frequently, especially on large numbers. This causes the algorithm to slow down significantly as many iterations are needed to find the square root."

2. **Abstraction Without Specific Numeric Values:**
   - "If the number of candies in each pile involves large values, particularly near the upper bounds of the input constraints, the binary search method for square root calculations incurs a high computational cost, leading to slow execution."

3. **Correlate Conditions to Input Patterns:**
   - "Performance degradation is observed when there are many large numbers in the candy piles that are not perfect squares, causing the program to repeatedly compute square roots with numerous iterations due to the high values."

4. **Suggest Broad Thresholds:**
   - Considering the input constraints, an invariant could be: "If the array of piles contains many values near the maximum limit allowed by constraints, particularly with `n` approaching its upper bound (e.g., `n` > 100,000), the frequency of invoking the `sq` function and the corresponding binary search iterations can lead to significant slowdowns."

### Recommended Invariant Implementations

Here are some potential code checks or conditions that could be implemented to detect when the program might enter these slow paths:

```cpp
void check_large_values_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: large_values_invariant triggered - excessive number of large-value piles" << endl;
        abort();
    }
}

// Usage before invoking the core algorithm
check_large_values_invariant(n > 100000 && /* proportion of large values in array `a` is high */);
```

### Conclusion

The main performance bottleneck arises from the repeated calculation of square roots for potentially large numbers in the candy piles. By recognizing patterns where such calculations are excessive, we can predict and possibly mitigate performance slowdowns under specific input conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we need to implement runtime checks that can detect when the program may slow down. Here, we'll focus on detecting when the binary search in the `sq` function could become a bottleneck due to large values in the pile of candies. 

Here are the C++ code snippets implementing these checks:

```cpp
void check_large_values_invariant(const std::vector<long long>& a, long long n) {
    int largeValueThreshold = 1e8; // Arbitrary threshold for large values
    int largeValueCount = 0;
    for (long long value : a) {
        if (value >= largeValueThreshold) {
            largeValueCount++;
        }
    }
    // Trigger if more than half of the piles have large values
    if (largeValueCount > n / 2) {
        cerr << "Warning: large_values_invariant triggered - excessive number of large-value piles" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, we will integrate these checks into the provided C++ program. We place the check after reading the input to ensure it runs before any computationally expensive operations occur. This placement helps identify slow paths early in the program's execution without adding overhead in tight loops.

Here's the modified C++ program with integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long sq(long long m) {
    long long left = 0, right = m + 1;
    while (right - left > 1ll) {
        long long mid = (left + right) / 2;
        if (mid * mid <= m) {
            left = mid;
        } else {
            right = mid;
        }
    }
    return left;
}

// Check for large values in the input array
void check_large_values_invariant(const vector<long long>& a, long long n) {
    int largeValueThreshold = 1e8; // Arbitrary threshold for large values
    int largeValueCount = 0;
    for (long long value : a) {
        if (value >= largeValueThreshold) {
            largeValueCount++;
        }
    }
    // Trigger if more than half of the piles have large values
    if (largeValueCount > n / 2) {
        cerr << "Warning: large_values_invariant triggered - excessive number of large-value piles" << endl;
        abort();
    }
}

signed main() {
    long long n;
    cin >> n;
    vector<long long> a(n);
    
    for (long long i = 0; i < n; i++) {
        cin >> a[i];
    }

    // Integrate the performance invariant check
    check_large_values_invariant(a, n);

    long long num = 0;
    for (long long i = 0; i < n; i++) {
        long long m = sq(a[i]);
        if (m * m == a[i]) {
            num += 1;
        }
    }
    if (num == n / 2) {
        cout << 0 << endl;
    } else if (num > n / 2) {
        vector<long long> vars;
        for (long long i = 0; i < n; i++) {
            long long m = sq(a[i]);
            if (m * m == a[i]) {
                if (a[i] == 0) {
                    vars.push_back(2);
                } else {
                    vars.push_back(1);
                }
            }
        }
        sort(vars.begin(), vars.end());
        long long res = 0;
        for (long long i = 0; i < num - n / 2; i++) {
            res += vars[i];
        }
        cout << res << endl;
    } else {
        vector<long long> vars;
        for (long long i = 0; i < n; i++) {
            long long m = sq(a[i]);
            if (m * m != a[i]) {
                vars.push_back(min(a[i] - m * m, (m + 1) * (m + 1) - a[i]));
            }
        }
        sort(vars.begin(), vars.end());
        long long res = 0;
        for (long long i = 0; i < n / 2 - num; i++) {
            res += vars[i];
        }
        cout << res << endl;
    }
    return 0;
}
```

### Explanation

- **Check Placement:** The check is placed right after reading the input values. This ensures that any potential performance issues are flagged early, before the program enters any expensive computation.
- **Threshold:** An arbitrary threshold of `1e8` is used to define what constitutes a "large" number of candies. This threshold can be adjusted based on further profiling or analysis.
- **Abort:** If the condition is met (i.e., more than half the piles contain large values), the program will output a warning and abort, helping a fuzzer or developer identify the slow path condition.

