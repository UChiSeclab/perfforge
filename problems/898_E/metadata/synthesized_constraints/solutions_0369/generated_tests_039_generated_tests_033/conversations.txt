system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 200623;
bool is_sqr(ll x) {
  ll sq = sqrt(x);
  return (sq * sq == x);
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  ll n;
  cin >> n;
  ll a[N], sqr = 0, zero = 0;
  vector<ll> sqrv, other, dis;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (is_sqr(a[i])) {
      sqr++;
      if (!a[i]) zero++;
    } else
      other.push_back(a[i]);
  }
  if (sqr >= (n >> 1)) {
    ll non_zero_sqr = sqr - zero;
    ll val = sqr - (n >> 1);
    ll mn = min(non_zero_sqr, val);
    non_zero_sqr -= mn;
    val -= mn;
    cout << mn + (val << 1) << '\n';
    return 0;
  }
  for (int i = 0; i <= 31630; i++) {
    sqrv.push_back(i * i);
  }
  for (int i = 0; i < other.size(); i++) {
    ll lo = lower_bound(sqrv.begin(), sqrv.end(), other[i]) - sqrv.begin();
    ll mn = abs(sqrv[lo] - other[i]);
    if (lo) {
      mn = min(mn, abs(sqrv[lo - 1] - other[i]));
    }
    dis.push_back(mn);
  }
  sort(dis.begin(), dis.end());
  ll req = (n >> 1) - sqr;
  ll ans = 0;
  for (int i = 0; i < req; i++) {
    ans += dis[i];
  }
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
121 11 78 118 45 100 1 0 54 78


(G.2) Fast Input

10
121 11 78 81 45 100 1 0 54 78


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 200623; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool is_sqr(ll x) { /* line 5 slow_hit_count: 10, fast_hit_count: 10 */
  ll sq = sqrt(x); /* line 6 slow_hit_count: 10, fast_hit_count: 10 */
  return (sq * sq == x); /* line 7 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  ll n; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ll a[N], sqr = 0, zero = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  vector<ll> sqrv, other, dis; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 18 slow_hit_count: 11, fast_hit_count: 11 */
    cin >> a[i]; /* line 19 slow_hit_count: 10, fast_hit_count: 10 */
    if (is_sqr(a[i])) { /* line 20 slow_hit_count: 10, fast_hit_count: 10 */
      sqr++; /* line 21 slow_hit_count: 4, fast_hit_count: 5 */
      if (!a[i]) zero++; /* line 22 slow_hit_count: 4, fast_hit_count: 5 */
    } else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      other.push_back(a[i]); /* line 24 slow_hit_count: 6, fast_hit_count: 5 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (sqr >= (n >> 1)) { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    ll non_zero_sqr = sqr - zero; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    ll val = sqr - (n >> 1); /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    ll mn = min(non_zero_sqr, val); /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
    non_zero_sqr -= mn; /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    val -= mn; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
    cout << mn + (val << 1) << '\n'; /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 31630; i++) { /* line 35 slow_hit_count: 31632, fast_hit_count: 0 */
    sqrv.push_back(i * i); /* line 36 slow_hit_count: 31631, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < other.size(); i++) { /* line 38 slow_hit_count: 7, fast_hit_count: 0 */
    ll lo = lower_bound(sqrv.begin(), sqrv.end(), other[i]) - sqrv.begin(); /* line 39 slow_hit_count: 6, fast_hit_count: 0 */
    ll mn = abs(sqrv[lo] - other[i]); /* line 40 slow_hit_count: 6, fast_hit_count: 0 */
    if (lo) { /* line 41 slow_hit_count: 6, fast_hit_count: 0 */
      mn = min(mn, abs(sqrv[lo - 1] - other[i])); /* line 42 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    dis.push_back(mn); /* line 44 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  sort(dis.begin(), dis.end()); /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  ll req = (n >> 1) - sqr; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  ll ans = 0; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < req; i++) { /* line 49 slow_hit_count: 2, fast_hit_count: 0 */
    ans += dis[i]; /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Comparison of Line-Level Hit Counts**:
   - Lines 35 to 36 show significantly high hit counts for the slow input. Specifically, the loop iterating over all possible square numbers from `0` to `31630` (total 31631 iterations) is executed. This loop does not appear in the fast input run.
   - Lines 38 to 44 also have notable hit counts for the slow input but none for the fast input. This suggests a computation over the `other` vector, which stores non-square numbers from the input.

2. **Pinpointing Lines/Functions with More Hits**:
   - Line 35 to 36: Generating all possible square numbers up to 31630. This precomputation is expensive and only occurs in the slow input path.
   - Line 39: Using `lower_bound` to find the closest square number for each non-square element in `other`.
   - Lines 40 to 42: Calculating the minimal distance between a non-square number and its nearest square number.

3. **Inferences**:
   - The appearance of the `sqrv` population loop and the subsequent processing of `other` indicate that the slow path is triggered when the initial count of square numbers (`sqr`) is less than `n/2`.
   - The `lower_bound` operation over a potentially large vector `sqrv` (of size 31631) can be computationally expensive, especially if many non-square numbers are processed.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Natural Language Statements Describing Conditions for Slowdown**:

    - **Invariant #1**: "If the initial count of piles containing a square number is less than half of the total piles, the program enters a slow path where it precomputes all possible square numbers up to a large limit and processes each non-square pile."
  
    - **Invariant #2**: "When the number of non-square piles is significant, and each is compared against a precomputed list of possible square numbers, the execution time can increase substantially due to repeated binary searches."
  
    - **Invariant #3**: "If many piles are far from being a square of an integer, resulting in large adjustments, the computation of minimal moves involves costly distance calculations, contributing to the slowdown."

2. **Threshold Values**:
   - The threshold is abstractly when `sqr < n / 2`, causing the extensive processing of the `other` list.
   - The large iteration over the `sqrv` vector and subsequent processing indicates the potential for a large computational overhead when handling many non-square numbers.

3. **Abstract Conditions to Detect Future Slow Scenarios**:
   - These statements capture the essence of the problem's complexity and how input characteristics (such as the distribution of square and non-square piles) influence performance, without relying on fixed numeric thresholds from specific inputs.

By considering these invariants, a fuzzer can predict scenarios that may lead to slow performance by targeting inputs that skew the initial distribution of square and non-square piles, pushing the solution into its computationally expensive branch.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implementing Checkers for Natural Language Invariants**

Let's translate the natural language invariants derived earlier into C++ checker code:

1. **Invariant #1**: If the initial count of piles containing a square number is less than half of the total piles, the program enters a slow path.
   ```cpp
   void check_square_distribution(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - insufficient square numbers initially!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2**: When a significant number of non-square piles need to be processed against a precomputed list, the code path is expensive due to repeated binary searches.
   ```cpp
   void check_non_square_processing(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - extensive non-square processing!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3**: If many piles are far from being a square of an integer, resulting in large adjustments, the computation of minimal moves involves costly distance calculations.
   ```cpp
   void check_distance_calculations(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - costly distance calculations needed!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrating Checkers into the Original Program**

Now we integrate these checkers at appropriate points in the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 200623;

bool is_sqr(ll x) {
    ll sq = sqrt(x);
    return (sq * sq == x);
}

// Checker Function for Invariant #1
void check_square_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient square numbers initially!" << endl;
        abort();
    }
}

// Checker Function for Invariant #2
void check_non_square_processing(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive non-square processing!" << endl;
        abort();
    }
}

// Checker Function for Invariant #3
void check_distance_calculations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - costly distance calculations needed!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    ll n;
    cin >> n;
    ll a[N], sqr = 0, zero = 0;
    vector<ll> sqrv, other, dis;

    for (int i = 0; i < n; i++) {
        cin >> a[i];
        if (is_sqr(a[i])) {
            sqr++;
            if (!a[i]) zero++;
        } else
            other.push_back(a[i]);
    }

    // Place check for Invariant #1 after counting squares
    check_square_distribution(sqr < (n >> 1));

    if (sqr >= (n >> 1)) {
        ll non_zero_sqr = sqr - zero;
        ll val = sqr - (n >> 1);
        ll mn = min(non_zero_sqr, val);
        non_zero_sqr -= mn;
        val -= mn;
        cout << mn + (val << 1) << '\n';
        return 0;
    }
  
    for (int i = 0; i <= 31630; i++) {
        sqrv.push_back(i * i);
    }

    // Place check for Invariant #2 before processing non-square numbers
    check_non_square_processing(!other.empty());

    for (int i = 0; i < other.size(); i++) {
        ll lo = lower_bound(sqrv.begin(), sqrv.end(), other[i]) - sqrv.begin();
        ll mn = abs(sqrv[lo] - other[i]);
        if (lo) {
            mn = min(mn, abs(sqrv[lo - 1] - other[i]));
        }
        dis.push_back(mn);
    }

    sort(dis.begin(), dis.end());
    ll req = (n >> 1) - sqr;
    ll ans = 0;

    // Place check for Invariant #3 before calculating minimal moves
    check_distance_calculations(req > 0 && !dis.empty());

    for (int i = 0; i < req; i++) {
        ans += dis[i];
    }
    cout << ans << '\n';
}
```

**Integration Explanation:**

- **Invariant #1**: The check is placed right after the initial counting of squares, before deciding whether to enter the slow path.
- **Invariant #2**: It is placed before starting the expensive non-square processing loop.
- **Invariant #3**: This check is placed just before calculating minimal moves, which involves sorted distances. 

These checks provide early warnings for performance bottlenecks, assisting in identifying critical input patterns that cause slow execution.

