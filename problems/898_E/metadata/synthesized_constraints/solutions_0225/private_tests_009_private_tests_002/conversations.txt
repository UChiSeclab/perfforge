system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, a[200010], b[200010];
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
  sort(&a[1], &a[n + 1]);
  int min, max, l = 1;
  min = (int)sqrt(a[1]);
  max = (int)sqrt(a[n]);
  for (int i = min; i <= max + 1; i++) {
    int x = i * i;
    while (a[l] <= x) {
      b[l] = x - a[l];
      l++;
      if (l == n + 1) break;
    }
    if (l == n + 1) break;
  }
  l = n;
  for (int i = max; i >= min; i--) {
    int x = i * i, y;
    while (a[l] >= x) {
      y = a[l] - x;
      if (y < b[l]) b[l] = y;
      l--;
      if (!l) break;
    }
    if (!l) break;
  }
  sort(&b[1], &b[n + 1]);
  long long ans = 0;
  int st = n / 2 + 1;
  for (; st <= n; st++) {
    if (b[st])
      break;
    else {
      if (!a[st])
        ans += 2;
      else
        ans += 1;
    }
  }
  n /= 2;
  for (int i = 1; i <= n; i++) ans += b[i];
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
0 1000000000


(G.2) Fast Input

2
0 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a[200010], b[200010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]); /* line 6 slow_hit_count: 3, fast_hit_count: 3 */
  sort(&a[1], &a[n + 1]); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int min, max, l = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  min = (int)sqrt(a[1]); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  max = (int)sqrt(a[n]); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = min; i <= max + 1; i++) { /* line 11 slow_hit_count: 31624, fast_hit_count: 3 */
    int x = i * i; /* line 12 slow_hit_count: 31624, fast_hit_count: 3 */
    while (a[l] <= x) { /* line 13 slow_hit_count: 31625, fast_hit_count: 4 */
      b[l] = x - a[l]; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
      l++; /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
      if (l == n + 1) break; /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (l == n + 1) break; /* line 18 slow_hit_count: 31624, fast_hit_count: 3 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  l = n; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = max; i >= min; i--) { /* line 21 slow_hit_count: 31623, fast_hit_count: 2 */
    int x = i * i, y; /* line 22 slow_hit_count: 31623, fast_hit_count: 2 */
    while (a[l] >= x) { /* line 23 slow_hit_count: 31624, fast_hit_count: 3 */
      y = a[l] - x; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
      if (y < b[l]) b[l] = y; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
      l--; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
      if (!l) break; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (!l) break; /* line 29 slow_hit_count: 31623, fast_hit_count: 2 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  sort(&b[1], &b[n + 1]); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int st = n / 2 + 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (; st <= n; st++) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    if (b[st]) /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      if (!a[st]) /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        ans += 2; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        ans += 1; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  n /= 2; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) ans += b[i]; /* line 45 slow_hit_count: 2, fast_hit_count: 2 */
  printf("%lld\n", ans); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Compare Line-level Hit Counts:**
   - The lines with significantly more hits for the slow input compared to the fast input are lines 11, 12, 13, 18, 21, 22, 23, and 29. These lines are part of the for-loops that iterate over a range of integers, calculating squares, and comparing them to the array of candies.

2. **Pinpoint Lines or Functions with More Hits:**
   - **Lines 11-18 (First Loop)**: This loop iterates from `min` to `max + 1`, where `min` is the square root of the smallest candy pile, and `max` is the square root of the largest candy pile. The operations inside the loop (particularly lines 13 and 18) are hit many times. The while-loop on line 13, in particular, has a `31625` hit count for the slow input.
   - **Lines 21-29 (Second Loop)**: Similarly, this loop iterates from `max` down to `min`, and also sees a significant number of iterations, especially lines 23 and 29.

3. **Inference Regarding Code and Data Interaction:**
   - The loops are designed to find the minimal number of operations needed to make candies in piles either a perfect square or not a perfect square. The high hit counts suggest that when the range between `min` and `max` is large, the loops iterate many times, which leads to a higher computational load.
   - The use of `sqrt(a[n])` and `sqrt(a[1])` as bounds implies that large differences between the largest and smallest elements in the sorted array `a[]` can significantly increase the number of iterations.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Large Range Between Smallest and Largest Elements:**
   - **Invariant:** "If the difference between the largest and smallest candy pile is large, particularly when it results in a large range of perfect squares to check, the number of iterations can significantly increase, causing slow performance."
   - **Explanation:** The loops are bounded by the square roots of the smallest and largest numbers; thus, a larger difference implies more squares to check, increasing computational time.

2. **Handling Large Values:**
   - **Invariant:** "If the pile contains very large numbers, especially approaching the upper limit of the input constraint, the calculation of square roots and subsequent operations may lead to increased iteration counts and slow down the program."
   - **Explanation:** Large values of `a[i]` result in a high value for `max`, which extends the range in the loops, leading to more iterations and more computations.

By focusing on these two conditions, we can abstractly understand the potential slowdowns in this algorithm without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants in C++**

Here, we'll write C++ code to check the previously identified performance bottlenecks.

1. **Large Range Between Smallest and Largest Elements:**
   - Since the range between the smallest and largest elements affects the number of iterations, we'll check if this range is large enough to cause performance issues.

```cpp
void check_large_range_invariant(int min, int max) {
    if ((max - min) > 100000) { // Example threshold to detect large range
        cerr << "Warning: Performance bottleneck condition triggered due to large range between smallest and largest elements!" << endl;
        abort();
    }
}
```

2. **Handling Large Values:**
   - Large values in the pile can lead to high computational overhead when calculating squares and comparisons.

```cpp
void check_large_values_invariant(int max_val) {
    if (max_val > 1000000) { // Example threshold for large values
        cerr << "Warning: Performance bottleneck condition triggered due to large values in the piles!" << endl;
        abort();
    }
}
```

**Phase 4: Integrate Checker Code into Original C++ Program**

Now, we'll integrate these checks into the original program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for large range between smallest and largest elements
void check_large_range_invariant(int min, int max) {
    if ((max - min) > 100000) { // Example threshold to detect large range
        cerr << "Warning: Performance bottleneck condition triggered due to large range between smallest and largest elements!" << endl;
        abort();
    }
}

// Check for large values in piles
void check_large_values_invariant(int max_val) {
    if (max_val > 1000000) { // Example threshold for large values
        cerr << "Warning: Performance bottleneck condition triggered due to large values in the piles!" << endl;
        abort();
    }
}

int main() {
    int n, a[200010], b[200010];
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    sort(&a[1], &a[n + 1]);

    int min = (int)sqrt(a[1]);
    int max = (int)sqrt(a[n]);

    // Insert check to catch large range between smallest and largest elements
    check_large_range_invariant(min, max);

    // Insert check to detect large values in pile
    check_large_values_invariant(a[n]);

    int l = 1;
    for (int i = min; i <= max + 1; i++) {
        int x = i * i;
        while (a[l] <= x) {
            b[l] = x - a[l];
            l++;
            if (l == n + 1) break;
        }
        if (l == n + 1) break;
    }

    l = n;
    for (int i = max; i >= min; i--) {
        int x = i * i, y;
        while (a[l] >= x) {
            y = a[l] - x;
            if (y < b[l]) b[l] = y;
            l--;
            if (!l) break;
        }
        if (!l) break;
    }

    sort(&b[1], &b[n + 1]);
    long long ans = 0;
    int st = n / 2 + 1;
    for (; st <= n; st++) {
        if (b[st])
            break;
        else {
            if (!a[st])
                ans += 2;
            else
                ans += 1;
        }
    }
    n /= 2;
    for (int i = 1; i <= n; i++) ans += b[i];
    printf("%lld\n", ans);
    return 0;
}
```

**Comments on Integration:**
- The `check_large_range_invariant` and `check_large_values_invariant` functions are added after sorting and calculating `min` and `max` values. This positioning ensures that the checks are performed before the computationally expensive loops begin.
- These checks will help identify scenarios where performance may degrade due to the reasons outlined in the invariants, without adding significant overhead to the program.

