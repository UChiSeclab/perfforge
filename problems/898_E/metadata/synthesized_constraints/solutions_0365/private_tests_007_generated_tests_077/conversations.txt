system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long closest_sq(long long num) {
  double sqrt_ = sqrt(num);
  int a1 = int(sqrt_);
  int a2 = int(sqrt_) + 1;
  long long ans1 = a1 * a1;
  long long ans2 = a2 * a2;
  if (num - ans1 > ans2 - num) {
    return ans2;
  } else {
    return ans1;
  }
}
int main() {
  int n;
  while (cin >> n) {
    vector<long long> a(n);
    vector<long long> d;
    int sq = 0;
    int not_sq = 0;
    int zeros = 0;
    for (int i = 0; i < n; ++i) {
      cin >> a[i];
      if (a[i] == 0) {
        zeros++;
      } else {
        long long closest = closest_sq(a[i]);
        if (closest != a[i]) {
          d.push_back(abs(closest - a[i]));
          not_sq++;
        } else {
          sq++;
        }
      }
    }
    int half = n / 2;
    if (sq + zeros == half) {
      cout << 0 << endl;
    } else if (sq + zeros > half) {
      if (zeros <= half) {
        cout << (sq + zeros - half) << endl;
      } else {
        cout << sq + 2 * (zeros - half) << endl;
      }
    } else {
      int cnt = not_sq - half;
      sort(d.begin(), d.end());
      long long ans = 0;
      for (int i = 0; i < cnt; ++i) {
        ans += d[i];
      }
      cout << ans << endl;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
444272562 25 25 0 49 73291074 64 100 638092144 756033694 0 700405846 16 25 25 100 36 25 269573395 288578186 366853675 36 81 49 4 0 25 49 9 64 0 4 36 36 49 0 64 64 532899768 1 64 9 549673690 25 64 4 817183855 25 146555318 36 495564252 100 49 9 36 100 49 100 4 100 9 64 9 432227412 756728309 25 0 332072516 100 64 0 92286436 49 0 81 49 0 49 0 100 409473792 25 814343057 81 1 16 0 16 886097466 64 492116229 81 270298243 64 81 100 0 49 16 16


(G.2) Fast Input

4
0 9 30 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long closest_sq(long long num) { /* line 3 slow_hit_count: 88, fast_hit_count: 2 */
  double sqrt_ = sqrt(num); /* line 4 slow_hit_count: 88, fast_hit_count: 2 */
  int a1 = int(sqrt_); /* line 5 slow_hit_count: 88, fast_hit_count: 2 */
  int a2 = int(sqrt_) + 1; /* line 6 slow_hit_count: 88, fast_hit_count: 2 */
  long long ans1 = a1 * a1; /* line 7 slow_hit_count: 88, fast_hit_count: 2 */
  long long ans2 = a2 * a2; /* line 8 slow_hit_count: 88, fast_hit_count: 2 */
  if (num - ans1 > ans2 - num) { /* line 9 slow_hit_count: 88, fast_hit_count: 2 */
    return ans2; /* line 10 slow_hit_count: 10, fast_hit_count: 0 */
  } else { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return ans1; /* line 12 slow_hit_count: 78, fast_hit_count: 2 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  int n; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> n) { /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    vector<long long> a(n); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    vector<long long> d; /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
    int sq = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    int not_sq = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    int zeros = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; ++i) { /* line 23 slow_hit_count: 101, fast_hit_count: 5 */
      cin >> a[i]; /* line 24 slow_hit_count: 100, fast_hit_count: 4 */
      if (a[i] == 0) { /* line 25 slow_hit_count: 100, fast_hit_count: 4 */
        zeros++; /* line 26 slow_hit_count: 12, fast_hit_count: 2 */
      } else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        long long closest = closest_sq(a[i]); /* line 28 slow_hit_count: 88, fast_hit_count: 2 */
        if (closest != a[i]) { /* line 29 slow_hit_count: 88, fast_hit_count: 2 */
          d.push_back(abs(closest - a[i])); /* line 30 slow_hit_count: 22, fast_hit_count: 1 */
          not_sq++; /* line 31 slow_hit_count: 22, fast_hit_count: 1 */
        } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
          sq++; /* line 33 slow_hit_count: 66, fast_hit_count: 1 */
        } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    int half = n / 2; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    if (sq + zeros == half) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
      cout << 0 << endl; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (sq + zeros > half) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
      if (zeros <= half) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
        cout << (sq + zeros - half) << endl; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
      } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        cout << sq + 2 * (zeros - half) << endl; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      int cnt = not_sq - half; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      sort(d.begin(), d.end()); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      long long ans = 0; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 0; i < cnt; ++i) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        ans += d[i]; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      cout << ans << endl; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information, let's analyze the code and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `closest_sq` function is called 88 times for the slow input and only 2 times for the fast input. This suggests that this function call is a significant contributor to the slowdown.
   - Line 23 (the loop iterating over the piles) is also hit 100 times for the slow input and only 4 times for the fast input, indicating more iterations are executed for the slow input.

2. **Code Segment Interactions:**
   - The `closest_sq` function computes the closest perfect square for each pile's candy count, which involves calculating the square root and comparing two squares. This operation is potentially expensive, especially being called within a loop.
   - The loop iterating over the candy piles does more work when the number of candies in piles is not already a perfect square, leading to increased calls to `closest_sq`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Frequent Calls to `closest_sq`:**
   - Natural Language Description: "If many piles of candies do not already contain a perfect square number of candies, the program may slow down significantly due to frequent calculations of the nearest perfect square."

2. **Handling of Zero Candies:**
   - Natural Language Description: "If a large portion of the piles initially contains zero candies, and adjustments are needed to make them perfect squares or non-squares, the program may experience a slowdown due to repeated decision-making logic."

3. **Input Size and Structure:**
   - Natural Language Description: "When the array size is near the upper limit (n close to 200,000) and a large number of elements require conversion to perfect squares or non-squares, performance may degrade due to increased iterations and calculations."

4. **Imbalance between Perfect Squares and Non-Squares:**
   - Natural Language Description: "If there is a significant imbalance in the number of piles that are perfect squares versus non-squares, additional operations are needed to balance them, potentially causing a slowdown."

These invariants capture the conditions under which the code may experience performance bottlenecks, focusing on the computational load caused by the transformation requirements and input size constraints. They abstract the problem in terms of large size and frequent operations, avoiding specific numeric values while considering problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.

Ann likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). 

Find out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.

Input

First line contains one even integer n (2 ≤ n ≤ 200 000) — number of piles with candies.

Second line contains sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 109) — amounts of candies in each pile.

Output

Output minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.

Examples

Input

4
12 14 30 4


Output

2


Input

6
0 0 0 0 0 0


Output

6


Input

6
120 110 23 34 25 45


Output

3


Input

10
121 56 78 81 45 100 1 0 54 78


Output

0

Note

In first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).

In second example you should add two candies to any three piles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as Checkers in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived from the natural language descriptions:

1. **Frequent Calls to `closest_sq`:**
```cpp
void check_frequent_calls_invariant(int calls, int threshold) {
    if (calls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent calls to closest_sq!" << endl;
        abort();
    }
}
```

2. **Handling of Zero Candies:**
```cpp
void check_zero_candies_invariant(int zeroCount, int threshold) {
    if (zeroCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many zero candies needing conversion!" << endl;
        abort();
    }
}
```

3. **Input Size and Structure:**
```cpp
void check_input_size_invariant(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}
```

4. **Imbalance between Perfect Squares and Non-Squares:**
```cpp
void check_imbalance_invariant(int sq, int notSq, int half) {
    if (abs(sq - notSq) > half) {
        cerr << "Warning: Performance bottleneck condition triggered - significant imbalance between squares and non-squares!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers with the Original Program

Below is the original C++ code instrumented with the checker functions. The checks are placed strategically to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_frequent_calls_invariant(int calls, int threshold) {
    if (calls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent calls to closest_sq!" << endl;
        abort();
    }
}

void check_zero_candies_invariant(int zeroCount, int threshold) {
    if (zeroCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many zero candies needing conversion!" << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}

void check_imbalance_invariant(int sq, int notSq, int half) {
    if (abs(sq - notSq) > half) {
        cerr << "Warning: Performance bottleneck condition triggered - significant imbalance between squares and non-squares!" << endl;
        abort();
    }
}

long long closest_sq(long long num) {
    double sqrt_ = sqrt(num);
    int a1 = int(sqrt_);
    int a2 = int(sqrt_) + 1;
    long long ans1 = a1 * a1;
    long long ans2 = a2 * a2;
    if (num - ans1 > ans2 - num) {
        return ans2;
    } else {
        return ans1;
    }
}

int main() {
    int n;
    while (cin >> n) {
        vector<long long> a(n);
        vector<long long> d;
        int sq = 0;
        int not_sq = 0;
        int zeros = 0;
        int closestCalls = 0;

        check_input_size_invariant(n, 100000);  // Check large input

        for (int i = 0; i < n; ++i) {
            cin >> a[i];
            if (a[i] == 0) {
                zeros++;
            } else {
                long long closest = closest_sq(a[i]);
                closestCalls++;  // Count calls to closest_sq
                if (closest != a[i]) {
                    d.push_back(abs(closest - a[i]));
                    not_sq++;
                } else {
                    sq++;
                }
            }
        }

        // Insert checks after the primary analysis loop
        check_frequent_calls_invariant(closestCalls, 20000);  // Arbitrary threshold for frequent calls
        check_zero_candies_invariant(zeros, n / 2);  // Threshold based on half of input size
        check_imbalance_invariant(sq, not_sq, n / 4);  // Arbitrary threshold for imbalance

        int half = n / 2;
        if (sq + zeros == half) {
            cout << 0 << endl;
        } else if (sq + zeros > half) {
            if (zeros <= half) {
                cout << (sq + zeros - half) << endl;
            } else {
                cout << sq + 2 * (zeros - half) << endl;
            }
        } else {
            int cnt = not_sq - half;
            sort(d.begin(), d.end());
            long long ans = 0;
            for (int i = 0; i < cnt; ++i) {
                ans += d[i];
            }
            cout << ans << endl;
        }
    }
    return 0;
}
```

### Explanation of Inserted Checks

- **`check_input_size_invariant`:** This checks if the number of piles is too large, indicating a potential performance bottleneck due to extensive iterations and operations.
- **`check_frequent_calls_invariant`:** This checks if the `closest_sq` function is called excessively, which might indicate computational inefficiency.
- **`check_zero_candies_invariant`:** This checks if there are too many zeros, which might require many operations to convert them to non-zero values.
- **`check_imbalance_invariant`:** This checks if there's a significant imbalance between the squares and non-squares, potentially requiring many operations to balance them.

