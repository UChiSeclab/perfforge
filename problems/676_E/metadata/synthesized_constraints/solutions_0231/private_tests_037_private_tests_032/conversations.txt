system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const string YES = "Yes";
const string NO = "No";
const int INF = 5e8;
bool IsPrime(int x) {
  if (x <= 1) {
    return false;
  }
  for (int i = 2; i * i <= x; ++i) {
    if (x % i == 0) {
      return false;
    }
  }
  return true;
}
inline void ModSum(int& x, int y, int mod) {
  x += y;
  if (x >= mod) {
    x -= mod;
  }
  if (x < 0) {
    x += mod;
  }
}
inline void ModMul(int& x, int y, int mod) { x = (1LL * x * y) % mod; }
int main() {
  srand(13512);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  int f = 0;
  vector<int> a(n + 1);
  vector<bool> b(n + 1, false);
  for (int i = 0; i <= n; ++i) {
    string s;
    cin >> s;
    if (s != "?") {
      a[i] = stoi(s);
      b[i] = true;
      f += 1;
    } else {
      b[i] = false;
    }
  }
  bool human = (f & 1);
  if (k == 0) {
    if (b[0]) {
      if (a[0] == 0) {
        cout << YES << endl;
      } else {
        cout << NO << endl;
      }
    } else {
      if (human) {
        cout << YES << endl;
      } else {
        cout << NO << endl;
      }
    }
  } else {
    if (f == (n + 1)) {
      for (int itr = 0; itr < 250; ++itr) {
        int mod = rand() % INF + INF;
        while (!IsPrime(mod)) {
          ++mod;
        }
        int modK = k % mod;
        if (modK < 0) {
          modK += mod;
        }
        int sum = 0;
        int pw = 1;
        for (int i = 0; i <= n; ++i) {
          int cur = a[i] % mod;
          if (cur < 0) {
            cur += mod;
          }
          ModMul(cur, pw, mod);
          ModSum(sum, cur, mod);
          ModMul(pw, modK, mod);
        }
        if (sum != 0) {
          cout << NO << endl;
          return 0;
        }
      }
      cout << YES << endl;
    } else {
      if ((n + 1) & 1) {
        cout << NO << endl;
      } else {
        cout << YES << endl;
      }
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 10000
0
0


(G.2) Fast Input

1 10000
?
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const string YES = "Yes"; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const string NO = "No"; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 5e8; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool IsPrime(int x) { /* line 6 slow_hit_count: 4127, fast_hit_count: 0 */
  if (x <= 1) { /* line 7 slow_hit_count: 4127, fast_hit_count: 0 */
    return false; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i * i <= x; ++i) { /* line 10 slow_hit_count: 7879120, fast_hit_count: 0 */
    if (x % i == 0) { /* line 11 slow_hit_count: 7878870, fast_hit_count: 0 */
      return false; /* line 12 slow_hit_count: 3877, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 15 slow_hit_count: 250, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
inline void ModSum(int& x, int y, int mod) { /* line 17 slow_hit_count: 500, fast_hit_count: 0 */
  x += y; /* line 18 slow_hit_count: 500, fast_hit_count: 0 */
  if (x >= mod) { /* line 19 slow_hit_count: 500, fast_hit_count: 0 */
    x -= mod; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < 0) { /* line 22 slow_hit_count: 500, fast_hit_count: 0 */
    x += mod; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 500, fast_hit_count: 0 */
inline void ModMul(int& x, int y, int mod) { x = (1LL * x * y) % mod; } /* line 26 slow_hit_count: 1000, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  srand(13512); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int f = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n + 1); /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
  vector<bool> b(n + 1, false); /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i <= n; ++i) { /* line 36 slow_hit_count: 3, fast_hit_count: 3 */
    string s; /* line 37 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> s; /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
    if (s != "?") { /* line 39 slow_hit_count: 2, fast_hit_count: 2 */
      a[i] = stoi(s); /* line 40 slow_hit_count: 2, fast_hit_count: 1 */
      b[i] = true; /* line 41 slow_hit_count: 2, fast_hit_count: 1 */
      f += 1; /* line 42 slow_hit_count: 2, fast_hit_count: 1 */
    } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      b[i] = false; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  bool human = (f & 1); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 0) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    if (b[0]) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      if (a[0] == 0) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        cout << YES << endl; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        cout << NO << endl; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (human) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        cout << YES << endl; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        cout << NO << endl; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    if (f == (n + 1)) { /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
      for (int itr = 0; itr < 250; ++itr) { /* line 64 slow_hit_count: 251, fast_hit_count: 0 */
        int mod = rand() % INF + INF; /* line 65 slow_hit_count: 250, fast_hit_count: 0 */
        while (!IsPrime(mod)) { /* line 66 slow_hit_count: 4127, fast_hit_count: 0 */
          ++mod; /* line 67 slow_hit_count: 3877, fast_hit_count: 0 */
        } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
        int modK = k % mod; /* line 69 slow_hit_count: 250, fast_hit_count: 0 */
        if (modK < 0) { /* line 70 slow_hit_count: 250, fast_hit_count: 0 */
          modK += mod; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
        int sum = 0; /* line 73 slow_hit_count: 250, fast_hit_count: 0 */
        int pw = 1; /* line 74 slow_hit_count: 250, fast_hit_count: 0 */
        for (int i = 0; i <= n; ++i) { /* line 75 slow_hit_count: 750, fast_hit_count: 0 */
          int cur = a[i] % mod; /* line 76 slow_hit_count: 500, fast_hit_count: 0 */
          if (cur < 0) { /* line 77 slow_hit_count: 500, fast_hit_count: 0 */
            cur += mod; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          ModMul(cur, pw, mod); /* line 80 slow_hit_count: 500, fast_hit_count: 0 */
          ModSum(sum, cur, mod); /* line 81 slow_hit_count: 500, fast_hit_count: 0 */
          ModMul(pw, modK, mod); /* line 82 slow_hit_count: 500, fast_hit_count: 0 */
        } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
        if (sum != 0) { /* line 84 slow_hit_count: 250, fast_hit_count: 0 */
          cout << NO << endl; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
      cout << YES << endl; /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
    } else { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      if ((n + 1) & 1) { /* line 91 slow_hit_count: 0, fast_hit_count: 1 */
        cout << NO << endl; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
        cout << YES << endl; /* line 94 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By analyzing the hit counts, we notice a significant discrepancy between the "slow" and "fast" inputs, specifically in the following areas of the code:

1. **IsPrime Function**: The `IsPrime` function is called numerous times (4127 hits for the slow input) because of its presence in the loop that attempts to find a prime modulus. This function's internal loop (`for (int i = 2; i * i <= x; ++i)`) contributes heavily to the total hit count (7,879,120 hits).

2. **Polynomial Evaluation Loop**: The loop beginning with `for (int itr = 0; itr < 250; ++itr)` calls `IsPrime` `250` times. Each iteration attempts to find a prime modulus for the polynomial evaluation, followed by operations involving `ModMul` and `ModSum`, which are hit 1000 times each, due to the nested nature of these operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, we can derive the following performance-characterizing invariants:

1. **Prime Number Determination**:
   - **Invariant**: "The code may slow down significantly if the modulus chosen for polynomial checking requires many iterations to find a prime near the range limit. This can happen especially if the modulus needs to be large due to constraints or specific input patterns."
   - **Explanation**: The `IsPrime` function is expensive when the modulus is large, requiring many iterations to confirm primality. This is exacerbated when the modulus starts out non-prime and needs multiple increments.

2. **Polynomial Evaluation with Full Coefficients**:
   - **Invariant**: "When every coefficient in the polynomial is already known (i.e., all coefficients are defined), the repeated polynomial evaluations for different random moduli can become computationally intensive."
   - **Explanation**: If `f == n + 1`, the polynomial is fully defined, and 250 iterations are performed, each involving multiple modular arithmetic operations. This can lead to computational slowness if these operations are repeated excessively without early termination.

3. **Large Modulus Operations**:
   - **Invariant**: "The use of large moduli in modular arithmetic operations during polynomial evaluation can lead to significant slowdown if repeated excessively, especially when iterating over the entire polynomial length."
   - **Explanation**: Operations such as `ModMul` and `ModSum` are computationally expensive when the modulus is large, and their repeated application across the polynomial can lead to performance degradation.

### Conclusion

These invariants are designed to encapsulate the conditions under which the code's performance degrades, focusing on the computational intensity of prime checking and modular arithmetic, especially as they relate to the input structure and constraints. These statements help in recognizing potential slowdowns, abstracting away from specific numerical values to focus on the broader conditions leading to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the runtime checks implemented to correspond to each invariant identified:

```cpp
// Check for prime number determination bottleneck
void check_prime_determination_invariant(int iterations, int largeModulus) {
    if (iterations > 1000 && largeModulus > INF) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive prime checking iterations!" << endl;
        abort();
    }
}

// Check for polynomial evaluation with full coefficients
void check_full_coefficients_invariant(int numCoefficients) {
    if (numCoefficients == (n + 1)) {
        cerr << "Warning: Performance bottleneck condition triggered - polynomial fully defined and repeatedly evaluated!" << endl;
        abort();
    }
}

// Check for large modulus operations bottleneck
void check_large_modulus_operation_invariant(int mod) {
    if (mod >= INF) {
        cerr << "Warning: Performance bottleneck condition triggered - large modulus operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original C++ Code

Below is the instrumented C++ code with the integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const string YES = "Yes";
const string NO = "No";
const int INF = 5e8;

bool IsPrime(int x) {
    if (x <= 1) {
        return false;
    }
    for (int i = 2; i * i <= x; ++i) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

inline void ModSum(int& x, int y, int mod) {
    x += y;
    if (x >= mod) {
        x -= mod;
    }
    if (x < 0) {
        x += mod;
    }
}

inline void ModMul(int& x, int y, int mod) {
    x = (1LL * x * y) % mod;
}

// Implementing the performance invariant checks as helper functions
void check_prime_determination_invariant(int iterations, int largeModulus) {
    if (iterations > 1000 && largeModulus > INF) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive prime checking iterations!" << endl;
        abort();
    }
}

void check_full_coefficients_invariant(int numCoefficients) {
    if (numCoefficients == (n + 1)) {
        cerr << "Warning: Performance bottleneck condition triggered - polynomial fully defined and repeatedly evaluated!" << endl;
        abort();
    }
}

void check_large_modulus_operation_invariant(int mod) {
    if (mod >= INF) {
        cerr << "Warning: Performance bottleneck condition triggered - large modulus operations!" << endl;
        abort();
    }
}

int main() {
    srand(13512);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, k;
    cin >> n >> k;
    int f = 0;
    vector<int> a(n + 1);
    vector<bool> b(n + 1, false);
    for (int i = 0; i <= n; ++i) {
        string s;
        cin >> s;
        if (s != "?") {
            a[i] = stoi(s);
            b[i] = true;
            f += 1;
        } else {
            b[i] = false;
        }
    }
    bool human = (f & 1);

    // Check for polynomial evaluation with full coefficients
    check_full_coefficients_invariant(f);

    if (k == 0) {
        if (b[0]) {
            if (a[0] == 0) {
                cout << YES << endl;
            } else {
                cout << NO << endl;
            }
        } else {
            if (human) {
                cout << YES << endl;
            } else {
                cout << NO << endl;
            }
        }
    } else {
        if (f == (n + 1)) {
            for (int itr = 0; itr < 250; ++itr) {
                int mod = rand() % INF + INF;
                int prime_iterations = 0;
                while (!IsPrime(mod)) {
                    ++mod;
                    ++prime_iterations;
                }

                // Check for prime number determination bottleneck
                check_prime_determination_invariant(prime_iterations, mod);

                int modK = k % mod;
                if (modK < 0) {
                    modK += mod;
                }
                int sum = 0;
                int pw = 1;
                for (int i = 0; i <= n; ++i) {
                    int cur = a[i] % mod;
                    if (cur < 0) {
                        cur += mod;
                    }
                    ModMul(cur, pw, mod);
                    ModSum(sum, cur, mod);
                    ModMul(pw, modK, mod);
                }
                if (sum != 0) {
                    cout << NO << endl;
                    return 0;
                }
            }
            cout << YES << endl;
        } else {
            if ((n + 1) & 1) {
                cout << NO << endl;
            } else {
                cout << YES << endl;
            }
        }
    }
    return 0;
}
```

### Explanation of Inserted Checks

1. **Prime Determination Check**: This check is placed inside the loop where `IsPrime` is repeatedly invoked. It tracks the number of iterations required to find a prime number and checks if the modulus values exceed a threshold, indicating potential performance degradation.

2. **Full Coefficients Check**: This check is added after reading inputs to detect if the polynomial is fully defined, triggering a warning before initiating extensive polynomial evaluations.

3. **Large Modulus Operation Check**: This check is integrated after modulus determination to ensure that modulus operations don't involve excessively large numbers, potentially causing slowdowns.

