system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, x, y, z, k, w, ans, ww;
char s[15];
int A[100005], tmp[30], add[500005], minu[500005];
int main() {
  scanf("%d %d", &n, &k);
  ww = k;
  for (int i = (0); i <= (n); i++) A[i] = -10001;
  for (int i = (0); i <= (n); i++) {
    scanf("%s", s);
    if (s[0] == '?')
      x++;
    else {
      m = strlen(s);
      y = 0;
      if (s[0] == '-')
        for (int j = (1); j < (m); j++) {
          y *= 10;
          y += (s[j] - 48);
        }
      else
        for (int j = (0); j < (m); j++) {
          y *= 10;
          y += (s[j] - 48);
        }
      if (s[0] == '-') y = -y;
      A[i] = y;
      z++;
    }
  }
  if (k == 0) {
    if (A[0] == 0)
      printf("Yes\n");
    else if (A[0] == -10001 && z % 2 == 1)
      printf("Yes\n");
    else
      printf("No\n");
    return 0;
  }
  if (x != 0) {
    if (n % 2 == 1)
      printf("Yes\n");
    else
      printf("No\n");
    return 0;
  }
  if (k == 1 || k == -1) {
    ans = 0;
    for (int i = (0); i <= (n); i++) {
      if (k < 0 && i % 2 == 1)
        w = -1;
      else
        w = 1;
      A[i] *= w;
      ans += A[i];
    }
    if (ans == 0)
      printf("Yes\n");
    else
      printf("No\n");
    return 0;
  }
  for (int i = (0); i <= (n); i++) {
    k = ww;
    if (k < 0 && i % 2 == 1)
      w = -1;
    else
      w = 1;
    k = abs(k);
    if (A[i] * w > 0) {
      w = 0;
      x = abs(A[i]);
      while (x > 0) {
        tmp[w++] = x % k;
        x /= k;
      }
      for (int j = (0); j < (w); j++) add[j + i] += tmp[j];
    } else if (A[i] * w < 0) {
      w = 0;
      x = abs(A[i]);
      while (x > 0) {
        tmp[w++] = x % k;
        x /= k;
      }
      for (int j = (0); j < (w); j++) minu[j + i] += tmp[j];
    }
  }
  k = abs(k);
  for (int i = (0); i < (200000); i++) {
    add[i + 1] += add[i] / k;
    add[i] %= k;
  }
  for (int i = (0); i < (200000); i++) {
    minu[i + 1] += minu[i] / k;
    minu[i] %= k;
  }
  for (int i = (0); i < (200000); i++)
    if (add[i] != minu[i]) {
      printf("No\n");
      return 0;
    }
  printf("Yes\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 10000
0
0


(G.2) Fast Input

1 10000
?
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, x, y, z, k, w, ans, ww; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char s[15]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int A[100005], tmp[30], add[500005], minu[500005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &k); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ww = k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i <= (n); i++) A[i] = -10001; /* line 9 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = (0); i <= (n); i++) { /* line 10 slow_hit_count: 3, fast_hit_count: 3 */
    scanf("%s", s); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    if (s[0] == '?') /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
      x++; /* line 13 slow_hit_count: 0, fast_hit_count: 1 */
    else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      m = strlen(s); /* line 15 slow_hit_count: 2, fast_hit_count: 1 */
      y = 0; /* line 16 slow_hit_count: 2, fast_hit_count: 1 */
      if (s[0] == '-') /* line 17 slow_hit_count: 2, fast_hit_count: 1 */
        for (int j = (1); j < (m); j++) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
          y *= 10; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
          y += (s[j] - 48); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        for (int j = (0); j < (m); j++) { /* line 23 slow_hit_count: 4, fast_hit_count: 2 */
          y *= 10; /* line 24 slow_hit_count: 2, fast_hit_count: 1 */
          y += (s[j] - 48); /* line 25 slow_hit_count: 2, fast_hit_count: 1 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[0] == '-') y = -y; /* line 27 slow_hit_count: 2, fast_hit_count: 1 */
      A[i] = y; /* line 28 slow_hit_count: 2, fast_hit_count: 1 */
      z++; /* line 29 slow_hit_count: 2, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    if (A[0] == 0) /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      printf("Yes\n"); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    else if (A[0] == -10001 && z % 2 == 1) /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      printf("Yes\n"); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      printf("No\n"); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (x != 0) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    if (n % 2 == 1) /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
      printf("Yes\n"); /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      printf("No\n"); /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 1 || k == -1) { /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
    ans = 0; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = (0); i <= (n); i++) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      if (k < 0 && i % 2 == 1) /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        w = -1; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        w = 1; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      A[i] *= w; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      ans += A[i]; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans == 0) /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      printf("Yes\n"); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      printf("No\n"); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i <= (n); i++) { /* line 64 slow_hit_count: 3, fast_hit_count: 0 */
    k = ww; /* line 65 slow_hit_count: 2, fast_hit_count: 0 */
    if (k < 0 && i % 2 == 1) /* line 66 slow_hit_count: 2, fast_hit_count: 0 */
      w = -1; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      w = 1; /* line 69 slow_hit_count: 2, fast_hit_count: 0 */
    k = abs(k); /* line 70 slow_hit_count: 2, fast_hit_count: 0 */
    if (A[i] * w > 0) { /* line 71 slow_hit_count: 2, fast_hit_count: 0 */
      w = 0; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      x = abs(A[i]); /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      while (x > 0) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
        tmp[w++] = x % k; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
        x /= k; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = (0); j < (w); j++) add[j + i] += tmp[j]; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (A[i] * w < 0) { /* line 79 slow_hit_count: 2, fast_hit_count: 0 */
      w = 0; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
      x = abs(A[i]); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      while (x > 0) { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
        tmp[w++] = x % k; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
        x /= k; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = (0); j < (w); j++) minu[j + i] += tmp[j]; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  k = abs(k); /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (0); i < (200000); i++) { /* line 90 slow_hit_count: 200001, fast_hit_count: 0 */
    add[i + 1] += add[i] / k; /* line 91 slow_hit_count: 200000, fast_hit_count: 0 */
    add[i] %= k; /* line 92 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (200000); i++) { /* line 94 slow_hit_count: 200001, fast_hit_count: 0 */
    minu[i + 1] += minu[i] / k; /* line 95 slow_hit_count: 200000, fast_hit_count: 0 */
    minu[i] %= k; /* line 96 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (200000); i++) /* line 98 slow_hit_count: 200001, fast_hit_count: 0 */
    if (add[i] != minu[i]) { /* line 99 slow_hit_count: 200000, fast_hit_count: 0 */
      printf("No\n"); /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  printf("Yes\n"); /* line 103 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 104 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 105 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the given C code, problem statement, and line-level hit counts for both the slow and fast inputs, we can analyze and identify potential performance bottlenecks. This analysis allows us to derive conditions or invariants that characterize when the code might slow down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts**: 
   - **Slow input**: The lines heavily hit are 64-99, particularly lines involved in processing and calculations with the `add` and `minu` arrays.
   - **Fast input**: These lines are skipped entirely due to an early exit based on condition evaluations.

2. **Pinpointing Lines with Significant Hits**:
   - **Lines 64-99**: These lines include loops and calculations that are executed a substantial number of times in the slow input, indicating they are responsible for the slowdown.

3. **Interaction with Data Structures**:
   - The loops processing the `add` and `minu` arrays involve operations based on powers of `k`. For each coefficient, operations on these arrays are intensified by the large value of `k` (10,000), which results in significant overhead.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language invariants that describe under what conditions the code is likely to slow down:

1. **High Value of `k` Combined with Coefficient Operations**:
   - **Invariant**: "When the value of `k` is large, and the polynomial's coefficients are primarily known, the operations involving transformations and processing in large loops become computationally expensive, leading to a slowdown."
   - **Reasoning**: The high value of `k` results in frequent divisions and modulo operations on large numbers, especially within nested and extending computations, which consume more time.

2. **Absence of '?' Leading to Extensive Loop Iteration**:
   - **Invariant**: "If there are no undefined coefficients ('?') to early-exit from the processing loop, the program fully iterates over the array, leading to a potentially exhaustive computation."
   - **Reasoning**: The presence of '?' coefficients allows early termination in the algorithm, while their absence forces complete execution of complex processing logic.

3. **Large Scale Multiplications and Divisions**:
   - **Invariant**: "If the calculations involve iterative multiplications and divisions with a large base, combined with a full array traversal, the time complexity increases significantly."
   - **Reasoning**: Multiplicative operations, especially those involving large numbers in loops, lead to increased runtime due to the computational cost of each iteration.

### Conclusion

These invariants encapsulate the conditions under which the provided code slows down. They consider the impact of input characteristics like the presence or absence of '?', the size of `k`, and the consequent impact on arithmetic calculations. This analysis helps identify future input scenarios that may lead to similar slowdowns, providing insights for optimization or further testing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants as Checkers

Below are the C++ code snippets implementing the performance-characterizing invariants we derived in Phase 2:

1. **High Value of `k` Combined with Coefficient Operations**:
   ```cpp
   void check_high_k_value_and_coefficients(int k, int z) {
       if (abs(k) > 5000 && z > 0) {
           cerr << "Warning: Performance bottleneck condition triggered - high value of k with known coefficients!" << endl;
           abort();
       }
   }
   ```

2. **Absence of '?' Leading to Extensive Loop Iteration**:
   ```cpp
   void check_no_undefined_coefficients(int x) {
       if (x == 0) {
           cerr << "Warning: Performance bottleneck condition triggered - no undefined coefficients, leading to full computation!" << endl;
           abort();
       }
   }
   ```

3. **Large Scale Multiplications and Divisions**:
   ```cpp
   void check_large_scale_operations(int n, int k) {
       if (n > 50000 && abs(k) > 5000) {
           cerr << "Warning: Performance bottleneck condition triggered - large scale operations in place!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers with the Original Program

Below is the modified version of the provided C++ program, now instrumented with the designed checks to detect potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m, x, y, z, k, w, ans, ww;
char s[15];
int A[100005], tmp[30], add[500005], minu[500005];

// Function to check for high k value and coefficients
void check_high_k_value_and_coefficients(int k, int z) {
    if (abs(k) > 5000 && z > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - high value of k with known coefficients!" << endl;
        abort();
    }
}

// Function to check for no undefined coefficients
void check_no_undefined_coefficients(int x) {
    if (x == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - no undefined coefficients, leading to full computation!" << endl;
        abort();
    }
}

// Function to check for large scale operations
void check_large_scale_operations(int n, int k) {
    if (n > 50000 && abs(k) > 5000) {
        cerr << "Warning: Performance bottleneck condition triggered - large scale operations in place!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %d", &n, &k);
    ww = k;

    for (int i = 0; i <= n; i++) A[i] = -10001;
    for (int i = 0; i <= n; i++) {
        scanf("%s", s);
        if (s[0] == '?')
            x++;
        else {
            m = strlen(s);
            y = 0;
            if (s[0] == '-')
                for (int j = 1; j < m; j++) {
                    y *= 10;
                    y += (s[j] - 48);
                }
            else
                for (int j = 0; j < m; j++) {
                    y *= 10;
                    y += (s[j] - 48);
                }
            if (s[0] == '-') y = -y;
            A[i] = y;
            z++;
        }
    }

    // Insert performance checkers at strategic points
    check_high_k_value_and_coefficients(k, z);
    check_no_undefined_coefficients(x);
    check_large_scale_operations(n, k);

    if (k == 0) {
        if (A[0] == 0)
            printf("Yes\n");
        else if (A[0] == -10001 && z % 2 == 1)
            printf("Yes\n");
        else
            printf("No\n");
        return 0;
    }
    if (x != 0) {
        if (n % 2 == 1)
            printf("Yes\n");
        else
            printf("No\n");
        return 0;
    }
    if (k == 1 || k == -1) {
        ans = 0;
        for (int i = 0; i <= n; i++) {
            if (k < 0 && i % 2 == 1)
                w = -1;
            else
                w = 1;
            A[i] *= w;
            ans += A[i];
        }
        if (ans == 0)
            printf("Yes\n");
        else
            printf("No\n");
        return 0;
    }
    for (int i = 0; i <= n; i++) {
        k = ww;
        if (k < 0 && i % 2 == 1)
            w = -1;
        else
            w = 1;
        k = abs(k);
        if (A[i] * w > 0) {
            w = 0;
            x = abs(A[i]);
            while (x > 0) {
                tmp[w++] = x % k;
                x /= k;
            }
            for (int j = 0; j < w; j++) add[j + i] += tmp[j];
        } else if (A[i] * w < 0) {
            w = 0;
            x = abs(A[i]);
            while (x > 0) {
                tmp[w++] = x % k;
                x /= k;
            }
            for (int j = 0; j < w; j++) minu[j + i] += tmp[j];
        }
    }
    k = abs(k);
    for (int i = 0; i < 200000; i++) {
        add[i + 1] += add[i] / k;
        add[i] %= k;
    }
    for (int i = 0; i < 200000; i++) {
        minu[i + 1] += minu[i] / k;
        minu[i] %= k;
    }
    for (int i = 0; i < 200000; i++)
        if (add[i] != minu[i]) {
            printf("No\n");
            return 0;
        }
    printf("Yes\n");
    return 0;
}
```

### Explanation

- **Where and Why**: The checks are placed after reading inputs and before entering complex computations. This ensures minimal overhead and timely detection of potential bottleneck conditions.
- **Function Usage**: Each checker function is designed to address a specific potential performance issue inferred from the analysis phase.
- **Effectiveness**: These checks will help identify cases where the program is about to enter a slow execution path, thus assisting in debugging and further optimization.

