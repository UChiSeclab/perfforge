system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int INF = 2e9 + 7;
const long long INFLL = 1e16 + 7;
const double EPS = 1e-6;
using namespace std;
const int maxn = 1e5 + 5;
int n, m;
int a[maxn];
int poli(long long mod) {
  long long now = 1;
  long long ret = 0;
  for (int k = (int)0; k < (int)n; k++) {
    ret += now * a[k];
    ret %= mod;
    now = (now * m) % mod;
  }
  if (ret) return 1;
  return 0;
}
int main() {
  scanf("%d%d", &n, &m);
  n++;
  int last = -1, sum = 0;
  for (int k = (int)0; k < (int)n; k++) {
    char tmp[100];
    scanf("%s", &tmp);
    if (tmp[0] == '?') {
      last = k & 1;
      a[k] = INF;
      sum++;
    } else
      sscanf(tmp, "%d", &a[k]);
  }
  if (m == 0) {
    if (a[0] != INF) {
      if (a[0] == 0)
        printf("Yes\n");
      else
        printf("No\n");
    } else {
      if ((n - sum) % 2)
        printf("Yes\n");
      else
        printf("No\n");
    }
    return 0;
  }
  if (last != -1) {
    if (n % 2 == 0)
      printf("Yes\n");
    else
      printf("No\n");
    return 0;
  }
  int cek = 0;
  long long ten[25];
  ten[0] = 1;
  for (int k = (int)1; k < (int)18; k++) ten[k] = ten[k - 1] * 10;
  for (int k = (int)3; k < (int)9; k++) cek = (cek | poli(ten[k] + 7));
  cek = (cek | poli(ten[9]));
  for (int k = (int)INF; k < (int)INF + 200; k++) cek = (cek | poli(k));
  if (cek == 0)
    printf("Yes\n");
  else
    printf("No\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0


(G.2) Fast Input

10 100
0
0
1
0
0
0
0
0
0
0
?


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 2e9 + 7; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFLL = 1e16 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-6; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e5 + 5; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int poli(long long mod) { /* line 9 slow_hit_count: 207, fast_hit_count: 0 */
  long long now = 1; /* line 10 slow_hit_count: 207, fast_hit_count: 0 */
  long long ret = 0; /* line 11 slow_hit_count: 207, fast_hit_count: 0 */
  for (int k = (int)0; k < (int)n; k++) { /* line 12 slow_hit_count: 21114, fast_hit_count: 0 */
    ret += now * a[k]; /* line 13 slow_hit_count: 20907, fast_hit_count: 0 */
    ret %= mod; /* line 14 slow_hit_count: 20907, fast_hit_count: 0 */
    now = (now * m) % mod; /* line 15 slow_hit_count: 20907, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (ret) return 1; /* line 17 slow_hit_count: 207, fast_hit_count: 0 */
  return 0; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  n++; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int last = -1, sum = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int k = (int)0; k < (int)n; k++) { /* line 24 slow_hit_count: 102, fast_hit_count: 12 */
    char tmp[100]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%s", &tmp); /* line 26 slow_hit_count: 101, fast_hit_count: 11 */
    if (tmp[0] == '?') { /* line 27 slow_hit_count: 101, fast_hit_count: 11 */
      last = k & 1; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
      a[k] = INF; /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
      sum++; /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    } else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      sscanf(tmp, "%d", &a[k]); /* line 32 slow_hit_count: 101, fast_hit_count: 10 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (m == 0) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    if (a[0] != INF) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      if (a[0] == 0) /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        printf("Yes\n"); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        printf("No\n"); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      if ((n - sum) % 2) /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        printf("Yes\n"); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        printf("No\n"); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (last != -1) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    if (n % 2 == 0) /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
      printf("Yes\n"); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      printf("No\n"); /* line 52 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  int cek = 0; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
  long long ten[25]; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  ten[0] = 1; /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
  for (int k = (int)1; k < (int)18; k++) ten[k] = ten[k - 1] * 10; /* line 58 slow_hit_count: 18, fast_hit_count: 0 */
  for (int k = (int)3; k < (int)9; k++) cek = (cek | poli(ten[k] + 7)); /* line 59 slow_hit_count: 7, fast_hit_count: 0 */
  cek = (cek | poli(ten[9])); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  for (int k = (int)INF; k < (int)INF + 200; k++) cek = (cek | poli(k)); /* line 61 slow_hit_count: 201, fast_hit_count: 0 */
  if (cek == 0) /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
    printf("Yes\n"); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    printf("No\n"); /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, we can follow these phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `poli` function is called significantly more times in the slow input compared to the fast input. The slow input triggers 207 calls to `poli`, hitting lines inside this function (lines 12-15) over 20,000 times, while the fast input does not trigger this function.
   - The loop inside `poli` iterates `n` times (lines 12-15), contributing to the high hit count when `poli` is called multiple times.

2. **Data Structure and Loop Interactions:**
   - The function `poli` evaluates a polynomial modulo a given value, and it does so by iterating through the coefficients of the polynomial.
   - The slow input causes multiple evaluations of this polynomial for different moduli, as seen in the calls with varying `mod` values in lines 58-61.

### Phase 2: Derive Performance-Characterizing Invariants

Based on this analysis, we can articulate the conditions under which the program is likely to enter a slow path, focusing on how the slow input interacts with the code:

1. **Polynomial Evaluations:**
   - **Invariant:** "When the polynomial evaluation function `poli` is invoked repeatedly with different moduli for a polynomial with numerous coefficients, the computation time increases significantly, especially when `n` is large."
   - This invariant captures the repeated computation triggered by the polynomial evaluations over multiple moduli values.

2. **Size of n:**
   - **Invariant:** "If the polynomial degree `n` is close to the upper limit of the constraint (e.g., `n` is near 100,000), and many coefficients are fixed, the repeated modulo evaluations may lead to performance slowdowns."
   - This reflects how high values of `n` and the presence of defined coefficients can increase the number of operations.

3. **Loop Execution:**
   - **Invariant:** "When the number of undefined coefficients is low, but the degree `n` is large, the loop inside `poli` runs numerous times for each call, leading to substantial computation, especially when each iteration involves non-trivial arithmetic operations."
   - This is due to fewer undefined coefficients prompting exhaustive polynomial evaluations to determine divisibility.

These invariants highlight potential scenarios causing slow performance based on the program's logic and the structure of the input, providing a guide for understanding slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Below are the C++ code snippets that implement the performance-characterizing invariants derived earlier:

1. **Invariant for Polynomial Evaluations:**
   - **Condition:** If `poli` is called repeatedly with different moduli for a polynomial with numerous coefficients.
   
   ```cpp
   void check_polynomial_evaluation_invariant(int callCount, int degree) {
       if (callCount > 200 && degree > 50000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive polynomial evaluations!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Size of n:**
   - **Condition:** If the polynomial degree `n` is large and many coefficients are predetermined.
   
   ```cpp
   void check_large_degree_invariant(int degree, int definedCount) {
       if (degree > 90000 && definedCount > degree / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - large polynomial degree with many defined coefficients!" << endl;
           abort();
       }
   }
   ```

3. **Invariant for Loop Execution:**
   - **Condition:** If the loop inside `poli` runs repeatedly with non-trivial arithmetic operations.
   
   ```cpp
   void check_loop_execution_invariant(int loopIterations, int calls) {
       if (loopIterations * calls > 100000 && loopIterations > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations in `poli` function!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Here's the full C++ program with integrated checker functions:

```cpp
#include <bits/stdc++.h>
const int INF = 2e9 + 7;
const long long INFLL = 1e16 + 7;
const double EPS = 1e-6;
using namespace std;
const int maxn = 1e5 + 5;
int n, m;
int a[maxn];

void check_polynomial_evaluation_invariant(int callCount, int degree) {
    if (callCount > 200 && degree > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive polynomial evaluations!" << endl;
        abort();
    }
}

void check_large_degree_invariant(int degree, int definedCount) {
    if (degree > 90000 && definedCount > degree / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large polynomial degree with many defined coefficients!" << endl;
        abort();
    }
}

void check_loop_execution_invariant(int loopIterations, int calls) {
    if (loopIterations * calls > 100000 && loopIterations > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations in `poli` function!" << endl;
        abort();
    }
}

int poli(long long mod, int &callCount) {
    long long now = 1;
    long long ret = 0;
    int loopIterations = 0; // Track iterations for loop execution invariant
    for (int k = 0; k < n; k++) {
        ret += now * a[k];
        ret %= mod;
        now = (now * m) % mod;
        loopIterations++;
    }
    callCount++;
    check_loop_execution_invariant(loopIterations, callCount);
    if (ret) return 1;
    return 0;
}

int main() {
    scanf("%d%d", &n, &m);
    n++;
    int last = -1, sum = 0;
    int definedCount = 0; // Track number of defined coefficients
    for (int k = 0; k < n; k++) {
        char tmp[100];
        scanf("%s", &tmp);
        if (tmp[0] == '?') {
            last = k & 1;
            a[k] = INF;
            sum++;
        } else {
            sscanf(tmp, "%d", &a[k]);
            definedCount++;
        }
    }

    check_large_degree_invariant(n, definedCount);

    if (m == 0) {
        if (a[0] != INF) {
            if (a[0] == 0)
                printf("Yes\n");
            else
                printf("No\n");
        } else {
            if ((n - sum) % 2)
                printf("Yes\n");
            else
                printf("No\n");
        }
        return 0;
    }

    if (last != -1) {
        if (n % 2 == 0)
            printf("Yes\n");
        else
            printf("No\n");
        return 0;
    }

    int cek = 0;
    long long ten[25];
    ten[0] = 1;
    for (int k = 1; k < 18; k++) ten[k] = ten[k - 1] * 10;

    int callCount = 0; // Initialize call count for polynomial evaluation invariant
    for (int k = 3; k < 9; k++) cek = (cek | poli(ten[k] + 7, callCount));
    cek = (cek | poli(ten[9], callCount));
    for (int k = INF; k < INF + 200; k++) cek = (cek | poli(k, callCount));

    check_polynomial_evaluation_invariant(callCount, n);

    if (cek == 0)
        printf("Yes\n");
    else
        printf("No\n");
    return 0;
}
```

**Comments:**
- Each check is placed after the relevant computation to monitor conditions that may lead to performance issues.
- The check functions use thresholds that are reasonable and aligned with the constraints of the problem (e.g., `n <= 100,000`).

