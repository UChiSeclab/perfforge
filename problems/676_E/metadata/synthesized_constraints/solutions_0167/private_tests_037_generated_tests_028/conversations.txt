system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, cnt = 0;
int a[100000 + 10], known[100000 + 10];
int main() {
  scanf("%d %d", &n, &k);
  for (int i = 1; i <= n + 1; i++) {
    char buf[20];
    scanf("%s", buf);
    if (*buf == '?') {
      known[i] = false;
      cnt++;
    } else {
      known[i] = true;
      sscanf(buf, "%d", &a[i]);
    }
  }
  int ok = 0;
  if (k == 0) {
    if (known[1] == 1 && a[1] == 0) ok = 1;
    if (known[1] == 0 && (n + 1 - cnt) % 2 == 1) ok = 1;
  } else {
    if (cnt != 0) ok = (((n + 1 - cnt) % 2 + cnt % 2) % 2) == 0;
    int all_zero = n + 1;
    while (a[all_zero] == 0) all_zero--;
    long long tmp = 0;
    if (cnt == 0) {
      for (int i = 1; i <= n + 1; i++) {
        tmp -= a[i];
        if (tmp % k != 0) break;
        if (i > all_zero && tmp != 0) break;
        tmp /= k;
        if (i == n + 1 && tmp == 0) ok = 1;
      }
    }
  }
  printf("%s\n", ok ? "Yes" : "No");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 10000
0
0


(G.2) Fast Input

1 10000
1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, cnt = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[100000 + 10], known[100000 + 10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &k); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n + 1; i++) { /* line 7 slow_hit_count: 3, fast_hit_count: 3 */
    char buf[20]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%s", buf); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    if (*buf == '?') { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
      known[i] = false; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      cnt++; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      known[i] = true; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
      sscanf(buf, "%d", &a[i]); /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int ok = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 0) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    if (known[1] == 1 && a[1] == 0) ok = 1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (known[1] == 0 && (n + 1 - cnt) % 2 == 1) ok = 1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt != 0) ok = (((n + 1 - cnt) % 2 + cnt % 2) % 2) == 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    int all_zero = n + 1; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    while (a[all_zero] == 0) all_zero--; /* line 25 slow_hit_count: 10, fast_hit_count: 2 */
    long long tmp = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    if (cnt == 0) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
      for (int i = 1; i <= n + 1; i++) { /* line 28 slow_hit_count: 3, fast_hit_count: 1 */
        tmp -= a[i]; /* line 29 slow_hit_count: 2, fast_hit_count: 1 */
        if (tmp % k != 0) break; /* line 30 slow_hit_count: 2, fast_hit_count: 1 */
        if (i > all_zero && tmp != 0) break; /* line 31 slow_hit_count: 2, fast_hit_count: 0 */
        tmp /= k; /* line 32 slow_hit_count: 2, fast_hit_count: 0 */
        if (i == n + 1 && tmp == 0) ok = 1; /* line 33 slow_hit_count: 2, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", ok ? "Yes" : "No"); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck and derive performance-characterizing invariants for the provided C program, we need to follow the tasks outlined in the prompt.

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the fast and slow runs, we can identify the following lines as being significantly more frequently executed for the slow input:

1. **Line 25 (`while (a[all_zero] == 0) all_zero--;`)**: This line is executed 10 times for the slow input compared to 2 times for the fast input. This indicates that the loop iterates over a longer sequence of zeros at the end of the array `a`.
2. **Loop Starting at Line 28 (`for (int i = 1; i <= n + 1; i++)`)**: This loop has higher hit counts in various lines (28, 29, 30, 31, 32, 33), indicating it runs more iterations for the slow input. Particularly, lines 31, 32, and 33 have hit counts in the slow input but not in the fast input, suggesting these conditions are met more often.

These lines interact with the data structure `a[]` in a way that suggests they are sensitive to the sequence of zeroes and the operations performed on `tmp`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on our observations from Phase 1, we can derive the following natural language performance invariants:

1. **Invariant on Trailing Zeros**:
   - **Natural Language Description**: "If the input array contains a long sequence of trailing zeros, the program may spend a significant amount of time decrementing the index to find a non-zero element."
   - This is exemplified by the behavior in line 25, which has higher hit counts when there are many zeros at the end of the array.

2. **Invariant on Loop Execution in Polynomial Division**:
   - **Natural Language Description**: "When all coefficients are known and the polynomial degree is high, especially if the leading coefficients are zeros, the program may enter a loop that repeatedly processes these zeros, leading to longer execution times."
   - This is observed in the loop starting from line 28, which executes more iterations when more zeros are present and all coefficients are initially known.

### Conclusion

These invariants focus on the structure and content of the input polynomial coefficients, particularly the presence and position of zeros. They abstract the conditions under which the slow execution path is triggered, without relying on specific numeric values from the inputs. By understanding these conditions, we can potentially optimize or refactor the code to handle excessive zeros or polynomial divisions more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived in Phase 2, here is the C++ checker code to implement those invariants:

1. **Invariant on Trailing Zeros**: This invariant is checked by iterating over the coefficients to find a sequence of trailing zeros. If the sequence is too long, it could introduce performance issues.

    ```cpp
    void check_trailing_zeros_invariant(const int* a, int n) {
        int zero_count = 0;
        for (int i = n; i >= 1; --i) {
            if (a[i] == 0)
                zero_count++;
            else
                break;
        }
        if (zero_count > 5) { // arbitrary threshold for illustration
            cerr << "Warning: trailing_zeros_invariant triggered - long sequence of trailing zeros" << endl;
            abort();
        }
    }
    ```

2. **Invariant on Loop Execution in Polynomial Division**: This invariant checks whether the loop in the division process could execute many times, particularly in cases where coefficients are zero.

    ```cpp
    void check_division_loop_invariant(int all_zero, int n) {
        if (n - all_zero > 5) { // arbitrary threshold for illustration
            cerr << "Warning: division_loop_invariant triggered - loop could run many times" << endl;
            abort();
        }
    }
    ```

### Phase 4: Propagate and Insert Conditional Checks into the Original Program

Now let's integrate these checker functions into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k, cnt = 0;
int a[100000 + 10], known[100000 + 10];

// Checkers for performance invariants

// Invariant to check for trailing zeros
void check_trailing_zeros_invariant(const int* a, int n) {
    int zero_count = 0;
    for (int i = n; i >= 1; --i) {
        if (a[i] == 0)
            zero_count++;
        else
            break;
    }
    if (zero_count > 5) { // threshold chosen for illustration
        cerr << "Warning: trailing_zeros_invariant triggered - long sequence of trailing zeros" << endl;
        abort();
    }
}

// Invariant to check for excessive loop execution
void check_division_loop_invariant(int all_zero, int n) {
    if (n - all_zero > 5) { // threshold chosen for illustration
        cerr << "Warning: division_loop_invariant triggered - loop could run many times" << endl;
        abort();
    }
}

int main() {
    scanf("%d %d", &n, &k);
    for (int i = 1; i <= n + 1; i++) {
        char buf[20];
        scanf("%s", buf);
        if (*buf == '?') {
            known[i] = false;
            cnt++;
        } else {
            known[i] = true;
            sscanf(buf, "%d", &a[i]);
        }
    }
    int ok = 0;
    if (k == 0) {
        if (known[1] == 1 && a[1] == 0) ok = 1;
        if (known[1] == 0 && (n + 1 - cnt) % 2 == 1) ok = 1;
    } else {
        if (cnt != 0) ok = (((n + 1 - cnt) % 2 + cnt % 2) % 2) == 0;
        int all_zero = n + 1;
        while (a[all_zero] == 0) all_zero--;
        long long tmp = 0;
        if (cnt == 0) {
            // Check invariant before potentially slow loop
            check_division_loop_invariant(all_zero, n);
            for (int i = 1; i <= n + 1; i++) {
                tmp -= a[i];
                if (tmp % k != 0) break;
                if (i > all_zero && tmp != 0) break;
                tmp /= k;
                if (i == n + 1 && tmp == 0) ok = 1;
            }
        }
    }
    
    // Check invariant on trailing zeros after input processing
    check_trailing_zeros_invariant(a, n);

    printf("%s\n", ok ? "Yes" : "No");
}
```

### Explanation

1. **Trailing Zeros Invariant**: The `check_trailing_zeros_invariant` function counts the number of trailing zeros and checks if it exceeds a threshold, triggering a warning if it does. It is invoked after input processing to capture potential performance issues from trailing zeros.

2. **Division Loop Invariant**: The `check_division_loop_invariant` function estimates whether the loop in the division process will execute excessively, using the position of the last non-zero coefficient. It is placed before the loop that processes known coefficients when `cnt == 0`.

These checks help identify performance bottlenecks by leveraging runtime conditions indicative of potential slow execution paths.

