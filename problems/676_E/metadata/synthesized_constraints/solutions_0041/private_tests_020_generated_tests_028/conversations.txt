system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 1000000000;
const int nm = 100010;
int n, k;
long long a[nm];
long long mod[30];
long long du[30], x[30];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> k;
  memset(a, 0x3f, sizeof(a));
  int d = 0;
  for (int i = 0; i <= n; ++i) {
    string s;
    cin >> s;
    if (s[0] != '?') {
      stringstream ss;
      ss << s;
      ss >> a[i];
      d++;
    }
  }
  if (d == n + 1) {
    mod[1] = 1000000007;
    for (int i = 2; i < 30; ++i)
      mod[i] = (mod[i - 1] * (long long)rand() + (long long)rand()) % mod[1];
    for (int i = 1; i < 30; ++i) x[i] = 1ll % mod[i];
    for (int i = 0; i <= n; ++i) {
      for (int j = 1; j < 30; ++j) {
        du[j] = (du[j] + a[i] * x[j]) % mod[j];
        x[j] = (x[j] * (long long)k) % mod[j];
      }
    }
    for (int i = 1; i < 30; ++i)
      if (du[i]) {
        cout << "No\n";
        return 0;
      }
    cout << "Yes\n";
    return 0;
  }
  if (k == 0) {
    if (a[0] < inf) {
      if (a[0] == 0) {
        cout << "Yes\n";
      } else
        cout << "No\n";
      return 0;
    } else {
      if (d % 2 == 0) {
        cout << "No\n";
      } else {
        cout << "Yes\n";
      }
      return 0;
    }
  }
  if (n % 2 == 0)
    cout << "No\n";
  else
    cout << "Yes\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0


(G.2) Fast Input

1 10000
1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int nm = 100010; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long a[nm]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long mod[30]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long du[30], x[30]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  memset(a, 0x3f, sizeof(a)); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int d = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= n; ++i) { /* line 15 slow_hit_count: 102, fast_hit_count: 3 */
    string s; /* line 16 slow_hit_count: 202, fast_hit_count: 4 */
    cin >> s; /* line 17 slow_hit_count: 101, fast_hit_count: 2 */
    if (s[0] != '?') { /* line 18 slow_hit_count: 101, fast_hit_count: 2 */
      stringstream ss; /* line 19 slow_hit_count: 101, fast_hit_count: 2 */
      ss << s; /* line 20 slow_hit_count: 101, fast_hit_count: 2 */
      ss >> a[i]; /* line 21 slow_hit_count: 101, fast_hit_count: 2 */
      d++; /* line 22 slow_hit_count: 101, fast_hit_count: 2 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (d == n + 1) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    mod[1] = 1000000007; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 2; i < 30; ++i) /* line 27 slow_hit_count: 29, fast_hit_count: 29 */
      mod[i] = (mod[i - 1] * (long long)rand() + (long long)rand()) % mod[1]; /* line 28 slow_hit_count: 28, fast_hit_count: 28 */
    for (int i = 1; i < 30; ++i) x[i] = 1ll % mod[i]; /* line 29 slow_hit_count: 30, fast_hit_count: 30 */
    for (int i = 0; i <= n; ++i) { /* line 30 slow_hit_count: 102, fast_hit_count: 3 */
      for (int j = 1; j < 30; ++j) { /* line 31 slow_hit_count: 3030, fast_hit_count: 60 */
        du[j] = (du[j] + a[i] * x[j]) % mod[j]; /* line 32 slow_hit_count: 2929, fast_hit_count: 58 */
        x[j] = (x[j] * (long long)k) % mod[j]; /* line 33 slow_hit_count: 2929, fast_hit_count: 58 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i < 30; ++i) /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
      if (du[i]) { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
        cout << "No\n"; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
        return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "Yes\n"; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    if (a[0] < inf) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      if (a[0] == 0) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "Yes\n"; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } else /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "No\n"; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      if (d % 2 == 0) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "No\n"; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "Yes\n"; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2 == 0) /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No\n"; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "Yes\n"; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the slow and fast runs, we can identify the following:

1. **Loop Overhead**: The nested loop structure involving lines 30-33 is significantly more hit during the slow input. Specifically:
   - **Line 31**: `for (int j = 1; j < 30; ++j)` and the subsequent lines within it are hit 3030 times in the slow input compared to only 60 in the fast input.
   - **Lines 32 and 33**: These lines deal with polynomial coefficient calculations, which are executed many times, indicating a potential bottleneck.

2. **Data Structure Interaction**: The manipulation of arrays `du[]` and `x[]` inside these loops suggests that polynomial computations are being repeated for each coefficient, which can become costly with larger input sizes.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis in Phase 1, the following natural language performance invariants can be derived:

1. **Invariant: Polynomial Coefficient Calculation Overhead**
   - **Natural Language Description**: "If the polynomial degree `n` is large and all coefficients are defined, the nested loop calculations for each coefficient can become expensive, especially when `n` approaches its upper limit."
   - **Reasoning**: The nested loops (lines 30-33) contribute to the high hit count, primarily because they iterate over each coefficient and a fixed range of modular calculations.

2. **Invariant: High Degree Polynomial Complexity**
   - **Natural Language Description**: "When all polynomial coefficients are known, the computation involves additional nested operations, leading to increased execution time as the degree `n` increases."
   - **Reasoning**: The overhead is due to the complete evaluation of the polynomial's divisibility by `x - k` using multiple modular checks, which is inherently more complex for larger `n`.

3. **Invariant: Input Size and Coefficient Initialization**
   - **Natural Language Description**: "If the polynomial has a high degree and involves many defined coefficients without '?' placeholders, the initial setup of data structures will intensify, leading to performance degradation."
   - **Reasoning**: The process of populating and manipulating arrays `mod[]`, `du[]`, and `x[]` becomes more intensive as `n` grows and fewer coefficients remain undefined.

By abstracting the program's performance concerns into these invariants, we can better understand and predict slow performance scenarios without relying on specific input values. These invariants help guide optimizations or inform potential enhancements to handle large input sizes more efficiently, especially near the constraint limits of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.

The following game was chosen for the fights: initially there is a polynomial 

P(x) = anxn + an - 1xn - 1 + ... + a1x + a0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient aj that stay near xj is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.

Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.

Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?

Input

The first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, |k| ≤ 10 000) — the size of the polynomial and the integer k.

The i-th of the following n + 1 lines contain character '?' if the coefficient near xi - 1 is yet undefined or the integer value ai, if the coefficient is already known ( - 10 000 ≤ ai ≤ 10 000). Each of integers ai (and even an) may be equal to 0.

Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.

Output

Print "Yes" (without quotes) if the human has winning strategy, or "No" (without quotes) otherwise.

Examples

Input

1 2
-1
?


Output

Yes


Input

2 100
-10000
0
1


Output

Yes

Input

4 5
?
1
?
1
?


Output

No

Note

In the first sample, computer set a0 to  - 1 on the first move, so if human can set coefficient a1 to 0.5 and win.

In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance Invariants in C++

Let's create checker functions to implement the performance-characterizing invariants derived earlier.

1. **Invariant: Polynomial Coefficient Calculation Overhead**

   ```cpp
   void check_coefficient_calculation_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered - high calculation overhead for polynomial coefficients." << endl;
           abort();
       }
   }
   ```

2. **Invariant: High Degree Polynomial Complexity**

   ```cpp
   void check_high_degree_complexity_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered - complexity of operations with high-degree polynomial." << endl;
           abort();
       }
   }
   ```

3. **Invariant: Input Size and Coefficient Initialization**

   ```cpp
   void check_input_size_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered - large input size with initialized coefficients." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the C++ Program

Now, we'll integrate these checker functions at appropriate points in the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 1000000000;
const int nm = 100010;
int n, k;
long long a[nm];
long long mod[30];
long long du[30], x[30];

void check_coefficient_calculation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - high calculation overhead for polynomial coefficients." << endl;
        abort();
    }
}

void check_high_degree_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - complexity of operations with high-degree polynomial." << endl;
        abort();
    }
}

void check_input_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - large input size with initialized coefficients." << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> k;
    memset(a, 0x3f, sizeof(a));
    int d = 0;
    for (int i = 0; i <= n; ++i) {
        string s;
        cin >> s;
        if (s[0] != '?') {
            stringstream ss;
            ss << s;
            ss >> a[i];
            d++;
        }
    }

    // Check for large input with initialized coefficients
    check_input_size_invariant(n > 50000 && d > n / 2);

    if (d == n + 1) {
        // Check for high degree polynomial complexity
        check_high_degree_complexity_invariant(n > 80000);

        mod[1] = 1000000007;
        for (int i = 2; i < 30; ++i)
            mod[i] = (mod[i - 1] * (long long)rand() + (long long)rand()) % mod[1];
        for (int i = 1; i < 30; ++i) x[i] = 1ll % mod[i];
        for (int i = 0; i <= n; ++i) {
            for (int j = 1; j < 30; ++j) {
                du[j] = (du[j] + a[i] * x[j]) % mod[j];
                x[j] = (x[j] * (long long)k) % mod[j];
            }
        }
        
        // Check for polynomial coefficient calculation overhead
        check_coefficient_calculation_invariant(n > 50000);

        for (int i = 1; i < 30; ++i)
            if (du[i]) {
                cout << "No\n";
                return 0;
            }
        cout << "Yes\n";
        return 0;
    }

    if (k == 0) {
        if (a[0] < inf) {
            if (a[0] == 0) {
                cout << "Yes\n";
            } else
                cout << "No\n";
            return 0;
        } else {
            if (d % 2 == 0) {
                cout << "No\n";
            } else {
                cout << "Yes\n";
            }
            return 0;
        }
    }

    if (n % 2 == 0)
        cout << "No\n";
    else
        cout << "Yes\n";
}
```

### Explanation of Code Changes

1. **Check for Large Input with Initialized Coefficients**:
   - Added a check after reading input to warn if `n` is large and most coefficients are already known. This helps to catch scenarios where the input setup itself is costly.

2. **Check for High-Degree Polynomial Complexity**:
   - Added a check for high polynomial degrees when all coefficients are known, focusing on efficient use of resources.

3. **Check for Polynomial Coefficient Calculation Overhead**:
   - Placed this check within the nested loops for calculating polynomial properties to detect when these operations become too costly.

These checks help in identifying performance issues during execution, aiding in optimization efforts and ensuring that the program handles large and complex inputs efficiently.

