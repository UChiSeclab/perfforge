system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice and Bob are playing a game with n piles of stones. It is guaranteed that n is an even number. The i-th pile has a_i stones.

Alice and Bob will play a game alternating turns with Alice going first.

On a player's turn, they must choose exactly n/2 nonempty piles and independently remove a positive number of stones from each of the chosen piles. They can remove a different number of stones from the piles in a single turn. The first player unable to make a move loses (when there are less than n/2 nonempty piles).

Given the starting configuration, determine who will win the game.

Input

The first line contains one integer n (2 ≤ n ≤ 50) — the number of piles. It is guaranteed that n is an even number.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 50) — the number of stones in the piles.

Output

Print a single string "Alice" if Alice wins; otherwise, print "Bob" (without double quotes).

Examples

Input


2
8 8


Output


Bob


Input


4
3 1 4 1


Output


Alice

Note

In the first example, each player can only remove stones from one pile (2/2=1). Alice loses, since Bob can copy whatever Alice does on the other pile, so Alice will run out of moves first.

In the second example, Alice can remove 2 stones from the first pile and 3 stones from the third pile on her first move to guarantee a win.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T = long long>
inline T read() {
  T s = 0, f = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    s = (s << 3) + (s << 1) + ch - 48;
    ch = getchar();
  }
  return s * f;
}
const int N = 1e5 + 5, M = 1e6 + 5, MOD = 1e9 + 7, CM = 998244353,
          INF = 0x3f3f3f3f;
const long long linf = 0x7f7f7f7f7f7f7f7f;
int a[N];
void solve(int kase) {
  int n = read();
  for (int i = 1; i <= n; i++) a[i] = read();
  int k = n / 2;
  int who = 0;
  while (1) {
    set<int> ss;
    for (int i = 1; i <= n; i++) ss.insert(a[i]);
    if (ss.size() == 1) {
      break;
    }
    who = 1 - who;
    int mi = INF;
    for (int i = 1; i <= n; i++) mi = min(mi, a[i]);
    int tot = 0, num = 0;
    for (int i = 1; i <= n; i++) tot += a[i] == mi, num += a[i] != 0;
    if (tot == n / 2) {
      break;
    }
    if (num == n / 2) {
      break;
    }
    if (num < n / 2) {
      who = 1 - who;
      break;
    }
    if (tot < n / 2) {
      for (int i = 1, j = 0; i <= n && j <= k; i++) {
        if (a[i] != mi) a[i] = mi, j++;
      }
    } else {
      if (mi == 0) {
        who = 1 - who;
        break;
      }
      int now = 0;
      for (int i = 1; i <= n; i++) {
        if (a[i] == mi) {
          now++;
          a[i]--;
          break;
        }
      }
      std::vector<int> vis(n + 1, 0);
      for (int i = 1; i <= n; i++) {
        if (now >= k) break;
        if (a[i] > mi) {
          now++;
          a[i]--;
          vis[i] = 1;
        }
      }
      for (int i = 1; i <= n; i++) {
        if (now >= k) break;
        if (a[i] == mi && vis[i] != 0) {
          now++;
          a[i]--;
        }
      }
    }
  }
  printf("%s\n", who ? "Alice" : "Bob");
}
const bool ISFILE = 0, DUO = 0;
int main() {
  clock_t start, finish;
  double totaltime;
  start = clock();
  if (ISFILE) freopen("/Users/i/Desktop/practice/in.txt", "r", stdin);
  if (DUO) {
    int Kase = 0;
    cin >> Kase;
    for (int kase = 1; kase <= Kase; kase++) solve(kase);
  } else
    solve(1);
  finish = clock();
  ;
  ;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

46
15 15 36 15 30 15 15 45 20 29 41 37 15 15 15 15 22 22 38 15 15 15 15 47 15 39 15 15 15 15 42 15 15 34 24 30 21 39 15 22 15 24 15 35 15 21


(G.2) Fast Input

2
15 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T = long long> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline T read() { /* line 4 slow_hit_count: 47, fast_hit_count: 3 */
  T s = 0, f = 1; /* line 5 slow_hit_count: 47, fast_hit_count: 3 */
  char ch = getchar(); /* line 6 slow_hit_count: 47, fast_hit_count: 3 */
  while (!isdigit(ch)) { /* line 7 slow_hit_count: 47, fast_hit_count: 3 */
    if (ch == '-') f = -1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) { /* line 11 slow_hit_count: 141, fast_hit_count: 7 */
    s = (s << 3) + (s << 1) + ch - 48; /* line 12 slow_hit_count: 94, fast_hit_count: 4 */
    ch = getchar(); /* line 13 slow_hit_count: 94, fast_hit_count: 4 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return s * f; /* line 15 slow_hit_count: 47, fast_hit_count: 3 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5, M = 1e6 + 5, MOD = 1e9 + 7, CM = 998244353, /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
          INF = 0x3f3f3f3f; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const long long linf = 0x7f7f7f7f7f7f7f7f; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int kase) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int n = read(); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) a[i] = read(); /* line 23 slow_hit_count: 47, fast_hit_count: 3 */
  int k = n / 2; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int who = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  while (1) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    set<int> ss; /* line 27 slow_hit_count: 31, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) ss.insert(a[i]); /* line 28 slow_hit_count: 1457, fast_hit_count: 3 */
    if (ss.size() == 1) { /* line 29 slow_hit_count: 31, fast_hit_count: 1 */
      break; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    who = 1 - who; /* line 32 slow_hit_count: 31, fast_hit_count: 1 */
    int mi = INF; /* line 33 slow_hit_count: 31, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) mi = min(mi, a[i]); /* line 34 slow_hit_count: 1457, fast_hit_count: 3 */
    int tot = 0, num = 0; /* line 35 slow_hit_count: 31, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) tot += a[i] == mi, num += a[i] != 0; /* line 36 slow_hit_count: 1457, fast_hit_count: 3 */
    if (tot == n / 2) { /* line 37 slow_hit_count: 31, fast_hit_count: 1 */
      break; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (num == n / 2) { /* line 40 slow_hit_count: 31, fast_hit_count: 0 */
      break; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (num < n / 2) { /* line 43 slow_hit_count: 31, fast_hit_count: 0 */
      who = 1 - who; /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
      break; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (tot < n / 2) { /* line 47 slow_hit_count: 30, fast_hit_count: 0 */
      for (int i = 1, j = 0; i <= n && j <= k; i++) { /* line 48 slow_hit_count: 390, fast_hit_count: 0 */
        if (a[i] != mi) a[i] = mi, j++; /* line 49 slow_hit_count: 375, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      if (mi == 0) { /* line 52 slow_hit_count: 15, fast_hit_count: 0 */
        who = 1 - who; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      int now = 0; /* line 56 slow_hit_count: 15, fast_hit_count: 0 */
      for (int i = 1; i <= n; i++) { /* line 57 slow_hit_count: 15, fast_hit_count: 0 */
        if (a[i] == mi) { /* line 58 slow_hit_count: 15, fast_hit_count: 0 */
          now++; /* line 59 slow_hit_count: 15, fast_hit_count: 0 */
          a[i]--; /* line 60 slow_hit_count: 15, fast_hit_count: 0 */
          break; /* line 61 slow_hit_count: 15, fast_hit_count: 0 */
        } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      std::vector<int> vis(n + 1, 0); /* line 64 slow_hit_count: 30, fast_hit_count: 0 */
      for (int i = 1; i <= n; i++) { /* line 65 slow_hit_count: 705, fast_hit_count: 0 */
        if (now >= k) break; /* line 66 slow_hit_count: 690, fast_hit_count: 0 */
        if (a[i] > mi) { /* line 67 slow_hit_count: 690, fast_hit_count: 0 */
          now++; /* line 68 slow_hit_count: 261, fast_hit_count: 0 */
          a[i]--; /* line 69 slow_hit_count: 261, fast_hit_count: 0 */
          vis[i] = 1; /* line 70 slow_hit_count: 261, fast_hit_count: 0 */
        } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 1; i <= n; i++) { /* line 73 slow_hit_count: 599, fast_hit_count: 0 */
        if (now >= k) break; /* line 74 slow_hit_count: 590, fast_hit_count: 0 */
        if (a[i] == mi && vis[i] != 0) { /* line 75 slow_hit_count: 584, fast_hit_count: 0 */
          now++; /* line 76 slow_hit_count: 60, fast_hit_count: 0 */
          a[i]--; /* line 77 slow_hit_count: 60, fast_hit_count: 0 */
        } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 30, fast_hit_count: 0 */
  printf("%s\n", who ? "Alice" : "Bob"); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
const bool ISFILE = 0, DUO = 0; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  clock_t start, finish; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  double totaltime; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  start = clock(); /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  if (ISFILE) freopen("/Users/i/Desktop/practice/in.txt", "r", stdin); /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  if (DUO) { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    int Kase = 0; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> Kase; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    for (int kase = 1; kase <= Kase; kase++) solve(kase); /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    solve(1); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  finish = clock(); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  ; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 100 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance Analysis and Invariants

#### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Discrepancies**:
   - The significant difference in hit counts for the slow input compared to the fast input is observed in lines where loops iterate over the piles (`lines 28, 34, 36, 48, 65, 73`). These lines are hit many more times in the slow input, indicating they are crucial for performance issues.
   - Specifically, line 28 (`for (int i = 1; i <= n; i++) ss.insert(a[i]);`) and line 34 (`for (int i = 1; i <= n; i++) mi = min(mi, a[i]);`) are notable for being heavily iterated.

2. **Loop Analysis**:
   - The use of nested and repeated loops over the list of piles implies that the complexity of these operations grows rapidly with the number of iterations, especially due to the inner operations of inserting into a set and finding minimums.

3. **Data Structure Operations**:
   - Operations such as `ss.insert(a[i])` in each loop iteration are costly, as they involve maintaining a set for each step of the game, which is repeatedly populated and checked.

4. **Conditional Breaks**:
   - The conditional checks (`if (ss.size() == 1)`, `if (tot == n / 2)`, etc.) contribute to exiting the loop, but in complex configurations, they defer decisions, causing more iterations.

#### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: Repeated Set Insertions**:
   - Natural Language: "If each of the game iterations requires nearly full traversal of piles to insert into a set, especially when the set size remains unchanged across iterations, the performance may degrade."
   - This implies that if pile sizes do not change significantly, many redundant operations are conducted.

2. **Invariant: Minimal Value Reductions**:
   - Natural Language: "When the smallest number of stones in any pile is not unique or frequently appears, causing the repeated process of finding and reducing these minimal values, the program tends to slow."
   - This suggests that a high frequency of minimal values across turns can trigger excessive operations.

3. **Invariant: Non-Trivial Configurations**:
   - Natural Language: "If the state of piles involves various non-zero piles that repeatedly approach the count of n/2 nonempty piles without reaching it, the game logic enters costly, repetitive evaluations."
   - This indicates that certain pile configurations lead to prolonged decision-making and computation.

4. **Invariant: Loop Complexity**:
   - Natural Language: "In scenarios where the differences in stone counts across piles are minimal, the program tends to spend excessive time in loops recalculating the same values."
   - This identifies that the workload increases with poor differentiation between pile counts.

These invariants provide insights into potential bottlenecks and inefficiencies, guiding further optimization efforts, such as minimizing redundant operations or optimizing data structure usage.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice and Bob are playing a game with n piles of stones. It is guaranteed that n is an even number. The i-th pile has a_i stones.

Alice and Bob will play a game alternating turns with Alice going first.

On a player's turn, they must choose exactly n/2 nonempty piles and independently remove a positive number of stones from each of the chosen piles. They can remove a different number of stones from the piles in a single turn. The first player unable to make a move loses (when there are less than n/2 nonempty piles).

Given the starting configuration, determine who will win the game.

Input

The first line contains one integer n (2 ≤ n ≤ 50) — the number of piles. It is guaranteed that n is an even number.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 50) — the number of stones in the piles.

Output

Print a single string "Alice" if Alice wins; otherwise, print "Bob" (without double quotes).

Examples

Input


2
8 8


Output


Bob


Input


4
3 1 4 1


Output


Alice

Note

In the first example, each player can only remove stones from one pile (2/2=1). Alice loses, since Bob can copy whatever Alice does on the other pile, so Alice will run out of moves first.

In the second example, Alice can remove 2 stones from the first pile and 3 stones from the third pile on her first move to guarantee a win.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code checkers that implement the performance-characterizing invariants derived earlier. Each checker is designed to detect a specific condition that might lead to performance degradation.

```cpp
void check_repeated_set_insertions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated set insertions!" << endl;
        abort();
    }
}

void check_minimal_value_reductions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive minimal value reductions!" << endl;
        abort();
    }
}

void check_non_trivial_configurations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - non-trivial configurations!" << endl;
        abort();
    }
}

void check_loop_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop complexity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Now we integrate these checker functions into the original code at strategic points to detect performance bottlenecks without adding overhead to critical execution paths.

```cpp
#include <bits/stdc++.h>
using namespace std;

template <typename T = long long>
inline T read() {
    T s = 0, f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch)) {
        s = (s << 3) + (s << 1) + ch - 48;
        ch = getchar();
    }
    return s * f;
}

const int N = 1e5 + 5, M = 1e6 + 5, MOD = 1e9 + 7, CM = 998244353,
          INF = 0x3f3f3f3f;
const long long linf = 0x7f7f7f7f7f7f7f7f;
int a[N];

void check_repeated_set_insertions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated set insertions!" << endl;
        abort();
    }
}

void check_minimal_value_reductions(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive minimal value reductions!" << endl;
        abort();
    }
}

void check_non_trivial_configurations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - non-trivial configurations!" << endl;
        abort();
    }
}

void check_loop_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop complexity!" << endl;
        abort();
    }
}

void solve(int kase) {
    int n = read();
    for (int i = 1; i <= n; i++) a[i] = read();
    int k = n / 2;
    int who = 0;

    while (1) {
        set<int> ss;
        for (int i = 1; i <= n; i++) ss.insert(a[i]);

        // Check for repeated set insertions
        check_repeated_set_insertions(ss.size() < n / 2);

        if (ss.size() == 1) {
            break;
        }
        who = 1 - who;
        int mi = INF;
        for (int i = 1; i <= n; i++) mi = min(mi, a[i]);

        // Check for minimal value reductions
        check_minimal_value_reductions(mi > 0 && count(a + 1, a + n + 1, mi) > n / 2);

        int tot = 0, num = 0;
        for (int i = 1; i <= n; i++) tot += a[i] == mi, num += a[i] != 0;

        if (tot == n / 2) {
            break;
        }
        if (num == n / 2) {
            break;
        }
        if (num < n / 2) {
            who = 1 - who;
            break;
        }
        if (tot < n / 2) {
            for (int i = 1, j = 0; i <= n && j <= k; i++) {
                if (a[i] != mi) a[i] = mi, j++;
            }
        } else {
            if (mi == 0) {
                who = 1 - who;
                break;
            }
            int now = 0;
            for (int i = 1; i <= n; i++) {
                if (a[i] == mi) {
                    now++;
                    a[i]--;
                    break;
                }
            }
            std::vector<int> vis(n + 1, 0);
            for (int i = 1; i <= n; i++) {
                if (now >= k) break;
                if (a[i] > mi) {
                    now++;
                    a[i]--;
                    vis[i] = 1;
                }
            }
            for (int i = 1; i <= n; i++) {
                if (now >= k) break;
                if (a[i] == mi && vis[i] != 0) {
                    now++;
                    a[i]--;
                }
            }
        }

        // Check for non-trivial configurations
        check_non_trivial_configurations(num > n / 2 && tot < n / 2);

        // Check for loop complexity
        check_loop_complexity((tot + num) > (n * 0.75));
    }
    printf("%s\n", who ? "Alice" : "Bob");
}

const bool ISFILE = 0, DUO = 0;

int main() {
    clock_t start, finish;
    double totaltime;
    start = clock();
    if (ISFILE) freopen("/Users/i/Desktop/practice/in.txt", "r", stdin);
    if (DUO) {
        int Kase = 0;
        cin >> Kase;
        for (int kase = 1; kase <= Kase; kase++) solve(kase);
    } else
        solve(1);
    finish = clock();
    return 0;
}
```

### Explanation

1. **Checkers Added**: Each checker is added just before or after potential performance bottlenecks to catch conditions that may lead to a slowdown.
2. **Placement**: The checkers are placed outside of tight loops to minimize performance impact while still capturing the necessary conditions.
3. **Thresholds**: The conditions use logical thresholds (like `ss.size() < n / 2`) to determine when to trigger warnings, without relying on specific numeric data from inputs.

This integration ensures that the program detects and alerts about potential performance issues, helping in optimization and testing processes.

