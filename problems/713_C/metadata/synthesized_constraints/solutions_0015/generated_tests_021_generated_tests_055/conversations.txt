system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sonya was unable to think of a story for this problem, so here comes the formal description.

You are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 3000) — the length of the array.

Next line contains n integer ai (1 ≤ ai ≤ 109).

Output

Print the minimum number of operation required to make the array strictly increasing.

Examples

Input

7
2 1 5 11 5 9 11


Output

9


Input

5
5 4 3 2 1


Output

12

Note

In the first sample, the array is going to look as follows:

2 3 5 6 7 9 11

|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9

And for the second sample:

1 2 3 4 5

|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 5000 + 10;
const long long inf = 1e13 + 10;
long long dp[2][maxn];
int n, a[maxn], b[maxn];
int main() {
  ios_base::sync_with_stdio(false);
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    a[i] -= i;
    b[i] = a[i];
  }
  sort(b + 1, b + n + 1);
  for (int i = 1; i <= n; i++) {
    long long w = inf;
    for (int j = 1; j <= n; j++) {
      w = min(dp[0][j], w);
      dp[1][j] = w + abs(b[j] - a[i]);
    }
    swap(dp[1], dp[0]);
  }
  long long ans = inf;
  for (int j = 1; j <= n; j++) {
    ans = min(ans, dp[0][j]);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
10 16 17 16 1796 1216 1216 1209 3061 3062


(G.2) Fast Input

1
10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 5000 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1e13 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2][maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[maxn], b[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 11, fast_hit_count: 2 */
    cin >> a[i]; /* line 11 slow_hit_count: 10, fast_hit_count: 1 */
    a[i] -= i; /* line 12 slow_hit_count: 10, fast_hit_count: 1 */
    b[i] = a[i]; /* line 13 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(b + 1, b + n + 1); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 16 slow_hit_count: 11, fast_hit_count: 2 */
    long long w = inf; /* line 17 slow_hit_count: 10, fast_hit_count: 1 */
    for (int j = 1; j <= n; j++) { /* line 18 slow_hit_count: 110, fast_hit_count: 2 */
      w = min(dp[0][j], w); /* line 19 slow_hit_count: 100, fast_hit_count: 1 */
      dp[1][j] = w + abs(b[j] - a[i]); /* line 20 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    swap(dp[1], dp[0]); /* line 22 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = inf; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 1; j <= n; j++) { /* line 25 slow_hit_count: 11, fast_hit_count: 2 */
    ans = min(ans, dp[0][j]); /* line 26 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance concerns of the given C program, let's go through the phases to analyze potential bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis**:
   - The most significant difference in hit counts between the slow input and the fast input occurs in the nested loops (lines 16-20). Specifically, line 18 is executed 110 times for the slow input compared to just 2 times for the fast input.
   - The assignment operations in lines 19 and 20 are executed 100 times for the slow input, compared to 1 time for the fast input. This indicates that the program's slowness for the slow input is primarily due to the nested loops iterating over the `dp` array.

2. **Data Structure and Loop Interaction**:
   - The outer loop (line 16) iterates `n` times, and for each iteration, the inner loop (line 18) also iterates `n` times. This results in an `O(n^2)` complexity.
   - The key computation involves updating the `dp` array with minimum operations required to modify array `a` to be strictly increasing by adjusting it to values in the sorted array `b`.

### Phase 2: Derive Performance-Characterizing Invariants

Given the operations and input constraints, we can derive the following performance-characterizing invariants:

1. **High Complexity Due to Quadratic Operations**:
   - **Natural Language Description**: "When the length of the array `n` approaches its upper limit (e.g., close to 3000), the `O(n^2)` operations within the nested loops significantly increase computation time. This complexity is exacerbated when the differences between consecutive elements in the transformed array are large, causing many adjustments."
   - **Code Implementation**: 
     ```cpp
     void check_quadratic_complexity_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: quadratic complexity invariant triggered - large n leading to high loop iterations" << endl;
             abort();
         }
     }

     // After reading n
     check_quadratic_complexity_invariant(n > 2000);  // Assuming n approaching 3000 is troublesome
     ```

2. **Array Adjustments Lead to High Operations**:
   - **Natural Language Description**: "If the initial array has many elements that are larger than their respective indices by a significant margin, the number of required operations to adjust these elements to form a strictly increasing array will be high. This can cause the `dp` updates to iterate heavily over potential values."
   - **Code Implementation**:
     ```cpp
     void check_adjustment_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: adjustment invariant triggered - large differences causing high operation count" << endl;
             abort();
         }
     }

     // Before or after transforming a[i]
     int largeDifferenceCount = 0;
     for (int i = 1; i <= n; i++) {
         if (a[i] > i + threshold) {  // threshold could be a function of n
             largeDifferenceCount++;
         }
     }
     check_adjustment_invariant(largeDifferenceCount > n / 2);  // arbitrary, but suggests many elements need significant adjustment
     ```

### Summary

The performance bottleneck in this program is due to the `O(n^2)` nature of the nested loops, which has a significant impact when `n` is large. Additionally, the number of operations is heavily dependent on how the elements in `a` relate to their indices. By understanding these conditions and leveraging the derived invariants, potential slowdowns can be anticipated and addressed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sonya was unable to think of a story for this problem, so here comes the formal description.

You are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 3000) — the length of the array.

Next line contains n integer ai (1 ≤ ai ≤ 109).

Output

Print the minimum number of operation required to make the array strictly increasing.

Examples

Input

7
2 1 5 11 5 9 11


Output

9


Input

5
5 4 3 2 1


Output

12

Note

In the first sample, the array is going to look as follows:

2 3 5 6 7 9 11

|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9

And for the second sample:

1 2 3 4 5

|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants derived previously into C++ checker functions.

1. **High Complexity Due to Quadratic Operations**:
   - This invariant checks if `n` is approaching its upper limit, which could lead to a slowdown due to the `O(n^2)` operations.

   ```cpp
   void check_quadratic_complexity_invariant(int n) {
       if (n > 2000) {
           cerr << "Warning: quadratic complexity invariant triggered - large n leading to high loop iterations" << endl;
           abort();
       }
   }
   ```

2. **Array Adjustments Lead to High Operations**:
   - This invariant checks if many elements in `a` are significantly larger than their indices, indicating that many operations will be needed.

   ```cpp
   void check_adjustment_invariant(const vector<int>& a, int n) {
       int largeDifferenceCount = 0;
       const int threshold = 100;  // Example threshold for "significant margin"
       for (int i = 1; i <= n; i++) {
           if (a[i] > i + threshold) {
               largeDifferenceCount++;
           }
       }
       if (largeDifferenceCount > n / 2) {
           cerr << "Warning: adjustment invariant triggered - large differences causing high operation count" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Let's integrate these checks into the given C++ program. We will place the checks at effective points in the control flow to avoid unnecessary overheads.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 5000 + 10;
const long long inf = 1e13 + 10;
long long dp[2][maxn];
int n, a[maxn], b[maxn];

// Checker functions based on derived invariants
void check_quadratic_complexity_invariant(int n) {
    if (n > 2000) {
        cerr << "Warning: quadratic complexity invariant triggered - large n leading to high loop iterations" << endl;
        abort();
    }
}

void check_adjustment_invariant(const int* a, int n) {
    int largeDifferenceCount = 0;
    const int threshold = 100;  // Example threshold for "significant margin"
    for (int i = 1; i <= n; i++) {
        if (a[i] > i + threshold) {
            largeDifferenceCount++;
        }
    }
    if (largeDifferenceCount > n / 2) {
        cerr << "Warning: adjustment invariant triggered - large differences causing high operation count" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;

    // Check for potential high complexity due to large n
    check_quadratic_complexity_invariant(n);

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        a[i] -= i;
        b[i] = a[i];
    }

    // Check for potential high operations due to array adjustments
    check_adjustment_invariant(a, n);

    sort(b + 1, b + n + 1);
    for (int i = 1; i <= n; i++) {
        long long w = inf;
        for (int j = 1; j <= n; j++) {
            w = min(dp[0][j], w);
            dp[1][j] = w + abs(b[j] - a[i]);
        }
        swap(dp[1], dp[0]);
    }
    long long ans = inf;
    for (int j = 1; j <= n; j++) {
        ans = min(ans, dp[0][j]);
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **Quadratic Complexity Check**: This check is placed right after reading the input value `n`. It ensures that if `n` is too large (approaching 3000), a warning is triggered, indicating potential issues with nested loop computations.

- **Adjustment Invariant Check**: This check is executed right after modifying the array `a`. It identifies scenarios where many elements have significantly larger values than their indices, implying a high number of operations may be required to adjust them. 

These checks help ensure that performance issues are surfaced early, allowing for code adjustments or optimizations to handle such cases more efficiently.

