system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In a strategic computer game "Settlers II" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.

Every soldier has a rank — some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.

To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.

At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.

You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1 ≤ i ≤ n, 1 ≤ ai ≤ k).

Output

Print a single integer — the number of golden coins needed to raise all the soldiers to the maximal rank.

Examples

Input

4 4
1 2 2 3


Output

4

Input

4 3
1 1 1 1


Output

5

Note

In the first example the ranks will be raised in the following manner:

1 2 2 3 →  2 2 3 4 →  2 3 4 4 →  3 4 4 4 →  4 4 4 4

Thus totals to 4 training sessions that require 4 golden coins.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<int, int> m;
map<int, int> tmp;
int n, k;
bool flag;
int main() {
  ios_base::sync_with_stdio(false);
  cin >> n >> k;
  int a;
  for (int i = 0; i < n; i++) {
    cin >> a;
    m[a]++;
  }
  int cnt = 0;
  while (++cnt) {
    tmp = m;
    for (int i = 1; i < k; i++)
      if (m[i]) {
        tmp[i]--;
        tmp[i + 1]++;
        flag = true;
      }
    if (flag)
      flag = false;
    else
      break;
    m = tmp;
  }
  cout << cnt - 1 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 100
2


(G.2) Fast Input

1 2
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> tmp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool flag; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int a; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    m[a]++; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int cnt = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  while (++cnt) { /* line 16 slow_hit_count: 99, fast_hit_count: 1 */
    tmp = m; /* line 17 slow_hit_count: 99, fast_hit_count: 1 */
    for (int i = 1; i < k; i++) /* line 18 slow_hit_count: 9900, fast_hit_count: 2 */
      if (m[i]) { /* line 19 slow_hit_count: 9801, fast_hit_count: 1 */
        tmp[i]--; /* line 20 slow_hit_count: 98, fast_hit_count: 0 */
        tmp[i + 1]++; /* line 21 slow_hit_count: 98, fast_hit_count: 0 */
        flag = true; /* line 22 slow_hit_count: 98, fast_hit_count: 0 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) /* line 24 slow_hit_count: 99, fast_hit_count: 1 */
      flag = false; /* line 25 slow_hit_count: 98, fast_hit_count: 0 */
    else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    m = tmp; /* line 28 slow_hit_count: 98, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt - 1 << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the given C program, we need to analyze the code behavior based on the hit counts provided for both the fast and slow inputs. Let’s break down the analysis and derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Observation of Hit Counts:**
   - The `while` loop starting at line 16 is executed 99 times for the slow input, compared to just once for the fast input.
   - The inner `for` loop starting at line 18 is executed 9900 times for the slow input but only 2 times for the fast input.
   - The `if` condition at line 19 is checked 9801 times for the slow input, while being checked only once for the fast input.

2. **Analysis:**
   - The `while` loop is the primary source of the increased execution time for the slow input. It runs until no more rank promotion is possible (i.e., all soldiers reach rank k).
   - The inner `for` loop iterates over ranks from 1 to k (from lines 18 to 22). For the slow input, the rank promotion happens very frequently, indicating this loop is a potential bottleneck when k is large.
   - High iteration counts on lines 18 and 19 suggest that the combination of a high `k` value and presence of soldiers at ranks significantly below `k` leads to many operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can generate natural language statements about conditions under which the program is likely to enter a slow path:

1. **High Rank Range:**
   - **Invariant:** "If the maximum rank `k` is large and close to its upper constraint, the number of operations increases significantly as the program attempts to promote soldiers to rank `k`."
   - **Reasoning:** As `k` approaches 100, the number of iterations required to promote soldiers increases, especially if soldiers start at lower ranks.

2. **Initial Rank Distribution:**
   - **Invariant:** "If a significant number of soldiers are at the lowest rank and need to be promoted through several ranks to reach the maximum rank `k`, the program will experience a slowdown due to repeated operations in the promotion loop."
   - **Reasoning:** Soldiers starting at rank 1 will require multiple iterations to reach rank `k`, causing the loop to execute more times.

3. **Single Soldier Scenario:**
   - **Invariant:** "When `n` is minimal (such as 1), and the soldier's rank is less than `k`, the loop may iterate `k - rank` times, leading to a slowdown if `k` is near its upper limit."
   - **Reasoning:** With `n = 1`, each iteration results in a change, and if `k` is large, this leads to as many iterations as necessary to reach rank `k`.

These invariants highlight conditions that contribute to the slowdown of the program. They abstract away specific numeric values but consider the constraints of the problem (e.g., `n <= 100` and `k <= 100`). They help identify potential future slow scenarios by focusing on input patterns leading to extensive loop executions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In a strategic computer game "Settlers II" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.

Every soldier has a rank — some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.

To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.

At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.

You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1 ≤ i ≤ n, 1 ≤ ai ≤ k).

Output

Print a single integer — the number of golden coins needed to raise all the soldiers to the maximal rank.

Examples

Input

4 4
1 2 2 3


Output

4

Input

4 3
1 1 1 1


Output

5

Note

In the first example the ranks will be raised in the following manner:

1 2 2 3 →  2 2 3 4 →  2 3 4 4 →  3 4 4 4 →  4 4 4 4

Thus totals to 4 training sessions that require 4 golden coins.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Based on the performance-characteristic invariants derived earlier, we will now create C++ code snippets to check these conditions at runtime.

1. **High Rank Range Checker:**
   - This checker will trigger when `k` is large, approaching its upper constraint.

```cpp
void check_high_rank_invariant(int k) {
    if (k > 80) { // threshold chosen based on maximum constraint
        cerr << "Warning: High rank invariant triggered - large k value may cause slowdown!" << endl;
        abort();
    }
}
```

2. **Initial Rank Distribution Checker:**
   - This checker will activate if a large number of soldiers start at the lowest rank.

```cpp
void check_initial_rank_distribution_invariant(const vector<int>& ranks) {
    int low_rank_count = count(ranks.begin(), ranks.end(), 1);
    if (low_rank_count > 0.5 * ranks.size()) { // more than 50% of soldiers at lowest rank
        cerr << "Warning: Initial rank distribution invariant triggered - many soldiers at lowest rank!" << endl;
        abort();
    }
}
```

3. **Single Soldier Scenario Checker:**
   - This checker will flag when `n` is minimal and the soldier's rank is far from `k`.

```cpp
void check_single_soldier_invariant(int n, int first_rank, int k) {
    if (n == 1 && k - first_rank > 80) { // large difference between k and the soldier's rank
        cerr << "Warning: Single soldier invariant triggered - single soldier with low initial rank!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Next, we will integrate the checker functions into the original program, placing them at points in the control flow where they will not add significant overhead, such as immediately after input reading.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Define the checker functions
void check_high_rank_invariant(int k) {
    if (k > 80) { // threshold chosen based on maximum constraint
        cerr << "Warning: High rank invariant triggered - large k value may cause slowdown!" << endl;
        abort();
    }
}

void check_initial_rank_distribution_invariant(const vector<int>& ranks) {
    int low_rank_count = count(ranks.begin(), ranks.end(), 1);
    if (low_rank_count > 0.5 * ranks.size()) { // more than 50% of soldiers at lowest rank
        cerr << "Warning: Initial rank distribution invariant triggered - many soldiers at lowest rank!" << endl;
        abort();
    }
}

void check_single_soldier_invariant(int n, int first_rank, int k) {
    if (n == 1 && k - first_rank > 80) { // large difference between k and the soldier's rank
        cerr << "Warning: Single soldier invariant triggered - single soldier with low initial rank!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    cin >> n >> k;

    // Check high rank invariant
    check_high_rank_invariant(k);

    vector<int> ranks(n);
    for (int i = 0; i < n; ++i) {
        cin >> ranks[i];
    }

    // Check initial rank distribution invariant
    check_initial_rank_distribution_invariant(ranks);

    // Check single soldier invariant
    // Since ranks are in non-decreasing order, the first element is the lowest rank
    check_single_soldier_invariant(n, ranks[0], k);

    map<int, int> m, tmp;
    for (int i = 0; i < n; i++) {
        m[ranks[i]]++;
    }
    int cnt = 0;
    bool flag;
    while (++cnt) {
        tmp = m;
        for (int i = 1; i < k; i++)
            if (m[i]) {
                tmp[i]--;
                tmp[i + 1]++;
                flag = true;
            }
        if (flag)
            flag = false;
        else
            break;
        m = tmp;
    }
    cout << cnt - 1 << endl;

    return 0;
}
```

### Explanation

- **High Rank Invariant Check:** Placed after reading `k` to check if the rank constraint is near its upper limit.
- **Initial Rank Distribution Invariant Check:** After reading soldier ranks to see if a majority start at the lowest rank.
- **Single Soldier Invariant Check:** Right after reading the ranks to ensure the situation is handled if `n` is 1.

These checks provide early warnings for potentially slow scenarios based on the input, and they are inserted in such a way that they do not degrade the performance by running inside critical loops.

