system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In a strategic computer game "Settlers II" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.

Every soldier has a rank — some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.

To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.

At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.

You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1 ≤ i ≤ n, 1 ≤ ai ≤ k).

Output

Print a single integer — the number of golden coins needed to raise all the soldiers to the maximal rank.

Examples

Input

4 4
1 2 2 3


Output

4

Input

4 3
1 1 1 1


Output

5

Note

In the first example the ranks will be raised in the following manner:

1 2 2 3 →  2 2 3 4 →  2 3 4 4 →  3 4 4 4 →  4 4 4 4

Thus totals to 4 training sessions that require 4 golden coins.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k;
  while (scanf("%d%d", &n, &k) == 2) {
    int T[100], min = 2e9;
    priority_queue<int> Q;
    for (int i = 0; i < n; i++) {
      int tmp;
      scanf("%d", &tmp);
      if (min > tmp) min = tmp;
      Q.push(tmp);
    }
    int ans = 0;
    while (min < k) {
      int prev = -1;
      min = 2e9;
      for (int i = 0; i < n; i++) {
        int cur = Q.top();
        Q.pop();
        if (cur == prev)
          T[i] = cur;
        else
          prev = cur, T[i] = cur + 1;
      }
      ans++;
      for (int i = 0; i < n; i++) {
        if (min > T[i]) min = T[i];
        Q.push(T[i]);
      }
    }
    printf("%d\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 2
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2


(G.2) Fast Input

1 2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 2, fast_hit_count: 2 */
  int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d%d", &n, &k) == 2) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
    int T[100], min = 2e9; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    priority_queue<int> Q; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 101, fast_hit_count: 2 */
      int tmp; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      scanf("%d", &tmp); /* line 10 slow_hit_count: 100, fast_hit_count: 1 */
      if (min > tmp) min = tmp; /* line 11 slow_hit_count: 100, fast_hit_count: 1 */
      Q.push(tmp); /* line 12 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    int ans = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    while (min < k) { /* line 15 slow_hit_count: 60, fast_hit_count: 2 */
      int prev = -1; /* line 16 slow_hit_count: 59, fast_hit_count: 1 */
      min = 2e9; /* line 17 slow_hit_count: 59, fast_hit_count: 1 */
      for (int i = 0; i < n; i++) { /* line 18 slow_hit_count: 5959, fast_hit_count: 2 */
        int cur = Q.top(); /* line 19 slow_hit_count: 5900, fast_hit_count: 1 */
        Q.pop(); /* line 20 slow_hit_count: 5900, fast_hit_count: 1 */
        if (cur == prev) /* line 21 slow_hit_count: 5900, fast_hit_count: 1 */
          T[i] = cur; /* line 22 slow_hit_count: 4071, fast_hit_count: 0 */
        else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
          prev = cur, T[i] = cur + 1; /* line 24 slow_hit_count: 1829, fast_hit_count: 1 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      ans++; /* line 26 slow_hit_count: 59, fast_hit_count: 1 */
      for (int i = 0; i < n; i++) { /* line 27 slow_hit_count: 5959, fast_hit_count: 2 */
        if (min > T[i]) min = T[i]; /* line 28 slow_hit_count: 5900, fast_hit_count: 1 */
        Q.push(T[i]); /* line 29 slow_hit_count: 5900, fast_hit_count: 1 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", ans); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, let's break down the analysis into the specified phases and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - Lines 18-29 are executed 5,959 times in the slow run compared to just 2 times in the fast run.
   - Specifically, lines 19-29 show significant hit differences, indicating that the nested operations in this segment heavily contribute to the slowdown. 

2. **Pinpoint Inefficient Code**:
   - The loop at line 18, which iterates over `n` soldiers, is executed multiple times due to the condition `min < k` in line 15. 
   - Line 19 (`int cur = Q.top()`) and line 20 (`Q.pop()`) suggest repeated priority queue operations, which are costly.
   - The condition `if (cur == prev)` (line 21) and the alternating assignment in lines 22 and 24 cause frequent updates to the array `T` and the priority queue `Q`.

3. **Interaction with Data Structures and Loops**:
   - The priority queue operations and the condition checks inside the loop are central to the repeated execution. The program appears to sort or reorder the data structure frequently as soldiers' ranks increase, forming groups repeatedly until reaching maximum rank `k`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language performance invariants that describe the conditions leading to the slowdown:

1. **High Number of Training Sessions**:
   - **Invariant**: "If the majority of soldiers start with low ranks, especially rank 1, and need to be trained to rank `k`, the number of training sessions—and thus the execution time—will significantly increase."
   - **Rationale**: When most soldiers have the lowest rank, the program must loop through many cycles of rank increase, leading to heightened activity in the inner loops and priority queue operations.

2. **Cost of Priority Queue Operations**:
   - **Invariant**: "When the input consists of many soldiers (`n` close to 100) with a small range of ranks such as 1 to 2, the frequent reordering and grouping operations on the priority queue will slow down the execution."
   - **Rationale**: A large number of elements with small rank differences requires frequent priority queue operations (push and pop), which are computationally expensive.

3. **Inefficient Grouping in Training**:
   - **Invariant**: "If initial groups of soldiers have minimal rank diversity and most are below rank `k`, the need to repeatedly regroup and increase ranks can result in inefficient processing and extensive computation time."
   - **Rationale**: Minimal rank diversity with most soldiers below rank `k` means forming new groups each cycle, increasing the computational load.

By understanding these performance-characterizing invariants, we can better anticipate and mitigate slowdowns in similar scenarios, especially in the context of strategic decision-making in the game.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In a strategic computer game "Settlers II" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.

Every soldier has a rank — some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.

To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.

At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.

You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1 ≤ i ≤ n, 1 ≤ ai ≤ k).

Output

Print a single integer — the number of golden coins needed to raise all the soldiers to the maximal rank.

Examples

Input

4 4
1 2 2 3


Output

4

Input

4 3
1 1 1 1


Output

5

Note

In the first example the ranks will be raised in the following manner:

1 2 2 3 →  2 2 3 4 →  2 3 4 4 →  3 4 4 4 →  4 4 4 4

Thus totals to 4 training sessions that require 4 golden coins.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ code snippets for checking the performance-characterizing invariants:

1. **High Number of Training Sessions**:
   - **Condition**: When the majority of soldiers start at rank 1 and need to be trained to rank `k`.

   ```cpp
   void check_majority_low_rank_invariant(int n, const vector<int>& ranks, int k) {
       int lowRankCount = count(ranks.begin(), ranks.end(), 1);
       if (lowRankCount > n / 2 && k > 1) {
           cerr << "Warning: Majority of soldiers starting with rank 1, expect high number of training sessions!" << endl;
           abort();
       }
   }
   ```

2. **Cost of Priority Queue Operations**:
   - **Condition**: When `n` is large and ranks are narrowly distributed, causing frequent queue operations.

   ```cpp
   void check_priority_queue_invariant(int n, int k, const vector<int>& ranks) {
       if (n > 50 && (k - ranks.front() <= 1)) {
           cerr << "Warning: Large n with narrow rank range can cause frequent queue operations!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Grouping in Training**:
   - **Condition**: Minimal rank diversity among soldiers, causing repeated regrouping.

   ```cpp
   void check_rank_diversity_invariant(int n, const vector<int>& ranks) {
       set<int> uniqueRanks(ranks.begin(), ranks.end());
       if (uniqueRanks.size() < 3) {
           cerr << "Warning: Minimal rank diversity detected, expect inefficient processing!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program. We'll add the checks after input parsing and before the main computational loops, so as not to degrade performance unnecessarily.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance checker functions
void check_majority_low_rank_invariant(int n, const vector<int>& ranks, int k) {
    int lowRankCount = count(ranks.begin(), ranks.end(), 1);
    if (lowRankCount > n / 2 && k > 1) {
        cerr << "Warning: Majority of soldiers starting with rank 1, expect high number of training sessions!" << endl;
        abort();
    }
}

void check_priority_queue_invariant(int n, int k, const vector<int>& ranks) {
    if (n > 50 && (k - ranks.front() <= 1)) {
        cerr << "Warning: Large n with narrow rank range can cause frequent queue operations!" << endl;
        abort();
    }
}

void check_rank_diversity_invariant(int n, const vector<int>& ranks) {
    set<int> uniqueRanks(ranks.begin(), ranks.end());
    if (uniqueRanks.size() < 3) {
        cerr << "Warning: Minimal rank diversity detected, expect inefficient processing!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    while (scanf("%d%d", &n, &k) == 2) {
        vector<int> ranks(n);
        for (int i = 0; i < n; i++) {
            scanf("%d", &ranks[i]);
        }

        // Applying performance checks
        check_majority_low_rank_invariant(n, ranks, k);
        check_priority_queue_invariant(n, k, ranks);
        check_rank_diversity_invariant(n, ranks);

        int T[100], min = 2e9;
        priority_queue<int> Q;
        for (int i = 0; i < n; i++) {
            Q.push(ranks[i]);
        }
        int ans = 0;
        while (min < k) {
            int prev = -1;
            min = 2e9;
            for (int i = 0; i < n; i++) {
                int cur = Q.top();
                Q.pop();
                if (cur == prev)
                    T[i] = cur;
                else
                    prev = cur, T[i] = cur + 1;
            }
            ans++;
            for (int i = 0; i < n; i++) {
                if (min > T[i]) min = T[i];
                Q.push(T[i]);
            }
        }
        printf("%d\n", ans);
    }
    return 0;
}
```

### Explanation

- **Placement**: The checks are placed after parsing the input but before entering the main loop, ensuring they do not add overhead within tight loops.
- **Functionality**: Each check corresponds to a specific invariant about the input data structure that could lead to performance degradation.
- **Abort**: The checks use `abort()` to stop execution if a performance bottleneck condition is detected, making them suitable for debugging and testing scenarios.

