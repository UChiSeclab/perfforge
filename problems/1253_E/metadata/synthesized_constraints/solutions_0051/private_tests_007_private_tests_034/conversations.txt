system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dp[100005];
int main() {
  int n, m;
  cin >> n >> m;
  vector<pair<int, int>> a(n);
  for (auto &x : a) {
    cin >> x.first >> x.second;
  }
  sort(a.begin(), a.end());
  memset(dp, 0x3f, sizeof(dp));
  dp[m + 1] = 0;
  for (int i = m; i >= 1; i--) {
    if (i == 1) {
      int v;
      v++;
    }
    for (int j = 0; j < n; j++) {
      if (a[j].first + a[j].second >= i) {
        int req = 0;
        if (a[j].first - a[j].second > i) {
          req = a[j].first - a[j].second - i;
        }
        dp[i] = min(dp[i],
                    req + dp[min(m + 1, a[j].first + a[j].second + req + 1)]);
        if (a[j].first + a[j].second < m) {
          req = max(req, m - (a[j].first + a[j].second));
        }
        dp[i] = min(dp[i], req);
      }
    }
  }
  cout << dp[1] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 100000
98796 0
20001 78778
98790 0
98781 0
98787 0
98793 0
98784 0
99998 1200


(G.2) Fast Input

1 100000
99998 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dp[100005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int>> a(n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto &x : a) { /* line 8 slow_hit_count: 9, fast_hit_count: 2 */
    cin >> x.first >> x.second; /* line 9 slow_hit_count: 8, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a.begin(), a.end()); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0x3f, sizeof(dp)); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  dp[m + 1] = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = m; i >= 1; i--) { /* line 14 slow_hit_count: 100001, fast_hit_count: 100001 */
    if (i == 1) { /* line 15 slow_hit_count: 100000, fast_hit_count: 100000 */
      int v; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      v++; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < n; j++) { /* line 19 slow_hit_count: 900000, fast_hit_count: 200000 */
      if (a[j].first + a[j].second >= i) { /* line 20 slow_hit_count: 800000, fast_hit_count: 100000 */
        int req = 0; /* line 21 slow_hit_count: 791510, fast_hit_count: 99998 */
        if (a[j].first - a[j].second > i) { /* line 22 slow_hit_count: 791510, fast_hit_count: 99998 */
          req = a[j].first - a[j].second - i; /* line 23 slow_hit_count: 691522, fast_hit_count: 99997 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i] = min(dp[i], /* line 25 slow_hit_count: 1583020, fast_hit_count: 199996 */
                    req + dp[min(m + 1, a[j].first + a[j].second + req + 1)]); /* line 26 slow_hit_count: 791510, fast_hit_count: 99998 */
        if (a[j].first + a[j].second < m) { /* line 27 slow_hit_count: 791510, fast_hit_count: 99998 */
          req = max(req, m - (a[j].first + a[j].second)); /* line 28 slow_hit_count: 691510, fast_hit_count: 99998 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i] = min(dp[i], req); /* line 30 slow_hit_count: 791510, fast_hit_count: 99998 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[1] << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the given C program and derive performance-characterizing invariants, let's follow the tasks outlined in the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The outer loop on line 14 iterates `m` times, thus repeating 100,001 times (for `m = 100,000`).
   - The inner loop on line 19 iterates `n` times for each outer loop iteration, resulting in a total of 900,000 iterations for the slow input (since `8 x 100,000`).
   - Line 20 is hit 800,000 times, indicating a substantial number of checks whether each antenna covers a position `i`.
   - Line 25 is hit heavily, suggesting frequent updates to the `dp` array.

2. **Pinpoint High-Hit Lines:**
   - **Line 19**: The inner loop is executed frequently due to large `n` and `m`.
   - **Lines 20-30**: These lines perform checks and updates for each antenna and position, specifically handling conditions where the antenna's range needs incrementing.

3. **Interactions with Data Structures:**
   - The `dp` array is used to track the minimum cost to cover up to each position. It is updated based on the current antenna's coverage, which can involve multiple calculations and condition checks for each position and antenna.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the code and hit counts, the following performance-characterizing invariants can be derived:

1. **Frequent Antenna Coverage Check:**
   - **Natural Language Invariant:** "When the number of antennas `n` is high relative to the total positions `m`, and multiple antennas have ranges that initially do not cover most of the street, the program may spend considerable time in checking and updating coverage for each position."
   - **Threshold Suggestion:** The complexity grows with `n`, which can reach up to 80, and `m`, which can reach up to 100,000. The performance degrades significantly if many antennas have small initial coverage, leading to frequent updates.

2. **Multiple Coverage Adjustments:**
   - **Natural Language Invariant:** "If many antennas initially have small coverage, requiring frequent scope adjustments to ensure full coverage of the street, the computation cost increases significantly."
   - **Threshold Suggestion:** The performance impact becomes significant when a substantial portion of antennas needs their range incremented multiple times to meet the coverage requirement for large `m`.

3. **High Frequency of DP Updates:**
   - **Natural Language Invariant:** "When the cost array `dp` is updated repeatedly for large segments of the street, especially with many antennas causing overlapping updates, the performance may degrade."
   - **Threshold Suggestion:** A high density of antennas near the critical regions (start and end of the street) that initially do not cover the required range can trigger many updates.

These invariants help characterize situations leading to slow performance without relying on specific numeric values from the slow input, focusing instead on general conditions and patterns that lead to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

Solution (C++ code):
{solution}


assistant: Let's proceed with translating the natural language performance invariants into C++ runtime checks and then integrate these checks into the provided C++ program.

### Phase 3: Implementing the Invariants as Runtime Checks

1. **Frequent Antenna Coverage Check:**
   - **Invariant:** "When the number of antennas `n` is high relative to the total positions `m`, and multiple antennas have ranges that initially do not cover most of the street, the program may spend considerable time in checking and updating coverage for each position."
   - **C++ Code:**
     ```cpp
     void check_antenna_coverage(int n, int m, const vector<pair<int, int>>& a) {
         int uncovered_positions = 0;
         for (int pos = 1; pos <= m; ++pos) {
             bool covered = false;
             for (const auto& antenna : a) {
                 if (pos >= antenna.first - antenna.second && pos <= antenna.first + antenna.second) {
                     covered = true;
                     break;
                 }
             }
             if (!covered) ++uncovered_positions;
         }
         if (uncovered_positions > m / 2) {  // Assuming significant slowdown if more than half the positions are initially uncovered
             cerr << "Warning: Performance bottleneck condition triggered due to many uncovered positions!" << endl;
             abort();
         }
     }
     ```

2. **Multiple Coverage Adjustments:**
   - **Invariant:** "If many antennas initially have small coverage, requiring frequent scope adjustments to ensure full coverage of the street, the computation cost increases significantly."
   - **C++ Code:**
     ```cpp
     void check_coverage_adjustments(const vector<pair<int, int>>& a, int m) {
         int small_coverage_count = 0;
         for (const auto& antenna : a) {
             if (antenna.second < m / 10) {  // Assume small coverage if less than a tenth of `m`
                 ++small_coverage_count;
             }
         }
         if (small_coverage_count > a.size() / 2) {  // More than half antennas with small coverage
             cerr << "Warning: Performance bottleneck due to many antennas with small initial coverage!" << endl;
             abort();
         }
     }
     ```

3. **High Frequency of DP Updates:**
   - **Invariant:** "When the cost array `dp` is updated repeatedly for large segments of the street, especially with many antennas causing overlapping updates, the performance may degrade."
   - **C++ Code:**
     ```cpp
     void check_dp_updates(int n, int m) {
         if (m > 10000 && n > 40) {  // Arbitrary threshold to detect potential performance issues
             cerr << "Warning: Performance bottleneck due to frequent DP updates for large m and n!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrating the Checks into the Original Program

Let's integrate these checks into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int dp[100005];

void check_antenna_coverage(int n, int m, const vector<pair<int, int>>& a) {
    int uncovered_positions = 0;
    for (int pos = 1; pos <= m; ++pos) {
        bool covered = false;
        for (const auto& antenna : a) {
            if (pos >= antenna.first - antenna.second && pos <= antenna.first + antenna.second) {
                covered = true;
                break;
            }
        }
        if (!covered) ++uncovered_positions;
    }
    if (uncovered_positions > m / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to many uncovered positions!" << endl;
        abort();
    }
}

void check_coverage_adjustments(const vector<pair<int, int>>& a, int m) {
    int small_coverage_count = 0;
    for (const auto& antenna : a) {
        if (antenna.second < m / 10) {
            ++small_coverage_count;
        }
    }
    if (small_coverage_count > a.size() / 2) {
        cerr << "Warning: Performance bottleneck due to many antennas with small initial coverage!" << endl;
        abort();
    }
}

void check_dp_updates(int n, int m) {
    if (m > 10000 && n > 40) {
        cerr << "Warning: Performance bottleneck due to frequent DP updates for large m and n!" << endl;
        abort();
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> a(n);
    for (auto &x : a) {
        cin >> x.first >> x.second;
    }
    
    // Check for potential performance bottlenecks
    check_antenna_coverage(n, m, a);
    check_coverage_adjustments(a, m);
    check_dp_updates(n, m);
    
    sort(a.begin(), a.end());
    memset(dp, 0x3f, sizeof(dp));
    dp[m + 1] = 0;
    for (int i = m; i >= 1; i--) {
        if (i == 1) {
            int v;
            v++;
        }
        for (int j = 0; j < n; j++) {
            if (a[j].first + a[j].second >= i) {
                int req = 0;
                if (a[j].first - a[j].second > i) {
                    req = a[j].first - a[j].second - i;
                }
                dp[i] = min(dp[i],
                            req + dp[min(m + 1, a[j].first + a[j].second + req + 1)]);
                if (a[j].first + a[j].second < m) {
                    req = max(req, m - (a[j].first + a[j].second));
                }
                dp[i] = min(dp[i], req);
            }
        }
    }
    cout << dp[1] << endl;
    return 0;
}
```

Each of the check functions is called after reading the input to ensure the conditions can be evaluated without adding overhead inside tight loops. The checks help identify scenarios that could lead to a performance bottleneck, providing early warnings before the program continues with potentially time-consuming operations.

