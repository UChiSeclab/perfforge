system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1);
const long long mod = 1e9 + 7;
const long long N = 80 + 5, K = 105;
const int si = (1 << 20);
const long long add = 1e4;
const long long M = 1e5 + 5;
const double INFdb = 1e10;
bool color[M];
int n, m;
pair<int, int> a[N];
int dp[M];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i].first >> a[i].second;
    for (int j = max(1, a[i].first - a[i].second);
         j <= min(m, a[i].first + a[i].second); ++j)
      color[j] = 1;
  }
  sort(a + 1, a + 1 + n);
  for (int i = 0; i < M; ++i) dp[i] = M;
  dp[0] = 0;
  for (int i = 1; i <= m; ++i) {
    if (color[i])
      dp[i] = min(dp[i], dp[i - 1]);
    else
      dp[i] = min(dp[i], dp[i - 1] + 1);
    for (int j = 1; j <= n; ++j) {
      if (a[j].first > i) break;
      int dist = (i - a[j].first) - a[j].second;
      if (dist < 0) dist = 0;
      int pos = max(0, a[j].first - a[j].second - dist - 1);
      dp[i] = min(dp[i], dp[pos] + dist);
    }
  }
  cout << dp[m];
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 100000
1217 0
1208 0
1220 0
3 1200
1205 0
1214 0
1211 0
80000 78778


(G.2) Fast Input

3 100000
3 1200
1205 0
80000 78793


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 80 + 5, K = 105; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int si = (1 << 20); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const long long add = 1e4; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const long long M = 1e5 + 5; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const double INFdb = 1e10; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool color[M]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> a[N]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int dp[M]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 19 slow_hit_count: 9, fast_hit_count: 4 */
    cin >> a[i].first >> a[i].second; /* line 20 slow_hit_count: 8, fast_hit_count: 3 */
    for (int j = max(1, a[i].first - a[i].second); /* line 21 slow_hit_count: 8, fast_hit_count: 3 */
         j <= min(m, a[i].first + a[i].second); ++j) /* line 22 slow_hit_count: 99996, fast_hit_count: 100001 */
      color[j] = 1; /* line 23 slow_hit_count: 99988, fast_hit_count: 99998 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a + 1, a + 1 + n); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < M; ++i) dp[i] = M; /* line 26 slow_hit_count: 100006, fast_hit_count: 100006 */
  dp[0] = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; ++i) { /* line 28 slow_hit_count: 100001, fast_hit_count: 100001 */
    if (color[i]) /* line 29 slow_hit_count: 100000, fast_hit_count: 100000 */
      dp[i] = min(dp[i], dp[i - 1]); /* line 30 slow_hit_count: 99988, fast_hit_count: 99998 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i] = min(dp[i], dp[i - 1] + 1); /* line 32 slow_hit_count: 12, fast_hit_count: 2 */
    for (int j = 1; j <= n; ++j) { /* line 33 slow_hit_count: 812730, fast_hit_count: 318795 */
      if (a[j].first > i) break; /* line 34 slow_hit_count: 792729, fast_hit_count: 298794 */
      int dist = (i - a[j].first) - a[j].second; /* line 35 slow_hit_count: 712730, fast_hit_count: 218795 */
      if (dist < 0) dist = 0; /* line 36 slow_hit_count: 712730, fast_hit_count: 218795 */
      int pos = max(0, a[j].first - a[j].second - dist - 1); /* line 37 slow_hit_count: 712730, fast_hit_count: 218795 */
      dp[i] = min(dp[i], dp[pos] + dist); /* line 38 slow_hit_count: 712730, fast_hit_count: 218795 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[m]; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n"; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**

   - **Lines 21-23:** These lines are responsible for marking the range covered by each antenna. In the slow run, these lines are hit nearly 100,000 times, indicating that the initial range coverage by antennas is extensive.

   - **Lines 28-32:** The iterations from 1 to `m` are executed 100,000 times, as expected. However, the decision on whether to add a coin is primarily based on whether the position is already covered.

   - **Lines 33-38:** These are hit significantly more in the slow run (812,730 times) compared to the fast run (318,795 times). This indicates that the nested loop which adjusts the `dp` array based on each antenna is a major contributor to the slowdown. Each antenna is checked for each uncovered position, leading to an excessive number of operations.

2. **Interaction with Data Structures:**

   - The `dp` array is heavily utilized to keep track of the minimum coins needed up to each position. The complexity arises due to recalculating and updating `dp[i]` for each `i` with respect to each antenna within the nested loop.

   - The `color` array is used to quickly determine if a position is already covered but doesn't directly contribute to the slowdown.

3. **Input Constraints:**
   
   - The constraints `n <= 80` and `m <= 100,000` mean that while the number of antennas is relatively small, the potential range they cover (and thus operations per position) is very large. The nested loop over positions and antennas scales poorly with more positions being uncovered initially.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Antenna Overlap and Coverage Gaps**

   - **Natural Language Statement:** "If the initial coverage of antennas leaves large gaps that require excessive incremental coverage adjustments, especially when many antennas are clustered or overlapping, the program may slow down significantly."

   - **Explanation:** This occurs because, as seen in the slow input, many antennas are clustered around a point (e.g., all around position 1200) but are not contributing to covering a large portion of the street initially. This results in high recalculations in the nested loop.

2. **Invariant 2: Position Coverage Density**

   - **Natural Language Statement:** "If the density of uncovered positions is high, requiring checks against many antennas for each position, the computation becomes expensive."

   - **Explanation:** When many positions need to be covered and are not within the initial range of any antenna, the loops perform excessive calculations for each position. This was evident as the slow run involved checking many antennas for each position due to sparse initial coverage.

3. **Invariant 3: Extensive Backtracking in Dynamic Programming**

   - **Natural Language Statement:** "If the dynamic programming solution involves extensive backtracking over previously computed states due to lack of efficient coverage, it may slow down."

   - **Explanation:** The `dp` array updates involve recalculating minimum coins needed for previously computed states, especially when there’s a need to backtrack deeply to find minimum costs, as shown by the extensive line hits on the nested loop for positions.

These invariants describe conditions that would lead to slow execution, focusing on coverage gaps, position density, and inefficient dynamic programming updates. They abstract the specific input values to broader scenarios that can cause performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate each performance-characterizing invariant into C++ code for runtime checks:

1. **Invariant 1: Antenna Overlap and Coverage Gaps**

   This invariant checks if there are large gaps in coverage, especially when antennas are clustered.

   ```cpp
   void check_coverage_gaps_invariant(int n, const pair<int, int> a[], int m) {
       for (int i = 1; i < n; ++i) {
           if (a[i + 1].first - (a[i].first + a[i].second) > m / n) {
               cerr << "Warning: Performance bottleneck condition triggered - large coverage gaps detected!" << endl;
               abort();
           }
       }
   }
   ```

2. **Invariant 2: Position Coverage Density**

   This invariant checks for high density of uncovered positions.

   ```cpp
   void check_position_density_invariant(int m, const bool color[]) {
       int uncovered_count = 0;
       for (int i = 1; i <= m; ++i) {
           if (!color[i]) {
               uncovered_count++;
               if (uncovered_count > m / 10) {  // Arbitrary threshold for high density
                   cerr << "Warning: Performance bottleneck condition triggered - high density of uncovered positions!" << endl;
                   abort();
               }
           }
       }
   }
   ```

3. **Invariant 3: Extensive Backtracking in Dynamic Programming**

   This invariant checks for excessive backtracking in the DP solution.

   ```cpp
   void check_dp_backtracking_invariant(int m, const int dp[]) {
       int backtrack_count = 0;
       for (int i = 1; i <= m; ++i) {
           if (dp[i] > dp[i - 1] + 1) {
               backtrack_count++;
               if (backtrack_count > m / 50) {  // Arbitrary threshold for excessive backtracking
                   cerr << "Warning: Performance bottleneck condition triggered - excessive DP backtracking!" << endl;
                   abort();
               }
           }
       }
   }
   ```

### Phase 4: Integrating the Checker Code with the Original Program

Below is the instrumented version of the original C++ program, which integrates the checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1);
const long long mod = 1e9 + 7;
const long long N = 80 + 5, K = 105;
const int si = (1 << 20);
const long long add = 1e4;
const long long M = 1e5 + 5;
const double INFdb = 1e10;
bool color[M];
int n, m;
pair<int, int> a[N];
int dp[M];

void check_coverage_gaps_invariant(int n, const pair<int, int> a[], int m) {
    for (int i = 1; i < n; ++i) {
        if (a[i + 1].first - (a[i].first + a[i].second) > m / n) {
            cerr << "Warning: Performance bottleneck condition triggered - large coverage gaps detected!" << endl;
            abort();
        }
    }
}

void check_position_density_invariant(int m, const bool color[]) {
    int uncovered_count = 0;
    for (int i = 1; i <= m; ++i) {
        if (!color[i]) {
            uncovered_count++;
            if (uncovered_count > m / 10) {  // Arbitrary threshold for high density
                cerr << "Warning: Performance bottleneck condition triggered - high density of uncovered positions!" << endl;
                abort();
            }
        }
    }
}

void check_dp_backtracking_invariant(int m, const int dp[]) {
    int backtrack_count = 0;
    for (int i = 1; i <= m; ++i) {
        if (dp[i] > dp[i - 1] + 1) {
            backtrack_count++;
            if (backtrack_count > m / 50) {  // Arbitrary threshold for excessive backtracking
                cerr << "Warning: Performance bottleneck condition triggered - excessive DP backtracking!" << endl;
                abort();
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i].first >> a[i].second;
        for (int j = max(1, a[i].first - a[i].second);
             j <= min(m, a[i].first + a[i].second); ++j)
            color[j] = 1;
    }

    // Check invariants after reading input and initial marking
    check_coverage_gaps_invariant(n, a, m);
    check_position_density_invariant(m, color);

    sort(a + 1, a + 1 + n);
    for (int i = 0; i < M; ++i) dp[i] = M;
    dp[0] = 0;
    for (int i = 1; i <= m; ++i) {
        if (color[i])
            dp[i] = min(dp[i], dp[i - 1]);
        else
            dp[i] = min(dp[i], dp[i - 1] + 1);
        for (int j = 1; j <= n; ++j) {
            if (a[j].first > i) break;
            int dist = (i - a[j].first) - a[j].second;
            if (dist < 0) dist = 0;
            int pos = max(0, a[j].first - a[j].second - dist - 1);
            dp[i] = min(dp[i], dp[pos] + dist);
        }
    }

    // Check the third invariant after dynamic programming
    check_dp_backtracking_invariant(m, dp);

    cout << dp[m];
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
```

### Explanation of Integration

- **Invariant 1 Checker:** Placed after reading the input and initializing antenna ranges to detect large coverage gaps early.

- **Invariant 2 Checker:** Placed right after marking the initial coverage to catch high densities of uncovered positions.

- **Invariant 3 Checker:** After computing the final `dp` array to detect excessive backtracking during dynamic programming.

These checks help detect when the algorithm is likely to slow down due to the identified conditions, providing valuable information for optimization and testing.

