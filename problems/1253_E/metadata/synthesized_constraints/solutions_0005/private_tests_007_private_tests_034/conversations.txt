system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INFL = 1LL << 60;
const long long INF = INFL;
long long MOD = 1000000007;
vector<long long> dy = {0, -1, 0, 1, 1, 1, -1, -1, 0};
vector<long long> dx = {1, 0, -1, 0, 1, -1, 1, -1, 0};
void pres(double A) { cout << fixed << setprecision(10) << A << endl; }
void BinarySay(long long x, long long y = 60) {
  for (long long i = 0; i < (y); i++) cout << (x >> (y - 1 - i) & 1);
  cout << endl;
}
long long get_bit(long long x) { return __builtin_popcountll(x); }
long long pow_long(long long x, long long k) {
  long long res = 1;
  while (k > 0) {
    if (k % 2) res *= x;
    x *= x;
    k /= 2;
  }
  return res;
}
long long pow_mod(long long x, long long k) {
  long long res = 1;
  while (k > 0) {
    if (k % 2) {
      res *= x;
      res %= MOD;
    }
    x *= x;
    x %= MOD;
    k /= 2;
  }
  return res;
}
long long inverse(long long x) { return pow_mod(x, MOD - 2); };
long long gcd(long long a, long long b) {
  if (b == 0) return a;
  return gcd(b, a % b);
}
long long lcm(long long x, long long y) { return x / gcd(x, y) * y; };
long long kai_mod(long long x) {
  if (x == 0) return 1;
  return x * kai_mod(x - 1) % MOD;
}
vector<long long> divisor(long long n) {
  vector<long long> res(0);
  for (long long i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      res.push_back(i);
      if (i != n / i) res.push_back(n / i);
    }
  }
  sort(res.begin(), res.end());
  return res;
}
vector<long long> MakePrimeList(long long x) {
  vector<long long> res;
  for (long long k = 2; k * k <= x; k++) {
    if (x % k == 0) {
      res.push_back(k);
      while (x % k == 0) x /= k;
    }
  }
  if (x > 1) res.push_back(x);
  return res;
}
const int MAXcomb = 200010;
long long fac[MAXcomb], finv[MAXcomb], inv[MAXcomb];
void COMinit() {
  fac[0] = fac[1] = 1;
  finv[0] = finv[1] = 1;
  inv[1] = 1;
  for (int i = 2; i < MAXcomb; i++) {
    fac[i] = fac[i - 1] * i % MOD;
    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
    finv[i] = finv[i - 1] * inv[i] % MOD;
  }
}
long long comb(int n, int k) {
  if (n < k) return 0;
  if (n < 0 || k < 0) return 0;
  return fac[n] * finv[k] % MOD * finv[n - k] % MOD;
}
const long long N_ = (1 << 18);
long long seg[2 * N_ - 1];
void init_seg() {
  for (long long i = 0; i < (2 * N_ - 1); i++) {
    seg[i] = INFL;
  }
}
void update(long long k, long long x) {
  k += N_ - 1;
  seg[k] = min(x, seg[k]);
  while (k > 0) {
    k = (k - 1) / 2;
    seg[k] = min(seg[k], min(seg[2 * k + 1], seg[2 * k + 2]));
  }
}
long long getminimum(long long x, long long y, long long k = 0,
                     long long left = 0, long long right = N_) {
  if (right <= x || y <= left) return INFL;
  if (x <= left && right <= y) return seg[k];
  long long mid = (left + right) / 2;
  long long l = getminimum(x, y, 2 * k + 1, left, mid);
  long long r = getminimum(x, y, 2 * k + 2, mid, right);
  return min(l, r);
}
void solve() {
  long long N, M;
  cin >> N >> M;
  vector<pair<long long, long long>> l(N);
  for (long long i = 0; i < (N); i++) {
    cin >> l[i].first >> l[i].second;
    l[i].first;
  }
  sort(l.begin(), l.end());
  reverse(l.begin(), l.end());
  init_seg();
  update(0, 0);
  for (long long t = 1; t <= M; t++) {
    long long x = getminimum(t - 1, N_);
    if (t != 1) {
      update(t, x + 1);
    }
    for (long long i = 0; i < (N); i++) {
      if (t > l[i].first - l[i].second && t != 1) break;
      if (t >= l[i].first - l[i].second) {
        update(l[i].first + l[i].second, x);
      } else {
        update(l[i].first * 2 - t, x + l[i].first - l[i].second - t);
      }
    }
  }
  long long ans = getminimum(M, N_);
  cout << ans << endl;
}
int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 100000
98796 0
20001 78778
98790 0
98781 0
98787 0
98793 0
98784 0
99998 1200


(G.2) Fast Input

1 100000
99998 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFL = 1LL << 60; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = INFL; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long MOD = 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> dy = {0, -1, 0, 1, 1, 1, -1, -1, 0}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> dx = {1, 0, -1, 0, 1, -1, 1, -1, 0}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void pres(double A) { cout << fixed << setprecision(10) << A << endl; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void BinarySay(long long x, long long y = 60) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < (y); i++) cout << (x >> (y - 1 - i) & 1); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long get_bit(long long x) { return __builtin_popcountll(x); } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long pow_long(long long x, long long k) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  while (k > 0) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (k % 2) res *= x; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    x *= x; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    k /= 2; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long pow_mod(long long x, long long k) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  while (k > 0) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (k % 2) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      res *= x; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      res %= MOD; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    x *= x; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    x %= MOD; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    k /= 2; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long inverse(long long x) { return pow_mod(x, MOD - 2); }; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return a; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long x, long long y) { return x / gcd(x, y) * y; }; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
long long kai_mod(long long x) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 0) return 1; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return x * kai_mod(x - 1) % MOD; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> divisor(long long n) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> res(0); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i * i <= n; i++) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % i == 0) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      res.push_back(i); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      if (i != n / i) res.push_back(n / i); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  sort(res.begin(), res.end()); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> MakePrimeList(long long x) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> res; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long k = 2; k * k <= x; k++) { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    if (x % k == 0) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      res.push_back(k); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      while (x % k == 0) x /= k; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) res.push_back(x); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXcomb = 200010; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
long long fac[MAXcomb], finv[MAXcomb], inv[MAXcomb]; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
void COMinit() { /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  fac[0] = fac[1] = 1; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  finv[0] = finv[1] = 1; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  inv[1] = 1; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < MAXcomb; i++) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    fac[i] = fac[i - 1] * i % MOD; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    finv[i] = finv[i - 1] * inv[i] % MOD; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(int n, int k) { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  if (n < k) return 0; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  if (n < 0 || k < 0) return 0; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  return fac[n] * finv[k] % MOD * finv[n - k] % MOD; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
const long long N_ = (1 << 18); /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
long long seg[2 * N_ - 1]; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
void init_seg() { /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < (2 * N_ - 1); i++) { /* line 88 slow_hit_count: 524288, fast_hit_count: 524288 */
    seg[i] = INFL; /* line 89 slow_hit_count: 524287, fast_hit_count: 524287 */
  } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
void update(long long k, long long x) { /* line 92 slow_hit_count: 791530, fast_hit_count: 199998 */
  k += N_ - 1; /* line 93 slow_hit_count: 791530, fast_hit_count: 199998 */
  seg[k] = min(x, seg[k]); /* line 94 slow_hit_count: 791530, fast_hit_count: 199998 */
  while (k > 0) { /* line 95 slow_hit_count: 15039070, fast_hit_count: 3799962 */
    k = (k - 1) / 2; /* line 96 slow_hit_count: 14247540, fast_hit_count: 3599964 */
    seg[k] = min(seg[k], min(seg[2 * k + 1], seg[2 * k + 2])); /* line 97 slow_hit_count: 14247540, fast_hit_count: 3599964 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 99 slow_hit_count: 791530, fast_hit_count: 199998 */
long long getminimum(long long x, long long y, long long k = 0, /* line 100 slow_hit_count: 3500013, fast_hit_count: 3500013 */
                     long long left = 0, long long right = N_) { /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  if (right <= x || y <= left) return INFL; /* line 102 slow_hit_count: 3500013, fast_hit_count: 3500013 */
  if (x <= left && right <= y) return seg[k]; /* line 103 slow_hit_count: 2684983, fast_hit_count: 2684983 */
  long long mid = (left + right) / 2; /* line 104 slow_hit_count: 1700006, fast_hit_count: 1700006 */
  long long l = getminimum(x, y, 2 * k + 1, left, mid); /* line 105 slow_hit_count: 1700006, fast_hit_count: 1700006 */
  long long r = getminimum(x, y, 2 * k + 2, mid, right); /* line 106 slow_hit_count: 1700006, fast_hit_count: 1700006 */
  return min(l, r); /* line 107 slow_hit_count: 1700006, fast_hit_count: 1700006 */
} /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  long long N, M; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> M; /* line 111 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<long long, long long>> l(N); /* line 112 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < (N); i++) { /* line 113 slow_hit_count: 9, fast_hit_count: 2 */
    cin >> l[i].first >> l[i].second; /* line 114 slow_hit_count: 8, fast_hit_count: 1 */
    l[i].first; /* line 115 slow_hit_count: 8, fast_hit_count: 1 */
  } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
  sort(l.begin(), l.end()); /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(l.begin(), l.end()); /* line 118 slow_hit_count: 1, fast_hit_count: 1 */
  init_seg(); /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
  update(0, 0); /* line 120 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long t = 1; t <= M; t++) { /* line 121 slow_hit_count: 100001, fast_hit_count: 100001 */
    long long x = getminimum(t - 1, N_); /* line 122 slow_hit_count: 100000, fast_hit_count: 100000 */
    if (t != 1) { /* line 123 slow_hit_count: 100000, fast_hit_count: 100000 */
      update(t, x + 1); /* line 124 slow_hit_count: 99999, fast_hit_count: 99999 */
    } /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < (N); i++) { /* line 126 slow_hit_count: 791530, fast_hit_count: 199998 */
      if (t > l[i].first - l[i].second && t != 1) break; /* line 127 slow_hit_count: 791529, fast_hit_count: 100000 */
      if (t >= l[i].first - l[i].second) { /* line 128 slow_hit_count: 691530, fast_hit_count: 99998 */
        update(l[i].first + l[i].second, x); /* line 129 slow_hit_count: 8, fast_hit_count: 1 */
      } else { /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
        update(l[i].first * 2 - t, x + l[i].first - l[i].second - t); /* line 131 slow_hit_count: 691522, fast_hit_count: 99997 */
      } /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = getminimum(M, N_); /* line 135 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 136 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 137 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 138 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 139 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 140 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 141 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 142 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C++ program, we'll follow a structured approach to identify potential causes of slow execution using both the code and the hit count data from the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Comparison:**
   - The `update` function is called significantly more in the slow run (`791,530` times) than in the fast run (`199,998` times).
   - The loop within the `solve` function that iterates over `t` from `1` to `M` (`line 121`) is executed `100,001` times in both runs, but the inner loop over antennas (`line 126`) is executed much more frequently in the slow input.
   - Within the inner loop, the `update` operations (`lines 131` and `129`) are hit substantially more times in the slow input than in the fast input.

2. **Interaction with Data Structures:**
   - The segment tree data structure (`seg` array) is updated frequently. Each `update` operation involves traversing the segment tree structure, which has a complexity of `O(log N)`.
   - The `getminimum` function is called `3,500,013` times in both input scenarios but the contribution to slowness arises from the overhead of numerous segment tree updates rather than queries, as seen by the number of hits on `update` related lines.

3. **Loop and Condition Analysis:**
   - The primary performance issue arises from the nested loop (`line 126`). The condition `t > l[i].first - l[i].second` potentially causes many iterations over the list of antennas for each position `t`, especially in the slow input scenario where antennas have zero initial scope but require large extensions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants in natural language:

1. **High Frequency of Antenna Scope Updates:**
   - "If many antennas have initial scopes that do not cover any part of the modernization area, and require significant increases to cover large gaps, the number of segment tree updates can grow very large, leading to performance degradation."

2. **Broad Coverage Requirement:**
   - "When there is a large gap between the farthest initial coverage of the antennas and the position `m`, if few antennas are initially covering the start of the range, the algorithm may require excessive scope extensions, increasing the number of operations."

3. **Complexity Due to High `M`:**
   - "If the coverage range `m` is near its upper limit, and the antennas are sparsely placed, with many having no initial coverage, the repeated evaluations and updates in the nested loops can lead to a significant computational overhead."

These invariants highlight conditions under which the problem constraints and algorithm design can lead to slower execution, focusing on the number of operations rather than just the maximum input size.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The mayor of the Central Town wants to modernize Central Street, represented in this problem by the (Ox) axis.

On this street, there are n antennas, numbered from 1 to n. The i-th antenna lies on the position x_i and has an initial scope of s_i: it covers all integer positions inside the interval [x_i - s_i; x_i + s_i].

It is possible to increment the scope of any antenna by 1, this operation costs 1 coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [1; m], even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?

Input

The first line contains two integers n and m (1 ≤ n ≤ 80 and n ≤ m ≤ 100\ 000).

The i-th of the next n lines contains two integers x_i and s_i (1 ≤ x_i ≤ m and 0 ≤ s_i ≤ m).

On each position, there is at most one antenna (values x_i are pairwise distinct).

Output

You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.

Examples

Input


3 595
43 2
300 4
554 10


Output


281


Input


1 1
1 1


Output


0


Input


2 50
20 0
3 1


Output


30


Input


5 240
13 0
50 25
60 5
155 70
165 70


Output


26

Note

In the first example, here is a possible strategy:

  * Increase the scope of the first antenna by 40, so that it becomes 2 + 40 = 42. This antenna will cover interval [43 - 42; 43 + 42] which is [1; 85] 
  * Increase the scope of the second antenna by 210, so that it becomes 4 + 210 = 214. This antenna will cover interval [300 - 214; 300 + 214], which is [86; 514] 
  * Increase the scope of the third antenna by 31, so that it becomes 10 + 31 = 41. This antenna will cover interval [554 - 41; 554 + 41], which is [513; 595] 



Total cost is 40 + 210 + 31 = 281. We can prove that it's the minimum cost required to make all positions from 1 to 595 covered by at least one antenna.

Note that positions 513 and 514 are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval [0; 2] so we have nothing to do.

Note that the only position that we needed to cover was position 1; positions 0 and 2 are covered, but it's not important.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived in natural language. These snippets are designed to monitor the execution and warn if potential performance bottlenecks are likely to occur.

```cpp
// Check if the initial scopes leave large gaps unaddressed, causing many updates
void check_large_update_requirement(const vector<pair<long long, long long>>& antennas, long long m) {
    int uncovered_length = m;
    for (const auto& antenna : antennas) {
        uncovered_length -= (2 * antenna.second + 1); // Reduce uncovered length by each antenna's current coverage
    }
    if (uncovered_length > 50000) {  // Arbitrary threshold based on problem size
        cerr << "Warning: Performance bottleneck condition triggered - large update requirement due to initial antenna scopes!" << endl;
        abort();
    }
}

// Check for potential excessive operations due to sparse initial coverage
void check_sparse_initial_coverage(const vector<pair<long long, long long>>& antennas, long long m) {
    int lastEndCovered = 0;
    bool isSparse = false;
    for (const auto& antenna : antennas) {
        if (antenna.first - antenna.second > lastEndCovered + 1000) { // Checks gaps in coverage
            isSparse = true;
            break;
        }
        lastEndCovered = antenna.first + antenna.second;
    }
    
    if (isSparse) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse initial coverage leading to excessive updates!" << endl;
        abort();
    }
}

// Check if high m might lead to excessive loop iterations
void check_high_m_value(long long m) {
    if (m > 80000) { // Arbitrary threshold for 'large' m
        cerr << "Warning: Performance bottleneck condition triggered - high value of m leading to excessive iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

The checker code will be integrated into the existing C++ program at appropriate points to detect and warn about potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long INFL = 1LL << 60;
const long long INF = INFL;
long long MOD = 1000000007;
vector<long long> dy = {0, -1, 0, 1, 1, 1, -1, -1, 0};
vector<long long> dx = {1, 0, -1, 0, 1, -1, 1, -1, 0};

const int MAXcomb = 200010;
long long fac[MAXcomb], finv[MAXcomb], inv[MAXcomb];
const long long N_ = (1 << 18);
long long seg[2 * N_ - 1];

// Check if the initial scopes leave large gaps unaddressed, causing many updates
void check_large_update_requirement(const vector<pair<long long, long long>>& antennas, long long m) {
    int uncovered_length = m;
    for (const auto& antenna : antennas) {
        uncovered_length -= (2 * antenna.second + 1); // Reduce uncovered length by each antenna's current coverage
    }
    if (uncovered_length > 50000) {  // Arbitrary threshold based on problem size
        cerr << "Warning: Performance bottleneck condition triggered - large update requirement due to initial antenna scopes!" << endl;
        abort();
    }
}

// Check for potential excessive operations due to sparse initial coverage
void check_sparse_initial_coverage(const vector<pair<long long, long long>>& antennas, long long m) {
    int lastEndCovered = 0;
    bool isSparse = false;
    for (const auto& antenna : antennas) {
        if (antenna.first - antenna.second > lastEndCovered + 1000) { // Checks gaps in coverage
            isSparse = true;
            break;
        }
        lastEndCovered = antenna.first + antenna.second;
    }
    
    if (isSparse) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse initial coverage leading to excessive updates!" << endl;
        abort();
    }
}

// Check if high m might lead to excessive loop iterations
void check_high_m_value(long long m) {
    if (m > 80000) { // Arbitrary threshold for 'large' m
        cerr << "Warning: Performance bottleneck condition triggered - high value of m leading to excessive iterations!" << endl;
        abort();
    }
}

void init_seg() {
    for (long long i = 0; i < (2 * N_ - 1); i++) {
        seg[i] = INFL;
    }
}

void update(long long k, long long x) {
    k += N_ - 1;
    seg[k] = min(x, seg[k]);
    while (k > 0) {
        k = (k - 1) / 2;
        seg[k] = min(seg[k], min(seg[2 * k + 1], seg[2 * k + 2]));
    }
}

long long getminimum(long long x, long long y, long long k = 0, long long left = 0, long long right = N_) {
    if (right <= x || y <= left) return INFL;
    if (x <= left && right <= y) return seg[k];
    long long mid = (left + right) / 2;
    long long l = getminimum(x, y, 2 * k + 1, left, mid);
    long long r = getminimum(x, y, 2 * k + 2, mid, right);
    return min(l, r);
}

void solve() {
    long long N, M;
    cin >> N >> M;
    vector<pair<long long, long long>> l(N);
    for (long long i = 0; i < (N); i++) {
        cin >> l[i].first >> l[i].second;
    }

    // Inserted checker functions before processing
    check_large_update_requirement(l, M);
    check_sparse_initial_coverage(l, M);
    check_high_m_value(M);

    sort(l.begin(), l.end());
    reverse(l.begin(), l.end());
    init_seg();
    update(0, 0);
    for (long long t = 1; t <= M; t++) {
        long long x = getminimum(t - 1, N_);
        if (t != 1) {
            update(t, x + 1);
        }
        for (long long i = 0; i < (N); i++) {
            if (t > l[i].first - l[i].second && t != 1) break;
            if (t >= l[i].first - l[i].second) {
                update(l[i].first + l[i].second, x);
            } else {
                update(l[i].first * 2 - t, x + l[i].first - l[i].second - t);
            }
        }
    }
    long long ans = getminimum(M, N_);
    cout << ans << endl;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
}
```

### Explanation of Instrumentation

- **`check_large_update_requirement`:** Placed after reading input, this function assesses if the combined initial scope of all antennas leaves a large portion of `1` to `m` uncovered, signaling potential excessive updates.
  
- **`check_sparse_initial_coverage`:** Also inserted after reading input, it checks for large gaps in initial coverage that could lead to frequent updates.

- **`check_high_m_value`:** Ensures that `m` is not unusually large, which might cause a high number of iterations.

These checks are designed to catch conditions that could lead to performance issues without significantly impacting the program's runtime under normal conditions.

