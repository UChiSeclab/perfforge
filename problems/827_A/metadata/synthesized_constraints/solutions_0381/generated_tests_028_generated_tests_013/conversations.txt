system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long inf = 9.2e18;
const int maxn = 2007;
const int INF = 2.1e9;
const int MOD = 1e9 + 7;
const double dif = 1e-5;
const double PI = 3.14159265358979323846;
int n, m, k;
map<int, int> M;
vector<string> V;
int main(void) {
  while (cin >> n) {
    V.clear();
    M.clear();
    int r = 0;
    string s;
    for (int i = 0; i < n; i++) {
      int x, p, idx;
      cin >> s;
      scanf("%d", &x);
      V.push_back(s);
      idx = V.size() - 1;
      while (x--) {
        scanf("%d", &p);
        r = max(r, p);
        if (!M.count(p))
          M[p] = idx;
        else if (s.length() > V[M[p]].length())
          M[p] = idx;
      }
    }
    int l = 1;
    while (l <= r) {
      if (M.count(l)) {
        int i = 0, idx = M[l];
        while (i < V[idx].length()) {
          l++;
          printf("%c", V[idx][i]);
          if (M.count(l) && V[M[l]].length() > V[idx].length() - i - 1) {
            idx = M[l];
            i = 0;
          } else
            i++;
        }
      } else {
        printf("a");
        l++;
      }
    }
    cout << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20
adabacabaeabacabada 1 359
abadabacabafabaca 1 213
acabagabacaba 1 315
cabaeabacabadabacab 1 268
fabacabadabacabaeab 1 352
cabafabacabada 1 28
acabadabacabaea 1 67
cabadabacabaeabacaba 1 484
abacabadabacaba 1 209
acabaiabacaba 1 251
acabafabacabadabac 1 475
abacabaeabacabadaba 1 105
cabadabacabaeaba 1 68
afabacabadabacab 1 287
acabafab 1 91
dabacabaea 1 146
abaeabacabadab 1 461
abadabacabaeabaca 1 421
abadabacabafabac 1 397
fabacabadabac 1 96


(G.2) Fast Input

10
dabacabafa 1 24
bacabadab 1 18
dabaca 1 8
bacabaea 1 42
bacaab 1 68
abadabaca 1 5
badabacaba 1 54
bacabaeaba 1 10
abacabaeab 1 9
adabacaba 1 23


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 9.2e18; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 2007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 2.1e9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const double dif = 1e-5; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = 3.14159265358979323846; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> M; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> V; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  while (cin >> n) { /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    V.clear(); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    M.clear(); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    int r = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    string s; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    for (int i = 0; i < n; i++) { /* line 18 slow_hit_count: 21, fast_hit_count: 11 */
      int x, p, idx; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> s; /* line 20 slow_hit_count: 20, fast_hit_count: 10 */
      scanf("%d", &x); /* line 21 slow_hit_count: 20, fast_hit_count: 10 */
      V.push_back(s); /* line 22 slow_hit_count: 20, fast_hit_count: 10 */
      idx = V.size() - 1; /* line 23 slow_hit_count: 20, fast_hit_count: 10 */
      while (x--) { /* line 24 slow_hit_count: 40, fast_hit_count: 20 */
        scanf("%d", &p); /* line 25 slow_hit_count: 20, fast_hit_count: 10 */
        r = max(r, p); /* line 26 slow_hit_count: 20, fast_hit_count: 10 */
        if (!M.count(p)) /* line 27 slow_hit_count: 20, fast_hit_count: 10 */
          M[p] = idx; /* line 28 slow_hit_count: 20, fast_hit_count: 10 */
        else if (s.length() > V[M[p]].length()) /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
          M[p] = idx; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    int l = 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    while (l <= r) { /* line 34 slow_hit_count: 258, fast_hit_count: 25 */
      if (M.count(l)) { /* line 35 slow_hit_count: 257, fast_hit_count: 24 */
        int i = 0, idx = M[l]; /* line 36 slow_hit_count: 12, fast_hit_count: 4 */
        while (i < V[idx].length()) { /* line 37 slow_hit_count: 270, fast_hit_count: 57 */
          l++; /* line 38 slow_hit_count: 258, fast_hit_count: 53 */
          printf("%c", V[idx][i]); /* line 39 slow_hit_count: 258, fast_hit_count: 53 */
          if (M.count(l) && V[M[l]].length() > V[idx].length() - i - 1) { /* line 40 slow_hit_count: 258, fast_hit_count: 53 */
            idx = M[l]; /* line 41 slow_hit_count: 8, fast_hit_count: 5 */
            i = 0; /* line 42 slow_hit_count: 8, fast_hit_count: 5 */
          } else /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
            i++; /* line 44 slow_hit_count: 250, fast_hit_count: 48 */
        } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        printf("a"); /* line 47 slow_hit_count: 245, fast_hit_count: 20 */
        l++; /* line 48 slow_hit_count: 245, fast_hit_count: 20 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, let's first analyze the hit counts and pinpoint where the program behaves differently for the slow and fast inputs. Then, we'll derive performance-characterizing invariants from these observations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The loop starting at line 34 (`while (l <= r)`) shows a significant difference in hit counts: 258 for the slow input versus 25 for the fast input. This loop is central to the program's performance.
   - Lines 37-44 inside the nested loop also exhibit a high number of hits for the slow input, especially on line 37 (`while (i < V[idx].length())`), indicating repeated processing.
   - The conditional at line 40 (`if (M.count(l) && V[M[l]].length() > V[idx].length() - i - 1)`) is frequently evaluated, showing 258 hits for slow input against 53 for fast input. 

2. **Inferences:**
   - The program constructs the string `s` by iteratively filling it with the remembered substrings. If these substrings overlap or if the map `M` has multiple entries that cause frequent switching in the nested loop, it could lead to repeated operations, hence more hits.
   - The outer loop iterates over positions in the result string up to `r`, and the value of `r` is determined by the maximum position `p` read from the input. A larger `r` implies more iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on these observations, we can derive the following performance-characterizing invariants in natural language:

1. **Overlapping Substring Placement:**
   - **Invariant:** When substrings have overlapping positions and require frequent switching between them during construction of `s`, this can lead to increased iterations in the nested loop, causing slowdowns.
   - **Natural Language Description:** "If the remembered substrings have significant overlap or require frequent switching during placement in the result string, the program may slow down due to repeated operations."

2. **Length of Result String `s`:**
   - **Invariant:** If the maximum position `r` is large, determined by the positions of the substrings, it increases the range over which the string `s` is constructed, leading to more iterations.
   - **Natural Language Description:** "If the maximum position required to be filled in the result string `s` is large, the process may become slow due to the need to fill a longer section of `s`."

3. **Nested Loop Operations:**
   - **Invariant:** If the remembered substrings are long and require placement several times (high `ki`), the nested loop will perform more operations, potentially slowing the program.
   - **Natural Language Description:** "If many long substrings need to be placed in the result string, especially with high frequency, the nested loop processing these substrings may slow down the program."

By focusing on these broader conditions, we can better understand potential performance problems without relying on specific slow input values. These invariants suggest areas to optimize, such as minimizing overlapping operations or managing the position range effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checks based on the performance-characterizing invariants we derived:

1. **Overlapping Substring Placement:**

```cpp
void check_overlap_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: overlap_invariant triggered - frequent switching due to overlapping substrings" << endl;
        abort();
    }
}
```

2. **Length of Result String `s`:**

```cpp
void check_length_invariant(int r) {
    if (r > 1000000) { // Arbitrary large threshold chosen for demonstration
        cerr << "Warning: length_invariant triggered - large maximum position to fill in the result string" << endl;
        abort();
    }
}
```

3. **Nested Loop Operations:**

```cpp
void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: nested_loop_invariant triggered - high frequency of substring placement in result string" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original C++ Code

Now, let's integrate these checks into the original program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long inf = 9.2e18;
const int maxn = 2007;
const int INF = 2.1e9;
const int MOD = 1e9 + 7;
const double dif = 1e-5;
const double PI = 3.14159265358979323846;
int n, m, k;
map<int, int> M;
vector<string> V;

void check_overlap_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: overlap_invariant triggered - frequent switching due to overlapping substrings" << endl;
        abort();
    }
}

void check_length_invariant(int r) {
    if (r > 1000000) {  // Arbitrary large threshold chosen for demonstration
        cerr << "Warning: length_invariant triggered - large maximum position to fill in the result string" << endl;
        abort();
    }
}

void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: nested_loop_invariant triggered - high frequency of substring placement in result string" << endl;
        abort();
    }
}

int main(void) {
    while (cin >> n) {
        V.clear();
        M.clear();
        int r = 0;
        string s;
        for (int i = 0; i < n; i++) {
            int x, p, idx;
            cin >> s;
            scanf("%d", &x);
            V.push_back(s);
            idx = V.size() - 1;
            while (x--) {
                scanf("%d", &p);
                r = max(r, p);
                if (!M.count(p))
                    M[p] = idx;
                else if (s.length() > V[M[p]].length())
                    M[p] = idx;
            }
        }

        // Check for large maximum position
        check_length_invariant(r);

        int l = 1;
        while (l <= r) {
            if (M.count(l)) {
                int i = 0, idx = M[l];
                while (i < V[idx].length()) {
                    l++;
                    printf("%c", V[idx][i]);

                    // Check for frequent switching
                    check_overlap_invariant(M.count(l) && V[M[l]].length() > V[idx].length() - i - 1);

                    if (M.count(l) && V[M[l]].length() > V[idx].length() - i - 1) {
                        idx = M[l];
                        i = 0;
                    } else
                        i++;
                }
            } else {
                printf("a");
                l++;
            }
        }
        cout << endl;
    }
    return 0;
}
```

### Explanation of Integration

- **Check for Maximum Position (`r`)**: This check is placed after reading all input to ensure that the string `s` does not become excessively large, which could lead to performance degradation.
- **Check for Overlapping Substring Placement**: This check is placed within the nested loop to detect frequent switching between substrings that could indicate a performance issue.
- **Check for Nested Loop Operations**: This check is conceptual and is integrated with the overlap check; it detects conditions likely to trigger slow execution due to high frequency of substring placement.

These checks help identify conditions leading to performance bottlenecks, ensuring that the program runs efficiently and aiding in debugging or optimization efforts.

