system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char res[2000002], s[2000002];
int main() {
  int n, len = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int k, p = 1, l;
    cin >> s >> k;
    l = strlen(s);
    for (int j = 0; j < k; j++) {
      int x;
      cin >> x;
      for (int m = max(x, p); m < x + l; m++) {
        res[m] = s[m - x];
      }
      p = x + l - 1;
      if (len < p) len = p;
    }
  }
  for (int i = 1; i <= len; i++) {
    if (res[i])
      cout << res[i];
    else
      cout << 'a';
  }
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20
adabacabaeabacabada 1 359
abadabacabafabaca 1 213
acabagabacaba 1 315
cabaeabacabadabacab 1 268
fabacabadabacabaeab 1 352
aabafabccabada 1 28
acabadabacabaea 1 67
cabadabacabaeabacaba 1 484
abacabadabacaba 1 209
acabaiabacaba 1 251
acbbafabacabadabac 1 475
abacabaeabacabadaba 1 105
cabadabacabaeaba 1 68
afabacabadabacab 1 287
acabafab 1 91
dabacabaea 1 328
abaeabacabadab 1 461
abadabacabaeabaca 1 421
abadabacabafabac 1 277
fabacabadabac 1 96


(G.2) Fast Input

10
dabacabafa 1 24
bacabadab 1 18
dabaca 1 8
bacabaea 1 42
bacaab 1 68
abadabaca 1 5
badabacaba 1 54
bacabaeaba 1 10
abacabaeab 1 9
adabacaba 1 23


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char res[2000002], s[2000002]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, len = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 21, fast_hit_count: 11 */
    int k, p = 1, l; /* line 8 slow_hit_count: 20, fast_hit_count: 10 */
    cin >> s >> k; /* line 9 slow_hit_count: 20, fast_hit_count: 10 */
    l = strlen(s); /* line 10 slow_hit_count: 20, fast_hit_count: 10 */
    for (int j = 0; j < k; j++) { /* line 11 slow_hit_count: 40, fast_hit_count: 20 */
      int x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> x; /* line 13 slow_hit_count: 20, fast_hit_count: 10 */
      for (int m = max(x, p); m < x + l; m++) { /* line 14 slow_hit_count: 331, fast_hit_count: 97 */
        res[m] = s[m - x]; /* line 15 slow_hit_count: 311, fast_hit_count: 87 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      p = x + l - 1; /* line 17 slow_hit_count: 20, fast_hit_count: 10 */
      if (len < p) len = p; /* line 18 slow_hit_count: 20, fast_hit_count: 10 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= len; i++) { /* line 21 slow_hit_count: 504, fast_hit_count: 74 */
    if (res[i]) /* line 22 slow_hit_count: 503, fast_hit_count: 73 */
      cout << res[i]; /* line 23 slow_hit_count: 242, fast_hit_count: 53 */
    else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      cout << 'a'; /* line 25 slow_hit_count: 261, fast_hit_count: 20 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we need to first examine the differences in line-level hit counts between the slow and fast inputs. After identifying the code segments contributing to the slowdown, we'll derive performance-characterizing invariants.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Significantly higher hit counts:**
   - **Line 14 (`for (int m = max(x, p); m < x + l; m++)`):** 
     - Slow hit count: 331
     - Fast hit count: 97
   - **Line 15 (`res[m] = s[m - x];`):**
     - Slow hit count: 311
     - Fast hit count: 87
   - **Line 21 (`for (int i = 1; i <= len; i++)`):**
     - Slow hit count: 504
     - Fast hit count: 74
   - **Line 22 (`if (res[i])`):**
     - Slow hit count: 503
     - Fast hit count: 73
   - **Line 23 (`cout << res[i];`):**
     - Slow hit count: 242
     - Fast hit count: 53
   - **Line 25 (`cout << 'a';`):**
     - Slow hit count: 261
     - Fast hit count: 20

2. **Analysis:**
   - The inner loop on line 14 is executed significantly more times in the slow input. This suggests that the range `x + l - max(x, p)` is much larger, repeatedly performing character assignments.
   - The outer loop on line 21 iterates over the length of the constructed string `res`, which appears to be considerably longer in the slow input, leading to more frequent printing operations.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant 1: Large Repeated Segments**
   - **Natural Language Description:** "When the length of segments (`l`) to be inserted is large and the positions of insertion overlap significantly (`x` is close to `p` repeatedly), the program may perform numerous redundant character assignments, leading to slower execution."
   - **Contextual Explanation:** The repeated overlapping insertions cause the loop to iterate excessively, filling the same positions in the `res` array repeatedly, which is inefficient.

2. **Invariant 2: Increasing Length of Resulting String**
   - **Natural Language Description:** "If the resulting string `res` becomes very long due to numerous and lengthy string insertions, the subsequent output loop will have significantly higher overhead."
   - **Contextual Explanation:** As `res` grows, the final loop that prints `res` or fills gaps with 'a's becomes more expensive. The larger the `len`, the more operations are required.

3. **Invariant 3: High Frequency of Small Overlapping Insertion Points**
   - **Natural Language Description:** "Frequent insertions at small intervals, where `x` values are close together, can lead to repeated overwriting of the same positions, increasing the number of operations."
   - **Contextual Explanation:** This scenario is exacerbated when `k` is large, meaning many insertions for the same string `t_i`, increasing the likelihood of repeated writes to similar parts of `res`.

4. **Invariant 4: Excessive Use of Large `k` Values**
   - **Natural Language Description:** "When the number of required occurrences `k` for the strings is large, it can cause the program to loop excessively, leading to a slow down."
   - **Contextual Explanation:** Large `k` values increase the number of outer loop iterations, which in combination with overlapping segments, results in a higher workload.

These performance-characterizing invariants provide insight into the conditions that lead to slow performance in the provided C program. By monitoring these conditions, one can better understand and potentially mitigate such slowdowns in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

Solution (C++ code):
{solution}


assistant: To implement the performance-characterizing invariants as runtime checks in C++ code, we'll follow the structure outlined in Phase 3 and then integrate these checks into the provided program in Phase 4.

### Phase 3: Implementing Invariants in C++

1. **Invariant Check for Large Repeated Segments:**
   - This check will ensure that the length of inserted segments and their overlap doesn't lead to excessive operations.
   
```cpp
void check_large_repeated_segments(int l, int x, int p) {
    if (l > 100 && x < p + 50) { // Example threshold values
        cerr << "Warning: Large repeated segment insertion detected!" << endl;
        abort();
    }
}
```

2. **Invariant Check for Long Resulting String:**
   - This check will ensure that the length of the resulting string does not grow excessively long.
   
```cpp
void check_long_resulting_string(int len) {
    if (len > 1000000) { // Threshold based on problem constraints
        cerr << "Warning: Resulting string length too large!" << endl;
        abort();
    }
}
```

3. **Invariant Check for High Frequency of Small Overlapping Insertion Points:**
   - This will check for frequent, small intervals of repeated insertions.
   
```cpp
void check_small_overlapping_insertions(int x, int prev_x) {
    if (x - prev_x < 10) { // Example threshold value
        cerr << "Warning: High frequency of small overlapping insertion points detected!" << endl;
        abort();
    }
}
```

4. **Invariant Check for Excessive Use of Large `k` Values:**
   - This check ensures that `k` values do not lead to excessive iterations.
   
```cpp
void check_excessive_large_k(int k) {
    if (k > 100) { // Threshold based on reasonable limits for k
        cerr << "Warning: Excessively large k value detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Here is the instrumented C++ code with the checks integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
char res[2000002], s[2000002];

// Check functions based on performance-characterizing invariants
void check_large_repeated_segments(int l, int x, int p) {
    if (l > 100 && x < p + 50) {
        cerr << "Warning: Large repeated segment insertion detected!" << endl;
        abort();
    }
}

void check_long_resulting_string(int len) {
    if (len > 1000000) {
        cerr << "Warning: Resulting string length too large!" << endl;
        abort();
    }
}

void check_small_overlapping_insertions(int x, int prev_x) {
    if (x - prev_x < 10) {
        cerr << "Warning: High frequency of small overlapping insertion points detected!" << endl;
        abort();
    }
}

void check_excessive_large_k(int k) {
    if (k > 100) {
        cerr << "Warning: Excessively large k value detected!" << endl;
        abort();
    }
}

int main() {
    int n, len = 0;
    cin >> n;
    int prev_x = -100; // Initialize to a large negative to prevent initial false positive
    for (int i = 0; i < n; i++) {
        int k, p = 1, l;
        cin >> s >> k;
        l = strlen(s);
        check_excessive_large_k(k); // Check for large k values
        for (int j = 0; j < k; j++) {
            int x;
            cin >> x;
            check_large_repeated_segments(l, x, p); // Check for large repeated segments
            check_small_overlapping_insertions(x, prev_x); // Check for small overlapping insertions
            prev_x = x; // Update prev_x
            for (int m = max(x, p); m < x + l; m++) {
                res[m] = s[m - x];
            }
            p = x + l - 1;
            if (len < p) len = p;
        }
    }
    check_long_resulting_string(len); // Check the length of resulting string
    for (int i = 1; i <= len; i++) {
        if (res[i])
            cout << res[i];
        else
            cout << 'a';
    }
    cout << endl;
    return 0;
}
```

In this version, the invariant checks are placed at strategic points in the code to avoid adding overhead in tight loops, while still ensuring they effectively monitor conditions that could lead to performance bottlenecks.

