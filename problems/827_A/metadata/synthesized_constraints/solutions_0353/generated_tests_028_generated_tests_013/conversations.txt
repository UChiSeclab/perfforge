system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e7 + 5;
char str[maxn];
char t[maxn];
int pos[maxn];
int main() {
  memset(str, 'a', sizeof(str));
  int n, k, m;
  int d = -1;
  cin >> n;
  while (n--) {
    cin >> t;
    cin >> k;
    int len = strlen(t);
    for (int i = 1; i <= k; i++) cin >> pos[i];
    int cnt = 0, ctt = 0;
    for (int i = 1; i <= k; i++) {
      ctt = max(ctt, pos[i] + len - 1);
      int cnn = max(cnt + 1, pos[i]);
      for (int j = cnn; j < pos[i] + len; j++) {
        str[j] = t[j - pos[i]];
      }
      cnt = ctt;
    }
    d = max(d, ctt);
  }
  for (int i = 1; i <= d; i++) {
    cout << str[i];
  }
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20
adabacabaeabacabada 1 359
abadabacabafabaca 1 213
acabagabacaba 1 315
cabaeabacabadabacab 1 268
fabacabadabacabaeab 1 352
cabafabacabada 1 28
acabadabacabaea 1 67
cabadabacabaeabacaba 1 484
abacabadabacaba 1 209
acabaiabacaba 1 251
acabafabacabadabac 1 475
abacabaeabacabadaba 1 105
cabadabacabaeaba 1 68
afabacabadabacab 1 287
acabafab 1 91
dabacabaea 1 146
abaeabacabadab 1 461
abadabacabaeabaca 1 421
abadabacabafabac 1 397
fabacabadabac 1 96


(G.2) Fast Input

10
dabacabafa 1 24
bacabadab 1 18
dabaca 1 8
bacabaea 1 42
bacaab 1 68
abadabaca 1 5
badabacaba 1 54
bacabaeaba 1 10
abacabaeab 1 9
adabacaba 1 23


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e7 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char str[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char t[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int pos[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  memset(str, 'a', sizeof(str)); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k, m; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int d = -1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 12 slow_hit_count: 21, fast_hit_count: 11 */
    cin >> t; /* line 13 slow_hit_count: 20, fast_hit_count: 10 */
    cin >> k; /* line 14 slow_hit_count: 20, fast_hit_count: 10 */
    int len = strlen(t); /* line 15 slow_hit_count: 20, fast_hit_count: 10 */
    for (int i = 1; i <= k; i++) cin >> pos[i]; /* line 16 slow_hit_count: 40, fast_hit_count: 20 */
    int cnt = 0, ctt = 0; /* line 17 slow_hit_count: 20, fast_hit_count: 10 */
    for (int i = 1; i <= k; i++) { /* line 18 slow_hit_count: 40, fast_hit_count: 20 */
      ctt = max(ctt, pos[i] + len - 1); /* line 19 slow_hit_count: 20, fast_hit_count: 10 */
      int cnn = max(cnt + 1, pos[i]); /* line 20 slow_hit_count: 20, fast_hit_count: 10 */
      for (int j = cnn; j < pos[i] + len; j++) { /* line 21 slow_hit_count: 331, fast_hit_count: 97 */
        str[j] = t[j - pos[i]]; /* line 22 slow_hit_count: 311, fast_hit_count: 87 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      cnt = ctt; /* line 24 slow_hit_count: 20, fast_hit_count: 10 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    d = max(d, ctt); /* line 26 slow_hit_count: 20, fast_hit_count: 10 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= d; i++) { /* line 28 slow_hit_count: 504, fast_hit_count: 74 */
    cout << str[i]; /* line 29 slow_hit_count: 503, fast_hit_count: 73 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C code for performance bottlenecks and derive performance-characterizing invariants, let's go through the two phases outlined in the task. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - **Lines with Higher Hit Counts on Slow Input:**
     - `while (n--)` loop (Line 12): 21 hits on slow input vs. 11 on fast input.
     - Nested `for (int i = 1; i <= k; i++)` loop (Line 18): 40 hits on slow vs. 20 on fast.
     - Inner `for (int j = cnn; j < pos[i] + len; j++)` loop (Line 21): 331 hits on slow vs. 97 on fast.
     - `cout` loop (Line 28): 504 hits on slow vs. 74 on fast.

2. **Inference on Code Interaction:**
   - The inner loop for modifying `str` (Line 21-22) is heavily executed in the slow input, indicating this part of the code is a potential bottleneck.
   - The outer loop iterating over `n` and the nested loop iterating over `k` cause multiple traversals over the string, increasing operation count significantly.
   - The length of `str` involved in `cout` suggests the constructed string is much longer in the slow input, indicating more operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are the natural language statements describing conditions under which the program likely enters a slow path:

1. **Invariant 1: High Frequency of Substring Overlaps**
   - Natural Language: "If the number of occurrences `k` for each substring is large and the substrings have significant overlap in positions, the program may slow down due to repeated operations for filling the string."
   - Reasoning: High `k` values and overlapping substrings result in frequent updates to the same regions of `str`.

2. **Invariant 2: Large Final String Construction**
   - Natural Language: "If the calculated final length of the string `d` becomes large due to many overlapping and lengthy substrings, the program slows down as it has to print a long string."
   - Reasoning: The larger `d` indicates more positions are filled in `str`, leading to a longer output operation.

3. **Invariant 3: Extensive Nested Loop Iterations**
   - Natural Language: "If there are frequent nested loops over substring positions and these loops run for extended lengths due to large `k` or many substrings, the program may experience slowdowns."
   - Reasoning: Nested loops over `k` and inside the range determined by `pos[i] + len` perform more operations when `k` is large or when substring positions overlap.

By understanding these patterns, a fuzzer or tester can generate inputs that are likely to trigger these conditions, offering insights into further optimizations or constraints needed for this program.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

Solution (C++ code):
{solution}


assistant: Let's translate the performance-characterizing invariants derived earlier into C++ code (Phase 3) and integrate those checks into the original program (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language invariants, we'll create runtime checks for each condition.

1. **Invariant 1: High Frequency of Substring Overlaps**
   ```cpp
   void check_overlap_invariant(int k, int len) {
       if (k * len > 100000) { // Assume a threshold based on problem constraints
           cerr << "Warning: High frequency of substring overlaps detected!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Large Final String Construction**
   ```cpp
   void check_final_string_length(int d) {
       if (d > 1000000) { // Assumed threshold for large final string
           cerr << "Warning: Large final string construction detected!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Extensive Nested Loop Iterations**
   ```cpp
   void check_nested_loop_iterations(int k) {
       if (k > 1000) { // Assumed threshold for extensive iterations
           cerr << "Warning: Extensive nested loop iterations detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Now we'll integrate these checks into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e7 + 5;
char str[maxn];
char t[maxn];
int pos[maxn];

// Check for high frequency of substring overlaps
void check_overlap_invariant(int k, int len) {
    if (k * len > 100000) { // Assuming threshold based on constraints
        cerr << "Warning: High frequency of substring overlaps detected!" << endl;
        abort();
    }
}

// Check for large final string construction
void check_final_string_length(int d) {
    if (d > 1000000) { // Assuming threshold for large final string
        cerr << "Warning: Large final string construction detected!" << endl;
        abort();
    }
}

// Check for extensive nested loop iterations
void check_nested_loop_iterations(int k) {
    if (k > 1000) { // Assuming a threshold for extensive iterations
        cerr << "Warning: Extensive nested loop iterations detected!" << endl;
        abort();
    }
}

int main() {
    memset(str, 'a', sizeof(str));
    int n, k, m;
    int d = -1;
    cin >> n;
    while (n--) {
        cin >> t;
        cin >> k;
        int len = strlen(t);
        
        // Insert checker for substring overlaps
        check_overlap_invariant(k, len);
        
        for (int i = 1; i <= k; i++) cin >> pos[i];
        int cnt = 0, ctt = 0;

        // Insert checker for nested loop iterations
        check_nested_loop_iterations(k);
        
        for (int i = 1; i <= k; i++) {
            ctt = max(ctt, pos[i] + len - 1);
            int cnn = max(cnt + 1, pos[i]);
            for (int j = cnn; j < pos[i] + len; j++) {
                str[j] = t[j - pos[i]];
            }
            cnt = ctt;
        }
        d = max(d, ctt);
    }
    
    // Insert checker for final string length
    check_final_string_length(d);
    
    for (int i = 1; i <= d; i++) {
        cout << str[i];
    }
    cout << endl;
    return 0;
}
```

### Comments on Integration:
- The `check_overlap_invariant` is placed after reading each substring's information, checking if the potential overlap could be large.
- The `check_nested_loop_iterations` is invoked before entering the nested loop to detect extensive iterations.
- The `check_final_string_length` is placed after determining `d` to ensure the final string isn't excessively large.

These strategic placements avoid adding overhead to the inner loops. These checks will help detect and diagnose potential performance bottlenecks during execution.

