system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char ans[2000006];
int main() {
  int n, a, b, i, l, len = 0, tot;
  scanf("%d", &n);
  while (n--) {
    string str;
    cin >> str;
    scanf("%d", &b);
    l = str.length();
    tot = 0;
    while (b--) {
      scanf("%d", &a);
      a--;
      len = max(len, a + l);
      for (i = max(a, tot); i < a + l; i++) ans[i] = str[i - a];
      tot = a + l;
    }
  }
  for (i = 0; i < len; i++) {
    if (ans[i] == '\0')
      printf("a");
    else
      printf("%c", ans[i]);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20
adabacabaeabacabada 1 359
abadabacabafabaca 1 213
acabagabacaba 1 315
cabaeabacabadabacab 1 268
fabacabadabacabaeab 1 352
cabafabacabada 1 28
acabadabacabaea 1 67
cabadabacabaeabacaba 1 484
abacabadabacaba 1 209
acabaiabacaba 1 251
acabafabacabadabac 1 475
abacabaeabacabadaba 1 105
cabadabacabaeaba 1 68
afabacabadabacab 1 287
acabafab 1 91
dabacabaea 1 146
abaeabacabadab 1 461
abadabacabaeabaca 1 421
abadabacabafabac 1 397
fabacabadabac 1 96


(G.2) Fast Input

10
dabacabafa 1 24
bacabadab 1 18
dabaca 1 8
bacabaea 1 42
bacaab 1 68
abadabaca 1 5
badabacaba 1 54
bacabaeaba 1 10
abacabaeab 1 9
adabacaba 1 23


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char ans[2000006]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, i, l, len = 0, tot; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 7 slow_hit_count: 21, fast_hit_count: 11 */
    string str; /* line 8 slow_hit_count: 40, fast_hit_count: 20 */
    cin >> str; /* line 9 slow_hit_count: 20, fast_hit_count: 10 */
    scanf("%d", &b); /* line 10 slow_hit_count: 20, fast_hit_count: 10 */
    l = str.length(); /* line 11 slow_hit_count: 20, fast_hit_count: 10 */
    tot = 0; /* line 12 slow_hit_count: 20, fast_hit_count: 10 */
    while (b--) { /* line 13 slow_hit_count: 40, fast_hit_count: 20 */
      scanf("%d", &a); /* line 14 slow_hit_count: 20, fast_hit_count: 10 */
      a--; /* line 15 slow_hit_count: 20, fast_hit_count: 10 */
      len = max(len, a + l); /* line 16 slow_hit_count: 20, fast_hit_count: 10 */
      for (i = max(a, tot); i < a + l; i++) ans[i] = str[i - a]; /* line 17 slow_hit_count: 331, fast_hit_count: 97 */
      tot = a + l; /* line 18 slow_hit_count: 20, fast_hit_count: 10 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < len; i++) { /* line 21 slow_hit_count: 504, fast_hit_count: 74 */
    if (ans[i] == '\0') /* line 22 slow_hit_count: 503, fast_hit_count: 73 */
      printf("a"); /* line 23 slow_hit_count: 245, fast_hit_count: 20 */
    else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      printf("%c", ans[i]); /* line 25 slow_hit_count: 258, fast_hit_count: 53 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided hit counts and the nature of the program, let's analyze the potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Over String Occurrences**: 
   - The outer `while (n--)` loop (line 7) and the inner `while (b--)` loop (line 13) show that the program processes each string and its associated positions sequentially. The slow input hits these loops more often due to a larger number of strings or multiple positions to process.
   
2. **Character Assignment in the Nested Loop**:
   - Line 17, which assigns characters to the `ans` array, is significantly more hit in the slow input (331 times vs 97 times for the fast input). This indicates that the string insertions span larger ranges or occur more frequently in the slow input.

3. **Final Output Generation**:
   - The loop starting at line 21 iterates over the length of the constructed string `ans`, with significantly more iterations for the slow input (504 vs 74). This suggests that the resulting string is longer, requiring more processing to fill in characters.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language. These describe conditions under which the program is likely to slow down:

1. **Multiple Overlapping or Sequential Insertions**:
   - "If a large number of strings or positional occurrences must be processed, especially when they are close together or overlap, the program may experience a slowdown due to repeated character assignments."

2. **Extended Length of the Constructed String**:
   - "When the resulting string `ans` has to be extended frequently to accommodate new insertions, particularly if the insertions require processing a significant portion of the array, the program's performance may degrade."

3. **High Total Length of Insertions**:
   - "If the total combined length of all strings `t_i` multiplied by their occurrences approaches the upper limit of memory constraints (like 1,000,000), the increased number of character assignments and checks can slow down execution."

These invariants reflect realistic triggers for slow performance in the given problem constraints and should help in anticipating possible slowdowns for future cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement C++ Checker Functions

Let's translate the natural language invariants from Phase 2 into C++ checker code:

1. **Multiple Overlapping or Sequential Insertions**:
   - We'll check if there are too many occurrences or if the positions are too densely packed, which could lead to overlapping insertions and hence slow performance.

```cpp
void check_overlap_invariant(int ki, int totalKi) {
    if (ki > 50 || totalKi > 100000) { // These are arbitrary thresholds for illustrative purposes.
        cerr << "Warning: Overlap invariant triggered - too many insertions at close positions!" << endl;
        abort();
    }
}
```

2. **Extended Length of the Constructed String**:
   - We'll set a threshold for the length of the `ans` array beyond which performance may degrade.

```cpp
void check_length_invariant(int len) {
    if (len > 100000) { // Threshold set considering the problem constraints.
        cerr << "Warning: Length invariant triggered - constructed string too long!" << endl;
        abort();
    }
}
```

3. **High Total Length of Insertions**:
   - This checks if the total inserted character count (across all substrings and occurrences) becomes prohibitively large, indicating potential slowdown.

```cpp
void check_total_insertion_length_invariant(int totalInsertionLength) {
    if (totalInsertionLength > 1000000) { // Threshold considering constraints.
        cerr << "Warning: Total insertion length invariant triggered - too many insertions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Functions into the Original Program

Now, let's integrate these checks into the existing C++ program. We'll place the checks at strategic points to avoid impacting performance negatively.

```cpp
#include <bits/stdc++.h>
using namespace std;
char ans[2000006];

void check_overlap_invariant(int ki, int totalKi) {
    if (ki > 50 || totalKi > 100000) { 
        cerr << "Warning: Overlap invariant triggered - too many insertions at close positions!" << endl;
        abort();
    }
}

void check_length_invariant(int len) {
    if (len > 100000) { 
        cerr << "Warning: Length invariant triggered - constructed string too long!" << endl;
        abort();
    }
}

void check_total_insertion_length_invariant(int totalInsertionLength) {
    if (totalInsertionLength > 1000000) { 
        cerr << "Warning: Total insertion length invariant triggered - too many insertions!" << endl;
        abort();
    }
}

int main() {
    int n, a, b, i, l, len = 0, tot;
    scanf("%d", &n);
    int totalKi = 0; // Track total occurrences
    int totalInsertionLength = 0; // Track total insertion length

    while (n--) {
        string str;
        cin >> str;
        scanf("%d", &b);
        l = str.length();
        tot = 0;
        totalKi += b;
        totalInsertionLength += l * b;

        check_overlap_invariant(b, totalKi);
        check_total_insertion_length_invariant(totalInsertionLength);

        while (b--) {
            scanf("%d", &a);
            a--;
            len = max(len, a + l);
            for (i = max(a, tot); i < a + l; i++) ans[i] = str[i - a];
            tot = a + l;
        }
    }

    check_length_invariant(len); // Check final length of constructed string

    for (i = 0; i < len; i++) {
        if (ans[i] == '\0')
            printf("a");
        else
            printf("%c", ans[i]);
    }
    return 0;
}
```

### Explanation of Inserted Checks

- **`check_overlap_invariant`** is called after reading each string's occurrences. It checks if the number of occurrences (`ki`) of a string or the cumulative number of occurrences (`totalKi`) surpasses a threshold, potentially indicating overlapping issues.
- **`check_length_invariant`** is called after processing all insertions to ensure the constructed string's length doesn't exceed a feasible value.
- **`check_total_insertion_length_invariant`** keeps track of the aggregate insertion lengths and checks if it surpasses the limit considering the constraints.

These checks aim to preemptively catch situations that could lead to performance degradation in more extreme cases. They leverage the constraints inherent to the problem to determine reasonable thresholds.

