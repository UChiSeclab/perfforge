system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void err(istream_iterator<string> it) {}
template <typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " = " << a << endl;
  err(++it, args...);
}
bool t[4 * 2111111];
int n;
string now;
char c[4 * 2111111];
void update(int l, int r, int v = 1, int tl = 1, int tr = 2111111) {
  if (tl > r || tr < l) return;
  if (t[v]) return;
  if (tl == tr) {
    t[v] = 1;
    c[tl - 1] = now[tl - l];
    return;
  }
  int tm = (tl + tr) >> 1;
  update(l, r, v + v, tl, tm);
  update(l, r, v + 1 + v, tm + 1, tr);
  t[v] = t[v + v] && t[v + 1 + v];
}
int main() {
  cin >> n;
  int ma = 0;
  for (long long i = (0); i < (n); i++) {
    cin >> now;
    int k;
    cin >> k;
    int len = now.length() - 1;
    for (long long j = (0); j < (k); j++) {
      int w;
      cin >> w;
      ma = max(ma, w + len);
      update(w, w + len);
    }
  }
  for (long long i = (0); i < (ma); i++)
    if (c[i] >= 'a' && c[i] <= 'z')
      cout << c[i];
    else
      cout << 'a';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20
adabacabaeabacabada 1 359
abadabacabafabaca 1 213
acabagabacaba 1 315
cabaeabacabadabacab 1 268
fabacabadabacabaeab 1 352
cabafabacabada 1 28
acabadabacabaea 1 67
cabadabacabaeabacaba 1 484
abacabadabacaba 1 209
acabaiabacaba 1 251
acabafabacabadabac 1 475
abacabaeabacabadaba 1 105
cabadabacabaeaba 1 68
afabacabadabacab 1 287
acabafab 1 91
dabacabaea 1 146
abaeabacabadab 1 461
abadabacabaeabaca 1 421
abadabacabafabac 1 397
fabacabadabac 1 96


(G.2) Fast Input

10
dabacabafa 1 24
bacabadab 1 18
dabaca 1 8
bacabaea 1 42
bacaab 1 68
abadabaca 1 5
badabacaba 1 54
bacabaeaba 1 10
abacabaeab 1 9
adabacaba 1 23


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void err(istream_iterator<string> it) {} /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... Args> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void err(istream_iterator<string> it, T a, Args... args) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << *it << " = " << a << endl; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  err(++it, args...); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool t[4 * 2111111]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
string now; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
char c[4 * 2111111]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void update(int l, int r, int v = 1, int tl = 1, int tr = 2111111) { /* line 13 slow_hit_count: 1344, fast_hit_count: 482 */
  if (tl > r || tr < l) return; /* line 14 slow_hit_count: 1344, fast_hit_count: 482 */
  if (t[v]) return; /* line 15 slow_hit_count: 935, fast_hit_count: 299 */
  if (tl == tr) { /* line 16 slow_hit_count: 920, fast_hit_count: 289 */
    t[v] = 1; /* line 17 slow_hit_count: 258, fast_hit_count: 53 */
    c[tl - 1] = now[tl - l]; /* line 18 slow_hit_count: 258, fast_hit_count: 53 */
    return; /* line 19 slow_hit_count: 258, fast_hit_count: 53 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int tm = (tl + tr) >> 1; /* line 21 slow_hit_count: 662, fast_hit_count: 236 */
  update(l, r, v + v, tl, tm); /* line 22 slow_hit_count: 662, fast_hit_count: 236 */
  update(l, r, v + 1 + v, tm + 1, tr); /* line 23 slow_hit_count: 662, fast_hit_count: 236 */
  t[v] = t[v + v] && t[v + 1 + v]; /* line 24 slow_hit_count: 662, fast_hit_count: 236 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int ma = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = (0); i < (n); i++) { /* line 29 slow_hit_count: 21, fast_hit_count: 11 */
    cin >> now; /* line 30 slow_hit_count: 20, fast_hit_count: 10 */
    int k; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> k; /* line 32 slow_hit_count: 20, fast_hit_count: 10 */
    int len = now.length() - 1; /* line 33 slow_hit_count: 20, fast_hit_count: 10 */
    for (long long j = (0); j < (k); j++) { /* line 34 slow_hit_count: 40, fast_hit_count: 20 */
      int w; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> w; /* line 36 slow_hit_count: 20, fast_hit_count: 10 */
      ma = max(ma, w + len); /* line 37 slow_hit_count: 20, fast_hit_count: 10 */
      update(w, w + len); /* line 38 slow_hit_count: 20, fast_hit_count: 10 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = (0); i < (ma); i++) /* line 41 slow_hit_count: 504, fast_hit_count: 74 */
    if (c[i] >= 'a' && c[i] <= 'z') /* line 42 slow_hit_count: 503, fast_hit_count: 73 */
      cout << c[i]; /* line 43 slow_hit_count: 258, fast_hit_count: 53 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      cout << 'a'; /* line 45 slow_hit_count: 245, fast_hit_count: 20 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we need to diagnose why it runs slowly for the “slow” input compared to the “fast” input. Here's a breakdown of the process:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - **Lines 13-24** (the `update` function): These lines have significantly more hits for the slow input compared to the fast input. This indicates that the `update` function is being called and executed more frequently, contributing to the slowdown.
   - **Line 29 (`for` loop) and Line 34 (`for` loop)**: Both loops are hit more frequently in the slow input, suggesting the nested loop structure is a factor in the increased computation time.
   - **Line 41 (`for` loop)**: The loop runs up to the maximum value `ma`, which is larger for the slow input.

2. **Pinpoint Lines or Functions**:
   - **`update` function**: The recursion and updates in the segment tree are frequent and could be costly, particularly when updating large ranges.
   - **Loop Structure**: The nested loops in `main` might exhibit more iterations for the slow input, causing more invocations of the `update` function.

3. **Data Structure Interaction**:
   - **Segment Tree (`t` and `c` arrays)**: The use of a segment tree suggests attempting to handle a large range of indices efficiently. However, the update operations might still be costly if executed repeatedly across wide ranges.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements**:
   - **Invariant #1**: "If the number of strings `n` is large, it increases the number of updates in the tree structure, especially if each string has multiple occurrences (`ki` is large), potentially causing slow performance."
   - **Invariant #2**: "If the cumulative length of all occurrences (`ki` multiplied by the length of `ti`) spans a large segment of the array `c`, it may lead to extensive update operations, slowing down the overall computation."
   - **Invariant #3**: "When the maximum index `ma` (determined by the largest `w + len`) is high, and many updates are needed towards these higher indices, it can cause the loop iterating over `ma` to take considerably longer, thus slowing the program."

2. **Threshold Values and Conditions**:
   - **Threshold for `n`**: Given `n <= 100,000`, performance issues arise when `n` is significantly large, leading to more `update` function calls.
   - **Threshold for `ki` and `w + len`**: These values contribute to the range and frequency of updates in the segment tree. Larger values potentially cause more extensive and frequent updates.
   - **Efficient Checks**: While the constraints imply `n * ki` and cumulative string lengths are bounded, ensuring updates remain efficient even when nearing these bounds is crucial.

3. **Broad Capture of Future Slow Scenarios**:
   - Focus on the interaction between the number of strings, their occurrences, and the string lengths to ensure the segment tree and update logic remain efficient.
   - Suggest optimization strategies like lazy propagation in segment trees if updates are excessively frequent or cover large ranges.

### Summary of Invariants

- **Invariant #1**: "High number of strings (`n`) with high number of occurrences (`ki`) can lead to frequent and costly updates."
- **Invariant #2**: "Extensive coverage of the array `c` due to cumulative occurrences leads to significant update overhead."
- **Invariant #3**: "Large maximum index `ma` with high update demands slows down post-processing due to increased iterations."

These performance-characterizing invariants help identify potential triggers for slow execution, aiding in optimization and testing efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. 

Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He remembers n such strings ti.

You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.

Input

The first line contains single integer n (1 ≤ n ≤ 105) — the number of strings Ivan remembers.

The next n lines contain information about the strings. The i-th of these lines contains non-empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, ..., xi, ki in increasing order — positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn't exceed 106, 1 ≤ xi, j ≤ 106, 1 ≤ ki ≤ 106, and the sum of all ki doesn't exceed 106. The strings ti can coincide.

It is guaranteed that the input data is not self-contradictory, and thus at least one answer always exists.

Output

Print lexicographically minimal string that fits all the information Ivan remembers. 

Examples

Input

3
a 4 1 3 5 7
ab 2 1 5
ca 1 4


Output

abacaba


Input

1
a 1 3


Output

aaa


Input

3
ab 1 1
aba 1 3
ab 2 3 5


Output

ababab

Solution (C++ code):
{solution}


assistant: To implement the performance-characterizing invariants into runtime checks, we need to translate the natural language statements into executable C++ code (Phase 3) and then integrate these checks into the original program (Phase 4).

### Phase 3: Implementing the Invariants

Let's translate the natural language invariants into C++ code:

1. **Invariant #1**: "High number of strings (`n`) with high number of occurrences (`ki`) can lead to frequent and costly updates."
   
   ```cpp
   void check_n_and_ki_invariant(int n, int ki) {
       if (n > 50000 || ki > 50000) {
           cerr << "Warning: Performance bottleneck condition triggered due to high n or ki!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2**: "Extensive coverage of the array `c` due to cumulative occurrences leads to significant update overhead."
   
   ```cpp
   void check_coverage_invariant(int ma, int len) {
       if (ma > 1000000) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive coverage!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3**: "Large maximum index `ma` with high update demands slows down post-processing."
   
   ```cpp
   void check_ma_invariant(int ma) {
       if (ma > 1000000) {
           cerr << "Warning: Performance bottleneck condition triggered due to large max index!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Program

Now, integrate these checks into the provided C++ solution.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_n_and_ki_invariant(int n, int ki) {
    if (n > 50000 || ki > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high n or ki!" << endl;
        abort();
    }
}

void check_coverage_invariant(int ma, int len) {
    if (ma > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive coverage!" << endl;
        abort();
    }
}

void check_ma_invariant(int ma) {
    if (ma > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large max index!" << endl;
        abort();
    }
}

bool t[4 * 2111111];
int n;
string now;
char c[4 * 2111111];

void update(int l, int r, int v = 1, int tl = 1, int tr = 2111111) {
    if (tl > r || tr < l) return;
    if (t[v]) return;
    if (tl == tr) {
        t[v] = 1;
        c[tl - 1] = now[tl - l];
        return;
    }
    int tm = (tl + tr) >> 1;
    update(l, r, v + v, tl, tm);
    update(l, r, v + 1 + v, tm + 1, tr);
    t[v] = t[v + v] && t[v + 1 + v];
}

int main() {
    cin >> n;
    int ma = 0;
    for (long long i = (0); i < (n); i++) {
        cin >> now;
        int k;
        cin >> k;
        
        // Check invariant for `n` and `ki`
        check_n_and_ki_invariant(n, k);
        
        int len = now.length() - 1;
        for (long long j = (0); j < (k); j++) {
            int w;
            cin >> w;
            ma = max(ma, w + len);
            
            // Check invariant for coverage and max index
            check_coverage_invariant(ma, len);
            check_ma_invariant(ma);
            
            update(w, w + len);
        }
    }
    
    for (long long i = (0); i < (ma); i++)
        if (c[i] >= 'a' && c[i] <= 'z')
            cout << c[i];
        else
            cout << 'a';
    return 0;
}
```

### Explanation:

- **Invariant Check 1**: Placed immediately after reading `n` and `k`, this check ensures neither is too large, preventing excessive update calls.
- **Invariant Check 2 & 3**: Placed within the loop, after calculating `ma`, they ensure the `ma` doesn't grow excessively large, preventing slow loops over `c`.

These checks should help detect conditions that lead to performance issues, without adding significant overhead to the program.

