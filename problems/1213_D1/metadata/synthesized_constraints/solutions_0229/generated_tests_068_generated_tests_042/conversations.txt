system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long n, k;
  cin >> n >> k;
  vector<long long> v(n);
  for (long long i = 0; i < n; i++) {
    cin >> v[i];
  }
  long long ans = 1e18;
  for (long long i = 0; i < n; i++) {
    long long cnt = 0, tmpp = v[i];
    bool bl = true;
    while (tmpp >= 0) {
      if (bl == false) {
        break;
      }
      if (tmpp == 0) {
        bl = false;
      }
      vector<long long> tmp;
      for (long long j = 0; j < n; j++) {
        if (j == i) {
          continue;
        }
        if (tmpp == v[j]) {
          tmp.push_back(0);
        } else if (v[i] > v[j]) {
          continue;
        } else {
          long long nm = v[j], cl = 0;
          while (nm != tmpp) {
            nm /= 2;
            cl++;
            if (nm <= tmpp) {
              break;
            }
          }
          if (nm == tmpp) {
            tmp.push_back(cl);
          } else {
            continue;
          }
        }
      }
      if (tmp.size() < k - 1) {
        tmpp /= 2;
        cnt++;
        continue;
      }
      sort(tmp.begin(), tmp.end());
      long long qq = 0;
      for (long long y = 0; y < k - 1; y++) {
        qq += tmp[y];
      }
      qq += cnt;
      if (qq < ans) {
        ans = qq;
      }
      tmpp /= 2;
      cnt++;
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 4
29 16 86 40 24 1 6 5 7 30 21 16 86 40 24 1 6 15 7 30 29 16 160 40 1 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 9 15 7 30


(G.2) Fast Input

7 4
3 5 3 3 3 3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v(n); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n; i++) { /* line 10 slow_hit_count: 51, fast_hit_count: 8 */
    cin >> v[i]; /* line 11 slow_hit_count: 50, fast_hit_count: 7 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1e18; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 14 slow_hit_count: 51, fast_hit_count: 8 */
    long long cnt = 0, tmpp = v[i]; /* line 15 slow_hit_count: 50, fast_hit_count: 7 */
    bool bl = true; /* line 16 slow_hit_count: 50, fast_hit_count: 7 */
    while (tmpp >= 0) { /* line 17 slow_hit_count: 317, fast_hit_count: 30 */
      if (bl == false) { /* line 18 slow_hit_count: 317, fast_hit_count: 30 */
        break; /* line 19 slow_hit_count: 50, fast_hit_count: 7 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      if (tmpp == 0) { /* line 21 slow_hit_count: 267, fast_hit_count: 23 */
        bl = false; /* line 22 slow_hit_count: 50, fast_hit_count: 7 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      vector<long long> tmp; /* line 24 slow_hit_count: 267, fast_hit_count: 23 */
      for (long long j = 0; j < n; j++) { /* line 25 slow_hit_count: 13617, fast_hit_count: 184 */
        if (j == i) { /* line 26 slow_hit_count: 13350, fast_hit_count: 161 */
          continue; /* line 27 slow_hit_count: 267, fast_hit_count: 23 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        if (tmpp == v[j]) { /* line 29 slow_hit_count: 13083, fast_hit_count: 138 */
          tmp.push_back(0); /* line 30 slow_hit_count: 555, fast_hit_count: 25 */
        } else if (v[i] > v[j]) { /* line 31 slow_hit_count: 12528, fast_hit_count: 113 */
          continue; /* line 32 slow_hit_count: 6900, fast_hit_count: 39 */
        } else { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
          long long nm = v[j], cl = 0; /* line 34 slow_hit_count: 5628, fast_hit_count: 74 */
          while (nm != tmpp) { /* line 35 slow_hit_count: 20815, fast_hit_count: 128 */
            nm /= 2; /* line 36 slow_hit_count: 20815, fast_hit_count: 128 */
            cl++; /* line 37 slow_hit_count: 20815, fast_hit_count: 128 */
            if (nm <= tmpp) { /* line 38 slow_hit_count: 20815, fast_hit_count: 128 */
              break; /* line 39 slow_hit_count: 5628, fast_hit_count: 74 */
            } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
          if (nm == tmpp) { /* line 42 slow_hit_count: 5628, fast_hit_count: 74 */
            tmp.push_back(cl); /* line 43 slow_hit_count: 3651, fast_hit_count: 67 */
          } else { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
            continue; /* line 45 slow_hit_count: 1977, fast_hit_count: 7 */
          } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      if (tmp.size() < k - 1) { /* line 49 slow_hit_count: 267, fast_hit_count: 23 */
        tmpp /= 2; /* line 50 slow_hit_count: 8, fast_hit_count: 7 */
        cnt++; /* line 51 slow_hit_count: 8, fast_hit_count: 7 */
        continue; /* line 52 slow_hit_count: 8, fast_hit_count: 7 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      sort(tmp.begin(), tmp.end()); /* line 54 slow_hit_count: 259, fast_hit_count: 16 */
      long long qq = 0; /* line 55 slow_hit_count: 259, fast_hit_count: 16 */
      for (long long y = 0; y < k - 1; y++) { /* line 56 slow_hit_count: 1036, fast_hit_count: 64 */
        qq += tmp[y]; /* line 57 slow_hit_count: 777, fast_hit_count: 48 */
      } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      qq += cnt; /* line 59 slow_hit_count: 259, fast_hit_count: 16 */
      if (qq < ans) { /* line 60 slow_hit_count: 259, fast_hit_count: 16 */
        ans = qq; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      tmpp /= 2; /* line 63 slow_hit_count: 259, fast_hit_count: 16 */
      cnt++; /* line 64 slow_hit_count: 259, fast_hit_count: 16 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line Comparison Analysis**: 
   - Notably, lines 25 to 45, which involve nested loops and condition checks, have significantly higher hit counts in the slow input compared to the fast input. This suggests a major bottleneck in terms of execution frequency.
   - Specifically, lines 35 to 39, which include a nested `while` loop, have extremely high hit counts, indicating they are executed many times during the slow input run.

2. **Data Interaction Inference**:
   - The lines inside the nested loops are interacting with the elements of the array, particularly focusing on dividing elements by 2 until they match a target (`tmpp`).
   - This operation is particularly expensive due to the repeated division and comparison operations for each pair of elements, which can lead to exponential blowup based on the input values.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant 1: Nested Loop Overhead**
   - **Natural language statement**: When the values in the array have a wide range or multiple distinct elements that each require several divisions to match another element, the nested loops perform significantly more operations, leading to a slowdown.
   - **Contextualization**: If the array contains elements that need many divisions to reach a common value, the program’s complexity increases due to the need for multiple iterations and comparisons.

2. **Invariant 2: Large Number of Iterations in Nested Conditions**
   - **Natural language statement**: If the initial elements of the array are such that a large number of elements require division operations to reach equality, this can cause the nested conditions to be evaluated repeatedly, slowing down the execution.
   - **Contextualization**: This typically occurs when the initial maximum values in the array are significantly larger than others, necessitating many division operations to match smaller values.

3. **Invariant 3: Repeated Operations on Large Arrays**
   - **Natural language statement**: If the array has a large number of elements, or if k is close to n, the overhead of finding enough matches and processing each element in the nested loops can significantly degrade performance.
   - **Contextualization**: In situations where nearly all elements need to be checked against each other, the number of operations can increase rapidly, leading to slow performance.

By focusing on these invariants, we abstract the performance issues from specific input values and provide a broader view of when and why the program might slow down. This approach helps in identifying potential performance pitfalls without relying on hardcoded or specific test cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checkers in C++

Here are the C++ code snippets for the performance-characterizing invariants:

#### Invariant 1: Nested Loop Overhead
```cpp
void check_nested_loop_overhead(const std::vector<long long>& v) {
    long long max_operations = 0;
    for (auto num : v) {
        long long operations = 0;
        while (num > 0) {
            num /= 2;
            operations++;
        }
        max_operations = std::max(max_operations, operations);
    }
    if (max_operations > 20) { // Assumed threshold based on possible divisions
        cerr << "Warning: Performance bottleneck - excessive divisions in nested loops!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Number of Iterations in Nested Conditions
```cpp
void check_large_number_of_iterations(long long n, long long k) {
    if (n > 40 && k > 3) { // Arbitrary threshold based on n and k size
        cerr << "Warning: Performance bottleneck - large n and high k result in many iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here is the instrumented C++ program with the checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_nested_loop_overhead(const vector<long long>& v) {
    long long max_operations = 0;
    for (auto num : v) {
        long long operations = 0;
        while (num > 0) {
            num /= 2;
            operations++;
        }
        max_operations = std::max(max_operations, operations);
    }
    if (max_operations > 20) {
        cerr << "Warning: Performance bottleneck - excessive divisions in nested loops!" << endl;
        abort();
    }
}

void check_large_number_of_iterations(long long n, long long k) {
    if (n > 40 && k > 3) {
        cerr << "Warning: Performance bottleneck - large n and high k result in many iterations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    long long n, k;
    cin >> n >> k;

    // Check for potential large iteration overhead before processing
    check_large_number_of_iterations(n, k);

    vector<long long> v(n);
    for (long long i = 0; i < n; i++) {
        cin >> v[i];
    }

    // Check for nested loop overhead after reading input
    check_nested_loop_overhead(v);

    long long ans = 1e18;
    for (long long i = 0; i < n; i++) {
        long long cnt = 0, tmpp = v[i];
        bool bl = true;
        while (tmpp >= 0) {
            if (!bl) {
                break;
            }
            if (tmpp == 0) {
                bl = false;
            }
            vector<long long> tmp;
            for (long long j = 0; j < n; j++) {
                if (j == i) {
                    continue;
                }
                if (tmpp == v[j]) {
                    tmp.push_back(0);
                } else if (v[i] > v[j]) {
                    continue;
                } else {
                    long long nm = v[j], cl = 0;
                    while (nm != tmpp) {
                        nm /= 2;
                        cl++;
                        if (nm <= tmpp) {
                            break;
                        }
                    }
                    if (nm == tmpp) {
                        tmp.push_back(cl);
                    } else {
                        continue;
                    }
                }
            }
            if (tmp.size() < k - 1) {
                tmpp /= 2;
                cnt++;
                continue;
            }
            sort(tmp.begin(), tmp.end());
            long long qq = 0;
            for (long long y = 0; y < k - 1; y++) {
                qq += tmp[y];
            }
            qq += cnt;
            if (qq < ans) {
                ans = qq;
            }
            tmpp /= 2;
            cnt++;
        }
    }
    cout << ans;
}
```

### Explanation:

- **Checker Placement**: The checkers are placed strategically. The `check_large_number_of_iterations` function is called immediately after reading `n` and `k`, as its bottleneck is based on these variables. The `check_nested_loop_overhead` function is called after input is read to preemptively detect excessive divisions.
- **Thresholds**: The thresholds set in these checkers are arbitrary but should be tuned based on profiling and testing. They help in flagging potential performance issues without being too restrictive.
- **Abort on Trigger**: If a checker condition is met, a warning is issued, and the program aborts, which assists in identifying input patterns that cause performance degradation.

