system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int S = 2e5 + 1, inf = 1e9;
int n, k;
int a[S];
int cnt[S], res[S];
int main() {
  ios_base ::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> k;
  for (int i = 1; i <= n; i++) {
    cin >> a[i], cnt[a[i]]++;
    if (cnt[a[i]] >= k) {
      cout << 0;
      return 0;
    }
  }
  sort(a + 1, a + n + 1);
  for (int i = 1; i <= n; i++) {
    int tmp = a[i] >> 1;
    int b = 0;
    while (tmp) {
      b++;
      if (cnt[tmp] < k) {
        cnt[tmp]++;
        res[tmp] += b;
      }
      tmp >>= 1;
    }
  }
  int ans = inf;
  for (int i = 1; i <= S - 1; i++)
    if (cnt[i] >= k && ans > res[i]) ans = res[i];
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
3 6 3 5 5


(G.2) Fast Input

5 3
3 6 3 3 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int S = 2e5 + 1, inf = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[S]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[S], res[S]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base ::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 11 slow_hit_count: 6, fast_hit_count: 4 */
    cin >> a[i], cnt[a[i]]++; /* line 12 slow_hit_count: 5, fast_hit_count: 4 */
    if (cnt[a[i]] >= k) { /* line 13 slow_hit_count: 5, fast_hit_count: 4 */
      cout << 0; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a + 1, a + n + 1); /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 19 slow_hit_count: 6, fast_hit_count: 0 */
    int tmp = a[i] >> 1; /* line 20 slow_hit_count: 5, fast_hit_count: 0 */
    int b = 0; /* line 21 slow_hit_count: 5, fast_hit_count: 0 */
    while (tmp) { /* line 22 slow_hit_count: 13, fast_hit_count: 0 */
      b++; /* line 23 slow_hit_count: 8, fast_hit_count: 0 */
      if (cnt[tmp] < k) { /* line 24 slow_hit_count: 8, fast_hit_count: 0 */
        cnt[tmp]++; /* line 25 slow_hit_count: 6, fast_hit_count: 0 */
        res[tmp] += b; /* line 26 slow_hit_count: 6, fast_hit_count: 0 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      tmp >>= 1; /* line 28 slow_hit_count: 8, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = inf; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= S - 1; i++) /* line 32 slow_hit_count: 200001, fast_hit_count: 0 */
    if (cnt[i] >= k && ans > res[i]) ans = res[i]; /* line 33 slow_hit_count: 200000, fast_hit_count: 0 */
  cout << ans; /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the provided C program, we will go through the phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The significant difference in hit counts between the slow and fast inputs is observed in the loop starting at line 19 and the while loop starting at line 22. These loops are only executed during the slow input.

2. **Pinpointing Problematic Lines:**
   - Lines 19-29 are heavily hit on the slow input and not at all on the fast input, indicating that these lines are associated with the performance issue.
   - The outer `for` loop processes each element of array `a`, and the inner `while` loop divides each element by 2 repeatedly until it becomes zero. This suggests a potential inefficiency in handling numbers that require multiple divisions to reach zero.

3. **Interaction with Data Structures:**
   - The array `cnt` tracks occurrences of numbers, and `res` accumulates the number of operations performed.
   - The inner `while` loop (lines 22-28) is indicative of an expensive operation due to repeated division and updates to these arrays, particularly when the numbers in the array `a` are large and require many divisions to reach zero.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**

   - **Invariant 1:** "When the input array contains numbers that require multiple divisions by 2 to reach a common number, especially when the numbers are large and distinct, the computation time increases significantly due to repeated operations."
     - **Rationale:** The repeated division and resulting operations on each element of the array cause the prolonged execution time.

   - **Invariant 2:** "If many elements in the array are distinct and large, requiring significant bit shifts to achieve equal values, the performance may degrade due to large inner loop iterations."
     - **Rationale:** Large and distinct elements mean more iterations in the `while (tmp)` loop, increasing complexity.

2. **Thresholds and Conditions:**
   - Consider scenarios where elements are maximally distinct and close to the upper limit of `a_i <= 200000` to trigger these slow conditions.
   
3. **Correlating Conditions to Input Patterns:**
   - The slowdown is correlated to input patterns where numbers in the array are large, distinct, and require several bit-shift operations to reach equality.

### Output: Performance-Characterizing Invariants

1. **Invariant 1:** "If the array contains numerous large and unique numbers that require multiple divisions by 2 to convert to equal numbers, the program will slow significantly due to the high number of operations."

2. **Invariant 2:** "When the array elements are maximally diverse, especially large values near 200,000, performance degrades because the computation involves extensive while-loop iterations and multiple updates to counters."

These invariants should help in identifying and diagnosing slow performance scenarios in future executions under similar constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants inferred earlier, we will implement runtime checks to detect when the program is likely to enter a slow path. Here are the invariant checks in C++:

#### Invariant 1: Large and Distinct Numbers
This invariant checks if the array contains large and distinct numbers that might require multiple divisions by 2 to reach equality.

```cpp
void check_large_distinct_invariant(int* a, int n, int k) {
    int largeDistinctCount = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] > 100000) { // Arbitrary large threshold
            largeDistinctCount++;
        }
    }
    if (largeDistinctCount >= k) {
        cerr << "Warning: Performance bottleneck condition triggered - large and distinct numbers present!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Bit Shifts
This invariant checks when numbers require extensive bit shifts (multiple halving operations) to become equal, which could signal a performance issue.

```cpp
void check_extensive_shifts_invariant(int* a, int n) {
    for (int i = 1; i <= n; i++) {
        int num = a[i];
        int shiftCount = 0;
        while (num) {
            num >>= 1;
            shiftCount++;
            if (shiftCount > 18) { // Arbitrary threshold for extensive shifts
                cerr << "Warning: Performance bottleneck condition triggered - number requires extensive bit shifts!" << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now we integrate the above checker functions into the provided C++ program. We'll place the checks appropriately to ensure they are effective without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int S = 2e5 + 1, inf = 1e9;
int n, k;
int a[S];
int cnt[S], res[S];

// Check for large and distinct numbers
void check_large_distinct_invariant(int* a, int n, int k) {
    int largeDistinctCount = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] > 100000) { // Arbitrary large threshold
            largeDistinctCount++;
        }
    }
    if (largeDistinctCount >= k) {
        cerr << "Warning: Performance bottleneck condition triggered - large and distinct numbers present!" << endl;
        abort();
    }
}

// Check for extensive bit shifts
void check_extensive_shifts_invariant(int* a, int n) {
    for (int i = 1; i <= n; i++) {
        int num = a[i];
        int shiftCount = 0;
        while (num) {
            num >>= 1;
            shiftCount++;
            if (shiftCount > 18) { // Arbitrary threshold for extensive shifts
                cerr << "Warning: Performance bottleneck condition triggered - number requires extensive bit shifts!" << endl;
                abort();
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> k;

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        cnt[a[i]]++;
        if (cnt[a[i]] >= k) {
            cout << 0;
            return 0;
        }
    }

    // Insert invariant checks before processing
    check_large_distinct_invariant(a, n, k);
    check_extensive_shifts_invariant(a, n);

    sort(a + 1, a + n + 1);

    for (int i = 1; i <= n; i++) {
        int tmp = a[i] >> 1;
        int b = 0;
        while (tmp) {
            b++;
            if (cnt[tmp] < k) {
                cnt[tmp]++;
                res[tmp] += b;
            }
            tmp >>= 1;
        }
    }
    
    int ans = inf;
    for (int i = 1; i <= S - 1; i++)
        if (cnt[i] >= k && ans > res[i]) ans = res[i];
    cout << ans;
}
```

### Explanation

- **Invariant Checks Integration:** We placed the invariant checks `check_large_distinct_invariant` and `check_extensive_shifts_invariant` in `main()` before the heavy processing loops, to detect potential slow conditions early without adding overhead to the main computation.
- **Threshold Values:** The thresholds (e.g., `>100000`, `>18` shifts) are chosen based on the problem constraints and are arbitrary but reasonable given the context. Adjust these as needed based on empirical data or further insights.

