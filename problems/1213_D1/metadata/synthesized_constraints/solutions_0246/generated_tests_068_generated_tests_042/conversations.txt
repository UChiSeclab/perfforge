system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long power(long long x, unsigned long long y) {
  long long temp;
  if (y == 0) return 1;
  temp = power(x, y / 2);
  if (y % 2 == 0)
    return temp * temp;
  else
    return x * temp * temp;
}
long long modpow(long long x, unsigned int y, long long p) {
  long long res = 1;
  x = x % p;
  if (y == 0) return 1;
  if (x == 0) return 0;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
long long exponentMod(long long A, long long B, long long C) {
  if (B == 0) return 1;
  if (A == 0) return 0;
  long long y;
  if (B % 2 == 0) {
    y = exponentMod(A, B / 2, C);
    y = (y * y) % C;
  } else {
    y = A % C;
    y = (y * exponentMod(A, B - 1, C) % C) % C;
  }
  return (long long)((y + C) % C);
}
long long gcd(long long a, long long b) {
  if (a == 0) return b;
  return gcd(b % a, a);
}
int gcdExtended(int a, int b, int *x, int *y) {
  if (a == 0) {
    *x = 0;
    *y = 1;
    return b;
  }
  int x1, y1;
  int gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
void modInverse(int a, int m) {
  int x, y;
  int g = gcdExtended(a, m, &x, &y);
  if (g != 1)
    cout << "Inverse doesn't exist";
  else {
    int res = (x % m + m) % m;
    cout << "Modular multiplicative inverse is " << res;
  }
}
void SieveOfEratosthenes(int n) {
  bool sieve[n + 1];
  long long cnt = 0;
  memset(sieve, 0, sizeof(sieve));
  for (int p = 2; p * p <= n; p++) {
    if (!sieve[p]) {
      for (int i = 2 * p; i <= n; i += p) sieve[i] = p;
    }
  }
  for (int p = 2; p <= n; p++) {
    if (sieve[p]) cnt++;
  }
  cout << cnt;
}
int phi(unsigned int n) {
  float result = n;
  for (int p = 2; p * p <= n; ++p) {
    if (n % p == 0) {
      while (n % p == 0) n /= p;
      result *= (1.0 - (1.0 / (float)p));
    }
  }
  if (n > 1) result *= (1.0 - (1.0 / (float)n));
  return (int)result;
}
void start() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
}
int32_t main() {
  start();
  long long n, k;
  cin >> n >> k;
  long long a[n];
  for (long long i = 0; i < n; i++) {
    cin >> a[i];
  }
  vector<long long> v;
  for (long long i = 0; i < n; i++) {
    long long x = a[i];
    while (x > 0) {
      v.push_back(x);
      x /= 2;
    }
  }
  long long ans = LLONG_MAX;
  for (auto res : v) {
    vector<long long> cnt;
    for (long long i = 0; i < n; i++) {
      long long x = a[i];
      long long cur = 0;
      while (x > res) {
        x /= 2;
        cur++;
      }
      if (x == res) {
        cnt.push_back(cur);
      }
    }
    if (cnt.size() < k) {
      continue;
    }
    sort(cnt.begin(), cnt.end());
    long long sum = 0;
    for (long long i = 0; i < k; i++) sum += cnt[i];
    ans = min(ans, sum);
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 4
29 16 86 40 24 1 6 5 7 30 21 16 86 40 24 1 6 15 7 30 29 16 160 40 1 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 9 15 7 30


(G.2) Fast Input

7 4
3 5 3 3 3 3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, unsigned long long y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long temp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  temp = power(x, y / 2); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (y % 2 == 0) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return temp * temp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return x * temp * temp; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long modpow(long long x, unsigned int y, long long p) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  x = x % p; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 0) return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % p; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % p; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long exponentMod(long long A, long long B, long long C) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (B == 0) return 1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (A == 0) return 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  long long y; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (B % 2 == 0) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    y = exponentMod(A, B / 2, C); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    y = (y * y) % C; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    y = A % C; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    y = (y * exponentMod(A, B - 1, C) % C) % C; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return (long long)((y + C) % C); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) return b; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b % a, a); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int gcdExtended(int a, int b, int *x, int *y) { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    *x = 0; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    *y = 1; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  int x1, y1; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  int gcd = gcdExtended(b % a, a, &x1, &y1); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  *x = y1 - (b / a) * x1; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  *y = x1; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
void modInverse(int a, int m) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  int g = gcdExtended(a, m, &x, &y); /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  if (g != 1) /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "Inverse doesn't exist"; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    int res = (x % m + m) % m; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "Modular multiplicative inverse is " << res; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
void SieveOfEratosthenes(int n) { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  bool sieve[n + 1]; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  long long cnt = 0; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  memset(sieve, 0, sizeof(sieve)); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  for (int p = 2; p * p <= n; p++) { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    if (!sieve[p]) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 2 * p; i <= n; i += p) sieve[i] = p; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int p = 2; p <= n; p++) { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    if (sieve[p]) cnt++; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
int phi(unsigned int n) { /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  float result = n; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  for (int p = 2; p * p <= n; ++p) { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % p == 0) { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
      while (n % p == 0) n /= p; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      result *= (1.0 - (1.0 / (float)p)); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 1) result *= (1.0 - (1.0 / (float)n)); /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  return (int)result; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
void start() { /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
int32_t main() { /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  start(); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  long long a[n]; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 98 slow_hit_count: 51, fast_hit_count: 8 */
    cin >> a[i]; /* line 99 slow_hit_count: 50, fast_hit_count: 7 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> v; /* line 101 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n; i++) { /* line 102 slow_hit_count: 51, fast_hit_count: 8 */
    long long x = a[i]; /* line 103 slow_hit_count: 50, fast_hit_count: 7 */
    while (x > 0) { /* line 104 slow_hit_count: 267, fast_hit_count: 23 */
      v.push_back(x); /* line 105 slow_hit_count: 217, fast_hit_count: 16 */
      x /= 2; /* line 106 slow_hit_count: 217, fast_hit_count: 16 */
    } /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = LLONG_MAX; /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto res : v) { /* line 110 slow_hit_count: 218, fast_hit_count: 17 */
    vector<long long> cnt; /* line 111 slow_hit_count: 217, fast_hit_count: 16 */
    for (long long i = 0; i < n; i++) { /* line 112 slow_hit_count: 11067, fast_hit_count: 128 */
      long long x = a[i]; /* line 113 slow_hit_count: 10850, fast_hit_count: 112 */
      long long cur = 0; /* line 114 slow_hit_count: 10850, fast_hit_count: 112 */
      while (x > res) { /* line 115 slow_hit_count: 32124, fast_hit_count: 196 */
        x /= 2; /* line 116 slow_hit_count: 21274, fast_hit_count: 84 */
        cur++; /* line 117 slow_hit_count: 21274, fast_hit_count: 84 */
      } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
      if (x == res) { /* line 119 slow_hit_count: 10850, fast_hit_count: 112 */
        cnt.push_back(cur); /* line 120 slow_hit_count: 4541, fast_hit_count: 88 */
      } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt.size() < k) { /* line 123 slow_hit_count: 217, fast_hit_count: 16 */
      continue; /* line 124 slow_hit_count: 3, fast_hit_count: 3 */
    } /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
    sort(cnt.begin(), cnt.end()); /* line 126 slow_hit_count: 214, fast_hit_count: 13 */
    long long sum = 0; /* line 127 slow_hit_count: 214, fast_hit_count: 13 */
    for (long long i = 0; i < k; i++) sum += cnt[i]; /* line 128 slow_hit_count: 1070, fast_hit_count: 65 */
    ans = min(ans, sum); /* line 129 slow_hit_count: 214, fast_hit_count: 13 */
  } /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 131 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 132 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Line-Level Hit Count Analysis

1. **Line 105 (`v.push_back(x);`)**:
   - **Slow Input Hit Count**: 217
   - **Fast Input Hit Count**: 16
   - **Inference**: `v.push_back(x);` is significantly more frequent in the slow input. This indicates that the loop iterating over elements of `a` and pushing elements into vector `v` contributes to the inefficiency. Higher hit counts are correlated with more extensive manipulation of array elements for the slow input.

2. **Line 110 (`for (auto res : v)`)**:
   - **Slow Input Hit Count**: 218
   - **Fast Input Hit Count**: 17
   - **Inference**: The outer loop over `v` executes much more frequently in the slow input, contributing to more iterations of nested operations, such as division and comparison.

3. **Lines 112-120 (Inner Loop and Conditionals)**:
   - **Line 115 (`while (x > res)`)**:
     - **Slow Input Hit Count**: 32,124
     - **Fast Input Hit Count**: 196
   - **Line 116 (`x /= 2;`)**:
     - **Slow Input Hit Count**: 21,274
     - **Fast Input Hit Count**: 84
   - **Line 120 (`cnt.push_back(cur);`)**:
     - **Slow Input Hit Count**: 4,541
     - **Fast Input Hit Count**: 88
   - **Inference**: The inner while-loop and associated operations (`x > res` and `x /= 2`) are executed far more frequently with the slow input, suggesting that the division operations and comparisons are a major source of overhead.

### Summary of Identified Bottlenecks

- **Iteration Over Large Vector**: High hit counts for operations involving vector `v` indicate processing a large number of elements, especially `v.push_back(x)` and the outer loop over `v` (`for (auto res : v)`).
- **Repeated Division and Comparison Operations**: Several nested loops and conditionals lead to repeated divisions and checks, particularly in the inner loop (`while (x > res)`), resulting in a large number of operations.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants

1. **Nested Loop and Division Cost**:
   - **Natural Language Description**: "The program may enter a slow path when there are many unique values derived from array elements, particularly when the array size is at its maximum constraint and elements require significant division steps to reach common values."
   - **Conceptual Threshold**: The problem arises when many elements need to be divided multiple times, indicating a high initial diversity in the array values.

2. **Large Intermediate Data Structures**:
   - **Natural Language Description**: "If the vector storing intermediate results becomes large due to numerous divisions of array elements, leading to extensive iterations over these results, performance can degrade significantly."
   - **Conceptual Threshold**: The slowdown is tied to the size of the vector `v` that grows as elements are divided and stored, especially when the vector's growth exceeds manageable limits due to many elements being processed similarly.

3. **Repeated Sorting of Intermediate Results**:
   - **Natural Language Description**: "Sorting operations on intermediate results can slow down the program significantly if the size of the vector containing these results is large and requires frequent re-sorting."
   - **Conceptual Threshold**: The inefficiency becomes apparent when the vector `cnt` that stores counts of operations is sorted repeatedly for large sizes.

These invariants focus on the structural and operational aspects that lead to inefficiency, abstracting details to broad conditions that can trigger slow execution paths in different scenarios within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Here, we transform the natural language performance-characterizing invariants into C++ runtime checkers.

### Runtime Checker Code for Invariants

#### Invariant 1: Nested Loop and Division Cost
```cpp
void check_division_invariant(int totalDivisions) {
    if (totalDivisions > 1000) { // Example threshold based on expected operation count
        cerr << "Warning: Performance bottleneck due to excessive division operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Intermediate Data Structures
```cpp
void check_vector_size_invariant(const std::vector<long long>& v) {
    if (v.size() > 500) { // Example threshold for vector size
        cerr << "Warning: Performance bottleneck due to large intermediate vector!" << endl;
        abort();
    }
}
```

#### Invariant 3: Repeated Sorting of Intermediate Results
```cpp
void check_sort_invariant(int sortCount) {
    if (sortCount > 200) { // Example threshold for sort operations
        cerr << "Warning: Performance bottleneck due to excessive sorting operations!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

Below is the original C++ code with the performance checkers integrated.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for division operations in nested loops
void check_division_invariant(int totalDivisions) {
    if (totalDivisions > 1000) { // Example threshold
        cerr << "Warning: Performance bottleneck due to excessive division operations!" << endl;
        abort();
    }
}

// Checker for size of intermediate vector
void check_vector_size_invariant(const std::vector<long long>& v) {
    if (v.size() > 500) { // Example threshold
        cerr << "Warning: Performance bottleneck due to large intermediate vector!" << endl;
        abort();
    }
}

// Checker for repeated sorting operations
void check_sort_invariant(int sortCount) {
    if (sortCount > 200) { // Example threshold
        cerr << "Warning: Performance bottleneck due to excessive sorting operations!" << endl;
        abort();
    }
}

void start() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}

int32_t main() {
    start();
    long long n, k;
    cin >> n >> k;
    long long a[n];
    for (long long i = 0; i < n; i++) {
        cin >> a[i];
    }
    vector<long long> v;
    int totalDivisions = 0; // Track total division operations

    for (long long i = 0; i < n; i++) {
        long long x = a[i];
        while (x > 0) {
            v.push_back(x);
            x /= 2;
            totalDivisions++;
        }
    }

    // Check the size of the vector after populating it
    check_vector_size_invariant(v);
    // Check the number of division operations
    check_division_invariant(totalDivisions);

    long long ans = LLONG_MAX;
    int sortCount = 0; // Track number of sorts

    for (auto res : v) {
        vector<long long> cnt;
        for (long long i = 0; i < n; i++) {
            long long x = a[i];
            long long cur = 0;
            while (x > res) {
                x /= 2;
                cur++;
            }
            if (x == res) {
                cnt.push_back(cur);
            }
        }
        if (cnt.size() < k) {
            continue;
        }
        sort(cnt.begin(), cnt.end());
        sortCount++;
        // Check sorting operations frequency
        check_sort_invariant(sortCount);

        long long sum = 0;
        for (long long i = 0; i < k; i++) sum += cnt[i];
        ans = min(ans, sum);
    }
    cout << ans << "\n";
}
```

### Explanation of Integration

- **`check_division_invariant`**: Checks if the total number of division operations exceeds a threshold, indicating excessive computational effort in reducing numbers.
- **`check_vector_size_invariant`**: Checks if the size of the vector `v` grows too large, representing overhead from managing too many intermediate values.
- **`check_sort_invariant`**: Checks if the sorting operations are performed too frequently, which could signify inefficiency in processing the results. 

Each check is placed after the part of the code that could potentially trigger the bottleneck condition. This ensures that the check does not add significant overhead to the execution of the program.

