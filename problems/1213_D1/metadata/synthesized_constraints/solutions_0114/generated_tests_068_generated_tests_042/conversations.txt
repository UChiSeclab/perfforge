system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> num;
vector<int> pos;
int main(void) {
  int n, k;
  cin >> n >> k;
  for (int i = 0; i < n; i++) {
    int tnum;
    cin >> tnum;
    num.push_back(tnum);
  }
  int posLen = 0;
  int ans = 1e9;
  for (int i = 0; i < n; i++) {
    int x = num[i];
    while (x > 0) {
      pos.push_back(x);
      posLen++;
      x /= 2;
    }
  }
  for (int id = 0; id < posLen; id++) {
    vector<int> cnt;
    for (int i = 0; i < n; i++) {
      int cur = 0;
      int x = num[i];
      while (x > pos[id]) {
        x /= 2;
        cur++;
      }
      if (x == pos[id]) {
        cnt.push_back(cur);
      }
    }
    if (int(cnt.size()) < k)
      continue;
    else {
      sort(cnt.begin(), cnt.end());
      ans = min(ans, accumulate(cnt.begin(), cnt.begin() + k, 0));
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 4
29 16 86 40 24 1 6 5 7 30 21 16 86 40 24 1 6 15 7 30 29 16 160 40 1 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 9 15 7 30


(G.2) Fast Input

7 4
3 5 3 3 3 3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> num; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> pos; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 51, fast_hit_count: 8 */
    int tnum; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> tnum; /* line 10 slow_hit_count: 50, fast_hit_count: 7 */
    num.push_back(tnum); /* line 11 slow_hit_count: 50, fast_hit_count: 7 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int posLen = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 1e9; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 15 slow_hit_count: 51, fast_hit_count: 8 */
    int x = num[i]; /* line 16 slow_hit_count: 50, fast_hit_count: 7 */
    while (x > 0) { /* line 17 slow_hit_count: 267, fast_hit_count: 23 */
      pos.push_back(x); /* line 18 slow_hit_count: 217, fast_hit_count: 16 */
      posLen++; /* line 19 slow_hit_count: 217, fast_hit_count: 16 */
      x /= 2; /* line 20 slow_hit_count: 217, fast_hit_count: 16 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (int id = 0; id < posLen; id++) { /* line 23 slow_hit_count: 218, fast_hit_count: 17 */
    vector<int> cnt; /* line 24 slow_hit_count: 217, fast_hit_count: 16 */
    for (int i = 0; i < n; i++) { /* line 25 slow_hit_count: 11067, fast_hit_count: 128 */
      int cur = 0; /* line 26 slow_hit_count: 10850, fast_hit_count: 112 */
      int x = num[i]; /* line 27 slow_hit_count: 10850, fast_hit_count: 112 */
      while (x > pos[id]) { /* line 28 slow_hit_count: 32124, fast_hit_count: 196 */
        x /= 2; /* line 29 slow_hit_count: 21274, fast_hit_count: 84 */
        cur++; /* line 30 slow_hit_count: 21274, fast_hit_count: 84 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      if (x == pos[id]) { /* line 32 slow_hit_count: 10850, fast_hit_count: 112 */
        cnt.push_back(cur); /* line 33 slow_hit_count: 4541, fast_hit_count: 88 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (int(cnt.size()) < k) /* line 36 slow_hit_count: 217, fast_hit_count: 16 */
      continue; /* line 37 slow_hit_count: 3, fast_hit_count: 3 */
    else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      sort(cnt.begin(), cnt.end()); /* line 39 slow_hit_count: 214, fast_hit_count: 13 */
      ans = min(ans, accumulate(cnt.begin(), cnt.begin() + k, 0)); /* line 40 slow_hit_count: 214, fast_hit_count: 13 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Based on the provided hit counts, let's analyze which parts of the code are significantly more hit during the slow input compared to the fast input:

1. **Line 23 (`for (int id = 0; id < posLen; id++)`)**:
   - **Slow Hit Count**: 218
   - **Fast Hit Count**: 17
   - The loop iterates over each possible value obtained by dividing elements by 2 until they reach 0. A higher number of unique division results (captured in `pos`) leads to more iterations of this loop, causing increased execution time.

2. **Line 25 (`for (int i = 0; i < n; i++)`)**:
   - **Slow Hit Count**: 11067
   - **Fast Hit Count**: 128
   - Nested within the outer loop, this loop iterates for each element in the array, increasing the computational complexity when combined with the outer loop over `posLen`.

3. **Line 28 (`while (x > pos[id])`)**:
   - **Slow Hit Count**: 32124
   - **Fast Hit Count**: 196
   - This inner loop divides the element until it becomes smaller or equal to `pos[id]`. Excessive iterations inside this loop can significantly slow down the program, especially when elements have large values.

4. **Line 29 (`x /= 2`) and Line 30 (`cur++`)**:
   - High hit counts suggest that large values of `x` are being divided repeatedly, indicating that recursion depth or loop nesting is causing the slowdown.

Overall, these segments indicate that the slowdown arises from the repeated division and comparison operations within nested loops, especially when there are many unique division results and large initial values in the array.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the analysis, here are some natural language performance invariants that describe when the code is likely to enter a slow path:

1. **Invariant: Large Initial Values Creating Extensive Division Paths**
   - "If the array contains many large initial values, the repeated division operations to reduce values can lead to an increased number of intermediate steps, which slows down the execution."

2. **Invariant: High Diversity in Division Outcomes**
   - "When the number of unique division outcomes (`posLen`) becomes large, the program iterates over more potential equalization targets, drastically increasing computation time."

3. **Invariant: Nested Iterations Over Large `pos` Set**
   - "If the list of potential targets (`pos`) derived from dividing elements by 2 is large, the nested iterations over this set and the array elements result in significant slowdowns, especially if these operations are nearly repetitive for many elements."

4. **Invariant: Repeated Sorting Within Extensive Loops**
   - "The sorting of cumulative operation counts within extensive loops can degrade performance, notably when many elements lead to similar division paths, increasing the number of potential solutions to evaluate."

By understanding these conditions, we can better anticipate the scenarios that lead to performance bottlenecks in the provided C program. These invariants focus on input-related conditions and the algorithm's behavior rather than specific input values, aligning with input constraints such as `n <= 50`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the number of elements in the array.

You are given an array a consisting of n integers. In one move you can choose any a_i and divide it by 2 rounding down (in other words, in one move you can set a_i := ⌊(a_i)/(2)⌋).

You can perform such an operation any (possibly, zero) number of times with any a_i.

Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array.

Don't forget that it is possible to have a_i = 0 after some operations, thus the answer always exists.

Input

The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.

Output

Print one integer — the minimum possible number of operations required to obtain at least k equal numbers in the array.

Examples

Input


5 3
1 2 2 4 5


Output


1


Input


5 3
1 2 3 4 5


Output


2


Input


5 3
1 2 3 3 3


Output


0

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants in C++**

Here are the C++ code snippets to implement the performance-characterizing invariants derived in natural language:

1. **Invariant: Large Initial Values Creating Extensive Division Paths**
   ```cpp
   void check_large_values(const vector<int>& arr) {
       int threshold = 100000; // Arbitrary threshold for large values
       for (int val : arr) {
           if (val > threshold) {
               cerr << "Warning: Performance bottleneck - large initial values detected!" << endl;
               abort();
           }
       }
   }
   ```

2. **Invariant: High Diversity in Division Outcomes**
   ```cpp
   void check_division_outcomes(int posLen) {
       int threshold = 1000; // Arbitrary threshold for pos length
       if (posLen > threshold) {
           cerr << "Warning: Performance bottleneck - high diversity in division outcomes!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Nested Iterations Over Large `pos` Set**
   ```cpp
   void check_nested_iterations(int posLen, int n) {
       if (posLen * n > 5000) { // Arbitrary threshold for nested loop iterations
           cerr << "Warning: Performance bottleneck - excessive nested iterations!" << endl;
           abort();
       }
   }
   ```

4. **Invariant: Repeated Sorting Within Extensive Loops**
   ```cpp
   void check_repeated_sorting(int sortOperations) {
       int threshold = 100; // Arbitrary threshold for sorting operations
       if (sortOperations > threshold) {
           cerr << "Warning: Performance bottleneck - excessive repeated sorting!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate the Checker Code into the Original Program**

Here is the original C++ program with the integrated checker code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions based on performance-characterizing invariants
void check_large_values(const vector<int>& arr) {
    int threshold = 100000; // Arbitrary threshold for large values
    for (int val : arr) {
        if (val > threshold) {
            cerr << "Warning: Performance bottleneck - large initial values detected!" << endl;
            abort();
        }
    }
}

void check_division_outcomes(int posLen) {
    int threshold = 1000; // Arbitrary threshold for pos length
    if (posLen > threshold) {
        cerr << "Warning: Performance bottleneck - high diversity in division outcomes!" << endl;
        abort();
    }
}

void check_nested_iterations(int posLen, int n) {
    if (posLen * n > 5000) { // Arbitrary threshold for nested loop iterations
        cerr << "Warning: Performance bottleneck - excessive nested iterations!" << endl;
        abort();
    }
}

void check_repeated_sorting(int sortOperations) {
    int threshold = 100; // Arbitrary threshold for sorting operations
    if (sortOperations > threshold) {
        cerr << "Warning: Performance bottleneck - excessive repeated sorting!" << endl;
        abort();
    }
}

int main(void) {
    int n, k;
    cin >> n >> k;
    vector<int> num(n);
    
    for (int i = 0; i < n; i++) {
        int tnum;
        cin >> tnum;
        num[i] = tnum;
    }

    // Check for large initial values
    check_large_values(num);

    vector<int> pos;
    int posLen = 0;
    int ans = 1e9;

    for (int i = 0; i < n; i++) {
        int x = num[i];
        while (x > 0) {
            pos.push_back(x);
            posLen++;
            x /= 2;
        }
    }

    // Check division outcomes and nested iterations
    check_division_outcomes(posLen);
    check_nested_iterations(posLen, n);

    int sortOperations = 0;

    for (int id = 0; id < posLen; id++) {
        vector<int> cnt;
        for (int i = 0; i < n; i++) {
            int cur = 0;
            int x = num[i];
            while (x > pos[id]) {
                x /= 2;
                cur++;
            }
            if (x == pos[id]) {
                cnt.push_back(cur);
            }
        }
        if (int(cnt.size()) < k)
            continue;
        else {
            sort(cnt.begin(), cnt.end());
            sortOperations++;
            ans = min(ans, accumulate(cnt.begin(), cnt.begin() + k, 0));
        }
    }

    // Check for repeated sorting
    check_repeated_sorting(sortOperations);

    cout << ans << endl;
    return 0;
}
```

**Explanation of Inserted Checks:**
- **Large Initial Values**: Check added after reading inputs to detect performance issues due to large numbers.
- **Diversity in Division Outcomes and Nested Iterations**: Checked after populating the `pos` vector to prevent excessive iterations.
- **Repeated Sorting**: Counted and checked after potential repeated sorting operations to catch cases leading to slow performance.

