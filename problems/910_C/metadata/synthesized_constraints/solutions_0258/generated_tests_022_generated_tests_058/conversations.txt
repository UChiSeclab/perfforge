system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize(3)
using namespace std;
string s[1001];
struct gg {
  int id, w, ww;
  bool flag;
} node[11];
bool vis[11];
int fst[11], ans = INT_MAX, n, cnt = 0, wei[11];
inline void get_ans() {
  int ret = 0;
  for (int i = 1; i <= cnt; i++) {
    ret += node[i].w * node[i].ww;
    if (ret > ans) return;
  }
  ans = min(ans, ret);
}
void dfs(int pos) {
  if (pos == cnt + 1) {
    get_ans();
    return;
  } else {
    for (int i = 0; i <= cnt; i++) {
      if (!vis[i]) {
        if (i == 0 && node[pos].flag == 0) continue;
        vis[i] = 1;
        node[pos].w = i;
        dfs(pos + 1);
        vis[i] = 0;
      }
    }
  }
}
int main() {
  int tmp;
  memset(fst, 1, sizeof fst);
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    cin >> s[i];
    tmp = 1;
    for (int j = s[i].length() - 1; j >= 0; j--)
      vis[s[i][j] - 'a'] = 1, wei[s[i][j] - 'a'] += tmp, tmp *= 10;
    fst[s[i][0] - 'a'] = 0;
  }
  for (int i = 0; i < 10; i++)
    if (vis[i])
      node[++cnt].id = i, node[cnt].flag = fst[i], node[cnt].ww = wei[i];
  memset(vis, 0, sizeof vis);
  dfs(1);
  printf("%d", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
b
c
d
e
f
g
i
i
j


(G.2) Fast Input

9
b
c
d
e
g
g
i
i
j


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize(3) /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string s[1001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct gg { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int id, w, ww; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  bool flag; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} node[11]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[11]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int fst[11], ans = INT_MAX, n, cnt = 0, wei[11]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
inline void get_ans() { /* line 11 slow_hit_count: 40320, fast_hit_count: 5040 */
  int ret = 0; /* line 12 slow_hit_count: 40320, fast_hit_count: 5040 */
  for (int i = 1; i <= cnt; i++) { /* line 13 slow_hit_count: 314164, fast_hit_count: 33178 */
    ret += node[i].w * node[i].ww; /* line 14 slow_hit_count: 308251, fast_hit_count: 32788 */
    if (ret > ans) return; /* line 15 slow_hit_count: 308251, fast_hit_count: 32788 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  ans = min(ans, ret); /* line 17 slow_hit_count: 5913, fast_hit_count: 390 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int pos) { /* line 19 slow_hit_count: 109601, fast_hit_count: 13700 */
  if (pos == cnt + 1) { /* line 20 slow_hit_count: 109601, fast_hit_count: 13700 */
    get_ans(); /* line 21 slow_hit_count: 40320, fast_hit_count: 5040 */
    return; /* line 22 slow_hit_count: 40320, fast_hit_count: 5040 */
  } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i <= cnt; i++) { /* line 24 slow_hit_count: 692810, fast_hit_count: 77940 */
      if (!vis[i]) { /* line 25 slow_hit_count: 623529, fast_hit_count: 69280 */
        if (i == 0 && node[pos].flag == 0) continue; /* line 26 slow_hit_count: 178881, fast_hit_count: 22359 */
        vis[i] = 1; /* line 27 slow_hit_count: 109600, fast_hit_count: 13699 */
        node[pos].w = i; /* line 28 slow_hit_count: 109600, fast_hit_count: 13699 */
        dfs(pos + 1); /* line 29 slow_hit_count: 109600, fast_hit_count: 13699 */
        vis[i] = 0; /* line 30 slow_hit_count: 109600, fast_hit_count: 13699 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  int tmp; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  memset(fst, 1, sizeof fst); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 39 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> s[i]; /* line 40 slow_hit_count: 9, fast_hit_count: 9 */
    tmp = 1; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = s[i].length() - 1; j >= 0; j--) /* line 42 slow_hit_count: 18, fast_hit_count: 18 */
      vis[s[i][j] - 'a'] = 1, wei[s[i][j] - 'a'] += tmp, tmp *= 10; /* line 43 slow_hit_count: 9, fast_hit_count: 9 */
    fst[s[i][0] - 'a'] = 0; /* line 44 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 10; i++) /* line 46 slow_hit_count: 11, fast_hit_count: 11 */
    if (vis[i]) /* line 47 slow_hit_count: 10, fast_hit_count: 10 */
      node[++cnt].id = i, node[cnt].flag = fst[i], node[cnt].ww = wei[i]; /* line 48 slow_hit_count: 8, fast_hit_count: 7 */
  memset(vis, 0, sizeof vis); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  dfs(1); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d", ans); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we need to understand how the program's structure might lead to significantly more computation for certain inputs. We'll go through the two phases outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The `dfs` function (lines 19-34) and specifically the recursive call to `dfs(pos + 1)` on line 29 have notably higher hit counts in the slow input compared to the fast input.
   - The `get_ans` function (lines 11-18) is called more frequently in the slow input. Lines 12-17 show increased activity, especially lines 13-15 for accumulation and checks.
   - Line 24, which iterates over potential values for node weights, has significantly higher hit counts for the slow input.

2. **Pinpointing Lines**:
   - The loop on line 24, combined with the recursive branching within `dfs`, suggests that the permutation of possible values for mapping letters to digits is the source of inefficiency.
   - The condition on line 26 prevents certain mappings that would lead to invalid numbers (numbers starting with zero), which could cause some paths to terminate early in the fast input.

3. **Inference**:
   - The program uses a depth-first search (DFS) to try different weight assignments to the characters `[a-j]`. The increase in hits on recursive calls and iteration lines indicates a larger search space is being explored for the slow input.
   - If certain letters have constraints (such as not leading with zeros) and still appear frequently, more recursive paths need to be checked to find valid combinations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can draft several performance-characterizing invariants:

1. **Invariant 1**:
   - **Natural Language**: "If a large number of unique letters are frequently mapped to digits in ways that avoid leading zeros, the search space for possible combinations increases, leading to slower performance."
   - **Condition**: This happens when the distinct letters used are close to the maximum (10), and the constraints on zero-leading digits require more backtracking in the DFS to find valid mappings.

2. **Invariant 2**:
   - **Natural Language**: "When strings contain repeated letters or certain letters frequently appear at the start of strings, the constraints on avoiding leading zeros cause excessive recursion."
   - **Condition**: This can occur when a frequently appearing letter, constrained not to be zero, dominates the first position in the strings, resulting in repeated invalid paths that must be pruned.

3. **Invariant 3**:
   - **Natural Language**: "If the number of recursive calls grows due to complex digit assignment permutations, performance may degrade due to the overhead of managing a vast recursion tree."
   - **Condition**: When the DFS tree's depth increases significantly due to higher branching factors from recurring letter assignments across multiple input strings.

These invariants suggest that the slow input is causing a significant increase in recursive exploration due to the need to satisfy both the digit constraints and the correct positioning of non-zero numbers. The key performance issue is rooted in the DFS's expansive search space given these constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Checkers

Here we will translate the performance-characterizing invariants from natural language into C++ code snippets, which will be used for runtime checks.

#### Invariant 1 Checker:
This invariant addresses the scenario where a large number of unique letters are mapped to digits while avoiding leading zeros. We can check if the number of active mappings approaches the maximum.

```cpp
void check_large_mapping_invariant(int activeMappings, int maxMappings) {
    if (activeMappings == maxMappings) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of active mappings!" << endl;
        abort();
    }
}
```

#### Invariant 2 Checker:
This invariant deals with repeated letters or frequently appearing letters at the start, leading to excessive recursion. We check for high frequency of leading letters.

```cpp
void check_repeated_leading_letter_invariant(const std::vector<int>& leadingCounts, int threshold) {
    for (int count : leadingCounts) {
        if (count > threshold) {
            cerr << "Warning: Performance bottleneck condition triggered - high frequency of leading letters!" << endl;
            abort();
        }
    }
}
```

#### Invariant 3 Checker:
This invariant is concerned with the depth and branching factor of the recursive DFS search.

```cpp
void check_dfs_search_space_invariant(int currentDepth, int maxDepth, int branchFactor, int maxBranchFactor) {
    if (currentDepth > maxDepth || branchFactor > maxBranchFactor) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive DFS search space!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below, we'll integrate these checkers into the provided C++ program at appropriate positions to detect the performance bottlenecks. 

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize(3)
using namespace std;

string s[1001];
struct gg {
    int id, w, ww;
    bool flag;
} node[11];

bool vis[11];
int fst[11], ans = INT_MAX, n, cnt = 0, wei[11];

// Checker functions
void check_large_mapping_invariant(int activeMappings, int maxMappings) {
    if (activeMappings == maxMappings) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of active mappings!" << endl;
        abort();
    }
}

void check_repeated_leading_letter_invariant(const std::vector<int>& leadingCounts, int threshold) {
    for (int count : leadingCounts) {
        if (count > threshold) {
            cerr << "Warning: Performance bottleneck condition triggered - high frequency of leading letters!" << endl;
            abort();
        }
    }
}

void check_dfs_search_space_invariant(int currentDepth, int maxDepth, int branchFactor, int maxBranchFactor) {
    if (currentDepth > maxDepth || branchFactor > maxBranchFactor) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive DFS search space!" << endl;
        abort();
    }
}

inline void get_ans() {
    int ret = 0;
    for (int i = 1; i <= cnt; i++) {
        ret += node[i].w * node[i].ww;
        if (ret > ans) return;
    }
    ans = min(ans, ret);
}

void dfs(int pos) {
    check_dfs_search_space_invariant(pos, 11, cnt, 10); // Check DFS search space
    if (pos == cnt + 1) {
        get_ans();
        return;
    } else {
        for (int i = 0; i <= cnt; i++) {
            if (!vis[i]) {
                if (i == 0 && node[pos].flag == 0) continue;
                vis[i] = 1;
                node[pos].w = i;
                dfs(pos + 1);
                vis[i] = 0;
            }
        }
    }
}

int main() {
    int tmp;
    memset(fst, 1, sizeof fst);
    scanf("%d", &n);
    
    vector<int> leadingCounts(10, 0); 
    
    for (int i = 1; i <= n; i++) {
        cin >> s[i];
        tmp = 1;
        for (int j = s[i].length() - 1; j >= 0; j--)
            vis[s[i][j] - 'a'] = 1, wei[s[i][j] - 'a'] += tmp, tmp *= 10;
        fst[s[i][0] - 'a'] = 0;
        leadingCounts[s[i][0] - 'a']++;
    }
    
    check_repeated_leading_letter_invariant(leadingCounts, n / 2); // Check for repeated leading letter
    
    for (int i = 0; i < 10; i++)
        if (vis[i])
            node[++cnt].id = i, node[cnt].flag = fst[i], node[cnt].ww = wei[i];
    
    check_large_mapping_invariant(cnt, 10); // Check large mapping invariant
    
    memset(vis, 0, sizeof vis);
    dfs(1);
    printf("%d", ans);
    return 0;
}
```

**Integration Explanation:**
- **`check_large_mapping_invariant`** is placed after the mapping is set up to ensure that no more than the maximum allowable mappings are used.
- **`check_repeated_leading_letter_invariant`** is applied to check that no leading letter is disproportionately frequent, which would trigger excessive recursion paths.
- **`check_dfs_search_space_invariant`** is called within the DFS to monitor the depth and branching factor, ensuring they stay within reasonable bounds.

These checks ensure that performance bottlenecks are caught at runtime, helping developers identify when these conditions might lead to slow execution.

