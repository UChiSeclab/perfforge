system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int cnt[7][10];
int main() {
  int n;
  ios::sync_with_stdio(false);
  int pw10[8];
  pw10[0] = 1;
  for (int i = 1; i < 8; i++) pw10[i] = 10 * pw10[i - 1];
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n;
  vector<string> s(n);
  vector<bool> restricted(10);
  for (int i = 0; i < 10; i++) restricted[i] = false;
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    restricted[s[i][0] - 'a'] = true;
    for (int j = s[i].size() - 1, k = 0; j >= 0; j--, k++)
      cnt[k][s[i][j] - 'a']++;
  }
  vector<int> p;
  for (int i = 0; i < 10; i++) p.push_back(i);
  int mn = 2000000010;
  do {
    int val = 0;
    int wh0;
    for (int i = 0; i < 10; i++)
      if (p[i] == 0) wh0 = i;
    if (restricted[wh0]) continue;
    for (int i = 0; i < 7; i++) {
      for (int j = 0; j < 10; j++) val += cnt[i][j] * pw10[i] * p[j];
    }
    mn = min(mn, val);
  } while (next_permutation(p.begin(), p.end()));
  cout << mn << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
jbc
c
fae
ce
fgi
igfg
feh
ied
fe


(G.2) Fast Input

9
jbc
c
fae
ce
fgi
igfg
hef
ied
ef


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[7][10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int pw10[8]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  pw10[0] = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < 8; i++) pw10[i] = 10 * pw10[i - 1]; /* line 9 slow_hit_count: 8, fast_hit_count: 8 */
  cin.tie(NULL); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  vector<string> s(n); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  vector<bool> restricted(10); /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < 10; i++) restricted[i] = false; /* line 15 slow_hit_count: 11, fast_hit_count: 11 */
  for (int i = 0; i < n; i++) { /* line 16 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> s[i]; /* line 17 slow_hit_count: 9, fast_hit_count: 9 */
    restricted[s[i][0] - 'a'] = true; /* line 18 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = s[i].size() - 1, k = 0; j >= 0; j--, k++) /* line 19 slow_hit_count: 33, fast_hit_count: 33 */
      cnt[k][s[i][j] - 'a']++; /* line 20 slow_hit_count: 24, fast_hit_count: 24 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> p; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 10; i++) p.push_back(i); /* line 23 slow_hit_count: 11, fast_hit_count: 11 */
  int mn = 2000000010; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 25 slow_hit_count: 3628799, fast_hit_count: 3628799 */
    int val = 0; /* line 26 slow_hit_count: 3628800, fast_hit_count: 3628800 */
    int wh0; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < 10; i++) /* line 28 slow_hit_count: 39916800, fast_hit_count: 39916800 */
      if (p[i] == 0) wh0 = i; /* line 29 slow_hit_count: 36288000, fast_hit_count: 36288000 */
    if (restricted[wh0]) continue; /* line 30 slow_hit_count: 3628800, fast_hit_count: 3628800 */
    for (int i = 0; i < 7; i++) { /* line 31 slow_hit_count: 17418240, fast_hit_count: 11612160 */
      for (int j = 0; j < 10; j++) val += cnt[i][j] * pw10[i] * p[j]; /* line 32 slow_hit_count: 167650560, fast_hit_count: 111767040 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    mn = min(mn, val); /* line 34 slow_hit_count: 2177280, fast_hit_count: 1451520 */
  } while (next_permutation(p.begin(), p.end())); /* line 35 slow_hit_count: 3628800, fast_hit_count: 3628800 */
  cout << mn << endl; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we first analyze the difference in line-level hit counts between the slow and fast inputs. After identifying the potential causes for the slowdown, we derive performance-characterizing invariants that capture the conditions leading to this behavior.

### Phase 1: Identifying Expensive Code Segments

1. **High Hit Counts in the Permutation Loop:**
   - The `do-while` loop that iterates through permutations (line 25 - line 35) shows extremely high hit counts: `3,628,799`. This indicates that the loop is generating and evaluating all permutations of the array `p`, which contains the digits 0 to 9. The factorial of 10 (`10!`) is `3,628,800`, confirming that the algorithm evaluates nearly all permutations.

2. **Expensive Evaluation of Permutations:**
   - The inner loop (lines 31 - 32) iterates over potential digit-value assignments, calculating the total value for each permutation. This involves:
     - Multiplying counts by powers of 10 and the permutation values: `val += cnt[i][j] * pw10[i] * p[j]`.
     - These operations occur for each permutation, leading to `167,650,560` operations on the slow input and `111,767,040` on the fast input, indicating a significant difference in computational effort between the inputs.

3. **Restricted Permutations:**
   - The check for restricted leading digits (line 30) reduces some computations, but the impact is limited given the factorial nature of permutations.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on this analysis, the following natural language invariants describe the conditions under which the program enters a slow path:

1. **Exponential Growth in Permutations:**
   - **Invariant:** "When the program evaluates all permutations of digit assignments, the performance can degrade significantly due to the factorial growth in possible permutations."
   - **Explanation:** As the problem involves checking all permutations of digits 0 to 9, it inherently involves `10!` evaluations. This results in slow performance, especially when not many permutations can be pruned by the restriction checks.

2. **High Frequency of Costly Calculations:**
   - **Invariant:** "If the permutation evaluation loop executes a large number of operations for calculating potential values across multiple strings, the performance will slow down considerably."
   - **Explanation:** Each permutation leads to a series of nested loops calculating possible values for each string, which is computationally intensive.

3. **Ineffective Pruning with Restrictions:**
   - **Invariant:** "The constraint that leading characters cannot map to zero is not sufficient to effectively prune permutations, leading to unnecessary evaluations."
   - **Explanation:** Although restricted mappings reduce some permutations, the constraint is not strong enough to significantly cut down the number of permutations due to the high branching factor.

These invariants highlight the factorial complexity of the problem and the impact this has on performance, especially when input data structure and constraints do not sufficiently reduce the search space.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Below are the checker functions in C++ that correspond to the natural language invariants derived previously:

1. **Checker for Exponential Growth in Permutations:**

   ```cpp
   void check_permutation_invariant(int permutationsEvaluated, int factorialLimit) {
       if (permutationsEvaluated > factorialLimit) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive permutations evaluated!" << endl;
           abort();
       }
   }
   ```

   This function checks if the number of permutations evaluated exceeds a certain factorial limit, indicating potential slowdown due to excessive permutations.

2. **Checker for High Frequency of Costly Calculations:**

   ```cpp
   void check_calculation_invariant(int operationCount, int operationLimit) {
       if (operationCount > operationLimit) {
           cerr << "Warning: Performance bottleneck condition triggered - too many costly calculations!" << endl;
           abort();
       }
   }
   ```

   This function checks if the number of costly operations exceeds a threshold, which could indicate performance degradation.

3. **Checker for Ineffective Pruning with Restrictions:**

   ```cpp
   void check_restriction_invariant(bool isRestrictedComputation) {
       if (isRestrictedComputation) {
           cerr << "Warning: Performance bottleneck condition triggered - ineffective pruning of permutations!" << endl;
           abort();
       }
   }
   ```

   This function checks if the permutation restriction condition isn't effective enough to prune the search space significantly.

### Phase 4: Integrating Checker Code with the Original Program

Now, we integrate these checkers into the original C++ program at strategic points to detect performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

int cnt[7][10];

void check_permutation_invariant(int permutationsEvaluated, int factorialLimit) {
    if (permutationsEvaluated > factorialLimit) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive permutations evaluated!" << endl;
        abort();
    }
}

void check_calculation_invariant(int operationCount, int operationLimit) {
    if (operationCount > operationLimit) {
        cerr << "Warning: Performance bottleneck condition triggered - too many costly calculations!" << endl;
        abort();
    }
}

void check_restriction_invariant(bool isRestrictedComputation) {
    if (isRestrictedComputation) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective pruning of permutations!" << endl;
        abort();
    }
}

int main() {
    int n;
    ios::sync_with_stdio(false);
    int pw10[8];
    pw10[0] = 1;
    for (int i = 1; i < 8; i++) pw10[i] = 10 * pw10[i - 1];
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    vector<string> s(n);
    vector<bool> restricted(10, false);
    
    int operationCount = 0; // For counting operations in permutations

    for (int i = 0; i < n; i++) {
        cin >> s[i];
        restricted[s[i][0] - 'a'] = true;
        for (int j = s[i].size() - 1, k = 0; j >= 0; j--, k++)
            cnt[k][s[i][j] - 'a']++;
    }
    vector<int> p;
    for (int i = 0; i < 10; i++) p.push_back(i);
    int mn = 2000000010;
    int permutationsEvaluated = 0; // For counting permutations

    do {
        permutationsEvaluated++;
        int val = 0;
        int wh0;
        for (int i = 0; i < 10; i++)
            if (p[i] == 0) wh0 = i;
        if (restricted[wh0]) continue;
        
        // Check for ineffective restriction pruning
        check_restriction_invariant(restricted[wh0]);

        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 10; j++) {
                val += cnt[i][j] * pw10[i] * p[j];
                operationCount++;
            }
        }

        mn = min(mn, val);
    } while (next_permutation(p.begin(), p.end()));

    // Check for permutation and calculation invariants
    check_permutation_invariant(permutationsEvaluated, 3628800);
    check_calculation_invariant(operationCount, 167650560);

    cout << mn << endl;
    return 0;
}
```

### Explanation of Integrations:

- **Permutations Count Check:** After the `do-while` loop, `check_permutation_invariant` ensures that the number of evaluated permutations doesn't exceed `10!` (i.e., `3,628,800`).

- **Calculation Operations Check:** The `check_calculation_invariant` function ensures that the total number of operations doesn't exceed a pre-defined threshold, reflecting potential performance degradation.

- **Restriction Check:** Inside the loop, `check_restriction_invariant` assesses whether the condition for restricted permutations effectively prunes the search space, avoiding unnecessary computations.

These integrated checks help detect scenarios where performance bottlenecks could arise due to excessive computation or ineffective pruning of the permutation space.

