system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int ct[10][10];
bool lead[10];
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n;
  cin >> n;
  vector<string> in(n);
  for (int i = 0; i < n; i++) {
    cin >> in[i];
    lead[in[i][0] - 'a'] = true;
    reverse(in[i].begin(), in[i].end());
    for (int j = 0; j < in[i].length(); j++) {
      ct[in[i][j] - 'a'][j]++;
    }
  }
  vector<int> v(10);
  for (int i = 0; i < 10; i++) v[i] = i;
  int minsum = 2 * (int)1e9;
  do {
    int zloc = find(v.begin(), v.end(), 0) - v.begin();
    if (lead[zloc]) continue;
    int sum = 0;
    for (int i = 0; i < 10; i++) {
      int p10 = 1;
      for (int j = 0; j < 6; j++) {
        sum += p10 * v[i] * ct[i][j];
        p10 *= 10;
      }
    }
    minsum = min(sum, minsum);
  } while (next_permutation(v.begin(), v.end()));
  cout << minsum << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
jbc
c
fae
ce
fgi
igfg
feh
ied
fe


(G.2) Fast Input

9
jbc
c
fae
ce
fgi
igfg
hef
ied
ef


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int ct[10][10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool lead[10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<string> in(n); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> in[i]; /* line 12 slow_hit_count: 9, fast_hit_count: 9 */
    lead[in[i][0] - 'a'] = true; /* line 13 slow_hit_count: 9, fast_hit_count: 9 */
    reverse(in[i].begin(), in[i].end()); /* line 14 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = 0; j < in[i].length(); j++) { /* line 15 slow_hit_count: 33, fast_hit_count: 33 */
      ct[in[i][j] - 'a'][j]++; /* line 16 slow_hit_count: 24, fast_hit_count: 24 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> v(10); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 10; i++) v[i] = i; /* line 20 slow_hit_count: 11, fast_hit_count: 11 */
  int minsum = 2 * (int)1e9; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 22 slow_hit_count: 3628799, fast_hit_count: 3628799 */
    int zloc = find(v.begin(), v.end(), 0) - v.begin(); /* line 23 slow_hit_count: 3628800, fast_hit_count: 3628800 */
    if (lead[zloc]) continue; /* line 24 slow_hit_count: 3628800, fast_hit_count: 3628800 */
    int sum = 0; /* line 25 slow_hit_count: 2177280, fast_hit_count: 1451520 */
    for (int i = 0; i < 10; i++) { /* line 26 slow_hit_count: 23950080, fast_hit_count: 15966720 */
      int p10 = 1; /* line 27 slow_hit_count: 21772800, fast_hit_count: 14515200 */
      for (int j = 0; j < 6; j++) { /* line 28 slow_hit_count: 152409600, fast_hit_count: 101606400 */
        sum += p10 * v[i] * ct[i][j]; /* line 29 slow_hit_count: 130636800, fast_hit_count: 87091200 */
        p10 *= 10; /* line 30 slow_hit_count: 130636800, fast_hit_count: 87091200 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    minsum = min(sum, minsum); /* line 33 slow_hit_count: 2177280, fast_hit_count: 1451520 */
  } while (next_permutation(v.begin(), v.end())); /* line 34 slow_hit_count: 3628800, fast_hit_count: 3628800 */
  cout << minsum << endl; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and derive performance-characterizing invariants, let's first go through the tasks step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The most significant difference in hit counts between the slow and fast inputs occurs in lines 25 to 33, particularly lines 29 and 30, which are part of nested loops.
   - The `do-while` loop (lines 22 to 34) is executed `3628800` times, which suggests it’s evaluating every permutation of the digits `[0-9]`.

2. **Pinpoint Significant Lines**:
   - The high number of executions within the `for` loop (lines 26 to 32) and nested `for` loop (lines 28 to 31) indicates that these segments are computationally expensive, particularly the operations in lines 29 and 30.

3. **Data Structures and Loop Interactions**:
   - The program uses permutations to find the minimal sum of the restored numbers, which implies factorial-time complexity due to the `next_permutation` usage (10! permutations).
   - Line 24 checks for leading zeros, a condition that skips certain permutations, but it does not significantly reduce the overall number of permutations considered.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are natural language invariants that characterize when the program is likely to enter a slow path:

1. **High Permutation Complexity**:
   - Natural Language: "The program incurs high computational overhead when it attempts to evaluate all permutations of digits, especially when checking each permutation for non-leading zero configurations."
   - Explanation: The core of the slowdown is due to the factorial nature of permutations (`10!` permutations), which isn't reduced substantially by the leading zero check.

2. **Nested Loop Operations**:
   - Natural Language: "When calculating sums for each permutation, the presence of nested loops that iterate over each digit and position can become costly, especially when multiple strings have significant positional contributions to the sum."
   - Explanation: The nested loops for calculating the potential sum of restored numbers multiply the cost per permutation, especially if many permutations are valid.

3. **Avoidance of Leading Zero Configurations**:
   - Natural Language: "The program spends time avoiding permutations that would cause leading zeros, which, although necessary, does not sufficiently prune the number of permutations due to the high initial count."
   - Explanation: While the check for leading zeros is necessary, its effect on reducing permutations is not enough to outweigh the base factorial complexity.

### Suggestions for Broad Invariant Checks

To detect potential slowdowns early in other scenarios, consider these checks:

- **Permutation Threshold**:
  - Before entering the permutation evaluation, check if the problem constraints (like length of strings or distinct letters used) may trigger an excessive permutation count.
  
- **Optimization Heuristics**:
  - Consider implementing heuristics that can identify and avoid obviously suboptimal permutations more effectively than only checking for leading zeros.

These performance-characterizing invariants align with the problem constraints and can help identify and mitigate slow execution paths in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 separately.

### Phase 3: Implement the Natural Language Invariants in C++ Code

Here are the checker functions implemented based on the performance-characterizing invariants derived in Phase 2.

1. **High Permutation Complexity**:

   We can detect cases where the permutation count is inherently high by checking the number of unique characters, which affects the digit mapping's complexity.

```cpp
void check_permutation_complexity(int unique_char_count) {
    // assuming a high number of permutations when unique characters are close to 10
    if (unique_char_count >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high permutation complexity!" << endl;
        abort();
    }
}
```

2. **Nested Loop Operations**:

```cpp
void check_nested_loop_operations(int max_string_length, int n) {
    // If there are many strings each with maximum length, the nested loops can be costly
    if (max_string_length >= 6 && n > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - costly nested loop operations!" << endl;
        abort();
    }
}
```

3. **Avoidance of Leading Zero Configurations**:

```cpp
void check_leading_zero_avoidance(int leading_zero_checks) {
    // If many permutations are skipped due to leading zeros, it implies a high number of checks
    if (leading_zero_checks > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive leading zero checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker functions into the given C++ program. We'll place the checks at appropriate points to ensure they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_permutation_complexity(int unique_char_count) {
    if (unique_char_count >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high permutation complexity!" << endl;
        abort();
    }
}

void check_nested_loop_operations(int max_string_length, int n) {
    if (max_string_length >= 6 && n > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - costly nested loop operations!" << endl;
        abort();
    }
}

void check_leading_zero_avoidance(int leading_zero_checks) {
    if (leading_zero_checks > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive leading zero checks!" << endl;
        abort();
    }
}

int ct[10][10];
bool lead[10];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
  
    int n;
    cin >> n;
  
    vector<string> in(n);
    set<char> unique_chars; // To track the number of unique characters
    int max_string_length = 0; // To track the maximum string length

    for (int i = 0; i < n; i++) {
        cin >> in[i];
        lead[in[i][0] - 'a'] = true;
        reverse(in[i].begin(), in[i].end());
        max_string_length = max(max_string_length, (int)in[i].length());
        for (int j = 0; j < in[i].length(); j++) {
            ct[in[i][j] - 'a'][j]++;
            unique_chars.insert(in[i][j]);
        }
    }
  
    check_permutation_complexity(unique_chars.size());
    check_nested_loop_operations(max_string_length, n);

    vector<int> v(10);
    for (int i = 0; i < 10; i++) v[i] = i;

    int minsum = 2 * (int)1e9;
    int leading_zero_checks = 0; // To track leading zero checks

    do {
        int zloc = find(v.begin(), v.end(), 0) - v.begin();
        if (lead[zloc]) {
            leading_zero_checks++;
            continue;
        }
        int sum = 0;
        for (int i = 0; i < 10; i++) {
            int p10 = 1;
            for (int j = 0; j < 6; j++) {
                sum += p10 * v[i] * ct[i][j];
                p10 *= 10;
            }
        }
        minsum = min(sum, minsum);
    } while (next_permutation(v.begin(), v.end()));
  
    check_leading_zero_avoidance(leading_zero_checks);

    cout << minsum << endl;
    return 0;
}
```

### Comments

- **Permutation Complexity Check**: This is placed after parsing the strings and before permutations begin. It checks for a high number of unique characters, indicating high permutation complexity.
- **Nested Loop Operations Check**: This check is placed after processing strings to catch scenarios where long strings might lead to costly nested loop operations.
- **Avoidance of Leading Zero Configurations Check**: This check is placed after the permutation loop to catch scenarios with excessive checks for leading zeros that do not lead to valid permutations. 

These check functions will aid in early detection of performance bottlenecks, particularly during fuzz testing or while handling edge cases in input data.

