system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int P = 1e9 + 7, INF = 0x3f3f3f3f;
long long gcd(long long a, long long b) { return b ? gcd(b, a % b) : a; }
long long qpow(long long a, long long n) {
  long long r = 1 % P;
  for (a %= P; n; a = a * a % P, n >>= 1)
    if (n & 1) r = r * a % P;
  return r;
}
long long inv(long long first) {
  return first <= 1 ? 1 : inv(P % first) * (P - P / first) % P;
}
inline int rd() {
  int first = 0;
  char p = getchar();
  while (p < '0' || p > '9') p = getchar();
  while (p >= '0' && p <= '9') first = first * 10 + p - '0', p = getchar();
  return first;
}
const int N = 1e6 + 50;
int n, f[N][10], a[N], vis[N];
char s[N];
int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    scanf("%s", s + 1);
    int m = strlen(s + 1);
    for (int j = 1; j <= m; ++j) ++f[m - j + 1][s[j] - 'a'];
    vis[s[1] - 'a'] = 1;
  }
  for (int i = 0; i <= 9; ++i) a[i] = i;
  long long ans = 1e18;
  do {
    if (vis[a[0]]) continue;
    long long ret = 0, now = 1;
    for (int i = 1; i <= 7; ++i) {
      for (int j = 1; j <= 9; ++j) ret += f[i][a[j]] * j * now;
      now *= 10;
    }
    ans = min(ans, ret);
  } while (next_permutation(a, a + 10));
  printf("%lld\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
jbc
c
fae
ce
fgi
igfg
feh
ied
fe


(G.2) Fast Input

9
jbc
c
fae
ce
fgi
igfg
hef
ied
ef


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int P = 1e9 + 7, INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { return b ? gcd(b, a % b) : a; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long qpow(long long a, long long n) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = 1 % P; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  for (a %= P; n; a = a * a % P, n >>= 1) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (n & 1) r = r * a % P; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long inv(long long first) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return first <= 1 ? 1 : inv(P % first) * (P - P / first) % P; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline int rd() { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int first = 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  char p = getchar(); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (p < '0' || p > '9') p = getchar(); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  while (p >= '0' && p <= '9') first = first * 10 + p - '0', p = getchar(); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return first; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 50; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int n, f[N][10], a[N], vis[N]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
char s[N]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 26 slow_hit_count: 10, fast_hit_count: 10 */
    scanf("%s", s + 1); /* line 27 slow_hit_count: 9, fast_hit_count: 9 */
    int m = strlen(s + 1); /* line 28 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = 1; j <= m; ++j) ++f[m - j + 1][s[j] - 'a']; /* line 29 slow_hit_count: 33, fast_hit_count: 33 */
    vis[s[1] - 'a'] = 1; /* line 30 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 9; ++i) a[i] = i; /* line 32 slow_hit_count: 11, fast_hit_count: 11 */
  long long ans = 1e18; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 34 slow_hit_count: 3628799, fast_hit_count: 3628799 */
    if (vis[a[0]]) continue; /* line 35 slow_hit_count: 3628800, fast_hit_count: 3628800 */
    long long ret = 0, now = 1; /* line 36 slow_hit_count: 2177280, fast_hit_count: 1451520 */
    for (int i = 1; i <= 7; ++i) { /* line 37 slow_hit_count: 17418240, fast_hit_count: 11612160 */
      for (int j = 1; j <= 9; ++j) ret += f[i][a[j]] * j * now; /* line 38 slow_hit_count: 152409600, fast_hit_count: 101606400 */
      now *= 10; /* line 39 slow_hit_count: 15240960, fast_hit_count: 10160640 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, ret); /* line 41 slow_hit_count: 2177280, fast_hit_count: 1451520 */
  } while (next_permutation(a, a + 10)); /* line 42 slow_hit_count: 3628800, fast_hit_count: 3628800 */
  printf("%lld\n", ans); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The main computational work in the program is done within a permutation loop from lines 34 to 42. The hit counts for these lines are extremely high for both the slow and fast inputs: around 3.6 million hits for the permutation loop itself (`line 34`) and even more for the inner operations, especially lines 37, 38, and 39.

2. **Pinpointing Lines with Significant Disparities:**
   - **Line 36 (`long long ret = 0, now = 1;`)** and **line 41 (`ans = min(ans, ret);`)** have different hit counts between slow and fast inputs, suggesting varied paths or decision points.
   - However, lines 37, 38, and 39 see the most significant work being done, with line 38 having the highest number of operations, indicating it as a critical bottleneck due to its nested loops over permutations and calculations.

3. **Interaction with Data Structures:**
   - The array `f` is central to the computation in line 38. It interacts heavily with the permutations of `a` and the weights calculated in the permutations loop.
   - A critical part of the problem is ensuring that the leading digit (`a[0]`) is not zero, which is checked in line 35 and affects subsequent calculations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Permutations and Leading Digit Constraints**
   - **Natural Language Description:** "If the first digit in permutations is restricted, leading to more combinations being invalidated, the program may slow due to additional iterations needed."
   - **Explanation:** Given the constraint that the first digit cannot be zero (`line 35: if (vis[a[0]]) continue;`), more permutations may be skipped, but this actually increases the number of iterations over valid paths. This results in repeated calculations and reinitializations in lines 36 to 41.

2. **Invariant 2: High Interaction with Permutations**
   - **Natural Language Description:** "When the permutations of digits lead to a high number of recalculations with changing digit positions, computation increases, especially when permutations are near exhaustive."
   - **Explanation:** The nested loops in lines 37 and 38 indicate that the code critically depends on iterating over a set number of permutations of ten digits. More permutations mean more computations of the sum of restored numbers.

3. **Invariant 3: Frequency Matrix Utilization and Recurrences**
   - **Natural Language Description:** "If the frequency matrix `f` results in high accumulation values for multiple digits, especially in higher digit places, performance can degrade due to extensive additions."
   - **Explanation:** The matrix `f`, which represents letter frequency times the position weight, dominates computation inside permutations. When this matrix is heavily utilized with significant values, performance drops due to increased computational load in line 38.

By focusing on permutations and matrix operations, these invariants capture the core areas where performance bottlenecks occur, abstracting away from specific input values but directly relating to computation patterns and constraints like digit positioning and frequency utilization within permutations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance-Characterizing Invariants

Here are the C++ code snippets implementing the performance characteristics derived from the natural language invariants:

1. **Invariant 1: Permutations and Leading Digit Constraints**
   ```cpp
   void check_permutation_condition(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive valid permutations due to leading digit constraints!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: High Interaction with Permutations**
   ```cpp
   void check_permutation_interaction(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive computation due to high permutation interaction!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Frequency Matrix Utilization**
   ```cpp
   void check_frequency_utilization(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent large computations in the frequency matrix!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Code

Here is the C++ program with integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int P = 1e9 + 7, INF = 0x3f3f3f3f;

// Functions to check performance bottlenecks
void check_permutation_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive valid permutations due to leading digit constraints!" << endl;
        abort();
    }
}

void check_permutation_interaction(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive computation due to high permutation interaction!" << endl;
        abort();
    }
}

void check_frequency_utilization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent large computations in the frequency matrix!" << endl;
        abort();
    }
}

const int N = 1e6 + 50;
int n, f[N][10], a[N], vis[N];
char s[N];

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf("%s", s + 1);
        int m = strlen(s + 1);
        for (int j = 1; j <= m; ++j) ++f[m - j + 1][s[j] - 'a'];
        vis[s[1] - 'a'] = 1;
    }
    
    for (int i = 0; i <= 9; ++i) a[i] = i;
    long long ans = 1e18;
    
    check_frequency_utilization(n > 900); // Check based on input size and frequency matrix
    
    do {
        check_permutation_condition(vis[a[0]] == 0); // Check during permutation generation
        
        long long ret = 0, now = 1;
        
        for (int i = 1; i <= 7; ++i) {
            for (int j = 1; j <= 9; ++j) ret += f[i][a[j]] * j * now;
            now *= 10;
        }
        
        ans = min(ans, ret);
        
        check_permutation_interaction(ans > 1e16); // Check for excessive work in permutations

    } while (next_permutation(a, a + 10));
    
    printf("%lld\n", ans);
}
```

**Explanation of Inserted Checks:**
- **`check_permutation_condition`:** This check ensures that if the first digit in permutations can be zero, we abort, as this would lead to invalid computations.
- **`check_permutation_interaction`:** Placed after the computation in each permutation loop to detect if excessive interaction is causing performance issues.
- **`check_frequency_utilization`:** Added after input parsing to see if conditions (e.g., high input size) might lead to heavy matrix utilization, ensuring the matrix isn't overly populated.

These checks provide an automated way to ensure that common performance bottlenecks are flagged during execution, potentially aiding in debugging and optimization.

