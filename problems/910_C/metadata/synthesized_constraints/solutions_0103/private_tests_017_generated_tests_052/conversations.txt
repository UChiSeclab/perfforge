system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int per[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, ans = 1E9, cnt[6][10], n, cur, pw;
char s[10];
bool chk[10];
int main() {
  scanf("%d\n", &n);
  while (n--) {
    scanf("%s\n", s + 1);
    chk[s[1] - 'a'] = true;
    for (int i = strlen(s + 1), pw = 0; i >= 1; pw++, i--)
      cnt[pw][s[i] - 'a']++;
  }
  do
    if (!chk[per[0]]) {
      pw = 1;
      cur = 0;
      for (int i = 0; i < 6; pw *= 10, i++)
        for (int j = 0; j < 10; j++) cur += pw * j * cnt[i][per[j]];
      ans = min(ans, cur);
    }
  while (next_permutation(per, per + 10));
  printf("%d", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
jbc
c
fae
ce
fgi
igfg
feh
ied
fe


(G.2) Fast Input

9
jbc
c
fae
ce
fgi
igfg
hef
ied
ef


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int per[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, ans = 1E9, cnt[6][10], n, cur, pw; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char s[10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool chk[10]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d\n", &n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 8 slow_hit_count: 10, fast_hit_count: 10 */
    scanf("%s\n", s + 1); /* line 9 slow_hit_count: 9, fast_hit_count: 9 */
    chk[s[1] - 'a'] = true; /* line 10 slow_hit_count: 9, fast_hit_count: 9 */
    for (int i = strlen(s + 1), pw = 0; i >= 1; pw++, i--) /* line 11 slow_hit_count: 33, fast_hit_count: 33 */
      cnt[pw][s[i] - 'a']++; /* line 12 slow_hit_count: 24, fast_hit_count: 24 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  do /* line 14 slow_hit_count: 3628799, fast_hit_count: 3628799 */
    if (!chk[per[0]]) { /* line 15 slow_hit_count: 3628800, fast_hit_count: 3628800 */
      pw = 1; /* line 16 slow_hit_count: 2177280, fast_hit_count: 1451520 */
      cur = 0; /* line 17 slow_hit_count: 2177280, fast_hit_count: 1451520 */
      for (int i = 0; i < 6; pw *= 10, i++) /* line 18 slow_hit_count: 15240960, fast_hit_count: 10160640 */
        for (int j = 0; j < 10; j++) cur += pw * j * cnt[i][per[j]]; /* line 19 slow_hit_count: 143700480, fast_hit_count: 95800320 */
      ans = min(ans, cur); /* line 20 slow_hit_count: 2177280, fast_hit_count: 1451520 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  while (next_permutation(per, per + 10)); /* line 22 slow_hit_count: 3628800, fast_hit_count: 3628800 */
  printf("%d", ans); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify performance bottlenecks and derive performance-characterizing invariants for the provided C code, let's follow the two-phase process described.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The hit counts for most lines are identical between the slow and fast inputs, suggesting the core computational workload is similar. However, some lines are executed more frequently than others, which may indicate bottlenecks.
   - Lines 18 and 19, which involve nested loops, have significantly higher hit counts, corresponding to permutation generation and calculation.

2. **Pinpointing Lines or Functions with More Hits on Slow Input**:
   - **Lines 18 and 19**: These lines involve nested loops iterating over permutations and digits. They show a substantial computational burden due to their hit counts: `15240960` and `143700480`, respectively, even though they don't differ between the slow and fast runs in order of magnitude. This hints at significant computation within these loops.

3. **Inference on Interaction with Data Structures**:
   - The high hit count in the nested loop on lines 18 and 19 suggests that the permutations are being generated and processed repeatedly. The inefficiency likely arises because these permutations are evaluated in a brute-force manner.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language conditions that describe when the program might enter a slow path. These are framed as performance-characterizing invariants:

1. **Invariant on Permutation and Branching**:
   - Natural Language Description: "If the computation involves iterating over all permutations of 10 distinct elements, and evaluating each permutation with nested loops over each digit place, the program may slow down significantly due to the factorial complexity of permutations."
   - This invariant is relevant because generating and evaluating permutations of 10 elements involves O(10!) operations, which is computationally intensive.

2. **Invariant on Use of Leading Characters**:
   - Natural Language Description: "If many of the processed strings have distinct leading characters, the branching condition to avoid leading zeros in permutations becomes more frequent, potentially amplifying the slowdown."
   - The condition on line 15 where permutations that make numbers lead with zero are skipped could be a factor if there's a wide variety of leading characters, causing many permutations to need checking.

3. **Invariant on Computational Complexity of Nested Loops**:
   - Natural Language Description: "When the number of permutations combined with the number of digits processed in each permutation becomes large, the theoretical inefficiency of evaluating each permutation's sum may lead to noticeable slowdowns."
   - The nested loop structure at lines 18 and 19, involving permutations and digit processing, can lead to significant computation times.

These invariants capture why the given code slows down under certain conditions related to permutation generation and processing logic. By understanding these conditions, a fuzzer or developer can focus on optimizing these particular aspects to alleviate the identified bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has n positive integers a1, a2, ..., an. 

His friend Vasya decided to joke and replaced all digits in Petya's numbers with a letters. He used the lowercase letters of the Latin alphabet from 'a' to 'j' and replaced all digits 0 with one letter, all digits 1 with another letter and so on. For any two different digits Vasya used distinct letters from 'a' to 'j'.

Your task is to restore Petya's numbers. The restored numbers should be positive integers without leading zeros. Since there can be multiple ways to do it, determine the minimum possible sum of all Petya's numbers after the restoration. It is guaranteed that before Vasya's joke all Petya's numbers did not have leading zeros.

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of Petya's numbers.

Each of the following lines contains non-empty string si consisting of lowercase Latin letters from 'a' to 'j' — the Petya's numbers after Vasya's joke. The length of each string does not exceed six characters.

Output

Determine the minimum sum of all Petya's numbers after the restoration. The restored numbers should be positive integers without leading zeros. It is guaranteed that the correct restore (without leading zeros) exists for all given tests.

Examples

Input

3
ab
de
aj


Output

47


Input

5
abcdef
ghij
bdef
accbd
g


Output

136542


Input

3
aa
jj
aa


Output

44

Note

In the first example, you need to replace the letter 'a' with the digit 1, the letter 'b' with the digit 0, the letter 'd' with the digit 2, the letter 'e' with the digit 3, and the letter 'j' with the digit 4. So after the restoration numbers will look like [10, 23, 14]. The sum of them is equal to 47, which is the minimum possible sum of the numbers after the correct restoration.

In the second example the numbers after the restoration can look like: [120468, 3579, 2468, 10024, 3]. 

In the second example the numbers after the restoration can look like: [11, 22, 11]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified, here are the C++ code snippets that implement these checks:

1. **Invariant on Permutation and Branching**:
   - This invariant deals with the complexity of permutations. We'll check if we're dealing with all permutations of 10 elements, which is inherently expensive.

```cpp
void check_permutation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: permutation_invariant triggered - processing all permutations of 10 elements!" << endl;
        abort();
    }
}
```

2. **Invariant on Use of Leading Characters**:
   - This invariant checks if many distinct leading characters increase the complexity of branching and permutation checks.

```cpp
void check_leading_chars_invariant(int leading_chars_count) {
    if (leading_chars_count > 5) {  // Arbitrary threshold for demonstration
        cerr << "Warning: leading_chars_invariant triggered - many distinct leading characters!" << endl;
        abort();
    }
}
```

3. **Invariant on Computational Complexity of Nested Loops**:
   - This invariant checks for the nested loop's computational complexity in evaluating permutations.

```cpp
void check_nested_loop_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: nested_loop_complexity triggered - evaluation of permutations is costly!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Code

We now integrate the checker code snippets into the original C++ program at effective points in the control/data flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

int per[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, ans = 1E9, cnt[6][10], n, cur, pw;
char s[10];
bool chk[10];

void check_permutation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: permutation_invariant triggered - processing all permutations of 10 elements!" << endl;
        abort();
    }
}

void check_leading_chars_invariant(int leading_chars_count) {
    if (leading_chars_count > 5) {  // Arbitrary threshold for demonstration
        cerr << "Warning: leading_chars_invariant triggered - many distinct leading characters!" << endl;
        abort();
    }
}

void check_nested_loop_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: nested_loop_complexity triggered - evaluation of permutations is costly!" << endl;
        abort();
    }
}

int main() {
    scanf("%d\n", &n);
    int leading_chars_count = 0;
    while (n--) {
        scanf("%s\n", s + 1);
        if (!chk[s[1] - 'a']) {
            chk[s[1] - 'a'] = true;
            leading_chars_count++;
        }
        for (int i = strlen(s + 1), pw = 0; i >= 1; pw++, i--)
            cnt[pw][s[i] - 'a']++;
    }
    
    // Check leading characters invariant before permutation processing
    check_leading_chars_invariant(leading_chars_count);
    
    int permutation_count = 0;
    do {
        permutation_count++;
        if (!chk[per[0]]) {
            pw = 1;
            cur = 0;
            for (int i = 0; i < 6; pw *= 10, i++)
                for (int j = 0; j < 10; j++) cur += pw * j * cnt[i][per[j]];
            ans = min(ans, cur);
        }
    } while (next_permutation(per, per + 10));
    
    // Check permutation invariant after the loop
    check_permutation_invariant(permutation_count == 3628800); // 10! permutations
    
    // Check nested loop complexity after permutations are generated
    check_nested_loop_complexity(permutation_count > 1000000); // Arbitrary threshold

    printf("%d", ans);
}
```

### Explanation

- **Leading Characters Check:** Added before starting permutation processing to ensure not too many distinct leading characters exist.
- **Permutation Invariant Check:** Placed after generating permutations to check if all 10! permutations are processed.
- **Nested Loop Complexity Check:** Evaluates if the nested loop complexity becomes significant after permutations are evaluated.

These checks are strategically placed to not add significant overhead during tight loops and are implemented to catch potential performance bottlenecks effectively.

