system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using i64 = int64_t;
using ui64 = uint64_t;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  vector<int> a(n);
  vector<int> cnt(2);
  for (int& x : a) {
    cin >> x;
  }
  cnt[0] = n / 2;
  cnt[1] = (n + 1) / 2;
  int const INF = n + 20;
  vector<vector<vector<vector<int>>>> dp(
      n + 1,
      vector<vector<vector<int>>>(
          cnt[0] + 2, vector<vector<int>>(cnt[1] + 2, vector<int>(2, INF))));
  dp[0][0][0][0] = dp[0][0][0][1] = 0;
  auto relax = [&](int& x, int y) {
    if (y < x) {
      x = y;
      return true;
    }
    return false;
  };
  for (int i = 0; i < n; ++i) {
    for (int x = 0; x <= cnt[0]; ++x) {
      for (int y = 0; y <= cnt[1]; ++y) {
        for (int par : {0, 1}) {
          for (int new_par : {0, 1}) {
            if (dp[i][x][y][par] == INF) {
              continue;
            }
            auto new_x = x;
            auto new_y = y;
            int add = 0;
            if (a[i] > 0) {
              if (new_par != a[i] % 2) {
                continue;
              }
              if (a[i] % 2 == 0) {
                new_x++;
                add += par;
              } else {
                new_y++;
                add += !par;
              }
            } else {
              if (!new_par) {
                new_x++;
                add += par;
              } else {
                new_y++;
                add += !par;
              }
            }
            relax(dp[i + 1][new_x][new_y][new_par], dp[i][x][y][par] + add);
          }
        }
      }
    }
  }
  int ans = INF;
  for (int p : {0, 1}) {
    relax(ans, dp.back()[cnt[0]][cnt[1]][p]);
  }
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using i64 = int64_t; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ui64 = uint64_t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> cnt(2); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
  for (int& x : a) { /* line 12 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> x; /* line 13 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cnt[0] = n / 2; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cnt[1] = (n + 1) / 2; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int const INF = n + 20; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<vector<vector<int>>>> dp( /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      n + 1, /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
      vector<vector<vector<int>>>( /* line 20 slow_hit_count: 3, fast_hit_count: 3 */
          cnt[0] + 2, vector<vector<int>>(cnt[1] + 2, vector<int>(2, INF)))); /* line 21 slow_hit_count: 3, fast_hit_count: 3 */
  dp[0][0][0][0] = dp[0][0][0][1] = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  auto relax = [&](int& x, int y) { /* line 23 slow_hit_count: 10002, fast_hit_count: 6 */
    if (y < x) { /* line 24 slow_hit_count: 10002, fast_hit_count: 6 */
      x = y; /* line 25 slow_hit_count: 6051, fast_hit_count: 4 */
      return true; /* line 26 slow_hit_count: 6051, fast_hit_count: 4 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return false; /* line 28 slow_hit_count: 3951, fast_hit_count: 2 */
  }; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 30 slow_hit_count: 101, fast_hit_count: 2 */
    for (int x = 0; x <= cnt[0]; ++x) { /* line 31 slow_hit_count: 5200, fast_hit_count: 2 */
      for (int y = 0; y <= cnt[1]; ++y) { /* line 32 slow_hit_count: 265200, fast_hit_count: 3 */
        for (int par : {0, 1}) { /* line 33 slow_hit_count: 780300, fast_hit_count: 6 */
          for (int new_par : {0, 1}) { /* line 34 slow_hit_count: 1560600, fast_hit_count: 12 */
            if (dp[i][x][y][par] == INF) { /* line 35 slow_hit_count: 1040400, fast_hit_count: 8 */
              continue; /* line 36 slow_hit_count: 1030362, fast_hit_count: 4 */
            } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
            auto new_x = x; /* line 38 slow_hit_count: 10038, fast_hit_count: 4 */
            auto new_y = y; /* line 39 slow_hit_count: 10038, fast_hit_count: 4 */
            int add = 0; /* line 40 slow_hit_count: 10038, fast_hit_count: 4 */
            if (a[i] > 0) { /* line 41 slow_hit_count: 10038, fast_hit_count: 4 */
              if (new_par != a[i] % 2) { /* line 42 slow_hit_count: 76, fast_hit_count: 0 */
                continue; /* line 43 slow_hit_count: 38, fast_hit_count: 0 */
              } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
              if (a[i] % 2 == 0) { /* line 45 slow_hit_count: 38, fast_hit_count: 0 */
                new_x++; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
                add += par; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
              } else { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
                new_y++; /* line 49 slow_hit_count: 38, fast_hit_count: 0 */
                add += !par; /* line 50 slow_hit_count: 38, fast_hit_count: 0 */
              } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
            } else { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
              if (!new_par) { /* line 53 slow_hit_count: 9962, fast_hit_count: 4 */
                new_x++; /* line 54 slow_hit_count: 4981, fast_hit_count: 2 */
                add += par; /* line 55 slow_hit_count: 4981, fast_hit_count: 2 */
              } else { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
                new_y++; /* line 57 slow_hit_count: 4981, fast_hit_count: 2 */
                add += !par; /* line 58 slow_hit_count: 4981, fast_hit_count: 2 */
              } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
            relax(dp[i + 1][new_x][new_y][new_par], dp[i][x][y][par] + add); /* line 61 slow_hit_count: 10000, fast_hit_count: 4 */
          } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = INF; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  for (int p : {0, 1}) { /* line 68 slow_hit_count: 3, fast_hit_count: 3 */
    relax(ans, dp.back()[cnt[0]][cnt[1]][p]); /* line 69 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon reviewing the hit counts from both the slow and fast inputs, several observations can be made:

1. **Dynamic Programming Table Initialization and Updates**:
   - The line `relax(dp[i + 1][new_x][new_y][new_par], dp[i][x][y][par] + add);` (line 61) is executed 10,000 times for the slow input compared to 4 times for the fast input. This indicates that the update of DP states is a significant factor in the execution time.
   - The nested loops over `i`, `x`, `y`, `par`, and `new_par` (lines 30-34) contribute to this high hit count due to their combinatorial nature, particularly when `n` is large.

2. **Condition Checks within Nested Loops**:
   - The condition `if (dp[i][x][y][par] == INF)` (line 35) and subsequent checks such as `if (a[i] > 0)` (line 41) and `if (new_par != a[i] % 2)` (line 42) are evaluated frequently, indicating potential inefficiencies when dealing with large values of `n`.

3. **High Hit Count on Relaxation Function**:
   - The `relax` function is called extensively (10,002 times for slow input vs. 6 for fast input), showing that modifying DP table entries is a core operation contributing to the slow execution.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the above observations, here are some performance-characterizing invariants in natural language:

1. **Dynamic Programming State Explosion**:
   - **Invariant**: "If the number of potential states in the dynamic programming solution grows large due to a high number of unset bulbs, the complexity of updating DP states can cause a slow execution path."
   - **Explanation**: This invariant captures the idea that with more `0`s (unset bulbs), the algorithm evaluates many possible configurations, leading to a combinatorial explosion in state updates.

2. **Nested Loop Complexity**:
   - **Invariant**: "When `n` is large and the number of unset bulbs (`0` entries) is high, the nested loops for DP table updates become a bottleneck, as they iterate over numerous permutations of bulb configurations."
   - **Explanation**: This highlights that the loop complexity is exacerbated by high `n` values and many unset positions, which increase the number of potential solutions to consider.

3. **Condition Evaluation Overhead**:
   - **Invariant**: "The performance may degrade when there are multiple consecutive unset bulbs, leading to repeated evaluations of conditions within nested loops."
   - **Explanation**: This invariant reflects the slowdown due to frequent evaluations of conditional statements when trying to determine valid configurations for consecutive unset positions.

This set of invariants helps to diagnose inefficiencies in the program by focusing on the combinatorial nature of the dynamic programming approach, the implications of high `n` values, and the presence of many unset bulbs in the input. These factors collectively lead the program to explore a large search space, which is computationally expensive.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Here are C++ checker code snippets that implement the performance-characterizing invariants derived in Phase 2:

1. **Dynamic Programming State Explosion Invariant**:
    ```cpp
    void check_dp_state_explosion(int n, int zero_count) {
        if (zero_count > n / 2) {
            cerr << "Warning: DP state explosion triggered - too many unset bulbs!" << endl;
            abort();
        }
    }
    ```

2. **Nested Loop Complexity Invariant**:
    ```cpp
    void check_nested_loop_complexity(int n, int zero_count) {
        if (n == 100 && zero_count > n / 2) {
            cerr << "Warning: Nested loop complexity triggered - high n with many unset bulbs!" << endl;
            abort();
        }
    }
    ```

3. **Condition Evaluation Overhead Invariant**:
    ```cpp
    void check_condition_evaluation_overhead(int consecutive_zeros) {
        if (consecutive_zeros > 20) {
            cerr << "Warning: Condition evaluation overhead triggered - too many consecutive unset bulbs!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrating Checker Code into the Original Program

Now, I will integrate these checker functions into the C++ program to monitor potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
using i64 = int64_t;
using ui64 = uint64_t;

// Checkers for performance invariants
void check_dp_state_explosion(int n, int zero_count) {
    if (zero_count > n / 2) {
        cerr << "Warning: DP state explosion triggered - too many unset bulbs!" << endl;
        abort();
    }
}

void check_nested_loop_complexity(int n, int zero_count) {
    if (n == 100 && zero_count > n / 2) {
        cerr << "Warning: Nested loop complexity triggered - high n with many unset bulbs!" << endl;
        abort();
    }
}

void check_condition_evaluation_overhead(int consecutive_zeros) {
    if (consecutive_zeros > 20) {
        cerr << "Warning: Condition evaluation overhead triggered - too many consecutive unset bulbs!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    vector<int> a(n);
    vector<int> cnt(2);
    int zero_count = 0;
    int consecutive_zeros = 0;
    for (int& x : a) {
        cin >> x;
        if (x == 0) {
            zero_count++;
            consecutive_zeros++;
        } else {
            consecutive_zeros = 0;
        }
    }
    
    // Place checks after input processing
    check_dp_state_explosion(n, zero_count);
    check_nested_loop_complexity(n, zero_count);
    check_condition_evaluation_overhead(consecutive_zeros);

    cnt[0] = n / 2;
    cnt[1] = (n + 1) / 2;
    int const INF = n + 20;
    vector<vector<vector<vector<int>>>> dp(
        n + 1,
        vector<vector<vector<int>>>(
            cnt[0] + 2, vector<vector<int>>(cnt[1] + 2, vector<int>(2, INF))));
    dp[0][0][0][0] = dp[0][0][0][1] = 0;
    auto relax = [&](int& x, int y) {
        if (y < x) {
            x = y;
            return true;
        }
        return false;
    };
    for (int i = 0; i < n; ++i) {
        for (int x = 0; x <= cnt[0]; ++x) {
            for (int y = 0; y <= cnt[1]; ++y) {
                for (int par : {0, 1}) {
                    for (int new_par : {0, 1}) {
                        if (dp[i][x][y][par] == INF) {
                            continue;
                        }
                        auto new_x = x;
                        auto new_y = y;
                        int add = 0;
                        if (a[i] > 0) {
                            if (new_par != a[i] % 2) {
                                continue;
                            }
                            if (a[i] % 2 == 0) {
                                new_x++;
                                add += par;
                            } else {
                                new_y++;
                                add += !par;
                            }
                        } else {
                            if (!new_par) {
                                new_x++;
                                add += par;
                            } else {
                                new_y++;
                                add += !par;
                            }
                        }
                        relax(dp[i + 1][new_x][new_y][new_par], dp[i][x][y][par] + add);
                    }
                }
            }
        }
    }
    int ans = INF;
    for (int p : {0, 1}) {
        relax(ans, dp.back()[cnt[0]][cnt[1]][p]);
    }
    cout << ans << '\n';
    return 0;
}
```

### Explanation:
- **Performance Checks**: The checkers are inserted after input processing to evaluate the potential performance bottlenecks based on the characteristics of the input before proceeding to the main logic.
- **Thresholds**: The chosen thresholds (e.g., `zero_count > n / 2`, `consecutive_zeros > 20`) aim to detect scenarios that could exacerbate the combinatorial nature of the problem, leading to inefficiencies.
- **Placement**: Placing these checks right after the input processing ensures that we catch problematic cases early, reducing unnecessary computation and providing feedback for optimization.

