system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("O3")
#pragma GCC target(sse, sse2, sse3, popcnt, tune = native)
using namespace std;
const long long inf = 1e9 + 47;
long long n;
vector<long long> val;
vector<vector<vector<vector<long long> > > > dp;
void read() {
  cin >> n;
  val.resize(n);
  vector<long long> odd(2, 0);
  odd[0] = n / 2;
  odd[1] = n - odd[0];
  for (long long i = 0; i < n; ++i) {
    cin >> val[i];
    if (val[i] == 0)
      val[i] = -1;
    else {
      val[i] %= 2;
      odd[val[i]]--;
    }
  }
  long long free = 0;
  dp.resize(n + 1, vector<vector<vector<long long> > >(
                       2, vector<vector<long long> >(
                              n + 1, vector<long long>(n + 1, inf))));
  if (val[0] == -1) {
    dp[0][0][1][0] = 0;
    dp[0][1][0][1] = 0;
  } else {
    if (val[0] == 0)
      dp[0][0][1][0] = 0;
    else
      dp[0][1][0][1] = 0;
  }
  for (long long i = 1; i < n; ++i) {
    if (val[i] == -1) {
      for (long long zero = 0; zero < n; ++zero) {
        for (long long one = 0; one < n; ++one) {
          if (zero != 0) {
            dp[i][0][zero][one] =
                min(dp[i][0][zero][one], dp[i - 1][0][zero - 1][one]);
          }
          if (zero != 0) {
            dp[i][0][zero][one] =
                min(dp[i][0][zero][one], dp[i - 1][1][zero - 1][one] + 1);
          }
        }
      }
      for (long long zero = 0; zero < n; ++zero) {
        for (long long one = 0; one < n; ++one) {
          if (one != 0) {
            dp[i][1][zero][one] =
                min(dp[i][1][zero][one], dp[i - 1][0][zero][one - 1] + 1);
          }
          if (one != 0) {
            dp[i][1][zero][one] =
                min(dp[i][1][zero][one], dp[i - 1][1][zero][one - 1]);
          }
        }
      }
    } else {
      long long a = 0, b = 0;
      if (val[i] == 0)
        a++;
      else
        b++;
      for (long long zero = 0; zero < n; ++zero) {
        for (long long one = 0; one < n; ++one) {
          if (zero - a >= 0 && one - b >= 0) {
            long long add = val[i];
            dp[i][val[i]][zero][one] =
                min(dp[i][val[i]][zero][one],
                    dp[i - 1][0][zero - a][one - b] + add);
          }
          if (zero - a >= 0 && one - b >= 0) {
            long long add = val[i] ^ 1;
            dp[i][val[i]][zero][one] =
                min(dp[i][val[i]][zero][one],
                    dp[i - 1][1][zero - a][one - b] + add);
          }
        }
      }
    }
  }
  long long a = n / 2, b = n - a;
  cout << min(dp[n - 1][0][a][b], dp[n - 1][1][a][b]) << endl;
}
void solve() {}
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  long long t = 1;
  while (t--) {
    read();
    solve();
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("O3") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target(sse, sse2, sse3, popcnt, tune = native) /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1e9 + 47; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> val; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<vector<vector<long long> > > > dp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void read() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  val.resize(n); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> odd(2, 0); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  odd[0] = n / 2; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  odd[1] = n - odd[0]; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) { /* line 15 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> val[i]; /* line 16 slow_hit_count: 100, fast_hit_count: 1 */
    if (val[i] == 0) /* line 17 slow_hit_count: 100, fast_hit_count: 1 */
      val[i] = -1; /* line 18 slow_hit_count: 99, fast_hit_count: 1 */
    else { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      val[i] %= 2; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
      odd[val[i]]--; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  long long free = 0; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  dp.resize(n + 1, vector<vector<vector<long long> > >( /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
                       2, vector<vector<long long> >( /* line 26 slow_hit_count: 3, fast_hit_count: 3 */
                              n + 1, vector<long long>(n + 1, inf)))); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  if (val[0] == -1) { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    dp[0][0][1][0] = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    dp[0][1][0][1] = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    if (val[0] == 0) /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      dp[0][0][1][0] = 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      dp[0][1][0][1] = 0; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i < n; ++i) { /* line 37 slow_hit_count: 100, fast_hit_count: 1 */
    if (val[i] == -1) { /* line 38 slow_hit_count: 99, fast_hit_count: 0 */
      for (long long zero = 0; zero < n; ++zero) { /* line 39 slow_hit_count: 9898, fast_hit_count: 0 */
        for (long long one = 0; one < n; ++one) { /* line 40 slow_hit_count: 989800, fast_hit_count: 0 */
          if (zero != 0) { /* line 41 slow_hit_count: 980000, fast_hit_count: 0 */
            dp[i][0][zero][one] = /* line 42 slow_hit_count: 970200, fast_hit_count: 0 */
                min(dp[i][0][zero][one], dp[i - 1][0][zero - 1][one]); /* line 43 slow_hit_count: 970200, fast_hit_count: 0 */
          } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
          if (zero != 0) { /* line 45 slow_hit_count: 980000, fast_hit_count: 0 */
            dp[i][0][zero][one] = /* line 46 slow_hit_count: 970200, fast_hit_count: 0 */
                min(dp[i][0][zero][one], dp[i - 1][1][zero - 1][one] + 1); /* line 47 slow_hit_count: 1940400, fast_hit_count: 0 */
          } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long zero = 0; zero < n; ++zero) { /* line 51 slow_hit_count: 9898, fast_hit_count: 0 */
        for (long long one = 0; one < n; ++one) { /* line 52 slow_hit_count: 989800, fast_hit_count: 0 */
          if (one != 0) { /* line 53 slow_hit_count: 980000, fast_hit_count: 0 */
            dp[i][1][zero][one] = /* line 54 slow_hit_count: 970200, fast_hit_count: 0 */
                min(dp[i][1][zero][one], dp[i - 1][0][zero][one - 1] + 1); /* line 55 slow_hit_count: 1940400, fast_hit_count: 0 */
          } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
          if (one != 0) { /* line 57 slow_hit_count: 980000, fast_hit_count: 0 */
            dp[i][1][zero][one] = /* line 58 slow_hit_count: 970200, fast_hit_count: 0 */
                min(dp[i][1][zero][one], dp[i - 1][1][zero][one - 1]); /* line 59 slow_hit_count: 970200, fast_hit_count: 0 */
          } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      long long a = 0, b = 0; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      if (val[i] == 0) /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
        a++; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        b++; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long zero = 0; zero < n; ++zero) { /* line 69 slow_hit_count: 101, fast_hit_count: 0 */
        for (long long one = 0; one < n; ++one) { /* line 70 slow_hit_count: 10100, fast_hit_count: 0 */
          if (zero - a >= 0 && one - b >= 0) { /* line 71 slow_hit_count: 10000, fast_hit_count: 0 */
            long long add = val[i]; /* line 72 slow_hit_count: 9900, fast_hit_count: 0 */
            dp[i][val[i]][zero][one] = /* line 73 slow_hit_count: 9900, fast_hit_count: 0 */
                min(dp[i][val[i]][zero][one], /* line 74 slow_hit_count: 19800, fast_hit_count: 0 */
                    dp[i - 1][0][zero - a][one - b] + add); /* line 75 slow_hit_count: 29700, fast_hit_count: 0 */
          } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
          if (zero - a >= 0 && one - b >= 0) { /* line 77 slow_hit_count: 10000, fast_hit_count: 0 */
            long long add = val[i] ^ 1; /* line 78 slow_hit_count: 9900, fast_hit_count: 0 */
            dp[i][val[i]][zero][one] = /* line 79 slow_hit_count: 9900, fast_hit_count: 0 */
                min(dp[i][val[i]][zero][one], /* line 80 slow_hit_count: 19800, fast_hit_count: 0 */
                    dp[i - 1][1][zero - a][one - b] + add); /* line 81 slow_hit_count: 29700, fast_hit_count: 0 */
          } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  long long a = n / 2, b = n - a; /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  cout << min(dp[n - 1][0][a][b], dp[n - 1][1][a][b]) << endl; /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
void solve() {} /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  while (t--) { /* line 95 slow_hit_count: 2, fast_hit_count: 2 */
    read(); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
    solve(); /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 99 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The hit counts between the fast and slow runs are significantly different, especially in the nested loops within the `read` function starting at line 37. These loops, which iterate through possible placements of bulbs, are heavily hit during the slow input run.

2. **Pinpoint Lines with More Hits:**
   - Lines 39-81 are particularly expensive, with each line being executed nearly a million times in the slow run. These lines are part of nested loops that explore possible configurations for placing bulbs back on the garland.

3. **Data Structures and Loops Interaction:**
   - The inefficiency arises from the dynamic programming table `dp` being updated repeatedly within tightly nested loops. These loops explore multiple combinations of "zero" and "one" placements for each undecided position in the array of bulbs, which is computationally intensive when `n` is large, such as 100.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Complexity of Nested Loops**
   - **Natural Language Description:** The program's performance degrades significantly when the number of undecided bulbs (represented by 0s in the input) is high, and the algorithm iterates over many possible configurations for placing these bulbs. This results in extensive computations for the dynamic programming matrix, especially because of the quadratically nested loops.
   - **Suggested Threshold:** When the number of undecided bulbs approaches `n`, especially for higher values of `n` (e.g., near the upper constraint of 100).

2. **Invariant 2: Dynamic Programming State Explosion**
   - **Natural Language Description:** The time complexity dramatically increases when the dynamic programming table has to be recalculated for a high number of states, particularly when the number of 0s in the input is close to half of the total bulbs, leading to a high number of possible "zero" and "one" placements to evaluate.
   - **Suggested Threshold:** When undecided positions exceed `n/2`, causing a significant number of permutations of parities to be checked.

3. **Invariant 3: Parity Configuration Pressure**
   - **Natural Language Description:** The algorithm experiences performance pressure when there is a need to balance the number of odd and even bulbs from a large pool of undecided bulbs, causing numerous iterations to attempt minimizing complexity with near-equal counts of odd and even bulbs.
   - **Suggested Threshold:** When the difference in available parity (i.e., number of odd minus even or even minus odd) is minimal, forcing extensive checks for balancing.

These invariants help to understand the conditions under which the program's complexity explodes, focusing on the recursive-like exploration of configurations driven by the dynamic programming approach. By identifying these patterns, we can better anticipate and possibly re-structure the algorithm to handle such cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Based on the natural language invariants derived previously, below are the C++ code snippets implementing runtime checks for them.

1. **Checker for Nested Loop and Undecided Bulbs:**
   - **Code:**
   ```cpp
   void check_nested_loop_invariant(int n, int zeroCount) {
       if (zeroCount > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered due to high count of undecided bulbs leading to excessive nested loop operations!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Dynamic Programming State Explosion:**
   - **Code:**
   ```cpp
   void check_dp_state_explosion_invariant(int n, int zeroCount) {
       if (zeroCount > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered due to potential DP state explosion!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Parity Configuration Pressure:**
   - **Code:**
   ```cpp
   void check_parity_configuration_pressure(int oddCount, int evenCount) {
       if (abs(oddCount - evenCount) < 3) { // Arbitrary threshold for balance pressure
           cerr << "Warning: Performance bottleneck condition triggered due to parity configuration pressure!" << endl;
           abort();
       }
   }
   ```

These checks are useful for identifying conditions that may lead to performance bottlenecks during execution.

### Phase 4: Integrate Checks into the C++ Program

Below is the instrumented version of the original C++ program with the checker functions integrated at appropriate points to capture potential performance issues.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("O3")
#pragma GCC target(sse, sse2, sse3, popcnt, tune = native)
using namespace std;
const long long inf = 1e9 + 47;
long long n;
vector<long long> val;
vector<vector<vector<vector<long long> > > > dp;

// Checker implementations
void check_nested_loop_invariant(int n, int zeroCount) {
    if (zeroCount > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high count of undecided bulbs leading to excessive nested loop operations!" << endl;
        abort();
    }
}

void check_dp_state_explosion_invariant(int n, int zeroCount) {
    if (zeroCount > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to potential DP state explosion!" << endl;
        abort();
    }
}

void check_parity_configuration_pressure(int oddCount, int evenCount) {
    if (abs(oddCount - evenCount) < 3) { // Arbitrary threshold for balance pressure
        cerr << "Warning: Performance bottleneck condition triggered due to parity configuration pressure!" << endl;
        abort();
    }
}

void read() {
    cin >> n;
    val.resize(n);
    vector<long long> odd(2, 0);
    odd[0] = n / 2;
    odd[1] = n - odd[0];
    int zeroCount = 0;
    for (long long i = 0; i < n; ++i) {
        cin >> val[i];
        if (val[i] == 0) {
            val[i] = -1;
            zeroCount++;
        } else {
            val[i] %= 2;
            odd[val[i]]--;
        }
    }
    
    // Insert check after reading input to catch potential performance issues
    check_nested_loop_invariant(n, zeroCount);
    check_dp_state_explosion_invariant(n, zeroCount);
    check_parity_configuration_pressure(odd[0], odd[1]);
    
    long long free = 0;
    dp.resize(n + 1, vector<vector<vector<long long> > >(
                       2, vector<vector<long long> >(
                              n + 1, vector<long long>(n + 1, inf))));
    if (val[0] == -1) {
        dp[0][0][1][0] = 0;
        dp[0][1][0][1] = 0;
    } else {
        if (val[0] == 0)
            dp[0][0][1][0] = 0;
        else
            dp[0][1][0][1] = 0;
    }
    for (long long i = 1; i < n; ++i) {
        if (val[i] == -1) {
            for (long long zero = 0; zero < n; ++zero) {
                for (long long one = 0; one < n; ++one) {
                    if (zero != 0) {
                        dp[i][0][zero][one] =
                            min(dp[i][0][zero][one], dp[i - 1][0][zero - 1][one]);
                    }
                    if (zero != 0) {
                        dp[i][0][zero][one] =
                            min(dp[i][0][zero][one], dp[i - 1][1][zero - 1][one] + 1);
                    }
                }
            }
            for (long long zero = 0; zero < n; ++zero) {
                for (long long one = 0; one < n; ++one) {
                    if (one != 0) {
                        dp[i][1][zero][one] =
                            min(dp[i][1][zero][one], dp[i - 1][0][zero][one - 1] + 1);
                    }
                    if (one != 0) {
                        dp[i][1][zero][one] =
                            min(dp[i][1][zero][one], dp[i - 1][1][zero][one - 1]);
                    }
                }
            }
        } else {
            long long a = 0, b = 0;
            if (val[i] == 0)
                a++;
            else
                b++;
            for (long long zero = 0; zero < n; ++zero) {
                for (long long one = 0; one < n; ++one) {
                    if (zero - a >= 0 && one - b >= 0) {
                        long long add = val[i];
                        dp[i][val[i]][zero][one] =
                            min(dp[i][val[i]][zero][one],
                                dp[i - 1][0][zero - a][one - b] + add);
                    }
                    if (zero - a >= 0 && one - b >= 0) {
                        long long add = val[i] ^ 1;
                        dp[i][val[i]][zero][one] =
                            min(dp[i][val[i]][zero][one],
                                dp[i - 1][1][zero - a][one - b] + add);
                    }
                }
            }
        }
    }
    long long a = n / 2, b = n - a;
    cout << min(dp[n - 1][0][a][b], dp[n - 1][1][a][b]) << endl;
}

void solve() {}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long long t = 1;
    while (t--) {
        read();
        solve();
    }
}
```

### Explanation of Integrated Checks

- **`check_nested_loop_invariant`:** This function is called after reading the input to ensure that if more than half of the bulb positions are undecided, it warns about potential excessive computations due to nested loops.
  
- **`check_dp_state_explosion_invariant`:** Placed at the same point as above, it warns about potential explosion in the dynamic programming state space.

- **`check_parity_configuration_pressure`:** This function checks if the number of odd and even bulbs is roughly equal, which could indicate performance pressure due to balancing requirements.

