system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class C>
void min_self(C &a, C b) {
  a = min(a, b);
}
template <class C>
void max_self(C &a, C b) {
  a = max(a, b);
}
long long mod(long long n, long long m = 1000000007) {
  n %= m, n += m, n %= m;
  return n;
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM =
        chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};
unordered_map<long long, int, custom_hash> safe_map;
const int MAXN = 105;
const int LOGN = 21;
const long long INF = 1e14;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};
int dp[MAXN][MAXN][MAXN][2];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  vector<int> p(n + 1);
  set<int> st;
  for (int i = 1; i <= n; i++) st.insert(i);
  for (int i = 1; i <= n; i++) {
    cin >> p[i];
    st.erase(p[i]);
  }
  for (int i = 0; i <= n; i++)
    for (int j = 0; j <= n; j++)
      for (int k = 0; k <= n; k++) dp[i][j][k][0] = dp[i][j][k][1] = 1000000007;
  int even = 0, odd = 0;
  for (auto x : st) {
    if (x % 2 == 0)
      even++;
    else
      odd++;
  }
  dp[0][even][odd][0] = 0;
  dp[0][even][odd][1] = 0;
  for (int i = 1; i <= n; i++) {
    if (p[i] != 0) {
      int now = p[i] % 2;
      for (int ev = 0; ev <= n; ev++) {
        for (int od = 0; od <= n; od++) {
          for (int j = 0; j <= 1; j++) {
            dp[i][ev][od][now] = min(dp[i][ev][od][now],
                                     dp[i - 1][ev][od][j] + (j == now ? 0 : 1));
          }
        }
      }
    } else {
      for (int ev = 0; ev <= n; ev++) {
        for (int od = 0; od <= n; od++) {
          if (ev > 0) {
            dp[i][ev - 1][od][0] =
                min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][0]);
            dp[i][ev - 1][od][0] =
                min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][1] + 1);
          }
          if (od > 0) {
            dp[i][ev][od - 1][1] =
                min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][0] + 1);
            dp[i][ev][od - 1][1] =
                min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][1]);
          }
        }
      }
    }
  }
  cout << min(dp[n][0][0][0], dp[n][0][0][1]);
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class C> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void min_self(C &a, C b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  a = min(a, b); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class C> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void max_self(C &a, C b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  a = max(a, b); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long mod(long long n, long long m = 1000000007) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  n %= m, n += m, n %= m; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return n; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
struct custom_hash { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  static uint64_t splitmix64(uint64_t x) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    x += 0x9e3779b97f4a7c15; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return x ^ (x >> 31); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  size_t operator()(uint64_t x) const { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    static const uint64_t FIXED_RANDOM = /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        chrono::steady_clock::now().time_since_epoch().count(); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    return splitmix64(x + FIXED_RANDOM); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, int, custom_hash> safe_map; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 105; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
const int LOGN = 21; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e14; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {1, 0, -1, 0}; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {0, 1, 0, -1}; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int dp[MAXN][MAXN][MAXN][2]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> p(n + 1); /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
  set<int> st; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) st.insert(i); /* line 44 slow_hit_count: 101, fast_hit_count: 2 */
  for (int i = 1; i <= n; i++) { /* line 45 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> p[i]; /* line 46 slow_hit_count: 100, fast_hit_count: 1 */
    st.erase(p[i]); /* line 47 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; i++) /* line 49 slow_hit_count: 102, fast_hit_count: 3 */
    for (int j = 0; j <= n; j++) /* line 50 slow_hit_count: 10302, fast_hit_count: 6 */
      for (int k = 0; k <= n; k++) dp[i][j][k][0] = dp[i][j][k][1] = 1000000007; /* line 51 slow_hit_count: 1040502, fast_hit_count: 12 */
  int even = 0, odd = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto x : st) { /* line 53 slow_hit_count: 100, fast_hit_count: 2 */
    if (x % 2 == 0) /* line 54 slow_hit_count: 99, fast_hit_count: 1 */
      even++; /* line 55 slow_hit_count: 50, fast_hit_count: 0 */
    else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      odd++; /* line 57 slow_hit_count: 49, fast_hit_count: 1 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][even][odd][0] = 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0][even][odd][1] = 0; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 61 slow_hit_count: 101, fast_hit_count: 2 */
    if (p[i] != 0) { /* line 62 slow_hit_count: 100, fast_hit_count: 1 */
      int now = p[i] % 2; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
      for (int ev = 0; ev <= n; ev++) { /* line 64 slow_hit_count: 102, fast_hit_count: 0 */
        for (int od = 0; od <= n; od++) { /* line 65 slow_hit_count: 10302, fast_hit_count: 0 */
          for (int j = 0; j <= 1; j++) { /* line 66 slow_hit_count: 30603, fast_hit_count: 0 */
            dp[i][ev][od][now] = min(dp[i][ev][od][now], /* line 67 slow_hit_count: 40804, fast_hit_count: 0 */
                                     dp[i - 1][ev][od][j] + (j == now ? 0 : 1)); /* line 68 slow_hit_count: 20402, fast_hit_count: 0 */
          } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      for (int ev = 0; ev <= n; ev++) { /* line 73 slow_hit_count: 10098, fast_hit_count: 3 */
        for (int od = 0; od <= n; od++) { /* line 74 slow_hit_count: 1019898, fast_hit_count: 6 */
          if (ev > 0) { /* line 75 slow_hit_count: 1009899, fast_hit_count: 4 */
            dp[i][ev - 1][od][0] = /* line 76 slow_hit_count: 999900, fast_hit_count: 2 */
                min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][0]); /* line 77 slow_hit_count: 999900, fast_hit_count: 2 */
            dp[i][ev - 1][od][0] = /* line 78 slow_hit_count: 999900, fast_hit_count: 2 */
                min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][1] + 1); /* line 79 slow_hit_count: 999900, fast_hit_count: 2 */
          } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
          if (od > 0) { /* line 81 slow_hit_count: 1009899, fast_hit_count: 4 */
            dp[i][ev][od - 1][1] = /* line 82 slow_hit_count: 999900, fast_hit_count: 2 */
                min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][0] + 1); /* line 83 slow_hit_count: 999900, fast_hit_count: 2 */
            dp[i][ev][od - 1][1] = /* line 84 slow_hit_count: 999900, fast_hit_count: 2 */
                min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][1]); /* line 85 slow_hit_count: 999900, fast_hit_count: 2 */
          } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  cout << min(dp[n][0][0][0], dp[n][0][0][1]); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n"; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information, let's analyze the C++ program and deduce performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**: 
   - The line `dp[i][j][k][0] = dp[i][j][k][1] = 1000000007;` on line 51 is hit significantly more often in the slow input compared to the fast input (1,040,502 vs. 12). This is a hint that initializing the DP table with nested loops is expensive.
   - Loop structures from lines 61 to 90 also show a high number of hits in the slow run, specifically indicating where dynamic programming (DP) state transitions happen.

2. **Data Structures and Loops**:
   - The high frequency of hits on lines within nested loops suggests that these are points of inefficiency, especially with initializing and updating the DP table. This inefficient processing is likely exacerbated by the maximum constraints of n.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and program logic, below are the natural language performance invariants:

1. **DP Initialization Invariant**:
   - **Description**: "When the number of bulbs (`n`) is large, initializing the dynamic programming table becomes costly due to the cubic nature of the nested loops."
   - **Trigger Condition**: This invariant is triggered when `n` approaches its maximum constraint, leading to a cubic number of operations for DP initialization.

2. **DP State Transition Invariant**:
   - **Description**: "When there are many placeholders (0s) in the bulb sequence (`p`), the dynamic programming state transitions become computationally intensive due to processing all combinations of remaining even and odd bulbs."
   - **Trigger Condition**: This condition occurs prominently when `p` contains many zeroes, requiring extensive examination of possible bulb placements to minimize complexity.

3. **Nested Loop Invariant**:
   - **Description**: "If `n` is large and the difference between filled and unfilled bulb positions is high, the execution will spend significant time in nested loops processing potential placements."
   - **Trigger Condition**: This slowdown is likely when `n` is near the upper constraint and there are few non-zero initial bulb positions, leading to prolonged DP state updates.

### Summary

These invariants collectively suggest that the primary performance bottlenecks arise from the extensive nested loop processing inherent in the DP solution, especially under high constraint conditions and with many placeholders in the input sequence. Constraining the number of zeroes in `p` or optimizing the DP table updates could mitigate these slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the checker functions that implement the performance-characterizing invariants derived in the previous analysis phase:

```cpp
#include <iostream>

// Check for DP Initialization Invariant
void check_dp_initialization_invariant(int n) {
    if (n > 80) { // assuming a threshold close to the maximum, but not exactly 100
        std::cerr << "Warning: DP initialization invariant triggered - potential high initialization cost!" << std::endl;
        abort();
    }
}

// Check for DP State Transition Invariant
void check_dp_transition_invariant(int zeroCount, int n) {
    if (zeroCount > n / 2) { // if more than half of the bulbs are missing
        std::cerr << "Warning: DP state transition invariant triggered - too many missing bulbs!" << std::endl;
        abort();
    }
}

// Check for Nested Loop Invariant
void check_nested_loop_invariant(int n, int filledCount) {
    if (n > 90 && filledCount < 10) { // high n with very few initially filled positions
        std::cerr << "Warning: Nested loop invariant triggered - high n with sparse filled bulbs!" << std::endl;
        abort();
    }
}
```

These checks use empirical thresholds based on the constraints and expected behavior of the program. Now, we will integrate these checks into the original C++ program.

### Phase 4: Integrating Checkers into the Original C++ Program

Below is the instrumented C++ code that integrates the invariants into the program, ensuring they trigger before potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_dp_initialization_invariant(int n) {
    if (n > 80) {
        cerr << "Warning: DP initialization invariant triggered - potential high initialization cost!" << endl;
        abort();
    }
}

void check_dp_transition_invariant(int zeroCount, int n) {
    if (zeroCount > n / 2) {
        cerr << "Warning: DP state transition invariant triggered - too many missing bulbs!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n, int filledCount) {
    if (n > 90 && filledCount < 10) {
        cerr << "Warning: Nested loop invariant triggered - high n with sparse filled bulbs!" << endl;
        abort();
    }
}

// Main program
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;

    vector<int> p(n + 1);
    set<int> st;
    for (int i = 1; i <= n; i++) st.insert(i);
    int zeroCount = 0, filledCount = 0;
    for (int i = 1; i <= n; i++) {
        cin >> p[i];
        if (p[i] == 0)
            zeroCount++;
        else
            filledCount++;
        st.erase(p[i]);
    }

    // Perform checks
    check_dp_initialization_invariant(n);
    check_dp_transition_invariant(zeroCount, n);
    check_nested_loop_invariant(n, filledCount);

    const int MAXN = 105;
    int dp[MAXN][MAXN][MAXN][2];
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= n; j++)
            for (int k = 0; k <= n; k++) 
                dp[i][j][k][0] = dp[i][j][k][1] = 1000000007;

    int even = 0, odd = 0;
    for (auto x : st) {
        if (x % 2 == 0)
            even++;
        else
            odd++;
    }

    dp[0][even][odd][0] = 0;
    dp[0][even][odd][1] = 0;

    for (int i = 1; i <= n; i++) {
        if (p[i] != 0) {
            int now = p[i] % 2;
            for (int ev = 0; ev <= n; ev++) {
                for (int od = 0; od <= n; od++) {
                    for (int j = 0; j <= 1; j++) {
                        dp[i][ev][od][now] = min(dp[i][ev][od][now],
                                                 dp[i - 1][ev][od][j] + (j == now ? 0 : 1));
                    }
                }
            }
        } else {
            for (int ev = 0; ev <= n; ev++) {
                for (int od = 0; od <= n; od++) {
                    if (ev > 0) {
                        dp[i][ev - 1][od][0] = min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][0]);
                        dp[i][ev - 1][od][0] = min(dp[i][ev - 1][od][0], dp[i - 1][ev][od][1] + 1);
                    }
                    if (od > 0) {
                        dp[i][ev][od - 1][1] = min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][0] + 1);
                        dp[i][ev][od - 1][1] = min(dp[i][ev][od - 1][1], dp[i - 1][ev][od][1]);
                    }
                }
            }
        }
    }

    cout << min(dp[n][0][0][0], dp[n][0][0][1]) << endl;
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
```

### Explanation:

- **DP Initialization Check**: Placed after reading `n` to immediately assess potential for costly DP initialization.
- **DP State Transition Check**: Placed after reading all bulbs to evaluate the configuration.
- **Nested Loop Check**: Placed similarly to assess potential bottlenecks before extensive processing.

These checks ensure that the program warns of potential performance bottlenecks under specified conditions while minimizing overhead in critical sections.

