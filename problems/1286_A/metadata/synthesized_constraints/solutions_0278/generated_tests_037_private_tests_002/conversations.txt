system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 100;
const int mod = 1e9 + 7;
mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());
int main() {
  ios_base::sync_with_stdio(false), cin.tie(0);
  int n;
  cin >> n;
  int c[2] = {};
  vector<int> v(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
    if (v[i] > 0) ++c[v[i] % 2];
  }
  c[1] = (n + 1) / 2 - c[1];
  c[0] = n / 2 - c[0];
  vector<vector<vector<int> > > dp(
      c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod)));
  dp[c[0]][c[1]][0] = 0;
  dp[c[0]][c[1]][1] = 0;
  for (int i = 1; i <= n; i++) {
    vector<vector<vector<int> > > new_dp(
        c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod)));
    for (int even = 0; even <= c[0]; even++) {
      for (int odd = 0; odd <= c[1]; odd++) {
        for (int la = 0; la < 2; la++) {
          if (v[i] > 0) {
            new_dp[even][odd][v[i] % 2] =
                min(new_dp[even][odd][v[i] % 2],
                    dp[even][odd][la] + ((v[i] % 2) != la));
            continue;
          }
          if (even > 0)
            new_dp[even - 1][odd][0] =
                min(new_dp[even - 1][odd][0], dp[even][odd][la] + (la != 0));
          if (odd > 0)
            new_dp[even][odd - 1][1] =
                min(new_dp[even][odd - 1][1], dp[even][odd][la] + (la != 1));
        }
      }
    }
    dp = new_dp;
  }
  cout << min(dp[0][0][0], dp[0][0][1]) << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 2e5 + 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count()); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int c[2] = {}; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n + 1); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= n; i++) { /* line 12 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> v[i]; /* line 13 slow_hit_count: 100, fast_hit_count: 1 */
    if (v[i] > 0) ++c[v[i] % 2]; /* line 14 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  c[1] = (n + 1) / 2 - c[1]; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  c[0] = n / 2 - c[0]; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<vector<int> > > dp( /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod))); /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
  dp[c[0]][c[1]][0] = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  dp[c[0]][c[1]][1] = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 22 slow_hit_count: 101, fast_hit_count: 2 */
    vector<vector<vector<int> > > new_dp( /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod))); /* line 24 slow_hit_count: 300, fast_hit_count: 3 */
    for (int even = 0; even <= c[0]; even++) { /* line 25 slow_hit_count: 5200, fast_hit_count: 2 */
      for (int odd = 0; odd <= c[1]; odd++) { /* line 26 slow_hit_count: 260100, fast_hit_count: 3 */
        for (int la = 0; la < 2; la++) { /* line 27 slow_hit_count: 765000, fast_hit_count: 6 */
          if (v[i] > 0) { /* line 28 slow_hit_count: 510000, fast_hit_count: 4 */
            new_dp[even][odd][v[i] % 2] = /* line 29 slow_hit_count: 5100, fast_hit_count: 0 */
                min(new_dp[even][odd][v[i] % 2], /* line 30 slow_hit_count: 10200, fast_hit_count: 0 */
                    dp[even][odd][la] + ((v[i] % 2) != la)); /* line 31 slow_hit_count: 10200, fast_hit_count: 0 */
            continue; /* line 32 slow_hit_count: 5100, fast_hit_count: 0 */
          } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
          if (even > 0) /* line 34 slow_hit_count: 504900, fast_hit_count: 4 */
            new_dp[even - 1][odd][0] = /* line 35 slow_hit_count: 495000, fast_hit_count: 0 */
                min(new_dp[even - 1][odd][0], dp[even][odd][la] + (la != 0)); /* line 36 slow_hit_count: 990000, fast_hit_count: 0 */
          if (odd > 0) /* line 37 slow_hit_count: 504900, fast_hit_count: 4 */
            new_dp[even][odd - 1][1] = /* line 38 slow_hit_count: 494802, fast_hit_count: 2 */
                min(new_dp[even][odd - 1][1], dp[even][odd][la] + (la != 1)); /* line 39 slow_hit_count: 989604, fast_hit_count: 4 */
        } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    dp = new_dp; /* line 43 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << min(dp[0][0][0], dp[0][0][1]) << "\n"; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided code, problem statement, and hit count information, let's analyze the situation and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 22 through 43**: The main performance issue arises from the nested loops that iterate over the `new_dp` data structure. Specifically, lines 25-27 are hit an extremely high number of times (e.g., 5200, 260100, and 765000 for `slow_hit_count`), indicating a computational bottleneck.

2. **Dynamic Programming Table Initialization and Access**: The lines inside the nested loop (lines 34-39) perform operations on the `new_dp` data structure, which suggests heavy dynamic programming table manipulation. The operation involves checking and updating values based on the modulus operation results, which is computationally expensive due to the large number of iterations.

3. **Conditions and Checks**: The condition checks around filling the `new_dp` table (lines 28-39) contribute to the inefficiency, particularly when a lot of values are zero (leading to more dynamic programming state updates).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Number of Zeros in Input**
   - **Natural Language Description**: "When the input contains a high proportion of zeros, the algorithm encounters an elevated number of iterations for dynamic programming table updates, leading to increased computational load."
   - **Explanation**: A high number of zero values in the input list results in many iterations over potential even-odd configurations, significantly increasing the complexity of filling the `new_dp` table.

2. **Invariant 2: Maximizing `n` with Minimal Non-zero Values**
   - **Natural Language Description**: "If `n` is large (close to its upper constraint) and most of the bulb numbers are zero, the nested loops for dynamic programming will execute many more times than necessary, as the process tries to fill in too many potential configurations."
   - **Explanation**: When `n` is maximized, each incremental increase in the number of zeros exponentially increases the computation due to the nested loops, as there are many potential slots to fill with non-zero values, making the DP table updates more frequent.

3. **Invariant 3: Imbalanced Odd and Even Distribution**
   - **Natural Language Description**: "When the missing bulbs create an imbalance between the number of odd and even bulbs needed, the algorithm can become inefficient due to uneven state transitions in the dynamic programming approach."
   - **Explanation**: Since the dynamic programming solution is sensitive to the even/odd balance, an imbalance forces more complex state transitions, increasing the number of operations significantly.

### Conclusion

The main trigger for slow performance in this code is the combination of high input size with a significant imbalance or high zero count in the list of bulbs, leading to excessive iterations and DP state transitions. These natural language invariants help identify conditions under which the code might exhibit slow performance, aiding in future optimizations or testing with fuzzers.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Functions in C++

Let's start by implementing each natural language invariant as a runtime check in C++.

1. **Invariant 1: High Number of Zeros in Input**

   We will check if the number of zeros in the input is significantly high.

   ```cpp
   void check_high_zero_count(const vector<int> &v, int n) {
       int zeroCount = count(v.begin(), v.end(), 0);
       if (zeroCount > n * 0.8) { // Threshold set at 80% of n
           cerr << "Warning: Performance bottleneck condition triggered - High number of zeros in input!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Maximizing `n` with Minimal Non-zero Values**

   We will check if `n` is near its maximum and the number of non-zero values is minimal.

   ```cpp
   void check_max_n_min_non_zero(const vector<int> &v, int n) {
       int nonZeroCount = count_if(v.begin(), v.end(), [](int num) { return num > 0; });
       if (n >= 90 && nonZeroCount < 10) { // n is close to 100 and very few non-zero values
           cerr << "Warning: Performance bottleneck condition triggered - Max n with minimal non-zero values!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Imbalanced Odd and Even Distribution**

   We will check for a significant imbalance in the required odd and even replacements.

   ```cpp
   void check_imbalanced_odd_even(int c0, int c1, int n) {
       if (abs(c0 - c1) > n * 0.3) { // Imbalance threshold at 30% of n
           cerr << "Warning: Performance bottleneck condition triggered - Imbalanced odd/even distribution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Functions into the Original Program

Now, let's integrate these checker functions into the provided C++ program at appropriate points to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 100;
const int mod = 1e9 + 7;
mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());

void check_high_zero_count(const vector<int> &v, int n) {
    int zeroCount = count(v.begin(), v.end(), 0);
    if (zeroCount > n * 0.8) { // Threshold set at 80% of n
        cerr << "Warning: Performance bottleneck condition triggered - High number of zeros in input!" << endl;
        abort();
    }
}

void check_max_n_min_non_zero(const vector<int> &v, int n) {
    int nonZeroCount = count_if(v.begin(), v.end(), [](int num) { return num > 0; });
    if (n >= 90 && nonZeroCount < 10) { // n is close to 100 and very few non-zero values
        cerr << "Warning: Performance bottleneck condition triggered - Max n with minimal non-zero values!" << endl;
        abort();
    }
}

void check_imbalanced_odd_even(int c0, int c1, int n) {
    if (abs(c0 - c1) > n * 0.3) { // Imbalance threshold at 30% of n
        cerr << "Warning: Performance bottleneck condition triggered - Imbalanced odd/even distribution!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0);
    int n;
    cin >> n;
    int c[2] = {};
    vector<int> v(n + 1);
    for (int i = 1; i <= n; i++) {
        cin >> v[i];
        if (v[i] > 0) ++c[v[i] % 2];
    }

    // Invariant checks after input processing
    check_high_zero_count(v, n);
    check_max_n_min_non_zero(v, n);

    c[1] = (n + 1) / 2 - c[1];
    c[0] = n / 2 - c[0];

    // Check the imbalance in odd/even distribution
    check_imbalanced_odd_even(c[0], c[1], n);

    vector<vector<vector<int> > > dp(
        c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod)));
    dp[c[0]][c[1]][0] = 0;
    dp[c[0]][c[1]][1] = 0;
    for (int i = 1; i <= n; i++) {
        vector<vector<vector<int> > > new_dp(
            c[0] + 1, vector<vector<int> >(c[1] + 1, vector<int>(2, mod)));
        for (int even = 0; even <= c[0]; even++) {
            for (int odd = 0; odd <= c[1]; odd++) {
                for (int la = 0; la < 2; la++) {
                    if (v[i] > 0) {
                        new_dp[even][odd][v[i] % 2] =
                            min(new_dp[even][odd][v[i] % 2],
                                dp[even][odd][la] + ((v[i] % 2) != la));
                        continue;
                    }
                    if (even > 0)
                        new_dp[even - 1][odd][0] =
                            min(new_dp[even - 1][odd][0], dp[even][odd][la] + (la != 0));
                    if (odd > 0)
                        new_dp[even][odd - 1][1] =
                            min(new_dp[even][odd - 1][1], dp[even][odd][la] + (la != 1));
                }
            }
        }
        dp = new_dp;
    }
    cout << min(dp[0][0][0], dp[0][0][1]) << "\n";
    return 0;
}
```

### Explanation
- **`check_high_zero_count`**: This function checks for a high proportion of zeros in the input and is called after reading the bulbs' arrangement.
- **`check_max_n_min_non_zero`**: This function ensures that when `n` is large, there are enough non-zero values, and is checked immediately after input.
- **`check_imbalanced_odd_even`**: This function checks for imbalances in odd and even numbers after calculating what's needed for the DP table, placed right after computing `c[0]` and `c[1]`. 

These checks help detect potential performance bottlenecks based on input characteristics, aiding in debugging and optimization.

