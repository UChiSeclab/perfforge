system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
template <class T>
std::vector<T> vec(int len, T elem) {
  return std::vector<T>(len, elem);
}
constexpr int INF = 1 << 30;
int main() {
  int n;
  std::cin >> n;
  int evens = n / 2;
  int odds = n - evens;
  std::vector<int> xs(n);
  for (auto& x : xs) {
    std::cin >> x;
    if (x == 0) {
      x = -1;
      continue;
    }
    x %= 2;
    --(x == 0 ? evens : odds);
  }
  auto dp = vec(n + 1, vec(n + 1, vec(2, INF)));
  if (xs[0] < 0) {
    if (odds > 0) {
      dp[odds - 1][evens][1] = 0;
    }
    if (evens > 0) {
      dp[odds][evens - 1][0] = 0;
    }
  } else {
    dp[odds][evens][xs[0]] = 0;
  }
  for (int i = 1; i < n; ++i) {
    auto ndp = vec(n + 1, vec(n + 1, vec(2, INF)));
    int x = xs[i];
    for (int odd = 0; odd <= n; ++odd) {
      for (int even = 0; even <= n; ++even) {
        if (x < 0) {
          if (odd > 0) {
            ndp[odd - 1][even][1] =
                std::min(dp[odd][even][1], dp[odd][even][0] + 1);
          }
          if (even > 0) {
            ndp[odd][even - 1][0] =
                std::min(dp[odd][even][1] + 1, dp[odd][even][0]);
          }
        } else {
          ndp[odd][even][x] = std::min(dp[odd][even][0] + (x != 0),
                                       dp[odd][even][1] + (x != 1));
        }
      }
    }
    dp = ndp;
  }
  std::cout << std::min(dp[0][0][0], dp[0][0][1]) << std::endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<T> vec(int len, T elem) { /* line 3 slow_hit_count: 600, fast_hit_count: 6 */
  return std::vector<T>(len, elem); /* line 4 slow_hit_count: 600, fast_hit_count: 6 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
constexpr int INF = 1 << 30; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int evens = n / 2; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int odds = n - evens; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  std::vector<int> xs(n); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto& x : xs) { /* line 13 slow_hit_count: 101, fast_hit_count: 2 */
    std::cin >> x; /* line 14 slow_hit_count: 100, fast_hit_count: 1 */
    if (x == 0) { /* line 15 slow_hit_count: 100, fast_hit_count: 1 */
      x = -1; /* line 16 slow_hit_count: 99, fast_hit_count: 1 */
      continue; /* line 17 slow_hit_count: 99, fast_hit_count: 1 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    x %= 2; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
    --(x == 0 ? evens : odds); /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  auto dp = vec(n + 1, vec(n + 1, vec(2, INF))); /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  if (xs[0] < 0) { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    if (odds > 0) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
      dp[odds - 1][evens][1] = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (evens > 0) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
      dp[odds][evens - 1][0] = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    dp[odds][evens][xs[0]] = 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < n; ++i) { /* line 33 slow_hit_count: 100, fast_hit_count: 1 */
    auto ndp = vec(n + 1, vec(n + 1, vec(2, INF))); /* line 34 slow_hit_count: 297, fast_hit_count: 0 */
    int x = xs[i]; /* line 35 slow_hit_count: 99, fast_hit_count: 0 */
    for (int odd = 0; odd <= n; ++odd) { /* line 36 slow_hit_count: 10098, fast_hit_count: 0 */
      for (int even = 0; even <= n; ++even) { /* line 37 slow_hit_count: 1019898, fast_hit_count: 0 */
        if (x < 0) { /* line 38 slow_hit_count: 1009899, fast_hit_count: 0 */
          if (odd > 0) { /* line 39 slow_hit_count: 999698, fast_hit_count: 0 */
            ndp[odd - 1][even][1] = /* line 40 slow_hit_count: 989800, fast_hit_count: 0 */
                std::min(dp[odd][even][1], dp[odd][even][0] + 1); /* line 41 slow_hit_count: 1979600, fast_hit_count: 0 */
          } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
          if (even > 0) { /* line 43 slow_hit_count: 999698, fast_hit_count: 0 */
            ndp[odd][even - 1][0] = /* line 44 slow_hit_count: 989800, fast_hit_count: 0 */
                std::min(dp[odd][even][1] + 1, dp[odd][even][0]); /* line 45 slow_hit_count: 1979600, fast_hit_count: 0 */
          } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
          ndp[odd][even][x] = std::min(dp[odd][even][0] + (x != 0), /* line 48 slow_hit_count: 20402, fast_hit_count: 0 */
                                       dp[odd][even][1] + (x != 1)); /* line 49 slow_hit_count: 30603, fast_hit_count: 0 */
        } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    dp = ndp; /* line 53 slow_hit_count: 99, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << std::min(dp[0][0][0], dp[0][0][1]) << std::endl; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided code, problem statement, and hit count data, we can derive performance-characterizing invariants for the C program. The analysis revolves around the dynamic programming (DP) approach used to solve the problem and how it behaves with different inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **DP Initialization and Updates**: The code uses a 3D DP array `dp` that is initialized and updated throughout the solution. The line-level hit counts indicate that the DP array operations are a significant contributor to the execution time, especially under slow input conditions.

2. **Nested Loops**: The nested loops on lines 36 and 37 undergo a vast number of iterations, especially for the slow input. These loops update the DP table and appear to be the main bottleneck. The high hit count on lines 41 and 45 shows repeated calculations for finding minimum values for possible combinations of odds and evens.

3. **Handling Missing Bulbs**: The use of `x < 0` to handle missing bulbs results in additional branching and DP updates, further contributing to inefficiency when many bulbs are removed (as indicated by the slow input).

### Phase 2: Derive Performance-Characterizing Invariants

1. **High DP Table Iteration**: 
   - **Invariant**: "The program may experience performance degradation when a significant portion of the bulbs are missing, resulting in repeated initialization and updates of the DP table, particularly when many nested loops must be executed to handle missing values."
   - **Condition**: This occurs when the number of missing bulbs (`0`s in the input) is large relative to `n`.

2. **Complexity in Balancing Odds and Evens**:
   - **Invariant**: "Performance may degrade when balancing the remaining odd and even bulbs requires extensive DP computation due to the variety of combinations tested."
   - **Condition**: This is likely triggered when the remaining odd and even bulbs are nearly equal in number, forcing the algorithm to explore many configurations.

3. **DP Table Size and Operations**:
   - **Invariant**: "The use of a larger DP table size relative to `n` can cause inefficiencies, especially when all bulbs are missing or the input is structured such that multiple DP states must be evaluated."
   - **Condition**: Performance issues are exacerbated when the grid size based on `n` increases, as it multiplies the possible states evaluated during the execution.

By understanding these invariants, we can better anticipate when the program may slow down and adjust the algorithm or input handling accordingly to mitigate these performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as Checker Functions

Below are the C++ code snippets implementing the performance-characterizing invariants derived in natural language.

1. **High DP Table Iteration**:
   ```cpp
   void check_missing_bulbs_invariant(int missingBulbs, int n) {
       if (missingBulbs > n / 2) { // Condition to check if there are many missing bulbs
           std::cerr << "Warning: Performance bottleneck condition triggered - too many missing bulbs!" << std::endl;
           abort();
       }
   }
   ```

2. **Complexity in Balancing Odds and Evens**:
   ```cpp
   void check_balancing_invariant(int evens, int odds) {
       if (abs(evens - odds) < 10) { // Threshold for balancing odds and evens
           std::cerr << "Warning: Performance bottleneck condition triggered - challenging balance between odds and evens!" << std::endl;
           abort();
       }
   }
   ```

3. **DP Table Size and Operations**:
   ```cpp
   void check_dp_size_invariant(int n) {
       if (n > 75) { // Arbitrary threshold based on problem constraints
           std::cerr << "Warning: Performance bottleneck condition triggered - large DP table size!" << std::endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Functions into the C++ Program

Below is the instrumented C++ code with the inserted checker functions to detect and warn about performance bottlenecks.

```cpp
#include <bits/stdc++.h>

template <class T>
std::vector<T> vec(int len, T elem) {
  return std::vector<T>(len, elem);
}

constexpr int INF = 1 << 30;

// Checker function for missing bulbs
void check_missing_bulbs_invariant(int missingBulbs, int n) {
    if (missingBulbs > n / 2) { // Condition to check if there are many missing bulbs
        std::cerr << "Warning: Performance bottleneck condition triggered - too many missing bulbs!" << std::endl;
        abort();
    }
}

// Checker function for balancing odds and evens
void check_balancing_invariant(int evens, int odds) {
    if (abs(evens - odds) < 10) { // Threshold for balancing odds and evens
        std::cerr << "Warning: Performance bottleneck condition triggered - challenging balance between odds and evens!" << std::endl;
        abort();
    }
}

// Checker function for DP size
void check_dp_size_invariant(int n) {
    if (n > 75) { // Arbitrary threshold based on problem constraints
        std::cerr << "Warning: Performance bottleneck condition triggered - large DP table size!" << std::endl;
        abort();
    }
}

int main() {
  int n;
  std::cin >> n;

  // Check for large DP tables
  check_dp_size_invariant(n);

  int evens = n / 2;
  int odds = n - evens;
  std::vector<int> xs(n);
  int missingBulbs = 0;

  for (auto& x : xs) {
    std::cin >> x;
    if (x == 0) {
      x = -1;
      missingBulbs++; // Count missing bulbs
      continue;
    }
    x %= 2;
    --(x == 0 ? evens : odds);
  }

  // Check for too many missing bulbs
  check_missing_bulbs_invariant(missingBulbs, n);

  // Check for challenging balance between odds and evens
  check_balancing_invariant(evens, odds);

  auto dp = vec(n + 1, vec(n + 1, vec(2, INF)));
  if (xs[0] < 0) {
    if (odds > 0) {
      dp[odds - 1][evens][1] = 0;
    }
    if (evens > 0) {
      dp[odds][evens - 1][0] = 0;
    }
  } else {
    dp[odds][evens][xs[0]] = 0;
  }
  for (int i = 1; i < n; ++i) {
    auto ndp = vec(n + 1, vec(n + 1, vec(2, INF)));
    int x = xs[i];
    for (int odd = 0; odd <= n; ++odd) {
      for (int even = 0; even <= n; ++even) {
        if (x < 0) {
          if (odd > 0) {
            ndp[odd - 1][even][1] =
                std::min(dp[odd][even][1], dp[odd][even][0] + 1);
          }
          if (even > 0) {
            ndp[odd][even - 1][0] =
                std::min(dp[odd][even][1] + 1, dp[odd][even][0]);
          }
        } else {
          ndp[odd][even][x] = std::min(dp[odd][even][0] + (x != 0),
                                       dp[odd][even][1] + (x != 1));
        }
      }
    }
    dp = ndp;
  }
  std::cout << std::min(dp[0][0][0], dp[0][0][1]) << std::endl;
  return 0;
}
```

This instrumented code includes checks for the identified performance bottlenecks, helping analyze slow performance triggers during execution without disrupting the program flow significantly.

