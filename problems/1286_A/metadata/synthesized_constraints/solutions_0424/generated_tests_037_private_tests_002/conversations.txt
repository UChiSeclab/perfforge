system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
using namespace std;
const double PI = acos(-1);
const long long MOD = 1000000007;
template <class T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <class T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int N;
  cin >> N;
  vector<int> A(N);
  for (int i = 0; i < (int)(N); i++) cin >> A[i];
  vector<vector<vector<vector<int>>>> dp(
      N + 1, vector<vector<vector<int>>>(
                 N + 1, vector<vector<int>>(N + 1, vector<int>(2, (1e9)))));
  dp[0][0][0][0] = dp[0][0][0][1] = 0;
  int o = (N + 1) / 2;
  int e = N / 2;
  for (int i = 0; i < (int)(N); i++) {
    for (int j = 0; j < (int)(N); j++) {
      for (int k = 0; k < (int)(N); k++) {
        if (A[i] == 0) {
          dp[i + 1][j + 1][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1);
          dp[i + 1][j][k + 1][1] = min(dp[i][j][k][0] + 1, dp[i][j][k][1]);
        } else if (A[i] % 2 == 0) {
          dp[i + 1][j][k][1] = (1e9);
          dp[i + 1][j][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1);
        } else {
          dp[i + 1][j][k][0] = (1e9);
          dp[i + 1][j][k][1] = min(dp[i][j][k][1], dp[i][j][k][0] + 1);
        }
      }
    }
    if (A[i] != 0 && A[i] % 2 == 0) e--;
    if (A[i] != 0 && A[i] % 2 == 1) o--;
  }
  cout << min(dp[N][e][o][0], dp[N][e][o][1]) << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmax(T &a, T b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmin(T &a, T b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int N; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> A(N); /* line 27 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < (int)(N); i++) cin >> A[i]; /* line 28 slow_hit_count: 101, fast_hit_count: 2 */
  vector<vector<vector<vector<int>>>> dp( /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      N + 1, vector<vector<vector<int>>>( /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
                 N + 1, vector<vector<int>>(N + 1, vector<int>(2, (1e9))))); /* line 31 slow_hit_count: 4, fast_hit_count: 4 */
  dp[0][0][0][0] = dp[0][0][0][1] = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int o = (N + 1) / 2; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  int e = N / 2; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)(N); i++) { /* line 35 slow_hit_count: 101, fast_hit_count: 2 */
    for (int j = 0; j < (int)(N); j++) { /* line 36 slow_hit_count: 10100, fast_hit_count: 2 */
      for (int k = 0; k < (int)(N); k++) { /* line 37 slow_hit_count: 1010000, fast_hit_count: 2 */
        if (A[i] == 0) { /* line 38 slow_hit_count: 1000000, fast_hit_count: 1 */
          dp[i + 1][j + 1][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1); /* line 39 slow_hit_count: 990000, fast_hit_count: 1 */
          dp[i + 1][j][k + 1][1] = min(dp[i][j][k][0] + 1, dp[i][j][k][1]); /* line 40 slow_hit_count: 990000, fast_hit_count: 1 */
        } else if (A[i] % 2 == 0) { /* line 41 slow_hit_count: 10000, fast_hit_count: 0 */
          dp[i + 1][j][k][1] = (1e9); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
          dp[i + 1][j][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
          dp[i + 1][j][k][0] = (1e9); /* line 45 slow_hit_count: 10000, fast_hit_count: 0 */
          dp[i + 1][j][k][1] = min(dp[i][j][k][1], dp[i][j][k][0] + 1); /* line 46 slow_hit_count: 10000, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    if (A[i] != 0 && A[i] % 2 == 0) e--; /* line 50 slow_hit_count: 100, fast_hit_count: 1 */
    if (A[i] != 0 && A[i] % 2 == 1) o--; /* line 51 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cout << min(dp[N][e][o][0], dp[N][e][o][1]) << endl; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address this task, we must first analyze the given code and hit count information to determine why the program encounters performance issues with the slow input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts**:
   - The loops starting at lines 35, 36, and 37 are heavily executed for the slow input. In particular, lines 38, 39, and 40 show significant hit counts, indicating that these lines are critical in the computation.
   - The triple-nested loop structure means operations inside these loops are repeated numerous times, contributing to performance bottlenecks.

2. **Pinpointed Lines**:
   - **Lines 38-40**: These lines are executed frequently because they are inside a triple-nested loop, which iterates over dimensions related to the input size `N`.
   - **Line 35**: This loop iterates over each bulb, and for each bulb, it iterates over all possible positions or states.
   - **Lines 41-46**: These lines handle conditions when bulbs have specific parity, but they are not as frequently hit as lines 38-40.

3. **Interaction with Data Structures**:
   - The dynamic programming table `dp` is a four-dimensional vector, and this complexity leads to significant overhead in accessing and updating these values, especially with `N` close to its maximum value (100).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the performance issues arise primarily from the nested loops and the size of the dynamic programming table. Here are the performance-characterizing invariants:

1. **Nested Loop Invariant**:
   - **Natural Language Description**: "The program's performance degrades when many zeros are present in the input array, as it leads to excessive iterations through nested loops."
   - **Condition**: The slow performance is triggered when the array contains numerous zeros, which results in exploring many possible configurations for placing missing bulbs.

2. **DP Table Size Invariant**:
   - **Natural Language Description**: "When the input size `N` is large, nearing its upper constraint, and the number of missing bulbs (zeros) is significant, the DP table operations become computationally expensive."
   - **Condition**: The code may slow down when `N` is close to 100, and the number of zeros is large, leading to extensive computation in filling and accessing the DP table.

3. **Parity Adjustment Invariant**:
   - **Natural Language Description**: "If the program frequently must adjust the parity of adjacent bulbs, especially in large arrays, the complexity of operations may increase."
   - **Condition**: When dealing with many bulbs of unknown parity (zeros), especially with `N` large, the need to frequently evaluate and set parity states contributes to slow execution.

These invariants will help in identifying and potentially optimizing the code to avoid these slow paths by reducing unnecessary computations or restructuring the DP table to be more efficient.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n (in arbitrary order), such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on.

<image>

Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity (remainder of the division by 2). For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1.

No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.

Input

The first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.

The second line contains n integers p_1,\ p_2,\ …,\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed.

Output

Output a single number — the minimum complexity of the garland.

Examples

Input


5
0 5 0 2 3


Output


2


Input


7
1 0 0 5 0 0 2


Output


1

Note

In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only (5, 4) and (2, 3) are the pairs of adjacent bulbs that have different parity.

In the second case, one of the correct answers is 1 7 3 5 6 4 2. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here, we transform the previously derived natural language performance invariants into checkers in C++. 

1. **Nested Loop Invariant**:
   - This invariant checks if there are many zeros present in the input array, which may cause excessive iterations in loops.

```cpp
void check_nested_loop_invariant(const vector<int>& A) {
    int zero_count = count(A.begin(), A.end(), 0);
    if (zero_count > A.size() / 2) { // Example threshold: more than half are zeros
        cerr << "Warning: Performance bottleneck condition triggered due to excessive zeros in the input!" << endl;
        abort();
    }
}
```

2. **DP Table Size Invariant**:
   - This invariant checks if the input size `N` is large and there are many missing bulbs.

```cpp
void check_dp_table_size_invariant(int N, int zero_count) {
    if (N > 80 && zero_count > N / 2) { // Example thresholds
        cerr << "Warning: Performance bottleneck due to large DP table operations!" << endl;
        abort();
    }
}
```

3. **Parity Adjustment Invariant**:
   - This checks if there are many unknown parities (zeros) needing frequent evaluations.

```cpp
void check_parity_adjustment_invariant(const vector<int>& A) {
    int zero_count = count(A.begin(), A.end(), 0);
    if (zero_count > A.size() / 3) { // Example threshold: significant fraction are zeros
        cerr << "Warning: Performance bottleneck due to frequent parity adjustments!" << endl;
        abort();
    }
}
```

These checkers are designed to identify conditions that lead to performance bottlenecks based on the structure and constraints of the problem.

### Phase 4: Integrate Checkers into the Original C++ Program

Below is the modified C++ code with integrated performance checkers. These checkers are placed at strategic points to avoid impacting performance further (e.g., outside of tight loops).

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
using namespace std;

// Checker functions
void check_nested_loop_invariant(const vector<int>& A) {
    int zero_count = count(A.begin(), A.end(), 0);
    if (zero_count > A.size() / 2) { // Example threshold: more than half are zeros
        cerr << "Warning: Performance bottleneck condition triggered due to excessive zeros in the input!" << endl;
        abort();
    }
}

void check_dp_table_size_invariant(int N, int zero_count) {
    if (N > 80 && zero_count > N / 2) { // Example thresholds
        cerr << "Warning: Performance bottleneck due to large DP table operations!" << endl;
        abort();
    }
}

void check_parity_adjustment_invariant(const vector<int>& A) {
    int zero_count = count(A.begin(), A.end(), 0);
    if (zero_count > A.size() / 3) { // Example threshold: significant fraction are zeros
        cerr << "Warning: Performance bottleneck due to frequent parity adjustments!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int N;
    cin >> N;
    vector<int> A(N);
    for (int i = 0; i < (int)(N); i++) cin >> A[i];

    // Insert checks after reading input
    int zero_count = count(A.begin(), A.end(), 0);
    check_nested_loop_invariant(A);
    check_dp_table_size_invariant(N, zero_count);
    check_parity_adjustment_invariant(A);

    vector<vector<vector<vector<int>>>> dp(
        N + 1, vector<vector<vector<int>>>(
                   N + 1, vector<vector<int>>(N + 1, vector<int>(2, (1e9)))));
    dp[0][0][0][0] = dp[0][0][0][1] = 0;
    int o = (N + 1) / 2;
    int e = N / 2;
    for (int i = 0; i < (int)(N); i++) {
        for (int j = 0; j < (int)(N); j++) {
            for (int k = 0; k < (int)(N); k++) {
                if (A[i] == 0) {
                    dp[i + 1][j + 1][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1);
                    dp[i + 1][j][k + 1][1] = min(dp[i][j][k][0] + 1, dp[i][j][k][1]);
                } else if (A[i] % 2 == 0) {
                    dp[i + 1][j][k][1] = (1e9);
                    dp[i + 1][j][k][0] = min(dp[i][j][k][0], dp[i][j][k][1] + 1);
                } else {
                    dp[i + 1][j][k][0] = (1e9);
                    dp[i + 1][j][k][1] = min(dp[i][j][k][1], dp[i][j][k][0] + 1);
                }
            }
        }
        if (A[i] != 0 && A[i] % 2 == 0) e--;
        if (A[i] != 0 && A[i] % 2 == 1) o--;
    }
    cout << min(dp[N][e][o][0], dp[N][e][o][1]) << endl;
}
```

This code includes runtime checks that alert and abort when performance bottlenecks are identified. They are strategically placed to ensure detection without interfering with the program's efficiency in normal scenarios.

