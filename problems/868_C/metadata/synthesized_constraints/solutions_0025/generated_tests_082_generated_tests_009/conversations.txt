system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long int INF = 0x3f3f3f3f3f3f3f3f;
int n, k;
int cnt[64];
bool valid(int x) {
  int CNT[6], sum = 0;
  memset(CNT, 0, sizeof(CNT));
  for (int i = 0; i < (1 << k); i++) {
    if (((1 << i) & x) != 0 && cnt[i]) {
      sum++;
      for (int j = 0; j < k; j++) {
        if ((1 << j) & i) {
          CNT[j]++;
        }
      }
    }
  }
  if (sum == 0) return false;
  for (int i = 0; i < k; i++) {
    if ((CNT[i] * 2) > sum) return false;
  }
  return true;
}
int main() {
  scanf("%d%d", &n, &k);
  memset(cnt, 0, sizeof(cnt));
  for (int i = 0; i < n; i++) {
    int code = 0;
    for (int j = 0; j < k; j++) {
      int tmp;
      scanf("%d", &tmp);
      if (tmp) code |= (1 << j);
    }
    cnt[code]++;
  }
  bool flag = false;
  for (int i = 0; i < (1 << k); i++) {
    for (int j = 0; j < (1 << k); j++) {
    }
  }
  int limit = (1 << k);
  limit = (1 << limit);
  for (int i = 1; i < limit; i++) {
    if (valid(i)) {
      flag = true;
      break;
    }
  }
  puts(flag ? "YES" : "NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 4
0 1 0 0
1 1 1 0
1 1 1 1
1 0 1 1


(G.2) Fast Input

4 4
0 0 0 0
1 1 1 0
1 1 1 1
1 0 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long int INF = 0x3f3f3f3f3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[64]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool valid(int x) { /* line 6 slow_hit_count: 8196, fast_hit_count: 1 */
  int CNT[6], sum = 0; /* line 7 slow_hit_count: 8196, fast_hit_count: 1 */
  memset(CNT, 0, sizeof(CNT)); /* line 8 slow_hit_count: 8196, fast_hit_count: 1 */
  for (int i = 0; i < (1 << k); i++) { /* line 9 slow_hit_count: 139332, fast_hit_count: 17 */
    if (((1 << i) & x) != 0 && cnt[i]) { /* line 10 slow_hit_count: 131136, fast_hit_count: 16 */
      sum++; /* line 11 slow_hit_count: 8198, fast_hit_count: 1 */
      for (int j = 0; j < k; j++) { /* line 12 slow_hit_count: 40990, fast_hit_count: 5 */
        if ((1 << j) & i) { /* line 13 slow_hit_count: 32792, fast_hit_count: 4 */
          CNT[j]++; /* line 14 slow_hit_count: 16400, fast_hit_count: 0 */
        } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum == 0) return false; /* line 19 slow_hit_count: 8196, fast_hit_count: 1 */
  for (int i = 0; i < k; i++) { /* line 20 slow_hit_count: 10249, fast_hit_count: 5 */
    if ((CNT[i] * 2) > sum) return false; /* line 21 slow_hit_count: 10248, fast_hit_count: 4 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &k); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  memset(cnt, 0, sizeof(cnt)); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
    int code = 0; /* line 29 slow_hit_count: 4, fast_hit_count: 4 */
    for (int j = 0; j < k; j++) { /* line 30 slow_hit_count: 20, fast_hit_count: 20 */
      int tmp; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      scanf("%d", &tmp); /* line 32 slow_hit_count: 16, fast_hit_count: 16 */
      if (tmp) code |= (1 << j); /* line 33 slow_hit_count: 16, fast_hit_count: 16 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[code]++; /* line 35 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  bool flag = false; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (1 << k); i++) { /* line 38 slow_hit_count: 17, fast_hit_count: 17 */
    for (int j = 0; j < (1 << k); j++) { /* line 39 slow_hit_count: 272, fast_hit_count: 272 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  int limit = (1 << k); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  limit = (1 << limit); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < limit; i++) { /* line 44 slow_hit_count: 8196, fast_hit_count: 1 */
    if (valid(i)) { /* line 45 slow_hit_count: 8196, fast_hit_count: 1 */
      flag = true; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  puts(flag ? "YES" : "NO"); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the code and derive performance-characterizing invariants for the given problem, let's go through the tasks in two phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

By examining the hit counts, we observe:

1. **`valid(int x)` Function**:
   - This function is called 8196 times during the slow input and only once during the fast input. 
   - Specifically, the loop `for (int i = 1; i < limit; i++)` in `main()` is hit 8196 times for the slow input, indicating an expensive computation path, while it is hit only once for the fast input.
   - Within `valid()`, the nested loop `for (int i = 0; i < (1 << k); i++)` is executed many times, particularly for the slow input, leading to increased checks and potential performance bottlenecks.

2. **Nested Loops**:
   - The nested loops in `valid()`, especially lines 9-14, are responsible for increased iterations. The conditions checked and operations performed seem to indicate potential inefficiencies with specific data patterns.

3. **Memoization or Early Exit**:
   - Since the `valid()` function is repeatedly called with different subsets, it might be possible to optimize using memoization or better early exit conditions.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Based on the analysis above, we derive conditions under which the program is likely to take a slower execution path:

1. **High Combinatorial Space Exploration**:
   - Natural language invariant: "The code slows down significantly when the problemset combinations to check are large due to the high number of problems each team knows, leading to extensive exploration of potential subsets."
   
2. **Excessive Validity Checks**:
   - Natural language invariant: "If the sum of known problems configurations (expressed as binary patterns for each team) exhibit high overlap or redundancy, the `valid()` function is invoked many times with almost identical checks, leading to performance penalties."

3. **Complexity Explosion Due to Small k**:
   - Natural language invariant: "With a constraint of 1 ≤ k ≤ 4, when k is at its maximum, the number of possible problemset combinations grows exponentially, triggering complex and repeated subset checks."

These invariants illustrate scenarios where the code may enter a slow path, matching the constraints provided (n ≤ 100,000 and k ≤ 4) and focusing on the structural impact rather than specific input values.

### Considerations for Future Scenarios

To prevent performance degradation in similar contexts, potential optimizations could focus on reducing the complexity of subset checks, employing early termination conditions when possible, or leveraging memoization to avoid redundant computations. These strategies would ensure the code is robust against variations in input that could trigger slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Derived Invariants

We will implement the natural language invariants as C++ functions to detect potential performance bottlenecks at runtime.

1. **High Combinatorial Space Exploration**:
   - We will check if the number of potential problemset combinations is very large, which is `2^n`. If this is large (e.g., significantly larger than practical limits), it could indicate an expensive computation path.

```cpp
void check_combinatorial_explosion(int n) {
    if ((1 << n) > 10000) {  // Threshold for large combinatorial space
        cerr << "Warning: Combinatorial explosion may occur - too many subsets to check" << endl;
        abort();
    }
}
```

2. **Excessive Validity Checks**:
   - We will check if the `valid()` function is likely to be called excessively due to overlapping known problems patterns for teams.

```cpp
void check_excessive_valid_checks(int cnt[], int k) {
    int nonZeroCount = 0;
    for (int i = 0; i < (1 << k); i++) {
        if (cnt[i] > 1) {
            nonZeroCount++;
        }
    }
    if (nonZeroCount > 8) {  // Arbitrary threshold for excessive checks
        cerr << "Warning: Excessive validity checks may be triggered" << endl;
        abort();
    }
}
```

3. **Complexity Explosion Due to Maximum k**:
   - Check if the `k`, which influences the loops in `valid()`, is at its maximum and likely to trigger complex checks.

```cpp
void check_max_k_complexity(int k) {
    if (k == 4) {  // k at its maximum as per constraints
        cerr << "Warning: Maximum k leading to high complexity in checks" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here is the instrumented C++ code with the checkers integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long int INF = 0x3f3f3f3f3f3f3f3f;
int n, k;
int cnt[64];

// Checker implementations

void check_combinatorial_explosion(int n) {
    if ((1 << n) > 10000) {  // Threshold for large combinatorial space
        cerr << "Warning: Combinatorial explosion may occur - too many subsets to check" << endl;
        abort();
    }
}

void check_excessive_valid_checks(int cnt[], int k) {
    int nonZeroCount = 0;
    for (int i = 0; i < (1 << k); i++) {
        if (cnt[i] > 1) {
            nonZeroCount++;
        }
    }
    if (nonZeroCount > 8) {  // Arbitrary threshold for excessive checks
        cerr << "Warning: Excessive validity checks may be triggered" << endl;
        abort();
    }
}

void check_max_k_complexity(int k) {
    if (k == 4) {  // k at its maximum as per constraints
        cerr << "Warning: Maximum k leading to high complexity in checks" << endl;
        abort();
    }
}

bool valid(int x) {
    int CNT[6], sum = 0;
    memset(CNT, 0, sizeof(CNT));
    for (int i = 0; i < (1 << k); i++) {
        if (((1 << i) & x) != 0 && cnt[i]) {
            sum++;
            for (int j = 0; j < k; j++) {
                if ((1 << j) & i) {
                    CNT[j]++;
                }
            }
        }
    }
    if (sum == 0) return false;
    for (int i = 0; i < k; i++) {
        if ((CNT[i] * 2) > sum) return false;
    }
    return true;
}

int main() {
    scanf("%d%d", &n, &k);
    memset(cnt, 0, sizeof(cnt));
    
    // Check for potential performance bottlenecks
    check_combinatorial_explosion(n);
    check_max_k_complexity(k);

    for (int i = 0; i < n; i++) {
        int code = 0;
        for (int j = 0; j < k; j++) {
            int tmp;
            scanf("%d", &tmp);
            if (tmp) code |= (1 << j);
        }
        cnt[code]++;
    }

    // Check for excessive valid checks
    check_excessive_valid_checks(cnt, k);

    bool flag = false;
    for (int i = 0; i < (1 << k); i++) {
        for (int j = 0; j < (1 << k); j++) {
        }
    }
    int limit = (1 << k);
    limit = (1 << limit);
    for (int i = 1; i < limit; i++) {
        if (valid(i)) {
            flag = true;
            break;
        }
    }
    puts(flag ? "YES" : "NO");
    return 0;
}
```

### Explanation of Integration

- **`check_combinatorial_explosion`** is called right after reading `n` and `k` to ensure the computation path does not become too large.
- **`check_max_k_complexity`** is called similarly to flag when `k` is at its highest, potentially leading to complex checks.
- **`check_excessive_valid_checks`** is integrated after populating `cnt[]` to evaluate if the setup is leading to too many redundant checks in `valid()`. 

These checkers are strategically placed to monitor and alert for performance bottlenecks without affecting the main computation within tight loops.

