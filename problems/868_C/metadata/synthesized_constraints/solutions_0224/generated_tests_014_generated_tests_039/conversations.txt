system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
int bm[(1 << 5)];
int arr[5];
int cek(int n, int a, int b, int c, int d) {
  for (int i = 0; i < 4; i++) {
    arr[i] = 0;
    if (a & (1 << i)) arr[i]++;
    if (b & (1 << i)) arr[i]++;
    if (c & (1 << i)) arr[i]++;
    if (d & (1 << i)) arr[i]++;
  }
  for (int i = 0; i < 4; i++) {
    if (arr[i] <= n / 2) continue;
    return false;
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> k;
  for (int i = 0; i < n; i++) {
    int mask = 0;
    for (int j = 0; j < k; j++) {
      int bit;
      cin >> bit;
      if (bit) mask |= (1 << j);
    }
    bm[mask]++;
  }
  for (int i = 0; i < (1 << k); i++) {
    for (int i2 = 0; i2 < (1 << k); i2++) {
      for (int i3 = 0; i3 < (1 << k); i3++) {
        map<int, int> cnt;
        cnt[i]++;
        cnt[i2]++;
        cnt[i3]++;
        bool can = true;
        for (auto it : cnt) {
          if (bm[it.first] < it.second) {
            can = false;
          }
        }
        if (can && cek(3, i, i2, i3, 0)) {
          cout << "YES" << endl;
          return 0;
        }
      }
    }
  }
  for (int i = 0; i < (1 << k); i++) {
    for (int i2 = 0; i2 < (1 << k); i2++) {
      map<int, int> cnt;
      cnt[i]++;
      cnt[i2]++;
      bool can = true;
      for (auto it : cnt) {
        if (bm[it.first] < it.second) {
          can = false;
        }
      }
      if (can && cek(2, i, i2, 0, 0)) {
        cout << "YES" << endl;
        return 0;
      }
    }
  }
  for (int i = 0; i < (1 << k); i++) {
    for (int i2 = 0; i2 < (1 << k); i2++) {
      for (int i3 = 0; i3 < (1 << k); i3++) {
        for (int i4 = 0; i4 < (1 << k); i4++) {
          map<int, int> cnt;
          cnt[i]++;
          cnt[i2]++;
          cnt[i3]++;
          cnt[i4]++;
          bool can = true;
          for (auto it : cnt) {
            if (bm[it.first] < it.second) {
              can = false;
            }
          }
          if (can && cek(4, i, i2, i3, i4)) {
            cout << "YES" << endl;
            return 0;
          }
        }
      }
    }
  }
  if (bm[0] > 0) {
    cout << "YES" << endl;
    return 0;
  }
  cout << "NO" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 4
0 0 0 1
0 0 1 1
0 0 1 1
0 0 0 1
0 0 1 1
0 0 1 1
0 0 1 1
1 1 1 0


(G.2) Fast Input

8 4
0 0 0 1
0 0 1 1
0 0 1 1
0 0 0 0
0 0 1 1
0 0 1 1
0 0 1 1
1 1 1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int bm[(1 << 5)]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int arr[5]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cek(int n, int a, int b, int c, int d) { /* line 6 slow_hit_count: 20, fast_hit_count: 1 */
  for (int i = 0; i < 4; i++) { /* line 7 slow_hit_count: 100, fast_hit_count: 5 */
    arr[i] = 0; /* line 8 slow_hit_count: 80, fast_hit_count: 4 */
    if (a & (1 << i)) arr[i]++; /* line 9 slow_hit_count: 80, fast_hit_count: 4 */
    if (b & (1 << i)) arr[i]++; /* line 10 slow_hit_count: 80, fast_hit_count: 4 */
    if (c & (1 << i)) arr[i]++; /* line 11 slow_hit_count: 80, fast_hit_count: 4 */
    if (d & (1 << i)) arr[i]++; /* line 12 slow_hit_count: 80, fast_hit_count: 4 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) { /* line 14 slow_hit_count: 68, fast_hit_count: 5 */
    if (arr[i] <= n / 2) continue; /* line 15 slow_hit_count: 67, fast_hit_count: 4 */
    return false; /* line 16 slow_hit_count: 19, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 25 slow_hit_count: 9, fast_hit_count: 9 */
    int mask = 0; /* line 26 slow_hit_count: 8, fast_hit_count: 8 */
    for (int j = 0; j < k; j++) { /* line 27 slow_hit_count: 40, fast_hit_count: 40 */
      int bit; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> bit; /* line 29 slow_hit_count: 32, fast_hit_count: 32 */
      if (bit) mask |= (1 << j); /* line 30 slow_hit_count: 32, fast_hit_count: 32 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    bm[mask]++; /* line 32 slow_hit_count: 8, fast_hit_count: 8 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (1 << k); i++) { /* line 34 slow_hit_count: 17, fast_hit_count: 1 */
    for (int i2 = 0; i2 < (1 << k); i2++) { /* line 35 slow_hit_count: 272, fast_hit_count: 8 */
      for (int i3 = 0; i3 < (1 << k); i3++) { /* line 36 slow_hit_count: 4352, fast_hit_count: 128 */
        map<int, int> cnt; /* line 37 slow_hit_count: 4096, fast_hit_count: 121 */
        cnt[i]++; /* line 38 slow_hit_count: 4096, fast_hit_count: 121 */
        cnt[i2]++; /* line 39 slow_hit_count: 4096, fast_hit_count: 121 */
        cnt[i3]++; /* line 40 slow_hit_count: 4096, fast_hit_count: 121 */
        bool can = true; /* line 41 slow_hit_count: 4096, fast_hit_count: 121 */
        for (auto it : cnt) { /* line 42 slow_hit_count: 15632, fast_hit_count: 453 */
          if (bm[it.first] < it.second) { /* line 43 slow_hit_count: 11536, fast_hit_count: 332 */
            can = false; /* line 44 slow_hit_count: 9420, fast_hit_count: 204 */
          } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        if (can && cek(3, i, i2, i3, 0)) { /* line 47 slow_hit_count: 4096, fast_hit_count: 121 */
          cout << "YES" << endl; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (1 << k); i++) { /* line 54 slow_hit_count: 8, fast_hit_count: 0 */
    for (int i2 = 0; i2 < (1 << k); i2++) { /* line 55 slow_hit_count: 128, fast_hit_count: 0 */
      map<int, int> cnt; /* line 56 slow_hit_count: 121, fast_hit_count: 0 */
      cnt[i]++; /* line 57 slow_hit_count: 121, fast_hit_count: 0 */
      cnt[i2]++; /* line 58 slow_hit_count: 121, fast_hit_count: 0 */
      bool can = true; /* line 59 slow_hit_count: 121, fast_hit_count: 0 */
      for (auto it : cnt) { /* line 60 slow_hit_count: 355, fast_hit_count: 0 */
        if (bm[it.first] < it.second) { /* line 61 slow_hit_count: 234, fast_hit_count: 0 */
          can = false; /* line 62 slow_hit_count: 204, fast_hit_count: 0 */
        } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      if (can && cek(2, i, i2, 0, 0)) { /* line 65 slow_hit_count: 121, fast_hit_count: 0 */
        cout << "YES" << endl; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (1 << k); i++) { /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i2 = 0; i2 < (1 << k); i2++) { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i3 = 0; i3 < (1 << k); i3++) { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
        for (int i4 = 0; i4 < (1 << k); i4++) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
          map<int, int> cnt; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
          cnt[i]++; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
          cnt[i2]++; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
          cnt[i3]++; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
          cnt[i4]++; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          bool can = true; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
          for (auto it : cnt) { /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
            if (bm[it.first] < it.second) { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
              can = false; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
          if (can && cek(4, i, i2, i3, i4)) { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
            cout << "YES" << endl; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
            return 0; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  if (bm[0] > 0) { /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "YES" << endl; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO" << endl; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 100 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program and derive performance characterizing invariants, let's go through both phases as outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The `cek` function is called significantly more times for the slow input (20 times) compared to the fast input (1 time).
   - The nested loops (lines 34-36) running through all possible combinations of `(1 << k)` result in multiple function calls to `cek`.
   - The innermost loop (line 36) is a likely hotspot, as shown by its high hit count (4352 times on the slow input compared to 128 on the fast input).

2. **Pinpointing Lines and Functions:**
   - **Line 6-18 (`cek` function):** Responsible for checking if a certain configuration of problems can make an interesting problem set. The slow input results in a much higher number of calls.
   - **Loops in `main`:** The three nested loops (lines 34-36, and similar patterns for other loop combinations) appear to be exploring a large search space, causing performance issues.

3. **Interaction with Data Structures and Logic:**
   - The program uses a `map<int, int>` to count occurrences of problem configurations (`cnt`). The high hit count on loop entries and exits implies frequent recalculations of possible subsets.
   - It attempts to brute force through all problem configurations possible for the given number of teams, which is exponential in nature.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**
   - **Invariant 1:** "If the number of problem subsets being checked grows exponentially due to multiple nested loops over possible team knowledge states, the program may slow down significantly."
   - **Invariant 2:** "When the number of problems is close to its upper limit (n = 100,000) and involves checking many combinations of team knowledge (up to \(2^k\) states), the program's performance can degrade due to the large number of checks required."
   - **Invariant 3:** "If the `cek` function, which checks the feasibility of a problemset, is invoked excessively in nested loops iterating over potential subsets, it indicates a combinatorial explosion in the search space, leading to slow execution."

2. **Threshold Values and Conditions:**
   - These conditions focus on the exponential growth in possibilities when iterating over all combinations of team problem states (`(1 << k)`), especially when compounded by the maximum constraints of the input size (`n` up to 100,000).
   - The use of repeated checks and the map object for counting iterations further exacerbates performance when the problem space grows large.

By understanding these performance characterizing invariants, developers can identify and address the root causes of slowdown in similar scenarios, ensuring efficient handling of combinatorial problems even under stringent constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that check each of the performance-characterizing invariants derived in the previous analysis.

1. **Invariant 1 Check:**
   - This invariant checks if the program is exploring an exponential number of subsets due to nested loops over possible team knowledge states.

```cpp
void check_exponential_growth(int count) {
    if (count > 10000) { // Arbitrary large threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - exponential growth in subsets!" << endl;
        abort();
    }
}
```

2. **Invariant 2 Check:**
   - This invariant checks if the number of problems combined with the number of team states results in a large search space.

```cpp
void check_large_search_space(int n, int k) {
    if (n > 1000 && (1 << k) > 10) { // Example threshold considering the small k
        cerr << "Warning: Performance bottleneck condition triggered - large search space!" << endl;
        abort();
    }
}
```

3. **Invariant 3 Check:**
   - This invariant verifies if the `cek` function is called excessively, indicating a combinatorial explosion in the search space.

```cpp
void check_excessive_cek_calls(int cekCalls) {
    if (cekCalls > 5000) { // Example threshold for excessive calls
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to cek function!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Below is the instrumented C++ code with conditional checks placed at effective points to avoid adding unnecessary overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k;
int bm[(1 << 5)];
int arr[5];

int cek(int n, int a, int b, int c, int d) {
    for (int i = 0; i < 4; i++) {
        arr[i] = 0;
        if (a & (1 << i)) arr[i]++;
        if (b & (1 << i)) arr[i]++;
        if (c & (1 << i)) arr[i]++;
        if (d & (1 << i)) arr[i]++;
    }
    for (int i = 0; i < 4; i++) {
        if (arr[i] <= n / 2) continue;
        return false;
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> k;

    check_large_search_space(n, k); // Check for a large search space immediately after inputs

    for (int i = 0; i < n; i++) {
        int mask = 0;
        for (int j = 0; j < k; j++) {
            int bit;
            cin >> bit;
            if (bit) mask |= (1 << j);
        }
        bm[mask]++;
    }

    int cekCallCount = 0;

    for (int i = 0; i < (1 << k); i++) {
        for (int i2 = 0; i2 < (1 << k); i2++) {
            for (int i3 = 0; i3 < (1 << k); i3++) {
                map<int, int> cnt;
                cnt[i]++;
                cnt[i2]++;
                cnt[i3]++;
                bool can = true;
                for (auto it : cnt) {
                    if (bm[it.first] < it.second) {
                        can = false;
                    }
                }
                cekCallCount++;
                if (can && cek(3, i, i2, i3, 0)) {
                    cout << "YES" << endl;
                    return 0;
                }
            }
        }
    }

    check_excessive_cek_calls(cekCallCount); // Check after loops for excessive cek calls

    for (int i = 0; i < (1 << k); i++) {
        for (int i2 = 0; i2 < (1 << k); i2++) {
            map<int, int> cnt;
            cnt[i]++;
            cnt[i2]++;
            bool can = true;
            for (auto it : cnt) {
                if (bm[it.first] < it.second) {
                    can = false;
                }
            }
            cekCallCount++;
            if (can && cek(2, i, i2, 0, 0)) {
                cout << "YES" << endl;
                return 0;
            }
        }
    }

    for (int i = 0; i < (1 << k); i++) {
        for (int i2 = 0; i2 < (1 << k); i2++) {
            for (int i3 = 0; i3 < (1 << k); i3++) {
                for (int i4 = 0; i4 < (1 << k); i4++) {
                    map<int, int> cnt;
                    cnt[i]++;
                    cnt[i2]++;
                    cnt[i3]++;
                    cnt[i4]++;
                    bool can = true;
                    for (auto it : cnt) {
                        if (bm[it.first] < it.second) {
                            can = false;
                        }
                    }
                    cekCallCount++;
                    if (can && cek(4, i, i2, i3, i4)) {
                        cout << "YES" << endl;
                        return 0;
                    }
                }
            }
        }
    }

    if (bm[0] > 0) {
        cout << "YES" << endl;
        return 0;
    }

    cout << "NO" << endl;
    return 0;
}
```

**Note:** The inserted checks are implemented as functions and placed strategically to minimize performance overhead while effectively monitoring potential bottleneck conditions. The thresholds used in the checks are arbitrary for demonstration purposes and should be adjusted based on profiling data and real-world constraints.

