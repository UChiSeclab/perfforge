system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
set<int> si;
int n, k;
bool solve(set<int> &cands, vector<int> &chosen) {
  if (cands.empty()) {
    if (chosen.empty()) {
      return false;
    }
    for (int i = 0; i < k; ++i) {
      int cnt = 0;
      for (const int num : chosen) {
        cnt += (((num >> i) & 0x1) ? -1 : 1);
      }
      if (cnt < 0) {
        return false;
      }
    }
    return true;
  }
  int val = *cands.begin();
  bool ok = false;
  cands.erase(val);
  ok |= solve(cands, chosen);
  chosen.push_back(val);
  ok |= solve(cands, chosen);
  chosen.pop_back();
  cands.insert(val);
  return ok;
}
int main(int argc, char **argv) {
  std::ios::sync_with_stdio(false);
  cin >> n >> k;
  for (int i = 0; i < n; ++i) {
    int val = 0;
    for (int j = 0; j < k; ++j) {
      int t;
      cin >> t;
      val |= (t << j);
    }
    si.insert(val);
  }
  vector<int> chosen;
  cout << (solve(si, chosen) ? "YES\n" : "NO\n");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 4
0 0 1 0
1 0 1 0
0 1 1 1
1 0 1 1
1 1 0 1
1 0 0 1
0 1 1 1
0 0 0 1
1 1 1 1
1 0 1 0


(G.2) Fast Input

1 2
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
set<int> si; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool solve(set<int> &cands, vector<int> &chosen) { /* line 5 slow_hit_count: 511, fast_hit_count: 3 */
  if (cands.empty()) { /* line 6 slow_hit_count: 511, fast_hit_count: 3 */
    if (chosen.empty()) { /* line 7 slow_hit_count: 256, fast_hit_count: 2 */
      return false; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < k; ++i) { /* line 10 slow_hit_count: 469, fast_hit_count: 1 */
      int cnt = 0; /* line 11 slow_hit_count: 463, fast_hit_count: 1 */
      for (const int num : chosen) { /* line 12 slow_hit_count: 2248, fast_hit_count: 2 */
        cnt += (((num >> i) & 0x1) ? -1 : 1); /* line 13 slow_hit_count: 1785, fast_hit_count: 1 */
      } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt < 0) { /* line 15 slow_hit_count: 463, fast_hit_count: 1 */
        return false; /* line 16 slow_hit_count: 249, fast_hit_count: 1 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 19 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int val = *cands.begin(); /* line 21 slow_hit_count: 255, fast_hit_count: 1 */
  bool ok = false; /* line 22 slow_hit_count: 255, fast_hit_count: 1 */
  cands.erase(val); /* line 23 slow_hit_count: 255, fast_hit_count: 1 */
  ok |= solve(cands, chosen); /* line 24 slow_hit_count: 255, fast_hit_count: 1 */
  chosen.push_back(val); /* line 25 slow_hit_count: 255, fast_hit_count: 1 */
  ok |= solve(cands, chosen); /* line 26 slow_hit_count: 255, fast_hit_count: 1 */
  chosen.pop_back(); /* line 27 slow_hit_count: 255, fast_hit_count: 1 */
  cands.insert(val); /* line 28 slow_hit_count: 255, fast_hit_count: 1 */
  return ok; /* line 29 slow_hit_count: 255, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char **argv) { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(false); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 34 slow_hit_count: 11, fast_hit_count: 2 */
    int val = 0; /* line 35 slow_hit_count: 10, fast_hit_count: 1 */
    for (int j = 0; j < k; ++j) { /* line 36 slow_hit_count: 50, fast_hit_count: 3 */
      int t; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> t; /* line 38 slow_hit_count: 40, fast_hit_count: 2 */
      val |= (t << j); /* line 39 slow_hit_count: 40, fast_hit_count: 2 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    si.insert(val); /* line 41 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> chosen; /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
  cout << (solve(si, chosen) ? "YES\n" : "NO\n"); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the given C program, let's start by analyzing the provided code and hit counts, and then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The `solve` function is the main recursive function and is called significantly more often during the slow input run compared to the fast input.
   - Notably, the lines within the recursive function have the following hits:
     - Line 6 (`if (cands.empty())`) is hit 511 times in the slow run but only 3 times in the fast run.
     - Line 12 (the loop iterating over `chosen`) is particularly expensive with 2248 hits during the slow run.
     - Line 13 (where `cnt` is updated) is executed 1785 times in the slow input case.

2. **Pinpointing Lines or Functions with More Hits:**
   - The recursive nature of the `solve` function combined with the loop over `chosen` indicates a potential combinatorial explosion, especially when considering a large subset of problems to evaluate.

3. **Interaction with Data Structures:**
   - The `chosen` vector grows in each recursion level, and the inner loop at line 12 has a complexity dependent on the size of `chosen`.
   - As the input `n` increases, the potential number of subsets or states grows exponentially, leading to increased recursive calls and larger `chosen` vectors.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Combinatorial Subset Exploration:**
   - "The program experiences a slowdown when the input size `n` is large, and the recursion explores a combinatorial number of problem subsets. As subsets grow, the repeated evaluation of team knowledge constraints becomes costly."

2. **Recursive Depth and Chosen Vector Size:**
   - "When the recursive depth increases significantly, especially as the `chosen` vector size approaches half of `n`, the program's performance degrades due to excessive iteration over potential subsets in the `solve` function."

3. **Imbalance in Team Knowledge Distribution:**
   - "If the initial distribution of problem knowledge among teams is such that many problems are commonly known to multiple teams, the recursive subset evaluation may hit more invalid states, causing additional recursion and backtracking."

4. **Input Complexity and Distribution:**
   - "The program is sensitive to the distribution of known problems across teams; a skewed distribution where many problems are known by a subset of teams can cause an increase in recursive path explorations."

These invariants focus on the combinatorial nature and recursive depth of the problem, aligning with the constraints and providing insight into why the program slows down for certain inputs without relying on specific numeric values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: Let's proceed with translating the performance-characterizing invariants into C++ checker code (Phase 3) and then integrate these checks into the existing program (Phase 4).

### Phase 3: Implement the Performance Invariants in C++

We will create checker functions to detect when each invariant condition is met.

1. **Combinatorial Subset Exploration:**

```cpp
void check_combinatorial_exploration(size_t subsetCount) {
    if (subsetCount > 10000) { // arbitrary threshold, assuming high recursion
        cerr << "Warning: Performance bottleneck condition triggered - excessive subset exploration!" << endl;
        abort();
    }
}
```

2. **Recursive Depth and Chosen Vector Size:**

```cpp
void check_recursive_depth_and_chosen_size(size_t depth, size_t chosenSize, size_t n) {
    if (chosenSize > n / 2 && depth > 20) { // arbitrary threshold for depth
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth and chosen size!" << endl;
        abort();
    }
}
```

3. **Imbalance in Team Knowledge Distribution:**

```cpp
void check_imbalance_in_team_knowledge(const vector<int>& knowledgeDistribution, size_t n) {
    for (int count : knowledgeDistribution) {
        if (count > n * 0.75) { // arbitrary threshold for imbalance
            cerr << "Warning: Performance bottleneck condition triggered - imbalance in team knowledge distribution!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate Checkers with the Original Program

We will integrate these checks into the existing C++ program at strategic points.

```cpp
#include <bits/stdc++.h>
using namespace std;
set<int> si;
int n, k;

// Checker functions
void check_combinatorial_exploration(size_t subsetCount) {
    if (subsetCount > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive subset exploration!" << endl;
        abort();
    }
}

void check_recursive_depth_and_chosen_size(size_t depth, size_t chosenSize, size_t n) {
    if (chosenSize > n / 2 && depth > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth and chosen size!" << endl;
        abort();
    }
}

void check_imbalance_in_team_knowledge(const vector<int>& knowledgeDistribution, size_t n) {
    for (int count : knowledgeDistribution) {
        if (count > n * 0.75) {
            cerr << "Warning: Performance bottleneck condition triggered - imbalance in team knowledge distribution!" << endl;
            abort();
        }
    }
}

bool solve(set<int> &cands, vector<int> &chosen, size_t depth) {
    check_combinatorial_exploration(cands.size());
    check_recursive_depth_and_chosen_size(depth, chosen.size(), n);

    if (cands.empty()) {
        if (chosen.empty()) {
            return false;
        }
        for (int i = 0; i < k; ++i) {
            int cnt = 0;
            for (const int num : chosen) {
                cnt += (((num >> i) & 0x1) ? -1 : 1);
            }
            if (cnt < 0) {
                return false;
            }
        }
        return true;
    }
    int val = *cands.begin();
    bool ok = false;
    cands.erase(val);
    ok |= solve(cands, chosen, depth + 1);
    chosen.push_back(val);
    ok |= solve(cands, chosen, depth + 1);
    chosen.pop_back();
    cands.insert(val);
    return ok;
}

int main(int argc, char **argv) {
    std::ios::sync_with_stdio(false);
    cin >> n >> k;
    vector<int> knowledgeDistribution(1 << k, 0);

    for (int i = 0; i < n; ++i) {
        int val = 0;
        for (int j = 0; j < k; ++j) {
            int t;
            cin >> t;
            val |= (t << j);
        }
        si.insert(val);
        knowledgeDistribution[val]++;
    }

    check_imbalance_in_team_knowledge(knowledgeDistribution, n);

    vector<int> chosen;
    cout << (solve(si, chosen, 0) ? "YES\n" : "NO\n");
}
```

**Explanation of Inserted Checks:**
- **`check_combinatorial_exploration`**: Placed at the beginning of the `solve` function to abort if the combinatorial exploration becomes excessive.
- **`check_recursive_depth_and_chosen_size`**: Also placed in `solve` to check for deep recursion and large `chosen` vector size.
- **`check_imbalance_in_team_knowledge`**: Called after input reading to detect any initial imbalance in team knowledge distribution.

This instrumented code now includes runtime checks to alert if any performance bottleneck conditions are met, helping to diagnose slow performance scenarios during testing.

