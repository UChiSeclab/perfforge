system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 100005;
int n, k;
int cnt[(1 << 4) + 5];
int now[4];
int main() {
  scanf("%d%d", &n, &k);
  for (int i = 1; i <= n; i++) {
    int st = 0;
    for (int j = 0; j < k; j++) {
      int x;
      scanf("%d", &x);
      st <<= 1;
      st += x;
    }
    cnt[st]++;
  }
  int m = 1 << k;
  int tot = 1 << m;
  bool ok = false;
  for (int s = 0; s < tot; s++) {
    int C = 0;
    memset(now, 0, sizeof now);
    for (int st = 0; st < m; st++)
      if (s & (1 << st)) {
        C += (cnt[st] ? 1 : 0);
        for (int i = 0; i < k; i++)
          if ((st & (1 << i))) now[i] += (cnt[st] ? 1 : 0);
      }
    bool tmp = true;
    for (int i = 0; i < k; i++) {
      if (now[i] * 2 > C) tmp = false;
    }
    if (tmp && C) ok = true;
  }
  puts(ok ? "YES" : "NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 4
1 1 0 0
1 0 1 0
0 1 1 0
0 0 1 1


(G.2) Fast Input

4 1
1
1
0
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 100005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[(1 << 4) + 5]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int now[4]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &k); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
    int st = 0; /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
    for (int j = 0; j < k; j++) { /* line 11 slow_hit_count: 20, fast_hit_count: 8 */
      int x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      scanf("%d", &x); /* line 13 slow_hit_count: 16, fast_hit_count: 4 */
      st <<= 1; /* line 14 slow_hit_count: 16, fast_hit_count: 4 */
      st += x; /* line 15 slow_hit_count: 16, fast_hit_count: 4 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[st]++; /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int m = 1 << k; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int tot = 1 << m; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  bool ok = false; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int s = 0; s < tot; s++) { /* line 22 slow_hit_count: 65537, fast_hit_count: 5 */
    int C = 0; /* line 23 slow_hit_count: 65536, fast_hit_count: 4 */
    memset(now, 0, sizeof now); /* line 24 slow_hit_count: 65536, fast_hit_count: 4 */
    for (int st = 0; st < m; st++) /* line 25 slow_hit_count: 1114112, fast_hit_count: 12 */
      if (s & (1 << st)) { /* line 26 slow_hit_count: 1048576, fast_hit_count: 8 */
        C += (cnt[st] ? 1 : 0); /* line 27 slow_hit_count: 524288, fast_hit_count: 4 */
        for (int i = 0; i < k; i++) /* line 28 slow_hit_count: 2621440, fast_hit_count: 8 */
          if ((st & (1 << i))) now[i] += (cnt[st] ? 1 : 0); /* line 29 slow_hit_count: 2097152, fast_hit_count: 4 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    bool tmp = true; /* line 31 slow_hit_count: 65536, fast_hit_count: 4 */
    for (int i = 0; i < k; i++) { /* line 32 slow_hit_count: 327680, fast_hit_count: 8 */
      if (now[i] * 2 > C) tmp = false; /* line 33 slow_hit_count: 262144, fast_hit_count: 4 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    if (tmp && C) ok = true; /* line 35 slow_hit_count: 65536, fast_hit_count: 4 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  puts(ok ? "YES" : "NO"); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C code for performance bottlenecks, we need to determine why the program slows down for the given "slow" input. Let's go through the phases outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The loop at line 22 (`for (int s = 0; s < tot; s++)`) shows a significant difference between the slow and fast inputs. The slow input hits this line 65,537 times, while the fast input hits it only 5 times.
   - The nested loop at line 25 (`for (int st = 0; st < m; st++)`) is hit 1,114,112 times for the slow input against just 12 times for the fast input.

2. **Pinpoint Lines with Significant Hits:**
   - Line 28 (`for (int i = 0; i < k; i++)`) within the double loop is hit 2,621,440 times for the slow input. This indicates a high level of nested iteration, contributing to the slowdown.
   - Line 26 (`if (s & (1 << st))`) and the subsequent operations are heavily executed, suggesting that the combination of bitwise checks and nested loops significantly contributes to the computational load.

3. **Interaction with Data Structures:**
   - The hit count data suggests that the bitwise operations and nested loops are interacting with the data structures (`cnt` and `now`) in a manner that results in exponential growth in operations, especially when the `k` value is high, close to its maximum of 4.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Exponential Growth in Subset Iteration:**
   - "When the number of experienced teams (`k`) is large, approaching the upper limit (close to 4), the program may enter a slow path due to the exponential growth in the number of subsets (`2^k`) and combinations to check. This is compounded by multiple nested loops iterating over these subsets."

2. **Bitwise Operation Overheads:**
   - "If there are many bitwise operations involving high values of `k`, where each subset is checked for multiple conditions, this might lead to a significant number of operations, causing slow performance."

3. **Complexity with Full Team Knowledge:**
   - "When teams have knowledge of a combination of problems that approaches or meets the maximum subset size, the number of checks required to ensure no team knows too many problems can increase dramatically, slowing down execution."

4. **High Iteration Count with Large `k`:**
   - "If `k` is large, and the program iterates over all possible problem combinations (`tot = 2^(2^k)`), the algorithm may become inefficient due to the sheer number of iterations required."

These invariants provide a broad understanding of conditions that lead to performance slowdowns, helping identify potential bottlenecks without relying on specific input values. They highlight the impact of high-dimensional iteration and bitwise operations, which are core contributors to the observed inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Based on the performance characterizing invariants we derived, here is the C++ code implementing those invariants as runtime checks:

```cpp
void check_exponential_growth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - exponential subset iteration!" << endl;
        abort();
    }
}

void check_bitwise_operation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive bitwise operations!" << endl;
        abort();
    }
}

void check_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - too many known problems by teams!" << endl;
        abort();
    }
}

void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - too many iterations due to high k!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the C++ program, ensuring they are placed appropriately without adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 100005;
int n, k;
int cnt[(1 << 4) + 5];
int now[4];

// Checker functions
void check_exponential_growth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - exponential subset iteration!" << endl;
        abort();
    }
}

void check_bitwise_operation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive bitwise operations!" << endl;
        abort();
    }
}

void check_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - too many known problems by teams!" << endl;
        abort();
    }
}

void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - too many iterations due to high k!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &k);
    
    // Check for high iteration count when k is large
    check_high_iteration_invariant(k > 3);
    
    for (int i = 1; i <= n; i++) {
        int st = 0;
        for (int j = 0; j < k; j++) {
            int x;
            scanf("%d", &x);
            st <<= 1;
            st += x;
        }
        cnt[st]++;
    }
    
    int m = 1 << k;
    int tot = 1 << m;

    // Check for exponential growth in subset iteration
    check_exponential_growth_invariant(m > 8);
    
    bool ok = false;
    for (int s = 0; s < tot; s++) {
        int C = 0;
        memset(now, 0, sizeof now);
        for (int st = 0; st < m; st++)
            if (s & (1 << st)) {
                C += (cnt[st] ? 1 : 0);
                for (int i = 0; i < k; i++)
                    if ((st & (1 << i))) now[i] += (cnt[st] ? 1 : 0);
            }
        
        bool tmp = true;
        for (int i = 0; i < k; i++) {
            if (now[i] * 2 > C) tmp = false;
        }
        
        // Check for complexity when team knows too many problems
        check_complexity_invariant(C > n / 2);
        
        if (tmp && C) ok = true;
    }
    
    puts(ok ? "YES" : "NO");
    return 0;
}
```

### Explanation of Checker Integration

1. **High Iteration Count Check:** Placed right after input reading to immediately detect if `k` is large, leading to potential inefficiencies.

2. **Exponential Subset Iteration Check:** Placed before entering the main subset iteration loop to preemptively catch cases where `2^k` becomes unmanageable.

3. **Complexity of Known Problems Check:** Inside the main check logic, ensuring that we abort if any team knows too many problems relative to the subset size.

These checks help prevent extreme cases that lead to performance issues without adding significant overhead to the main computation.

