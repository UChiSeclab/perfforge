system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int Ha[30];
int N, K;
int main() {
  scanf("%d%d", &N, &K);
  for (int i = 1; i <= N; i++) {
    int s = 0;
    for (int j = 1; j <= K; j++) {
      int x;
      scanf("%d", &x);
      s = (s << 1) + x;
    }
    Ha[s]++;
  }
  for (int s = 1; s < (1 << (1 << K)); s++) {
    int sum[4] = {0}, cnt = 0;
    bool can = true;
    for (int i = 0; i < (1 << K); i++) {
      if ((s >> i) & 1) {
        cnt++;
        if (!Ha[i]) can = false;
        for (int t = 0; t < 4; t++) sum[t] += (i >> t) & 1;
      }
    }
    if (!can) continue;
    bool ok = true;
    for (int i = 0; i < 4; i++) {
      if (sum[i] <= cnt / 2)
        ;
      else
        ok = false;
    }
    if (ok) return puts("YES"), 0;
  }
  puts("NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 4
1 1 1 1
0 0 0 1
0 0 1 1
1 0 1 1


(G.2) Fast Input

4 4
1 1 1 1
0 0 0 0
0 0 1 1
1 0 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int Ha[30]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int N, K; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &N, &K); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) { /* line 7 slow_hit_count: 5, fast_hit_count: 5 */
    int s = 0; /* line 8 slow_hit_count: 4, fast_hit_count: 4 */
    for (int j = 1; j <= K; j++) { /* line 9 slow_hit_count: 20, fast_hit_count: 20 */
      int x; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      scanf("%d", &x); /* line 11 slow_hit_count: 16, fast_hit_count: 16 */
      s = (s << 1) + x; /* line 12 slow_hit_count: 16, fast_hit_count: 16 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    Ha[s]++; /* line 14 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int s = 1; s < (1 << (1 << K)); s++) { /* line 16 slow_hit_count: 65536, fast_hit_count: 1 */
    int sum[4] = {0}, cnt = 0; /* line 17 slow_hit_count: 65535, fast_hit_count: 1 */
    bool can = true; /* line 18 slow_hit_count: 65535, fast_hit_count: 1 */
    for (int i = 0; i < (1 << K); i++) { /* line 19 slow_hit_count: 1114095, fast_hit_count: 17 */
      if ((s >> i) & 1) { /* line 20 slow_hit_count: 1048560, fast_hit_count: 16 */
        cnt++; /* line 21 slow_hit_count: 524288, fast_hit_count: 1 */
        if (!Ha[i]) can = false; /* line 22 slow_hit_count: 524288, fast_hit_count: 1 */
        for (int t = 0; t < 4; t++) sum[t] += (i >> t) & 1; /* line 23 slow_hit_count: 2621440, fast_hit_count: 5 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (!can) continue; /* line 26 slow_hit_count: 65535, fast_hit_count: 1 */
    bool ok = true; /* line 27 slow_hit_count: 15, fast_hit_count: 1 */
    for (int i = 0; i < 4; i++) { /* line 28 slow_hit_count: 75, fast_hit_count: 5 */
      if (sum[i] <= cnt / 2) /* line 29 slow_hit_count: 60, fast_hit_count: 4 */
        ; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        ok = false; /* line 32 slow_hit_count: 32, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (ok) return puts("YES"), 0; /* line 34 slow_hit_count: 15, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  puts("NO"); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive conditions under which the program slows down, we need to examine the hit count information and the structure of the code.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count analysis, we observe the following:

1. **Line 16 (`for (int s = 1; s < (1 << (1 << K)); s++)`):** This loop has a very high hit count for the slow input (65536 hits) compared to the fast input (1 hit). This indicates that the loop is executing many more times for the slow input.
   
2. **Line 19 (`for (int i = 0; i < (1 << K); i++)`):** This nested loop is also showing a significant difference in execution between the slow and fast inputs, with 1114095 hits for the slow input versus 17 hits for the fast input.
   
3. **Line 20 (`if ((s >> i) & 1)`):** This condition within the nested loop is executed frequently (1048560 times for the slow input).
   
4. **Line 23 (`for (int t = 0; t < 4; t++) sum[t] += (i >> t) & 1;`):** This line is executed a large number of times for the slow input (2621440 hits), indicating a computational bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Exponential Growth in Combinations**
   - **Natural Language:** "If the number of problems `n` approaches its maximum allowed value, and the number of teams `k` is also large, the number of combinations of problem sets checked grows exponentially. This can lead to significant slowdowns due to the exhaustive exploration of combinations."
   - **Thresholds:** This invariant primarily concerns the exponential loop (`for (int s = 1; s < (1 << (1 << K)); s++)`) which becomes expensive as `K` increases, especially with `k = 4` (the maximum allowed).

2. **Invariant 2: High Complexity with Large Input Space**
   - **Natural Language:** "When the input size leads to the creation of large search spaces (e.g., when `n` is large and many problems are known by teams), the exhaustive search through possible problem sets becomes computationally overwhelming."
   - **Thresholds:** The condition involves the nested loop (`for (int i = 0; i < (1 << K); i++)`) within the context of the outer loop, which becomes a performance issue as `n` approaches 100, the upper constraint.

3. **Invariant 3: Inefficient Problem Set Evaluation**
   - **Natural Language:** "If the evaluation of problem sets involves repeatedly checking many conditions due to a large number of possible configurations (`2^K`), performance degrades. This is exacerbated when there are multiple teams (up to k = 4)."
   - **Thresholds:** This relates to the operations within the loop related to calculating sums and counts for each potential subset of problems against team knowledge (`sum[t] += (i >> t) & 1`).

### Important Considerations

- The program's slow path is largely due to the exponential number of iterations needed to evaluate possible subsets of problems against team knowledge.
- The input size, particularly the number of problems (n) and teams (k), significantly influences the computational cost due to the exponential combination growth.
- These invariants focus on the conditions where the search space becomes too large, given the constraints `1 ≤ n ≤ 100` and `1 ≤ k ≤ 4`.

By understanding these performance triggers, refinements can be made to the algorithm to avoid exhaustive checks, potentially through early exits, pruning of the search space, or use of more efficient data structures.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here are the C++ code snippets to implement the performance-checking invariants derived from the analysis:

1. **Invariant 1: Exponential Growth in Combinations**

```cpp
void check_exponential_growth_invariant(int K) {
    if ((1 << (1 << K)) > 1000000) { // Threshold chosen to imply large combination space
        cerr << "Warning: Exponential growth invariant triggered - too many combinations!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Complexity with Large Input Space**

```cpp
void check_input_space_invariant(int n, int K) {
    if (n > 100 && K == 4) { // Threshold for high complexity due to input size and maximum teams
        cerr << "Warning: Input space invariant triggered - large search space!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Inefficient Problem Set Evaluation**

```cpp
void check_problem_set_invariant(int cnt, int K) {
    if (cnt > (1 << K) / 2) { // Threshold for inefficient evaluation of problem sets
        cerr << "Warning: Problem set invariant triggered - inefficient evaluation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original C++ Program

Now, let's integrate the checker functions into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
int Ha[30];
int N, K;

// Checkers based on performance-characterizing invariants
void check_exponential_growth_invariant(int K) {
    if ((1 << (1 << K)) > 1000000) { // Threshold chosen to imply large combination space
        cerr << "Warning: Exponential growth invariant triggered - too many combinations!" << endl;
        abort();
    }
}

void check_input_space_invariant(int n, int K) {
    if (n > 100 && K == 4) { // Threshold for high complexity due to input size and maximum teams
        cerr << "Warning: Input space invariant triggered - large search space!" << endl;
        abort();
    }
}

void check_problem_set_invariant(int cnt, int K) {
    if (cnt > (1 << K) / 2) { // Threshold for inefficient evaluation of problem sets
        cerr << "Warning: Problem set invariant triggered - inefficient evaluation!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &N, &K);

    // Check input space complexity before proceeding
    check_input_space_invariant(N, K);

    for (int i = 1; i <= N; i++) {
        int s = 0;
        for (int j = 1; j <= K; j++) {
            int x;
            scanf("%d", &x);
            s = (s << 1) + x;
        }
        Ha[s]++;
    }

    // Check exponential growth in combinations
    check_exponential_growth_invariant(K);

    for (int s = 1; s < (1 << (1 << K)); s++) {
        int sum[4] = {0}, cnt = 0;
        bool can = true;
        for (int i = 0; i < (1 << K); i++) {
            if ((s >> i) & 1) {
                cnt++;
                if (!Ha[i]) can = false;
                for (int t = 0; t < 4; t++) sum[t] += (i >> t) & 1;
            }
        }
        if (!can) continue;

        // Check problem set evaluation inefficiency
        check_problem_set_invariant(cnt, K);

        bool ok = true;
        for (int i = 0; i < 4; i++) {
            if (sum[i] <= cnt / 2)
                ;
            else
                ok = false;
        }
        if (ok) return puts("YES"), 0;
    }
    puts("NO");
    return 0;
}
```

### Explanation

- **Exponential Growth Check:** This check is placed after reading the input and before entering the combination loop to catch large search spaces due to `K`.
- **Input Space Check:** This check is done immediately after reading the input to ensure that large input sizes combined with maximum `K` do not degrade performance significantly.
- **Problem Set Evaluation Check:** This check is within the loop that evaluates the feasibility of problem sets, ensuring we detect inefficient evaluations due to exhaustive subset checks.

These checks help identify when the program might enter into performance bottlenecks, aiming to prevent the exhaustive search from becoming a significant issue for large input spaces and combinations.

