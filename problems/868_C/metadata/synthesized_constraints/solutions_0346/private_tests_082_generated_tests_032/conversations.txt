system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:256000000")
using namespace std;
const int INF = (int)(1e9 + 1e6);
const long long LINF = (long long)(4e18);
const double EPS = 1e-9;
mt19937 ggen;
const int MOD = 1000000007;
int add(int a, int b, int m = MOD) {
  int res = a + b;
  if (res >= m) res -= m;
  return res;
}
int sub(int a, int b, int m = MOD) {
  int res = a - b;
  if (res < 0) res += m;
  return res;
}
int mul(int a, int b, int m = MOD) { return (long long)a * b % m; }
const int MAXN = 105000;
int k, n;
int mas[MAXN];
int full;
int c[MAXN];
void init() {
  scanf("%d%d", &n, &k);
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < k; ++j) {
      int q;
      scanf("%d", &q);
      mas[i] <<= 1;
      mas[i] |= q;
    }
  }
}
bool check_mask(int mask) {
  int cnt[4] = {0, 0, 0, 0};
  int pr = 0;
  for (int i = 0; i < (1 << k); ++i) {
    if (mask & (1 << i)) {
      if (!c[i]) {
        return false;
      }
      ++pr;
      for (int j = 0; j < k; ++j) {
        if (i & (1 << j)) {
          ++cnt[j];
        }
      }
    }
  }
  for (int i = 0; i < k; ++i) {
    if (cnt[i] * 2 > pr) {
      return false;
    }
  }
  return true;
}
void solve() {
  init();
  full = (1 << k) - 1;
  for (int i = 1; i <= n; ++i) {
    ++c[mas[i]];
  }
  for (int mask = 1; mask <= (1 << full); ++mask) {
    if (check_mask(mask)) {
      printf("YES\n");
      return;
    }
  }
  printf("NO\n");
}
int main() {
  iostream::sync_with_stdio(false);
  cin.tie(0);
  ggen = mt19937(1337);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 4
1 1 0 0
0 0 0 1


(G.2) Fast Input

2 4
1 1 0 0
0 0 0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:256000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)(1e9 + 1e6); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long LINF = (long long)(4e18); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-9; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 ggen; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000007; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int add(int a, int b, int m = MOD) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int res = a + b; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (res >= m) res -= m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int sub(int a, int b, int m = MOD) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int res = a - b; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (res < 0) res += m; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int mul(int a, int b, int m = MOD) { return (long long)a * b % m; } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 105000; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int k, n; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int mas[MAXN]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int full; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int c[MAXN]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &k); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 27 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 0; j < k; ++j) { /* line 28 slow_hit_count: 10, fast_hit_count: 10 */
      int q; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      scanf("%d", &q); /* line 30 slow_hit_count: 8, fast_hit_count: 8 */
      mas[i] <<= 1; /* line 31 slow_hit_count: 8, fast_hit_count: 8 */
      mas[i] |= q; /* line 32 slow_hit_count: 8, fast_hit_count: 8 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
bool check_mask(int mask) { /* line 36 slow_hit_count: 4098, fast_hit_count: 1 */
  int cnt[4] = {0, 0, 0, 0}; /* line 37 slow_hit_count: 4098, fast_hit_count: 1 */
  int pr = 0; /* line 38 slow_hit_count: 4098, fast_hit_count: 1 */
  for (int i = 0; i < (1 << k); ++i) { /* line 39 slow_hit_count: 10264, fast_hit_count: 17 */
    if (mask & (1 << i)) { /* line 40 slow_hit_count: 10261, fast_hit_count: 16 */
      if (!c[i]) { /* line 41 slow_hit_count: 5122, fast_hit_count: 1 */
        return false; /* line 42 slow_hit_count: 4095, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      ++pr; /* line 44 slow_hit_count: 1027, fast_hit_count: 1 */
      for (int j = 0; j < k; ++j) { /* line 45 slow_hit_count: 5135, fast_hit_count: 5 */
        if (i & (1 << j)) { /* line 46 slow_hit_count: 4108, fast_hit_count: 4 */
          ++cnt[j]; /* line 47 slow_hit_count: 1029, fast_hit_count: 0 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < k; ++i) { /* line 52 slow_hit_count: 9, fast_hit_count: 5 */
    if (cnt[i] * 2 > pr) { /* line 53 slow_hit_count: 8, fast_hit_count: 4 */
      return false; /* line 54 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  init(); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  full = (1 << k) - 1; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 62 slow_hit_count: 3, fast_hit_count: 3 */
    ++c[mas[i]]; /* line 63 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int mask = 1; mask <= (1 << full); ++mask) { /* line 65 slow_hit_count: 4098, fast_hit_count: 1 */
    if (check_mask(mask)) { /* line 66 slow_hit_count: 4098, fast_hit_count: 1 */
      printf("YES\n"); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
      return; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  printf("NO\n"); /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  iostream::sync_with_stdio(false); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  ggen = mt19937(1337); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of identifying performance bottlenecks in the given C code, we'll analyze the hit count information from both the slow and fast inputs. We'll then derive natural language performance invariants to explain what could trigger slowdowns.

### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon examining the provided hit count data, it's clear that certain lines experience significantly more hits in the slow input compared to the fast input. The key observations are:

1. **`check_mask(int mask)` Function:**
   - **Lines 36-58**: The function `check_mask` is called 4098 times for the slow input, compared to just once for the fast input. This suggests that this function is a major contributor to the slowdown.
   - **Line 39**: The loop `for (int i = 0; i < (1 << k); ++i)` is executed 10264 times in the slow input, indicating extensive iterations over the possible problem sets.
   - **Line 40**: The conditional check `if (mask & (1 << i))` is hit 10261 times, suggesting that many masks are being evaluated.
   - **Line 42**: The `return false;` statement is executed 4095 times, meaning many masks fail early, yet the total number of iterations is still high.

2. **`solve()` Function:**
   - **Lines 65-70**: The loop `for (int mask = 1; mask <= (1 << full); ++mask)` is iterated 4098 times for the slow input, compared to just once for the fast input. This indicates that the number of masks being evaluated is much larger in the slow run.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance invariants that characterize conditions under which the program might slow down:

1. **High Combinatorial Evaluations:**
   - **Invariant:** "When the number of problem knowledge combinations that need to be evaluated grows exponentially, the performance may degrade significantly. This is particularly true when each team knows a distinct subset of problems, leading to an increase in the number of potential problem sets to be evaluated."
   - **Explanation:** The loop in `solve()` iterates over all possible subsets of problems, which grows exponentially with `k`. If each team knows a unique set of problems, more combinations must be checked, increasing computation time.

2. **Repeated Early Exits:**
   - **Invariant:** "If a large portion of the mask evaluations in `check_mask` results in early exits due to knowledge constraints being violated, the program can experience extensive redundant computations. This occurs when many subsets are immediately deemed invalid."
   - **Explanation:** Early exits are frequent, as indicated by the high hit count for `return false;` in `check_mask`. Evaluating many masks that quickly exit without contributing to a solution can slow down the process unnecessarily.

3. **Bitmask Complexity:**
   - **Invariant:** "When the bitmask representation leads to a high number of nontrivial configurations due to sparse problem knowledge across teams, processing can become computationally expensive."
   - **Explanation:** The nested loops over masks and team knowledge combinations require extensive bitwise operations, which become costly when there are many unique configurations to process.

These performance invariants provide insight into how the structure of the problem's input and the algorithm's design can lead to significant performance issues. By understanding these conditions, one can better anticipate and mitigate slow execution paths in similar combinatorial or bitmask-based algorithms.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.

k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.

Determine if Snark and Philip can make an interesting problemset!

Input

The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.

Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.

Output

Print "YES" (quotes for clarity), if it is possible to make an interesting problemset, and "NO" otherwise.

You can print each character either upper- or lowercase ("YeS" and "yes" are valid when the answer is "YES").

Examples

Input

5 3
1 0 1
1 1 0
1 0 0
1 0 0
1 0 0


Output

NO


Input

3 2
1 0
1 1
0 1


Output

YES

Note

In the first example you can't make any interesting problemset, because the first team knows all problems.

In the second example you can choose the first and the third problems.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characteristic invariants derived earlier into C++ code snippets and then integrate them into the original program.

### Phase 3: Implementing Performance Invariants as C++ Checks

We have derived three key performance invariants. Below is the C++ implementation for each:

1. **High Combinatorial Evaluations:**

   ```cpp
   void check_high_combinatorial_evaluations(int k, int maskEvaluations) {
       // Check if the number of mask evaluations is unusually high considering k
       if (maskEvaluations > (1 << (k * 2))) { // Arbitrary threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered due to high combinatorial evaluations!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Early Exits:**

   ```cpp
   void check_repeated_early_exits(int earlyExits, int maskEvaluations) {
       // Check if a large portion of the mask evaluations results in early exits
       if (earlyExits > (maskEvaluations * 0.75)) { // 75% early exits threshold
           cerr << "Warning: Performance bottleneck condition triggered due to repeated early exits!" << endl;
           abort();
       }
   }
   ```

3. **Bitmask Complexity:**

   ```cpp
   void check_bitmask_complexity(int k, int validMasks) {
       // Check if the number of valid bitmask configurations is unexpectedly high
       if (validMasks > (1 << k)) { // Threshold based on the number of teams
           cerr << "Warning: Performance bottleneck condition triggered due to bitmask complexity!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Program

Below is the original program, now instrumented with the performance checks:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:256000000")
using namespace std;
const int INF = (int)(1e9 + 1e6);
const long long LINF = (long long)(4e18);
const double EPS = 1e-9;
mt19937 ggen;
const int MOD = 1000000007;
int add(int a, int b, int m = MOD) {
    int res = a + b;
    if (res >= m) res -= m;
    return res;
}
int sub(int a, int b, int m = MOD) {
    int res = a - b;
    if (res < 0) res += m;
    return res;
}
int mul(int a, int b, int m = MOD) { return (long long)a * b % m; }
const int MAXN = 105000;
int k, n;
int mas[MAXN];
int full;
int c[MAXN];

void check_high_combinatorial_evaluations(int k, int maskEvaluations) {
    if (maskEvaluations > (1 << (k * 2))) {
        cerr << "Warning: Performance bottleneck condition triggered due to high combinatorial evaluations!" << endl;
        abort();
    }
}

void check_repeated_early_exits(int earlyExits, int maskEvaluations) {
    if (earlyExits > (maskEvaluations * 0.75)) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated early exits!" << endl;
        abort();
    }
}

void check_bitmask_complexity(int k, int validMasks) {
    if (validMasks > (1 << k)) {
        cerr << "Warning: Performance bottleneck condition triggered due to bitmask complexity!" << endl;
        abort();
    }
}

void init() {
    scanf("%d%d", &n, &k);
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < k; ++j) {
            int q;
            scanf("%d", &q);
            mas[i] <<= 1;
            mas[i] |= q;
        }
    }
}

bool check_mask(int mask, int &earlyExits) {
    int cnt[4] = {0, 0, 0, 0};
    int pr = 0;
    for (int i = 0; i < (1 << k); ++i) {
        if (mask & (1 << i)) {
            if (!c[i]) {
                ++earlyExits;
                return false;
            }
            ++pr;
            for (int j = 0; j < k; ++j) {
                if (i & (1 << j)) {
                    ++cnt[j];
                }
            }
        }
    }
    for (int i = 0; i < k; ++i) {
        if (cnt[i] * 2 > pr) {
            ++earlyExits;
            return false;
        }
    }
    return true;
}

void solve() {
    init();
    full = (1 << k) - 1;
    for (int i = 1; i <= n; ++i) {
        ++c[mas[i]];
    }
    int maskEvaluations = 0;
    int earlyExits = 0;
    int validMasks = 0;

    for (int mask = 1; mask <= (1 << full); ++mask) {
        ++maskEvaluations;
        if (check_mask(mask, earlyExits)) {
            ++validMasks;
            printf("YES\n");
            return;
        }
    }

    // Placing checks after the loops to catch performance bottlenecks
    check_high_combinatorial_evaluations(k, maskEvaluations);
    check_repeated_early_exits(earlyExits, maskEvaluations);
    check_bitmask_complexity(k, validMasks);

    printf("NO\n");
}

int main() {
    iostream::sync_with_stdio(false);
    cin.tie(0);
    ggen = mt19937(1337);
    solve();
    return 0;
}
```

### Explanation of the Integration:

- **Combinatorial Evaluations Check:** After iterating through all possible masks, we check if the number of evaluations exceeds expected thresholds given `k`. This detects if the problem's combinatorial nature is causing excessive checks.
  
- **Repeated Early Exits Check:** During mask evaluations, we count early exits due to constraints. If these constitute a large portion of evaluations (e.g., over 75%), it flags a potential inefficiency.

- **Bitmask Complexity Check:** We count valid mask configurations. If unexpectedly high, it may indicate inefficiency due to the complexity of bitmask operations.

These checks are placed strategically outside of tight loops to avoid additional overhead during critical execution paths, thereby preserving performance while detecting potential slowdowns.

