system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

An array is called beautiful if all the elements in the array are equal.

You can transform an array using the following steps any number of times: 

  1. Choose two indices i and j (1 ≤ i,j ≤ n), and an integer x (1 ≤ x ≤ a_i). Let i be the source index and j be the sink index. 
  2. Decrease the i-th element by x, and increase the j-th element by x. The resulting values at i-th and j-th index are a_i-x and a_j+x respectively. 
  3. The cost of this operation is x ⋅ |j-i| . 
  4. Now the i-th index can no longer be the sink and the j-th index can no longer be the source. 

The total cost of a transformation is the sum of all the costs in step 3.

For example, array [0, 2, 3, 3] can be transformed into a beautiful array [2, 2, 2, 2] with total cost 1 ⋅ |1-3| + 1 ⋅ |1-4| = 5.

An array is called balanced, if it can be transformed into a beautiful array, and the cost of such transformation is uniquely defined. In other words, the minimum cost of transformation into a beautiful array equals the maximum cost.

You are given an array a_1, a_2, …, a_n of length n, consisting of non-negative integers. Your task is to find the number of balanced arrays which are permutations of the given array. Two arrays are considered different, if elements at some position differ. Since the answer can be large, output it modulo 10^9 + 7.

Input

The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. 

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9).

Output

Output a single integer — the number of balanced permutations modulo 10^9+7.

Examples

Input


3
1 2 3


Output


6

Input


4
0 4 0 4


Output


2

Input


5
0 11 12 13 14


Output


120

Note

In the first example, [1, 2, 3] is a valid permutation as we can consider the index with value 3 as the source and index with value 1 as the sink. Thus, after conversion we get a beautiful array [2, 2, 2], and the total cost would be 2. We can show that this is the only transformation of this array that leads to a beautiful array. Similarly, we can check for other permutations too.

In the second example, [0, 0, 4, 4] and [4, 4, 0, 0] are balanced permutations.

In the third example, all permutations are balanced.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;

#define fast_io {ios::sync_with_stdio(0); cin.tie(0);}
#define all(v)  v.begin(),v.end()
#define pb push_back
#define pf push_front
#define bs binary_search
#define popb pop_back
#define F first
#define S second
#define ccc cout<<1<<" ";
#define prin(v) {forn(i,v.size()) cout<<v[i]<<" "; cout<<endl;}
#define forn(i,n) for(int i=0;i<(n);i++)
#define len() length()

typedef long long ll;
typedef vector<int> vint;
typedef vector<ll> vll;
typedef vector<bool> vbool;
typedef vector<double> vdouble;
typedef pair<double,double> pdd;
typedef pair<bool,bool> pbb;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int INF = INT_MAX;
const ll MOD =  1e9+7;
const ll MOD_2 = 998244353;
int N = 1e5 + 10;

ll binpow(ll a, ll y)
{
   ll res = 1;
   while(y > 0)
   {
     if(y & 1) res = (res * a) % MOD;
     a = (a * a) % MOD;
     y /= 2;
   }
   return res;
}

int main()
{
   ll n; cin >> n;
   vll a(n);
   ll s = 0;
   forn(i,n){
     cin >> a[i];
     s += a[i];
   }
   
   if(s % n > 0){
     cout << 0;
     return 0;
   }
   
   vll fact(N);
   fact[0] = 1;
   for(ll i = 1; i < N; i++)
   {
     fact[i] = (fact[i-1] * i) % MOD;
   }
   
   map < ll, ll > mp;
   ll mn = 0, sr = 0, mx = 0;
   
   forn(i,n)
   {
     if(a[i] < s / n) mn++;
     if(a[i] > s / n) mx++;
     if(a[i] == s / n) sr++;
     
     mp[a[i]]++;
   }
   
   ll d = 1;
   for(auto u : mp)
   {
     d = (d * fact[u.S]) % MOD;
   }
   
   ll ans = (fact[mn] * fact[mx]) % MOD;
   
   
   if(mn <= 1 || mx <= 1)
   {
     ans = fact[n];
     ans = (ans * binpow(d, MOD - 2)) % MOD;
     cout << ans;
     return 0;
   }
   ll z = (fact[sr] * fact[n - sr]) % MOD;
   ll C = (fact[n] * binpow(z, MOD - 2)) % MOD;
   
   ans = (ans * C) % MOD;
   ans = (ans * fact[sr]) % MOD;
   ans = (ans * binpow(d, MOD - 2)) % MOD;
   ans = (ans * 2) % MOD;
   
   cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
0 1 0 5 9


(G.2) Fast Input

5
0 1 1 5 9


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define fast_io {ios::sync_with_stdio(0); cin.tie(0);} /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#define all(v)  v.begin(),v.end() /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#define pb push_back /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#define pf push_front /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#define bs binary_search /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#define popb pop_back /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#define F first /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#define S second /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#define ccc cout<<1<<" "; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
#define prin(v) {forn(i,v.size()) cout<<v[i]<<" "; cout<<endl;} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
#define forn(i,n) for(int i=0;i<(n);i++) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
#define len() length() /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long ll; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<int> vint; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<ll> vll; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<bool> vbool; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<double> vdouble; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<double,double> pdd; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<bool,bool> pbb; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<int,int> pii; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<ll,ll> pll; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = INT_MAX; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
const ll MOD =  1e9+7; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const ll MOD_2 = 998244353; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int N = 1e5 + 10; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
ll binpow(ll a, ll y) /* line 31 slow_hit_count: 2, fast_hit_count: 0 */
{ /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
   ll res = 1; /* line 33 slow_hit_count: 2, fast_hit_count: 0 */
   while(y > 0) /* line 34 slow_hit_count: 62, fast_hit_count: 0 */
   { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
     if(y & 1) res = (res * a) % MOD; /* line 36 slow_hit_count: 60, fast_hit_count: 0 */
     a = (a * a) % MOD; /* line 37 slow_hit_count: 60, fast_hit_count: 0 */
     y /= 2; /* line 38 slow_hit_count: 60, fast_hit_count: 0 */
   } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
   return res; /* line 40 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
   ll n; cin >> n; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
   vll a(n); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
   ll s = 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
   forn(i,n){ /* line 48 slow_hit_count: 6, fast_hit_count: 6 */
     cin >> a[i]; /* line 49 slow_hit_count: 5, fast_hit_count: 5 */
     s += a[i]; /* line 50 slow_hit_count: 5, fast_hit_count: 5 */
   } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
   if(s % n > 0){ /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
     cout << 0; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
     return 0; /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
   } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
   vll fact(N); /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
   fact[0] = 1; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
   for(ll i = 1; i < N; i++) /* line 60 slow_hit_count: 100010, fast_hit_count: 0 */
   { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
     fact[i] = (fact[i-1] * i) % MOD; /* line 62 slow_hit_count: 100009, fast_hit_count: 0 */
   } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
   map < ll, ll > mp; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
   ll mn = 0, sr = 0, mx = 0; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
    /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
   forn(i,n) /* line 68 slow_hit_count: 6, fast_hit_count: 0 */
   { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
     if(a[i] < s / n) mn++; /* line 70 slow_hit_count: 5, fast_hit_count: 0 */
     if(a[i] > s / n) mx++; /* line 71 slow_hit_count: 5, fast_hit_count: 0 */
     if(a[i] == s / n) sr++; /* line 72 slow_hit_count: 5, fast_hit_count: 0 */
      /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
     mp[a[i]]++; /* line 74 slow_hit_count: 5, fast_hit_count: 0 */
   } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
   ll d = 1; /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
   for(auto u : mp) /* line 78 slow_hit_count: 5, fast_hit_count: 0 */
   { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
     d = (d * fact[u.S]) % MOD; /* line 80 slow_hit_count: 4, fast_hit_count: 0 */
   } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
   ll ans = (fact[mn] * fact[mx]) % MOD; /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
    /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
   if(mn <= 1 || mx <= 1) /* line 86 slow_hit_count: 1, fast_hit_count: 0 */
   { /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
     ans = fact[n]; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
     ans = (ans * binpow(d, MOD - 2)) % MOD; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
     cout << ans; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
     return 0; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
   } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
   ll z = (fact[sr] * fact[n - sr]) % MOD; /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
   ll C = (fact[n] * binpow(z, MOD - 2)) % MOD; /* line 94 slow_hit_count: 1, fast_hit_count: 0 */
    /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
   ans = (ans * C) % MOD; /* line 96 slow_hit_count: 1, fast_hit_count: 0 */
   ans = (ans * fact[sr]) % MOD; /* line 97 slow_hit_count: 1, fast_hit_count: 0 */
   ans = (ans * binpow(d, MOD - 2)) % MOD; /* line 98 slow_hit_count: 1, fast_hit_count: 0 */
   ans = (ans * 2) % MOD; /* line 99 slow_hit_count: 1, fast_hit_count: 0 */
    /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
   cout << ans; /* line 101 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 102 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks present in the given C program, let's break down the tasks into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The `binpow` function is called multiple times for the slow input (lines 31, 33-38), indicating that it is a costly operation in this context.
   - The loop to precompute factorials (lines 60-62) is executed completely for the slow input, which suggests an overhead in precomputation.
   - Lines 68-74, which compute `mn`, `mx`, and `sr`, are executed only for the slow input, indicating more complex logic for these calculations.

2. **Potential Bottlenecks:**
   - The repeated calls to `binpow` for modular inverses are computationally expensive.
   - The map `mp` and its usage (lines 65, 74) indicate that the distribution of elements significantly affects performance.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**

   - **Invariant 1: Complex Element Distribution**
     - "If the array contains a highly uneven distribution of numbers relative to their mean average, with several elements differing significantly from the mean, the computation of `mn`, `mx`, and `sr` becomes more costly. This complexity arises when a significant number of elements are either well above or below the mean, causing the program to branch into more expensive computations."
     
   - **Invariant 2: Expensive Modular Operations**
     - "If the factorial of `n` needs to be computed and used multiple times for large values of `n`, the program may slow down due to the overhead of repeated modular inverse calculations. This is exacerbated if the array permits many permutations with differing transformation costs."
     
   - **Invariant 3: Large Precomputation Overhead**
     - "If precomputation of factorials (up to `N`) is unnecessary due to early exits (like when `s % n > 0`), but still completed, it represents an inefficient use of resources. Consider limiting this to scenarios where the full factorial computation is needed based on early verification of conditions."

2. **Considerations for Inputs and Constraints:**
   - These invariants do not target specific numeric thresholds from the slow input but instead focus on the structural traits of the input data that might lead to inefficiencies.
   - Given the constraints (`n <= 10^5`), ensure that operations like precomputing factorials are only performed when absolutely necessary.

These performance-characterizing invariants provide insights into scenarios where the given C program might exhibit slow execution, potentially aiding in optimization and guiding targeted testing or fuzzing efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
An array is called beautiful if all the elements in the array are equal.

You can transform an array using the following steps any number of times: 

  1. Choose two indices i and j (1 ≤ i,j ≤ n), and an integer x (1 ≤ x ≤ a_i). Let i be the source index and j be the sink index. 
  2. Decrease the i-th element by x, and increase the j-th element by x. The resulting values at i-th and j-th index are a_i-x and a_j+x respectively. 
  3. The cost of this operation is x ⋅ |j-i| . 
  4. Now the i-th index can no longer be the sink and the j-th index can no longer be the source. 

The total cost of a transformation is the sum of all the costs in step 3.

For example, array [0, 2, 3, 3] can be transformed into a beautiful array [2, 2, 2, 2] with total cost 1 ⋅ |1-3| + 1 ⋅ |1-4| = 5.

An array is called balanced, if it can be transformed into a beautiful array, and the cost of such transformation is uniquely defined. In other words, the minimum cost of transformation into a beautiful array equals the maximum cost.

You are given an array a_1, a_2, …, a_n of length n, consisting of non-negative integers. Your task is to find the number of balanced arrays which are permutations of the given array. Two arrays are considered different, if elements at some position differ. Since the answer can be large, output it modulo 10^9 + 7.

Input

The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. 

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9).

Output

Output a single integer — the number of balanced permutations modulo 10^9+7.

Examples

Input


3
1 2 3


Output


6

Input


4
0 4 0 4


Output


2

Input


5
0 11 12 13 14


Output


120

Note

In the first example, [1, 2, 3] is a valid permutation as we can consider the index with value 3 as the source and index with value 1 as the sink. Thus, after conversion we get a beautiful array [2, 2, 2], and the total cost would be 2. We can show that this is the only transformation of this array that leads to a beautiful array. Similarly, we can check for other permutations too.

In the second example, [0, 0, 4, 4] and [4, 4, 0, 0] are balanced permutations.

In the third example, all permutations are balanced.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the previously derived natural language invariants, here is the C++ code for runtime checks:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <cmath>

using namespace std;

typedef long long ll;
const ll MOD = 1e9+7;

// Function to check if the distribution of elements is too uneven
void check_distribution_invariant(const vector<ll>& a, ll s, ll n) {
    ll mean = s / n;
    ll min_count = 0, max_count = 0;
    for (ll i : a) {
        if (i < mean) min_count++;
        if (i > mean) max_count++;
    }
    if (min_count > n / 2 || max_count > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - uneven distribution of elements!" << endl;
        abort();
    }
}

// Function to check for expensive modular operations
void check_modular_operations_invariant(ll n, ll mn, ll mx) {
    if (mn > n / 2 || mx > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - expensive modular operations!" << endl;
        abort();
    }
}

// Function to check precomputation overhead
void check_precomputation_invariant(ll s, ll n) {
    if (s % n != 0) {
        cerr << "Warning: Performance bottleneck condition triggered - unnecessary precomputation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now we will integrate these checkers into the original C++ program at appropriate locations to monitor performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<ll> vll;
const ll MOD = 1e9+7;
int N = 1e5 + 10;

ll binpow(ll a, ll y)
{
   ll res = 1;
   while(y > 0)
   {
     if(y & 1) res = (res * a) % MOD;
     a = (a * a) % MOD;
     y /= 2;
   }
   return res;
}

// Function to check if the distribution of elements is too uneven
void check_distribution_invariant(const vector<ll>& a, ll s, ll n) {
    ll mean = s / n;
    ll min_count = 0, max_count = 0;
    for (ll i : a) {
        if (i < mean) min_count++;
        if (i > mean) max_count++;
    }
    if (min_count > n / 2 || max_count > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - uneven distribution of elements!" << endl;
        abort();
    }
}

// Function to check for expensive modular operations
void check_modular_operations_invariant(ll n, ll mn, ll mx) {
    if (mn > n / 2 || mx > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - expensive modular operations!" << endl;
        abort();
    }
}

// Function to check precomputation overhead
void check_precomputation_invariant(ll s, ll n) {
    if (s % n != 0) {
        cerr << "Warning: Performance bottleneck condition triggered - unnecessary precomputation!" << endl;
        abort();
    }
}

int main()
{
   ll n; cin >> n;
   vll a(n);
   ll s = 0;
   for(int i = 0; i < n; i++){
     cin >> a[i];
     s += a[i];
   }
   
   check_precomputation_invariant(s, n); // Placed before factorial computation

   if(s % n > 0){
     cout << 0;
     return 0;
   }
   
   vll fact(N);
   fact[0] = 1;
   for(ll i = 1; i < N; i++)
   {
     fact[i] = (fact[i-1] * i) % MOD;
   }
   
   map < ll, ll > mp;
   ll mn = 0, sr = 0, mx = 0;
   
   for(int i = 0; i < n; i++)
   {
     if(a[i] < s / n) mn++;
     if(a[i] > s / n) mx++;
     if(a[i] == s / n) sr++;
     
     mp[a[i]]++;
   }
   
   check_distribution_invariant(a, s, n); // Placed after determining distribution
   check_modular_operations_invariant(n, mn, mx); // Placed after calculating mn and mx

   ll d = 1;
   for(auto u : mp)
   {
     d = (d * fact[u.second]) % MOD;
   }
   
   ll ans = (fact[mn] * fact[mx]) % MOD;
   
   if(mn <= 1 || mx <= 1)
   {
     ans = fact[n];
     ans = (ans * binpow(d, MOD - 2)) % MOD;
     cout << ans;
     return 0;
   }

   ll z = (fact[sr] * fact[n - sr]) % MOD;
   ll C = (fact[n] * binpow(z, MOD - 2)) % MOD;
   
   ans = (ans * C) % MOD;
   ans = (ans * fact[sr]) % MOD;
   ans = (ans * binpow(d, MOD - 2)) % MOD;
   ans = (ans * 2) % MOD;
   
   cout << ans;
}
```

### Explanation:
- **`check_precomputation_invariant`:** Placed immediately after calculating the total sum `s`, it ensures unnecessary precomputation does not occur if early exit conditions are met.
- **`check_distribution_invariant`:** Placed after mapping element counts, it verifies if the distribution is too uneven, indicating potential performance issues.
- **`check_modular_operations_invariant`:** Placed after calculating `mn` and `mx`, it ensures that the program doesn't enter expensive modular operations if not needed. 

These checks help detect performance bottlenecks dynamically, guiding further optimization and testing strategies.

