system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let a_1, …, a_n be an array of n positive integers. In one operation, you can choose an index i such that a_i = i, and remove a_i from the array (after the removal, the remaining parts are concatenated).

The weight of a is defined as the maximum number of elements you can remove.

You must answer q independent queries (x, y): after replacing the x first elements of a and the y last elements of a by n+1 (making them impossible to remove), what would be the weight of a?

Input

The first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.

The i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n).

Output

Print q lines, i-th line should contain a single integer — the answer to the i-th query.

Examples

Input


13 5
2 2 3 9 5 4 6 5 7 8 3 11 13
3 1
0 0
2 4
5 0
0 12


Output


5
11
6
1
0


Input


5 2
1 4 1 2 4
0 0
1 0


Output


2
0

Note

Explanation of the first query:

After making first x = 3 and last y = 1 elements impossible to remove, a becomes [×, ×, ×, 9, 5, 4, 6, 5, 7, 8, 3, 11, ×] (we represent 14 as × for clarity).

Here is a strategy that removes 5 elements (the element removed is colored in red):

  * [×, ×, ×, 9, \color{red}{5}, 4, 6, 5, 7, 8, 3, 11, ×] 
  * [×, ×, ×, 9, 4, 6, 5, 7, 8, 3, \color{red}{11}, ×] 
  * [×, ×, ×, 9, 4, \color{red}{6}, 5, 7, 8, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 7, \color{red}{8}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, \color{red}{7}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 3, ×] (final state) 



It is impossible to remove more than 5 elements, hence the weight is 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long oo = 1e9 + 7, o = 300005;
long n, q, a, rm[4 * o], kq[o];
pair<pair<long, long>, long> tv[o];
pair<long, long> mx[4 * o];
void downmx(long first) {
  mx[2 * first].first += mx[first].second;
  mx[2 * first].second += mx[first].second;
  mx[2 * first + 1].first += mx[first].second;
  mx[2 * first + 1].second += mx[first].second;
  mx[first].second = 0;
}
void upmx(long first, long l, long r, long u, long v, long gt) {
  if (v < l || u > r) return;
  if (u <= l && r <= v) {
    mx[first].first += gt;
    mx[first].second += gt;
    return;
  }
  downmx(first);
  long mid = (l + r) >> 1;
  upmx(2 * first, l, mid, u, v, gt);
  upmx(2 * first + 1, mid + 1, r, u, v, gt);
  mx[first].first = max(mx[2 * first].first, mx[2 * first + 1].first);
}
long getmx(long first, long l, long r, long u, long v) {
  if (v < l || u > r) return -oo;
  if (u <= l && r <= v) return mx[first].first;
  downmx(first);
  long mid = (l + r) >> 1;
  long g1 = getmx(2 * first, l, mid, u, v);
  long g2 = getmx(2 * first + 1, mid + 1, r, u, v);
  return max(g1, g2);
}
void uprm(long first, long l, long r, long vt, long gt) {
  if (vt < l || vt > r) return;
  if (l == r) {
    rm[first] += gt;
    return;
  }
  long mid = (l + r) >> 1;
  uprm(2 * first, l, mid, vt, gt);
  uprm(2 * first + 1, mid + 1, r, vt, gt);
  rm[first] = rm[2 * first] + rm[2 * first + 1];
}
long getrm(long first, long l, long r, long u, long v) {
  if (v < l || u > r || u > v) return 0;
  if (u <= l && r <= v) return rm[first];
  long mid = (l + r) >> 1;
  long g1 = getrm(2 * first, l, mid, u, v);
  long g2 = getrm(2 * first + 1, mid + 1, r, u, v);
  return g1 + g2;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> q;
  for (long i = 1; i <= n; i++) {
    cin >> a;
    if (a > i) a = -oo;
    upmx(1, 1, n, i, i, a - i);
  }
  for (long i = 1; i <= q; i++) {
    cin >> tv[i].first.first >> tv[i].first.second;
    tv[i].first.first += 1;
    tv[i].first.second = n - tv[i].first.second;
    tv[i].second = i;
  }
  sort(tv + 1, tv + 1 + q);
  for (long i = q; i >= 1; i--) {
    while (1) {
      long l = tv[i].first.first, r = n, mid;
      while (l < r) {
        long mid = (l + r + 1) >> 1;
        if (getmx(1, 1, n, mid, n) >= 0)
          l = mid;
        else
          r = mid - 1;
      }
      if (getmx(1, 1, n, l, n) != 0) break;
      upmx(1, 1, n, l, l, -oo);
      upmx(1, 1, n, l + 1, n, 1);
      uprm(1, 1, n, l, 1);
    }
    kq[tv[i].second] = getrm(1, 1, n, tv[i].first.first, tv[i].first.second);
  }
  for (long i = 1; i <= q; i++) cout << kq[i] << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30 10
1 1 3 3 4 0 1 8 2 6 11 0 2 6 12 11 8 5 11 3 14 8 16 13 14 25 16 2 8 17
6 3
0 15
1 0
3 3
12 16
1 0
17 3
14 13
0 22
3 10


(G.2) Fast Input

5 2
1 8 2 2 4
1 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long oo = 1e9 + 7, o = 300005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long n, q, a, rm[4 * o], kq[o]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<pair<long, long>, long> tv[o]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
pair<long, long> mx[4 * o]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void downmx(long first) { /* line 7 slow_hit_count: 988, fast_hit_count: 21 */
  mx[2 * first].first += mx[first].second; /* line 8 slow_hit_count: 988, fast_hit_count: 21 */
  mx[2 * first].second += mx[first].second; /* line 9 slow_hit_count: 988, fast_hit_count: 21 */
  mx[2 * first + 1].first += mx[first].second; /* line 10 slow_hit_count: 988, fast_hit_count: 21 */
  mx[2 * first + 1].second += mx[first].second; /* line 11 slow_hit_count: 988, fast_hit_count: 21 */
  mx[first].second = 0; /* line 12 slow_hit_count: 988, fast_hit_count: 21 */
} /* line 13 slow_hit_count: 988, fast_hit_count: 21 */
void upmx(long first, long l, long r, long u, long v, long gt) { /* line 14 slow_hit_count: 730, fast_hit_count: 29 */
  if (v < l || u > r) return; /* line 15 slow_hit_count: 730, fast_hit_count: 29 */
  if (u <= l && r <= v) { /* line 16 slow_hit_count: 433, fast_hit_count: 17 */
    mx[first].first += gt; /* line 17 slow_hit_count: 104, fast_hit_count: 5 */
    mx[first].second += gt; /* line 18 slow_hit_count: 104, fast_hit_count: 5 */
    return; /* line 19 slow_hit_count: 104, fast_hit_count: 5 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  downmx(first); /* line 21 slow_hit_count: 329, fast_hit_count: 12 */
  long mid = (l + r) >> 1; /* line 22 slow_hit_count: 329, fast_hit_count: 12 */
  upmx(2 * first, l, mid, u, v, gt); /* line 23 slow_hit_count: 329, fast_hit_count: 12 */
  upmx(2 * first + 1, mid + 1, r, u, v, gt); /* line 24 slow_hit_count: 329, fast_hit_count: 12 */
  mx[first].first = max(mx[2 * first].first, mx[2 * first + 1].first); /* line 25 slow_hit_count: 329, fast_hit_count: 12 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long getmx(long first, long l, long r, long u, long v) { /* line 27 slow_hit_count: 1491, fast_hit_count: 23 */
  if (v < l || u > r) return -oo; /* line 28 slow_hit_count: 1491, fast_hit_count: 23 */
  if (u <= l && r <= v) return mx[first].first; /* line 29 slow_hit_count: 1106, fast_hit_count: 18 */
  downmx(first); /* line 30 slow_hit_count: 659, fast_hit_count: 9 */
  long mid = (l + r) >> 1; /* line 31 slow_hit_count: 659, fast_hit_count: 9 */
  long g1 = getmx(2 * first, l, mid, u, v); /* line 32 slow_hit_count: 659, fast_hit_count: 9 */
  long g2 = getmx(2 * first + 1, mid + 1, r, u, v); /* line 33 slow_hit_count: 659, fast_hit_count: 9 */
  return max(g1, g2); /* line 34 slow_hit_count: 659, fast_hit_count: 9 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void uprm(long first, long l, long r, long vt, long gt) { /* line 36 slow_hit_count: 227, fast_hit_count: 0 */
  if (vt < l || vt > r) return; /* line 37 slow_hit_count: 227, fast_hit_count: 0 */
  if (l == r) { /* line 38 slow_hit_count: 124, fast_hit_count: 0 */
    rm[first] += gt; /* line 39 slow_hit_count: 21, fast_hit_count: 0 */
    return; /* line 40 slow_hit_count: 21, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  long mid = (l + r) >> 1; /* line 42 slow_hit_count: 103, fast_hit_count: 0 */
  uprm(2 * first, l, mid, vt, gt); /* line 43 slow_hit_count: 103, fast_hit_count: 0 */
  uprm(2 * first + 1, mid + 1, r, vt, gt); /* line 44 slow_hit_count: 103, fast_hit_count: 0 */
  rm[first] = rm[2 * first] + rm[2 * first + 1]; /* line 45 slow_hit_count: 103, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
long getrm(long first, long l, long r, long u, long v) { /* line 47 slow_hit_count: 112, fast_hit_count: 14 */
  if (v < l || u > r || u > v) return 0; /* line 48 slow_hit_count: 112, fast_hit_count: 14 */
  if (u <= l && r <= v) return rm[first]; /* line 49 slow_hit_count: 83, fast_hit_count: 10 */
  long mid = (l + r) >> 1; /* line 50 slow_hit_count: 51, fast_hit_count: 6 */
  long g1 = getrm(2 * first, l, mid, u, v); /* line 51 slow_hit_count: 51, fast_hit_count: 6 */
  long g2 = getrm(2 * first + 1, mid + 1, r, u, v); /* line 52 slow_hit_count: 51, fast_hit_count: 6 */
  return g1 + g2; /* line 53 slow_hit_count: 51, fast_hit_count: 6 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> q; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  for (long i = 1; i <= n; i++) { /* line 60 slow_hit_count: 31, fast_hit_count: 6 */
    cin >> a; /* line 61 slow_hit_count: 30, fast_hit_count: 5 */
    if (a > i) a = -oo; /* line 62 slow_hit_count: 30, fast_hit_count: 5 */
    upmx(1, 1, n, i, i, a - i); /* line 63 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (long i = 1; i <= q; i++) { /* line 65 slow_hit_count: 11, fast_hit_count: 3 */
    cin >> tv[i].first.first >> tv[i].first.second; /* line 66 slow_hit_count: 10, fast_hit_count: 2 */
    tv[i].first.first += 1; /* line 67 slow_hit_count: 10, fast_hit_count: 2 */
    tv[i].first.second = n - tv[i].first.second; /* line 68 slow_hit_count: 10, fast_hit_count: 2 */
    tv[i].second = i; /* line 69 slow_hit_count: 10, fast_hit_count: 2 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  sort(tv + 1, tv + 1 + q); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (long i = q; i >= 1; i--) { /* line 72 slow_hit_count: 11, fast_hit_count: 3 */
    while (1) { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      long l = tv[i].first.first, r = n, mid; /* line 74 slow_hit_count: 31, fast_hit_count: 2 */
      while (l < r) { /* line 75 slow_hit_count: 173, fast_hit_count: 5 */
        long mid = (l + r + 1) >> 1; /* line 76 slow_hit_count: 142, fast_hit_count: 3 */
        if (getmx(1, 1, n, mid, n) >= 0) /* line 77 slow_hit_count: 142, fast_hit_count: 3 */
          l = mid; /* line 78 slow_hit_count: 48, fast_hit_count: 0 */
        else /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          r = mid - 1; /* line 80 slow_hit_count: 94, fast_hit_count: 3 */
      } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      if (getmx(1, 1, n, l, n) != 0) break; /* line 82 slow_hit_count: 31, fast_hit_count: 2 */
      upmx(1, 1, n, l, l, -oo); /* line 83 slow_hit_count: 21, fast_hit_count: 0 */
      upmx(1, 1, n, l + 1, n, 1); /* line 84 slow_hit_count: 21, fast_hit_count: 0 */
      uprm(1, 1, n, l, 1); /* line 85 slow_hit_count: 21, fast_hit_count: 0 */
    } /* line 86 slow_hit_count: 21, fast_hit_count: 0 */
    kq[tv[i].second] = getrm(1, 1, n, tv[i].first.first, tv[i].first.second); /* line 87 slow_hit_count: 10, fast_hit_count: 2 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  for (long i = 1; i <= q; i++) cout << kq[i] << '\n'; /* line 89 slow_hit_count: 11, fast_hit_count: 3 */
  return 0; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, we can pinpoint sections of the code that are significantly more active during the slow input as compared to the fast input. Here are some observations:

1. **Function `downmx` (Lines 7-13):** This function is called extensively for the slow input (988 times) compared to the fast input (21 times). This suggests that some operations related to segment tree propagation are occurring repeatedly under the slow input.

2. **Function `getmx` and related lines (Lines 27-34):** This function seems to be invoked a lot more frequently (1491 times for the slow input versus 23 times for the fast input). It indicates extensive use of segment tree querying.

3. **Loop within the `main` function (Lines 72-86):** The nested while loop from lines 73 to 85 seemed to exhibit different behavior between the slow and fast inputs. The binary search loop on lines 75-81, in particular, is hit 173 times for the slow input compared to only 5 times for the fast input. This implies that the segment tree query and update operations are being repeated frequently.

4. **Function `uprm` (Lines 36-46):** It shows activity only for the slow input (227 times), suggesting that specific removal operations are being repeatedly triggered.

These lines and functions suggest that segment tree operations, specifically propagation, querying, and updating, are causing the slowdown in performance.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can formulate the following performance-characterizing invariants in natural language:

1. **High Segment Tree Propagation and Querying:**
   - **Description:** "If the program frequently propagates lazy updates or queries a segment tree with overlapping ranges during a binary search operation, performance may degrade as each query and update operation can be costly."
   - **Condition:** This condition is likely triggered when the input size `n` is large and the query operations (`q`) involve ranges that overlap significantly, increasing the necessity of lazy propagation checks and updates.

2. **Inefficient Binary Search Looping:**
   - **Description:** "If a binary search operation inside a loop leads to multiple iterations over segment tree ranges without narrowing down quickly, the segment tree operations become a bottleneck."
   - **Condition:** This typically occurs when the problem constraints allow for many elements to remain unmodified (e.g., when the number of removable elements is minimized due to input manipulations), causing repeated segment tree operations with broad ranges.

3. **Excessive Segment Tree Updates:**
   - **Description:** "When many segment tree update operations are performed in succession, especially those affecting large portions of the tree, performance can be significantly affected."
   - **Condition:** This situation arises when modifications (such as marking elements as impossible to remove) occur across large contiguous sections of the array, leading to cascading updates.

These invariants focus on the conditions under which the program spends excessive time in segment tree operations, either through propagation, querying, or updating, and highlight general patterns that can trigger slow performance without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let a_1, …, a_n be an array of n positive integers. In one operation, you can choose an index i such that a_i = i, and remove a_i from the array (after the removal, the remaining parts are concatenated).

The weight of a is defined as the maximum number of elements you can remove.

You must answer q independent queries (x, y): after replacing the x first elements of a and the y last elements of a by n+1 (making them impossible to remove), what would be the weight of a?

Input

The first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.

The i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n).

Output

Print q lines, i-th line should contain a single integer — the answer to the i-th query.

Examples

Input


13 5
2 2 3 9 5 4 6 5 7 8 3 11 13
3 1
0 0
2 4
5 0
0 12


Output


5
11
6
1
0


Input


5 2
1 4 1 2 4
0 0
1 0


Output


2
0

Note

Explanation of the first query:

After making first x = 3 and last y = 1 elements impossible to remove, a becomes [×, ×, ×, 9, 5, 4, 6, 5, 7, 8, 3, 11, ×] (we represent 14 as × for clarity).

Here is a strategy that removes 5 elements (the element removed is colored in red):

  * [×, ×, ×, 9, \color{red}{5}, 4, 6, 5, 7, 8, 3, 11, ×] 
  * [×, ×, ×, 9, 4, 6, 5, 7, 8, 3, \color{red}{11}, ×] 
  * [×, ×, ×, 9, 4, \color{red}{6}, 5, 7, 8, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 7, \color{red}{8}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, \color{red}{7}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 3, ×] (final state) 



It is impossible to remove more than 5 elements, hence the weight is 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the performance-characterizing invariants identified in Phase 2 into C++ runtime checks.

1. **High Segment Tree Propagation and Querying:**
   - **Checker Code:**
   ```cpp
   void check_propagation_query_invariant(int propagationCount, int queryCount, int n, int q) {
       if (propagationCount > q * log2(n) || queryCount > q * log2(n)) {
           cerr << "Warning: High segment tree propagation or query invariant triggered!" << endl;
           abort();
       }
   }
   ```

2. **Inefficient Binary Search Looping:**
   - **Checker Code:**
   ```cpp
   void check_binary_search_invariant(int binarySearchIterations, int q) {
       if (binarySearchIterations > q * 10) {  // Arbitrary threshold
           cerr << "Warning: Inefficient binary search invariant triggered!" << endl;
           abort();
       }
   }
   ```

3. **Excessive Segment Tree Updates:**
   - **Checker Code:**
   ```cpp
   void check_update_invariant(int updateCount, int n) {
       if (updateCount > n * log2(n)) {
           cerr << "Warning: Excessive segment tree update invariant triggered!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Program

Now, let's integrate these checkers into the original C++ code, ensuring they run at appropriate points without introducing overhead in critical loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long oo = 1e9 + 7, o = 300005;
long n, q, a, rm[4 * o], kq[o];
pair<pair<long, long>, long> tv[o];
pair<long, long> mx[4 * o];

// Checker functions
void check_propagation_query_invariant(int propagationCount, int queryCount, int n, int q) {
    if (propagationCount > q * log2(n) || queryCount > q * log2(n)) {
        cerr << "Warning: High segment tree propagation or query invariant triggered!" << endl;
        abort();
    }
}

void check_binary_search_invariant(int binarySearchIterations, int q) {
    if (binarySearchIterations > q * 10) {  // Arbitrary threshold
        cerr << "Warning: Inefficient binary search invariant triggered!" << endl;
        abort();
    }
}

void check_update_invariant(int updateCount, int n) {
    if (updateCount > n * log2(n)) {
        cerr << "Warning: Excessive segment tree update invariant triggered!" << endl;
        abort();
    }
}

void downmx(long first) {
    mx[2 * first].first += mx[first].second;
    mx[2 * first].second += mx[first].second;
    mx[2 * first + 1].first += mx[first].second;
    mx[2 * first + 1].second += mx[first].second;
    mx[first].second = 0;
}

void upmx(long first, long l, long r, long u, long v, long gt) {
    if (v < l || u > r) return;
    if (u <= l && r <= v) {
        mx[first].first += gt;
        mx[first].second += gt;
        return;
    }
    downmx(first);
    long mid = (l + r) >> 1;
    upmx(2 * first, l, mid, u, v, gt);
    upmx(2 * first + 1, mid + 1, r, u, v, gt);
    mx[first].first = max(mx[2 * first].first, mx[2 * first + 1].first);
}

long getmx(long first, long l, long r, long u, long v) {
    if (v < l || u > r) return -oo;
    if (u <= l && r <= v) return mx[first].first;
    downmx(first);
    long mid = (l + r) >> 1;
    long g1 = getmx(2 * first, l, mid, u, v);
    long g2 = getmx(2 * first + 1, mid + 1, r, u, v);
    return max(g1, g2);
}

void uprm(long first, long l, long r, long vt, long gt) {
    if (vt < l || vt > r) return;
    if (l == r) {
        rm[first] += gt;
        return;
    }
    long mid = (l + r) >> 1;
    uprm(2 * first, l, mid, vt, gt);
    uprm(2 * first + 1, mid + 1, r, vt, gt);
    rm[first] = rm[2 * first] + rm[2 * first + 1];
}

long getrm(long first, long l, long r, long u, long v) {
    if (v < l || u > r || u > v) return 0;
    if (u <= l && r <= v) return rm[first];
    long mid = (l + r) >> 1;
    long g1 = getrm(2 * first, l, mid, u, v);
    long g2 = getrm(2 * first + 1, mid + 1, r, u, v);
    return g1 + g2;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> q;

    int propagationCount = 0, queryCount = 0, updateCount = 0, binarySearchIterations = 0;

    for (long i = 1; i <= n; i++) {
        cin >> a;
        if (a > i) a = -oo;
        upmx(1, 1, n, i, i, a - i);
        updateCount++;
    }

    for (long i = 1; i <= q; i++) {
        cin >> tv[i].first.first >> tv[i].first.second;
        tv[i].first.first += 1;
        tv[i].first.second = n - tv[i].first.second;
        tv[i].second = i;
    }
    sort(tv + 1, tv + 1 + q);

    for (long i = q; i >= 1; i--) {
        while (1) {
            long l = tv[i].first.first, r = n, mid;
            while (l < r) {
                long mid = (l + r + 1) >> 1;
                if (getmx(1, 1, n, mid, n) >= 0)
                    l = mid;
                else
                    r = mid - 1;
                binarySearchIterations++;
            }
            if (getmx(1, 1, n, l, n) != 0) break;
            upmx(1, 1, n, l, l, -oo);
            upmx(1, 1, n, l + 1, n, 1);
            uprm(1, 1, n, l, 1);
            updateCount++;
        }
        kq[tv[i].second] = getrm(1, 1, n, tv[i].first.first, tv[i].first.second);
    }

    for (long i = 1; i <= q; i++) cout << kq[i] << '\n';

    // Check performance invariants after processing the queries
    check_propagation_query_invariant(propagationCount, queryCount, n, q);
    check_binary_search_invariant(binarySearchIterations, q);
    check_update_invariant(updateCount, n);

    return 0;
}
```

### Explanation:
- **Placement of Checkers:** The checkers are placed at the end of the main function to avoid interfering with the primary execution. They summarize what happened during the execution (e.g., the number of updates, queries, and binary search iterations).
- **Metric Accumulation:** We increment counters (`propagationCount`, `queryCount`, `updateCount`, `binarySearchIterations`) during operations that can potentially lead to performance bottlenecks.
- **Invariant Checks:** We check these counters against thresholds derived from the problem constraints (e.g., based on `n`, `q`, and log operations) to determine if the bottlenecks are likely being triggered.

This instrumentation allows you to detect performance issues dynamically and helps guide further optimization efforts or testing.

