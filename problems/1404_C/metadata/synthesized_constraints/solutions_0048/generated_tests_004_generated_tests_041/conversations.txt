system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let a_1, …, a_n be an array of n positive integers. In one operation, you can choose an index i such that a_i = i, and remove a_i from the array (after the removal, the remaining parts are concatenated).

The weight of a is defined as the maximum number of elements you can remove.

You must answer q independent queries (x, y): after replacing the x first elements of a and the y last elements of a by n+1 (making them impossible to remove), what would be the weight of a?

Input

The first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.

The i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n).

Output

Print q lines, i-th line should contain a single integer — the answer to the i-th query.

Examples

Input


13 5
2 2 3 9 5 4 6 5 7 8 3 11 13
3 1
0 0
2 4
5 0
0 12


Output


5
11
6
1
0


Input


5 2
1 4 1 2 4
0 0
1 0


Output


2
0

Note

Explanation of the first query:

After making first x = 3 and last y = 1 elements impossible to remove, a becomes [×, ×, ×, 9, 5, 4, 6, 5, 7, 8, 3, 11, ×] (we represent 14 as × for clarity).

Here is a strategy that removes 5 elements (the element removed is colored in red):

  * [×, ×, ×, 9, \color{red}{5}, 4, 6, 5, 7, 8, 3, 11, ×] 
  * [×, ×, ×, 9, 4, 6, 5, 7, 8, 3, \color{red}{11}, ×] 
  * [×, ×, ×, 9, 4, \color{red}{6}, 5, 7, 8, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 7, \color{red}{8}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, \color{red}{7}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 3, ×] (final state) 



It is impossible to remove more than 5 elements, hence the weight is 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class S, class T>
pair<S, T> operator+(const pair<S, T> &s, const pair<S, T> &t) {
  return pair<S, T>(s.first + t.first, s.second + t.second);
}
template <class S, class T>
pair<S, T> operator-(const pair<S, T> &s, const pair<S, T> &t) {
  return pair<S, T>(s.first - t.first, s.second - t.second);
}
template <class S, class T>
ostream &operator<<(ostream &os, pair<S, T> p) {
  os << "(" << p.first << ", " << p.second << ")";
  return os;
}
template <class T>
bool chmax(T &a, const T &b) {
  if (a < b) {
    a = b;
    return 1;
  }
  return 0;
}
template <class T>
bool chmin(T &a, const T &b) {
  if (a > b) {
    a = b;
    return 1;
  }
  return 0;
}
const long long inf = 1000000001;
const long long INF = (long long)1e18 + 1;
const long double pi = 3.1415926535897932384626433832795028841971L;
vector<int> dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1};
const long long MOD = 1000000007;
template <typename T1, typename T2>
class LazySegmentTree {
 public:
  using F = function<T1(T1 &, T1 &)>;
  using G = function<T2(T2 &, T2 &)>;
  using H = function<T1(T1 &, T2 &, int, int)>;
  int n;
  vector<T1> node;
  vector<T2> lazy;
  T1 e1;
  T2 e2;
  F query_func;
  G update_func;
  H eval_func;
  LazySegmentTree(vector<T1> a, F query_func, G update_func, H eval_func, T1 e1,
                  T2 e2)
      : query_func(query_func),
        update_func(update_func),
        eval_func(eval_func),
        e1(e1),
        e2(e2) {
    int _n = a.size();
    n = 1;
    while (n < _n) n *= 2;
    node.resize(2 * n - 1, e1);
    lazy.resize(2 * n - 1, e2);
    for (int i = 0; i < _n; i++) node[i + n - 1] = a[i];
    for (int i = n - 2; i >= 0; i--) {
      node[i] = query_func(node[i * 2 + 1], node[i * 2 + 2]);
    }
  }
  inline void eval(int k, int l, int r) {
    if (lazy[k] != e2) {
      node[k] = eval_func(node[k], lazy[k], l, r);
      if (r - l > 1) {
        lazy[2 * k + 1] = update_func(lazy[2 * k + 1], lazy[k]);
        lazy[2 * k + 2] = update_func(lazy[2 * k + 2], lazy[k]);
      }
      lazy[k] = e2;
    }
  }
  void update(int a, int b, T2 x, int k, int l, int r) {
    eval(k, l, r);
    if (b <= l || r <= a) return;
    if (a <= l && r <= b) {
      lazy[k] = update_func(lazy[k], x);
      eval(k, l, r);
    } else {
      update(a, b, x, 2 * k + 1, l, (l + r) / 2);
      update(a, b, x, 2 * k + 2, (l + r) / 2, r);
      node[k] = query_func(node[2 * k + 1], node[2 * k + 2]);
    }
  }
  T1 query(int a, int b, int k, int l, int r) {
    eval(k, l, r);
    if (b <= l || r <= a) return e1;
    if (a <= l && r <= b) return node[k];
    T1 resl = query(a, b, 2 * k + 1, l, (l + r) / 2);
    T1 resr = query(a, b, 2 * k + 2, (l + r) / 2, r);
    return query_func(resl, resr);
  }
};
pair<long long, long long> f1(pair<long long, long long> a,
                              pair<long long, long long> b) {
  return min(a, b);
}
int g1(int a, int b) { return a + b; }
pair<long long, long long> h1(pair<long long, long long> a, int b, int l,
                              int r) {
  pair<long long, long long> res = a;
  res.first += b;
  return res;
}
template <typename T>
class SegmentTree {
 public:
  using F = function<T(T &, T &)>;
  int n;
  vector<T> dat;
  T e;
  F query_func;
  F update_func;
  SegmentTree(vector<T> a, F query_func, F update_func, T e)
      : n(a.size()), query_func(query_func), update_func(update_func), e(e) {
    if (n == 0) {
      a.push_back(e);
      n++;
    }
    dat.resize(4 * n);
    init(0, 0, n, a);
  }
  void init(int k, int l, int r, vector<T> &a) {
    if (r - l == 1) {
      dat[k] = a[l];
    } else {
      int lch = 2 * k + 1, rch = 2 * k + 2;
      init(lch, l, (l + r) / 2, a);
      init(rch, (l + r) / 2, r, a);
      dat[k] = query_func(dat[lch], dat[rch]);
    }
  }
  void update(int k, T a, int v, int l, int r) {
    if (r - l == 1) {
      dat[v] = update_func(dat[v], a);
    } else {
      if (k < (l + r) / 2)
        update(k, a, 2 * v + 1, l, (l + r) / 2);
      else {
        update(k, a, 2 * v + 2, (l + r) / 2, r);
      }
      dat[v] = query_func(dat[v * 2 + 1], dat[v * 2 + 2]);
    }
  }
  T query(int a, int b, int k, int l, int r) {
    if (r <= a || b <= l) {
      return e;
    }
    if (a <= l && r <= b) {
      return dat[k];
    } else {
      T ul = query(a, b, k * 2 + 1, l, (l + r) / 2);
      T ur = query(a, b, k * 2 + 2, (l + r) / 2, r);
      return query_func(ul, ur);
    }
  }
  int find(int a, int b, int k, int l, int r, int x) {
    if (dat[k] < x || r <= a || b <= l) return -1;
    if (l + 1 == r) {
      if (dat[k] >= x)
        return l;
      else
        return -1;
    }
    int rv = find(a, b, 2 * k + 2, (l + r) / 2, r, x);
    if (rv != -1) return rv;
    return find(a, b, 2 * k + 1, l, (l + r) / 2, x);
  }
};
int f(int a, int b) { return a + b; }
int g(int a, int b) { return a + b; }
void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> a(n);
  for (int i = 0; i < (int)(n); i++) {
    cin >> a[i];
    a[i]--;
  }
  vector<vector<pair<int, int>>> x2yi(n + 1);
  for (int i = 0; i < (int)(q); i++) {
    int x, y;
    cin >> x >> y;
    x2yi[x].push_back(pair<int, int>(y, i));
  }
  vector<pair<long long, long long>> temp(n);
  for (int i = 0; i < (int)(n); i++) {
    temp[i] = pair<int, int>(i - a[i], -i);
    if (temp[i].first < 0) {
      temp[i].first = 2 * inf;
    }
  }
  LazySegmentTree<pair<long long, long long>, int> seg1(
      temp, f1, g1, h1, pair<long long, long long>(3 * inf, 3 * inf), 0);
  SegmentTree<int> seg2(vector<int>(n), f, g, 0);
  vector<int> ans(q);
  for (int x = n; x >= 0; x--) {
    if (x == n) {
      for (pair<int, int> yi : x2yi[x]) {
        ans[yi.second] = 0;
      }
      continue;
    }
    while (true) {
      pair<int, int> mi = seg1.query(x, n, 0, 0, seg1.n);
      if (mi.first != 0) break;
      int idx = -mi.second;
      seg2.update(idx, 1, 0, 0, seg2.n);
      seg1.update(idx, idx + 1, 2 * inf, 0, 0, seg1.n);
      seg1.update(idx, n, -1, 0, 0, seg1.n);
    }
    for (pair<int, int> yi : x2yi[x]) {
      int r = n - yi.first;
      ans[yi.second] = seg2.query(x, r, 0, 0, seg2.n);
    }
  }
  for (int i = 0; i < (int)(q); i++) {
    cout << ans[i] << '\n';
  }
}
signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  ;
  int t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30 10
1 1 3 3 5 0 1 8 2 6 11 5 2 6 12 11 8 5 11 3 14 8 16 13 14 25 16 2 8 17
6 3
0 15
1 0
3 2
12 16
1 0
17 3
14 13
0 22
3 10


(G.2) Fast Input

5 2
1 4 1 2 6
0 1
1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class S, class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
pair<S, T> operator+(const pair<S, T> &s, const pair<S, T> &t) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return pair<S, T>(s.first + t.first, s.second + t.second); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class S, class T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
pair<S, T> operator-(const pair<S, T> &s, const pair<S, T> &t) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return pair<S, T>(s.first - t.first, s.second - t.second); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <class S, class T> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, pair<S, T> p) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  os << "(" << p.first << ", " << p.second << ")"; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
bool chmax(T &a, const T &b) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
bool chmin(T &a, const T &b) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1000000001; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = (long long)1e18 + 1; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
const long double pi = 3.1415926535897932384626433832795028841971L; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1}; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
class LazySegmentTree { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  using F = function<T1(T1 &, T1 &)>; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  using G = function<T2(T2 &, T2 &)>; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  using H = function<T1(T1 &, T2 &, int, int)>; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T1> node; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T2> lazy; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  T1 e1; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  T2 e2; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  F query_func; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  G update_func; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  H eval_func; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  LazySegmentTree(vector<T1> a, F query_func, G update_func, H eval_func, T1 e1, /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
                  T2 e2) /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      : query_func(query_func), /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        update_func(update_func), /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
        eval_func(eval_func), /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
        e1(e1), /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        e2(e2) { /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    int _n = a.size(); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    n = 1; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    while (n < _n) n *= 2; /* line 60 slow_hit_count: 6, fast_hit_count: 4 */
    node.resize(2 * n - 1, e1); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    lazy.resize(2 * n - 1, e2); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < _n; i++) node[i + n - 1] = a[i]; /* line 63 slow_hit_count: 31, fast_hit_count: 6 */
    for (int i = n - 2; i >= 0; i--) { /* line 64 slow_hit_count: 32, fast_hit_count: 8 */
      node[i] = query_func(node[i * 2 + 1], node[i * 2 + 2]); /* line 65 slow_hit_count: 31, fast_hit_count: 7 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  inline void eval(int k, int l, int r) { /* line 68 slow_hit_count: 1438, fast_hit_count: 69 */
    if (lazy[k] != e2) { /* line 69 slow_hit_count: 1438, fast_hit_count: 69 */
      node[k] = eval_func(node[k], lazy[k], l, r); /* line 70 slow_hit_count: 210, fast_hit_count: 3 */
      if (r - l > 1) { /* line 71 slow_hit_count: 210, fast_hit_count: 3 */
        lazy[2 * k + 1] = update_func(lazy[2 * k + 1], lazy[k]); /* line 72 slow_hit_count: 136, fast_hit_count: 1 */
        lazy[2 * k + 2] = update_func(lazy[2 * k + 2], lazy[k]); /* line 73 slow_hit_count: 136, fast_hit_count: 1 */
      } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      lazy[k] = e2; /* line 75 slow_hit_count: 210, fast_hit_count: 3 */
    } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 77 slow_hit_count: 1438, fast_hit_count: 69 */
  void update(int a, int b, T2 x, int k, int l, int r) { /* line 78 slow_hit_count: 594, fast_hit_count: 14 */
    eval(k, l, r); /* line 79 slow_hit_count: 594, fast_hit_count: 14 */
    if (b <= l || r <= a) return; /* line 80 slow_hit_count: 594, fast_hit_count: 14 */
    if (a <= l && r <= b) { /* line 81 slow_hit_count: 393, fast_hit_count: 9 */
      lazy[k] = update_func(lazy[k], x); /* line 82 slow_hit_count: 120, fast_hit_count: 3 */
      eval(k, l, r); /* line 83 slow_hit_count: 120, fast_hit_count: 3 */
    } else { /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      update(a, b, x, 2 * k + 1, l, (l + r) / 2); /* line 85 slow_hit_count: 273, fast_hit_count: 6 */
      update(a, b, x, 2 * k + 2, (l + r) / 2, r); /* line 86 slow_hit_count: 273, fast_hit_count: 6 */
      node[k] = query_func(node[2 * k + 1], node[2 * k + 2]); /* line 87 slow_hit_count: 273, fast_hit_count: 6 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  T1 query(int a, int b, int k, int l, int r) { /* line 90 slow_hit_count: 724, fast_hit_count: 52 */
    eval(k, l, r); /* line 91 slow_hit_count: 724, fast_hit_count: 52 */
    if (b <= l || r <= a) return e1; /* line 92 slow_hit_count: 724, fast_hit_count: 52 */
    if (a <= l && r <= b) return node[k]; /* line 93 slow_hit_count: 579, fast_hit_count: 35 */
    T1 resl = query(a, b, 2 * k + 1, l, (l + r) / 2); /* line 94 slow_hit_count: 335, fast_hit_count: 23 */
    T1 resr = query(a, b, 2 * k + 2, (l + r) / 2, r); /* line 95 slow_hit_count: 335, fast_hit_count: 23 */
    return query_func(resl, resr); /* line 96 slow_hit_count: 335, fast_hit_count: 23 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> f1(pair<long long, long long> a, /* line 99 slow_hit_count: 639, fast_hit_count: 36 */
                              pair<long long, long long> b) { /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  return min(a, b); /* line 101 slow_hit_count: 639, fast_hit_count: 36 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
int g1(int a, int b) { return a + b; } /* line 103 slow_hit_count: 392, fast_hit_count: 5 */
pair<long long, long long> h1(pair<long long, long long> a, int b, int l, /* line 104 slow_hit_count: 210, fast_hit_count: 3 */
                              int r) { /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  pair<long long, long long> res = a; /* line 106 slow_hit_count: 210, fast_hit_count: 3 */
  res.first += b; /* line 107 slow_hit_count: 210, fast_hit_count: 3 */
  return res; /* line 108 slow_hit_count: 210, fast_hit_count: 3 */
} /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
class SegmentTree { /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
  using F = function<T(T &, T &)>; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T> dat; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  T e; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
  F query_func; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  F update_func; /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  SegmentTree(vector<T> a, F query_func, F update_func, T e) /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
      : n(a.size()), query_func(query_func), update_func(update_func), e(e) { /* line 120 slow_hit_count: 1, fast_hit_count: 1 */
    if (n == 0) { /* line 121 slow_hit_count: 1, fast_hit_count: 1 */
      a.push_back(e); /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
      n++; /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
    dat.resize(4 * n); /* line 125 slow_hit_count: 1, fast_hit_count: 1 */
    init(0, 0, n, a); /* line 126 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 127 slow_hit_count: 1, fast_hit_count: 1 */
  void init(int k, int l, int r, vector<T> &a) { /* line 128 slow_hit_count: 59, fast_hit_count: 9 */
    if (r - l == 1) { /* line 129 slow_hit_count: 59, fast_hit_count: 9 */
      dat[k] = a[l]; /* line 130 slow_hit_count: 30, fast_hit_count: 5 */
    } else { /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
      int lch = 2 * k + 1, rch = 2 * k + 2; /* line 132 slow_hit_count: 29, fast_hit_count: 4 */
      init(lch, l, (l + r) / 2, a); /* line 133 slow_hit_count: 29, fast_hit_count: 4 */
      init(rch, (l + r) / 2, r, a); /* line 134 slow_hit_count: 29, fast_hit_count: 4 */
      dat[k] = query_func(dat[lch], dat[rch]); /* line 135 slow_hit_count: 29, fast_hit_count: 4 */
    } /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 137 slow_hit_count: 59, fast_hit_count: 9 */
  void update(int k, T a, int v, int l, int r) { /* line 138 slow_hit_count: 142, fast_hit_count: 3 */
    if (r - l == 1) { /* line 139 slow_hit_count: 142, fast_hit_count: 3 */
      dat[v] = update_func(dat[v], a); /* line 140 slow_hit_count: 24, fast_hit_count: 1 */
    } else { /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
      if (k < (l + r) / 2) /* line 142 slow_hit_count: 118, fast_hit_count: 2 */
        update(k, a, 2 * v + 1, l, (l + r) / 2); /* line 143 slow_hit_count: 58, fast_hit_count: 2 */
      else { /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
        update(k, a, 2 * v + 2, (l + r) / 2, r); /* line 145 slow_hit_count: 60, fast_hit_count: 0 */
      } /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
      dat[v] = query_func(dat[v * 2 + 1], dat[v * 2 + 2]); /* line 147 slow_hit_count: 118, fast_hit_count: 2 */
    } /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 149 slow_hit_count: 142, fast_hit_count: 3 */
  T query(int a, int b, int k, int l, int r) { /* line 150 slow_hit_count: 126, fast_hit_count: 12 */
    if (r <= a || b <= l) { /* line 151 slow_hit_count: 126, fast_hit_count: 12 */
      return e; /* line 152 slow_hit_count: 34, fast_hit_count: 2 */
    } /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
    if (a <= l && r <= b) { /* line 154 slow_hit_count: 92, fast_hit_count: 10 */
      return dat[k]; /* line 155 slow_hit_count: 34, fast_hit_count: 5 */
    } else { /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
      T ul = query(a, b, k * 2 + 1, l, (l + r) / 2); /* line 157 slow_hit_count: 58, fast_hit_count: 5 */
      T ur = query(a, b, k * 2 + 2, (l + r) / 2, r); /* line 158 slow_hit_count: 58, fast_hit_count: 5 */
      return query_func(ul, ur); /* line 159 slow_hit_count: 58, fast_hit_count: 5 */
    } /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
  int find(int a, int b, int k, int l, int r, int x) { /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
    if (dat[k] < x || r <= a || b <= l) return -1; /* line 163 slow_hit_count: 0, fast_hit_count: 0 */
    if (l + 1 == r) { /* line 164 slow_hit_count: 0, fast_hit_count: 0 */
      if (dat[k] >= x) /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
        return l; /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
        return -1; /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
    int rv = find(a, b, 2 * k + 2, (l + r) / 2, r, x); /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
    if (rv != -1) return rv; /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
    return find(a, b, 2 * k + 1, l, (l + r) / 2, x); /* line 172 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
int f(int a, int b) { return a + b; } /* line 175 slow_hit_count: 205, fast_hit_count: 11 */
int g(int a, int b) { return a + b; } /* line 176 slow_hit_count: 24, fast_hit_count: 1 */
void solve() { /* line 177 slow_hit_count: 1, fast_hit_count: 1 */
  int n, q; /* line 178 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> q; /* line 179 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n); /* line 180 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < (int)(n); i++) { /* line 181 slow_hit_count: 31, fast_hit_count: 6 */
    cin >> a[i]; /* line 182 slow_hit_count: 30, fast_hit_count: 5 */
    a[i]--; /* line 183 slow_hit_count: 30, fast_hit_count: 5 */
  } /* line 184 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<pair<int, int>>> x2yi(n + 1); /* line 185 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < (int)(q); i++) { /* line 186 slow_hit_count: 11, fast_hit_count: 3 */
    int x, y; /* line 187 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 188 slow_hit_count: 10, fast_hit_count: 2 */
    x2yi[x].push_back(pair<int, int>(y, i)); /* line 189 slow_hit_count: 10, fast_hit_count: 2 */
  } /* line 190 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<long long, long long>> temp(n); /* line 191 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < (int)(n); i++) { /* line 192 slow_hit_count: 31, fast_hit_count: 6 */
    temp[i] = pair<int, int>(i - a[i], -i); /* line 193 slow_hit_count: 30, fast_hit_count: 5 */
    if (temp[i].first < 0) { /* line 194 slow_hit_count: 30, fast_hit_count: 5 */
      temp[i].first = 2 * inf; /* line 195 slow_hit_count: 0, fast_hit_count: 2 */
    } /* line 196 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 197 slow_hit_count: 0, fast_hit_count: 0 */
  LazySegmentTree<pair<long long, long long>, int> seg1( /* line 198 slow_hit_count: 0, fast_hit_count: 0 */
      temp, f1, g1, h1, pair<long long, long long>(3 * inf, 3 * inf), 0); /* line 199 slow_hit_count: 3, fast_hit_count: 3 */
  SegmentTree<int> seg2(vector<int>(n), f, g, 0); /* line 200 slow_hit_count: 3, fast_hit_count: 3 */
  vector<int> ans(q); /* line 201 slow_hit_count: 2, fast_hit_count: 2 */
  for (int x = n; x >= 0; x--) { /* line 202 slow_hit_count: 32, fast_hit_count: 7 */
    if (x == n) { /* line 203 slow_hit_count: 31, fast_hit_count: 6 */
      for (pair<int, int> yi : x2yi[x]) { /* line 204 slow_hit_count: 1, fast_hit_count: 1 */
        ans[yi.second] = 0; /* line 205 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 206 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 207 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 208 slow_hit_count: 0, fast_hit_count: 0 */
    while (true) { /* line 209 slow_hit_count: 0, fast_hit_count: 0 */
      pair<int, int> mi = seg1.query(x, n, 0, 0, seg1.n); /* line 210 slow_hit_count: 54, fast_hit_count: 6 */
      if (mi.first != 0) break; /* line 211 slow_hit_count: 54, fast_hit_count: 6 */
      int idx = -mi.second; /* line 212 slow_hit_count: 24, fast_hit_count: 1 */
      seg2.update(idx, 1, 0, 0, seg2.n); /* line 213 slow_hit_count: 24, fast_hit_count: 1 */
      seg1.update(idx, idx + 1, 2 * inf, 0, 0, seg1.n); /* line 214 slow_hit_count: 24, fast_hit_count: 1 */
      seg1.update(idx, n, -1, 0, 0, seg1.n); /* line 215 slow_hit_count: 24, fast_hit_count: 1 */
    } /* line 216 slow_hit_count: 24, fast_hit_count: 1 */
    for (pair<int, int> yi : x2yi[x]) { /* line 217 slow_hit_count: 40, fast_hit_count: 7 */
      int r = n - yi.first; /* line 218 slow_hit_count: 10, fast_hit_count: 2 */
      ans[yi.second] = seg2.query(x, r, 0, 0, seg2.n); /* line 219 slow_hit_count: 10, fast_hit_count: 2 */
    } /* line 220 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 221 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (int)(q); i++) { /* line 222 slow_hit_count: 11, fast_hit_count: 3 */
    cout << ans[i] << '\n'; /* line 223 slow_hit_count: 10, fast_hit_count: 2 */
  } /* line 224 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 225 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 226 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 227 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 228 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 229 slow_hit_count: 0, fast_hit_count: 0 */
  int t = 1; /* line 230 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 231 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 232 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Hit Count Analysis

1. **LazySegmentTree Evaluation:**
   - The `eval` function is called significantly more often in the slow input (1438 times) compared to the fast input (69 times). This suggests that lazy propagation of updates is happening more frequently with the slow input.

2. **Update Function in LazySegmentTree:**
   - The `update` function is invoked 594 times in the slow input compared to 14 times in the fast input. This indicates that the segment tree is being updated much more frequently for the slow input.

3. **Query Function in LazySegmentTree:**
   - The `query` function is called 724 times in the slow input versus 52 times in the fast input. Frequent querying suggests that the logic to determine the maximum number of elements removable is heavily dependent on the segment tree, which could be a bottleneck if not managed efficiently.

4. **SegmentTree Operations:**
   - The `update` method of `SegmentTree` is executed 142 times for the slow input, against only 3 times for the fast input. This frequent updating contributes to the slowdown.
   - Similarly, the `query` method of `SegmentTree` is executed 126 times for the slow input but only 12 times for the fast input.

5. **Control Flow in the Main Loop:**
   - The loop that processes the queries (line 202) is executed 32 times for the slow input compared to 7 times for the fast input. This suggests the main loop's iterations are more complex or take longer to resolve for the slow input.

### Inference

The slow input triggers more frequent evaluations, updates, and queries on the segment trees. This indicates that the program's performance heavily depends on the complexity of operations performed over these segment trees, which is exacerbated by particular characteristics of the input data.

## Phase 2: Derive Performance-Characterizing Invariants

### Invariant 1: Lazy Segment Tree Propagation

**Natural Language Description:**
"When the array contains many elements close to their index values and requires frequent lazy propagation updates, the performance degrades. This is evident when the `LazySegmentTree`'s `eval` and `update` functions are invoked repeatedly within the loop handling queries."

### Invariant 2: Frequent Updates and Queries

**Natural Language Description:**
"If the input array has a complex pattern that requires multiple updates and queries to the segment trees, particularly when indices of interest (for removal) are densely packed, this can lead to significant slowdowns. The performance is particularly impacted when segment tree operations are invoked heavily to handle these dense patterns."

### Invariant 3: Query Handling Complexity

**Natural Language Description:**
"When the difference between selected indices `x` and `y` in queries is minimal but involves large sections of the array, resulting in frequent segment tree operations, the execution time can increase substantially. The algorithm's efficiency diminishes in cases where a large part of the input array is analyzed repeatedly to determine the weight after elements are made unremovable."

By identifying these conditions, a fuzzer or any other testing tool could use these invariants to generate inputs that help identify performance bottlenecks more effectively. These invariants help abstract the program's behavior into scenarios that are likely to cause slowdowns, providing insight for optimization and further testing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let a_1, …, a_n be an array of n positive integers. In one operation, you can choose an index i such that a_i = i, and remove a_i from the array (after the removal, the remaining parts are concatenated).

The weight of a is defined as the maximum number of elements you can remove.

You must answer q independent queries (x, y): after replacing the x first elements of a and the y last elements of a by n+1 (making them impossible to remove), what would be the weight of a?

Input

The first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.

The i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n).

Output

Print q lines, i-th line should contain a single integer — the answer to the i-th query.

Examples

Input


13 5
2 2 3 9 5 4 6 5 7 8 3 11 13
3 1
0 0
2 4
5 0
0 12


Output


5
11
6
1
0


Input


5 2
1 4 1 2 4
0 0
1 0


Output


2
0

Note

Explanation of the first query:

After making first x = 3 and last y = 1 elements impossible to remove, a becomes [×, ×, ×, 9, 5, 4, 6, 5, 7, 8, 3, 11, ×] (we represent 14 as × for clarity).

Here is a strategy that removes 5 elements (the element removed is colored in red):

  * [×, ×, ×, 9, \color{red}{5}, 4, 6, 5, 7, 8, 3, 11, ×] 
  * [×, ×, ×, 9, 4, 6, 5, 7, 8, 3, \color{red}{11}, ×] 
  * [×, ×, ×, 9, 4, \color{red}{6}, 5, 7, 8, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 7, \color{red}{8}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, \color{red}{7}, 3, ×] 
  * [×, ×, ×, 9, 4, 5, 3, ×] (final state) 



It is impossible to remove more than 5 elements, hence the weight is 5.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived in Phase 2.

### Invariant 1: Lazy Segment Tree Propagation

```cpp
void checkLazyPropagationInvariant(int evalCount) {
    if (evalCount > 1000) { // Threshold for triggering a warning
        cerr << "Warning: Performance bottleneck due to excessive lazy propagation in LazySegmentTree!" << endl;
        abort();
    }
}
```

### Invariant 2: Frequent Updates and Queries

```cpp
void checkUpdatesAndQueriesInvariant(int updateCount, int queryCount) {
    if (updateCount > 500 || queryCount > 500) { // Thresholds for updates and queries
        cerr << "Warning: Performance bottleneck due to frequent updates or queries in SegmentTree!" << endl;
        abort();
    }
}
```

### Invariant 3: Query Handling Complexity

```cpp
void checkQueryHandlingComplexity(int x, int y, int n) {
    if ((n - x - y) > (n / 2)) { // Check if the portion of the array being processed is large
        cerr << "Warning: Performance bottleneck due to complex query handling!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original Program

The following C++ code integrates the checker functions into the existing codebase. Please note where each checker is placed to ensure minimal performance overhead and maximum utility.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void checkLazyPropagationInvariant(int evalCount) {
    if (evalCount > 1000) { // Threshold for triggering a warning
        cerr << "Warning: Performance bottleneck due to excessive lazy propagation in LazySegmentTree!" << endl;
        abort();
    }
}

void checkUpdatesAndQueriesInvariant(int updateCount, int queryCount) {
    if (updateCount > 500 || queryCount > 500) { // Thresholds for updates and queries
        cerr << "Warning: Performance bottleneck due to frequent updates or queries in SegmentTree!" << endl;
        abort();
    }
}

void checkQueryHandlingComplexity(int x, int y, int n) {
    if ((n - x - y) > (n / 2)) { // Check if the portion of the array being processed is large
        cerr << "Warning: Performance bottleneck due to complex query handling!" << endl;
        abort();
    }
}

// LazySegmentTree and SegmentTree implementations remain the same

template <typename T1, typename T2>
class LazySegmentTree {
    // ... class implementation ...

    int evalCount = 0; // Count the number of evaluations

    inline void eval(int k, int l, int r) {
        evalCount++;
        checkLazyPropagationInvariant(evalCount); // Check for excessive lazy propagation

        if (lazy[k] != e2) {
            node[k] = eval_func(node[k], lazy[k], l, r);
            if (r - l > 1) {
                lazy[2 * k + 1] = update_func(lazy[2 * k + 1], lazy[k]);
                lazy[2 * k + 2] = update_func(lazy[2 * k + 2], lazy[k]);
            }
            lazy[k] = e2;
        }
    }

    // ... rest of the class ...
};

template <typename T>
class SegmentTree {
    // ... class implementation ...

    int updateCount = 0; // Count the number of updates
    int queryCount = 0;  // Count the number of queries

    void update(int k, T a, int v, int l, int r) {
        updateCount++;
        checkUpdatesAndQueriesInvariant(updateCount, queryCount); // Check for frequent operations
        
        if (r - l == 1) {
            dat[v] = update_func(dat[v], a);
        } else {
            if (k < (l + r) / 2)
                update(k, a, 2 * v + 1, l, (l + r) / 2);
            else {
                update(k, a, 2 * v + 2, (l + r) / 2, r);
            }
            dat[v] = query_func(dat[v * 2 + 1], dat[v * 2 + 2]);
        }
    }

    T query(int a, int b, int k, int l, int r) {
        queryCount++;
        checkUpdatesAndQueriesInvariant(updateCount, queryCount); // Check for frequent operations
        
        if (r <= a || b <= l) {
            return e;
        }
        if (a <= l && r <= b) {
            return dat[k];
        } else {
            T ul = query(a, b, k * 2 + 1, l, (l + r) / 2);
            T ur = query(a, b, k * 2 + 2, (l + r) / 2, r);
            return query_func(ul, ur);
        }
    }

    // ... rest of the class ...
};

void solve() {
    int n, q;
    cin >> n >> q;

    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        a[i]--;
    }

    vector<vector<pair<int, int>>> x2yi(n + 1);
    for (int i = 0; i < q; i++) {
        int x, y;
        cin >> x >> y;
        x2yi[x].push_back(pair<int, int>(y, i));
        
        checkQueryHandlingComplexity(x, y, n); // Check for complex query handling
    }

    vector<pair<long long, long long>> temp(n);
    for (int i = 0; i < n; i++) {
        temp[i] = pair<int, int>(i - a[i], -i);
        if (temp[i].first < 0) {
            temp[i].first = 2 * inf;
        }
    }

    LazySegmentTree<pair<long long, long long>, int> seg1(temp, f1, g1, h1, pair<long long, long long>(3 * inf, 3 * inf), 0);
    SegmentTree<int> seg2(vector<int>(n), f, g, 0);
    
    vector<int> ans(q);
    for (int x = n; x >= 0; x--) {
        if (x == n) {
            for (pair<int, int> yi : x2yi[x]) {
                ans[yi.second] = 0;
            }
            continue;
        }

        while (true) {
            pair<int, int> mi = seg1.query(x, n, 0, 0, seg1.n);
            if (mi.first != 0) break;

            int idx = -mi.second;
            seg2.update(idx, 1, 0, 0, seg2.n);
            seg1.update(idx, idx + 1, 2 * inf, 0, 0, seg1.n);
            seg1.update(idx, n, -1, 0, 0, seg1.n);
        }

        for (pair<int, int> yi : x2yi[x]) {
            int r = n - yi.first;
            ans[yi.second] = seg2.query(x, r, 0, 0, seg2.n);
        }
    }

    for (int i = 0; i < q; i++) {
        cout << ans[i] << '\n';
    }
}

signed main() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    
    int t = 1;
    while (t--) solve();
}
```

### Explanation

1. **Lazy Segment Tree Propagation:**
   - The `checkLazyPropagationInvariant` function is called within the `eval` method of `LazySegmentTree` to catch excessive lazy propagation.

2. **Frequent Updates and Queries:**
   - The `checkUpdatesAndQueriesInvariant` function checks if the number of updates or queries to the segment tree exceeds a threshold, which could indicate performance degradation.

3. **Query Handling Complexity:**
   - The `checkQueryHandlingComplexity` function is called after reading each query to determine if a large section of the array is being processed, which could slow performance.

This instrumented program should help in identifying and diagnosing performance issues when running with varied inputs.

