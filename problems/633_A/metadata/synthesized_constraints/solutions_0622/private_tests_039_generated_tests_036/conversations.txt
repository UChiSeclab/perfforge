system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dante is engaged in a fight with "The Savior". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.

For every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.

Input

The first line of the input contains three integers a, b, c (1 ≤ a, b ≤ 100, 1 ≤ c ≤ 10 000) — the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.

Output

Print "Yes" (without quotes) if Dante can deal exactly c damage to the shield and "No" (without quotes) otherwise.

Examples

Input

4 6 15


Output

No


Input

3 2 7


Output

Yes


Input

6 11 6


Output

Yes

Note

In the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1·3 + 2·2 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1·6 + 0·11 = 6 damage. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int main() {
  int a, b, c, x, y;
  int p, flag = 0;
  scanf("%d %d %d", &a, &b, &c);
  for (x = 0; x <= 10000; x++) {
    for (y = 0; y <= 10000; y++) {
      p = x * a + y * b;
      if (p == c) {
        flag = 1;
        break;
      }
    }
    if (flag == 1) break;
  }
  if (flag == 1)
    printf("Yes");
  else
    printf("No");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6 6 7


(G.2) Fast Input

7 6 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 2 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, c, x, y; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int p, flag = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &a, &b, &c); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (x = 0; x <= 10000; x++) { /* line 6 slow_hit_count: 10002, fast_hit_count: 2 */
    for (y = 0; y <= 10000; y++) { /* line 7 slow_hit_count: 100030002, fast_hit_count: 10003 */
      p = x * a + y * b; /* line 8 slow_hit_count: 100020001, fast_hit_count: 10002 */
      if (p == c) { /* line 9 slow_hit_count: 100020001, fast_hit_count: 10002 */
        flag = 1; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
        break; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag == 1) break; /* line 14 slow_hit_count: 10001, fast_hit_count: 2 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag == 1) /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    printf("Yes"); /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    printf("No"); /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - **Line 6 (Outer Loop over x)**:
     - Slow Input: 10,002 hits
     - Fast Input: 2 hits
   - **Line 7 (Inner Loop over y)**:
     - Slow Input: 100,030,002 hits
     - Fast Input: 10,003 hits
   
2. **Pinpointing Lines with Significant Differentiation**:
   - The inner loop on line 7 is heavily stressed under the slow input, with 100,030,002 hits compared to 10,003 for the fast input. This indicates that the nested loop structure is the main contributor to the slowdown.
   
3. **Inference on Interaction with Data Structures**:
   - The program implements a brute force search to determine if a combination of shots from two guns can equal the exact damage `c`. For each combination of `x` and `y` in the range [0, 10,000], it calculates `p = x * a + y * b` to check if it equals `c`.
   - As a result, when the conditions are such that no early break occurs (as with the slow input), the loops iterate through a large number of combinations, leading to a significant increase in execution time.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Inefficient Iteration for Combinations**:
   - If both `a` and `b` are factors that do not easily combine to form `c` (i.e., `gcd(a, b)` does not divide `c`), the loop iterates nearly its entire range without early termination.
   - **Natural Language Statement**: "The program may slow down significantly if the greatest common divisor of `a` and `b` does not divide `c`, resulting in inefficient iterations through all possible shot combinations."

2. **Invariant 2: Redundant Computation in Nested Loops**:
   - When both `a` and `b` are close in value and neither is an exact divisor of `c`, the nested loop explores nearly all possible values without finding a solution quickly.
   - **Natural Language Statement**: "If the values of `a` and `b` are close and neither is a direct divisor of `c`, the program may explore many redundant combinations, slowing down execution."

3. **Invariant 3: High Iterative Range for Nested Loops**:
   - The nested loop structure is particularly susceptible to slowdown when `c` is not easily achievable within small values of `x` and `y`.
   - **Natural Language Statement**: "When the required damage `c` is not easily formed by small multiples of `a` and `b`, leading to large iterations in both loops, performance degradation can occur." 

These invariants help to understand and detect situations where the current brute-force approach will result in inefficient computation, allowing for optimizations or checks that could handle such cases more effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dante is engaged in a fight with "The Savior". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.

For every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.

Input

The first line of the input contains three integers a, b, c (1 ≤ a, b ≤ 100, 1 ≤ c ≤ 10 000) — the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.

Output

Print "Yes" (without quotes) if Dante can deal exactly c damage to the shield and "No" (without quotes) otherwise.

Examples

Input

4 6 15


Output

No


Input

3 2 7


Output

Yes


Input

6 11 6


Output

Yes

Note

In the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1·3 + 2·2 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1·6 + 0·11 = 6 damage. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the previously derived natural language invariants, we want to implement runtime checks to detect potential performance bottlenecks. Here are the invariant checks in C++:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

// Check if the greatest common divisor of a and b does not divide c
void check_gcd_invariant(int a, int b, int c) {
    if (c % __gcd(a, b) != 0) {
        cerr << "Warning: gcd_invariant triggered - gcd(a, b) does not divide c" << endl;
        abort();
    }
}

// Check if a and b are close and neither is a direct divisor of c
void check_close_values_invariant(int a, int b, int c) {
    if (abs(a - b) <= 5 && c % a != 0 && c % b != 0) {
        cerr << "Warning: close_values_invariant triggered - a and b are close, and neither divides c" << endl;
        abort();
    }
}

// Check if c cannot be easily formed by small multiples of a and b
void check_large_iterations_invariant(int a, int b, int c) {
    if (c > 1000 && c > max(a, b) * 10) {
        cerr << "Warning: large_iterations_invariant triggered - c is not easily formed by small multiples of a or b" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Functions into the Original Program

We will integrate the above checker functions into the original C++ program to detect potential performance issues.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if the greatest common divisor of a and b does not divide c
void check_gcd_invariant(int a, int b, int c) {
    if (c % __gcd(a, b) != 0) {
        cerr << "Warning: gcd_invariant triggered - gcd(a, b) does not divide c" << endl;
        abort();
    }
}

// Check if a and b are close and neither is a direct divisor of c
void check_close_values_invariant(int a, int b, int c) {
    if (abs(a - b) <= 5 && c % a != 0 && c % b != 0) {
        cerr << "Warning: close_values_invariant triggered - a and b are close, and neither divides c" << endl;
        abort();
    }
}

// Check if c cannot be easily formed by small multiples of a and b
void check_large_iterations_invariant(int a, int b, int c) {
    if (c > 1000 && c > max(a, b) * 10) {
        cerr << "Warning: large_iterations_invariant triggered - c is not easily formed by small multiples of a or b" << endl;
        abort();
    }
}

int main() {
    int a, b, c, x, y;
    int p, flag = 0;
    scanf("%d %d %d", &a, &b, &c);
    
    // Place the checks after reading inputs, before heavy loops
    check_gcd_invariant(a, b, c);
    check_close_values_invariant(a, b, c);
    check_large_iterations_invariant(a, b, c);
    
    for (x = 0; x <= 10000; x++) {
        for (y = 0; y <= 10000; y++) {
            p = x * a + y * b;
            if (p == c) {
                flag = 1;
                break;
            }
        }
        if (flag == 1) break;
    }
    if (flag == 1)
        printf("Yes");
    else
        printf("No");
    return 0;
}
```

### Explanation of the Integration:
- **`check_gcd_invariant`**: Ensures that the combination of `a` and `b` can theoretically create `c`, based on the gcd property.
- **`check_close_values_invariant`**: Alerts when `a` and `b` are close, and neither divides `c`, indicating a potential for high iteration counts.
- **`check_large_iterations_invariant`**: Acts as a safeguard for cases where `c` is large relative to `a` and `b`, indicating likely extended iteration space.

These checks are placed right after input reading, ensuring they capture problematic scenarios without introducing overhead within the nested loops.

