system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k;
  cin >> n >> k;
  string s;
  cin >> s;
  int dp[n + 1][101];
  for (int i = 0; i <= n; i++)
    for (int j = 0; j <= 100; j++) dp[i][j] = -1;
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= 100; j++) {
      if (i == 0) {
        if (j == 0)
          dp[i][j] = 1;
        else
          dp[i][j] = 0;
        continue;
      }
      if (s[i - 1] == 'Y') {
        if (j == 0)
          dp[i][j] = 1;
        else
          dp[i][j] = 0;
        continue;
      }
      if (s[i - 1] == 'N') {
        if (j == 0) dp[i][j] = 0;
        if (j == 1)
          dp[i][j] = 1;
        else if (j > 1) {
          if (j <= k) {
            if (dp[i - 1][j - 1] == 1)
              dp[i][j] = 1;
            else if (dp[i - 1][j - 1] == 0)
              dp[i][j] = 0;
            else
              dp[i][j] = 2;
          } else {
            if (dp[i - 1][j - 1] == 1)
              dp[i][j] = 1;
            else if (dp[i - 1][j - 1] == 0)
              dp[i][j] = 0;
            else {
              for (int l = 1; l < 101; l++) {
                if (dp[i - 1][l] == 2) dp[i - 1][l] = 0;
              }
              for (int l = 2; l < j; l++) {
                if (dp[i][l] == 2) dp[i][l] = 0;
              }
              dp[i][j] = 0;
            }
          }
        }
      }
      if (s[i - 1] == '?') {
        if (j == 0) dp[i][j] = 2;
        if (dp[i - 1][j - 1] == 2 or dp[i - 1][j - 1] == 1)
          dp[i][j] = 2;
        else
          dp[i][j] = 0;
      }
    }
  }
  int ans = 0;
  int ans1 = 0;
  for (int i = 0; i <= n; i++) {
    for (int j = k + 1; j <= 100; j++) {
      if (dp[i][j] == 1) ans1 = 1;
    }
  }
  for (int i = 0; i <= n; i++) {
    if (dp[i][k] == 1 or dp[i][k] == 2) {
      ans = 1;
    }
  }
  if (ans == 1 and ans1 == 0)
    cout << "YES" << endl;
  else
    cout << "NO" << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
???Y??????????????????????????????????????Y?????????N???Y????????Y?????Y???????Y??Y??????????YY?????


(G.2) Fast Input

1 1
Y


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int dp[n + 1][101]; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= n; i++) /* line 9 slow_hit_count: 102, fast_hit_count: 3 */
    for (int j = 0; j <= 100; j++) dp[i][j] = -1; /* line 10 slow_hit_count: 10302, fast_hit_count: 204 */
  for (int i = 0; i <= n; i++) { /* line 11 slow_hit_count: 102, fast_hit_count: 3 */
    for (int j = 0; j <= 100; j++) { /* line 12 slow_hit_count: 10302, fast_hit_count: 204 */
      if (i == 0) { /* line 13 slow_hit_count: 10201, fast_hit_count: 202 */
        if (j == 0) /* line 14 slow_hit_count: 101, fast_hit_count: 101 */
          dp[i][j] = 1; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
        else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
          dp[i][j] = 0; /* line 17 slow_hit_count: 100, fast_hit_count: 100 */
        continue; /* line 18 slow_hit_count: 101, fast_hit_count: 101 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i - 1] == 'Y') { /* line 20 slow_hit_count: 10100, fast_hit_count: 101 */
        if (j == 0) /* line 21 slow_hit_count: 909, fast_hit_count: 101 */
          dp[i][j] = 1; /* line 22 slow_hit_count: 9, fast_hit_count: 1 */
        else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
          dp[i][j] = 0; /* line 24 slow_hit_count: 900, fast_hit_count: 100 */
        continue; /* line 25 slow_hit_count: 909, fast_hit_count: 101 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i - 1] == 'N') { /* line 27 slow_hit_count: 9191, fast_hit_count: 0 */
        if (j == 0) dp[i][j] = 0; /* line 28 slow_hit_count: 101, fast_hit_count: 0 */
        if (j == 1) /* line 29 slow_hit_count: 101, fast_hit_count: 0 */
          dp[i][j] = 1; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
        else if (j > 1) { /* line 31 slow_hit_count: 100, fast_hit_count: 0 */
          if (j <= k) { /* line 32 slow_hit_count: 99, fast_hit_count: 0 */
            if (dp[i - 1][j - 1] == 1) /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
              dp[i][j] = 1; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
            else if (dp[i - 1][j - 1] == 0) /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
              dp[i][j] = 0; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
            else /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
              dp[i][j] = 2; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
          } else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
            if (dp[i - 1][j - 1] == 1) /* line 40 slow_hit_count: 99, fast_hit_count: 0 */
              dp[i][j] = 1; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
            else if (dp[i - 1][j - 1] == 0) /* line 42 slow_hit_count: 99, fast_hit_count: 0 */
              dp[i][j] = 0; /* line 43 slow_hit_count: 98, fast_hit_count: 0 */
            else { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
              for (int l = 1; l < 101; l++) { /* line 45 slow_hit_count: 101, fast_hit_count: 0 */
                if (dp[i - 1][l] == 2) dp[i - 1][l] = 0; /* line 46 slow_hit_count: 100, fast_hit_count: 0 */
              } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
              for (int l = 2; l < j; l++) { /* line 48 slow_hit_count: 9, fast_hit_count: 0 */
                if (dp[i][l] == 2) dp[i][l] = 0; /* line 49 slow_hit_count: 8, fast_hit_count: 0 */
              } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
              dp[i][j] = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
            } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i - 1] == '?') { /* line 56 slow_hit_count: 9191, fast_hit_count: 0 */
        if (j == 0) dp[i][j] = 2; /* line 57 slow_hit_count: 9090, fast_hit_count: 0 */
        if (dp[i - 1][j - 1] == 2 or dp[i - 1][j - 1] == 1) /* line 58 slow_hit_count: 9090, fast_hit_count: 0 */
          dp[i][j] = 2; /* line 59 slow_hit_count: 90, fast_hit_count: 0 */
        else /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
          dp[i][j] = 0; /* line 61 slow_hit_count: 9000, fast_hit_count: 0 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  int ans1 = 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= n; i++) { /* line 67 slow_hit_count: 102, fast_hit_count: 3 */
    for (int j = k + 1; j <= 100; j++) { /* line 68 slow_hit_count: 10100, fast_hit_count: 200 */
      if (dp[i][j] == 1) ans1 = 1; /* line 69 slow_hit_count: 9999, fast_hit_count: 198 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; i++) { /* line 72 slow_hit_count: 102, fast_hit_count: 3 */
    if (dp[i][k] == 1 or dp[i][k] == 2) { /* line 73 slow_hit_count: 101, fast_hit_count: 2 */
      ans = 1; /* line 74 slow_hit_count: 10, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans == 1 and ans1 == 0) /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES" << endl; /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO" << endl; /* line 80 slow_hit_count: 1, fast_hit_count: 2 */
} /* line 81 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided C code and the hit count data for the slow and fast inputs, I'll analyze the program to identify potential performance bottlenecks and derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The lines within the nested loops (lines 9-12 and lines 67-68) are hit significantly more in the slow input than in the fast one. Specifically, line 10 (`dp[i][j] = -1;`) and line 12 (`for (int j = 0; j <= 100; j++)`) are executed much more often.
   - The handling of the `dp` table (lines 11-64) involves substantial hit counts, especially where the state of the dynamic programming table is being set and checked.

2. **Interactions with Data Structures**:
   - The program constructs a `dp` table of size `(n + 1) x 101`. The outer loop (indexed by `i`) runs for `0` to `n`, and the inner loop (indexed by `j`) runs for `0` to `100`, resulting in a maximum of `101 * (n + 1)` operations per block of logic.
   - The nature of the problem (handling uncertain inputs marked by `'?'`) means that the handling of `dp` states when the character is `'?'` or `'N'` causes branching logic which further increases execution time when `n` is large and there are many `'?'` marks.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants that describe conditions under which the program may slow down:

1. **Invariant 1: Handling of Many Unknown Episodes (`'?'`)**:
   - **Description**: "If the input sequence contains many unknown episodes ('?'), especially when they are consecutive, the program may slow down significantly due to increased branching and state evaluation within the DP table. This is because the program has to consider multiple possible states, leading to more complex logic in the nested loops."
   - **Example Situation**: A sequence with a high number of '?' characters surrounded by known episodes ('Y' or 'N').

2. **Invariant 2: Large Input Size**:
   - **Description**: "When the number of episodes `n` is close to the maximum constraint (e.g., n = 100), the nested loops that iterate through each episode and every potential dissatisfaction level (`j`) from 0 to 100 can lead to significant computational overhead."
   - **Example Situation**: Input where `n` is near 100, and the dissatisfaction `k` requires consideration of nearly all possible states.

3. **Invariant 3: Frequent Reset of DP States**:
   - **Description**: "If the DP table needs frequent resetting or re-evaluation of states due to input patterns, particularly when many episodes are uncertain (`?`), the overall performance can degrade due to repeated iteration over a large state space."
   - **Example Situation**: A mix of certain 'N's and '?'s leading to frequent alternation in the DP logic.

These invariants provide a broad but realistic set of conditions under which the program may experience slow performance, focusing on input patterns rather than specific numeric values. The focus on '?' handling and input size close to constraints is crucial for understanding performance bottlenecks in this context.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the natural language performance invariants into C++ checker code.

#### Invariant 1: Handling of Many Unknown Episodes (`'?'`)
```cpp
void check_unknown_invariant(const std::string& s, int n) {
    int consecutiveUnknowns = 0;
    for (char c : s) {
        if (c == '?') {
            consecutiveUnknowns++;
            if (consecutiveUnknowns > n / 2) { // Threshold: more than half of the episodes are unknown
                cerr << "Warning: Performance bottleneck condition triggered - too many unknown episodes!" << endl;
                abort();
            }
        } else {
            consecutiveUnknowns = 0;
        }
    }
}
```

#### Invariant 2: Large Input Size
```cpp
void check_input_size_invariant(int n) {
    if (n > 90) { // Threshold: n close to the maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}
```

#### Invariant 3: Frequent Reset of DP States
```cpp
void check_dp_reset_invariant(const std::string& s) {
    int resetCount = 0;
    for (char c : s) {
        if (c == '?') {
            resetCount++;
            if (resetCount > 30) { // Arbitrary threshold for frequent DP resets
                cerr << "Warning: Performance bottleneck condition triggered - frequent resetting of DP states!" << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the original C++ program strategically to ensure they help detect performance bottlenecks without adding significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance checker functions
void check_unknown_invariant(const std::string& s, int n) {
    int consecutiveUnknowns = 0;
    for (char c : s) {
        if (c == '?') {
            consecutiveUnknowns++;
            if (consecutiveUnknowns > n / 2) { // Threshold: more than half of the episodes are unknown
                cerr << "Warning: Performance bottleneck condition triggered - too many unknown episodes!" << endl;
                abort();
            }
        } else {
            consecutiveUnknowns = 0;
        }
    }
}

void check_input_size_invariant(int n) {
    if (n > 90) { // Threshold: n close to the maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}

void check_dp_reset_invariant(const std::string& s) {
    int resetCount = 0;
    for (char c : s) {
        if (c == '?') {
            resetCount++;
            if (resetCount > 30) { // Arbitrary threshold for frequent DP resets
                cerr << "Warning: Performance bottleneck condition triggered - frequent resetting of DP states!" << endl;
                abort();
            }
        }
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;

    // Insert performance checks
    check_input_size_invariant(n);        // Check for large input size
    check_unknown_invariant(s, n);        // Check for too many unknown episodes
    check_dp_reset_invariant(s);          // Check for frequent DP resets

    int dp[n + 1][101];
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= 100; j++) dp[i][j] = -1;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= 100; j++) {
            if (i == 0) {
                if (j == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = 0;
                continue;
            }
            if (s[i - 1] == 'Y') {
                if (j == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = 0;
                continue;
            }
            if (s[i - 1] == 'N') {
                if (j == 0) dp[i][j] = 0;
                if (j == 1)
                    dp[i][j] = 1;
                else if (j > 1) {
                    if (j <= k) {
                        if (dp[i - 1][j - 1] == 1)
                            dp[i][j] = 1;
                        else if (dp[i - 1][j - 1] == 0)
                            dp[i][j] = 0;
                        else
                            dp[i][j] = 2;
                    } else {
                        if (dp[i - 1][j - 1] == 1)
                            dp[i][j] = 1;
                        else if (dp[i - 1][j - 1] == 0)
                            dp[i][j] = 0;
                        else {
                            for (int l = 1; l < 101; l++) {
                                if (dp[i - 1][l] == 2) dp[i - 1][l] = 0;
                            }
                            for (int l = 2; l < j; l++) {
                                if (dp[i][l] == 2) dp[i][l] = 0;
                            }
                            dp[i][j] = 0;
                        }
                    }
                }
            }
            if (s[i - 1] == '?') {
                if (j == 0) dp[i][j] = 2;
                if (dp[i - 1][j - 1] == 2 or dp[i - 1][j - 1] == 1)
                    dp[i][j] = 2;
                else
                    dp[i][j] = 0;
            }
        }
    }
    int ans = 0;
    int ans1 = 0;
    for (int i = 0; i <= n; i++) {
        for (int j = k + 1; j <= 100; j++) {
            if (dp[i][j] == 1) ans1 = 1;
        }
    }
    for (int i = 0; i <= n; i++) {
        if (dp[i][k] == 1 or dp[i][k] == 2) {
            ans = 1;
        }
    }
    if (ans == 1 and ans1 == 0)
        cout << "YES" << endl;
    else
        cout << "NO" << endl;
}
```

### Explanation

- **Check Placement**: The checks are placed right after the input is read. This ensures they run once and do not affect the performance of the main algorithm.
- **Invariant Checks**: Each check corresponds to a potential performance bottleneck identified in the analysis phase and is designed to catch conditions where the performance might degrade significantly. These checks are consistent with the constraints and provide a safety net to detect problematic inputs.

