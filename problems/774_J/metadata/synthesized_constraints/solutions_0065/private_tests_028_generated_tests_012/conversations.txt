system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dp[1000];
int here[1000][1000];
int solve(string s) {
  memset(dp, 0, sizeof(dp));
  dp[0] = (s[0] == 'N');
  for (int i = int(1); i < int(int((s).size())); ++i) {
    if (s[i] != 'N')
      dp[i] = 0;
    else
      dp[i] = dp[i - 1] + 1;
  }
  int mx = 0;
  for (int i = int(0); i < int(int((s).size())); ++i) mx = max(mx, dp[i]);
  return mx;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int n, k;
  cin >> n >> k;
  string s;
  cin >> s;
  int mn = solve(s);
  if (k < mn) {
    cout << "NO" << endl;
    return 0;
  }
  if (k == 0) {
    cout << "YES" << endl;
    return 0;
  }
  bool find = false;
  s.push_back('Y');
  for (int i = int(0); i < int(n); ++i)
    for (int tam = int(1); tam < int(i + 2); ++tam) {
      if (s[i + 1] == 'N') continue;
      here[i][tam] = true;
      for (int j = int(i - tam + 1); j < int(i + 1); ++j)
        if (s[j] == 'Y') here[i][tam] = false;
      if (i - tam >= 0 && s[i - tam] == 'N') here[i][tam] = false;
      if (tam == k && here[i][tam]) find = true;
    }
  if (find)
    cout << "YES" << endl;
  else
    cout << "NO" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 1
YYYYYYYNYYY??YY??YYYYYYY????NYY?YYY?Y??YYYY????YY?YY?YYY?YY??YYY?Y??NYYYY?YNYY??Y??YYYYY?YYY????YYY


(G.2) Fast Input

99 0
YYYYYYYNYYY??YY??YYYYYYY????NYY?YYY?Y??YYYY????YY?YY?YYY?YY??YYY?Y??NYYYY?YNYY??Y??YYYYY?YYY????YYY


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int here[1000][1000]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int solve(string s) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0, sizeof(dp)); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0] = (s[0] == 'N'); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = int(1); i < int(int((s).size())); ++i) { /* line 8 slow_hit_count: 99, fast_hit_count: 99 */
    if (s[i] != 'N') /* line 9 slow_hit_count: 98, fast_hit_count: 98 */
      dp[i] = 0; /* line 10 slow_hit_count: 94, fast_hit_count: 94 */
    else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i] = dp[i - 1] + 1; /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  int mx = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = int(0); i < int(int((s).size())); ++i) mx = max(mx, dp[i]); /* line 15 slow_hit_count: 100, fast_hit_count: 100 */
  return mx; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int mn = solve(s); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  if (k < mn) { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO" << endl; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "YES" << endl; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  bool find = false; /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
  s.push_back('Y'); /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = int(0); i < int(n); ++i) /* line 36 slow_hit_count: 100, fast_hit_count: 0 */
    for (int tam = int(1); tam < int(i + 2); ++tam) { /* line 37 slow_hit_count: 5049, fast_hit_count: 0 */
      if (s[i + 1] == 'N') continue; /* line 38 slow_hit_count: 4950, fast_hit_count: 0 */
      here[i][tam] = true; /* line 39 slow_hit_count: 4772, fast_hit_count: 0 */
      for (int j = int(i - tam + 1); j < int(i + 1); ++j) /* line 40 slow_hit_count: 165792, fast_hit_count: 0 */
        if (s[j] == 'Y') here[i][tam] = false; /* line 41 slow_hit_count: 161020, fast_hit_count: 0 */
      if (i - tam >= 0 && s[i - tam] == 'N') here[i][tam] = false; /* line 42 slow_hit_count: 4772, fast_hit_count: 0 */
      if (tam == k && here[i][tam]) find = true; /* line 43 slow_hit_count: 4772, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  if (find) /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "YES" << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO" << endl; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we can analyze the line-level hit counts for both the fast and slow inputs. By comparing these counts and considering the problem constraints, we can identify where the program is spending excessive time and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Identify Hotspots**: 
   - The lines inside the nested loop starting at line 36 show a significant increase in hit count during the slow input execution. Specifically, lines 37 to 43 have very high hit counts.
   - Line 40, which involves an inner loop, has the highest hit count (165,792), indicating that this loop executes many times, contributing to the slowdown.

2. **Analysis of Loops and Conditions**:
   - The outer loop (line 36) iterates over the length of the string `s`, which is `n` (at most 100).
   - The inner loop (line 37) iterates up to `i + 2`, which could be up to 102 iterations for each `i`.
   - Line 40's nested loop iterates from `i-tam+1` to `i+1`, potentially leading to excessive iteration counts given the conditions being checked.

3. **Interacting Data Structures**:
   - The `here` array is accessed and modified frequently, and the conditions checked in lines 41 and 42 intensively interact with the input string `s` to determine if consecutive episodes are unwatched.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Nested Loop Execution with '?'**:
   - **Natural Language Description**: "If the input sequence contains many unknown ('?') states, and `k` is small compared to the possible maximum dissatisfaction, the code enters a path with excessive nested loop execution, trying many possible states for episodes marked as '?'."
   - **Reasoning**: The presence of many unknown states combined with a small `k` increases the number of possibilities the nested loops must evaluate, leading to high iteration counts and slow execution.

2. **Invariant 2: High Iterative Complexity**:
   - **Natural Language Description**: "When attempting to determine dissatisfaction over sequences that could be ambiguously marked as watched or not, if the sequence length approaches the constraint maximum, the nested structure can lead to quadratic or higher complexity, slowing the program."
   - **Reasoning**: The nested loops and conditions result in checking numerous episode combinations, especially when `n` is large (close to 100), exacerbating time complexity.

3. **Invariant 3: Redundant Checks for Small `k`**:
   - **Natural Language Description**: "If `k` is small relative to the number of episodes marked with '?', the algorithm's exhaustive checking for each segment increases, leading to performance degradation."
   - **Reasoning**: Lower values of `k` increase the number of configurations the program must verify, especially when many episodes are marked as unknown.

By understanding and abstracting these conditions, we create performance invariants that help predict when the program might encounter slow execution paths, even for future inputs that conform to the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived previously, here is the C++ checker code for each invariant:

```cpp
void check_nested_loop_with_unknowns(int n, int countUnknowns, int k) {
    if (countUnknowns > n / 2 && k < 3) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop executions due to many unknowns." << endl;
        abort();
    }
}

void check_high_iterative_complexity(int n, int k) {
    if (n >= 90 && k < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high iterative complexity due to large n and small k." << endl;
        abort();
    }
}

void check_redundant_checks_small_k(int countUnknowns, int k) {
    if (countUnknowns > 0 && k < 2) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant checks with small k." << endl;
        abort();
    }
}
```

### Explanation:

1. **check_nested_loop_with_unknowns**: This function checks if there are many unknowns in the sequence and `k` is small. It assumes a scenario likely to cause inefficiencies due to excessive nested loop executions.

2. **check_high_iterative_complexity**: This function evaluates if `n` is large and `k` is relatively small, indicating a potential for high complexity due to the number of combinations being evaluated.

3. **check_redundant_checks_small_k**: This function identifies scenarios where `k` is very small relative to the amount of uncertainty, which could lead to redundant computations.

### Phase 4: Integrate Checks into the C++ Program

Now, we'll integrate these checks into the original C++ program at appropriate points, ensuring they do not add overhead within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int dp[1000];
int here[1000][1000];

void check_nested_loop_with_unknowns(int n, int countUnknowns, int k) {
    if (countUnknowns > n / 2 && k < 3) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop executions due to many unknowns." << endl;
        abort();
    }
}

void check_high_iterative_complexity(int n, int k) {
    if (n >= 90 && k < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high iterative complexity due to large n and small k." << endl;
        abort();
    }
}

void check_redundant_checks_small_k(int countUnknowns, int k) {
    if (countUnknowns > 0 && k < 2) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant checks with small k." << endl;
        abort();
    }
}

int solve(string s) {
    memset(dp, 0, sizeof(dp));
    dp[0] = (s[0] == 'N');
    for (int i = 1; i < int(s.size()); ++i) {
        if (s[i] != 'N')
            dp[i] = 0;
        else
            dp[i] = dp[i - 1] + 1;
    }
    int mx = 0;
    for (int i = 0; i < int(s.size()); ++i) mx = max(mx, dp[i]);
    return mx;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;

    // Count the number of '?'
    int countUnknowns = count(s.begin(), s.end(), '?');

    // Insert performance checks before major computation
    check_nested_loop_with_unknowns(n, countUnknowns, k);
    check_high_iterative_complexity(n, k);
    check_redundant_checks_small_k(countUnknowns, k);

    int mn = solve(s);
    if (k < mn) {
        cout << "NO" << endl;
        return 0;
    }
    if (k == 0) {
        cout << "YES" << endl;
        return 0;
    }
    bool find = false;
    s.push_back('Y');
    for (int i = 0; i < n; ++i)
        for (int tam = 1; tam < i + 2; ++tam) {
            if (s[i + 1] == 'N') continue;
            here[i][tam] = true;
            for (int j = i - tam + 1; j < i + 1; ++j)
                if (s[j] == 'Y') here[i][tam] = false;
            if (i - tam >= 0 && s[i - tam] == 'N') here[i][tam] = false;
            if (tam == k && here[i][tam]) find = true;
        }
    if (find)
        cout << "YES" << endl;
    else
        cout << "NO" << endl;
    return 0;
}
```

### Explanation of Integration:

- **Check placement**: The checks are placed after input parsing and before any complex computations. This ensures they capture potential inefficiencies without contributing to them.
- **Thresholds**: The thresholds used in the checks (`n / 2`, `k < 3`, etc.) are chosen based on the problem constraints and the logical reasoning about potential slow paths.

This instrumented code will help detect and abort when potential performance bottlenecks are triggered, providing valuable feedback during testing and fuzzing.

