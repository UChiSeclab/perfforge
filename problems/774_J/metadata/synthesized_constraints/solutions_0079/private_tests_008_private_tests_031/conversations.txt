system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k;
  cin >> n >> k;
  int dp[100 + 5][100 + 5][105];
  memset(dp, 0, sizeof(dp));
  string s;
  cin >> s;
  s += 'Y';
  n++;
  dp[0][0][0] = 1;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j <= 100; j++) {
      for (int mx = 0; mx <= 100; mx++) {
        if (dp[i][j][mx] == 0) continue;
        if (s[i] == 'N') {
          dp[i + 1][j + 1][mx] = 1;
        }
        if (s[i] == 'Y') {
          dp[i + 1][0][max(j, mx)] = 1;
        }
        if (s[i] == '?') {
          dp[i + 1][0][max(mx, j)] = 1;
          dp[i + 1][j + 1][mx] = 1;
        }
      }
    }
  }
  if (dp[n][0][k]) {
    cout << "YES" << endl;
  } else {
    cout << "NO" << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
???Y??????????????????????????????????????Y?????????N???Y????????Y?????Y???????Y??Y??????????YY?????


(G.2) Fast Input

1 1
?


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int dp[100 + 5][100 + 5][105]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, 0, sizeof(dp)); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> s; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  s += 'Y'; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  n++; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0][0][0] = 1; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 102, fast_hit_count: 3 */
    for (int j = 0; j <= 100; j++) { /* line 14 slow_hit_count: 10302, fast_hit_count: 204 */
      for (int mx = 0; mx <= 100; mx++) { /* line 15 slow_hit_count: 1040502, fast_hit_count: 20604 */
        if (dp[i][j][mx] == 0) continue; /* line 16 slow_hit_count: 1030301, fast_hit_count: 20402 */
        if (s[i] == 'N') { /* line 17 slow_hit_count: 21655, fast_hit_count: 3 */
          dp[i + 1][j + 1][mx] = 1; /* line 18 slow_hit_count: 390, fast_hit_count: 0 */
        } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        if (s[i] == 'Y') { /* line 20 slow_hit_count: 21655, fast_hit_count: 3 */
          dp[i + 1][0][max(j, mx)] = 1; /* line 21 slow_hit_count: 2934, fast_hit_count: 2 */
        } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        if (s[i] == '?') { /* line 23 slow_hit_count: 21655, fast_hit_count: 3 */
          dp[i + 1][0][max(mx, j)] = 1; /* line 24 slow_hit_count: 18331, fast_hit_count: 1 */
          dp[i + 1][j + 1][mx] = 1; /* line 25 slow_hit_count: 18331, fast_hit_count: 1 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[n][0][k]) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES" << endl; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO" << endl; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's break down the observed differences between the fast and slow inputs by analyzing the hit count information, and then derive performance-characterizing invariants based on these observations.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:
- **Loop Iterations:**
  - The outer loop on line 13 (`for (int i = 0; i < n; i++)`) iterates 102 times for the slow input but only 3 times for the fast input. This indicates that the loop over the string `s` is a primary area of concern.
  - The nested loop on line 14 (`for (int j = 0; j <= 100; j++)`) is executed 10,302 times for the slow input compared to 204 times for the fast input, suggesting significant computational effort within this loop.
  - Finally, the innermost loop on line 15 (`for (int mx = 0; mx <= 100; mx++)`) has a hit count of 1,040,502 for the slow input, compared to 20,604 for the fast input, which confirms that the triple nested loops are leading to a combinatorial explosion in operations.

#### Key Lines with High Hit Counts:
- **Line 16:** The condition check `if (dp[i][j][mx] == 0) continue;` is executed a substantial number of times (1,030,301 for slow compared to 20,402 for fast), indicating frequent checks.
- **Lines 17, 20, 23:** The condition checks for `s[i]` being `'N'`, `'Y'`, or `'?'` are hit significantly more often in the slow input, showing repeated decision points based on the input string.
- **Lines 18, 21, 24, 25:** The DP table updates are happening far more often in the slow input, indicating that state transitions in the dynamic programming approach are heavily exercised.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Nested Iteration Invariant:**
   - **Natural Language Description:** "The program may experience significant slowdowns when the number of possible sequences of episodes (`N`, `Y`, or `?`) leads to high repetition within the nested loops. Specifically, when there are many uncertain episodes (`?`) that must be evaluated in combination with others, resulting in a large number of dynamic states being explored."
   - **Threshold Consideration:** This is exacerbated when the number of uncertain episodes is high and is interspersed with definite episodes (`N` or `Y`), causing more combinations to be considered.

2. **Dynamic Programming Table Size Invariant:**
   - **Natural Language Description:** "If the dynamic programming table is repeatedly updated for numerous combinations of sub-problems, especially involving many segments of uncertain episodes, the computational overhead can become significant."
   - **Threshold Consideration:** This occurs when segments of the series have many `?` symbols, leading to a vast search space of potential dissatisfied sequences.

3. **Memory and State Management Invariant:**
   - **Natural Language Description:** "The computation may slow down considerably if the memory usage for the dynamic programming table grows due to extensive state management caused by many uncertain (`?`) episodes."
   - **Threshold Consideration:** A high number of `?` episodes, especially when closely packed, increases the memory footprint due to maintaining numerous possible states simultaneously.

By understanding these invariants, developers can better identify when the program is likely to enter a performance bottleneck and thus optimize or refactor the code to mitigate these slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived in Phase 2, we will create checker functions in C++ that can be integrated into the program to detect when the code may be running slowly due to the factors identified.

#### Invariant 1: Nested Iteration Invariant

```cpp
void check_nested_iteration_invariant(int questionMarksCount) {
    if (questionMarksCount > 50) { // Assuming more than 50 '?' might lead to too many iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinations from uncertain episodes!" << endl;
        abort();
    }
}
```

#### Invariant 2: Dynamic Programming Table Size Invariant

```cpp
void check_dp_table_size_invariant(int n, int uncertainSegments) {
    if (uncertainSegments > 50) { // Threshold based on extensive uncertain segments
        cerr << "Warning: Performance bottleneck condition triggered - large number of uncertain segments in DP table!" << endl;
        abort();
    }
}
```

#### Invariant 3: Memory and State Management Invariant

```cpp
void check_memory_usage_invariant(int dpSizeEstimate) {
    if (dpSizeEstimate > 10000) { // Assume a threshold for excessive memory usage
        cerr << "Warning: Performance bottleneck condition triggered - excessive memory usage due to DP states!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Functions into the Original Code

We integrate the above checker functions into the C++ program at appropriate points to ensure they don't incur overhead during tight loops, but instead capture performance issues before those loops are executed.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_nested_iteration_invariant(int questionMarksCount) {
    if (questionMarksCount > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinations from uncertain episodes!" << endl;
        abort();
    }
}

void check_dp_table_size_invariant(int n, int uncertainSegments) {
    if (uncertainSegments > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of uncertain segments in DP table!" << endl;
        abort();
    }
}

void check_memory_usage_invariant(int dpSizeEstimate) {
    if (dpSizeEstimate > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive memory usage due to DP states!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    int dp[100 + 5][100 + 5][105];
    memset(dp, 0, sizeof(dp));
    string s;
    cin >> s;

    // Add invariant checks after reading input
    int questionMarksCount = count(s.begin(), s.end(), '?');
    check_nested_iteration_invariant(questionMarksCount);

    int uncertainSegments = 0; // To be calculated based on '?' clusters
    for (char c : s) {
        if (c == '?') {
            ++uncertainSegments;
        }
    }
    check_dp_table_size_invariant(n, uncertainSegments);
    
    int dpSizeEstimate = n * 100 * 100; // Rough estimate
    check_memory_usage_invariant(dpSizeEstimate);

    s += 'Y';
    n++;
    dp[0][0][0] = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= 100; j++) {
            for (int mx = 0; mx <= 100; mx++) {
                if (dp[i][j][mx] == 0) continue;
                if (s[i] == 'N') {
                    dp[i + 1][j + 1][mx] = 1;
                }
                if (s[i] == 'Y') {
                    dp[i + 1][0][max(j, mx)] = 1;
                }
                if (s[i] == '?') {
                    dp[i + 1][0][max(mx, j)] = 1;
                    dp[i + 1][j + 1][mx] = 1;
                }
            }
        }
    }
    if (dp[n][0][k]) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }
    return 0;
}
```

### Explanation

- **Invariant Integration:** We place the checks immediately after reading input and before dynamic state setup.
- **Rationale:** This ensures that if any input characteristics trigger a performance bottleneck, it is detected before the costly operations execute. Each check captures different aspects of potential slowdowns, such as excessive combinations, large DP table sizes, and high memory usage.
- **Thresholds:** The thresholds are chosen to capture scenarios that are likely to lead to slowdowns, without triggering on normal inputs. They reflect potential issues as might arise with a high number of `?` or large dynamic problem segments.

