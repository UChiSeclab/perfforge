system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dp[110][110][110];
int n, m;
char a[110];
int func(int here, int ch, int ch1) {
  if (here == n) {
    if (ch1 == m)
      return 1;
    else
      return 0;
  }
  int &ret = dp[here][ch][ch1];
  if (ret != -1) return ret;
  ret = 0;
  if (a[here] == 'N')
    ret = func(here + 1, ch + 1, max(ch + 1, ch1));
  else if (a[here] == 'Y')
    ret = func(here + 1, 0, ch1);
  else {
    ret = max(func(here + 1, ch + 1, max(ch + 1, ch1)), func(here + 1, 0, ch1));
  }
  return ret;
}
int main() {
  memset(dp, -1, sizeof(dp));
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; i++) scanf(" %1c", &a[i]);
  if (func(0, 0, 0))
    puts("YES");
  else
    puts("NO");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
???Y??????????????????????????????????????Y?????????N???Y????????Y?????Y???????Y??Y??????????YY?????


(G.2) Fast Input

1 1
?


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dp[110][110][110]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char a[110]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int func(int here, int ch, int ch1) { /* line 6 slow_hit_count: 29361, fast_hit_count: 3 */
  if (here == n) { /* line 7 slow_hit_count: 29361, fast_hit_count: 3 */
    if (ch1 == m) /* line 8 slow_hit_count: 368, fast_hit_count: 2 */
      return 1; /* line 9 slow_hit_count: 3, fast_hit_count: 1 */
    else /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 11 slow_hit_count: 365, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int &ret = dp[here][ch][ch1]; /* line 13 slow_hit_count: 28993, fast_hit_count: 1 */
  if (ret != -1) return ret; /* line 14 slow_hit_count: 28993, fast_hit_count: 1 */
  ret = 0; /* line 15 slow_hit_count: 15934, fast_hit_count: 1 */
  if (a[here] == 'N') /* line 16 slow_hit_count: 15934, fast_hit_count: 1 */
    ret = func(here + 1, ch + 1, max(ch + 1, ch1)); /* line 17 slow_hit_count: 345, fast_hit_count: 0 */
  else if (a[here] == 'Y') /* line 18 slow_hit_count: 15589, fast_hit_count: 1 */
    ret = func(here + 1, 0, ch1); /* line 19 slow_hit_count: 2163, fast_hit_count: 0 */
  else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    ret = max(func(here + 1, ch + 1, max(ch + 1, ch1)), func(here + 1, 0, ch1)); /* line 21 slow_hit_count: 13426, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 23 slow_hit_count: 15934, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf(" %1c", &a[i]); /* line 28 slow_hit_count: 101, fast_hit_count: 2 */
  if (func(0, 0, 0)) /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    puts("YES"); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    puts("NO"); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided:

1. **Function Entry and Exit:**
   - The `func` function is called 29,361 times for the slow input and only 3 times for the fast input (lines 6 and 7). This indicates a recursive call structure that's much deeper or more extensive in the slow input case.

2. **Recursion End Condition:**
   - The condition `if (here == n)` (line 7) is hit 29,361 times in the slow input and only 3 times in the fast input. This suggests that the recursion depth or breadth in processing the input is a critical factor for the slow input.

3. **Character Check and Recursion:**
   - The check `if (a[here] == 'N')` (line 16) and subsequent recursion (line 17) occur 15,934 times in the slow input, while for 'Y', it occurs 15,589 times (line 18). The 'else' block (line 21) is also significantly hit for the slow input. These results highlight that the recursive function calls based on characters 'N', 'Y', and '?' significantly affect performance.

4. **Maximum Function Call in Unknown Scenario:**
   - The line `ret = max(func(...), func(...));` (line 21) is executed 13,426 times for the slow input, indicating a high number of decision branches when the character is '?', leading to a combinatorial explosion in function calls.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from the hit counts, we can derive the following performance-characterizing invariants:

1. **High Recursion Depth with Uncertain Episodes:**
   - **Natural Language Description:** "If the sequence contains a large number of uncertain ('?') episodes interspersed with definite episodes ('N' or 'Y'), the recursion depth increases significantly, leading to slower execution. The combinatorial paths due to uncertainty can result in an exponential number of recursive calls."
   - **Threshold Suggestion:** When the number of '?' characters approaches n in sequences where n is large (close to 100), it results in numerous recursive explorations.

2. **Excessive Recursion Due to Consecutive Unknowns:**
   - **Natural Language Description:** "If there are long runs of consecutive unknown ('?') episodes, the recursive function might explore multiple configurations for each, significantly increasing the number of recursive calls."
   - **Threshold Suggestion:** When consecutive '?' characters exceed a third of the sequence length, the potential branching can cause a significant slowdown.

3. **Recursive Path Explosion with Mixed Characters:**
   - **Natural Language Description:** "If the sequence is composed of a mix of 'N', 'Y', and '?' with more '?' than 'N' or 'Y', the recursive exploration of possible dissatisfaction paths might become exhaustive."
   - **Threshold Suggestion:** When '?' characters form more than half of non-'Y' episodes, recursion paths multiply, impacting performance.

These invariants target the conditions under which the program's recursive nature may lead to slow performance, focusing on the interaction between 'N', 'Y', and '?' characters and their impact on recursive call paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Below, I've translated the previously derived natural language invariants into C++ code snippets that can be used as runtime checks.

1. **High Recursion Depth with Uncertain Episodes:**

```cpp
void check_uncertain_invariant(int numUncertain, int n) {
    if (numUncertain > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - too many uncertain episodes!" << endl;
        abort();
    }
}
```

2. **Excessive Recursion Due to Consecutive Unknowns:**

```cpp
void check_consecutive_unknowns_invariant(int maxConsecutiveUncertain, int n) {
    if (maxConsecutiveUncertain > n / 3) {
        cerr << "Warning: Performance bottleneck condition triggered - too many consecutive uncertain episodes!" << endl;
        abort();
    }
}
```

3. **Recursive Path Explosion with Mixed Characters:**

```cpp
void check_mixed_invariant(int numUncertain, int numY, int n) {
    if (numUncertain > (n - numY) / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - high mix of uncertain episodes!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checkers into the original C++ code to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int dp[110][110][110];
int n, m;
char a[110];

void check_uncertain_invariant(int numUncertain, int n) {
    if (numUncertain > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - too many uncertain episodes!" << endl;
        abort();
    }
}

void check_consecutive_unknowns_invariant(int maxConsecutiveUncertain, int n) {
    if (maxConsecutiveUncertain > n / 3) {
        cerr << "Warning: Performance bottleneck condition triggered - too many consecutive uncertain episodes!" << endl;
        abort();
    }
}

void check_mixed_invariant(int numUncertain, int numY, int n) {
    if (numUncertain > (n - numY) / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - high mix of uncertain episodes!" << endl;
        abort();
    }
}

int func(int here, int ch, int ch1) {
    if (here == n) {
        if (ch1 == m)
            return 1;
        else
            return 0;
    }
    int &ret = dp[here][ch][ch1];
    if (ret != -1) return ret;
    ret = 0;
    if (a[here] == 'N')
        ret = func(here + 1, ch + 1, max(ch + 1, ch1));
    else if (a[here] == 'Y')
        ret = func(here + 1, 0, ch1);
    else {
        ret = max(func(here + 1, ch + 1, max(ch + 1, ch1)), func(here + 1, 0, ch1));
    }
    return ret;
}

int main() {
    memset(dp, -1, sizeof(dp));
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++) scanf(" %1c", &a[i]);
    
    // Pre-calculate conditions for the invariants
    int numUncertain = 0, maxConsecutiveUncertain = 0, currentConsecutiveUncertain = 0, numY = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] == '?') {
            numUncertain++;
            currentConsecutiveUncertain++;
        } else {
            maxConsecutiveUncertain = max(maxConsecutiveUncertain, currentConsecutiveUncertain);
            currentConsecutiveUncertain = 0;
        }
        if (a[i] == 'Y') {
            numY++;
        }
    }
    maxConsecutiveUncertain = max(maxConsecutiveUncertain, currentConsecutiveUncertain);

    // Insert performance-checking conditions
    check_uncertain_invariant(numUncertain, n);
    check_consecutive_unknowns_invariant(maxConsecutiveUncertain, n);
    check_mixed_invariant(numUncertain, numY, n);

    if (func(0, 0, 0))
        puts("YES");
    else
        puts("NO");
}
```

### Explanation

- **Checker Integration:** Each of the previously defined checkers is integrated into the `main` function just after reading and processing the input.
- **Pre-calculation:** Before invoking the checkers, the necessary conditions are pre-calculated, such as `numUncertain`, `maxConsecutiveUncertain`, and `numY`, so as to avoid additional computation within the checker functions.
- **Placement:** The checkers are placed outside tight loops or recursive functions to avoid increasing the computational overhead significantly.

