system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
T abs(T x) {
  return x > 0 ? x : -x;
}
template <class T>
T gcd(T a, T b) {
  return a ? gcd(b % a, a) : b;
}
template <class T>
T sqr(T a) {
  return a * a;
}
template <class T>
T sgn(T a) {
  return a > 0 ? 1 : (a < 0 ? -1 : 0);
}
int n;
int m;
const int N = 101;
bool was[N][N][N], ans;
char s[N];
void go(int i, int j, int k) {
  if (i == n) {
    ans |= k == m;
    return;
  }
  if (was[i][j][k]) return;
  if (s[i] == 'N')
    go(i + 1, j + 1, max(j + 1, k));
  else if (s[i] == 'Y')
    go(i + 1, 0, k);
  else if (s[i] == '?')
    go(i + 1, 0, k), go(i + 1, j + 1, max(j + 1, k));
  was[i][j][k] = true;
  return;
}
int main() {
  scanf("%d%d ", &n, &m);
  gets(s);
  go(0, 0, 0);
  if (ans)
    puts("YES");
  else
    puts("NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
???Y??????????????????????????????????????Y?????????N???Y????????Y?????Y???????Y??Y??????????YY?????


(G.2) Fast Input

1 1
N


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
T abs(T x) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return x > 0 ? x : -x; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
T gcd(T a, T b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return a ? gcd(b % a, a) : b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
T sqr(T a) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return a * a; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
T sgn(T a) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return a > 0 ? 1 : (a < 0 ? -1 : 0); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int m; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 101; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
bool was[N][N][N], ans; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
char s[N]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void go(int i, int j, int k) { /* line 24 slow_hit_count: 29361, fast_hit_count: 2 */
  if (i == n) { /* line 25 slow_hit_count: 29361, fast_hit_count: 2 */
    ans |= k == m; /* line 26 slow_hit_count: 368, fast_hit_count: 1 */
    return; /* line 27 slow_hit_count: 368, fast_hit_count: 1 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  if (was[i][j][k]) return; /* line 29 slow_hit_count: 28993, fast_hit_count: 1 */
  if (s[i] == 'N') /* line 30 slow_hit_count: 15934, fast_hit_count: 1 */
    go(i + 1, j + 1, max(j + 1, k)); /* line 31 slow_hit_count: 345, fast_hit_count: 1 */
  else if (s[i] == 'Y') /* line 32 slow_hit_count: 15589, fast_hit_count: 0 */
    go(i + 1, 0, k); /* line 33 slow_hit_count: 2163, fast_hit_count: 0 */
  else if (s[i] == '?') /* line 34 slow_hit_count: 13426, fast_hit_count: 0 */
    go(i + 1, 0, k), go(i + 1, j + 1, max(j + 1, k)); /* line 35 slow_hit_count: 13426, fast_hit_count: 0 */
  was[i][j][k] = true; /* line 36 slow_hit_count: 15934, fast_hit_count: 1 */
  return; /* line 37 slow_hit_count: 15934, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d ", &n, &m); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  gets(s); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  go(0, 0, 0); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  if (ans) /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    puts("YES"); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    puts("NO"); /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottleneck in the given C program, we can follow the outlined approach and analyze the hit count information to generate performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts:** 
   - The function `go` line 24 is called significantly more often in the slow input (29,361 times) compared to the fast input (2 times).
   - Inside the `go` function, the line that checks if `was[i][j][k]` is `true` (line 29) is hit 28,993 times for the slow input, suggesting many recursive calls are revisiting states.
   - The conditions in the `go` function that lead to further recursive calls, such as `go(i + 1, 0, k), go(i + 1, j + 1, max(j + 1, k));` for the case when `s[i] == '?'` (line 35), are hit 13,426 times, indicating a lot of branching due to uncertainty (`'?'`).

2. **Inference on Interactions:**
   - The recursive function `go` is being invoked very frequently due to the presence of many '?' characters which create multiple branching paths in the decision tree.
   - The `was` array is used to remember the states that have been visited, but the high hit count implies that many different states are being explored, causing inefficiency.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations and the constraints (n ≤ 100), here are the performance-characterizing invariants in natural language:

1. **Invariant #1: High Degree of Uncertainty**
   - Natural language: "If the input sequence contains a high proportion of '?' characters, the program may slow down significantly due to the exponential increase in possible states to explore."
   - This invariant captures the main source of inefficiency related to the '?' characters leading to recursive branching.

2. **Invariant #2: Recursion and Memory Overhead**
   - Natural language: "If the number of recursive calls exceeds the capacity of memoization, resulting in revisiting many states, the program's performance may degrade."
   - This invariant addresses the inefficiency caused by repeatedly revisiting states, indicated by high hit counts on checking `was[i][j][k]`.

3. **Invariant #3: Input Size and Complexity Interaction**
   - Natural language: "If both the length of the series (n) and the number of uncertain episodes ('?') are close to the maximum allowed, the recursive depth and branching can exponentially grow, leading to slower execution."
   - This invariant relates the overall input size and complexity with performance.

These invariants highlight the importance of input characteristics in driving performance without relying on specific input values, and they guide potential optimizations such as better memoization or handling of '?' characters.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. 

Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.

Your task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.

Input

The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. 

The second line contains the sequence which consists of n symbols "Y", "N" and "?". If the i-th symbol equals "Y", Stepan remembers that he has watched the episode number i. If the i-th symbol equals "N", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals "?", Stepan doesn't exactly remember if he has watched the episode number i or not.

Output

If Stepan's dissatisfaction can be exactly equal to k, then print "YES" (without qoutes). Otherwise print "NO" (without qoutes).

Examples

Input

5 2
NYNNY


Output

YES


Input

6 1
????NN


Output

NO

Note

In the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row — the episode number 3 and the episode number 4. The answer is "YES", because k = 2.

In the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row — number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

We will now translate the performance-characterizing invariants from Phase 2 into C++ checkers:

1. **Invariant #1: High Degree of Uncertainty**

```cpp
void check_uncertainty_invariant(int questionCount, int n) {
    if (questionCount > n * 0.5) {  // Example threshold: more than 50% are '?'
        cerr << "Warning: Performance bottleneck triggered due to high degree of uncertainty!" << endl;
        abort();
    }
}
```

2. **Invariant #2: Recursion and Memory Overhead**

```cpp
void check_recursion_invariant(int recursionCalls, int n) {
    if (recursionCalls > n * n) {  // Example threshold: excessive recursion calls relative to n squared
        cerr << "Warning: Performance bottleneck triggered due to excessive recursion calls!" << endl;
        abort();
    }
}
```

3. **Invariant #3: Input Size and Complexity Interaction**

```cpp
void check_input_size_invariant(int n, int questionCount) {
    if (n == 100 && questionCount > n / 4) {  // Example threshold: when n is max and uncertainty is high
        cerr << "Warning: Performance bottleneck triggered due to large input size with high complexity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the C++ Program

Below is the instrumented C++ code with the integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance-characterizing invariants
void check_uncertainty_invariant(int questionCount, int n) {
    if (questionCount > n * 0.5) {
        cerr << "Warning: Performance bottleneck triggered due to high degree of uncertainty!" << endl;
        abort();
    }
}

void check_recursion_invariant(int recursionCalls, int n) {
    if (recursionCalls > n * n) {
        cerr << "Warning: Performance bottleneck triggered due to excessive recursion calls!" << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int questionCount) {
    if (n == 100 && questionCount > n / 4) {
        cerr << "Warning: Performance bottleneck triggered due to large input size with high complexity!" << endl;
        abort();
    }
}

template <class T>
T abs(T x) {
  return x > 0 ? x : -x;
}
template <class T>
T gcd(T a, T b) {
  return a ? gcd(b % a, a) : b;
}
template <class T>
T sqr(T a) {
  return a * a;
}
template <class T>
T sgn(T a) {
  return a > 0 ? 1 : (a < 0 ? -1 : 0);
}
int n;
int m;
const int N = 101;
bool was[N][N][N], ans;
char s[N];
int recursionCalls = 0;  // Track recursion calls

void go(int i, int j, int k) {
  check_recursion_invariant(++recursionCalls, n);  // Check recursion depth and calls

  if (i == n) {
    ans |= k == m;
    return;
  }
  if (was[i][j][k]) return;
  if (s[i] == 'N')
    go(i + 1, j + 1, max(j + 1, k));
  else if (s[i] == 'Y')
    go(i + 1, 0, k);
  else if (s[i] == '?')
    go(i + 1, 0, k), go(i + 1, j + 1, max(j + 1, k));
  was[i][j][k] = true;
  return;
}

int main() {
  scanf("%d%d ", &n, &m);
  gets(s);
  
  int questionCount = 0;
  for (int i = 0; i < n; ++i) {
    if (s[i] == '?') questionCount++;
  }
  
  check_uncertainty_invariant(questionCount, n);  // Check for high degree of uncertainty
  check_input_size_invariant(n, questionCount);   // Check for large input size with complexity

  go(0, 0, 0);
  if (ans)
    puts("YES");
  else
    puts("NO");

  return 0;
}
```

### Explanation of Integrations

- **Uncertainty Check**: This is placed after parsing the input to ensure it does not impact performance during the recursive solving phase.
- **Recursion Call Check**: This is embedded inside the recursive function to monitor the number of recursive calls and potential overhead.
- **Input Size and Complexity Check**: This is also placed right after input parsing to ensure the input size and complexity interaction is evaluated upfront. 

These checks will help detect conditions likely to trigger performance bottlenecks and abort execution if such conditions are met, aiding debugging and optimization efforts.

