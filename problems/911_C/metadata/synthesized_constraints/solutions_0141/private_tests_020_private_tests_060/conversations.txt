system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int a, b, c;
  cin >> a >> b >> c;
  int mn = min(min(a, b), c);
  if (mn > 3) {
    cout << "NO\n";
    return 0;
  }
  for (int i = 0; i < 60; i++) {
    for (int j = 0; j < 60; j++) {
      for (int k = 0; k < 60; k++) {
        int cnt = 0;
        for (int t = 0; t <= 27; t++) {
          if ((t - i) % a == 0 or (t - j) % b == 0 or (t - k) % c == 0) {
            cnt++;
          }
        }
        if (cnt == 28) {
          cout << "YES\n";
          return 0;
        }
      }
    }
  }
  cout << "NO\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 7 2


(G.2) Fast Input

7 2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, c; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> c; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int mn = min(min(a, b), c); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  if (mn > 3) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO\n"; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 60; i++) { /* line 11 slow_hit_count: 61, fast_hit_count: 1 */
    for (int j = 0; j < 60; j++) { /* line 12 slow_hit_count: 3660, fast_hit_count: 1 */
      for (int k = 0; k < 60; k++) { /* line 13 slow_hit_count: 219600, fast_hit_count: 2 */
        int cnt = 0; /* line 14 slow_hit_count: 216000, fast_hit_count: 2 */
        for (int t = 0; t <= 27; t++) { /* line 15 slow_hit_count: 6264000, fast_hit_count: 58 */
          if ((t - i) % a == 0 or (t - j) % b == 0 or (t - k) % c == 0) { /* line 16 slow_hit_count: 6048000, fast_hit_count: 56 */
            cnt++; /* line 17 slow_hit_count: 3826080, fast_hit_count: 44 */
          } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        if (cnt == 28) { /* line 20 slow_hit_count: 216000, fast_hit_count: 2 */
          cout << "YES\n"; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO\n"; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided problem statement, code, and hit count data, we can analyze and derive performance-characterizing invariants for the given C program. 

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - **Inner Loops (Lines 11-13):** The innermost loop (line 13) shows a significant increase in hit counts for the slow input compared to the fast input. This suggests that the triple nested loops are heavily contributing to the slowdown.
   - **Innermost If Condition (Line 16):** This line is also hit significantly more often in the slow input, indicating that the evaluation of the condition inside the innermost loop is a critical factor.

2. **Data Structures and Interaction:**
   - The code uses nested loops to iterate through potential starting times for each garland, checking if all time intervals (determined by \( a \), \( b \), and \( c \)) can collectively cover every second from 0 to 27.
   - The depth of the nested loops (60 * 60 * 60 iterations) is inherently expensive when it is fully executed, leading to a slow performance.

### Phase 2: Deriving Performance-Characterizing Invariants

Given the analysis, here are natural language statements on the conditions under which the program is likely to slow down:

1. **Invariant 1: Large Iteration Space**
   - **Description:** If the smallest time interval (either \( k1 \), \( k2 \), or \( k3 \)) is greater than 3, the program will involve a large number of iterations in the triple nested loop, causing potential slowdowns.
   - **Explanation:** When none of the intervals are low enough to quickly cover the time span from 0 to 27, the program checks more combinations unnecessarily, leading to slow execution.

2. **Invariant 2: Redundant Checks in Nested Loops**
   - **Description:** If multiple garlands have the same or similar time intervals, leading to redundant evaluations within the loops, the performance may degrade.
   - **Explanation:** Repetitive checks for similar intervals result in the innermost loop condition being evaluated more times than necessary, contributing to slower performance.

3. **Invariant 3: High Modulo Operation Frequency**
   - **Description:** If the modulo operation in the condition (line 16) is executed frequently due to the nested loop structure, the performance might degrade when the intervals are such that the condition \( cnt == 28 \) is rarely met.
   - **Explanation:** Frequent checks and calculations that rarely result in a successful condition can lead to unnecessary computational overhead.

These invariants suggest that the program's performance is highly dependent on the input values for \( k1 \), \( k2 \), and \( k3 \), particularly when these values create conditions that prevent efficient early termination of the loop. By focusing on reducing unnecessary iterations and redundant checks, the program's performance can be improved.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived in Phase 2 into runtime checks in C++.

### Phase 3: Implementing the Natural Language Invariants in C++

1. **Invariant 1: Large Iteration Space**
   - **Condition:** If the smallest time interval among \( k1 \), \( k2 \), or \( k3 \) is greater than 3.
   - **Checker Code:**
   ```cpp
   void check_large_iteration_space(int a, int b, int c) {
       int mn = std::min({a, b, c});
       if (mn > 3) {
           cerr << "Warning: Performance bottleneck condition triggered - large iteration space!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Redundant Checks in Nested Loops**
   - **Condition:** If two or more garlands have the same time interval, causing redundant evaluations.
   - **Checker Code:**
   ```cpp
   void check_redundant_checks(int a, int b, int c) {
       if (a == b || b == c || a == c) {
           cerr << "Warning: Performance bottleneck condition triggered - redundant checks in nested loops!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: High Modulo Operation Frequency**
   - **Condition:** This invariant is implicit in the loop structure, no specific additional check needed as it is part of the logic.
   - Instead, we will ensure the code structure supports minimizing unnecessary checks by assessing existing conditions.

### Phase 4: Integrating the Checker Code into the Original Program

Now, we integrate the checker functions into the original program at appropriate points to minimize overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Phase 3: Checker Functions
void check_large_iteration_space(int a, int b, int c) {
    int mn = std::min({a, b, c});
    if (mn > 3) {
        cerr << "Warning: Performance bottleneck condition triggered - large iteration space!" << endl;
        abort();
    }
}

void check_redundant_checks(int a, int b, int c) {
    if (a == b || b == c || a == c) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant checks in nested loops!" << endl;
        abort();
    }
}

int main() {
    int a, b, c;
    cin >> a >> b >> c;
    
    // Phase 4: Inserting Checker Calls
    check_large_iteration_space(a, b, c); // Check for large iteration space
    check_redundant_checks(a, b, c);      // Check for redundant checks in loops

    int mn = min(min(a, b), c);
    if (mn > 3) {
        cout << "NO\n";
        return 0;
    }

    for (int i = 0; i < 60; i++) {
        for (int j = 0; j < 60; j++) {
            for (int k = 0; k < 60; k++) {
                int cnt = 0;
                for (int t = 0; t <= 27; t++) {
                    if ((t - i) % a == 0 or (t - j) % b == 0 or (t - k) % c == 0) {
                        cnt++;
                    }
                }
                if (cnt == 28) {
                    cout << "YES\n";
                    return 0;
                }
            }
        }
    }
    cout << "NO\n";
    return 0;
}
```

### Explanation of Integration
- **Checker Calls:** We place the checker calls immediately after reading the inputs to catch potential performance issues early.
- **Avoiding Overhead:** By placing these checks outside the loops, we ensure that they do not introduce significant overhead during the performance-critical sections of the code.
- **Meaningful Warnings:** Each check will output a meaningful warning explaining which bottleneck condition was triggered, aiding debugging and potential optimizations during development.

The above program will now abort with a warning if any of the performance characterizing conditions are met, helping to preempt potential slowdowns.

