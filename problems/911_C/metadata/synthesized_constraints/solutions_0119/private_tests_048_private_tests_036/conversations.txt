system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1000, M = 100;
int k[3], kmax, lit[N];
bool check(int n = 0, int xmax = 0) {
  if (n == 3) {
    for (int y = xmax; y < N; y++)
      if (!lit[y]) return false;
    return true;
  }
  for (int p = n + 1, q = k[n], x = 0; x < M; x++) {
    for (int y = x; y < N; y += q) lit[y]++;
    if (check(p, max(x, xmax))) return true;
    for (int y = x; y < N; y += q) lit[y]--;
  }
  return false;
}
int main() {
  for (int i = 0; i < 3; i++) cin >> k[i];
  sort(k, k + 3), kmax = k[2];
  if (check())
    cout << "YES";
  else
    cout << "NO";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 3 2


(G.2) Fast Input

2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1000, M = 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int k[3], kmax, lit[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int n = 0, int xmax = 0) { /* line 5 slow_hit_count: 1010101, fast_hit_count: 105 */
  if (n == 3) { /* line 6 slow_hit_count: 1010101, fast_hit_count: 105 */
    for (int y = xmax; y < N; y++) /* line 7 slow_hit_count: 3513514, fast_hit_count: 1250 */
      if (!lit[y]) return false; /* line 8 slow_hit_count: 3513514, fast_hit_count: 1249 */
    return true; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int p = n + 1, q = k[n], x = 0; x < M; x++) { /* line 11 slow_hit_count: 1020201, fast_hit_count: 105 */
    for (int y = x; y < N; y += q) lit[y]++; /* line 12 slow_hit_count: 321399350, fast_hit_count: 33655 */
    if (check(p, max(x, xmax))) return true; /* line 13 slow_hit_count: 1010100, fast_hit_count: 104 */
    for (int y = x; y < N; y += q) lit[y]--; /* line 14 slow_hit_count: 321399350, fast_hit_count: 32318 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 16 slow_hit_count: 10101, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 3; i++) cin >> k[i]; /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
  sort(k, k + 3), kmax = k[2]; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  if (check()) /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO"; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the provided C code and derive performance-characterizing invariants, let's go through the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The `check()` function is called significantly more times for the slow input (`3 3 2`) compared to the fast input (`2 3 2`).
   - Specifically, the recursive calls within `check()` (lines 12, 13, and 14) are hit excessively in the slow input. The line hit counts for these lines are drastically higher in the slow input.

2. **Pinpoint Lines with High Hits**:
   - Line 12: Incrementing `lit[y]` within a nested loop is executed very frequently.
   - Line 13: The recursive call to `check()` suggests a deep recursion or a large number of recursive invocations.
   - Line 14: Decrementing `lit[y]` also mirrors line 12 in terms of execution frequency.

3. **Interaction with Data Structures**:
   - The `lit` array serves as a marker for seconds when a garland is lit. The loop iterates over this array many times to set and unset the markers, indicating possible inefficiencies.
   - The recursion depth and branching factor in the recursive `check()` function likely grow significantly with certain input patterns, causing performance degradation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can formulate natural language performance invariants:

1. **Invariant 1**: "When the time intervals \( k_1, k_2, \) and \( k_3 \) are close in value, especially if they are multiples of each other or very similar, the recursion depth in `check()` can grow, leading to excessive recomputation and slowdown."

2. **Invariant 2**: "If the time intervals \( k_1, k_2, \) and \( k_3 \) have a common factor or similar periodicity, the nested loop in the `check()` function may execute a high number of iterations, exponentially increasing the time complexity."

3. **Invariant 3**: "When the largest interval \( k_{\text{max}} \) is not effectively utilized to light up remaining gaps early in the sequence, the program spends more time in deeper recursion levels, checking overlapping configurations."

### Conclusion

The performance bottleneck is primarily due to the recursive nature of the `check()` function, which explores potential configurations through deep recursion and nested loops across the `lit` array. The code is particularly sensitive to the similarity or periodic relationships between the time intervals \( k_1, k_2, \) and \( k_3 \). Recognizing such patterns can help identify inputs that may cause slow performance in this algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Runtime Checks in C++

Based on the performance-characterizing invariants derived earlier, we will create C++ code snippets that check these conditions at runtime. Below are the checker functions for each invariant:

1. **Invariant 1**: When the time intervals \( k_1, k_2, \) and \( k_3 \) are close in value.
   - Since closeness might lead to a deeper recursion, define a threshold for "closeness" where the maximum and minimum values of \( k_i \) are within a small range.
   
```cpp
void check_closeness_invariant(int* k) {
    if ((k[2] - k[0]) <= 2) {  // Arbitrary threshold for closeness
        cerr << "Warning: Closeness invariant triggered - intervals are very close!" << endl;
        abort();
    }
}
```

2. **Invariant 2**: If the time intervals have a common factor.
   - A simple way to detect a common factor is to check their greatest common divisor (GCD).

```cpp
#include <numeric> // for std::gcd

void check_common_factor_invariant(int* k) {
    int gcd12 = std::gcd(k[0], k[1]);
    int gcd123 = std::gcd(gcd12, k[2]);
    if (gcd123 > 1) {
        cerr << "Warning: Common factor invariant triggered - intervals have a common factor!" << endl;
        abort();
    }
}
```

3. **Invariant 3**: If the largest interval \( k_{\text{max}} \) is not effectively utilized.
   - Since this is an abstract invariant, we'll need to check if the largest value among \( k \) doesn't help to reduce recursion depth effectively. This can be approached by ensuring that the maximum interval isn't too large compared to the others.

```cpp
void check_ineffective_max_invariant(int* k) {
    if (k[2] > 2 * (k[0] + k[1])) {  // Arbitrary ratio threshold
        cerr << "Warning: Ineffective max invariant triggered - maximum interval is too large!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers with the Original Program

Now, we integrate these checker functions into the original C++ program. The checks will be placed after reading the input values and before entering the recursion to ensure they do not add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1000, M = 100;
int k[3], kmax, lit[N];

void check_closeness_invariant(int* k) {
    if ((k[2] - k[0]) <= 2) {  // Arbitrary threshold for closeness
        cerr << "Warning: Closeness invariant triggered - intervals are very close!" << endl;
        abort();
    }
}

#include <numeric> // for std::gcd
void check_common_factor_invariant(int* k) {
    int gcd12 = std::gcd(k[0], k[1]);
    int gcd123 = std::gcd(gcd12, k[2]);
    if (gcd123 > 1) {
        cerr << "Warning: Common factor invariant triggered - intervals have a common factor!" << endl;
        abort();
    }
}

void check_ineffective_max_invariant(int* k) {
    if (k[2] > 2 * (k[0] + k[1])) {  // Arbitrary ratio threshold
        cerr << "Warning: Ineffective max invariant triggered - maximum interval is too large!" << endl;
        abort();
    }
}

bool check(int n = 0, int xmax = 0) {
    if (n == 3) {
        for (int y = xmax; y < N; y++)
            if (!lit[y]) return false;
        return true;
    }
    for (int p = n + 1, q = k[n], x = 0; x < M; x++) {
        for (int y = x; y < N; y += q) lit[y]++;
        if (check(p, max(x, xmax))) return true;
        for (int y = x; y < N; y += q) lit[y]--;
    }
    return false;
}

int main() {
    for (int i = 0; i < 3; i++) cin >> k[i];
    sort(k, k + 3), kmax = k[2];

    // Perform checks for potential performance bottlenecks
    check_closeness_invariant(k);
    check_common_factor_invariant(k);
    check_ineffective_max_invariant(k);

    if (check())
        cout << "YES";
    else
        cout << "NO";
}
```

### Explanation

- **Closeness Check**: This check is meant to catch when \( k_1, k_2, \) and \( k_3 \) are too similar, potentially causing excessive recursion.
- **Common Factor Check**: This ensures that the intervals avoid sharing a common divisor that could increase repetition in lighting conditions.
- **Ineffective Max Check**: This ensures that the largest interval isn't disproportionately larger than the others, which might not help in reducing the recursion search space effectively.

These checks are added after input handling and before entering the main recursive logic, ensuring they help identify conditions leading to slow execution during testing or fuzzing.

