system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
inline bool isLeap(T y) {
  return (y % 400 == 0) || (y % 100 ? y % 4 == 0 : false);
}
template <typename T>
inline T GCD(T a, T b) {
  a = abs(a);
  b = abs(b);
  if (a < b) swap(a, b);
  while (b) {
    a = a % b;
    swap(a, b);
  }
  return a;
}
template <typename T>
inline T LCM(T x, T y) {
  T tp = GCD(x, y);
  if ((x / tp) * 1. * y > 9e18) return 9e18;
  return (x / tp) * y;
}
template <typename T>
inline T BIGMOD(T A, T B, T M = 1000000009) {
  T ret = 1;
  while (B) {
    if (B & 1) ret = (ret * A) % M;
    A = (A * A) % M;
    B = B >> 1;
  }
  return ret;
}
template <typename T>
inline T BigMod(T A, T B, T M) {
  T ret = 1;
  while (B) {
    if (B & 1) ret = (ret * A) % M;
    A = (A * A) % M;
    B = B >> 1;
  }
  return ret;
}
int main() {
  int Z, k1, k2, k3;
  scanf("%d%d%d", &k1, &k2, &k3);
  unordered_map<int, int> MAP;
  for (int i = 1; i <= 10; i++) {
    for (int j = 1; j <= 10; j++) {
      for (int k = 1; k <= 10; k++) {
        unordered_map<int, int> Map;
        for (int a = 0; a <= 10; a = a + k1) {
          Map[i + a] = 1;
        }
        for (int a = 0; a <= 10; a = a + k2) {
          Map[a + j] = 1;
        }
        for (int a = 0; a <= 10; a = a + k3) {
          Map[a + k] = 1;
        }
        int cnt = 0;
        for (int x = 1; x <= 10; x++) {
          if (Map[x] == 1) cnt++;
        }
        if (cnt == 10) {
          printf("YES\n");
          return 0;
        }
      }
    }
  }
  printf("NO\n");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 3 3


(G.2) Fast Input

2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline bool isLeap(T y) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return (y % 400 == 0) || (y % 100 ? y % 4 == 0 : false); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline T GCD(T a, T b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  a = abs(a); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  b = abs(b); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) swap(a, b); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    a = a % b; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    swap(a, b); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
inline T LCM(T x, T y) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  T tp = GCD(x, y); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if ((x / tp) * 1. * y > 9e18) return 9e18; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return (x / tp) * y; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
inline T BIGMOD(T A, T B, T M = 1000000009) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  T ret = 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  while (B) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (B & 1) ret = (ret * A) % M; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    A = (A * A) % M; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    B = B >> 1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
inline T BigMod(T A, T B, T M) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  T ret = 1; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  while (B) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (B & 1) ret = (ret * A) % M; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    A = (A * A) % M; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    B = B >> 1; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  int Z, k1, k2, k3; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d%d", &k1, &k2, &k3); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_map<int, int> MAP; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 10; i++) { /* line 48 slow_hit_count: 11, fast_hit_count: 1 */
    for (int j = 1; j <= 10; j++) { /* line 49 slow_hit_count: 110, fast_hit_count: 1 */
      for (int k = 1; k <= 10; k++) { /* line 50 slow_hit_count: 1100, fast_hit_count: 2 */
        unordered_map<int, int> Map; /* line 51 slow_hit_count: 1000, fast_hit_count: 2 */
        for (int a = 0; a <= 10; a = a + k1) { /* line 52 slow_hit_count: 7000, fast_hit_count: 14 */
          Map[i + a] = 1; /* line 53 slow_hit_count: 6000, fast_hit_count: 12 */
        } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
        for (int a = 0; a <= 10; a = a + k2) { /* line 55 slow_hit_count: 5000, fast_hit_count: 10 */
          Map[a + j] = 1; /* line 56 slow_hit_count: 4000, fast_hit_count: 8 */
        } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        for (int a = 0; a <= 10; a = a + k3) { /* line 58 slow_hit_count: 5000, fast_hit_count: 14 */
          Map[a + k] = 1; /* line 59 slow_hit_count: 4000, fast_hit_count: 12 */
        } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
        int cnt = 0; /* line 61 slow_hit_count: 1000, fast_hit_count: 2 */
        for (int x = 1; x <= 10; x++) { /* line 62 slow_hit_count: 11000, fast_hit_count: 22 */
          if (Map[x] == 1) cnt++; /* line 63 slow_hit_count: 10000, fast_hit_count: 20 */
        } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
        if (cnt == 10) { /* line 65 slow_hit_count: 1000, fast_hit_count: 2 */
          printf("YES\n"); /* line 66 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 67 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  printf("NO\n"); /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 73 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze this problem and identify potential performance bottlenecks, we will go through the provided C program and the hit count data for both fast and slow inputs. From this, we will derive performance-characterizing invariants that lead to the slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Lines 48 to 65 have significantly higher hit counts for the slow input compared to the fast input. This indicates that the nested loops are being executed many more times in the slow scenario.
   - Specifically, the inner loops (lines 52-53, 55-56, and 58-59) and the count verification loop (lines 62-63) are executed much more frequently for the slow input.

2. **Pinpointing Inefficient Code Segments:**
   - The nested loops iterate over combinations of start times (i, j, k) for the garlands. Each combination is checked to see if it can achieve the desired garland lighting pattern.
   - The logic within these loops attempts to populate a map with times when garlands are lit and checks if all seconds in the range are covered.

3. **Interaction with Input Constraints:**
   - The loops iterate over fixed ranges (1 to 10), but the difference in behavior between the fast and slow inputs can be attributed to the periodicity and overlaps of garland lighting times as determined by `k1`, `k2`, and `k3`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observed behavior and the difference in hit counts, we can derive the following natural language invariants that may trigger slow performance:

1. **Invariant #1: High Overlap of Periodic Intervals**
   - Natural language description: "If the periods of the garlands are such that they lead to high overlap or multiple repeated checks for valid configurations, the computation may become expensive. Specifically, if the intervals `k1`, `k2`, and `k3` create a scenario with insufficient unique combinations, the loop iterations increase significantly."
   - This invariant captures situations where the garlands' intervals do not easily lead to a valid lighting pattern, thus causing excessive loop iterations.

2. **Invariant #2: Nested Loop Complexity**
   - Natural language description: "If the nested loops exploring combinations of i, j, and k need to cover a wide range of possibilities without quickly finding a solution, the total iterations grow exponentially, leading to slow performance."
   - This suggests that when the intervals do not immediately lend themselves to a solution, the exhaustive search in nested loops becomes inefficient.

3. **Invariant #3: Strict Requirement on Coverage**
   - Natural language description: "The requirement that all seconds must be covered by at least one lit garland creates a challenge when intervals are not complementary, leading to excessive retries and combination checks."
   - This describes scenarios where the constraint of full coverage is difficult to satisfy due to the nature of the intervals, thus increasing computation.

### Summary

The slowdown in the code is primarily due to the exhaustive search over combinations of starting times for the garlands, which is compounded when the intervals (`k1`, `k2`, `k3`) do not quickly lead to a solution. The nested loops calculate and verify all potential start times, leading to significant performance hits when a valid configuration is hard to find. The invariants above aim to identify these conditions abstractly, without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each natural language invariant derived, we will now write corresponding C++ checker code that can be integrated into the existing program.

#### Checker Code for Invariant #1: High Overlap of Periodic Intervals
```cpp
void check_overlap_invariant(int k1, int k2, int k3) {
    // Check if given intervals can lead to high overlap causing excessive checks
    if ((k1 == k2) || (k2 == k3) || (k1 == k3)) {
        cerr << "Warning: overlap_invariant triggered - garland intervals cause high overlap!" << endl;
        abort();
    }
}
```

#### Checker Code for Invariant #2: Nested Loop Complexity
```cpp
void check_nested_loop_invariant(int totalChecks) {
    // Check if the nested loop is attempting too many combinations
    const int threshold = 1000; // arbitrary threshold for excessive loop iterations
    if (totalChecks > threshold) {
        cerr << "Warning: nested_loop_invariant triggered - nested loops are trying too many combinations!" << endl;
        abort();
    }
}
```

#### Checker Code for Invariant #3: Strict Requirement on Coverage
```cpp
void check_coverage_invariant(bool fullCoveragePossible) {
    // Check if it's impossible to cover all seconds with current intervals
    if (!fullCoveragePossible) {
        cerr << "Warning: coverage_invariant triggered - it's difficult to ensure full coverage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

We will now integrate the checker code at strategic points in the provided C++ program. 

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for overlap invariant
void check_overlap_invariant(int k1, int k2, int k3) {
    if ((k1 == k2) || (k2 == k3) || (k1 == k3)) {
        cerr << "Warning: overlap_invariant triggered - garland intervals cause high overlap!" << endl;
        abort();
    }
}

// Checker function for nested loop invariant
void check_nested_loop_invariant(int totalChecks) {
    const int threshold = 1000;
    if (totalChecks > threshold) {
        cerr << "Warning: nested_loop_invariant triggered - nested loops are trying too many combinations!" << endl;
        abort();
    }
}

// Checker function for coverage invariant
void check_coverage_invariant(bool fullCoveragePossible) {
    if (!fullCoveragePossible) {
        cerr << "Warning: coverage_invariant triggered - it's difficult to ensure full coverage!" << endl;
        abort();
    }
}

int main() {
    int Z, k1, k2, k3;
    scanf("%d%d%d", &k1, &k2, &k3);

    // Call checker for overlap invariant after reading input
    check_overlap_invariant(k1, k2, k3);

    unordered_map<int, int> MAP;
    int totalChecks = 0;
    bool fullCoveragePossible = false;

    for (int i = 1; i <= 10; i++) {
        for (int j = 1; j <= 10; j++) {
            for (int k = 1; k <= 10; k++) {
                unordered_map<int, int> Map;
                for (int a = 0; a <= 10; a = a + k1) {
                    Map[i + a] = 1;
                }
                for (int a = 0; a <= 10; a = a + k2) {
                    Map[a + j] = 1;
                }
                for (int a = 0; a <= 10; a = a + k3) {
                    Map[a + k] = 1;
                }
                int cnt = 0;
                for (int x = 1; x <= 10; x++) {
                    if (Map[x] == 1) cnt++;
                }
                totalChecks++;
                if (cnt == 10) {
                    printf("YES\n");
                    fullCoveragePossible = true; // found a valid configuration
                    check_coverage_invariant(fullCoveragePossible);
                    return 0;
                }
            }
        }
    }
    
    // Call checker for nested loop invariant after loops
    check_nested_loop_invariant(totalChecks);

    // If we reach here, coverage was not possible
    check_coverage_invariant(fullCoveragePossible);

    printf("NO\n");
}
```

### Explanation

1. **Overlap Invariant Check:** This is placed right after the input is read to catch early any potentially overlapping intervals that could cause excessive checks.

2. **Nested Loop Complexity Check:** This is called after the loop concludes to see if an excessive number of iterations were needed, suggesting inefficiency.

3. **Coverage Invariant Check:** This is placed after checking for a valid configuration to ensure that if full coverage wasn't possible, it's flagged. 

These checks help identify scenarios where performance may degrade due to the constraints and behavior of the input parameters, providing early warnings during execution.

