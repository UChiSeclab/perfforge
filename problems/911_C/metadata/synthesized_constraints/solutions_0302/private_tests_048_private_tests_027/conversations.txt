system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int arr[3];
bool check() {
  bool freq[1005];
  memset(freq, 0, sizeof(freq));
  for (int i = 1; i <= 10; i++) {
    for (int j = 1; j <= 10; j++) {
      for (int k = 1; k <= 10; k++) {
        for (int m = i; m <= 1000; m += arr[0]) freq[m] = 1;
        for (int m = j; m <= 1000; m += arr[1]) freq[m] = 1;
        for (int m = k; m <= 1000; m += arr[2]) freq[m] = 1;
        bool good = true;
        for (int m = max(i, max(j, k)); m <= 1000; m++) good &= freq[m];
        if (good) return true;
        for (int m = 1; m <= 1000; m++) freq[m] = false;
      }
    }
  }
  return false;
}
int main() {
  cin >> arr[0] >> arr[1] >> arr[2];
  sort(arr, arr + 3);
  if (check()) {
    cout << "YES";
  } else {
    cout << "NO";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 3 2


(G.2) Fast Input

3 2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int arr[3]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool check() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  bool freq[1005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  memset(freq, 0, sizeof(freq)); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 10; i++) { /* line 7 slow_hit_count: 11, fast_hit_count: 1 */
    for (int j = 1; j <= 10; j++) { /* line 8 slow_hit_count: 110, fast_hit_count: 2 */
      for (int k = 1; k <= 10; k++) { /* line 9 slow_hit_count: 1100, fast_hit_count: 12 */
        for (int m = i; m <= 1000; m += arr[0]) freq[m] = 1; /* line 10 slow_hit_count: 499000, fast_hit_count: 5511 */
        for (int m = j; m <= 1000; m += arr[1]) freq[m] = 1; /* line 11 slow_hit_count: 333200, fast_hit_count: 5511 */
        for (int m = k; m <= 1000; m += arr[2]) freq[m] = 1; /* line 12 slow_hit_count: 333200, fast_hit_count: 3667 */
        bool good = true; /* line 13 slow_hit_count: 1000, fast_hit_count: 11 */
        for (int m = max(i, max(j, k)); m <= 1000; m++) good &= freq[m]; /* line 14 slow_hit_count: 994025, fast_hit_count: 10965 */
        if (good) return true; /* line 15 slow_hit_count: 1000, fast_hit_count: 11 */
        for (int m = 1; m <= 1000; m++) freq[m] = false; /* line 16 slow_hit_count: 1001000, fast_hit_count: 10010 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> arr[0] >> arr[1] >> arr[2]; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  sort(arr, arr + 3); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  if (check()) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO"; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - Lines 10, 11, and 12 are executed significantly more during the slow input than the fast input: 499,000 vs 5,511; 333,200 vs 5,511; 333,200 vs 3,667 respectively.
   - Line 14 is also executed much more often in the slow input (994,025) compared to the fast input (10,965).
   - Line 16 similarly shows a large discrepancy: 1,001,000 hits in the slow run versus 10,010 in the fast run.

2. **Pinpointed Inefficient Segments:**
   - The nested loop structure (lines 7-9) causes a high number of iterations, especially with the slow input. Each loop can execute up to 10 times, leading to a maximum of 1,000 iterations. Within each iteration, the three inner loops (lines 10-12) iterate over the range from `i`, `j`, or `k` to `1000`, stepping by `arr[0]`, `arr[1]`, and `arr[2]` respectively.
   - The accumulation of operations on `freq` and the subsequent computation of `good` (line 14) are where the inefficiencies multiply due to the repeated evaluations.

3. **Data Structure Interaction:**
   - The `freq` array is populated multiple times per iteration with markers indicating when a garland is lit. Checking if all required indices are lit thereafter is an O(n) operation (line 14), compounded by repeated initializations (line 16).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**
   - **Invariant #1:** "A slowdown is likely when the time intervals of the garlands are such that many iterations are required to synchronize the garlands. Specifically, if the intervals have high values relative to each other or share common multiples, the nested loops will iterate excessively, causing slowdown."
   - **Invariant #2:** "When the starting times for the garlands lead to repetitive and extended overlap checks over the entire timeline, the process becomes computationally expensive. This is particularly true if resetting the frequency array occurs frequently due to non-coverage in initial attempts."
   - **Invariant #3:** "The program may slow down significantly if the maximum possible iterations of nested loops are reached without an early 'YES' exit, especially if the loop structure precludes efficient synchronization of garland intervals."

2. **Threshold Values:**
   - Consider a threshold for the `check()` functionality that avoids running all loops for maximum possible iterations. While n (the number of loops) is not directly constrained in the problem, a logical threshold could be when cumulative iterations of lines 10-12 exceed some fraction of the 10 x 10 x 10 maximum, indicating inefficient interval alignment.

3. **Implementation Suggestions:**
   - Implement checks that short-circuit the computation when certain conditions are met, such as when intervals are multiples of each other, to avoid unnecessary iterations.

By understanding these invariants, developers can anticipate and mitigate performance issues in scenarios where garlands' intervals align unfavorably, requiring excessive computation to determine if all moments can be covered by at least one lit garland.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + ki, x + 2ki, x + 3ki and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x1, x2 and x3 (not necessarily distinct) so that he will switch on the first garland during x1-th second, the second one — during x2-th second, and the third one — during x3-th second, respectively, and during each second starting from max(x1, x2, x3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!

Input

The first line contains three integers k1, k2 and k3 (1 ≤ ki ≤ 1500) — time intervals of the garlands.

Output

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.

Examples

Input

2 2 3


Output

YES


Input

4 2 3


Output

NO

Note

In the first example Mishka can choose x1 = 1, x2 = 2, x3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checkers for Performance-Characterizing Invariants in C++

Based on the natural language invariants derived previously, I will now create checker functions for each invariant that can be integrated into the C++ code.

**Invariant #1 Checker:**
A slowdown occurs when garland intervals lead to many iterations due to common multiples.

```cpp
void check_iteration_invariant(int arr[]) {
    int lcm12 = std::lcm(arr[0], arr[1]);
    int lcm123 = std::lcm(lcm12, arr[2]);
    // If the LCM of the intervals is large, it might cause excessive iterations.
    if (lcm123 > 1000) {
        cerr << "Warning: Iteration invariant triggered - excessive common multiples." << endl;
        abort();
    }
}
```

**Invariant #2 Checker:**
A slowdown might occur when resetting the frequency array too often without covering all moments.

```cpp
void check_reset_invariant(int resetCount) {
    // Assume resetting freq over 100 times is excessive
    if (resetCount > 100) {
        cerr << "Warning: Reset invariant triggered - excessive frequency array resets." << endl;
        abort();
    }
}
```

**Invariant #3 Checker:**
A slowdown occurs if all possible iterations of nested loops are reached without an early exit.

```cpp
void check_excessive_loops_invariant(int loopIterations) {
    // If the loop runs maximum iterations and doesn't return early
    if (loopIterations >= 1000) {
        cerr << "Warning: Excessive loops invariant triggered - maximum iterations reached." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Let's integrate these checker functions into the provided C++ code, ensuring they are called at appropriate points without adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
int arr[3];

// Function to check iteration invariant
void check_iteration_invariant(int arr[]) {
    int lcm12 = std::lcm(arr[0], arr[1]);
    int lcm123 = std::lcm(lcm12, arr[2]);
    if (lcm123 > 1000) {
        cerr << "Warning: Iteration invariant triggered - excessive common multiples." << endl;
        abort();
    }
}

// Function to check reset invariant
void check_reset_invariant(int resetCount) {
    if (resetCount > 100) {
        cerr << "Warning: Reset invariant triggered - excessive frequency array resets." << endl;
        abort();
    }
}

// Function to check excessive loops invariant
void check_excessive_loops_invariant(int loopIterations) {
    if (loopIterations >= 1000) {
        cerr << "Warning: Excessive loops invariant triggered - maximum iterations reached." << endl;
        abort();
    }
}

bool check() {
    bool freq[1005];
    memset(freq, 0, sizeof(freq));
    int resetCount = 0;  // Count the number of times freq array is reset
    int loopIterations = 0;  // Count total loop iterations

    for (int i = 1; i <= 10; i++) {
        for (int j = 1; j <= 10; j++) {
            for (int k = 1; k <= 10; k++) {
                loopIterations++;
                for (int m = i; m <= 1000; m += arr[0]) freq[m] = 1;
                for (int m = j; m <= 1000; m += arr[1]) freq[m] = 1;
                for (int m = k; m <= 1000; m += arr[2]) freq[m] = 1;
                bool good = true;
                for (int m = max(i, max(j, k)); m <= 1000; m++) good &= freq[m];
                if (good) return true;
                for (int m = 1; m <= 1000; m++) freq[m] = false;
                resetCount++;
            }
        }
    }

    // Check reset invariant and loop invariant after the main loop
    check_reset_invariant(resetCount);
    check_excessive_loops_invariant(loopIterations);

    return false;
}

int main() {
    cin >> arr[0] >> arr[1] >> arr[2];
    // Sort intervals to optimize the loop structure
    sort(arr, arr + 3);

    // Check the iteration invariant after sorting
    check_iteration_invariant(arr);

    if (check()) {
        cout << "YES";
    } else {
        cout << "NO";
    }
    return 0;
}
```

**Explanation of Integration:**
- **Checker Placement:** The checkers for excessive resets and loop iterations are placed after the main loop structure to avoid performance overhead in tight loops. The iteration invariant checker is executed before starting the check process to detect potential issues early.
- **Comments:** Added comments describe which bottleneck each checker is intended to detect. The `abort()` function is used to halt execution if a performance bottleneck condition is triggered, allowing for testing and debugging.

