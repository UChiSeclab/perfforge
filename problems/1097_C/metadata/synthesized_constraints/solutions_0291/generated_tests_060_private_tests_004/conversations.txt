system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.

A bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it's possible to obtain a correct arithmetic expression by inserting characters "+" and "1" into this sequence. For example, the sequences "(())()", "()" and "(()(()))" are correct, while the bracket sequences ")(", "(()" and "(()))(" are not correct.

Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.

This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?

Input

The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of bracket sequences.

Each of the following n lines contains one bracket sequence — a non-empty string which consists only of characters "(" and ")".

The sum of lengths of all bracket sequences in the input is at most 5 ⋅ 10^5.

Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.

Output

Print a single integer — the maximum number of pairs which can be made, adhering to the conditions in the statement.

Examples

Input


7
)())
)
((
((
(
)
)


Output


2


Input


4
(
((
(((
(())


Output


0


Input


2
(())
()


Output


1

Note

In the first example, it's optimal to construct two pairs: "(( )())" and "( )".

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 5e5 + 5;
char s[maxn];
int a[maxn];
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    scanf("%s", s);
    a[i] = 0;
    bool flag = false;
    for (int j = 0; s[j]; j++) {
      if (s[j] == '(')
        a[i]++;
      else
        a[i]--;
      if (a[i] < 0) flag = true;
    }
    if (a[i] >= 0 && flag) a[i] = maxn;
    if (a[i] < 0) {
      int tmp = 0;
      for (int j = strlen(s) - 1; j >= 0; j--) {
        if (s[j] == ')')
          tmp++;
        else
          tmp--;
        if (tmp < 0) {
          a[i] = maxn;
          break;
        }
      }
    }
  }
  sort(a + 1, a + n + 1);
  int ans = 0;
  int i = 1, j = n;
  while (i < j) {
    if (a[i] + a[j] == 0)
      i++, j--, ans++;
    else {
      while (a[j] > -a[i]) j--;
      while (a[i] < -a[j]) i++;
    }
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
(((((((((((
))))))))))(


(G.2) Fast Input

2
(((((((((((
)))))))))))


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 5e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char s[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 0, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 8 slow_hit_count: 0, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 9 slow_hit_count: 0, fast_hit_count: 3 */
    scanf("%s", s); /* line 10 slow_hit_count: 0, fast_hit_count: 2 */
    a[i] = 0; /* line 11 slow_hit_count: 0, fast_hit_count: 2 */
    bool flag = false; /* line 12 slow_hit_count: 0, fast_hit_count: 2 */
    for (int j = 0; s[j]; j++) { /* line 13 slow_hit_count: 0, fast_hit_count: 24 */
      if (s[j] == '(') /* line 14 slow_hit_count: 0, fast_hit_count: 22 */
        a[i]++; /* line 15 slow_hit_count: 0, fast_hit_count: 11 */
      else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
        a[i]--; /* line 17 slow_hit_count: 0, fast_hit_count: 11 */
      if (a[i] < 0) flag = true; /* line 18 slow_hit_count: 0, fast_hit_count: 22 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    if (a[i] >= 0 && flag) a[i] = maxn; /* line 20 slow_hit_count: 0, fast_hit_count: 2 */
    if (a[i] < 0) { /* line 21 slow_hit_count: 0, fast_hit_count: 2 */
      int tmp = 0; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      for (int j = strlen(s) - 1; j >= 0; j--) { /* line 23 slow_hit_count: 0, fast_hit_count: 12 */
        if (s[j] == ')') /* line 24 slow_hit_count: 0, fast_hit_count: 11 */
          tmp++; /* line 25 slow_hit_count: 0, fast_hit_count: 11 */
        else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
          tmp--; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        if (tmp < 0) { /* line 28 slow_hit_count: 0, fast_hit_count: 11 */
          a[i] = maxn; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a + 1, a + n + 1); /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
  int ans = 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
  int i = 1, j = n; /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
  while (i < j) { /* line 38 slow_hit_count: 0, fast_hit_count: 2 */
    if (a[i] + a[j] == 0) /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
      i++, j--, ans++; /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
    else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      while (a[j] > -a[i]) j--; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      while (a[i] < -a[j]) i++; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identifying Expensive or Inefficient Code Segments**

Given the hit count data for the slow and fast inputs, it's evident that no lines have significantly higher hit counts for the slow input. This suggests that the slow input results in a logical condition that prevents certain code paths from being executed rather than a loop being iterated a large number of times.

However, we can still analyze the logic to see why the slow input might be logically causing a slowdown:

1. **Logic Processing of Bracket Sequences:**
   - The `a[i]` adjustments and the flag checks seem to determine if a sequence can potentially form a correct bracket sequence. This conditional logic (lines 20-33) isn't executed more in the slow input, but its outcome directs subsequent execution paths.

2. **Condition to Mark Invalid Sequence:**
   - If a sequence is detected as invalid (i.e., `a[i]` is set to `maxn`), it affects the subsequent processing in the sorting and pairing logic.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on understanding the code and input characteristics, here are the potential performance-characterizing invariants:

1. **Nested Structure Complexity:**
   - Natural Language Description: "When a bracket sequence contains an unmatched parenthesis right from the start or has excessive unmatched opening parentheses, it may be marked invalid, which can affect pairing efficiency."
   - This situation can arise if the initial parsing loop finds an imbalance in the sequence that can't be corrected, leading to marking it with `maxn`. 

2. **Unbalanced Sequences:**
   - Natural Language Description: "If the concatenated sequences require significant backtracking to detect imbalance (i.e., excessive unmatched right parenthesis from the end), it may lead to marking sequences as invalid."
   - The second loop checks imbalances from the end, and if it can't resolve them quickly, it also marks the sequence for exclusion.

3. **Incorrect Pair Formations:**
   - Natural Language Description: "Sequences that inherently can't be paired due to unmatched parentheses carry a performance cost, as they can't effectively contribute to pairs."
   - The sequences with `a[i] = maxn` are automatically excluded, contributing no valid pairs, reducing pair formation opportunities.

These invariants abstract away the specific values of the slow inputs and focus on structural characteristics that can hinder efficient sequence pairing. By ensuring input sequences are more balanced or contain fewer unmatched parentheses, we might avoid triggering the slow path logic that marks sequences as unpairable or invalid.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.

A bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it's possible to obtain a correct arithmetic expression by inserting characters "+" and "1" into this sequence. For example, the sequences "(())()", "()" and "(()(()))" are correct, while the bracket sequences ")(", "(()" and "(()))(" are not correct.

Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.

This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?

Input

The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of bracket sequences.

Each of the following n lines contains one bracket sequence — a non-empty string which consists only of characters "(" and ")".

The sum of lengths of all bracket sequences in the input is at most 5 ⋅ 10^5.

Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.

Output

Print a single integer — the maximum number of pairs which can be made, adhering to the conditions in the statement.

Examples

Input


7
)())
)
((
((
(
)
)


Output


2


Input


4
(
((
(((
(())


Output


0


Input


2
(())
()


Output


1

Note

In the first example, it's optimal to construct two pairs: "(( )())" and "( )".

Solution (C++ code):
{solution}


assistant: **Phase 3: Implementing Natural Language Invariants in C++**

Let's translate the performance-characterizing invariants into C++ checker code:

1. **Invariant: Nested Structure Complexity**
   - We'll check if a sequence has too many unmatched parentheses from the start, which would mark it as invalid.

```cpp
void check_unmatched_parens_initial(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - sequence has excessive unmatched opening parentheses!" << endl;
        abort();
    }
}
```

2. **Invariant: Unbalanced Sequences**
   - We'll check if a sequence requires significant backtracking to detect imbalance, marking it as invalid.

```cpp
void check_unmatched_parens_end(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - sequence has excessive unmatched closing parentheses from the end!" << endl;
        abort();
    }
}
```

3. **Invariant: Incorrect Pair Formations**
   - Check if an unexpectedly large number of sequences are marked invalid and cannot contribute to pairing.

```cpp
void check_invalid_sequence_count(int invalidCount, int n) {
    if (invalidCount > n / 2) {  // Assuming more than half invalid is concerning
        cerr << "Warning: Performance bottleneck triggered - too many invalid sequences!" << endl;
        abort();
    }
}
```

**Phase 4: Integrating Checker Code into the Original Program**

Now let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 5e5 + 5;
char s[maxn];
int a[maxn];

// Checker functions
void check_unmatched_parens_initial(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - sequence has excessive unmatched opening parentheses!" << endl;
        abort();
    }
}

void check_unmatched_parens_end(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - sequence has excessive unmatched closing parentheses from the end!" << endl;
        abort();
    }
}

void check_invalid_sequence_count(int invalidCount, int n) {
    if (invalidCount > n / 2) {
        cerr << "Warning: Performance bottleneck triggered - too many invalid sequences!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &n);
    int invalidCount = 0;  // Track how many sequences are marked as invalid

    for (int i = 1; i <= n; i++) {
        scanf("%s", s);
        a[i] = 0;
        bool flag = false;
        for (int j = 0; s[j]; j++) {
            if (s[j] == '(')
                a[i]++;
            else
                a[i]--;
            if (a[i] < 0) flag = true;
        }

        // Check for excessive unmatched opening parentheses
        check_unmatched_parens_initial(a[i] >= 0 && flag);

        if (a[i] >= 0 && flag) a[i] = maxn;
        if (a[i] < 0) {
            int tmp = 0;
            for (int j = strlen(s) - 1; j >= 0; j--) {
                if (s[j] == ')')
                    tmp++;
                else
                    tmp--;

                if (tmp < 0) {
                    a[i] = maxn;
                    break;
                }
            }
            // Check for excessive unmatched closing parentheses
            check_unmatched_parens_end(tmp < 0);
        }

        if (a[i] == maxn) invalidCount++;
    }

    // Check if too many sequences are invalid
    check_invalid_sequence_count(invalidCount, n);

    sort(a + 1, a + n + 1);
    int ans = 0;
    int i = 1, j = n;
    while (i < j) {
        if (a[i] + a[j] == 0)
            i++, j--, ans++;
        else {
            while (a[j] > -a[i]) j--;
            while (a[i] < -a[j]) i++;
        }
    }
    printf("%d\n", ans);
    return 0;
}
```

**Explanation:**

- **Placement of Checks:** 
  - The check for excessive unmatched opening parentheses (`check_unmatched_parens_initial`) is placed right after evaluating each sequence initially.
  - The check for excessive unmatched closing parentheses (`check_unmatched_parens_end`) is placed after evaluating a sequence from the end.
  - The overall check for too many invalid sequences (`check_invalid_sequence_count`) is placed after processing all sequences.

- **Thresholds:**
  - These checks use logical conditions based on the sequence's characteristics rather than fixed thresholds, ensuring they trigger under problematic input scenarios without relying on specific input values.

