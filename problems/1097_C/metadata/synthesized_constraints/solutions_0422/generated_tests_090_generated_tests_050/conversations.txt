system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.

A bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it's possible to obtain a correct arithmetic expression by inserting characters "+" and "1" into this sequence. For example, the sequences "(())()", "()" and "(()(()))" are correct, while the bracket sequences ")(", "(()" and "(()))(" are not correct.

Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.

This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?

Input

The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of bracket sequences.

Each of the following n lines contains one bracket sequence — a non-empty string which consists only of characters "(" and ")".

The sum of lengths of all bracket sequences in the input is at most 5 ⋅ 10^5.

Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.

Output

Print a single integer — the maximum number of pairs which can be made, adhering to the conditions in the statement.

Examples

Input


7
)())
)
((
((
(
)
)


Output


2


Input


4
(
((
(((
(())


Output


0


Input


2
(())
()


Output


1

Note

In the first example, it's optimal to construct two pairs: "(( )())" and "( )".

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  vector<int> balance(100005);
  vector<int>::iterator it;
  int sum = 0, total = 0;
  char c, last = '*';
  int ok = 0, zero = 0;
  int ans = 0;
  scanf("%d ", &n);
  for (int i = 0; i < n;) {
    scanf("%c", &c);
    if (c == '(') {
      if (last == ')') {
        if (sum < 0) {
          total += sum;
          ok++;
          sum = 0;
        }
      }
      sum++;
      last = '(';
    } else if (c == ')') {
      sum--;
      last = ')';
    } else {
      if (sum > 0) {
        if (ok == 0)
          balance[i] = total + sum;
        else
          balance[i] = 0x3f3f3f3f;
      } else {
        balance[i] = total + sum;
        if (balance[i] == 0) zero++;
      }
      i++;
      total = 0;
      sum = 0;
      last = '*';
      ok = 0;
    }
  }
  for (int i = 0; i < n; i++) {
    if (balance[i] != 0x3f3f3f3f && balance[i] != 0) {
      it = find(balance.begin(), balance.end(), 0 - balance[i]);
      if (it != balance.end()) {
        *it = 0x3f3f3f3f;
        balance[i] = 0x3f3f3f3f;
        ans++;
      }
    }
  }
  ans += zero / 2;
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
()(
())))
(((
)(((
()(
)()())
(()((
())()
)()((()
((((()()(


(G.2) Fast Input

10
)))
())))
(((
)(((
()(
)()())
(()((
())()
)()((()
((((()()(


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> balance(100005); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int>::iterator it; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int sum = 0, total = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  char c, last = '*'; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int ok = 0, zero = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d ", &n); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n;) { /* line 12 slow_hit_count: 61, fast_hit_count: 61 */
    scanf("%c", &c); /* line 13 slow_hit_count: 60, fast_hit_count: 60 */
    if (c == '(') { /* line 14 slow_hit_count: 60, fast_hit_count: 60 */
      if (last == ')') { /* line 15 slow_hit_count: 30, fast_hit_count: 28 */
        if (sum < 0) { /* line 16 slow_hit_count: 11, fast_hit_count: 10 */
          total += sum; /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
          ok++; /* line 18 slow_hit_count: 4, fast_hit_count: 4 */
          sum = 0; /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      sum++; /* line 22 slow_hit_count: 30, fast_hit_count: 28 */
      last = '('; /* line 23 slow_hit_count: 30, fast_hit_count: 28 */
    } else if (c == ')') { /* line 24 slow_hit_count: 30, fast_hit_count: 32 */
      sum--; /* line 25 slow_hit_count: 20, fast_hit_count: 22 */
      last = ')'; /* line 26 slow_hit_count: 20, fast_hit_count: 22 */
    } else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      if (sum > 0) { /* line 28 slow_hit_count: 10, fast_hit_count: 10 */
        if (ok == 0) /* line 29 slow_hit_count: 7, fast_hit_count: 6 */
          balance[i] = total + sum; /* line 30 slow_hit_count: 5, fast_hit_count: 4 */
        else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
          balance[i] = 0x3f3f3f3f; /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
      } else { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        balance[i] = total + sum; /* line 34 slow_hit_count: 3, fast_hit_count: 4 */
        if (balance[i] == 0) zero++; /* line 35 slow_hit_count: 3, fast_hit_count: 4 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      i++; /* line 37 slow_hit_count: 10, fast_hit_count: 10 */
      total = 0; /* line 38 slow_hit_count: 10, fast_hit_count: 10 */
      sum = 0; /* line 39 slow_hit_count: 10, fast_hit_count: 10 */
      last = '*'; /* line 40 slow_hit_count: 10, fast_hit_count: 10 */
      ok = 0; /* line 41 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 44 slow_hit_count: 11, fast_hit_count: 11 */
    if (balance[i] != 0x3f3f3f3f && balance[i] != 0) { /* line 45 slow_hit_count: 10, fast_hit_count: 10 */
      it = find(balance.begin(), balance.end(), 0 - balance[i]); /* line 46 slow_hit_count: 6, fast_hit_count: 5 */
      if (it != balance.end()) { /* line 47 slow_hit_count: 6, fast_hit_count: 5 */
        *it = 0x3f3f3f3f; /* line 48 slow_hit_count: 2, fast_hit_count: 3 */
        balance[i] = 0x3f3f3f3f; /* line 49 slow_hit_count: 2, fast_hit_count: 3 */
        ans++; /* line 50 slow_hit_count: 2, fast_hit_count: 3 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  ans += zero / 2; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", ans); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided program, problem statement, and hit count information, let's conduct a detailed analysis to identify the performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - **Lines with Significant Differentials**:
     - **Line 46**: `it = find(balance.begin(), balance.end(), 0 - balance[i]);`
       - This line is hit 6 times with the slow input and 5 times with the fast input.
       - This suggests the `find` operation is being called frequently and is potentially expensive, especially for large vectors.
   - **Loop Iterations**:
     - The outer loop on line 44 iterates over all elements of `balance`, which may be inefficient if `balance` contains many elements that require an exhaustive search using `find`.

2. **Code Interaction**:
   - The `find` operation is used to search for a balance that, when added to the current balance, equals zero. This requires iterating over the vector, which can be inefficient if there are many elements.
   - The `balance` vector is initialized with a large size (`100005`), but only a limited number of elements are actively used, which can lead to unnecessary operations over unused elements.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some invariants that characterize when the code is likely to slow down:

1. **Excessive Balancing Operations**:
   - **Natural Language**: "If there are many bracket sequences with imbalanced parentheses and no early termination, the program may repeatedly search for matching pairs inefficiently."
   - **Explanation**: This invariant highlights that when there are many sequences that require balancing but do not quickly terminate or reduce in size, the `find` operation will be called frequently, leading to inefficiency.

2. **Inefficient Search in Large Vectors**:
   - **Natural Language**: "If the number of unique imbalances is high, the vector search operation may become a bottleneck, causing the program to slow down."
   - **Explanation**: The inefficiency arises from searching through potentially large vectors for matching imbalances, especially when these imbalances are not easily reducible or cancelable.

3. **Complexity Due to Imbalance**:
   - **Natural Language**: "When sequences contain a high degree of imbalance (either many unmatched '(' or ')'), the potential for repeated operations increases, degrading performance."
   - **Explanation**: Highly imbalanced sequences lead to a high degree of operations in attempting to find complementary pairs, leading to excessive use of resource-intensive operations like `find`.

4. **Accumulated Balances**:
   - **Natural Language**: "When balance values in sequences frequently exceed a threshold of mismatched parentheses, the search for complementary balances can lead to increased processing time."
   - **Explanation**: As balances deviate significantly from zero, the difficulty of finding complementary sequences increases, requiring more operations and potentially slowing down the execution.

These invariants suggest conditions where the program faces inefficiencies due to the nature of the input bracket sequences and the operations performed on them. By understanding these conditions, we can better predict when and why slowdowns occur, helping identify potential optimization strategies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.

A bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it's possible to obtain a correct arithmetic expression by inserting characters "+" and "1" into this sequence. For example, the sequences "(())()", "()" and "(()(()))" are correct, while the bracket sequences ")(", "(()" and "(()))(" are not correct.

Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.

This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?

Input

The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of bracket sequences.

Each of the following n lines contains one bracket sequence — a non-empty string which consists only of characters "(" and ")".

The sum of lengths of all bracket sequences in the input is at most 5 ⋅ 10^5.

Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.

Output

Print a single integer — the maximum number of pairs which can be made, adhering to the conditions in the statement.

Examples

Input


7
)())
)
((
((
(
)
)


Output


2


Input


4
(
((
(((
(())


Output


0


Input


2
(())
()


Output


1

Note

In the first example, it's optimal to construct two pairs: "(( )())" and "( )".

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Checker Code in C++

Here are the performance-characterizing invariants translated into C++ runtime checks:

1. **Invariant: Excessive Balancing Operations**
   - **Natural Language**: "If there are many bracket sequences with imbalanced parentheses and no early termination, the program may repeatedly search for matching pairs inefficiently."
   - **Checker Code**:
   ```cpp
   void check_balance_operations(int imbalanceCount) {
       if (imbalanceCount > 1000) { // Arbitrarily chosen threshold for demonstration
           cerr << "Warning: Performance bottleneck - excessive balancing operations detected!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Inefficient Search in Large Vectors**
   - **Natural Language**: "If the number of unique imbalances is high, the vector search operation may become a bottleneck, causing the program to slow down."
   - **Checker Code**:
   ```cpp
   void check_large_vector_search(int vectorSize) {
       if (vectorSize > 50000) { // Threshold chosen based on potential large search
           cerr << "Warning: Performance bottleneck - large vector search detected!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Complexity Due to Imbalance**
   - **Natural Language**: "When sequences contain a high degree of imbalance (either many unmatched '(' or ')'), the potential for repeated operations increases, degrading performance."
   - **Checker Code**:
   ```cpp
   void check_imbalance_complexity(int imbalance) {
       if (imbalance > 50) { // Threshold for imbalance complexity
           cerr << "Warning: Performance bottleneck - high imbalance complexity detected!" << endl;
           abort();
       }
   }
   ```

4. **Invariant: Accumulated Balances**
   - **Natural Language**: "When balance values in sequences frequently exceed a threshold of mismatched parentheses, the search for complementary balances can lead to increased processing time."
   - **Checker Code**:
   ```cpp
   void check_accumulated_balances(int balanceValue) {
       if (abs(balanceValue) > 100) { // Imbalance threshold
           cerr << "Warning: Performance bottleneck - accumulated balances detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Now, we integrate these checks into the C++ program. We will add them at strategic points in the program to catch bottlenecks without adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_balance_operations(int imbalanceCount) {
    if (imbalanceCount > 1000) {
        cerr << "Warning: Performance bottleneck - excessive balancing operations detected!" << endl;
        abort();
    }
}

void check_large_vector_search(int vectorSize) {
    if (vectorSize > 50000) {
        cerr << "Warning: Performance bottleneck - large vector search detected!" << endl;
        abort();
    }
}

void check_imbalance_complexity(int imbalance) {
    if (imbalance > 50) {
        cerr << "Warning: Performance bottleneck - high imbalance complexity detected!" << endl;
        abort();
    }
}

void check_accumulated_balances(int balanceValue) {
    if (abs(balanceValue) > 100) {
        cerr << "Warning: Performance bottleneck - accumulated balances detected!" << endl;
        abort();
    }
}

int main() {
    int n;
    vector<int> balance(100005);
    vector<int>::iterator it;
    int sum = 0, total = 0;
    char c, last = '*';
    int ok = 0, zero = 0;
    int ans = 0;
    scanf("%d ", &n);

    // Check large input size which may lead to excessive balancing operations
    check_balance_operations(n);

    for (int i = 0; i < n;) {
        scanf("%c", &c);
        if (c == '(') {
            if (last == ')') {
                if (sum < 0) {
                    total += sum;
                    ok++;
                    sum = 0;
                }
            }
            sum++;
            last = '(';
        } else if (c == ')') {
            sum--;
            last = ')';
        } else {
            if (sum > 0) {
                if (ok == 0)
                    balance[i] = total + sum;
                else
                    balance[i] = 0x3f3f3f3f;
            } else {
                balance[i] = total + sum;
                if (balance[i] == 0) zero++;
            }
            i++;
            total = 0;
            sum = 0;
            last = '*';
            ok = 0;
        }
    }

    // Check for possible imbalance complexity
    check_imbalance_complexity(sum);

    for (int i = 0; i < n; i++) {
        if (balance[i] != 0x3f3f3f3f && balance[i] != 0) {
            // Check accumulated balances
            check_accumulated_balances(balance[i]);

            it = find(balance.begin(), balance.end(), 0 - balance[i]);

            // Check large search overhead in vector
            check_large_vector_search(it - balance.begin());

            if (it != balance.end()) {
                *it = 0x3f3f3f3f;
                balance[i] = 0x3f3f3f3f;
                ans++;
            }
        }
    }

    ans += zero / 2;
    printf("%d\n", ans);
    return 0;
}
```

### Explanation

- **`check_balance_operations`**: Placed right after reading `n`, it checks if the number of sequences suggests a potential for excessive operations.
- **`check_imbalance_complexity`**: Used after calculating `sum`, it ensures the complexity due to imbalances is reasonable.
- **`check_accumulated_balances`**: Used within the loop to ensure balance values do not frequently exceed thresholds, preventing unwarranted operations.
- **`check_large_vector_search`**: Used when the program performs a search operation to ensure the search in `balance` does not become too expensive.

These checks help identify potential performance bottlenecks in diverse scenarios while ensuring they do not significantly degrade performance under normal operating conditions.

