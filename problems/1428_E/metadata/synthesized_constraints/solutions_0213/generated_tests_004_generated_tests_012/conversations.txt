system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
mt19937 rng(
    (unsigned int)chrono::steady_clock::now().time_since_epoch().count());
long long int lol(long long int what, long long int parts) {
  long long int t1 = what / parts;
  what %= parts;
  long long int t2 = t1 + 1;
  long long int ans = (long long int)pow(t1, 2) * (parts - what);
  ans += (long long int)pow(t2, 2) * what;
  return ans;
}
long long int bachat(pair<long long int, long long int> p) {
  long long int a1 = lol(p.first, p.second);
  long long int a2 = lol(p.first, p.second + 1);
  return a1 - a2;
}
struct cmp {
  bool operator()(const pair<long long int, long long int> &a,
                  const pair<long long int, long long int> &b) const {
    long long int a1 = bachat(a);
    long long int b1 = bachat(b);
    return a1 > b1;
  }
};
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  long long int n, k;
  cin >> n >> k;
  vector<long long int> a(n);
  long long int ans = 0;
  multiset<pair<long long int, long long int>, cmp> st;
  for (long long int i = 0; i < n; i++) {
    long long int temp;
    cin >> temp;
    if (temp > 1) {
      st.insert({temp, 1});
    } else {
      ans++;
    }
  }
  while (n < k) {
    pair<long long int, long long int> p = *st.begin();
    st.erase(st.begin());
    p.second++;
    if (p.second == p.first) {
      ans += p.second;
    } else {
      st.insert(p);
    }
    n++;
  }
  for (auto itr = st.begin(); itr != st.end(); ++itr) {
    ans += lol(itr->first, itr->second);
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rng( /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
    (unsigned int)chrono::steady_clock::now().time_since_epoch().count()); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int lol(long long int what, long long int parts) { /* line 5 slow_hit_count: 430608, fast_hit_count: 17024 */
  long long int t1 = what / parts; /* line 6 slow_hit_count: 430608, fast_hit_count: 17024 */
  what %= parts; /* line 7 slow_hit_count: 430608, fast_hit_count: 17024 */
  long long int t2 = t1 + 1; /* line 8 slow_hit_count: 430608, fast_hit_count: 17024 */
  long long int ans = (long long int)pow(t1, 2) * (parts - what); /* line 9 slow_hit_count: 430608, fast_hit_count: 17024 */
  ans += (long long int)pow(t2, 2) * what; /* line 10 slow_hit_count: 430608, fast_hit_count: 17024 */
  return ans; /* line 11 slow_hit_count: 430608, fast_hit_count: 17024 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long int bachat(pair<long long int, long long int> p) { /* line 13 slow_hit_count: 215298, fast_hit_count: 8506 */
  long long int a1 = lol(p.first, p.second); /* line 14 slow_hit_count: 215298, fast_hit_count: 8506 */
  long long int a2 = lol(p.first, p.second + 1); /* line 15 slow_hit_count: 215298, fast_hit_count: 8506 */
  return a1 - a2; /* line 16 slow_hit_count: 215298, fast_hit_count: 8506 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
struct cmp { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator()(const pair<long long int, long long int> &a, /* line 19 slow_hit_count: 107649, fast_hit_count: 4253 */
                  const pair<long long int, long long int> &b) const { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    long long int a1 = bachat(a); /* line 21 slow_hit_count: 107649, fast_hit_count: 4253 */
    long long int b1 = bachat(b); /* line 22 slow_hit_count: 107649, fast_hit_count: 4253 */
    return a1 > b1; /* line 23 slow_hit_count: 107649, fast_hit_count: 4253 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, k; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long int> a(n); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  long long int ans = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<pair<long long int, long long int>, cmp> st; /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long int i = 0; i < n; i++) { /* line 34 slow_hit_count: 13, fast_hit_count: 13 */
    long long int temp; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> temp; /* line 36 slow_hit_count: 12, fast_hit_count: 12 */
    if (temp > 1) { /* line 37 slow_hit_count: 12, fast_hit_count: 12 */
      st.insert({temp, 1}); /* line 38 slow_hit_count: 12, fast_hit_count: 12 */
    } else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      ans++; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  while (n < k) { /* line 43 slow_hit_count: 21212, fast_hit_count: 844 */
    pair<long long int, long long int> p = *st.begin(); /* line 44 slow_hit_count: 21211, fast_hit_count: 843 */
    st.erase(st.begin()); /* line 45 slow_hit_count: 21211, fast_hit_count: 843 */
    p.second++; /* line 46 slow_hit_count: 21211, fast_hit_count: 843 */
    if (p.second == p.first) { /* line 47 slow_hit_count: 21211, fast_hit_count: 843 */
      ans += p.second; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      st.insert(p); /* line 50 slow_hit_count: 21211, fast_hit_count: 843 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    n++; /* line 52 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto itr = st.begin(); itr != st.end(); ++itr) { /* line 54 slow_hit_count: 13, fast_hit_count: 13 */
    ans += lol(itr->first, itr->second); /* line 55 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program and determine performance-characterizing invariants, we'll follow a structured approach as outlined in the tasks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts**:
   - The function `lol` (lines 5-11) is called significantly more often in the slow input (430,608 hits) compared to the fast input (17,024 hits).
   - The `bachat` function (lines 13-16) is also called much more frequently in the slow input (215,298 hits) versus the fast input (8,506 hits).
   - The `while` loop starting at line 43 is executed 21,212 times for the slow input compared to 844 for the fast input.

2. **Pinpointing Critical Code**:
   - The `while (n < k)` loop (lines 43-52) is where the program spends most of its time for the slow input. This loop handles distributing the carrot lengths among the rabbits, and its frequent execution is a direct cause of the slowdown.
   - The `multiset` operations, particularly inserts and erases, are closely tied to the `cmp` comparisons, which depend heavily on the `bachat` function.
   - The `lol` function calculates the squared eating time for carrot segments, and its repeated invocation suggests significant computational overhead.

3. **Interaction with Data Structures**:
   - The `multiset` is used to manage carrot length segments, and the custom comparator involves expensive calculations to maintain the set's ordering.
   - Frequent recalculations in `bachat` and `lol` suggest high computational cost due to maintaining precise carrot segment arrangements.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants**:
   
   - **Invariant 1**: "When the number of rabbits (`k`) is significantly larger than the number of carrots (`n`), and closer to the sum of carrot lengths, the splitting process in the multiset can become computationally expensive due to the frequent need to minimize eating times by recalculating segment distributions."
   
   - **Invariant 2**: "If many carrots have similar lengths, causing frequent recalculations in the distribution logic of the multiset, the program becomes slow due to the high number of `bachat` and `lol` function calls within the custom comparator."
   
   - **Invariant 3**: "When most carrots are large, requiring multiple splits to accommodate the rabbits, the computational overhead of maintaining the optimal segment distribution in the `multiset` dramatically increases, leading to performance degradation."

2. **Avoidance of Specific Numeric Values**:
   - The invariants describe general conditions without relying on specific numbers. They highlight relational conditions like "significantly larger," "similar lengths," and "multiple splits," adhering to the problem constraints (e.g., n ≤ 100, k ≤ 100,000).

3. **Consideration of Input Patterns**:
   - These invariants emphasize the importance of the relationship between `n`, `k`, and carrot lengths in determining performance. They focus on data patterns such as large `k`, similar carrot lengths, and large carrots requiring multiple splits.

### Conclusion

These performance-characterizing invariants can help identify and diagnose slow performance scenarios by recognizing general input patterns and relationships that lead to inefficiencies in the algorithm. They are abstract enough to apply to future inputs within given constraints, assisting in the development and testing process to avoid similar slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 to implement the performance-characterizing invariants derived earlier into the given C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets implementing the invariants derived from the natural language descriptions in Phase 2.

#### Invariant 1 Check
The invariant states a slowdown occurs when `k` is significantly larger than `n`, approaching the sum of carrot lengths.

```cpp
void check_rabbit_carrot_invariant(long long n, long long k, long long totalCarrotLength) {
    if (k > n && k > totalCarrotLength * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered - too many rabbits compared to carrot length!" << endl;
        abort();
    }
}
```

#### Invariant 2 Check
This invariant involves recalculations being expensive when many carrots have similar lengths.

```cpp
void check_similar_carrot_length_invariant(const vector<long long>& carrots) {
    map<long long, int> lengthFrequency;
    for (auto length : carrots) {
        lengthFrequency[length]++;
    }
    for (auto [length, freq] : lengthFrequency) {
        if (freq > carrots.size() * 0.5) {
            cerr << "Warning: Performance bottleneck condition triggered - too many carrots with similar length!" << endl;
            abort();
        }
    }
}
```

#### Invariant 3 Check
The invariant suggests a slowdown when many large carrots require multiple splits.

```cpp
void check_large_carrot_splits_invariant(const vector<long long>& carrots) {
    int largeCarrotThreshold = 100000; // Arbitrary threshold for "large"
    int splitRequirement = 0;
    for (auto length : carrots) {
        if (length > largeCarrotThreshold) {
            splitRequirement++;
        }
    }
    if (splitRequirement > carrots.size() * 0.3) {
        cerr << "Warning: Performance bottleneck condition triggered - too many large carrot splits required!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks into the Original Program

Below is the instrumented version of the original program, incorporating the checks in appropriate places.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function implementations for performance checks
void check_rabbit_carrot_invariant(long long n, long long k, long long totalCarrotLength) {
    if (k > n && k > totalCarrotLength * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered - too many rabbits compared to carrot length!" << endl;
        abort();
    }
}

void check_similar_carrot_length_invariant(const vector<long long>& carrots) {
    map<long long, int> lengthFrequency;
    for (auto length : carrots) {
        lengthFrequency[length]++;
    }
    for (auto [length, freq] : lengthFrequency) {
        if (freq > carrots.size() * 0.5) {
            cerr << "Warning: Performance bottleneck condition triggered - too many carrots with similar length!" << endl;
            abort();
        }
    }
}

void check_large_carrot_splits_invariant(const vector<long long>& carrots) {
    int largeCarrotThreshold = 100000; // Arbitrary threshold for "large"
    int splitRequirement = 0;
    for (auto length : carrots) {
        if (length > largeCarrotThreshold) {
            splitRequirement++;
        }
    }
    if (splitRequirement > carrots.size() * 0.3) {
        cerr << "Warning: Performance bottleneck condition triggered - too many large carrot splits required!" << endl;
        abort();
    }
}

// Original program
mt19937 rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());

long long int lol(long long int what, long long int parts) {
    long long int t1 = what / parts;
    what %= parts;
    long long int t2 = t1 + 1;
    long long int ans = (long long int)pow(t1, 2) * (parts - what);
    ans += (long long int)pow(t2, 2) * what;
    return ans;
}

long long int bachat(pair<long long int, long long int> p) {
    long long int a1 = lol(p.first, p.second);
    long long int a2 = lol(p.first, p.second + 1);
    return a1 - a2;
}

struct cmp {
    bool operator()(const pair<long long int, long long int> &a,
                    const pair<long long int, long long int> &b) const {
        long long int a1 = bachat(a);
        long long int b1 = bachat(b);
        return a1 > b1;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    long long int n, k;
    cin >> n >> k;
    vector<long long int> a(n);
    long long int totalCarrotLength = 0;
    
    for (long long int i = 0; i < n; i++) {
        cin >> a[i];
        totalCarrotLength += a[i];
    }

    // Performance checks based on the problem constraints
    check_rabbit_carrot_invariant(n, k, totalCarrotLength);
    check_similar_carrot_length_invariant(a);
    check_large_carrot_splits_invariant(a);

    long long int ans = 0;
    multiset<pair<long long int, long long int>, cmp> st;
    for (long long int i = 0; i < n; i++) {
        if (a[i] > 1) {
            st.insert({a[i], 1});
        } else {
            ans++;
        }
    }

    while (n < k) {
        pair<long long int, long long int> p = *st.begin();
        st.erase(st.begin());
        p.second++;
        if (p.second == p.first) {
            ans += p.second;
        } else {
            st.insert(p);
        }
        n++;
    }

    for (auto itr = st.begin(); itr != st.end(); ++itr) {
        ans += lol(itr->first, itr->second);
    }

    cout << ans << "\n";
}
```

### Explanation

- **Invariant 1**: This check ensures that if `k` is significantly larger than `n` and close to the sum of carrot lengths, the program issues a warning and aborts.
- **Invariant 2**: This check identifies if many carrots have similar lengths, which could lead to repetitive and costly calculations.
- **Invariant 3**: This is placed to detect if there are too many large carrots requiring multiple splits, which increases computational complexity.

These checks are placed after reading the inputs and before significant processing begins to avoid adding overhead during the computation, making them effective for performance monitoring.

