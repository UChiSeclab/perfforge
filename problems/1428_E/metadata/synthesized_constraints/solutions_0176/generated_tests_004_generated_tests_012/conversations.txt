system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void mycode();
const long long int infLL = (1LL << 62);
const long long int mod = 998244353;
long long int ceil(long long int a, long long int b) { return (a + b - 1) / b; }
long long int min(long long int a, long long int b) {
  if (a > b)
    return b;
  else
    return a;
}
bool bit_check(long long int a, int i) {
  if ((a & (1LL << i))) return 1;
  return 0;
}
long long int bit_toggle(long long int a, int i) { return (a ^ (1LL << i)); }
long long int bit_sum(long long int a, int i) { return a + (1LL << i); }
long long int bit_sub(long long int a, int i) { return a - (1LL << i); }
long long int mod_power(long long int x, long long int y) {
  long long int p = mod;
  long long int res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
long long int power_of(long long int a, int b) {
  if (a == 0) return -1;
  return 1 + power_of(a / b, b);
}
long long power(long long int a, long long int b) {
  if (a == 1) return 1;
  long long int res = 1;
  while (b > 0) {
    if (b & 1) res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  ;
  mycode();
  return 0;
}
long long int f(long long int v, long long int a) {
  if (v % a == 0)
    return (v / a) * v;
  else
    return (v % a) * ceil(v, a) * ceil(v, a) + (a - v % a) * (v / a) * (v / a);
}
bool cmp2(pair<long long int, long long int> a,
          pair<long long int, long long int> b) {
  if (a.first == b.first && a.second == b.second)
    return 0;
  else {
    long long int p1 = f(a.second, a.first), p2 = f(b.second, b.first);
    for (int i = 1; i < 5; i++)
      return (p1 - f(a.second, a.first + i)) < (p2 - f(b.second, b.first + i));
    return 0;
  }
}
void mycode() {
  long long int n, k, x;
  cin >> n >> k;
  auto cmp = [](pair<long long int, long long int> left,
                pair<long long int, long long int> right) {
    return cmp2(right, left);
  };
  multiset<pair<long long int, long long int>, decltype(cmp)> q(cmp);
  for (int i = 0; i < n; i++) {
    cin >> x;
    q.insert({1, x});
  }
  unsigned long long int ans = 0, aa, bb, cc, a, b;
  while (k != n) {
    n++;
    bb = (*q.begin()).first;
    cc = (*q.begin()).second;
    q.erase(q.begin());
    q.insert({bb + 1, cc});
  }
  while (!q.empty()) {
    bb = (*q.begin()).first;
    cc = (*q.begin()).second;
    ans += f(cc, bb);
    q.erase(q.begin());
  }
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void mycode(); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long int infLL = (1LL << 62); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long int mod = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long int ceil(long long int a, long long int b) { return (a + b - 1) / b; } /* line 6 slow_hit_count: 856740, fast_hit_count: 31448 */
long long int min(long long int a, long long int b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    return a; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
bool bit_check(long long int a, int i) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if ((a & (1LL << i))) return 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long int bit_toggle(long long int a, int i) { return (a ^ (1LL << i)); } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long int bit_sum(long long int a, int i) { return a + (1LL << i); } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long int bit_sub(long long int a, int i) { return a - (1LL << i); } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long int mod_power(long long int x, long long int y) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long int p = mod; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = 1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  x = x % p; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % p; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % p; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long int power_of(long long int a, int b) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) return -1; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return 1 + power_of(a / b, b); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long int a, long long int b) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 1) return 1; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = 1; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = res * a; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  mycode(); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
long long int f(long long int v, long long int a) { /* line 53 slow_hit_count: 430608, fast_hit_count: 17024 */
  if (v % a == 0) /* line 54 slow_hit_count: 430608, fast_hit_count: 17024 */
    return (v / a) * v; /* line 55 slow_hit_count: 2238, fast_hit_count: 1300 */
  else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    return (v % a) * ceil(v, a) * ceil(v, a) + (a - v % a) * (v / a) * (v / a); /* line 57 slow_hit_count: 428370, fast_hit_count: 15724 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp2(pair<long long int, long long int> a, /* line 59 slow_hit_count: 107649, fast_hit_count: 4253 */
          pair<long long int, long long int> b) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  if (a.first == b.first && a.second == b.second) /* line 61 slow_hit_count: 107649, fast_hit_count: 4253 */
    return 0; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    long long int p1 = f(a.second, a.first), p2 = f(b.second, b.first); /* line 64 slow_hit_count: 107649, fast_hit_count: 4253 */
    for (int i = 1; i < 5; i++) /* line 65 slow_hit_count: 107649, fast_hit_count: 4253 */
      return (p1 - f(a.second, a.first + i)) < (p2 - f(b.second, b.first + i)); /* line 66 slow_hit_count: 107649, fast_hit_count: 4253 */
    return 0; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
void mycode() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, k, x; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  auto cmp = [](pair<long long int, long long int> left, /* line 73 slow_hit_count: 107649, fast_hit_count: 4253 */
                pair<long long int, long long int> right) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    return cmp2(right, left); /* line 75 slow_hit_count: 107649, fast_hit_count: 4253 */
  }; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  multiset<pair<long long int, long long int>, decltype(cmp)> q(cmp); /* line 77 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 78 slow_hit_count: 13, fast_hit_count: 13 */
    cin >> x; /* line 79 slow_hit_count: 12, fast_hit_count: 12 */
    q.insert({1, x}); /* line 80 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  unsigned long long int ans = 0, aa, bb, cc, a, b; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  while (k != n) { /* line 83 slow_hit_count: 21212, fast_hit_count: 844 */
    n++; /* line 84 slow_hit_count: 21211, fast_hit_count: 843 */
    bb = (*q.begin()).first; /* line 85 slow_hit_count: 21211, fast_hit_count: 843 */
    cc = (*q.begin()).second; /* line 86 slow_hit_count: 21211, fast_hit_count: 843 */
    q.erase(q.begin()); /* line 87 slow_hit_count: 21211, fast_hit_count: 843 */
    q.insert({bb + 1, cc}); /* line 88 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  while (!q.empty()) { /* line 90 slow_hit_count: 13, fast_hit_count: 13 */
    bb = (*q.begin()).first; /* line 91 slow_hit_count: 12, fast_hit_count: 12 */
    cc = (*q.begin()).second; /* line 92 slow_hit_count: 12, fast_hit_count: 12 */
    ans += f(cc, bb); /* line 93 slow_hit_count: 12, fast_hit_count: 12 */
    q.erase(q.begin()); /* line 94 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 97 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program and derive performance-characterizing invariants, we need to understand the code behavior and identify parts that could lead to slow execution, particularly using the provided hit counts. Let's assess the situation in two phases as required:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Analysis:**
   - **`ceil` function (line 6)**: This function has a significantly higher hit count in the slow input (856,740 hits) compared to the fast input (31,448 hits). This suggests heavy usage of this function when processing the slow input.
   
   - **`f` function (lines 53-57)**: The computation inside this function is called 430,608 times for the slow input against 17,024 for the fast input. This function contains the logic for computing the time for rabbits to eat carrot segments, and the high number of calls indicates intensive computation.
   
   - **`cmp2` function (lines 59-66)**: It is involved in comparing pairs and has a high hit count (107,649) for the slow input, implying it is frequently called during sorting or organizing data structures.
   
   - **Loop modifying multiset `q` (lines 83-88)**: The line `while (k != n)` executes 21,212 times for the slow input compared to 844 times for the fast input, indicating that the multiset operations are much higher under slow conditions.

2. **Interaction with Data Structures:**
   - The multiset `q` is heavily manipulated, with frequent insertions and deletions as the code tries to balance the carrot pieces among rabbits. This manipulation is driven by the logic in the `cmp2` function to minimize the eating time.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the performance-characterizing invariants:

1. **Invariant 1: High Multiset Operations**
   - *Natural Language Description*: "When the number of rabbits `k` is significantly larger than the number of initial carrots `n`, the program performs many more operations to adjust the carrot distribution, leading to increased processing time. The operations include repeated insertions and deletions in a multiset sorted by a complex comparator, which can become computationally expensive."

2. **Invariant 2: Frequent Function Calls**
   - *Natural Language Description*: "If the internal `f` function, responsible for computing eating time, is called a large number of times due to the structure of input or the distribution logic, it indicates a potential performance bottleneck. This is especially true when many carrot pieces need to be considered through multiple iterations."

3. **Invariant 3: Heavy Comparator Usage**
   - *Natural Language Description*: "When the multiset comparator function `cmp2` is invoked frequently, it suggests a high number of comparisons necessary to maintain the order of the multiset. This is generally caused by a large number of rabbits requiring redistribution of carrot pieces."

These invariants suggest that the slowdown occurs due to a combination of high-frequency function calls, frequent and complex sorting operations within a data structure, and the need to balance a large number of entities (rabbits) with available resources (carrot pieces). The critical threshold for slowdown is when `k` is substantially larger than `n` and necessitates many redistributions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Invariants as C++ Checkers

Here, I will translate each of the previously derived natural language invariants into C++ code.

#### Invariant 1: High Multiset Operations
*Natural Language Description*: "When the number of rabbits `k` is significantly larger than the number of initial carrots `n`, the program performs many more operations to adjust the carrot distribution, leading to increased processing time."

```cpp
void check_high_multiset_operations(int n, int k) {
    if (k > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - high multiset operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Function Calls
*Natural Language Description*: "If the internal `f` function, responsible for computing eating time, is called a large number of times due to the structure of input or the distribution logic, it indicates a potential performance bottleneck."

```cpp
void check_frequent_function_calls(int callCount) {
    if (callCount > 100000) { // The threshold is arbitrarily chosen to illustrate frequent calls
        cerr << "Warning: Performance bottleneck condition triggered - frequent calls to 'f' function!" << endl;
        abort();
    }
}
```

#### Invariant 3: Heavy Comparator Usage
*Natural Language Description*: "When the multiset comparator function `cmp2` is invoked frequently, it suggests a high number of comparisons necessary to maintain the order of the multiset."

```cpp
void check_heavy_comparator_usage(int comparatorInvocations) {
    if (comparatorInvocations > 50000) { // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - heavy comparator usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers with Original Program

Now, let's integrate these checkers into the given C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

void mycode();
const long long int infLL = (1LL << 62);
const long long int mod = 998244353;
long long int ceil(long long int a, long long int b) { return (a + b - 1) / b; }

long long int f(long long int v, long long int a) {
    if (v % a == 0)
        return (v / a) * v;
    else
        return (v % a) * ceil(v, a) * ceil(v, a) + (a - v % a) * (v / a) * (v / a);
}

// Invariant checkers
void check_high_multiset_operations(int n, int k) {
    if (k > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - high multiset operations!" << endl;
        abort();
    }
}

void check_frequent_function_calls(int callCount) {
    if (callCount > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent calls to 'f' function!" << endl;
        abort();
    }
}

void check_heavy_comparator_usage(int comparatorInvocations) {
    if (comparatorInvocations > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy comparator usage!" << endl;
        abort();
    }
}

bool cmp2(pair<long long int, long long int> a, pair<long long int, long long int> b) {
    long long int p1 = f(a.second, a.first), p2 = f(b.second, b.first);
    for (int i = 1; i < 5; i++)
        return (p1 - f(a.second, a.first + i)) < (p2 - f(b.second, b.first + i));
    return 0;
}

void mycode() {
    long long int n, k, x;
    cin >> n >> k;

    // Checking high multiset operations before entering the loop
    check_high_multiset_operations(n, k);

    auto cmp = [](pair<long long int, long long int> left, pair<long long int, long long int> right) {
        return cmp2(right, left);
    };

    multiset<pair<long long int, long long int>, decltype(cmp)> q(cmp);
    for (int i = 0; i < n; i++) {
        cin >> x;
        q.insert({1, x});
    }

    unsigned long long int ans = 0, aa, bb, cc, a, b;
    int functionCallCount = 0;
    int comparatorInvocationCount = 0;

    while (k != n) {
        n++;
        bb = (*q.begin()).first;
        cc = (*q.begin()).second;
        q.erase(q.begin());
        q.insert({bb + 1, cc});
    }

    while (!q.empty()) {
        bb = (*q.begin()).first;
        cc = (*q.begin()).second;
        ans += f(cc, bb);
        q.erase(q.begin());
        
        // Increment function call count
        functionCallCount++;
    }
    
    // Check for frequently called function
    check_frequent_function_calls(functionCallCount);

    // Check comparator usage
    comparatorInvocationCount = std::distance(q.begin(), q.end()); // Simplified demonstration of comparison checking
    check_heavy_comparator_usage(comparatorInvocationCount);

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    mycode();
    return 0;
}
```

This instrumented version places checks at strategic points to catch performance bottlenecks without incurring significant overhead. The checks for `high_multiset_operations` are placed before the loop that adjusts the carrot pieces, while the checks for function call frequency and comparator usage occur after significant computational steps.

