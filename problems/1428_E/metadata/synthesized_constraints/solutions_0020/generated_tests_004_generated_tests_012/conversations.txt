system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
std::mt19937 rng(
    (int)std::chrono::steady_clock::now().time_since_epoch().count());
using namespace std;
long long mod = (1000000007LL);
inline long long Mod(long long a, long long b) { return (a % b); }
inline long long poww(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1) res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res;
}
long long gcd(long long a, long long b) {
  while (b) {
    a %= b, swap(a, b);
  }
  return a;
}
void read(vector<long long> &w, long long n) {
  w.resize(n);
  for (long long i = 0; i < n; i++) cin >> w[i];
}
void print(vector<long long> &w) {
  for (long long i = 0; i < (long long)(w).size(); i++) {
    if (i == (long long)(w).size() - 1)
      cout << w[i] << "\n";
    else
      cout << w[i] << " ";
  }
}
long long prodmod(vector<long long> w);
long long summod(vector<long long> w);
long long n, m, q, k, v[300050], ans;
long long cost(long long i, long long j) {
  if (v[i] % j == 0) return (v[i] / j) * (v[i] / j) * j;
  long long len1 = v[i] / j, qtd1 = j - v[i] % j;
  long long len2 = (v[i] / j + 1), qtd2 = v[i] % j;
  return len1 * len1 * qtd1 + len2 * len2 * qtd2;
}
int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> k;
  for (long long i = 1; i <= n; i++) cin >> v[i];
  priority_queue<vector<long long>, vector<vector<long long>>,
                 greater<vector<long long>>>
      pq;
  for (long long i = 1; i <= n; i++) {
    pq.push({-cost(i, 1) + cost(i, 2), 2, i});
    ans += cost(i, 1);
  }
  for (long long cnt = 0; cnt < k - n; cnt++) {
    auto t = pq.top();
    ans += t[0];
    long long j = t[1], i = t[2];
    pq.pop();
    pq.push({-cost(i, j) + cost(i, j + 1), j + 1, i});
  }
  cout << ans << "\n";
}
long long summod(vector<long long> w) {
  long long curr = 0;
  for (long long i = 0; i < (long long)(w).size(); i++) {
    curr = (curr + w[i]) % mod;
    if (curr < 0) curr += mod;
  }
  return curr;
}
long long prodmod(vector<long long> w) {
  long long curr = 1;
  for (long long i = 0; i < (long long)(w).size(); i++) {
    if (w[i] >= mod) w[i] %= mod;
    curr = (curr * w[i]) % mod;
    if (curr < 0) curr += mod;
  }
  return curr;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
std::mt19937 rng( /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
    (int)std::chrono::steady_clock::now().time_since_epoch().count()); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = (1000000007LL); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
inline long long Mod(long long a, long long b) { return (a % b); } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
inline long long poww(long long a, long long b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = (res * a) % mod; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    a = (a * a) % mod; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    a %= b, swap(a, b); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
void read(vector<long long> &w, long long n) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  w.resize(n); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) cin >> w[i]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void print(vector<long long> &w) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < (long long)(w).size(); i++) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == (long long)(w).size() - 1) /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      cout << w[i] << "\n"; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      cout << w[i] << " "; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long prodmod(vector<long long> w); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
long long summod(vector<long long> w); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, q, k, v[300050], ans; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long cost(long long i, long long j) { /* line 37 slow_hit_count: 42458, fast_hit_count: 1722 */
  if (v[i] % j == 0) return (v[i] / j) * (v[i] / j) * j; /* line 38 slow_hit_count: 42458, fast_hit_count: 1722 */
  long long len1 = v[i] / j, qtd1 = j - v[i] % j; /* line 39 slow_hit_count: 42298, fast_hit_count: 1623 */
  long long len2 = (v[i] / j + 1), qtd2 = v[i] % j; /* line 40 slow_hit_count: 42298, fast_hit_count: 1623 */
  return len1 * len1 * qtd1 + len2 * len2 * qtd2; /* line 41 slow_hit_count: 42298, fast_hit_count: 1623 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) cin >> v[i]; /* line 47 slow_hit_count: 13, fast_hit_count: 13 */
  priority_queue<vector<long long>, vector<vector<long long>>, /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
                 greater<vector<long long>>> /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      pq; /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 1; i <= n; i++) { /* line 51 slow_hit_count: 13, fast_hit_count: 13 */
    pq.push({-cost(i, 1) + cost(i, 2), 2, i}); /* line 52 slow_hit_count: 12, fast_hit_count: 12 */
    ans += cost(i, 1); /* line 53 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long cnt = 0; cnt < k - n; cnt++) { /* line 55 slow_hit_count: 21212, fast_hit_count: 844 */
    auto t = pq.top(); /* line 56 slow_hit_count: 21211, fast_hit_count: 843 */
    ans += t[0]; /* line 57 slow_hit_count: 21211, fast_hit_count: 843 */
    long long j = t[1], i = t[2]; /* line 58 slow_hit_count: 21211, fast_hit_count: 843 */
    pq.pop(); /* line 59 slow_hit_count: 21211, fast_hit_count: 843 */
    pq.push({-cost(i, j) + cost(i, j + 1), j + 1, i}); /* line 60 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
long long summod(vector<long long> w) { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  long long curr = 0; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < (long long)(w).size(); i++) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    curr = (curr + w[i]) % mod; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    if (curr < 0) curr += mod; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  return curr; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
long long prodmod(vector<long long> w) { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  long long curr = 1; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < (long long)(w).size(); i++) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    if (w[i] >= mod) w[i] %= mod; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    curr = (curr * w[i]) % mod; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    if (curr < 0) curr += mod; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  return curr; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 80 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, there are three primary areas where the slow input incurs significantly higher execution counts compared to the fast input:

1. **Line 37-42 (`cost` function):** 
   - This function is hit *42,458* times for the slow input compared to *1,722* for the fast input. This indicates frequent calculations of carrot cutting costs, likely because the number of cuts being considered (k-n) is much larger in the slow input.

2. **Lines 55-61 (Loop for priority queue operations):**
   - The loop is executed *21,212* times for the slow input compared to *844* for the fast input. This discrepancy suggests that the slow performance is linked to the number of additional pieces (k-n), which causes more iterations and hence, more expensive recalculations and priority queue operations.

### Phase 2: Derive Performance-Characterizing Invariants

Given the above analysis, we can deduce the following natural language performance invariants:

1. **High Repetition of Cost Calculations:**
   - **Invariant:** "When the number of rabbits `k` is significantly larger than the number of carrots `n`, the program repeatedly calculates the cost of splitting carrots, which can lead to slow performance."
   - **Explanation:** The slow input has a much larger `k-n` value, resulting in many more iterations of the loop that recalculates splitting costs, leading to high computational expenses.

2. **Frequent Priority Queue Operations:**
   - **Invariant:** "If the difference between the number of rabbits `k` and the number of carrots `n` is large, the priority queue operations (inserting and extracting minimum elements) become repetitive and significant in execution time."
   - **Explanation:** As `k-n` increases, the number of iterations through the loop of priority queue operations (lines 55-60) increases, causing bottlenecks due to the repetitive nature and complexity of these operations.

3. **Threshold for Carrot Length:**
   - **Invariant:** "When carrots have very large lengths, splitting them into more pieces becomes computationally expensive as each potential division incurs a high cost calculation."
   - **Explanation:** Larger carrot lengths (`a_i`) increase the potential number of ways a carrot can be split, leading to higher hit counts on `cost` function calculations.

These performance invariants are not tied to specific numbers but rather to the relationships between `n`, `k`, and the properties of the input `a_i`. They provide a general framework for understanding under what conditions the solution can become inefficient, thereby aiding in future profiling and optimization efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the natural language invariants into C++ runtime checks:

1. **High Repetition of Cost Calculations:**

   ```cpp
   void check_cost_calculations_invariant(long long n, long long k) {
       if (k > 10 * n) { // Arbitrary threshold based on analysis
           cerr << "Warning: High repetition of cost calculations due to large k-n difference!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Priority Queue Operations:**

   ```cpp
   void check_priority_queue_invariant(long long n, long long k) {
       if (k - n > 10000) { // Arbitrary threshold for excessive iterations
           cerr << "Warning: Frequent priority queue operations detected due to high k-n!" << endl;
           abort();
       }
   }
   ```

3. **Threshold for Carrot Length:**

   ```cpp
   void check_carrot_length_invariant(vector<long long>& v) {
       for (long long length : v) {
           if (length > 500000) { // Arbitrary large length threshold
               cerr << "Warning: Large carrot length detected, which may lead to expensive splits!" << endl;
               abort();
           }
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's integrate these checks into the existing C++ code. We will place the checks strategically to avoid performance overhead in tight loops.

```cpp
#include <bits/stdc++.h>
std::mt19937 rng(
    (int)std::chrono::steady_clock::now().time_since_epoch().count());
using namespace std;
long long mod = (1000000007LL);

inline long long Mod(long long a, long long b) { return (a % b); }
inline long long poww(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1) res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res;
}

long long gcd(long long a, long long b) {
  while (b) {
    a %= b, swap(a, b);
  }
  return a;
}

void read(vector<long long> &w, long long n) {
  w.resize(n);
  for (long long i = 0; i < n; i++) cin >> w[i];
}

void print(vector<long long> &w) {
  for (long long i = 0; i < (long long)(w).size(); i++) {
    if (i == (long long)(w).size() - 1)
      cout << w[i] << "\n";
    else
      cout << w[i] << " ";
  }
}

long long prodmod(vector<long long> w);
long long summod(vector<long long> w);
long long n, m, q, k, v[300050], ans;

// Function to calculate the cost of splitting carrots
long long cost(long long i, long long j) {
  if (v[i] % j == 0) return (v[i] / j) * (v[i] / j) * j;
  long long len1 = v[i] / j, qtd1 = j - v[i] % j;
  long long len2 = (v[i] / j + 1), qtd2 = v[i] % j;
  return len1 * len1 * qtd1 + len2 * len2 * qtd2;
}

// Checkers for performance bottlenecks
void check_cost_calculations_invariant(long long n, long long k) {
    if (k > 10 * n) { // Arbitrary threshold based on analysis
        cerr << "Warning: High repetition of cost calculations due to large k-n difference!" << endl;
        abort();
    }
}

void check_priority_queue_invariant(long long n, long long k) {
    if (k - n > 10000) { // Arbitrary threshold for excessive iterations
        cerr << "Warning: Frequent priority queue operations detected due to high k-n!" << endl;
        abort();
    }
}

void check_carrot_length_invariant(vector<long long>& v) {
    for (long long length : v) {
        if (length > 500000) { // Arbitrary large length threshold
            cerr << "Warning: Large carrot length detected, which may lead to expensive splits!" << endl;
            abort();
        }
    }
}

int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> k;
  for (long long i = 1; i <= n; i++) cin >> v[i];

  // Insert checkers after reading inputs
  check_cost_calculations_invariant(n, k);
  check_priority_queue_invariant(n, k);
  check_carrot_length_invariant(vector<long long>(v + 1, v + n + 1));

  priority_queue<vector<long long>, vector<vector<long long>>,
                 greater<vector<long long>>>
      pq;
  for (long long i = 1; i <= n; i++) {
    pq.push({-cost(i, 1) + cost(i, 2), 2, i});
    ans += cost(i, 1);
  }
  for (long long cnt = 0; cnt < k - n; cnt++) {
    auto t = pq.top();
    ans += t[0];
    long long j = t[1], i = t[2];
    pq.pop();
    pq.push({-cost(i, j) + cost(i, j + 1), j + 1, i});
  }
  cout << ans << "\n";
}

long long summod(vector<long long> w) {
  long long curr = 0;
  for (long long i = 0; i < (long long)(w).size(); i++) {
    curr = (curr + w[i]) % mod;
    if (curr < 0) curr += mod;
  }
  return curr;
}

long long prodmod(vector<long long> w) {
  long long curr = 1;
  for (long long i = 0; i < (long long)(w).size(); i++) {
    if (w[i] >= mod) w[i] %= mod;
    curr = (curr * w[i]) % mod;
    if (curr < 0) curr += mod;
  }
  return curr;
}
```

### Explanation

- **Checker Placement:** Checkers are placed immediately after input reading to ensure they capture problematic scenarios before executing expensive operations.
- **Thresholds:** Selected thresholds (`10 * n` and `10000` for `k-n`) are educated estimates based on the constraints, ensuring that the checks are broad enough to catch potential slow scenarios but still realistic.
- **Carrot Lengths:** The threshold for carrot lengths is set to a large value (`500000`) to identify scenarios where large lengths may lead to expensive splitting calculations.

