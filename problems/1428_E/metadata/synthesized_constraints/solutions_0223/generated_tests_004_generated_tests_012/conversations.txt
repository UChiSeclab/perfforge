system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
using namespace std;
template <typename T, typename TT>
inline ostream &operator<<(ostream &os, const pair<T, TT> &t) {
  return os << t.first << " " << t.second;
}
template <typename T>
inline ostream &operator<<(ostream &os, const vector<T> &t) {
  for (auto i : t) os << i << " ";
  return os;
}
template <typename T>
inline ostream &operator<<(ostream &os, const set<T> &t) {
  for (auto i : t) os << i << " ";
  return os;
}
template <typename T1, typename T2>
inline ostream &operator<<(ostream &os, const map<T1, T2> &t) {
  for (auto i : t) os << i.first << " : " << i.second << '\n';
  return os;
}
template <typename T>
inline istream &operator>>(istream &is, vector<T> &v) {
  for (T &t : v) is >> t;
  return is;
}
template <typename T1, typename T2>
inline istream &operator>>(istream &is, vector<pair<T1, T2>> &v) {
  for (pair<T1, T2> &t : v) is >> t.first >> t.second;
  return is;
}
const long long mod = 1e9 + 7;
inline long long calc(long long l, long long p) {
  long long b = l / p, t = l % p;
  return b * b * (p - t) + (b + 1) * (b + 1) * t;
}
struct cmp {
  bool operator()(const pair<long long, long long> &a,
                  const pair<long long, long long> &b) {
    return calc(a.first, a.second) - calc(a.first, a.second + 1) <
           calc(b.first, b.second) - calc(b.first, b.second + 1);
  }
};
void solve() {
  long long n, k;
  cin >> n >> k;
  vector<long long> v(n);
  cin >> v;
  priority_queue<pair<long long, long long>, vector<pair<long long, long long>>,
                 cmp>
      pq;
  for (auto x : v) pq.push({x, 1});
  for (int i = 0; i < k - n; i++) {
    auto tp = pq.top();
    pq.pop();
    ;
    pq.push({tp.first, tp.second + 1});
  }
  long long ans = 0;
  while (!pq.empty()) {
    auto tp = pq.top();
    pq.pop();
    ans += calc(tp.first, tp.second);
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  ;
  long long T = 1;
  while (T--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename TT> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline ostream &operator<<(ostream &os, const pair<T, TT> &t) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return os << t.first << " " << t.second; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline ostream &operator<<(ostream &os, const vector<T> &t) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i : t) os << i << " "; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline ostream &operator<<(ostream &os, const set<T> &t) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i : t) os << i << " "; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
inline ostream &operator<<(ostream &os, const map<T1, T2> &t) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i : t) os << i.first << " : " << i.second << '\n'; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
inline istream &operator>>(istream &is, vector<T> &v) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (T &t : v) is >> t; /* line 25 slow_hit_count: 13, fast_hit_count: 13 */
  return is; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
inline istream &operator>>(istream &is, vector<pair<T1, T2>> &v) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (pair<T1, T2> &t : v) is >> t.first >> t.second; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
inline long long calc(long long l, long long p) { /* line 34 slow_hit_count: 431132, fast_hit_count: 17124 */
  long long b = l / p, t = l % p; /* line 35 slow_hit_count: 431132, fast_hit_count: 17124 */
  return b * b * (p - t) + (b + 1) * (b + 1) * t; /* line 36 slow_hit_count: 431132, fast_hit_count: 17124 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
struct cmp { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator()(const pair<long long, long long> &a, /* line 39 slow_hit_count: 107780, fast_hit_count: 4278 */
                  const pair<long long, long long> &b) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    return calc(a.first, a.second) - calc(a.first, a.second + 1) < /* line 41 slow_hit_count: 107780, fast_hit_count: 4278 */
           calc(b.first, b.second) - calc(b.first, b.second + 1); /* line 42 slow_hit_count: 107780, fast_hit_count: 4278 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v(n); /* line 48 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> v; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  priority_queue<pair<long long, long long>, vector<pair<long long, long long>>, /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
                 cmp> /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      pq; /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto x : v) pq.push({x, 1}); /* line 53 slow_hit_count: 13, fast_hit_count: 13 */
  for (int i = 0; i < k - n; i++) { /* line 54 slow_hit_count: 21212, fast_hit_count: 844 */
    auto tp = pq.top(); /* line 55 slow_hit_count: 21211, fast_hit_count: 843 */
    pq.pop(); /* line 56 slow_hit_count: 21211, fast_hit_count: 843 */
    ; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    pq.push({tp.first, tp.second + 1}); /* line 58 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  while (!pq.empty()) { /* line 61 slow_hit_count: 13, fast_hit_count: 13 */
    auto tp = pq.top(); /* line 62 slow_hit_count: 12, fast_hit_count: 12 */
    pq.pop(); /* line 63 slow_hit_count: 12, fast_hit_count: 12 */
    ans += calc(tp.first, tp.second); /* line 64 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  long long T = 1; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  while (T--) { /* line 73 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Analysis and Performance Invariants

**Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Line-Level Hit Count Comparison:**
   - The function `calc` (lines 34-36) and the priority queue operations (lines 53-58) show significantly higher hit counts for the slow input compared to the fast input.
   - Specifically, the `calc` function has 431,132 hits for the slow input and only 17,124 for the fast input.
   - The loop in lines 54-58 iterates 21,212 times for the slow input compared to 844 times for the fast input.

2. **Inference on Code Interaction with Data Structures:**
   - The `calc` function is a computation-heavy operation used to determine the contribution of splitting a carrot into a specific number of pieces.
   - The priority queue is used to manage and iteratively optimize the distribution of carrot pieces among rabbits to minimize eating time.
   - The significant increase in hit counts for these segments under slow input suggests that more operations and checks are being performed due to the larger value of `k - n`.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant: High Number of Rabbits Relative to Carrots**
   - **Natural Language Description:** "When the number of rabbits is significantly higher than the number of carrots, the process of splitting carrots becomes computationally more expensive. This is particularly true when the difference (`k - n`) is large, as it leads to multiple iterations of distributing carrot pieces and frequently recalculating the optimal distribution."

2. **Invariant: Large Carrots Requiring Multiple Splits**
   - **Natural Language Description:** "If carrots are large and need to be divided into many pieces to accommodate the rabbits, the computational cost increases. This is especially costly when the priority queue is heavily utilized to balance large initial carrot sizes across more pieces than there are carrots."

3. **Invariant: Frequent Priority Queue Operations**
   - **Natural Language Description:** "Frequent operations on the priority queue, such as pushing and popping elements, can slow down the performance. These operations are intensified when the difference between `k` and `n` is large, requiring repeated adjustments to carrot allocations."

**Important Considerations**
- These invariants are designed to abstract conditions that lead to performance issues without relying on specific numerical values from the test inputs.
- The focus is on broad conditions that can be triggered by different input combinations within the problem's constraints.
- These statements help identify potential slow paths in the code and guide further optimizations or input handling strategies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Let's translate each of the performance-characterizing invariants derived in Phase 2 into C++ code for runtime checks.

1. **Invariant: High Number of Rabbits Relative to Carrots**
   ```cpp
   void check_rabbits_carrots_invariant(long long n, long long k) {
       if (k > 10 * n) {  // Example threshold: number of rabbits is more than 10 times the number of carrots
           cerr << "Warning: Potential performance bottleneck - number of rabbits significantly exceeds number of carrots!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Large Carrots Requiring Multiple Splits**
   ```cpp
   void check_large_carrots_invariant(const vector<long long>& carrots) {
       for (auto length : carrots) {
           if (length > 100000) {  // Example threshold: carrot length needing excessive splits
               cerr << "Warning: Performance bottleneck - large carrot sizes requiring multiple splits!" << endl;
               abort();
           }
       }
   }
   ```

3. **Invariant: Frequent Priority Queue Operations**
   ```cpp
   void check_priority_queue_invariant(long long k, long long n) {
       if (k - n > 10000) {  // Example threshold: number of extra pieces required leading to many priority queue operations
           cerr << "Warning: Performance bottleneck - excessive priority queue operations due to large k - n!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Program

Now, let's integrate these runtime checks into the given C++ program at appropriate locations to avoid adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
using namespace std;

// Checkers for performance bottlenecks
void check_rabbits_carrots_invariant(long long n, long long k) {
    if (k > 10 * n) {  // Example threshold
        cerr << "Warning: Potential performance bottleneck - number of rabbits significantly exceeds number of carrots!" << endl;
        abort();
    }
}

void check_large_carrots_invariant(const vector<long long>& carrots) {
    for (auto length : carrots) {
        if (length > 100000) {  // Example threshold
            cerr << "Warning: Performance bottleneck - large carrot sizes requiring multiple splits!" << endl;
            abort();
        }
    }
}

void check_priority_queue_invariant(long long k, long long n) {
    if (k - n > 10000) {  // Example threshold
        cerr << "Warning: Performance bottleneck - excessive priority queue operations due to large k - n!" << endl;
        abort();
    }
}

inline long long calc(long long l, long long p) {
    long long b = l / p, t = l % p;
    return b * b * (p - t) + (b + 1) * (b + 1) * t;
}

struct cmp {
    bool operator()(const pair<long long, long long> &a,
                    const pair<long long, long long> &b) {
        return calc(a.first, a.second) - calc(a.first, a.second + 1) <
               calc(b.first, b.second) - calc(b.first, b.second + 1);
    }
};

void solve() {
    long long n, k;
    cin >> n >> k;

    // Insert checker for the number of rabbits relative to carrots
    check_rabbits_carrots_invariant(n, k);

    vector<long long> v(n);
    cin >> v;

    // Insert checker for large carrots requiring multiple splits
    check_large_carrots_invariant(v);

    // Insert checker for excessive priority queue operations
    check_priority_queue_invariant(k, n);

    priority_queue<pair<long long, long long>, vector<pair<long long, long long>>, cmp> pq;
    for (auto x : v) pq.push({x, 1});
    for (int i = 0; i < k - n; i++) {
        auto tp = pq.top();
        pq.pop();
        pq.push({tp.first, tp.second + 1});
    }

    long long ans = 0;
    while (!pq.empty()) {
        auto tp = pq.top();
        pq.pop();
        ans += calc(tp.first, tp.second);
    }
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    long long T = 1;
    while (T--) {
        solve();
    }
    return 0;
}
```

### Explanation of Integration Points:

- **After Reading Inputs:** The first two checkers are placed after reading the inputs to capture any potential performance bottlenecks early, such as when `k` is much larger than `n` or when carrot sizes are excessively large.
- **Before Priority Queue Loop:** The last checker is inserted before the loop that performs priority queue operations, ensuring we catch conditions that could lead to excessive operations due to the large difference between `k` and `n`. This avoids performance degradation by catching problematic scenarios early in the process flow.

