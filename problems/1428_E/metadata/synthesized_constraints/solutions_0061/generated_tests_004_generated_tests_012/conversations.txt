system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int a[(int)1e5];
long long int f(int i, int d) {
  if (a[i] == 1) return 0;
  long long int mn = a[i] / d;
  long long int mx = mn + !!(a[i] % d);
  long long int cur = mn * mn * (d - a[i] % d);
  cur += mx * mx * (a[i] % d);
  d++;
  mn = a[i] / d;
  mx = mn + !!(a[i] % d);
  cur -= mn * mn * (d - a[i] % d);
  cur -= mx * mx * (a[i] % d);
  return cur;
}
struct st {
  int i, d;
  bool operator<(const st& o) const { return f(i, d) < f(o.i, o.d); }
};
int main() {
  int n, k;
  cin >> n >> k;
  for (int i = 0; i < n; i++) scanf("%lld", a + i);
  priority_queue<st> pq;
  long long int ans = 0;
  for (int i = 0; i < n; i++) {
    pq.push({i, 1});
    ans += a[i] * a[i];
  }
  for (int i = n; i < k; i++) {
    auto t = pq.top();
    pq.pop();
    ans -= f(t.i, t.d);
    pq.push({t.i, t.d + 1});
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int a[(int)1e5]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int f(int i, int d) { /* line 4 slow_hit_count: 236717, fast_hit_count: 9337 */
  if (a[i] == 1) return 0; /* line 5 slow_hit_count: 236717, fast_hit_count: 9337 */
  long long int mn = a[i] / d; /* line 6 slow_hit_count: 236717, fast_hit_count: 9337 */
  long long int mx = mn + !!(a[i] % d); /* line 7 slow_hit_count: 236717, fast_hit_count: 9337 */
  long long int cur = mn * mn * (d - a[i] % d); /* line 8 slow_hit_count: 236717, fast_hit_count: 9337 */
  cur += mx * mx * (a[i] % d); /* line 9 slow_hit_count: 236717, fast_hit_count: 9337 */
  d++; /* line 10 slow_hit_count: 236717, fast_hit_count: 9337 */
  mn = a[i] / d; /* line 11 slow_hit_count: 236717, fast_hit_count: 9337 */
  mx = mn + !!(a[i] % d); /* line 12 slow_hit_count: 236717, fast_hit_count: 9337 */
  cur -= mn * mn * (d - a[i] % d); /* line 13 slow_hit_count: 236717, fast_hit_count: 9337 */
  cur -= mx * mx * (a[i] % d); /* line 14 slow_hit_count: 236717, fast_hit_count: 9337 */
  return cur; /* line 15 slow_hit_count: 236717, fast_hit_count: 9337 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
struct st { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int i, d; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const st& o) const { return f(i, d) < f(o.i, o.d); } /* line 19 slow_hit_count: 107753, fast_hit_count: 4247 */
}; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%lld", a + i); /* line 24 slow_hit_count: 13, fast_hit_count: 13 */
  priority_queue<st> pq; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
  long long int ans = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 27 slow_hit_count: 13, fast_hit_count: 13 */
    pq.push({i, 1}); /* line 28 slow_hit_count: 12, fast_hit_count: 12 */
    ans += a[i] * a[i]; /* line 29 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i < k; i++) { /* line 31 slow_hit_count: 21212, fast_hit_count: 844 */
    auto t = pq.top(); /* line 32 slow_hit_count: 21211, fast_hit_count: 843 */
    pq.pop(); /* line 33 slow_hit_count: 21211, fast_hit_count: 843 */
    ans -= f(t.i, t.d); /* line 34 slow_hit_count: 21211, fast_hit_count: 843 */
    pq.push({t.i, t.d + 1}); /* line 35 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Let's proceed through the provided C code and identify the performance bottlenecks, then derive conditions or invariants that likely trigger the slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The function `f(int i, int d)` (lines 4-15) is called significantly more often in the slow input (236,717 times) compared to the fast input (9,337 times). This suggests that the execution frequency of this function is a key factor in slowing down the program.
   - The priority queue operations (lines 32-35) are also hit much more in the slow input, which indicates that the loop managing these operations (lines 31-35) is executing more iterations.

2. **Function and Priority Queue Analysis:**
   - The function `f` calculates the difference in squared sums when a carrot is divided into different numbers of pieces. It's called within a loop that iteratively improves the distribution of carrot pieces among rabbits.
   - The priority queue (in line 25) manages carrots, attempting to minimize the sum of squares of carrot pieces. The loop (lines 31-35) adjusts the division of carrot pieces and relies heavily on `f` to make optimization decisions.
   - The loop from line 31 to line 35 runs `k-n` times. Noticeably, `k` is significantly larger in the slow input compared to the fast input, which directly impacts how many times these operations are performed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance characteristics and invariants in natural language:

1. **High Division Count Invariant:**
   - **Natural Language Description:** "If the number of rabbits `k` significantly exceeds the number of carrots `n`, the program may enter a slow path due to numerous iterations required to adjust carrot piece distribution."
   - **Rationale:** When `k` is much larger than `n`, the loop (lines 31-35) runs `k-n` times, which increases the priority queue operations and calls to the function `f`.

2. **Frequent Function Evaluation Invariant:**
   - **Natural Language Description:** "If the function evaluating the cost of carrot divisions is called excessively, possibly due to an imbalanced division strategy among a high number of rabbits, the program could slow down significantly."
   - **Rationale:** Frequent evaluation within `f` suggests repeated costly calculations, especially when the difference between `k` and `n` grows large.

3. **Priority Queue Stress Invariant:**
   - **Natural Language Description:** "When the priority queue is strained by adjusting divisions repeatedly as `k` grows much larger relative to `n`, performance degradation is likely."
   - **Rationale:** The priority queue operations on each carrot, influenced by adjustments made to balance the carrot pieces, becomes a bottleneck when these operations are repeated excessively due to a high `k` value.

### Conclusion

These invariants describe conditions under which the C program is prone to slow execution, correlating particularly to the relationship between `k` and `n`, and the resulting computational load from attempts to optimally distribute carrot pieces.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: Let's go through the task that involves translating the natural language performance invariants into C++ checker code, and then integrating these checks into the given C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

We'll create runtime checks based on the performance invariants identified:

1. **High Division Count Invariant:**
   - **Checker Code:**
   ```cpp
   void check_high_division_count(int n, int k) {
       if (k > 2 * n) { // Condition based on excessive number of rabbit pieces relative to carrots
           cerr << "Warning: Performance bottleneck condition triggered - high division count!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Function Evaluation Invariant:**
   - **Checker Code:**
   ```cpp
   void check_frequent_function_evaluation(int functionCalls, int threshold) {
       if (functionCalls > threshold) { 
           cerr << "Warning: Performance bottleneck condition triggered - frequent function evaluation!" << endl;
           abort();
       }
   }
   ```

3. **Priority Queue Stress Invariant:**
   - **Checker Code:**
   ```cpp
   void check_priority_queue_stress(int pqOperations, int threshold) {
       if (pqOperations > threshold) { 
           cerr << "Warning: Performance bottleneck condition triggered - priority queue stress!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Now, we will integrate these checks into the given C++ solution. We'll add the checks at appropriate locations to detect potential performance issues.

```cpp
#include <bits/stdc++.h>
using namespace std;
long long int a[(int)1e5];

long long int f(int i, int d) {
    if (a[i] == 1) return 0;
    long long int mn = a[i] / d;
    long long int mx = mn + !!(a[i] % d);
    long long int cur = mn * mn * (d - a[i] % d);
    cur += mx * mx * (a[i] % d);
    d++;
    mn = a[i] / d;
    mx = mn + !!(a[i] % d);
    cur -= mn * mn * (d - a[i] % d);
    cur -= mx * mx * (a[i] % d);
    return cur;
}

struct st {
    int i, d;
    bool operator<(const st& o) const { return f(i, d) < f(o.i, o.d); }
};

// Checker functions
void check_high_division_count(int n, int k) {
    if (k > 2 * n) { // Condition: k significantly exceeds n
        cerr << "Warning: Performance bottleneck condition triggered - high division count!" << endl;
        abort();
    }
}

void check_frequent_function_evaluation(int functionCalls, int threshold) {
    if (functionCalls > threshold) { 
        cerr << "Warning: Performance bottleneck condition triggered - frequent function evaluation!" << endl;
        abort();
    }
}

void check_priority_queue_stress(int pqOperations, int threshold) {
    if (pqOperations > threshold) { 
        cerr << "Warning: Performance bottleneck condition triggered - priority queue stress!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    
    // Insert check after reading inputs
    check_high_division_count(n, k);

    for (int i = 0; i < n; i++) scanf("%lld", a + i);

    priority_queue<st> pq;
    long long int ans = 0;
    for (int i = 0; i < n; i++) {
        pq.push({i, 1});
        ans += a[i] * a[i];
    }

    int functionCalls = 0;  // Track function calls to f
    int pqOperations = 0;  // Track priority queue operations

    for (int i = n; i < k; i++) {
        auto t = pq.top();
        pq.pop();
        ans -= f(t.i, t.d);
        pq.push({t.i, t.d + 1});

        functionCalls++;
        pqOperations++;

        // Optionally check the function call frequency and priority queue stress
        check_frequent_function_evaluation(functionCalls, 1000000);  // Example threshold
        check_priority_queue_stress(pqOperations, 1000000);  // Example threshold
    }
    cout << ans << "\n";
}
```

### Explanation

- **Check Placement:** 
  - The `check_high_division_count` is placed right after the reading of inputs to ensure we detect a high ratio of rabbits to carrots upfront.
  - `check_frequent_function_evaluation` and `check_priority_queue_stress` are placed inside the loop (lines 31-35) but outside inner operations to prevent frequent checks in tight loops. We use counters to track the number of function calls and queue operations.

- **Thresholds:** 
  - Adjust the thresholds in `check_frequent_function_evaluation` and `check_priority_queue_stress` based on observed performance and input constraints. The `1000000` is an example placeholder; it can be calibrated during testing.

This setup should effectively capture performance bottlenecks and help diagnose further issues during fuzz testing or on specific input patterns.

