system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
istream &operator>>(istream &in, vector<T> &arr) {
  for (T &i : arr) {
    in >> i;
  }
  return in;
}
template <class T>
ostream &operator<<(ostream &in, vector<T> &arr) {
  for (T &i : arr) {
    in << i << " ";
  }
  return in;
}
long long debb = 1;
long long next(vector<long long> &t) {
  long long c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]);
  long long u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2]));
  long long su = c + u;
  t[2] += 1;
  c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]);
  u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2]));
  long long su1 = c + u;
  t[2] -= 1;
  return su - su1;
}
signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  long long n, k;
  cin >> n >> k;
  long long co = k - n;
  multiset<vector<long long>, greater<vector<long long>>> u;
  for (int i = 0; i < n; ++i) {
    long long x;
    cin >> x;
    vector<long long> k = {x, x, 1};
    long long ra = next(k);
    u.insert({ra, x, x, 1});
  }
  for (int i = 0; i < co; ++i) {
    vector<long long> r = *(u.begin());
    u.erase(u.begin());
    vector<long long> o = {r[1], r[2], r[3]};
    o[2] += 1;
    o[0] = o[1] / o[2] + min(o[1] % o[2], 1ll);
    long long ra = next(o);
    u.insert({ra, o[0], o[1], o[2]});
  }
  long long ans = 0;
  for (auto r : u) {
    vector<long long> t = {r[1], r[2], r[3]};
    for (int i = 0; i < t[2]; ++i) {
      long long c = t[1] / t[2] + max(min(t[1] % t[2] - i, 1ll), 0ll);
      ans += c * c;
    }
  }
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &in, vector<T> &arr) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  for (T &i : arr) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    in >> i; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return in; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &in, vector<T> &arr) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (T &i : arr) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    in << i << " "; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return in; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long debb = 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long next(vector<long long> &t) { /* line 18 slow_hit_count: 21223, fast_hit_count: 855 */
  long long c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]); /* line 19 slow_hit_count: 21223, fast_hit_count: 855 */
  long long u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2])); /* line 20 slow_hit_count: 21223, fast_hit_count: 855 */
  long long su = c + u; /* line 21 slow_hit_count: 21223, fast_hit_count: 855 */
  t[2] += 1; /* line 22 slow_hit_count: 21223, fast_hit_count: 855 */
  c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]); /* line 23 slow_hit_count: 21223, fast_hit_count: 855 */
  u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2])); /* line 24 slow_hit_count: 21223, fast_hit_count: 855 */
  long long su1 = c + u; /* line 25 slow_hit_count: 21223, fast_hit_count: 855 */
  t[2] -= 1; /* line 26 slow_hit_count: 21223, fast_hit_count: 855 */
  return su - su1; /* line 27 slow_hit_count: 21223, fast_hit_count: 855 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  long long co = k - n; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<vector<long long>, greater<vector<long long>>> u; /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; ++i) { /* line 37 slow_hit_count: 13, fast_hit_count: 13 */
    long long x; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 39 slow_hit_count: 12, fast_hit_count: 12 */
    vector<long long> k = {x, x, 1}; /* line 40 slow_hit_count: 12, fast_hit_count: 12 */
    long long ra = next(k); /* line 41 slow_hit_count: 12, fast_hit_count: 12 */
    u.insert({ra, x, x, 1}); /* line 42 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < co; ++i) { /* line 44 slow_hit_count: 21212, fast_hit_count: 844 */
    vector<long long> r = *(u.begin()); /* line 45 slow_hit_count: 42422, fast_hit_count: 1686 */
    u.erase(u.begin()); /* line 46 slow_hit_count: 21211, fast_hit_count: 843 */
    vector<long long> o = {r[1], r[2], r[3]}; /* line 47 slow_hit_count: 21211, fast_hit_count: 843 */
    o[2] += 1; /* line 48 slow_hit_count: 21211, fast_hit_count: 843 */
    o[0] = o[1] / o[2] + min(o[1] % o[2], 1ll); /* line 49 slow_hit_count: 21211, fast_hit_count: 843 */
    long long ra = next(o); /* line 50 slow_hit_count: 21211, fast_hit_count: 843 */
    u.insert({ra, o[0], o[1], o[2]}); /* line 51 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto r : u) { /* line 54 slow_hit_count: 13, fast_hit_count: 13 */
    vector<long long> t = {r[1], r[2], r[3]}; /* line 55 slow_hit_count: 24, fast_hit_count: 24 */
    for (int i = 0; i < t[2]; ++i) { /* line 56 slow_hit_count: 21235, fast_hit_count: 867 */
      long long c = t[1] / t[2] + max(min(t[1] % t[2] - i, 1ll), 0ll); /* line 57 slow_hit_count: 21223, fast_hit_count: 855 */
      ans += c * c; /* line 58 slow_hit_count: 21223, fast_hit_count: 855 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon analyzing the given code and hit count information, the critical lines with significant differences between slow and fast inputs include:

1. **Line 44 (`for (int i = 0; i < co; ++i)`)**: This loop is executed `21212` times for the slow input compared to `844` times for the fast input. The variable `co` represents `k - n`, suggesting that this loop's iteration count is a primary factor in the slowdown.

2. **Line 45 (`vector<long long> r = *(u.begin());`)**: The multiset operation (`erase` and `insert`) are costly, especially when performed frequently as seen with `42422` hits for the slow input versus `1686` hits for the fast input.

3. **Line 56 (`for (int i = 0; i < t[2]; ++i)`)**: This inner loop iterates `21235` times on the slow input compared to `867` times on the fast input, indicating heavy operations on vectors contributing to the slowdown.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the identified bottlenecks, the following performance-characterizing invariants describe the conditions under which the code enters a slow path:

1. **High `k - n` Difference**:
   - **Natural Language Description**: "If the number of extra pieces required (`k - n`) is large, the program will iterate more often to split the carrots optimally, leading to increased execution time."
   - **Reasoning**: A higher value of `co` directly increases the iterations of the main loop, causing more operations on the multiset, which is costly in terms of performance.

2. **Frequent Multiset Operations**:
   - **Natural Language Description**: "When the multiset experiences frequent insertions and deletions, due to a high number of required splits (`k` is significantly greater than `n`), the operations become a major performance bottleneck."
   - **Reasoning**: Each `erase` and `insert` operation impacts the multiset's balance and performance, especially when such operations are executed frequently.

3. **Heavy Inner Loop Execution**:
   - **Natural Language Description**: "If the average number of divisions per carrot piece is high, the accumulation of operations in the inner loop on vectors will significantly slow down the execution."
   - **Reasoning**: More divisions mean `t[2]` becomes larger, leading to more iterations inside the inner loop, thus increasing computational demand.

These invariants do not rely on specific input values but rather describe the conditions affecting performance, allowing for predictive analysis of future inputs that might induce similar slowdowns. The thresholds like `k` significantly greater than `n` or high average divisions per carrot align with the problem constraints and typical usage scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Below are the C++ code snippets for the runtime checks based on the previously derived performance-characterizing invariants:

1. **High `k - n` Difference Checker**:
   ```cpp
   void check_high_difference(long long n, long long k) {
       if (k - n > 10000) { // Assumed threshold based on input constraints
           cerr << "Warning: Performance bottleneck due to high k - n difference!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Multiset Operations Checker**:
   ```cpp
   void check_multiset_operations(const multiset<vector<long long>, greater<vector<long long>>>& u) {
       if (u.size() > 5000) { // Assumed threshold for frequent operations
           cerr << "Warning: Performance bottleneck due to frequent multiset operations!" << endl;
           abort();
       }
   }
   ```

3. **Heavy Inner Loop Execution Checker**:
   ```cpp
   void check_inner_loop_execution(const vector<long long>& t) {
       if (t[2] > 5000) { // Assumed threshold for high division count
           cerr << "Warning: Performance bottleneck due to heavy inner loop execution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Below is the final instrumented C++ code with the integrated performance checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_high_difference(long long n, long long k) {
    if (k - n > 10000) { // Check for high k - n difference
        cerr << "Warning: Performance bottleneck due to high k - n difference!" << endl;
        abort();
    }
}

void check_multiset_operations(const multiset<vector<long long>, greater<vector<long long>>>& u) {
    if (u.size() > 5000) { // Check for frequent multiset operations
        cerr << "Warning: Performance bottleneck due to frequent multiset operations!" << endl;
        abort();
    }
}

void check_inner_loop_execution(const vector<long long>& t) {
    if (t[2] > 5000) { // Check for heavy inner loop execution
        cerr << "Warning: Performance bottleneck due to heavy inner loop execution!" << endl;
        abort();
    }
}

long long next(vector<long long> &t) {
    long long c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]);
    long long u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2]));
    long long su = c + u;
    t[2] += 1;
    c = (t[1] / t[2] + 1) * (t[1] / t[2] + 1) * (t[1] % t[2]);
    u = (t[1] / t[2]) * (t[1] / t[2]) * (t[2] - (t[1] % t[2]));
    long long su1 = c + u;
    t[2] -= 1;
    return su - su1;
}

signed main() {
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(false);
    long long n, k;
    cin >> n >> k;

    // Check for high k - n difference
    check_high_difference(n, k);

    long long co = k - n;
    multiset<vector<long long>, greater<vector<long long>>> u;
    for (int i = 0; i < n; ++i) {
        long long x;
        cin >> x;
        vector<long long> k = {x, x, 1};
        long long ra = next(k);
        u.insert({ra, x, x, 1});

        // Check after insertion to the multiset
        check_multiset_operations(u);
    }

    for (int i = 0; i < co; ++i) {
        vector<long long> r = *(u.begin());
        u.erase(u.begin());
        vector<long long> o = {r[1], r[2], r[3]};
        o[2] += 1;
        o[0] = o[1] / o[2] + min(o[1] % o[2], 1ll);
        long long ra = next(o);
        u.insert({ra, o[0], o[1], o[2]});

        // Check after insertion to the multiset
        check_multiset_operations(u);
    }

    long long ans = 0;
    for (auto r : u) {
        vector<long long> t = {r[1], r[2], r[3]};

        // Check before executing the inner loop
        check_inner_loop_execution(t);

        for (int i = 0; i < t[2]; ++i) {
            long long c = t[1] / t[2] + max(min(t[1] % t[2] - i, 1ll), 0ll);
            ans += c * c;
        }
    }
    cout << ans << '\n';
}
```

### Explanation

- **High `k - n` Difference**: The check is placed immediately after reading `n` and `k` to quickly detect problematic configurations.
- **Frequent Multiset Operations**: The check is placed after each insertion to the multiset to capture frequent modifications indicative of potential bottlenecks.
- **Heavy Inner Loop Execution**: The check is triggered before entering the inner loop to ensure the vector `t` does not have excessive divisions. 

These checks help detect performance bottlenecks without adding significant overhead in the critical loops.

