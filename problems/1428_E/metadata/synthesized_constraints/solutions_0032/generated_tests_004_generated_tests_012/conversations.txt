system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
template <typename T>
void smax(T &a, T b) {
  if (a < b) a = b;
}
template <typename T>
void smin(T &a, T b) {
  if (a > b) a = b;
}
template <typename T>
T pw(T a, T b) {
  T p = 1, one = 1;
  while (b) {
    if (b & one) p = p * a;
    a = a * a;
    b >>= 1;
  }
  return p;
}
template <typename T>
T pwm(T a, T b, T md = mod) {
  T p = 1, one = 1;
  while (b) {
    if (b & one) p = p * a % md;
    a = a * a % md;
    b >>= 1;
  }
  return p;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &it : v) is >> it;
  return is;
}
long long cont(int vl, int p) {
  int q = vl / p;
  int r = vl % p;
  int Q = q + 1;
  return 1ll * (p - r) * q * q + 1ll * r * Q * Q;
}
struct car {
  int val, p;
  car(int val_, int p_) : val{val_}, p{p_} {}
  long long ch() const { return cont(val, p) - cont(val, p + 1); }
  bool operator<(const car &rhs) const { return ch() > rhs.ch(); }
};
void solve() {
  int n, k;
  cin >> n >> k;
  multiset<car> st;
  int ar;
  for (int i = 0; i < n; ++i) {
    cin >> ar;
    st.insert(car{ar, 1});
  }
  int need = k - n;
  while (need != 0) {
    auto b = *st.begin();
    st.erase(st.begin());
    ++b.p;
    st.insert(b);
    --need;
  }
  long long ans = 0;
  for (auto &it : st) ans += cont(it.val, it.p);
  cout << ans << '\n';
}
int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 21223
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(G.2) Fast Input

12 855
992192 397069 35660 561788 903539 521894 818097 223467 511651 737418 975119 528954


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void smax(T &a, T b) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) a = b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void smin(T &a, T b) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) a = b; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
T pw(T a, T b) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  T p = 1, one = 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & one) p = p * a; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return p; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
T pwm(T a, T b, T md = mod) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  T p = 1, one = 1; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & one) p = p * a % md; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a % md; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return p; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, vector<T> &v) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &it : v) is >> it; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long cont(int vl, int p) { /* line 37 slow_hit_count: 430608, fast_hit_count: 17024 */
  int q = vl / p; /* line 38 slow_hit_count: 430608, fast_hit_count: 17024 */
  int r = vl % p; /* line 39 slow_hit_count: 430608, fast_hit_count: 17024 */
  int Q = q + 1; /* line 40 slow_hit_count: 430608, fast_hit_count: 17024 */
  return 1ll * (p - r) * q * q + 1ll * r * Q * Q; /* line 41 slow_hit_count: 430608, fast_hit_count: 17024 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
struct car { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  int val, p; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  car(int val_, int p_) : val{val_}, p{p_} {} /* line 45 slow_hit_count: 12, fast_hit_count: 12 */
  long long ch() const { return cont(val, p) - cont(val, p + 1); } /* line 46 slow_hit_count: 215298, fast_hit_count: 8506 */
  bool operator<(const car &rhs) const { return ch() > rhs.ch(); } /* line 47 slow_hit_count: 107649, fast_hit_count: 4253 */
}; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<car> st; /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
  int ar; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 54 slow_hit_count: 13, fast_hit_count: 13 */
    cin >> ar; /* line 55 slow_hit_count: 12, fast_hit_count: 12 */
    st.insert(car{ar, 1}); /* line 56 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  int need = k - n; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  while (need != 0) { /* line 59 slow_hit_count: 21212, fast_hit_count: 844 */
    auto b = *st.begin(); /* line 60 slow_hit_count: 21211, fast_hit_count: 843 */
    st.erase(st.begin()); /* line 61 slow_hit_count: 21211, fast_hit_count: 843 */
    ++b.p; /* line 62 slow_hit_count: 21211, fast_hit_count: 843 */
    st.insert(b); /* line 63 slow_hit_count: 21211, fast_hit_count: 843 */
    --need; /* line 64 slow_hit_count: 21211, fast_hit_count: 843 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto &it : st) ans += cont(it.val, it.p); /* line 67 slow_hit_count: 13, fast_hit_count: 13 */
  cout << ans << '\n'; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the provided program and the hit counts for the slow and fast inputs, we can pinpoint the areas that contribute significantly more hits under the slow input:

1. **Function `cont`:** The lines inside this function (lines 37-41) have a substantially higher hit count under the slow input (`slow_hit_count: 430608`) compared to the fast input (`fast_hit_count: 17024`). This indicates that the function is executed many more times for the slow input.
   
2. **Function `car::ch`:** This function (line 46) also experiences a high number of hits (`slow_hit_count: 215298`) when compared to the fast input (`fast_hit_count: 8506`), suggesting frequent recalculations of potential changes in carrot divisions.

3. **Loop in `solve`:** The loop starting at line 59 that adjusts the number of pieces (`need`) is executed far more frequently for the slow input (`slow_hit_count: 21212`) than the fast input (`fast_hit_count: 844`).

These insights suggest that the performance difference stems from the varying number of iterations in the loop that increases the pieces of carrots (`p`), leading to frequent recalculations using the `cont` function.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants that capture the conditions under which the program slows down:

1. **High Demand for Carrot Splits:**
   - *Invariant:* "If the number of required carrot pieces (`k`) significantly exceeds the initial number of carrots (`n`), leading to a high number of extra pieces needed (i.e., `k - n` is large), the program may enter a slow path due to repeated adjustments and recalculations."
   - *Explanation:* This condition results in each carrot being divided more times, thus increasing the number of iterations in the loop that adjusts carrot splits (`while (need != 0)`).

2. **Uneven Distribution of Carrot Lengths:**
   - *Invariant:* "When there is a large disparity in carrot lengths, especially with very large carrots that need to be divided into many pieces, performance may degrade as the program spends more time recalculating optimal divisions."
   - *Explanation:* Large carrots require more frequent division adjustments to minimize the sum of squares, causing more iterations and thus more calls to `cont` and `car::ch`.

3. **Excessive Re-Heap Operations:**
   - *Invariant:* "The program may slow down if there is a high frequency of re-insertions into the multiset, which occurs when many carrots require additional piece allocations beyond simple equal divisions."
   - *Explanation:* This condition is evident from the repeated calls to `st.erase` and `st.insert` during each iteration of adjusting the carrot pieces, leading to increased use of the data structure.

These invariants help identify the scenarios where the program is likely to exhibit slower performance, providing guidance for potential optimizations or adjustments in input scenarios to prevent such slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_1, a_2, a_3, …, a_n. However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers.

Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^2.

Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.

Input

The first line contains two integers n and k (1 ≤ n ≤ k ≤ 10^5): the initial number of carrots and the number of rabbits.

The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6): lengths of carrots.

It is guaranteed that the sum of a_i is at least k.

Output

Output one integer: the minimum sum of time taken for rabbits to eat carrots.

Examples

Input


3 6
5 3 1


Output


15


Input


1 4
19


Output


91

Note

For the first test, the optimal sizes of carrots are \{1,1,1,2,2,2\}. The time taken is 1^2+1^2+1^2+2^2+2^2+2^2=15

For the second test, the optimal sizes of carrots are \{4,5,5,5\}. The time taken is 4^2+5^2+5^2+5^2=91.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants inferred previously as runtime checks in C++.

#### Invariant 1: High Demand for Carrot Splits
- **Natural Language:** "If the number of required carrot pieces (`k`) significantly exceeds the initial number of carrots (`n`), leading to a high number of extra pieces needed (i.e., `k - n` is large), the program may enter a slow path due to repeated adjustments and recalculations."
  
```cpp
void check_carrot_split_invariant(int n, int k) {
    int requiredSplits = k - n;
    if (requiredSplits > 10000) {  // arbitrary threshold for a large number of splits
        cerr << "Warning: Performance bottleneck condition triggered - excessive carrot splits required!" << endl;
        abort();
    }
}
```

#### Invariant 2: Uneven Distribution of Carrot Lengths
- **Natural Language:** "When there is a large disparity in carrot lengths, especially with very large carrots that need to be divided into many pieces, performance may degrade as the program spends more time recalculating optimal divisions."

```cpp
void check_carrot_length_invariant(const vector<int>& carrots) {
    int maxCarrotLength = *max_element(carrots.begin(), carrots.end());
    if (maxCarrotLength > 500000) {  // threshold for large carrots
        cerr << "Warning: Performance bottleneck condition triggered - very large carrot length!" << endl;
        abort();
    }
}
```

#### Invariant 3: Excessive Re-Heap Operations
- **Natural Language:** "The program may slow down if there is a high frequency of re-insertions into the multiset, which occurs when many carrots require additional piece allocations beyond simple equal divisions."

```cpp
void check_reheap_operations(int need) {
    if (need > 10000) {  // threshold indicating many re-heap operations needed
        cerr << "Warning: Performance bottleneck condition triggered - excessive re-heap operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checker functions into the original C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;

// Checker functions for performance-characterizing invariants
void check_carrot_split_invariant(int n, int k) {
    int requiredSplits = k - n;
    if (requiredSplits > 10000) {  // arbitrary threshold for a large number of splits
        cerr << "Warning: Performance bottleneck condition triggered - excessive carrot splits required!" << endl;
        abort();
    }
}

void check_carrot_length_invariant(const vector<int>& carrots) {
    int maxCarrotLength = *max_element(carrots.begin(), carrots.end());
    if (maxCarrotLength > 500000) {  // threshold for large carrots
        cerr << "Warning: Performance bottleneck condition triggered - very large carrot length!" << endl;
        abort();
    }
}

void check_reheap_operations(int need) {
    if (need > 10000) {  // threshold indicating many re-heap operations needed
        cerr << "Warning: Performance bottleneck condition triggered - excessive re-heap operations!" << endl;
        abort();
    }
}

template <typename T>
void smax(T &a, T b) {
  if (a < b) a = b;
}
template <typename T>
void smin(T &a, T b) {
  if (a > b) a = b;
}
template <typename T>
T pw(T a, T b) {
  T p = 1, one = 1;
  while (b) {
    if (b & one) p = p * a;
    a = a * a;
    b >>= 1;
  }
  return p;
}
template <typename T>
T pwm(T a, T b, T md = mod) {
  T p = 1, one = 1;
  while (b) {
    if (b & one) p = p * a % md;
    a = a * a % md;
    b >>= 1;
  }
  return p;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &it : v) is >> it;
  return is;
}
long long cont(int vl, int p) {
  int q = vl / p;
  int r = vl % p;
  int Q = q + 1;
  return 1ll * (p - r) * q * q + 1ll * r * Q * Q;
}
struct car {
  int val, p;
  car(int val_, int p_) : val{val_}, p{p_} {}
  long long ch() const { return cont(val, p) - cont(val, p + 1); }
  bool operator<(const car &rhs) const { return ch() > rhs.ch(); }
};
void solve() {
  int n, k;
  cin >> n >> k;

  check_carrot_split_invariant(n, k);  // Check invariants before starting computations

  vector<int> carrots(n);
  cin >> carrots;
  check_carrot_length_invariant(carrots);

  multiset<car> st;
  for (int i = 0; i < n; ++i) {
    st.insert(car{carrots[i], 1});
  }
  int need = k - n;
  
  check_reheap_operations(need);  // Check before entering the while loop

  while (need != 0) {
    auto b = *st.begin();
    st.erase(st.begin());
    ++b.p;
    st.insert(b);
    --need;
  }
  long long ans = 0;
  for (auto &it : st) ans += cont(it.val, it.p);
  cout << ans << '\n';
}

int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  solve();
}
```

### Explanation
- The `check_carrot_split_invariant` is placed after reading `n` and `k` to ensure the condition is checked before any splitting logic.
- The `check_carrot_length_invariant` is called after reading the carrot lengths to check for very large carrots.
- The `check_reheap_operations` is placed just before entering the loop that adjusts carrot splits, as this is where excessive re-heap operations would occur.

These checks help identify performance bottlenecks during runtime and assist in debugging potential slow scenarios.

