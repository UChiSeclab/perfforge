system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1000100;
const int INF = (1 << 29);
long long dp[2][maxn];
long long a[maxn];
int n;
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++) {
    scanf("%I64d", &a[i]);
  }
  a[0] = a[n + 1] = 1;
  memset(dp, 0, sizeof(dp));
  for (int i = 1; i <= n; i++) {
    dp[0][i] = min(dp[0][i - 1] + 1, a[i]);
  }
  for (int i = n; i >= 0; i--) {
    dp[1][i] = min(dp[1][i + 1] + 1, a[i]);
  }
  long long ans = -INF;
  for (int i = 1; i <= n; i++) ans = max(ans, min(dp[0][i], dp[1][i]));
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

170
1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 2 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1000100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (1 << 29); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2][maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long a[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 171, fast_hit_count: 3 */
    scanf("%I64d", &a[i]); /* line 11 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  a[0] = a[n + 1] = 1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0, sizeof(dp)); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 15 slow_hit_count: 171, fast_hit_count: 3 */
    dp[0][i] = min(dp[0][i - 1] + 1, a[i]); /* line 16 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= 0; i--) { /* line 18 slow_hit_count: 172, fast_hit_count: 4 */
    dp[1][i] = min(dp[1][i + 1] + 1, a[i]); /* line 19 slow_hit_count: 171, fast_hit_count: 3 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = -INF; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) ans = max(ans, min(dp[0][i], dp[1][i])); /* line 22 slow_hit_count: 171, fast_hit_count: 3 */
  cout << ans << endl; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, the following lines show significantly more hits during the slow input run compared to the fast input:

1. **Loop for initializing `dp[0]`:** 
   - Line 15: `for (int i = 1; i <= n; i++)`
   - Line 16: `dp[0][i] = min(dp[0][i - 1] + 1, a[i]);`
   - *Hit counts:* 171 for line 15 and 170 for line 16 in the slow input, compared to 3 and 2 in the fast input.
   
2. **Loop for initializing `dp[1]`:** 
   - Line 18: `for (int i = n; i >= 0; i--)`
   - Line 19: `dp[1][i] = min(dp[1][i + 1] + 1, a[i]);`
   - *Hit counts:* 172 for line 18 and 171 for line 19 in the slow input, compared to 4 and 3 in the fast input.

3. **Loop for calculating `ans`:**
   - Line 22: `for (int i = 1; i <= n; i++) ans = max(ans, min(dp[0][i], dp[1][i]));`
   - *Hit counts:* 171 in slow input compared to 3 in fast input.

### Phase 2: Derive Performance-Characterizing Invariants

After examining the significant difference in hit counts, we note that the loops are executed more frequently in the slow input, which is directly correlated with the size of the input, `n`. The primary slowdown appears to be due to the increased number of iterations over the input size, affecting the performance notably when `n` is large. Here are some performance-characterizing invariants:

1. **Invariant on Input Size:**
   - Natural Language: "When the number of towers `n` approaches the upper limit of the input constraint, the loops over `n` iterations become a significant factor in slowing down the program."
   - This invariant suggests that the algorithm's complexity is linearly tied to the number of towers, and performance degrades as `n` grows, especially close to the constraint limit of \( n \leq 100,000 \).

2. **Invariant on Boundary Block Height Variability:**
   - Natural Language: "If the heights of the towers vary significantly, especially with frequent small peaks and valleys, the number of operations to destroy all towers increases, leading to more iterations in boundary block calculations."
   - This invariant points out that fluctuations in tower heights lead to more boundary block destruction phases, thereby increasing the number of iterations in both `dp` initialization loops.

3. **Invariant on High Peak Towers:**
   - Natural Language: "If there are significant peaks (towers much taller than their neighbors), the need to check and manage these peaks in calculations may increase the operational complexity."
   - This suggests that very tall towers compared to others can skew the `dp` calculations, leading to increased overhead and potential slowdowns.

These invariants help capture the conditions under which the current implementation slows down, based on the code analysis and hit count information.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, here is the C++ code to check these conditions at runtime:

```cpp
// Check if the number of towers is close to the upper limit
void check_input_size_invariant(int n) {
    if (n > 100000) { // n is close to the upper constraint limit
        cerr << "Warning: Performance bottleneck condition triggered - large number of towers!" << endl;
        abort();
    }
}

// Check if there are frequent small peaks and valleys causing more operations
void check_height_variability_invariant(const vector<long long>& heights) {
    int variability_count = 0;
    for (size_t i = 1; i < heights.size() - 1; ++i) {
        if ((heights[i] > heights[i - 1] && heights[i] > heights[i + 1]) ||
            (heights[i] < heights[i - 1] && heights[i] < heights[i + 1])) {
            variability_count++;
        }
    }
    if (variability_count > heights.size() / 2) { // Heuristic condition for variability
        cerr << "Warning: Performance bottleneck condition triggered - high height variability!" << endl;
        abort();
    }
}

// Check for the presence of significantly tall peaks
void check_high_peak_invariant(const vector<long long>& heights) {
    long long max_height = *max_element(heights.begin(), heights.end());
    long long average_height = accumulate(heights.begin(), heights.end(), 0LL) / heights.size();
  
    if (max_height > 2 * average_height) { // Heuristic for a significant peak
        cerr << "Warning: Performance bottleneck condition triggered - presence of high peaks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Below is the instrumented C++ code with the appropriate checks added at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1000100;
const int INF = (1 << 29);
long long dp[2][maxn];
long long a[maxn];
int n;

// Check if the number of towers is close to the upper limit
void check_input_size_invariant(int n) {
    if (n > 100000) { // n is close to the upper constraint limit
        cerr << "Warning: Performance bottleneck condition triggered - large number of towers!" << endl;
        abort();
    }
}

// Check if there are frequent small peaks and valleys causing more operations
void check_height_variability_invariant(const vector<long long>& heights) {
    int variability_count = 0;
    for (size_t i = 1; i < heights.size() - 1; ++i) {
        if ((heights[i] > heights[i - 1] && heights[i] > heights[i + 1]) ||
            (heights[i] < heights[i - 1] && heights[i] < heights[i + 1])) {
            variability_count++;
        }
    }
    if (variability_count > heights.size() / 2) { // Heuristic condition for variability
        cerr << "Warning: Performance bottleneck condition triggered - high height variability!" << endl;
        abort();
    }
}

// Check for the presence of significantly tall peaks
void check_high_peak_invariant(const vector<long long>& heights) {
    long long max_height = *max_element(heights.begin(), heights.end());
    long long average_height = accumulate(heights.begin(), heights.end(), 0LL) / heights.size();
  
    if (max_height > 2 * average_height) { // Heuristic for a significant peak
        cerr << "Warning: Performance bottleneck condition triggered - presence of high peaks!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    check_input_size_invariant(n); // Check input size

    vector<long long> heights(n);
    for (int i = 1; i <= n; i++) {
        scanf("%I64d", &heights[i-1]);
    }
    
    check_height_variability_invariant(heights); // Check for height variability
    check_high_peak_invariant(heights); // Check for high peaks

    a[0] = a[n + 1] = 1;
    memset(dp, 0, sizeof(dp));
    
    for (int i = 1; i <= n; i++) {
        dp[0][i] = min(dp[0][i - 1] + 1, heights[i - 1]);
    }
    
    for (int i = n; i >= 0; i--) {
        dp[1][i] = min(dp[1][i + 1] + 1, heights[i - 1]);
    }
    
    long long ans = -INF;
    for (int i = 1; i <= n; i++) ans = max(ans, min(dp[0][i], dp[1][i]));
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Input Size Check:** This checks if `n` is approaching the upper limit of 100,000, stopping execution if it is. This check is inserted immediately after reading the input size.
- **Height Variability Check:** This examines the list of heights for frequent peaks and valleys, indicating increased operation counts. This check occurs after reading all tower heights.
- **High Peak Check:** This checks for towers significantly taller than the average, which could lead to increased operations. It’s placed after the heights are read and before the main computation loops.

