system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int tree[100001 * 10];
long long int lazy[100001 * 10];
long long int arr[100001];
void build_tree(int node, int a, int b) {
  if (a > b) return;
  if (a == b) {
    tree[node] = arr[a] + a;
    return;
  }
  build_tree(node * 2, a, (a + b) / 2);
  build_tree(node * 2 + 1, 1 + (a + b) / 2, b);
  tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}
void update_tree(int node, int a, int b, int i, int j, int value) {
  if (lazy[node] != 0) {
    tree[node] += lazy[node];
    if (a != b) {
      lazy[node * 2] += lazy[node];
      lazy[node * 2 + 1] += lazy[node];
    }
    lazy[node] = 0;
  }
  if (a > b || a > j || b < i) return;
  if (a >= i && b <= j) {
    tree[node] += value;
    if (a != b) {
      lazy[node * 2] += value;
      lazy[node * 2 + 1] += value;
    }
    return;
  }
  update_tree(node * 2, a, (a + b) / 2, i, j, value);
  update_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j, value);
  tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}
int query_tree(int node, int a, int b, int i, int j) {
  if (a > b || a > j || b < i) return 1000000007;
  if (lazy[node] != 0) {
    tree[node] += lazy[node];
    if (a != b) {
      lazy[node * 2] += lazy[node];
      lazy[node * 2 + 1] += lazy[node];
    }
    lazy[node] = 0;
  }
  if (a >= i && b <= j) return tree[node];
  int q1 = query_tree(node * 2, a, (a + b) / 2, i, j);
  int q2 = query_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j);
  int res = min(q1, q2);
  return res;
}
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) scanf("%lld", &arr[i]);
  arr[0] = arr[n + 1] = 0;
  build_tree(1, 0, n + 1);
  int ans = 0;
  for (int i = 1; i <= n; i++) {
    update_tree(1, 0, n + 1, 0, i - 1, 1);
    update_tree(1, 0, n + 1, i, n + 1, -1);
    ans = max(ans, query_tree(1, 0, n + 1, 0, n + 1));
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

170
1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 2 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 2 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 2 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int tree[100001 * 10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int lazy[100001 * 10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int arr[100001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void build_tree(int node, int a, int b) { /* line 6 slow_hit_count: 343, fast_hit_count: 7 */
  if (a > b) return; /* line 7 slow_hit_count: 343, fast_hit_count: 7 */
  if (a == b) { /* line 8 slow_hit_count: 343, fast_hit_count: 7 */
    tree[node] = arr[a] + a; /* line 9 slow_hit_count: 172, fast_hit_count: 4 */
    return; /* line 10 slow_hit_count: 172, fast_hit_count: 4 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  build_tree(node * 2, a, (a + b) / 2); /* line 12 slow_hit_count: 171, fast_hit_count: 3 */
  build_tree(node * 2 + 1, 1 + (a + b) / 2, b); /* line 13 slow_hit_count: 171, fast_hit_count: 3 */
  tree[node] = min(tree[node * 2], tree[node * 2 + 1]); /* line 14 slow_hit_count: 171, fast_hit_count: 3 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void update_tree(int node, int a, int b, int i, int j, int value) { /* line 16 slow_hit_count: 4796, fast_hit_count: 16 */
  if (lazy[node] != 0) { /* line 17 slow_hit_count: 4796, fast_hit_count: 16 */
    tree[node] += lazy[node]; /* line 18 slow_hit_count: 324, fast_hit_count: 0 */
    if (a != b) { /* line 19 slow_hit_count: 324, fast_hit_count: 0 */
      lazy[node * 2] += lazy[node]; /* line 20 slow_hit_count: 157, fast_hit_count: 0 */
      lazy[node * 2 + 1] += lazy[node]; /* line 21 slow_hit_count: 157, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    lazy[node] = 0; /* line 23 slow_hit_count: 324, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b || a > j || b < i) return; /* line 25 slow_hit_count: 4796, fast_hit_count: 16 */
  if (a >= i && b <= j) { /* line 26 slow_hit_count: 3512, fast_hit_count: 11 */
    tree[node] += value; /* line 27 slow_hit_count: 1284, fast_hit_count: 5 */
    if (a != b) { /* line 28 slow_hit_count: 1284, fast_hit_count: 5 */
      lazy[node * 2] += value; /* line 29 slow_hit_count: 1070, fast_hit_count: 3 */
      lazy[node * 2 + 1] += value; /* line 30 slow_hit_count: 1070, fast_hit_count: 3 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 32 slow_hit_count: 1284, fast_hit_count: 5 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  update_tree(node * 2, a, (a + b) / 2, i, j, value); /* line 34 slow_hit_count: 2228, fast_hit_count: 6 */
  update_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j, value); /* line 35 slow_hit_count: 2228, fast_hit_count: 6 */
  tree[node] = min(tree[node * 2], tree[node * 2 + 1]); /* line 36 slow_hit_count: 2228, fast_hit_count: 6 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int query_tree(int node, int a, int b, int i, int j) { /* line 38 slow_hit_count: 170, fast_hit_count: 2 */
  if (a > b || a > j || b < i) return 1000000007; /* line 39 slow_hit_count: 170, fast_hit_count: 2 */
  if (lazy[node] != 0) { /* line 40 slow_hit_count: 170, fast_hit_count: 2 */
    tree[node] += lazy[node]; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    if (a != b) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      lazy[node * 2] += lazy[node]; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      lazy[node * 2 + 1] += lazy[node]; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    lazy[node] = 0; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (a >= i && b <= j) return tree[node]; /* line 48 slow_hit_count: 170, fast_hit_count: 2 */
  int q1 = query_tree(node * 2, a, (a + b) / 2, i, j); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  int q2 = query_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  int res = min(q1, q2); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%lld", &arr[i]); /* line 57 slow_hit_count: 171, fast_hit_count: 3 */
  arr[0] = arr[n + 1] = 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  build_tree(1, 0, n + 1); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 61 slow_hit_count: 171, fast_hit_count: 3 */
    update_tree(1, 0, n + 1, 0, i - 1, 1); /* line 62 slow_hit_count: 170, fast_hit_count: 2 */
    update_tree(1, 0, n + 1, i, n + 1, -1); /* line 63 slow_hit_count: 170, fast_hit_count: 2 */
    ans = max(ans, query_tree(1, 0, n + 1, 0, n + 1)); /* line 64 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The `build_tree`, `update_tree`, and `query_tree` functions are called significantly more times during the slow run compared to the fast run.
   - Particularly, `update_tree` and `query_tree` have high hit counts in the slow input, indicating these functions may be the source of inefficiency.
   
2. **Pinpointing Specific Lines or Functions:**
   - `build_tree` (lines 6-14): This function is called extensively, especially line 12 and 13 which are recursive calls. In the context of a large number of elements, these recursive calls can become expensive.
   - `update_tree` (lines 16-36): This function is hit often, especially lines involved with propagation of values (lines 27-30). This suggests frequent updates to the segment tree which can accumulate overhead.
   - `query_tree` (lines 38-52): Though not deeply detailed in the hit counts, the entire segment tree querying process (especially the decision branching and lazy propagation) contributes to delays.

3. **Inferring Data Structure and Control Flow Interactions:**
   - The segment tree data structure is being used to perform range updates and queries, which involves lazy propagation. The inefficiency likely arises because each operation on the towers (reducing heights, identifying the maximum height) involves multiple updates and queries, which are recursively expensive for large inputs.
   - As `n` increases, the number of operations grows, leading to increased recursive depth and frequent propagation of lazy values, which adds overhead.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Invariant #1: Recursive Segment Tree Operations**
   - **Natural Language Description:** "When the number of towers `n` is large, recursive operations on segment trees, especially updates and queries, can become expensive due to increased recursive depth and frequent lazy value propagation."

2. **Invariant #2: High Update Frequency**
   - **Natural Language Description:** "If multiple updates are performed frequently on the segment tree within a short span, especially in an iterative loop, it may cause significant performance degradation due to propagation overhead."

3. **Invariant #3: Input Patterns with Repeated Heights**
   - **Natural Language Description:** "For inputs where tower heights repeatedly fluctuate, and with close values among neighbors, the number of operations (updates and queries) required increases, which can lead to slower performance."

4. **Invariant #4: Segment Tree Size Constraints**
   - **Natural Language Description:** "When `n` approaches the upper input constraint (close to 100,000), the size and depth of the segment tree operations may induce considerable slowdown due to exhaustive tree traversal and maintenance."

These invariants capture scenarios that can lead to a slowdown, emphasizing recursive function calls, lazy propagation in segment tree operations, and input patterns that demand frequent updates. These conditions are abstracted in terms of input size and characteristics rather than specific numerical values from the slow input, ensuring they are applicable to a broader range of possible future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Below are the implementations of the performance-characterizing invariants inferred earlier, translated into C++ checker code:

1. **Invariant #1: Recursive Segment Tree Operations**
   ```cpp
   void check_recursive_operations_invariant(int n, int recursiveDepth) {
       if (n > 100000 && recursiveDepth > log2(n) + 10) {
           cerr << "Warning: Performance bottleneck condition triggered - recursive operations on segment trees are too deep!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: High Update Frequency**
   ```cpp
   void check_update_frequency_invariant(int updateCount, int threshold) {
       if (updateCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - high frequency of updates on segment tree!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Input Patterns with Repeated Heights**
   ```cpp
   void check_repeated_heights_invariant(const vector<int>& heights) {
       int maxCount = 0;
       unordered_map<int, int> heightFrequency;
       for (int height : heights) {
           heightFrequency[height]++;
           maxCount = max(maxCount, heightFrequency[height]);
       }
       if (maxCount > heights.size() / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - repeated heights pattern in input!" << endl;
           abort();
       }
   }
   ```

4. **Invariant #4: Segment Tree Size Constraints**
   ```cpp
   void check_segment_tree_size_invariant(int n) {
       if (n > 100000) {
           cerr << "Warning: Performance bottleneck condition triggered - segment tree size constraint exceeded!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

```cpp
#include <bits/stdc++.h>
using namespace std;

long long int tree[100001 * 10];
long long int lazy[100001 * 10];
long long int arr[100001];

// Checkers
void check_recursive_operations_invariant(int n, int recursiveDepth) {
    if (n > 100000 && recursiveDepth > log2(n) + 10) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive operations on segment trees are too deep!" << endl;
        abort();
    }
}

void check_update_frequency_invariant(int updateCount, int threshold) {
    if (updateCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of updates on segment tree!" << endl;
        abort();
    }
}

void check_repeated_heights_invariant(const vector<int>& heights) {
    int maxCount = 0;
    unordered_map<int, int> heightFrequency;
    for (int height : heights) {
        heightFrequency[height]++;
        maxCount = max(maxCount, heightFrequency[height]);
    }
    if (maxCount > heights.size() / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated heights pattern in input!" << endl;
        abort();
    }
}

void check_segment_tree_size_invariant(int n) {
    if (n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - segment tree size constraint exceeded!" << endl;
        abort();
    }
}

void build_tree(int node, int a, int b, int& recursiveDepth) {
    check_recursive_operations_invariant(b - a + 1, recursiveDepth);

    if (a > b) return;
    if (a == b) {
        tree[node] = arr[a] + a;
        return;
    }
    recursiveDepth++;
    build_tree(node * 2, a, (a + b) / 2, recursiveDepth);
    build_tree(node * 2 + 1, 1 + (a + b) / 2, b, recursiveDepth);
    recursiveDepth--;
    tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

void update_tree(int node, int a, int b, int i, int j, int value, int& updateCount) {
    check_update_frequency_invariant(updateCount, 1000); // Arbitrary threshold for demo purposes
    updateCount++;

    if (lazy[node] != 0) {
        tree[node] += lazy[node];
        if (a != b) {
            lazy[node * 2] += lazy[node];
            lazy[node * 2 + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
    if (a > b || a > j || b < i) return;
    if (a >= i && b <= j) {
        tree[node] += value;
        if (a != b) {
            lazy[node * 2] += value;
            lazy[node * 2 + 1] += value;
        }
        return;
    }
    update_tree(node * 2, a, (a + b) / 2, i, j, value, updateCount);
    update_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j, value, updateCount);
    tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

int query_tree(int node, int a, int b, int i, int j) {
    if (a > b || a > j || b < i) return 1000000007;
    if (lazy[node] != 0) {
        tree[node] += lazy[node];
        if (a != b) {
            lazy[node * 2] += lazy[node];
            lazy[node * 2 + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
    if (a >= i && b <= j) return tree[node];
    int q1 = query_tree(node * 2, a, (a + b) / 2, i, j);
    int q2 = query_tree(1 + node * 2, 1 + (a + b) / 2, b, i, j);
    int res = min(q1, q2);
    return res;
}

int main() {
    int n;
    scanf("%d", &n);
    check_segment_tree_size_invariant(n);

    vector<int> heights(n);
    for (int i = 1; i <= n; i++) {
        scanf("%lld", &arr[i]);
        heights[i - 1] = arr[i];
    }
    arr[0] = arr[n + 1] = 0;
    check_repeated_heights_invariant(heights);

    int recursiveDepth = 0;
    build_tree(1, 0, n + 1, recursiveDepth);

    int ans = 0;
    int updateCount = 0;
    for (int i = 1; i <= n; i++) {
        update_tree(1, 0, n + 1, 0, i - 1, 1, updateCount);
        update_tree(1, 0, n + 1, i, n + 1, -1, updateCount);
        ans = max(ans, query_tree(1, 0, n + 1, 0, n + 1));
    }
    printf("%d\n", ans);
    return 0;
}
```

### Explanation of Check Placement:

1. **Recursive Operations Check:** Added in `build_tree` to monitor recursive depth.
2. **High Update Frequency Check:** Added in `update_tree` to capture excessive update calls.
3. **Repeated Heights Check:** Added after reading inputs to capture patterns of repeated heights.
4. **Segment Tree Size Constraint Check:** Added in `main` after reading input size to ensure segment tree isn't too large.

These checks are designed to intervene when a performance bottleneck is likely, based on the invariants previously identified.

