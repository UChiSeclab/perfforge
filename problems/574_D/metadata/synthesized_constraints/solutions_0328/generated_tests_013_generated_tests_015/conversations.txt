system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  cin >> n;
  if (n == 1) {
    cout << 1 << endl;
    return 0;
  }
  vector<int> ans(n, 1000000000);
  priority_queue<pair<int, int> > pq;
  for (int i = 0; i < n; i++) {
    int h;
    cin >> h;
    pq.push(make_pair(h * -1, i));
  }
  pq.push(make_pair(-1, 0));
  pq.push(make_pair(-1, n - 1));
  while (!pq.empty()) {
    int node = pq.top().second;
    int value = pq.top().first * -1;
    pq.pop();
    if (ans[node] <= value) continue;
    ans[node] = value;
    if (node + 1 < n) pq.push(make_pair((value + 1) * -1, node + 1));
    if (node - 1 > -1) pq.push(make_pair((value + 1) * -1, node - 1));
  }
  int as = -1;
  for (int i = 0; i < n; i++) as = max(ans[i], as);
  cout << as << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

170
1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 2 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1) { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 << endl; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> ans(n, 1000000000); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  priority_queue<pair<int, int> > pq; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 12 slow_hit_count: 171, fast_hit_count: 3 */
    int h; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> h; /* line 14 slow_hit_count: 170, fast_hit_count: 2 */
    pq.push(make_pair(h * -1, i)); /* line 15 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  pq.push(make_pair(-1, 0)); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  pq.push(make_pair(-1, n - 1)); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  while (!pq.empty()) { /* line 19 slow_hit_count: 511, fast_hit_count: 7 */
    int node = pq.top().second; /* line 20 slow_hit_count: 510, fast_hit_count: 6 */
    int value = pq.top().first * -1; /* line 21 slow_hit_count: 510, fast_hit_count: 6 */
    pq.pop(); /* line 22 slow_hit_count: 510, fast_hit_count: 6 */
    if (ans[node] <= value) continue; /* line 23 slow_hit_count: 510, fast_hit_count: 6 */
    ans[node] = value; /* line 24 slow_hit_count: 170, fast_hit_count: 2 */
    if (node + 1 < n) pq.push(make_pair((value + 1) * -1, node + 1)); /* line 25 slow_hit_count: 170, fast_hit_count: 2 */
    if (node - 1 > -1) pq.push(make_pair((value + 1) * -1, node - 1)); /* line 26 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  int as = -1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) as = max(ans[i], as); /* line 29 slow_hit_count: 171, fast_hit_count: 3 */
  cout << as << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - **Line 19 (`while (!pq.empty())`)**: This line is executed 511 times for the slow input compared to 7 times for the fast input.
   - **Lines 20-23 (inside the loop)**: Also executed 510 times for the slow input compared to 6 times for the fast input.

2. **Pinpointing Significant Lines:**
   - The repeated execution of the loop (`while (!pq.empty())`) and the operations inside it (lines 20 through 26) indicate that these lines are significantly more active in the slow input.
   - The high hit count on line 23 (`if (ans[node] <= value) continue;`) suggests frequent checking and updating of conditions, leading to potential inefficiencies.

3. **Data Structures and Loop Interactions:**
   - The program uses a priority queue to manage the destruction sequences of blocks. The inefficiencies seem to arise from repeated insertions and deletions in the priority queue, especially when managing towers with closely spaced heights.
   - The repeated pushing and popping of elements in the priority queue is likely exacerbating performance issues, as seen by the 510 iterations through the loop for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Priority Queue Operations**
   - **Natural Language Description:**
     "If there are many alternating or closely spaced tower heights, the priority queue will experience frequent operations, leading to slow performance."
   - **Explanation:**
     The program repeatedly processes heights, inserting and removing them from the priority queue. If heights fluctuate significantly or towers have alternating patterns, this leads to many push/pop operations, causing the loop to run more times.

2. **Invariant 2: Dense Tower Configurations**
   - **Natural Language Description:**
     "When the tower heights are small and vary frequently, especially within the same neighborhood, the destruction process involves many operations due to boundary recalculations."
   - **Explanation:**
     Small variations in tower heights cause each iteration to affect multiple towers, increasing the number of boundary recalculations. This is exacerbated when heights are low and vary frequently.

3. **Invariant 3: Large Sequential Blocks**
   - **Natural Language Description:**
     "If there are long sequences of similarly high towers, the algorithm may perform excessive boundary checks before reducing height, increasing operation counts."
   - **Explanation:**
     Long sequences of similar heights lead to a large number of boundary blocks that need destruction in each iteration, increasing total operation counts.

4. **Invariant 4: Priority Queue Management Overhead**
   - **Natural Language Description:**
     "Extensive use of the priority queue, with frequent insertions and deletions, may lead to performance degradation when handling sequential operations on numerous elements."
   - **Explanation:**
     The priority queue requires management of order through insertion and deletion. Frequent use within the loop with high element counts leads to overhead that slows execution.

### Conclusion
These invariants highlight situations related to the input structure and the program's use of certain data structures (like the priority queue) that can lead to inefficiencies, particularly in handling edge cases of repetitive or closely varying input patterns. By understanding these patterns, we can predict and mitigate scenarios that lead to slow performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets implementing the invariants identified in Phase 2:

1. **Invariant 1: High Priority Queue Operations**

```cpp
void check_priority_queue_operations(int numOperations, int threshold) {
    if (numOperations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive priority queue operations!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Dense Tower Configurations**

```cpp
void check_dense_tower_configurations(const vector<int>& heights, int threshold) {
    int fluctuations = 0;
    for (size_t i = 1; i < heights.size(); ++i) {
        if (heights[i] != heights[i-1]) {
            ++fluctuations;
        }
    }
    if (fluctuations > threshold) {
        cerr << "Warning: Performance bottleneck due to dense tower configurations with frequent height variations!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Large Sequential Blocks**

```cpp
void check_large_sequential_blocks(const vector<int>& heights, int threshold) {
    int sequenceLength = 1;
    for (size_t i = 1; i < heights.size(); ++i) {
        if (heights[i] == heights[i-1]) {
            ++sequenceLength;
        } else {
            if (sequenceLength > threshold) {
                cerr << "Warning: Performance bottleneck due to large sequential block of similar heights!" << endl;
                abort();
            }
            sequenceLength = 1;
        }
    }
    if (sequenceLength > threshold) {
        cerr << "Warning: Performance bottleneck due to large sequential block of similar heights at the end!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Here's the modified C++ code with integrated runtime checks for the identified performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_priority_queue_operations(int numOperations, int threshold) {
    if (numOperations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive priority queue operations!" << endl;
        abort();
    }
}

void check_dense_tower_configurations(const vector<int>& heights, int threshold) {
    int fluctuations = 0;
    for (size_t i = 1; i < heights.size(); ++i) {
        if (heights[i] != heights[i-1]) {
            ++fluctuations;
        }
    }
    if (fluctuations > threshold) {
        cerr << "Warning: Performance bottleneck due to dense tower configurations with frequent height variations!" << endl;
        abort();
    }
}

void check_large_sequential_blocks(const vector<int>& heights, int threshold) {
    int sequenceLength = 1;
    for (size_t i = 1; i < heights.size(); ++i) {
        if (heights[i] == heights[i-1]) {
            ++sequenceLength;
        } else {
            if (sequenceLength > threshold) {
                cerr << "Warning: Performance bottleneck due to large sequential block of similar heights!" << endl;
                abort();
            }
            sequenceLength = 1;
        }
    }
    if (sequenceLength > threshold) {
        cerr << "Warning: Performance bottleneck due to large sequential block of similar heights at the end!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> heights(n);
    for (int i = 0; i < n; i++) {
        cin >> heights[i];
    }
    
    // Insert checks for performance bottlenecks
    check_dense_tower_configurations(heights, 50); // Arbitrary threshold for frequent variations
    check_large_sequential_blocks(heights, 50); // Arbitrary threshold for large sequences

    if (n == 1) {
        cout << 1 << endl;
        return 0;
    }

    vector<int> ans(n, 1000000000);
    priority_queue<pair<int, int>> pq;
    for (int i = 0; i < n; i++) {
        pq.push(make_pair(heights[i] * -1, i));
    }
    pq.push(make_pair(-1, 0));
    pq.push(make_pair(-1, n - 1));

    int operationCount = 0; // Count priority queue operations
    while (!pq.empty()) {
        int node = pq.top().second;
        int value = pq.top().first * -1;
        pq.pop();
        operationCount++;
        if (ans[node] <= value) continue;
        ans[node] = value;
        if (node + 1 < n) pq.push(make_pair((value + 1) * -1, node + 1));
        if (node - 1 > -1) pq.push(make_pair((value + 1) * -1, node - 1));
    }
    check_priority_queue_operations(operationCount, 300); // Arbitrary threshold for excessive operations

    int as = -1;
    for (int i = 0; i < n; i++) as = max(ans[i], as);
    cout << as << endl;
    return 0;
}
```

### Explanation:

1. **Checker Function Integration:**
   - Each checker function is integrated at appropriate points in the code. The priority queue operation count is monitored during the main loop.

2. **Threshold Values:**
   - Thresholds are set arbitrarily for illustrative purposes and should be adjusted based on practical performance observations or constraints.

3. **Comments:**
   - Comments are added to explain each check and what performance bottleneck it addresses.

