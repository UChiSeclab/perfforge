system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double EPS = 1e-9;
const double PI = 3.14159265359;
vector<long long> primes;
void GeneratingPrimes(int top) {
  vector<bool> p(top + 1, 1);
  p[0] = p[1] = 0;
  for (int i = 2; i <= sqrt(top); i++) {
    if (p[i]) {
      for (int j = i * i; j <= top; j += i) {
        p[j] = 0;
      }
    }
  }
  for (int i = 0; i < top + 1; i++)
    if (p[i]) primes.push_back(i);
}
long long gcd(long long a, long long b) { return (b == 0) ? a : gcd(b, a % b); }
long long lcm(long long a, long long b) { return (a * b) / gcd(a, b); }
void EXTgcd(long long a, long long b, int& x0, int& y0) {
  if (b == 0) {
    x0 = 1, y0 = 0;
    return;
  }
  EXTgcd(b, a % b, x0, y0);
  long long x1 = y0;
  long long y1 = x0 - (a / b) * y0;
  x0 = x1;
  y0 = y1;
}
long long power(long long n, long long p, long long mod) {
  if (!p) return 1;
  long long ans = 1;
  while (p > 1) {
    if (p & 1) ans = (ans * n) % mod;
    n = (n * n) % mod;
    p /= 2;
  }
  return (ans * n) % mod;
}
double dist(double a, double b, double x, double y) {
  return sqrt(pow(a - x, 2) + pow(b - y, 2));
}
double dist3(double a, double b, double c, double x, double y, double z) {
  return sqrt(pow(a - x, 2) + pow(b - y, 2) + pow(c - z, 2));
}
int xadd[9] = {1, -1, 0, 1, -1, 0, 1, -1, 0};
int yadd[9] = {1, -1, 0, -1, 0, 1, 0, 1, -1};
int xx[4] = {0, 1, 0, -1};
int yy[4] = {1, 0, -1, 0};
long long const N = 1e5 + 10;
long long const mod = 1e9 + 7;
long long const INF = 1e9;
int n, a[N];
bool chk(int mid) {
  set<int> s, ns;
  for (int i = 0; i < n; i++) s.insert(i), ns.insert(-i);
  for (int i = 0; i < n; i++)
    if (mid >= a[i]) {
      int r = mid - a[i];
      auto it = s.lower_bound(i);
      while (it != s.end()) {
        int z = *it;
        if (z - i <= r) {
          auto x = it++;
          s.erase(x);
          if (ns.count(-z)) ns.erase(-z);
        } else
          break;
      }
      it = ns.lower_bound(-i);
      while (it != ns.end()) {
        int z = *it;
        if (i + z <= r) {
          auto x = it++;
          ns.erase(x);
          if (s.count(-z)) s.erase(-z);
        } else
          break;
      }
    }
  for (int x : s) {
    x++;
    if (x > mid && x <= n - mid) return 0;
  }
  return 1;
}
int main() {
  cin >> n;
  for (int i = 0; i < n; i++) scanf("%d", &a[i]);
  int lo = 1, hi = n, mid;
  while (lo <= hi) {
    mid = (lo + hi) / 2;
    if (chk(mid)) {
      hi = mid - 1;
    } else {
      lo = mid + 1;
    }
  }
  cout << hi + 1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

170
1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 1 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1


(G.2) Fast Input

5
1 2 3 2 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = 3.14159265359; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> primes; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void GeneratingPrimes(int top) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  vector<bool> p(top + 1, 1); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  p[0] = p[1] = 0; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i <= sqrt(top); i++) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (p[i]) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = i * i; j <= top; j += i) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
        p[j] = 0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < top + 1; i++) /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (p[i]) primes.push_back(i); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { return (b == 0) ? a : gcd(b, a % b); } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long a, long long b) { return (a * b) / gcd(a, b); } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void EXTgcd(long long a, long long b, int& x0, int& y0) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    x0 = 1, y0 = 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  EXTgcd(b, a % b, x0, y0); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  long long x1 = y0; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  long long y1 = x0 - (a / b) * y0; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  x0 = x1; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  y0 = y1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long n, long long p, long long mod) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  if (!p) return 1; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  while (p > 1) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (p & 1) ans = (ans * n) % mod; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    n = (n * n) % mod; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    p /= 2; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return (ans * n) % mod; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
double dist(double a, double b, double x, double y) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  return sqrt(pow(a - x, 2) + pow(b - y, 2)); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
double dist3(double a, double b, double c, double x, double y, double z) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  return sqrt(pow(a - x, 2) + pow(b - y, 2) + pow(c - z, 2)); /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
int xadd[9] = {1, -1, 0, 1, -1, 0, 1, -1, 0}; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
int yadd[9] = {1, -1, 0, -1, 0, 1, 0, 1, -1}; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
int xx[4] = {0, 1, 0, -1}; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
int yy[4] = {1, 0, -1, 0}; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
long long const N = 1e5 + 10; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
long long const mod = 1e9 + 7; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
long long const INF = 1e9; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[N]; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
bool chk(int mid) { /* line 56 slow_hit_count: 8, fast_hit_count: 3 */
  set<int> s, ns; /* line 57 slow_hit_count: 16, fast_hit_count: 6 */
  for (int i = 0; i < n; i++) s.insert(i), ns.insert(-i); /* line 58 slow_hit_count: 1368, fast_hit_count: 18 */
  for (int i = 0; i < n; i++) /* line 59 slow_hit_count: 1368, fast_hit_count: 18 */
    if (mid >= a[i]) { /* line 60 slow_hit_count: 1360, fast_hit_count: 15 */
      int r = mid - a[i]; /* line 61 slow_hit_count: 1327, fast_hit_count: 11 */
      auto it = s.lower_bound(i); /* line 62 slow_hit_count: 1327, fast_hit_count: 11 */
      while (it != s.end()) { /* line 63 slow_hit_count: 2654, fast_hit_count: 22 */
        int z = *it; /* line 64 slow_hit_count: 2489, fast_hit_count: 18 */
        if (z - i <= r) { /* line 65 slow_hit_count: 2489, fast_hit_count: 18 */
          auto x = it++; /* line 66 slow_hit_count: 1327, fast_hit_count: 11 */
          s.erase(x); /* line 67 slow_hit_count: 1327, fast_hit_count: 11 */
          if (ns.count(-z)) ns.erase(-z); /* line 68 slow_hit_count: 1327, fast_hit_count: 11 */
        } else /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 70 slow_hit_count: 1162, fast_hit_count: 7 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      it = ns.lower_bound(-i); /* line 72 slow_hit_count: 1327, fast_hit_count: 11 */
      while (it != ns.end()) { /* line 73 slow_hit_count: 1327, fast_hit_count: 11 */
        int z = *it; /* line 74 slow_hit_count: 217, fast_hit_count: 3 */
        if (i + z <= r) { /* line 75 slow_hit_count: 217, fast_hit_count: 3 */
          auto x = it++; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
          ns.erase(x); /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
          if (s.count(-z)) s.erase(-z); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        } else /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 80 slow_hit_count: 217, fast_hit_count: 3 */
      } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  for (int x : s) { /* line 83 slow_hit_count: 8, fast_hit_count: 3 */
    x++; /* line 84 slow_hit_count: 3, fast_hit_count: 2 */
    if (x > mid && x <= n - mid) return 0; /* line 85 slow_hit_count: 3, fast_hit_count: 2 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 87 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d", &a[i]); /* line 91 slow_hit_count: 171, fast_hit_count: 6 */
  int lo = 1, hi = n, mid; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  while (lo <= hi) { /* line 93 slow_hit_count: 9, fast_hit_count: 4 */
    mid = (lo + hi) / 2; /* line 94 slow_hit_count: 8, fast_hit_count: 3 */
    if (chk(mid)) { /* line 95 slow_hit_count: 8, fast_hit_count: 3 */
      hi = mid - 1; /* line 96 slow_hit_count: 5, fast_hit_count: 1 */
    } else { /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mid + 1; /* line 98 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  cout << hi + 1; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 103 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the provided hit count data, the following observations can be made:

1. **Set Operations**: Lines 58, 62-68, and 72-80 show significantly higher hit counts for the slow input compared to the fast input. These lines involve operations with sets (`s` and `ns`), including insertions, deletions, and lookups. The high hit count suggests a potential performance bottleneck in these operations due to the repeated manipulation of the set data structures.

2. **Loop Iterations**: The outer loop (line 59) and the nested loops (lines 63-71 and 73-81) have high iteration counts. It seems that the code frequently iterates over the elements of the towers, and for each element, it performs multiple set operations.

3. **Conditional Checks**: The conditional checks on lines 60 and 65-75 have significant hit counts. These checks determine which operations and iterations are executed, suggesting that the complexity of these checks could contribute to the slow performance.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following natural language performance invariants can be proposed:

1. **Invariant on Set Operations**: "If the number of unique operations on set data structures (such as insertions and lookups) is high relative to the number of towers, and these operations are nested within loops over the tower array, the program may experience significant slowdowns. This is especially true when each tower height is close to its neighboring towers, causing prolonged and repetitive boundary checks."

2. **Invariant on Recursion Depth**: "When the binary search depth (`mid` operations) leads to many recursive checks across nearly uniform tower heights, the function `chk` may perform excessive nested iterations over the tower indices, contributing to performance degradation."

3. **Invariant on Loop Complexity**: "If the loop iterates over the entire tower array and repeatedly evaluates set membership for each index, particularly when tower heights are close together requiring dense boundary checks, the performance can degrade. The repeated set operations within the loop may become costly as the size of the sets increase with operations."

4. **Invariant on Boundary and Internal Checks**: "In scenarios where many towers have similar heights and are closely packed, frequent boundary versus internal block checks can lead to inefficient Set operations, slowing down the destruction process."

These invariants highlight situations where performance may degrade, focusing on the combination of data structure operations and loops, particularly in scenarios where tower heights are similar or closely packed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Below are the checker functions in C++ that implement the performance-characterizing invariants derived in Phase 2.

```cpp
void check_set_operation_invariant(int n, int setOperations) {
    if (setOperations > 2 * n) { // Arbitrary threshold based on expensive set operations
        cerr << "Warning: Performance bottleneck condition triggered due to excessive set operations!" << endl;
        abort();
    }
}

void check_recursion_depth_invariant(int recursionDepth, int uniformHeightCount) {
    if (recursionDepth > 20 && uniformHeightCount > 0.8 * recursionDepth) { // Thresholds based on recursion and uniformity
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth!" << endl;
        abort();
    }
}

void check_loop_complexity_invariant(int n, int loopIterations) {
    if (loopIterations > 3 * n) { // Arbitrary threshold based on loop iterations
        cerr << "Warning: Performance bottleneck condition triggered due to high loop complexity!" << endl;
        abort();
    }
}

void check_boundary_check_invariant(int n, int similarHeightTowers) {
    if (similarHeightTowers > 0.5 * n) { // Threshold for similar height leading to boundary checks
        cerr << "Warning: Performance bottleneck condition triggered due to excessive boundary checks!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate the Checker Code with the Original Program

Below is the revised C++ code with integrated invariants checkers, aimed at detecting performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const double EPS = 1e-9;
const double PI = 3.14159265359;
vector<long long> primes;
void GeneratingPrimes(int top) {
    vector<bool> p(top + 1, 1);
    p[0] = p[1] = 0;
    for (int i = 2; i <= sqrt(top); i++) {
        if (p[i]) {
            for (int j = i * i; j <= top; j += i) {
                p[j] = 0;
            }
        }
    }
    for (int i = 0; i < top + 1; i++)
        if (p[i]) primes.push_back(i);
}
long long gcd(long long a, long long b) { return (b == 0) ? a : gcd(b, a % b); }
long long lcm(long long a, long long b) { return (a * b) / gcd(a, b); }
void EXTgcd(long long a, long long b, int& x0, int& y0) {
    if (b == 0) {
        x0 = 1, y0 = 0;
        return;
    }
    EXTgcd(b, a % b, x0, y0);
    long long x1 = y0;
    long long y1 = x0 - (a / b) * y0;
    x0 = x1;
    y0 = y1;
}
long long power(long long n, long long p, long long mod) {
    if (!p) return 1;
    long long ans = 1;
    while (p > 1) {
        if (p & 1) ans = (ans * n) % mod;
        n = (n * n) % mod;
        p /= 2;
    }
    return (ans * n) % mod;
}
double dist(double a, double b, double x, double y) {
    return sqrt(pow(a - x, 2) + pow(b - y, 2));
}
double dist3(double a, double b, double c, double x, double y, double z) {
    return sqrt(pow(a - x, 2) + pow(b - y, 2) + pow(c - z, 2));
}
int xadd[9] = {1, -1, 0, 1, -1, 0, 1, -1, 0};
int yadd[9] = {1, -1, 0, -1, 0, 1, 0, 1, -1};
int xx[4] = {0, 1, 0, -1};
int yy[4] = {1, 0, -1, 0};
long long const N = 1e5 + 10;
long long const mod = 1e9 + 7;
long long const INF = 1e9;
int n, a[N];

// Function to check set operation invariant
void check_set_operation_invariant(int n, int setOperations) {
    if (setOperations > 2 * n) { // Arbitrary threshold based on expensive set operations
        cerr << "Warning: Performance bottleneck condition triggered due to excessive set operations!" << endl;
        abort();
    }
}

// Function to check recursion depth invariant
void check_recursion_depth_invariant(int recursionDepth, int uniformHeightCount) {
    if (recursionDepth > 20 && uniformHeightCount > 0.8 * recursionDepth) { // Thresholds based on recursion and uniformity
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth!" << endl;
        abort();
    }
}

// Function to check loop complexity invariant
void check_loop_complexity_invariant(int n, int loopIterations) {
    if (loopIterations > 3 * n) { // Arbitrary threshold based on loop iterations
        cerr << "Warning: Performance bottleneck condition triggered due to high loop complexity!" << endl;
        abort();
    }
}

// Function to check boundary check invariant
void check_boundary_check_invariant(int n, int similarHeightTowers) {
    if (similarHeightTowers > 0.5 * n) { // Threshold for similar height leading to boundary checks
        cerr << "Warning: Performance bottleneck condition triggered due to excessive boundary checks!" << endl;
        abort();
    }
}

bool chk(int mid) {
    set<int> s, ns;
    for (int i = 0; i < n; i++) s.insert(i), ns.insert(-i);
    
    // Initialize operation counters
    int setOperations = 0;
    int loopIterations = 0;
    int similarHeightTowers = 0;
    int recursionDepth = 0;

    for (int i = 0; i < n; i++) {
        loopIterations++;
        if (mid >= a[i]) {
            int r = mid - a[i];
            auto it = s.lower_bound(i);
            while (it != s.end()) {
                int z = *it;
                if (z - i <= r) {
                    auto x = it++;
                    s.erase(x);
                    if (ns.count(-z)) ns.erase(-z);
                    setOperations++;
                } else
                    break;
            }
            it = ns.lower_bound(-i);
            while (it != ns.end()) {
                int z = *it;
                if (i + z <= r) {
                    auto x = it++;
                    ns.erase(x);
                    if (s.count(-z)) s.erase(-z);
                    setOperations++;
                } else
                    break;
            }
        }
        if (i > 0 && a[i] == a[i - 1]) {
            similarHeightTowers++;
        }
        recursionDepth++;
    }
    
    // Apply the checks
    check_set_operation_invariant(n, setOperations);
    check_recursion_depth_invariant(recursionDepth, similarHeightTowers);
    check_loop_complexity_invariant(n, loopIterations);
    check_boundary_check_invariant(n, similarHeightTowers);
    
    for (int x : s) {
        x++;
        if (x > mid && x <= n - mid) return 0;
    }
    return 1;
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);
    int lo = 1, hi = n, mid;
    while (lo <= hi) {
        mid = (lo + hi) / 2;
        if (chk(mid)) {
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }
    cout << hi + 1;
    return 0;
}
```

### Explanation:
- **Invariant Checks**: The checks are inserted within the `chk` function just before returning, ensuring they do not interfere with the main algorithm's flow and only execute after key loops and operations.
- **Thresholds and Conditions**: The thresholds are set based on observations of where complexity is likely to increase, such as when set operations or loop iterations exceed a multiple of `n`.
- **Abort on Detection**: Each checker will output a warning and abort if the condition is triggered, useful for debugging and preventing inefficient execution paths during fuzz testing.

