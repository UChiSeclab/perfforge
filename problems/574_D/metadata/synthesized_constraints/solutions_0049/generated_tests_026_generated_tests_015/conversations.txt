system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const int inf = 1e9;
struct segtree_asc {
 public:
  segtree_asc(int _n) : n(_n) {
    num.resize(n << 2, inf);
    push.resize(n << 2, inf);
  }
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); }
  int get(int at) { return _get(1, 1, n, at); }

 private:
  void relax(int p, int l, int r) {
    if (push[p] != inf) {
      if (l < r) {
        int mid = (l + r) >> 1;
        push[p + p] = min(push[p + p], push[p]);
        push[p + p + 1] = min(push[p + p + 1], push[p] + (mid + 1 - l));
      } else {
        num[p] = min(num[p], push[p]);
      }
      push[p] = inf;
    }
  }
  void _update(int p, int l, int r, int ll, int rr, int val) {
    relax(p, l, r);
    if (r < ll || rr < l) return;
    if (ll <= l && r <= rr) {
      push[p] = min(push[p], val);
      relax(p, l, r);
      return;
    }
    int mid = (l + r) >> 1;
    _update(p + p, l, mid, ll, rr, val);
    _update(p + p + 1, mid + 1, r, ll, rr, val + max(0, mid + 1 - max(l, ll)));
  }
  int _get(int p, int l, int r, int at) {
    relax(p, l, r);
    if (l == r) return num[p];
    int mid = (l + r) >> 1;
    if (at <= mid) {
      return _get(p + p, l, mid, at);
    } else {
      return _get(p + p + 1, mid + 1, r, at);
    }
  }
  int n;
  vector<int> num;
  vector<int> push;
};
struct segtree_des {
 public:
  segtree_des(int _n) : n(_n) {
    num.resize(n << 2, inf);
    push.resize(n << 2, inf);
  }
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); }
  int get(int at) { return _get(1, 1, n, at); }

 private:
  void relax(int p, int l, int r) {
    if (push[p] != inf) {
      if (l < r) {
        int mid = (l + r) >> 1;
        push[p + p] = min(push[p + p], push[p]);
        push[p + p + 1] = min(push[p + p + 1], push[p] - (mid + 1 - l));
      } else {
        num[p] = min(num[p], push[p]);
      }
      push[p] = inf;
    }
  }
  void _update(int p, int l, int r, int ll, int rr, int val) {
    relax(p, l, r);
    if (ll <= l && r <= rr) {
      push[p] = min(push[p], val);
      relax(p, l, r);
      return;
    }
    if (r < ll || rr < l) return;
    int mid = (l + r) >> 1;
    _update(p + p, l, mid, ll, rr, val);
    _update(p + p + 1, mid + 1, r, ll, rr, val - max(0, mid + 1 - max(l, ll)));
  }
  int _get(int p, int l, int r, int at) {
    relax(p, l, r);
    if (l == r) return num[p];
    int mid = (l + r) >> 1;
    if (at <= mid) {
      return _get(p + p, l, mid, at);
    } else {
      return _get(p + p + 1, mid + 1, r, at);
    }
  }
  int n;
  vector<int> num;
  vector<int> push;
};
int main() {
  int n;
  scanf("%d", &n);
  segtree_asc asc(n);
  segtree_des des(n);
  asc.update(1, n, 1);
  des.update(1, n, n);
  for (int i = 1; i <= n; i++) {
    int num;
    scanf("%d", &num);
    asc.update(i, n, num);
    des.update(1, i, num + i - 1);
  }
  int ans = -1;
  for (int i = 1; i <= n; i++) {
    ans = max(ans, min(asc.get(i), des.get(i)));
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

170
1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 2 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 2 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1e9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct segtree_asc { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  segtree_asc(int _n) : n(_n) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    num.resize(n << 2, inf); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    push.resize(n << 2, inf); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); } /* line 11 slow_hit_count: 171, fast_hit_count: 3 */
  int get(int at) { return _get(1, 1, n, at); } /* line 12 slow_hit_count: 170, fast_hit_count: 2 */
 /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  void relax(int p, int l, int r) { /* line 15 slow_hit_count: 4506, fast_hit_count: 12 */
    if (push[p] != inf) { /* line 16 slow_hit_count: 4506, fast_hit_count: 12 */
      if (l < r) { /* line 17 slow_hit_count: 1019, fast_hit_count: 5 */
        int mid = (l + r) >> 1; /* line 18 slow_hit_count: 701, fast_hit_count: 2 */
        push[p + p] = min(push[p + p], push[p]); /* line 19 slow_hit_count: 701, fast_hit_count: 2 */
        push[p + p + 1] = min(push[p + p + 1], push[p] + (mid + 1 - l)); /* line 20 slow_hit_count: 701, fast_hit_count: 2 */
      } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        num[p] = min(num[p], push[p]); /* line 22 slow_hit_count: 318, fast_hit_count: 3 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      push[p] = inf; /* line 24 slow_hit_count: 1019, fast_hit_count: 5 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 4506, fast_hit_count: 12 */
  void _update(int p, int l, int r, int ll, int rr, int val) { /* line 27 slow_hit_count: 2381, fast_hit_count: 5 */
    relax(p, l, r); /* line 28 slow_hit_count: 2381, fast_hit_count: 5 */
    if (r < ll || rr < l) return; /* line 29 slow_hit_count: 2381, fast_hit_count: 5 */
    if (ll <= l && r <= rr) { /* line 30 slow_hit_count: 1786, fast_hit_count: 4 */
      push[p] = min(push[p], val); /* line 31 slow_hit_count: 681, fast_hit_count: 3 */
      relax(p, l, r); /* line 32 slow_hit_count: 681, fast_hit_count: 3 */
      return; /* line 33 slow_hit_count: 681, fast_hit_count: 3 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    int mid = (l + r) >> 1; /* line 35 slow_hit_count: 1105, fast_hit_count: 1 */
    _update(p + p, l, mid, ll, rr, val); /* line 36 slow_hit_count: 1105, fast_hit_count: 1 */
    _update(p + p + 1, mid + 1, r, ll, rr, val + max(0, mid + 1 - max(l, ll))); /* line 37 slow_hit_count: 1105, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  int _get(int p, int l, int r, int at) { /* line 39 slow_hit_count: 1444, fast_hit_count: 4 */
    relax(p, l, r); /* line 40 slow_hit_count: 1444, fast_hit_count: 4 */
    if (l == r) return num[p]; /* line 41 slow_hit_count: 1444, fast_hit_count: 4 */
    int mid = (l + r) >> 1; /* line 42 slow_hit_count: 1274, fast_hit_count: 2 */
    if (at <= mid) { /* line 43 slow_hit_count: 1274, fast_hit_count: 2 */
      return _get(p + p, l, mid, at); /* line 44 slow_hit_count: 679, fast_hit_count: 1 */
    } else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      return _get(p + p + 1, mid + 1, r, at); /* line 46 slow_hit_count: 595, fast_hit_count: 1 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> num; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> push; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
struct segtree_des { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  segtree_des(int _n) : n(_n) { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    num.resize(n << 2, inf); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    push.resize(n << 2, inf); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); } /* line 59 slow_hit_count: 171, fast_hit_count: 3 */
  int get(int at) { return _get(1, 1, n, at); } /* line 60 slow_hit_count: 170, fast_hit_count: 2 */
 /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  void relax(int p, int l, int r) { /* line 63 slow_hit_count: 4422, fast_hit_count: 12 */
    if (push[p] != inf) { /* line 64 slow_hit_count: 4422, fast_hit_count: 12 */
      if (l < r) { /* line 65 slow_hit_count: 1273, fast_hit_count: 7 */
        int mid = (l + r) >> 1; /* line 66 slow_hit_count: 869, fast_hit_count: 2 */
        push[p + p] = min(push[p + p], push[p]); /* line 67 slow_hit_count: 869, fast_hit_count: 2 */
        push[p + p + 1] = min(push[p + p + 1], push[p] - (mid + 1 - l)); /* line 68 slow_hit_count: 869, fast_hit_count: 2 */
      } else { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
        num[p] = min(num[p], push[p]); /* line 70 slow_hit_count: 404, fast_hit_count: 5 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      push[p] = inf; /* line 72 slow_hit_count: 1273, fast_hit_count: 7 */
    } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 4422, fast_hit_count: 12 */
  void _update(int p, int l, int r, int ll, int rr, int val) { /* line 75 slow_hit_count: 2381, fast_hit_count: 5 */
    relax(p, l, r); /* line 76 slow_hit_count: 2381, fast_hit_count: 5 */
    if (ll <= l && r <= rr) { /* line 77 slow_hit_count: 2381, fast_hit_count: 5 */
      push[p] = min(push[p], val); /* line 78 slow_hit_count: 597, fast_hit_count: 3 */
      relax(p, l, r); /* line 79 slow_hit_count: 597, fast_hit_count: 3 */
      return; /* line 80 slow_hit_count: 597, fast_hit_count: 3 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    if (r < ll || rr < l) return; /* line 82 slow_hit_count: 1784, fast_hit_count: 2 */
    int mid = (l + r) >> 1; /* line 83 slow_hit_count: 1105, fast_hit_count: 1 */
    _update(p + p, l, mid, ll, rr, val); /* line 84 slow_hit_count: 1105, fast_hit_count: 1 */
    _update(p + p + 1, mid + 1, r, ll, rr, val - max(0, mid + 1 - max(l, ll))); /* line 85 slow_hit_count: 1105, fast_hit_count: 1 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  int _get(int p, int l, int r, int at) { /* line 87 slow_hit_count: 1444, fast_hit_count: 4 */
    relax(p, l, r); /* line 88 slow_hit_count: 1444, fast_hit_count: 4 */
    if (l == r) return num[p]; /* line 89 slow_hit_count: 1444, fast_hit_count: 4 */
    int mid = (l + r) >> 1; /* line 90 slow_hit_count: 1274, fast_hit_count: 2 */
    if (at <= mid) { /* line 91 slow_hit_count: 1274, fast_hit_count: 2 */
      return _get(p + p, l, mid, at); /* line 92 slow_hit_count: 679, fast_hit_count: 1 */
    } else { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
      return _get(p + p + 1, mid + 1, r, at); /* line 94 slow_hit_count: 595, fast_hit_count: 1 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> num; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> push; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  segtree_asc asc(n); /* line 104 slow_hit_count: 2, fast_hit_count: 2 */
  segtree_des des(n); /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  asc.update(1, n, 1); /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  des.update(1, n, n); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 108 slow_hit_count: 171, fast_hit_count: 3 */
    int num; /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &num); /* line 110 slow_hit_count: 170, fast_hit_count: 2 */
    asc.update(i, n, num); /* line 111 slow_hit_count: 170, fast_hit_count: 2 */
    des.update(1, i, num + i - 1); /* line 112 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = -1; /* line 114 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 115 slow_hit_count: 171, fast_hit_count: 3 */
    ans = max(ans, min(asc.get(i), des.get(i))); /* line 116 slow_hit_count: 170, fast_hit_count: 2 */
  } /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 118 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 120 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The lines within the `relax`, `_update`, and `_get` functions are hit significantly more often in the slow input compared to the fast input.
   - Specifically, lines in the `relax` function (lines 15-26 and 63-74) and the `_update` and `_get` functions (lines 27-38, 39-48, 75-86, and 87-96) exhibit a higher hit count for the slow input.

2. **Pinpointing Lines with More Hits:**
   - `relax` function is frequently called, with lines related to segment tree propagation (`push` operations) being hit thousands of times.
   - `_update` and `_get` functions are also more heavily involved in the slow run, suggesting recursive or iterative behavior that scales poorly with certain inputs.

3. **Inference on Data Structures and Operations:**
   - The program utilizes two segment trees (`segtree_asc` and `segtree_des`) to manage and update the ranges. These segment trees are involved in numerous update and get operations.
   - The higher hit count during slow execution implies recursive depth or breadth is higher in these operations, possibly due to repeated updates over overlapping ranges or exhaustive propagation checks.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**

   - **Invariant 1: High Frequency of Updates:**
     - "A slowdown is likely when there are numerous overlapping range updates in the segment trees, especially when many towers have similar heights causing repeated updates over the same range."

   - **Invariant 2: Exhaustive Range Queries:**
     - "Performance may degrade if the segment tree operations frequently query ranges that overlap significantly, which can occur when the height differences between consecutive towers are minimal."

   - **Invariant 3: Dense Tower Configurations:**
     - "The code may enter a slow path when the tower heights have a pattern that causes a large number of boundary blocks to remain after each operation, increasing the number of required operations."

2. **Thresholds and Conditions:**

   - **Condition for High Frequency of Updates:**
     - When the difference between maximum and minimum tower heights is small, frequent range updates are likely.

   - **Condition for Exhaustive Range Queries:**
     - When many consecutive towers have the same height, leading to overlapping queries and updates in segment tree operations.

   - **Condition for Dense Configurations:**
     - When there are alternating or repeating patterns of tower heights that create a high number of boundary blocks in each operation.

3. **Correlate Conditions to Input Patterns:**

   - These conditions suggest that slowdowns occur not only during maximum input size but also when the input structure leads to excessive overlap in segment tree operations. 

4. **Ensuring Broadness and Realistic Triggers:**

   - The conditions capture scenarios where operations lead to excessive recalculation due to overlapping ranges, which could be triggered by various patterns of tower heights within the constraint of `n <= 100`.
  
These statements and conditions can guide the identification of performance bottlenecks in similar scenarios and help developers anticipate cases where segment tree operations may become inefficient.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.

Limak will repeat the following operation till everything is destroyed.

Block is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.

Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.

Input

The first line contains single integer n (1 ≤ n ≤ 105).

The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers.

Output

Print the number of operations needed to destroy all towers.

Examples

Input

6
2 1 4 6 2 2


Output

3


Input

7
3 3 3 1 3 3 3


Output

2

Note

The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. 

<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Below are C++ code snippets to check each of the performance-characterizing invariants derived in Phase 2.

```cpp
// Invariant 1: High Frequency of Updates
void check_high_frequency_updates(bool condition) {
    if (condition) {
        cerr << "Warning: High frequency of updates in the segment tree!" << endl;
        abort();
    }
}

// Invariant 2: Exhaustive Range Queries
void check_exhaustive_range_queries(bool condition) {
    if (condition) {
        cerr << "Warning: Exhaustive range queries detected in the segment tree!" << endl;
        abort();
    }
}

// Invariant 3: Dense Tower Configurations
void check_dense_tower_configurations(bool condition) {
    if (condition) {
        cerr << "Warning: Dense tower configurations leading to many boundary blocks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Below is the instrumented C++ code with the performance checks integrated at strategic points.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const int inf = 1e9;

struct segtree_asc {
 public:
  segtree_asc(int _n) : n(_n) {
    num.resize(n << 2, inf);
    push.resize(n << 2, inf);
  }
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); }
  int get(int at) { return _get(1, 1, n, at); }

 private:
  void relax(int p, int l, int r) {
    if (push[p] != inf) {
      if (l < r) {
        int mid = (l + r) >> 1;
        push[p + p] = min(push[p + p], push[p]);
        push[p + p + 1] = min(push[p + p + 1], push[p] + (mid + 1 - l));
      } else {
        num[p] = min(num[p], push[p]);
      }
      push[p] = inf;
    }
  }
  void _update(int p, int l, int r, int ll, int rr, int val) {
    relax(p, l, r);
    if (r < ll || rr < l) return;
    if (ll <= l && r <= rr) {
      push[p] = min(push[p], val);
      relax(p, l, r);
      return;
    }
    int mid = (l + r) >> 1;
    _update(p + p, l, mid, ll, rr, val);
    _update(p + p + 1, mid + 1, r, ll, rr, val + max(0, mid + 1 - max(l, ll)));
  }
  int _get(int p, int l, int r, int at) {
    relax(p, l, r);
    if (l == r) return num[p];
    int mid = (l + r) >> 1;
    if (at <= mid) {
      return _get(p + p, l, mid, at);
    } else {
      return _get(p + p + 1, mid + 1, r, at);
    }
  }
  int n;
  vector<int> num;
  vector<int> push;
};

struct segtree_des {
 public:
  segtree_des(int _n) : n(_n) {
    num.resize(n << 2, inf);
    push.resize(n << 2, inf);
  }
  void update(int l, int r, int val) { _update(1, 1, n, l, r, val); }
  int get(int at) { return _get(1, 1, n, at); }

 private:
  void relax(int p, int l, int r) {
    if (push[p] != inf) {
      if (l < r) {
        int mid = (l + r) >> 1;
        push[p + p] = min(push[p + p], push[p]);
        push[p + p + 1] = min(push[p + p + 1], push[p] - (mid + 1 - l));
      } else {
        num[p] = min(num[p], push[p]);
      }
      push[p] = inf;
    }
  }
  void _update(int p, int l, int r, int ll, int rr, int val) {
    relax(p, l, r);
    if (ll <= l && r <= rr) {
      push[p] = min(push[p], val);
      relax(p, l, r);
      return;
    }
    if (r < ll || rr < l) return;
    int mid = (l + r) >> 1;
    _update(p + p, l, mid, ll, rr, val);
    _update(p + p + 1, mid + 1, r, ll, rr, val - max(0, mid + 1 - max(l, ll)));
  }
  int _get(int p, int l, int r, int at) {
    relax(p, l, r);
    if (l == r) return num[p];
    int mid = (l + r) >> 1;
    if (at <= mid) {
      return _get(p + p, l, mid, at);
    } else {
      return _get(p + p + 1, mid + 1, r, at);
    }
  }
  int n;
  vector<int> num;
  vector<int> push;
};

int main() {
  int n;
  scanf("%d", &n);

  segtree_asc asc(n);
  segtree_des des(n);

  // Check for potential dense configurations or overlapping ranges
  vector<int> heights(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &heights[i]);
  }

  // Invariant 1: Check high frequency of updates
  int max_height = *max_element(heights.begin(), heights.end());
  int min_height = *min_element(heights.begin(), heights.end());
  check_high_frequency_updates(max_height - min_height < 5); // Arbitrary small difference threshold

  // Invariant 2: Check for exhaustive range queries
  int same_height_count = 0;
  for (int i = 0; i < n - 1; ++i) {
    if (heights[i] == heights[i + 1]) {
      same_height_count++;
    }
  }
  check_exhaustive_range_queries(same_height_count > n / 2); // More than half have the same height

  // Invariant 3: Check for dense tower configurations
  // (Example threshold: many small towers)
  check_dense_tower_configurations(max_height < 10 && n > 50); // Arbitrary thresholds 

  asc.update(1, n, 1);
  des.update(1, n, n);
  for (int i = 1; i <= n; i++) {
    asc.update(i, n, heights[i-1]);
    des.update(1, i, heights[i-1] + i - 1);
  }
  int ans = -1;
  for (int i = 1; i <= n; i++) {
    ans = max(ans, min(asc.get(i), des.get(i)));
  }
  cout << ans << endl;
  return 0;
}
```

### Explanation

- **High Frequency of Updates:** This check is placed after reading input heights, comparing the max and min heights to see if the range of heights is small, which may imply frequent updates.
  
- **Exhaustive Range Queries:** It checks for a large number of consecutive towers with the same height, potentially causing exhaustive querying.

- **Dense Tower Configurations:** This check is based on detecting numerous small towers, which could lead to high numbers of boundary blocks remaining after operations. This is performed after input is read and before core segment tree operations.

These checks are designed to help a fuzzer or a developer identify scenarios that could slow down performance due to the nature of the input data and the operations performed on it.

