system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1e6 + 2;
const int MAXM = 1e5 + 10;
long long inline in() {
  long long x = 0, flag = 1;
  char ch = getchar();
  while (ch < '0' || ch > '9') {
    if (ch == '-') flag = -1;
    ch = getchar();
  }
  while (ch >= '0' && ch <= '9')
    x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();
  return x * flag;
}
int head[MAXN], nume;
struct Adj {
  int nex, to, w;
} adj[MAXM << 1];
void addedge(int from, int to, int w) {
  adj[++nume] = (Adj){head[from], to, w};
  head[from] = nume;
}
void link(int u, int v, int w) {
  addedge(u, v, w);
  addedge(v, u, w);
}
long long n, m;
long long p[60];
int main() {
  n = in();
  m = in();
  p[0] = 1;
  for (int i = 1; i <= 50; ++i) {
    p[i] = p[i - 1] * 2;
  }
  long long ans = 1e18;
  for (long long i = 1; i <= 1000000; ++i) {
    long long now = n - i * m;
    long long need = 0, needm = 0;
    for (int j = 50; j >= 0; --j) {
      if (p[j] > now) continue;
      ++need;
      now -= p[j];
      needm += p[j];
    }
    if (now != 0) continue;
    if (need <= i && i <= needm) {
      ans = min(ans, i);
      break;
    }
  }
  if (ans == 1000000000000000000)
    printf("-1");
  else
    printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 4


(G.2) Fast Input

4 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 1e6 + 2; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXM = 1e5 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long inline in() { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  long long x = 0, flag = 1; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  char ch = getchar(); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  while (ch < '0' || ch > '9') { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    if (ch == '-') flag = -1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (ch >= '0' && ch <= '9') /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
    x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar(); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  return x * flag; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int head[MAXN], nume; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
struct Adj { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int nex, to, w; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} adj[MAXM << 1]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
void addedge(int from, int to, int w) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  adj[++nume] = (Adj){head[from], to, w}; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  head[from] = nume; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void link(int u, int v, int w) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  addedge(u, v, w); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  addedge(v, u, w); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
long long p[60]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  n = in(); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  m = in(); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  p[0] = 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 50; ++i) { /* line 34 slow_hit_count: 51, fast_hit_count: 51 */
    p[i] = p[i - 1] * 2; /* line 35 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1e18; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= 1000000; ++i) { /* line 38 slow_hit_count: 1000001, fast_hit_count: 1 */
    long long now = n - i * m; /* line 39 slow_hit_count: 1000000, fast_hit_count: 1 */
    long long need = 0, needm = 0; /* line 40 slow_hit_count: 1000000, fast_hit_count: 1 */
    for (int j = 50; j >= 0; --j) { /* line 41 slow_hit_count: 52000000, fast_hit_count: 52 */
      if (p[j] > now) continue; /* line 42 slow_hit_count: 51000000, fast_hit_count: 51 */
      ++need; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
      now -= p[j]; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
      needm += p[j]; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (now != 0) continue; /* line 47 slow_hit_count: 1000000, fast_hit_count: 1 */
    if (need <= i && i <= needm) { /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
      ans = min(ans, i); /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans == 1000000000000000000) /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    printf("-1"); /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", ans); /* line 56 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts:

1. **Line 38:** This line, which initiates a loop, is hit 1,000,001 times in the slow input and only once for the fast input. This indicates that the loop iterates a million times in the slow case, causing the slowdown.

2. **Lines 39, 40, 47:** These lines are part of the loop from line 38 and are also hit 1,000,000 times for the slow input but only once for the fast input, suggesting that repeated calculations are performed inside this loop.

3. **Lines 41-45:** These lines are part of an inner loop. Line 41, which initiates the loop, is hit 52,000,000 times in the slow case but only 52 times in the fast case. This suggests that the inner loop iterates extensively in the slow input. 

4. **Line 42:** This line is a conditional check inside the inner loop, hit 51,000,000 times for the slow input, indicating it is frequently bypassing the logic that modifies variables `need`, `now`, and `needm` (lines 43-45).

### Inference:
- The primary bottleneck is the large number of iterations in the outer loop (line 38) and the inner loop (line 41). These loops perform extensive operations on the `now` variable and array `p`, especially when they interact with large values or a wide range of the loop counter `i`.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants:

1. **Excessive Iterations in Outer Loop:**
   - "When the product of `i` and `m` approaches or exceeds `n`, the outer loop iterates too many times, leading to significant performance degradation. This is exacerbated if `m` is large relative to `n`."

2. **High Iteration Count in Inner Loop:**
   - "If the difference between `n` and the product `i * m` results in a value that requires multiple powers of two near the maximum possible (i.e., close to 2^50), the inner loop iterates many times, significantly slowing down the program."

3. **Unproductive Iterations in Conditional Check:**
   - "When many iterations of the inner loop result in the condition `p[j] > now` being true, the loop spends excessive time bypassing logic without reducing `now`, which indicates inefficiencies in processing numbers that are not easily decomposable into the required summands."

### Generalization and Threshold Consideration:
- The thresholds primarily concern the relationship between `n`, `m`, and the powers of two. Specifically, inefficiencies arise when `n` is difficult to represent with available `p-binary` numbers due to `m` being a constraining factor or when `n` lies just below large powers of two requiring complex summand combinations.
- Considering `n` is capped at 10^9 and `p` ranges from -1000 to 1000, these thresholds are indicative of what occurs when `m` is non-zero and small compared to `n`, leading to extensive iteration in an attempt to decompose `n`.

These performance-characterizing invariants describe general patterns that can lead to slow execution, abstracted from specific input values, and applicable to any valid input within given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Here, I'll translate the performance-characterizing invariants into C++ code snippets to check for these conditions at runtime.

### Invariant 1: Excessive Iterations in Outer Loop

```cpp
void check_excessive_iterations(long long i, long long m, long long n) {
    if (i * m >= n) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in outer loop!" << endl;
        abort();
    }
}
```

### Invariant 2: High Iteration Count in Inner Loop

```cpp
void check_high_inner_iterations(long long now, int j) {
    if (now > 0 && j <= 0) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in inner loop!" << endl;
        abort();
    }
}
```

### Invariant 3: Unproductive Iterations in Conditional Check

```cpp
void check_unproductive_iterations(long long now, int p_j) {
    if (p_j > now) {
        cerr << "Warning: Performance bottleneck condition triggered - unproductive iterations in inner loop!" << endl;
        abort();
    }
}
```

## Phase 4: Insert Conditional Checks into the Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e6 + 2;
const int MAXM = 1e5 + 10;

long long inline in() {
    long long x = 0, flag = 1;
    char ch = getchar();
    while (ch < '0' || ch > '9') {
        if (ch == '-') flag = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9')
        x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();
    return x * flag;
}

void check_excessive_iterations(long long i, long long m, long long n) {
    if (i * m >= n) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in outer loop!" << endl;
        abort();
    }
}

void check_high_inner_iterations(long long now, int j) {
    if (now > 0 && j <= 0) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in inner loop!" << endl;
        abort();
    }
}

void check_unproductive_iterations(long long now, long long p_j) {
    if (p_j > now) {
        cerr << "Warning: Performance bottleneck condition triggered - unproductive iterations in inner loop!" << endl;
        abort();
    }
}

int head[MAXN], nume;
struct Adj {
    int nex, to, w;
} adj[MAXM << 1];

void addedge(int from, int to, int w) {
    adj[++nume] = (Adj){head[from], to, w};
    head[from] = nume;
}

void link(int u, int v, int w) {
    addedge(u, v, w);
    addedge(v, u, w);
}

long long n, m;
long long p[60];

int main() {
    n = in();
    m = in();
    p[0] = 1;
    for (int i = 1; i <= 50; ++i) {
        p[i] = p[i - 1] * 2;
    }
    long long ans = 1e18;
    for (long long i = 1; i <= 1000000; ++i) {
        long long now = n - i * m;
        check_excessive_iterations(i, m, n);  // Check for excessive iterations

        long long need = 0, needm = 0;
        for (int j = 50; j >= 0; --j) {
            check_high_inner_iterations(now, j);  // Check for high iterations in the inner loop

            if (p[j] > now) {
                check_unproductive_iterations(now, p[j]);  // Check for unproductive iterations
                continue;
            }
            ++need;
            now -= p[j];
            needm += p[j];
        }
        if (now != 0) continue;
        if (need <= i && i <= needm) {
            ans = min(ans, i);
            break;
        }
    }
    if (ans == 1000000000000000000)
        printf("-1");
    else
        printf("%lld\n", ans);
    return 0;
}
```

### Notes on Insertion
- The checks for excessive iterations are placed just after the loop variable is modified.
- The checks for high iteration counts and unproductive iterations are integrated within the inner loop where they reflect conditions leading to unproductive computation.

