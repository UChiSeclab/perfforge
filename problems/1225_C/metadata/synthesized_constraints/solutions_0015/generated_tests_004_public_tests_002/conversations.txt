system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, p, x, an, ans, MAXN = 1e9;
int main() {
  scanf("%lld%lld", &n, &p);
  ans = MAXN;
  for (int i = 1; i <= 1000000; i++) {
    n = n - p;
    if (n <= 0ll) break;
    x = n;
    an = 0;
    while (x) {
      an += x & 1;
      x >>= 1;
    }
    if (i >= an && n >= i) ans = min(ans, (long long)i);
  }
  if (ans == MAXN)
    printf("-1");
  else
    printf("%lld", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

938669971 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, p, x, an, ans, MAXN = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld%lld", &n, &p); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ans = MAXN; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 1000000; i++) { /* line 7 slow_hit_count: 1000001, fast_hit_count: 1 */
    n = n - p; /* line 8 slow_hit_count: 1000000, fast_hit_count: 1 */
    if (n <= 0ll) break; /* line 9 slow_hit_count: 1000000, fast_hit_count: 1 */
    x = n; /* line 10 slow_hit_count: 1000000, fast_hit_count: 0 */
    an = 0; /* line 11 slow_hit_count: 1000000, fast_hit_count: 0 */
    while (x) { /* line 12 slow_hit_count: 31000000, fast_hit_count: 0 */
      an += x & 1; /* line 13 slow_hit_count: 30000000, fast_hit_count: 0 */
      x >>= 1; /* line 14 slow_hit_count: 30000000, fast_hit_count: 0 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (i >= an && n >= i) ans = min(ans, (long long)i); /* line 16 slow_hit_count: 1000000, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans == MAXN) /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    printf("-1"); /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld", ans); /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the code and determine the performance-characterizing invariants, we need to identify why the program runs slowly for the "slow" input, `938669971 1`, and not for the "fast" input, `1 1`. 

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts:

- **Line 7 (`for` loop)**: This line is hit 1,000,001 times for the slow input but only once for the fast input. This indicates a large loop iteration count for the slow input.
- **Lines 12-14 (`while` loop and bit operations)**: The inner while loop is a major factor in the slowdown, with 31,000,000 hits for the slow input and none for the fast input. This suggests that the bit manipulation operations are repeatedly executed a significant number of times.
- **Line 16 (condition check and potential minimum update)**: This line is also executed 1,000,000 times for the slow input, indicating frequent evaluations of `an` against `i` and `n`.

#### Inference:

The code involves a `for` loop that iterates up to 1,000,000 times, which is excessive given the problem constraints (n ≤ 1,000,000,000). The inner while loop performs a bit count operation on `x`, which is `n - i*p`. For large `n` and small `p`, this operation can be very costly due to the high number of iterations and bit manipulation steps required to compute `an`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can identify conditions that likely lead to slow execution:

1. **High Iteration Count in Main Loop**:
   - **Invariant**: "When `n` is large and `p` is positive or zero, the for-loop iterating up to 1,000,000 times can become a bottleneck. This is especially true when `n - i*p` remains large, leading to excessive iterations and calculations."
   - **Reasoning**: If `p` is small or positive, subtractions in the loop do not decrease `n` significantly fast, causing many iterations. The while loop within these iterations further exacerbates the problem by performing bit manipulations repeatedly.

2. **Excessive Bit Operations**:
   - **Invariant**: "For large values of `n`, if `p` is too small to sufficiently decrease `n` in each iteration, the number of bit operations required to compute the number of `p-binary` numbers can dramatically increase, leading to slowdowns."
   - **Reasoning**: The slower input involves numerous bitwise operations as `n` is only marginally reduced per iteration, requiring extensive computation of `an` (the count of 1s in the binary representation of `x`).

3. **Large Search Space**:
   - **Invariant**: "When the difference between `n` and subsequent values of `n - i*p` remains large across many `i` values, the computation involves a large search space, making it inefficient."
   - **Reasoning**: The algorithm's attempt to minimize the number of summands involves exploring a wide range of `i` values, especially when the reduction in `n` per iteration is insufficient, implying a large search space is traversed.

These invariants help identify why the program might slow down for large `n` combined with ineffective decrements due to `p`, and they encapsulate potential slow scenarios without relying on specific values in the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Based on the performance-characterizing invariants derived, we will implement checker code for each invariant. 

1. **High Iteration Count in Main Loop**: This invariant addresses the large number of iterations in the `for` loop when `n` is large and `p` is zero or positive, causing inefficient decrementing of `n`.

```cpp
// Check if the loop will iterate excessively due to insufficient reduction in n
void check_loop_invariant(long long n, long long p) {
    if (n > 1e9 && p >= 0) {
        cerr << "Warning: Loop invariant triggered - possible excessive iterations due to large n and non-negative p" << endl;
        abort();
    }
}
```

2. **Excessive Bit Operations**: This invariant checks if the bitwise operation within the loop is performed too many times, slowing down the program.

```cpp
// Check if excessive bit operations are likely due to large n
void check_bit_operations_invariant(int i, long long n, long long p) {
    if (i > 1e6 && n - i*p > 0) {
        cerr << "Warning: Bit operations invariant triggered - excessive bit operations for large n and small decrement" << endl;
        abort();
    }
}
```

3. **Large Search Space**: This invariant evaluates if the search space remains large over many `i` values when `n - i*p` remains large.

```cpp
// Check if the search space remains large with insufficient reduction in each iteration
void check_search_space_invariant(long long n, long long p, int i) {
    if ((n - i*p) > 1e8 && i > 500000) {
        cerr << "Warning: Search space invariant triggered - large search space due to insufficient decrement" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, we'll integrate these checks into the C++ program at appropriate points to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, p, x, an, ans, MAXN = 1e9;

// Check if the loop will iterate excessively due to insufficient reduction in n
void check_loop_invariant(long long n, long long p) {
    if (n > 1e9 && p >= 0) {
        cerr << "Warning: Loop invariant triggered - possible excessive iterations due to large n and non-negative p" << endl;
        abort();
    }
}

// Check if excessive bit operations are likely due to large n
void check_bit_operations_invariant(int i, long long n, long long p) {
    if (i > 1e6 && n - i*p > 0) {
        cerr << "Warning: Bit operations invariant triggered - excessive bit operations for large n and small decrement" << endl;
        abort();
    }
}

// Check if the search space remains large with insufficient reduction in each iteration
void check_search_space_invariant(long long n, long long p, int i) {
    if ((n - i*p) > 1e8 && i > 500000) {
        cerr << "Warning: Search space invariant triggered - large search space due to insufficient decrement" << endl;
        abort();
    }
}

int main() {
    scanf("%lld%lld", &n, &p);

    // Check for potential loop inefficiency before starting the main loop
    check_loop_invariant(n, p);

    ans = MAXN;
    for (int i = 1; i <= 1000000; i++) {
        n = n - p;
        if (n <= 0ll) break;
        x = n;
        an = 0;
        
        // Check for potential excessive bit operations before entering the while loop
        check_bit_operations_invariant(i, n, p);

        while (x) {
            an += x & 1;
            x >>= 1;
        }
        
        // Check for large search space inefficiency after critical operations
        check_search_space_invariant(n, p, i);

        if (i >= an && n >= i) ans = min(ans, (long long)i);
    }
    if (ans == MAXN)
        printf("-1");
    else
        printf("%lld", ans);
}
```

### Comments on Checker Integration:

- **`check_loop_invariant`**: Placed before the main loop to catch potential inefficiencies due to large `n` and small `p` values.
- **`check_bit_operations_invariant`**: Before the inner `while` loop to capture inefficiency due to excessive bit operations.
- **`check_search_space_invariant`**: After critical operations within the loop, ensuring no redundant checks during every iteration while effectively catching large search spaces.

