=== Invariants Response ===
## Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare line-level hit counts between the fast and slow runs:**

   - The `fonk` function is invoked recursively, with line 4 (`int fonk(int c)`) being hit 21,891 times for the slow input and only 3 times for the fast input.
   - Line 7, where the recursion happens (`return fonk(c - 1) + fonk(c - 2);`), is hit 10,945 times for the slow input and only once for the fast input.

2. **Pinpoint lines or functions that get significantly more hits under the slow input:**

   - The recursion in the `fonk` function is the primary contributor to the difference in performance.
   - The recursive calls increase exponentially with the value of `c`, leading to a significant increase in execution time for larger values of `c`.

3. **Infer interactions with data structures, loops, recursion, etc.:**

   - `fonk` implements a recursive calculation that is akin to computing Fibonacci numbers.
   - The inefficiency arises from direct recursion without memoization or iteration, leading to repeated redundant calculations of the same results for larger values of `c`.

## Phase 2: Derive Performance-Characterizing Invariants

1. **Generate natural language statements for slow path conditions:**

   - **Invariant 1: Recursion Depth and Redundancy**
     - "If the value of `c` in the recursive function `fonk` is large, the number of recursive calls increases exponentially, which can drastically slow down execution."
     - **Reasoning:** This is due to the exponential growth in recursive calls as `c` increases, leading to repeated calculations.

   - **Invariant 2: Recursive Function Calls**
     - "When the recursive function `fonk` is called many times without caching results, performance degrades significantly due to redundant computations."
     - **Reasoning:** Inefficiency from recomputation of values that have already been calculated in the recursive tree.

2. **Abstract conditions and provide thresholds based on input constraints:**

   - "For the recursive function `fonk`, if `c` is close to the upper constraint (e.g., 20), the recursive call count can become very high, causing performance issues."

3. **Correlate these conditions strongly to input patterns:**

   - The slowdown occurs notably when `c` is large relative to `a` and `b`, as in the slow input (`2 1 20`).

4. **Consider fuzzer utility and avoid checks inside tight loops:**

   - Checks and invariant detection should occur before deep recursion starts, i.e., before calling `fonk` with a high value of `c`.

## Performance-Characterizing Invariants

1. **Invariant 1: Recursion Growth**
   - "If the recursion depth in the function `fonk` exceeds a certain level (e.g., when `c` approaches 20), the number of recursive calls increases exponentially, leading to significant slowdown."

2. **Invariant 2: Computation Redundancy**
   - "When `fonk` is recursively invoked with a large `c` without optimization techniques such as memoization, the performance may degrade due to repeated calculations."

These statements capture the main performance issues, focusing on recursion depth and redundancy without hardcoding specific input values.

=== Checker Response ===
## Phase 3: Implement Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants inferred from the program analysis.

### Invariant 1: Recursion Depth and Redundancy
This invariant checks if the recursion depth in the function `fonk` exceeds a certain level, leading to excessive recursive calls.

```cpp
void check_recursion_invariant(int c) {
    if (c >= 20) { // We assume a depth close to the problem's constraint limit (20) can cause a slowdown
        cerr << "Warning: Recursion depth invariant triggered - excessive recursion depth" << endl;
        abort();
    }
}
```

### Invariant 2: Computation Redundancy
This invariant checks for redundant calculations due to lack of optimization techniques like memoization.

```cpp
void check_computation_redundancy(int c) {
    if (c >= 20) { // Similar threshold for recognizing potentially redundant computation
        cerr << "Warning: Computation redundancy invariant triggered - redundant calculations" << endl;
        abort();
    }
}
```

## Phase 4: Insert Conditional Checks into the Original Program

Here is the original C++ program, instrumented with the invariant checks. The checks are inserted at effective points in the control flow of the program to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a, b;

void check_recursion_invariant(int c) {
    if (c >= 20) { // Recursion depth check
        cerr << "Warning: Recursion depth invariant triggered - excessive recursion depth" << endl;
        abort();
    }
}

void check_computation_redundancy(int c) {
    if (c >= 20) { // Computation redundancy check
        cerr << "Warning: Computation redundancy invariant triggered - redundant calculations" << endl;
        abort();
    }
}

int fonk(int c) {
    check_recursion_invariant(c); // Check before recursion
    check_computation_redundancy(c); // Check for redundant computations
    
    if (c == 0) return a;
    if (c == 1) return b;
    return fonk(c - 1) + fonk(c - 2);
}

int main() {
    int c;
    scanf("%d %d", &a, &b);
    scanf("%d", &c);

    printf("%d", fonk(c));
    return 0;
}
```

### Explanation of Integration

- **Invariant Checks:** The invariant checks (`check_recursion_invariant` and `check_computation_redundancy`) are placed before the recursive calls in the function `fonk` to detect potential performance bottlenecks due to deep recursion or redundant calculations.

- **Thresholds:** The check condition uses `c >= 20` as the threshold, which is the maximum allowable value based on the problem's constraints. This reflects potential performance triggers without relying on specific input values.

- **Abort on Trigger:** Each invariant check logs a warning and aborts program execution upon triggering, ensuring clear detection of performance issues during testing or fuzzing.
