system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement



Input

The only line of input contains three integers a1, a2, a3 (1 ≤ a1, a2, a3 ≤ 20), separated by spaces.

Output

Output a single integer.

Examples

Input

2 3 2


Output

5


Input

13 14 1


Output

14


Input

14 5 9


Output

464


Input

17 18 3


Output

53

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int f(int n1, int n2, int n) {
  if (n == 0)
    return n1;
  else if (n == 1)
    return n2;
  return f(n1, n2, n - 1) + f(n1, n2, n - 2);
}
int main() {
  int n1, n2, n;
  cin >> n1 >> n2 >> n;
  cout << f(n1, n2, n);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 1 20


(G.2) Fast Input

2 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int f(int n1, int n2, int n) { /* line 3 slow_hit_count: 21891, fast_hit_count: 3 */
  if (n == 0) /* line 4 slow_hit_count: 21891, fast_hit_count: 3 */
    return n1; /* line 5 slow_hit_count: 4181, fast_hit_count: 1 */
  else if (n == 1) /* line 6 slow_hit_count: 17710, fast_hit_count: 2 */
    return n2; /* line 7 slow_hit_count: 6765, fast_hit_count: 1 */
  return f(n1, n2, n - 1) + f(n1, n2, n - 2); /* line 8 slow_hit_count: 10945, fast_hit_count: 1 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n1, n2, n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n1 >> n2 >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cout << f(n1, n2, n); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the provided hit counts for both the slow and fast inputs, the following observations can be made:

1. **High Recursion Depth**: The function `f` at line 3 is called 21,891 times for the slow input compared to only 3 times for the fast input. This indicates that the recursive calls are the primary contributors to the slowdown.

2. **Conditional Checks**:
   - Line 4 (`if (n == 0)`) and line 6 (`else if (n == 1)`) are hit frequently in the slow input. This suggests that the base cases are essential to terminating recursion, and with a high value of `n`, the recursion depth increases significantly.

3. **Recursive Calls**: Line 8 (`return f(n1, n2, n - 1) + f(n1, n2, n - 2)`) is called 10,945 times in the slow input. This line represents the Fibonacci-like recursive structure, causing exponential growth in the number of function calls.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, the following natural language performance invariants can be derived:

### Invariant 1: Deep Recursion Due to Large `n`

- **Natural Language Description**: "When the third input integer `n` is large, especially near the upper constraint limit (e.g., close to 20), the recursive function calls increase exponentially, leading to significant slowdowns."
  
  - This invariant identifies that as `n` approaches its maximum allowed value, the recursive nature of the function `f` leads to a large number of redundant calculations, causing performance degradation.

### Invariant 2: Exponential Growth in Computation

- **Natural Language Description**: "The recursive calls exhibit exponential growth as `n` increases, particularly when `n` is much larger than in typical cases, causing an explosion in the number of function evaluations."

  - This invariant highlights that the Fibonacci-like nature of the recursion results in an exponential number of calls, which is computationally expensive.

### Invariant 3: Inefficient Base Case Handling

- **Natural Language Description**: "If the base cases for the recursive function are repeatedly checked due to high recursion levels, this indicates excessive unnecessary computations, contributing to slow performance."

  - This invariant stresses the repeated evaluation of base cases when `n` is large, which, although necessary for correctness, is inefficient for performance.

### Important Note:

These invariants are designed to capture broad conditions indicative of slow performance. They do not rely on exact numeric values from the slow input but instead consider the problem constraints and typical behavior patterns of recursive algorithms.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:


Input

The only line of input contains three integers a1, a2, a3 (1 ≤ a1, a2, a3 ≤ 20), separated by spaces.

Output

Output a single integer.

Examples

Input

2 3 2


Output

5


Input

13 14 1


Output

14


Input

14 5 9


Output

464


Input

17 18 3


Output

53

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Performance-Characterizing Invariants in C++

### Invariant 1: Deep Recursion Due to Large `n`
```cpp
void check_deep_recursion_invariant(int n) {
    if (n >= 15) { // Assuming large n as a threshold for recursion depth
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion due to large n" << endl;
        abort();
    }
}
```

### Invariant 2: Exponential Growth in Computation
```cpp
void check_exponential_growth_invariant(int n) {
    if (n > 10) { // Threshold chosen based on exponential growth behavior
        cerr << "Warning: Performance bottleneck condition triggered - exponential growth in recursion" << endl;
        abort();
    }
}
```

### Invariant 3: Inefficient Base Case Handling
```cpp
void check_base_case_handling_invariant(int n) {
    if (n > 12) { // Threshold where base case handling becomes inefficient
        cerr << "Warning: Performance bottleneck condition triggered - inefficient base case handling" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into the Original Program

Below is the final C++ program with the integrated runtime checks for performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for deep recursion due to large `n`
void check_deep_recursion_invariant(int n) {
    if (n >= 15) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion due to large n" << endl;
        abort();
    }
}

// Check for exponential growth in computation
void check_exponential_growth_invariant(int n) {
    if (n > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - exponential growth in recursion" << endl;
        abort();
    }
}

// Check for inefficient base case handling
void check_base_case_handling_invariant(int n) {
    if (n > 12) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient base case handling" << endl;
        abort();
    }
}

int f(int n1, int n2, int n) {
    if (n == 0)
        return n1;
    else if (n == 1)
        return n2;
    return f(n1, n2, n - 1) + f(n1, n2, n - 2);
}

int main() {
    int n1, n2, n;
    cin >> n1 >> n2 >> n;

    // Inserted checks to detect potential performance bottlenecks
    check_deep_recursion_invariant(n);
    check_exponential_growth_invariant(n);
    check_base_case_handling_invariant(n);

    cout << f(n1, n2, n);
}
```

### Explanation:

- **Placement of Checks**: The checks are placed immediately after reading the input values. This ensures that any potentially problematic input is flagged before the expensive recursive calls begin.
- **Thresholds**: Reasonable thresholds are chosen based on the observed performance patterns and constraints (e.g., `n <= 20`). These thresholds help in identifying when the computation may become inefficient due to recursion depth or exponential call growth.

