system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement



Input

The only line of input contains three integers a1, a2, a3 (1 ≤ a1, a2, a3 ≤ 20), separated by spaces.

Output

Output a single integer.

Examples

Input

2 3 2


Output

5


Input

13 14 1


Output

14


Input

14 5 9


Output

464


Input

17 18 3


Output

53

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a0, a1, n, ans, table[500];
int getans(int);
int main() {
  scanf("%d%d%d", &a0, &a1, &n);
  printf("%d\n", getans(n));
  return 0;
}
int getans(int an) {
  if (an == 0) return a0;
  if (an == 1) return a1;
  return getans(an - 1) + getans(an - 2);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1 20


(G.2) Fast Input

1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a0, a1, n, ans, table[500]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int getans(int); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &a0, &a1, &n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", getans(n)); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int getans(int an) { /* line 10 slow_hit_count: 21891, fast_hit_count: 1 */
  if (an == 0) return a0; /* line 11 slow_hit_count: 21891, fast_hit_count: 1 */
  if (an == 1) return a1; /* line 12 slow_hit_count: 17710, fast_hit_count: 1 */
  return getans(an - 1) + getans(an - 2); /* line 13 slow_hit_count: 10945, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issues in the given C program, we need to analyze the code and the hit count data to derive performance-characterizing invariants. Let's break down the task:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The function `getans(int an)` is significantly more active in the slow input scenario. Specifically:
     - Line 10 (`int getans(int an) {`) shows a hit count of 21,891 for the slow input versus only 1 for the fast input.
     - Line 11 (`if (an == 0) return a0;`) and Line 12 (`if (an == 1) return a1;`) similarly show high numbers of hits.
     - Line 13, invoking `getans(an - 1) + getans(an - 2)`, indicates recursive calls and has a hit count of 10,945 in the slow input, showing no hits in the fast input.
   
2. **Inference:**
   - The program employs a recursive method to compute values similar to those in the Fibonacci sequence. The recursion depth and number of recursive calls increase significantly for larger values of `n`, reaching the maximum allowed value of `n = 20` in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursive Function Calls:**
   - **Invariant Description:** "When `n` is large, especially near the upper constraint (`n = 20`), recursive computation can lead to an exponential number of calls, significantly slowing down the program."
   - **Explanation:** The program's recursion depth and branching factor increase exponentially, particularly when `n` approaches its maximum value. Given the constraints, this leads to a large number of recursive calls, causing the slowdown.

2. **Potential Inefficiency in Base Cases:**
   - **Invariant Description:** "If the program performs many similar recursive calls due to lack of memoization, performance will degrade."
   - **Explanation:** Without memoization, the program recalculates values for the same `an` multiple times, adding unnecessary computational overhead.

3. **Absence of Optimization Techniques:**
   - **Invariant Description:** "In the absence of dynamic programming techniques like memoization, deep recursion leads to repeated calculations and performance degradation."
   - **Explanation:** The lack of memoization in recursive calls results in the same computations being repeated, which is inefficient for larger `n`.

### Conclusion

These invariants focus on the recursive nature of the algorithm and the absence of optimization strategies like memoization, which results in exponential growth in computation. By considering these performance triggers, developers can introduce dynamic programming techniques to mitigate slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:


Input

The only line of input contains three integers a1, a2, a3 (1 ≤ a1, a2, a3 ≤ 20), separated by spaces.

Output

Output a single integer.

Examples

Input

2 3 2


Output

5


Input

13 14 1


Output

14


Input

14 5 9


Output

464


Input

17 18 3


Output

53

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

For the derived performance-characterizing invariants, we need to create runtime checks that will detect when the conditions leading to performance bottlenecks are triggered. We identified two main conditions from Phase 2: deep recursion due to large `n`, and a lack of memoization leading to repeated calculations. We'll implement checks for these two conditions.

#### Invariant #1: Recursion Depth
- **Description:** When `n` is large, especially near the upper constraint (`n = 20`), recursive computation can lead to an exponential number of calls, significantly slowing down the program.

```cpp
void check_recursion_depth_invariant(int n) {
    if (n > 18) {  // A threshold close to the maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursion!" << endl;
        abort();
    }
}
```

#### Invariant #2: Lack of Memoization
- **Description:** Without memoization, the program recalculates values for the same `an` multiple times, adding unnecessary computational overhead.

```cpp
void check_memoization_invariant(std::unordered_map<int, int>& memo, int an) {
    if (memo.find(an) != memo.end()) {
        cerr << "Warning: Performance bottleneck condition triggered due to lack of memoization!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now, we'll integrate the checks into the original C++ program at appropriate locations to effectively catch these conditions without introducing overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for deep recursion
void check_recursion_depth_invariant(int n) {
    if (n > 18) {  // A threshold close to the maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered due to deep recursion!" << endl;
        abort();
    }
}

// Check for lack of memoization
void check_memoization_invariant(std::unordered_map<int, int>& memo, int an) {
    if (memo.find(an) != memo.end()) {
        cerr << "Warning: Performance bottleneck condition triggered due to lack of memoization!" << endl;
        abort();
    }
}

int a0, a1, n;
unordered_map<int, int> memo; // Memoization map

int getans(int an) {
    check_memoization_invariant(memo, an); // Check for lack of memoization

    if (an == 0) return a0;
    if (an == 1) return a1;

    if (memo.find(an) != memo.end()) return memo[an]; // Use memoized result if available

    int result = getans(an - 1) + getans(an - 2);
    memo[an] = result; // Store the result in the memo map
    return result;
}

int main() {
    scanf("%d%d%d", &a0, &a1, &n);

    check_recursion_depth_invariant(n); // Check for deep recursion right after reading input

    printf("%d\n", getans(n));
    return 0;
}
```

### Explanation

- **Check for Recursion Depth:** We placed this check immediately after reading the input values to ensure that if `n` is close to its upper constraint, a warning is triggered before computation begins.
  
- **Check for Lack of Memoization:** This is placed at the beginning of the `getans` function to ensure that if a value for `an` is already computed, it uses the memoized value instead of recomputing. Additionally, it checks if `an` is already in the memo before the computation proceeds.

This instrumented code now has runtime checks that will abort the execution and provide a warning if the conditions leading to performance issues are met. This helps in identifying potential bottlenecks during testing or use with a fuzzer.

