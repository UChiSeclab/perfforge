system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long egcd(long long a, long long b, long long &x, long long &y) {
  if (a == 0LL) {
    x = 0LL;
    y = 1LL;
    return b;
  }
  long long xx, yy;
  long long val = egcd(b % a, a, xx, yy);
  x = yy - (b / a) * xx;
  y = xx;
  return val;
}
long long gcd(long long a, long long b) {
  while (true) {
    if (a > b) swap(a, b);
    if (a == 0) return b;
    long long p = b % a, q = a;
    a = p;
    b = q;
  }
}
long long powerMod(long long x, long long y) {
  long long res = 1;
  x %= 1000000007;
  while (y > 0) {
    if (y & 1) res = (res * x) % 1000000007;
    y = y >> 1;
    x = (x * x) % 1000000007;
  }
  return res % 1000000007;
}
void solve() {
  int n, m, i, j, k, l, p;
  cin >> n >> m;
  vector<int> servers(n + 1, 0);
  vector<pair<pair<int, int>, int> > v(m);
  for (auto &i : v) {
    cin >> i.first.first >> i.first.second >> i.second;
  }
  for (int time = 1, cur = 0; time <= 1000000 && cur < m; time++) {
    if (v[cur].first.first == time) {
      for (i = 1, j = 0; i <= n; i++) {
        if (servers[i] == 0) j++;
      }
      if (j < v[cur].first.second) {
        cout << -1 << "\n";
      } else {
        for (i = 1, j = k = 0; i <= n && k < v[cur].first.second; i++) {
          if (servers[i] == 0) {
            servers[i] = v[cur].second;
            j += i;
            k++;
          }
        }
        cout << j << "\n";
      }
      cur++;
    }
    for (auto &i : servers) {
      if (i) i--;
    }
  }
}
int32_t main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  int t;
  t = 1;
  while (t--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
1000000 100 1000


(G.2) Fast Input

2 1
6 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long egcd(long long a, long long b, long long &x, long long &y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0LL) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    x = 0LL; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    y = 1LL; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long xx, yy; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  long long val = egcd(b % a, a, xx, yy); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  x = yy - (b / a) * xx; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  y = xx; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return val; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  while (true) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (a > b) swap(a, b); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (a == 0) return b; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    long long p = b % a, q = a; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    a = p; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    b = q; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long powerMod(long long x, long long y) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  x %= 1000000007; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % 1000000007; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % 1000000007; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return res % 1000000007; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i, j, k, l, p; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> servers(n + 1, 0); /* line 37 slow_hit_count: 2, fast_hit_count: 2 */
  vector<pair<pair<int, int>, int> > v(m); /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto &i : v) { /* line 39 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> i.first.first >> i.first.second >> i.second; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int time = 1, cur = 0; time <= 1000000 && cur < m; time++) { /* line 42 slow_hit_count: 1000001, fast_hit_count: 7 */
    if (v[cur].first.first == time) { /* line 43 slow_hit_count: 1000000, fast_hit_count: 6 */
      for (i = 1, j = 0; i <= n; i++) { /* line 44 slow_hit_count: 101, fast_hit_count: 3 */
        if (servers[i] == 0) j++; /* line 45 slow_hit_count: 100, fast_hit_count: 2 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      if (j < v[cur].first.second) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
        cout << -1 << "\n"; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
        for (i = 1, j = k = 0; i <= n && k < v[cur].first.second; i++) { /* line 50 slow_hit_count: 101, fast_hit_count: 2 */
          if (servers[i] == 0) { /* line 51 slow_hit_count: 100, fast_hit_count: 1 */
            servers[i] = v[cur].second; /* line 52 slow_hit_count: 100, fast_hit_count: 1 */
            j += i; /* line 53 slow_hit_count: 100, fast_hit_count: 1 */
            k++; /* line 54 slow_hit_count: 100, fast_hit_count: 1 */
          } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        cout << j << "\n"; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      cur++; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto &i : servers) { /* line 61 slow_hit_count: 102000000, fast_hit_count: 24 */
      if (i) i--; /* line 62 slow_hit_count: 101000000, fast_hit_count: 18 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
int32_t main() { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  t = 1; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 73 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - In the slow input, the line `for (int time = 1, cur = 0; time <= 1000000 && cur < m; time++)` is executed 1,000,001 times, while it is only executed 7 times for the fast input. This indicates a potential bottleneck due to the loop iterating for a very large range.
   - The line `for (auto &i : servers)` in the slow input runs 102,000,000 times compared to just 24 times in the fast input. This suggests frequent and repeated operations on the `servers` array.

2. **Potential Issue:**
   - The significant difference in hit counts suggests that the loop iterating over time (`for (int time = 1, cur = 0; time <= 1000000 && cur < m; time++)`) and the loop iterating over the `servers` array (`for (auto &i : servers)`) are major contributors to slow performance.
   - The condition `if (v[cur].first.first == time)` is checked repeatedly, causing the entire loop to iterate even when no task is processed.

3. **Interaction with Data Structures:**
   - The `servers` array is updated in every time unit by decrementing non-zero entries. This contributes greatly to overhead due to its repeated nature within the time loop.
   - The task processing logic checks every server in `servers`, causing additional overhead especially when `n` is large (though `n` is constrained to be ≤ 100).

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Frequency of Operations:**
   - **Natural Language Description:** "If the maximum time for tasks (`t`) is very large compared to the number of tasks (`q`), the program may perform unnecessary iterations over time, leading to slow performance."
   - **Explanation:** The loop iterates up to a maximum time of 1,000,000 seconds in the worst case, which is inefficient if there are only a few tasks compared to the time range.

2. **Server Array Decrementing:**
   - **Natural Language Description:** "If there is an extensive duration between tasks, causing the need to decrement the `servers` occupancy state frequently, the program may exhibit poor performance."
   - **Explanation:** The decrement happens on each time step for up to `n` servers, which is particularly costly when the range of time (`t`) is large but tasks are sparse.

3. **Task Processing Conditions:**
   - **Natural Language Description:** "When the task demand (`ki`) is close to the number of servers (`n`), it increases the likelihood of iterating over the entire `servers` array frequently, leading to inefficiencies."
   - **Explanation:** The requirement to find `ki` available servers leads to checking many servers, and if `ki` approaches `n`, this operation becomes costly.

### Recommendations for Improvement

- **Loop Optimization:** Consider breaking out of the time loop early if no tasks span a given time frame, or implement a more efficient check to skip unnecessary increments.
- **Server Management:** Optimize the server management by checking only relevant periods (reduce the number of unnecessary decrements).
- **Task Scheduling:** Reconsider the task scheduling approach to reduce unnecessary looping, potentially using a priority-like mechanism that only activates when necessary.

By addressing these issues, the program could significantly improve its performance on inputs with large time ranges and sparse tasks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code

Below are the C++ code snippets that correspond to the natural language invariants derived earlier. These snippets will check at runtime whether the conditions leading to performance bottlenecks are met.

1. **High Frequency of Operations:**
   - **Checker Code:**
   ```cpp
   void check_time_range_invariant(int maxTime, int numTasks) {
       if (maxTime > 10 * numTasks) { // Arbitrary threshold for inefficiency
           cerr << "Warning: Performance bottleneck condition triggered - excessive time range with sparse tasks!" << endl;
           abort();
       }
   }
   ```

2. **Server Array Decrementing:**
   - **Checker Code:**
   ```cpp
   void check_server_decrement_invariant(int timeRange) {
       if (timeRange > 1000000) { // Inefficient for too large a time range
           cerr << "Warning: Performance bottleneck condition triggered - frequent server state changes!" << endl;
           abort();
       }
   }
   ```

3. **Task Processing Conditions:**
   - **Checker Code:**
   ```cpp
   void check_task_demand_invariant(int requiredServers, int totalServers) {
       if (requiredServers > totalServers / 2) { // Arbitrarily chosen threshold for heavy demand
           cerr << "Warning: Performance bottleneck condition triggered - heavy server demand!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ program with the inserted checker code:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_time_range_invariant(int maxTime, int numTasks) {
    if (maxTime > 10 * numTasks) { // Arbitrary threshold for inefficiency
        cerr << "Warning: Performance bottleneck condition triggered - excessive time range with sparse tasks!" << endl;
        abort();
    }
}

void check_server_decrement_invariant(int timeRange) {
    if (timeRange > 1000000) { // Inefficient for too large a time range
        cerr << "Warning: Performance bottleneck condition triggered - frequent server state changes!" << endl;
        abort();
    }
}

void check_task_demand_invariant(int requiredServers, int totalServers) {
    if (requiredServers > totalServers / 2) { // Arbitrarily chosen threshold for heavy demand
        cerr << "Warning: Performance bottleneck condition triggered - heavy server demand!" << endl;
        abort();
    }
}

void solve() {
    int n, m, i, j, k, l, p;
    cin >> n >> m;
    vector<int> servers(n + 1, 0);
    vector<pair<pair<int, int>, int> > v(m);
    
    for (auto &i : v) {
        cin >> i.first.first >> i.first.second >> i.second;
        // Check for high server demand
        check_task_demand_invariant(i.first.second, n);
    }

    int maxTaskTime = v.back().first.first;  // Assuming v is sorted by task time
    check_time_range_invariant(maxTaskTime, m); // Check for inefficient time range
    
    for (int time = 1, cur = 0; time <= 1000000 && cur < m; time++) {
        if (v[cur].first.first == time) {
            for (i = 1, j = 0; i <= n; i++) {
                if (servers[i] == 0) j++;
            }
            if (j < v[cur].first.second) {
                cout << -1 << "\n";
            } else {
                for (i = 1, j = k = 0; i <= n && k < v[cur].first.second; i++) {
                    if (servers[i] == 0) {
                        servers[i] = v[cur].second;
                        j += i;
                        k++;
                    }
                }
                cout << j << "\n";
            }
            cur++;
        }
        check_server_decrement_invariant(1000000); // Check for frequent server state changes
        
        for (auto &i : servers) {
            if (i) i--;
        }
    }
}

int32_t main() {
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    t = 1;
    while (t--) {
        solve();
    }
    return 0;
}
```

### Comments on Insertions

- **`check_time_range_invariant`:** Called after the input is read to ensure the time range is not excessively large compared to the number of tasks, which would indicate inefficient loops.
- **`check_server_decrement_invariant`:** Called outside the main loop to ensure frequent server state changes don't occur over an excessively large time range.
- **`check_task_demand_invariant`:** Called for each task to detect if the demand for servers is disproportionately high relative to the total number of servers available.

