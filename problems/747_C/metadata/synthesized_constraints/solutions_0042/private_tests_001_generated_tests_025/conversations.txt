system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, q;
set<int> a;
vector<int> t, k, d;
vector<set<int> > s;
set<pair<int, int> > task;
int main() {
  scanf("%d%d", &n, &q);
  for (int i = 0; i < n; ++i) a.insert(i + 1);
  k.resize(q);
  t = d = k;
  for (int i = 0; i < q; ++i) {
    scanf("%d%d%d", &t[i], &k[i], &d[i]);
    task.insert(pair<int, int>(t[i], i));
  }
  s.resize(q);
  while (((int)task.size())) {
    int u = task.begin()->second;
    task.erase(task.begin());
    if (u >= 0) {
      if (((int)a.size()) < k[u]) {
        printf("-1\n");
        continue;
      }
      int sum = 0;
      for (int i = 0; i < k[u]; ++i) {
        sum += *a.begin();
        s[u].insert(*a.begin());
        a.erase(a.begin());
      }
      printf("%d\n", sum);
      task.insert(pair<int, int>(t[u] + d[u], -u - 1));
    } else {
      u = -u - 1;
      a.insert(s[u].begin(), s[u].end());
      s[u].clear();
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
1000000 100 1000


(G.2) Fast Input

000 1
1000000 100 1001


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, q; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<int> a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> t, k, d; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<set<int> > s; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
set<pair<int, int> > task; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &q); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) a.insert(i + 1); /* line 10 slow_hit_count: 101, fast_hit_count: 1 */
  k.resize(q); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  t = d = k; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < q; ++i) { /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%d%d%d", &t[i], &k[i], &d[i]); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    task.insert(pair<int, int>(t[i], i)); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  s.resize(q); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  while (((int)task.size())) { /* line 18 slow_hit_count: 3, fast_hit_count: 2 */
    int u = task.begin()->second; /* line 19 slow_hit_count: 2, fast_hit_count: 1 */
    task.erase(task.begin()); /* line 20 slow_hit_count: 2, fast_hit_count: 1 */
    if (u >= 0) { /* line 21 slow_hit_count: 2, fast_hit_count: 1 */
      if (((int)a.size()) < k[u]) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
        printf("-1\n"); /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
        continue; /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      int sum = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
      for (int i = 0; i < k[u]; ++i) { /* line 27 slow_hit_count: 101, fast_hit_count: 0 */
        sum += *a.begin(); /* line 28 slow_hit_count: 100, fast_hit_count: 0 */
        s[u].insert(*a.begin()); /* line 29 slow_hit_count: 100, fast_hit_count: 0 */
        a.erase(a.begin()); /* line 30 slow_hit_count: 100, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      printf("%d\n", sum); /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
      task.insert(pair<int, int>(t[u] + d[u], -u - 1)); /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
    } else { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      u = -u - 1; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
      a.insert(s[u].begin(), s[u].end()); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
      s[u].clear(); /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slowdown in the given C program, we need to analyze the provided hit count data for the slow and fast inputs. The goal is to identify the lines of code that are executed significantly more often for the slow input, and then determine what conditions are causing these lines to be executed more frequently or inefficiently.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - Line 10: `for (int i = 0; i < n; ++i) a.insert(i + 1);` has 101 hits in the slow input vs. 1 hit in the fast input.
   - Line 27: `for (int i = 0; i < k[u]; ++i)` loop has 101 iterations in the slow input vs. 0 in the fast input.
   - Lines 28, 29, 30: Operations inside the loop in line 27 have 100 hits in the slow input vs. 0 in the fast input.
   - Line 36: `a.insert(s[u].begin(), s[u].end());` has 1 hit in the slow input vs. 0 in the fast input.

2. **Analysis:**
   - The significant difference in hits occurs primarily in the loop beginning at line 27, which deals with allocating servers for tasks. This loop is executed many times in the slow input but not at all in the fast input.
   - The task timing conditions and server availability are likely contributing factors to this behavior. Specifically, the slow input might have a complex pattern of tasks that heavily utilizes server allocation and deallocation, leading to more frequent operations.
   - The slow input requires performing tasks that occupy servers for extended periods, causing repeated checking of available servers and reallocation, which is computationally expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are performance-characterizing invariants in natural language:

1. **High Server Utilization:**
   - **Invariant:** “If the number of required servers for a task (`k`) approaches the total number of servers (`n`), especially when tasks have long durations (`d`), the program may slow down due to the overhead of frequent server allocation and deallocation.”
   - **Explanation:** This invariant captures situations where tasks nearly consume all available resources, leading to increased management overhead for maintaining server availability.

2. **Frequent Task Re-scheduling:**
   - **Invariant:** “If tasks frequently need to be reassigned or rescheduled due to their overlapping durations, performance may degrade as the system continuously reallocates servers.”
   - **Explanation:** This addresses the issue of overlapping task durations, which can cause servers to be reserved or released multiple times, creating significant overhead.

3. **Task Timing and Resource Saturation:**
   - **Invariant:** “Performance degradation can occur when tasks arrive in rapid succession, each requiring a significant fraction of total servers (e.g., `ki` close to `n`), leading to potential task starvation or excessive server management.”
   - **Explanation:** When tasks appear one after the other without sufficient idle time for servers, it results in intensive server management operations, which harms performance.

These invariants help identify conditions under which the program execution path becomes inefficient, allowing for targeted optimizations or early detection of potential bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language performance-characterizing invariants, I will now implement C++ code snippets to check these conditions at runtime.

1. **High Server Utilization Checker:**
   - **Invariant:** If the number of required servers for a task (`k`) approaches the total number of servers (`n`), especially when tasks have long durations (`d`), the program may slow down due to the overhead of frequent server allocation and deallocation.
   
   ```cpp
   void check_server_utilization(int n, int ki, int di) {
       if (ki > n * 0.9 && di > 500) { // 90% of servers and long duration
           cerr << "Warning: High server utilization invariant triggered!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Task Re-scheduling Checker:**
   - **Invariant:** If tasks frequently need to be reassigned or rescheduled due to their overlapping durations, performance may degrade as the system continuously reallocates servers.
   
   ```cpp
   void check_task_rescheduling(int last_t, int current_t, int di) {
       if (current_t <= last_t + di) { // Overlapping task times
           cerr << "Warning: Frequent task rescheduling invariant triggered!" << endl;
           abort();
       }
   }
   ```

3. **Task Timing and Resource Saturation Checker:**
   - **Invariant:** Performance degradation can occur when tasks arrive in rapid succession, each requiring a significant fraction of total servers (e.g., `ki` close to `n`), leading to potential task starvation or excessive server management.
   
   ```cpp
   void check_rapid_task_arrival(int n, int ki, int prev_t, int current_t) {
       if (ki > n * 0.8 && (current_t - prev_t) < 10) { // 80% of servers and rapid arrival
           cerr << "Warning: Task timing and resource saturation invariant triggered!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original C++ Program

Now, we will integrate these checker functions into the original C++ program to monitor the conditions that characterize performance bottlenecks. Ensure that these checks do not significantly degrade performance by placing them outside of tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance-characterizing invariants
void check_server_utilization(int n, int ki, int di) {
    if (ki > n * 0.9 && di > 500) { // 90% of servers and long duration
        cerr << "Warning: High server utilization invariant triggered!" << endl;
        abort();
    }
}

void check_task_rescheduling(int last_t, int current_t, int di) {
    if (current_t <= last_t + di) { // Overlapping task times
        cerr << "Warning: Frequent task rescheduling invariant triggered!" << endl;
        abort();
    }
}

void check_rapid_task_arrival(int n, int ki, int prev_t, int current_t) {
    if (ki > n * 0.8 && (current_t - prev_t) < 10) { // 80% of servers and rapid arrival
        cerr << "Warning: Task timing and resource saturation invariant triggered!" << endl;
        abort();
    }
}

int n, q;
set<int> a;
vector<int> t, k, d;
vector<set<int> > s;
set<pair<int, int> > task;

int main() {
    scanf("%d%d", &n, &q);
    for (int i = 0; i < n; ++i) a.insert(i + 1);
    k.resize(q);
    t = d = k;
    int last_t = 0;

    for (int i = 0; i < q; ++i) {
        scanf("%d%d%d", &t[i], &k[i], &d[i]);
        
        // Insert checkers at strategic points to avoid tight loops
        check_server_utilization(n, k[i], d[i]);
        if (i > 0) {
            check_task_rescheduling(last_t, t[i], d[i - 1]);
            check_rapid_task_arrival(n, k[i], t[i - 1], t[i]);
        }
        
        task.insert(pair<int, int>(t[i], i));
        last_t = t[i];
    }
    
    s.resize(q);
    while (((int)task.size())) {
        int u = task.begin()->second;
        task.erase(task.begin());
        if (u >= 0) {
            if (((int)a.size()) < k[u]) {
                printf("-1\n");
                continue;
            }
            int sum = 0;
            for (int i = 0; i < k[u]; ++i) {
                sum += *a.begin();
                s[u].insert(*a.begin());
                a.erase(a.begin());
            }
            printf("%d\n", sum);
            task.insert(pair<int, int>(t[u] + d[u], -u - 1));
        } else {
            u = -u - 1;
            a.insert(s[u].begin(), s[u].end());
            s[u].clear();
        }
    }
    return 0;
}
```

In this program, the checker functions are placed after input parsing and before the main processing logic to avoid introducing overhead into the main task allocation loop. This setup helps identify potential performance issues early in the execution based on input characteristics.

