system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int z = (int)1e5 + 111;
int t[z], k[z], d[z], dp[111], n, q, j;
int main() {
  scanf("%d%d", &n, &q);
  for (int i = 0; i < q; i++) scanf("%d%d%d", &t[i], &k[i], &d[i]);
  for (int i = 1; i <= (int)1e6; i++) {
    int p = 0, ans = 0;
    while (t[j] < i) j++;
    if (j >= q) break;
    for (int i = 1; i <= n; i++) {
      if (dp[i]) dp[i]--;
      if (!dp[i]) p++;
    }
    if (t[j] > i) continue;
    if (k[j] <= p) {
      for (int i = 1; i <= n; i++)
        if (!dp[i] && k[j]) {
          ans += i;
          dp[i] = d[j];
          k[j]--;
        }
      cout << ans << '\n';
    } else
      cout << -1 << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
1000000 100 1000


(G.2) Fast Input

2 1
6 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int z = (int)1e5 + 111; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int t[z], k[z], d[z], dp[111], n, q, j; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &q); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < q; i++) scanf("%d%d%d", &t[i], &k[i], &d[i]); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= (int)1e6; i++) { /* line 8 slow_hit_count: 1000001, fast_hit_count: 7 */
    int p = 0, ans = 0; /* line 9 slow_hit_count: 1000000, fast_hit_count: 7 */
    while (t[j] < i) j++; /* line 10 slow_hit_count: 1000000, fast_hit_count: 300456 */
    if (j >= q) break; /* line 11 slow_hit_count: 1000000, fast_hit_count: 7 */
    for (int i = 1; i <= n; i++) { /* line 12 slow_hit_count: 101000000, fast_hit_count: 18 */
      if (dp[i]) dp[i]--; /* line 13 slow_hit_count: 100000000, fast_hit_count: 12 */
      if (!dp[i]) p++; /* line 14 slow_hit_count: 100000000, fast_hit_count: 12 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (t[j] > i) continue; /* line 16 slow_hit_count: 1000000, fast_hit_count: 6 */
    if (k[j] <= p) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      for (int i = 1; i <= n; i++) /* line 18 slow_hit_count: 101, fast_hit_count: 3 */
        if (!dp[i] && k[j]) { /* line 19 slow_hit_count: 100, fast_hit_count: 2 */
          ans += i; /* line 20 slow_hit_count: 100, fast_hit_count: 1 */
          dp[i] = d[j]; /* line 21 slow_hit_count: 100, fast_hit_count: 1 */
          k[j]--; /* line 22 slow_hit_count: 100, fast_hit_count: 1 */
        } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      cout << ans << '\n'; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    } else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      cout << -1 << '\n'; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, we need to look at the line-level hit counts and understand how the program processes the inputs. Based on the information provided, we can identify the following insights and conditions that trigger slow performance:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Frequent Loop Iterations:**
   - **Line 8**: The loop iterating from `i = 1` to `1e6` is executed 1,000,001 times for the slow input compared to only 7 times for the fast input. This suggests the loop is a major contributor to the slow performance.
   - **Line 10**: The `while` loop is executed 1,000,000 times for the slow input, indicating heavy iteration to match times in the input.

2. **Operations on Server States:**
   - **Lines 12-14**: These lines manage the state of the servers (`dp[i]` array) and are executed 100,000,000 times in the slow run, compared to only 12 times in the fast run. This implies a significant overhead in maintaining the server states.

3. **Conditional Logic and Breaks:**
   - **Line 11**: The condition to break out of the loop is crucial as it determines when the task processing ends. The slow input might be causing more iterations due to delayed satisfaction of this condition.

4. **Server Allocation:**
   - **Lines 18-22**: These lines handle task allocation to servers and are hit 100 times in the slow input versus just once in the fast input, reflecting the complexity of server allocation for larger tasks.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis, we can derive the following conditions that likely trigger slow execution paths:

1. **High Time Range Iteration:**
   - Natural language description: "The program becomes slow when it needs to iterate over a very large time range, especially when the maximum task arrival time `ti` approaches the upper limit (1,000,000). This causes excessive iterations in the main loop."

2. **High Task Server Requirement:**
   - Natural language description: "Performance degrades when a task requires a number of servers (`ki`) close to the total available servers (`n`), as it leads to complex allocation logic and potentially checks for all servers' availability."

3. **Long Server Occupancy Duration:**
   - Natural language description: "Tasks with long durations (`di`) keep servers occupied for extended periods, increasing the complexity of scheduling subsequent tasks efficiently."

4. **Maximal Time and Server Conditions:**
   - Natural language description: "The program tends to slow down significantly when the maximum time `ti` combined with high server demand (`ki = n`) and long task durations (`di`) pushes towards the constraint limits. This heavily burdens both time iteration and server management logic."

These invariants capture the critical areas where the program's performance is most likely to degrade, particularly when input parameters approach their constraint limits (e.g., maximal `ti`, `ki`, and `di` values). They are formulated to address broader conditions that can trigger slow performance, beyond just the specific slow input provided.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, I will create C++ code snippets that check these conditions at runtime. Here are the checkers for each invariant:

1. **High Time Range Iteration**
   - **Invariant Check:** Check if the maximum task arrival time `ti` is near the upper limit.
   ```cpp
   void check_time_range_invariant(int max_t) {
       if (max_t > 900000) { // Arbitrary threshold close to the upper limit
           cerr << "Warning: Performance bottleneck condition triggered - High time range iteration!" << endl;
           abort();
       }
   }
   ```

2. **High Task Server Requirement**
   - **Invariant Check:** Ensure `ki` is close to `n`, which could cause complex server allocation.
   ```cpp
   void check_server_requirement_invariant(int ki, int n) {
       if (ki > 0.9 * n) { // Arbitrary threshold indicating high server demand
           cerr << "Warning: Performance bottleneck condition triggered - High task server requirement!" << endl;
           abort();
       }
   }
   ```

3. **Long Server Occupancy Duration**
   - **Invariant Check:** Check if the task duration `di` is significantly long.
   ```cpp
   void check_long_duration_invariant(int di) {
       if (di > 500) { // Arbitrary threshold indicating long task duration
           cerr << "Warning: Performance bottleneck condition triggered - Long server occupancy duration!" << endl;
           abort();
       }
   }
   ```

4. **Maximal Time and Server Conditions**
   - **Invariant Check:** Combined check for max time, server demand, and duration.
   ```cpp
   void check_combined_conditions_invariant(int ti, int ki, int di, int n) {
       if (ti > 900000 && ki > 0.8 * n && di > 500) { // Combined condition
           cerr << "Warning: Performance bottleneck condition triggered - Maximal time and server conditions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now, I will integrate these conditional checks at strategic points in the existing C++ program. Here's the instrumented code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int z = (int)1e5 + 111;
int t[z], k[z], d[z], dp[111], n, q, j;

// Function to check high time range iteration
void check_time_range_invariant(int max_t) {
    if (max_t > 900000) {
        cerr << "Warning: Performance bottleneck condition triggered - High time range iteration!" << endl;
        abort();
    }
}

// Function to check high task server requirement
void check_server_requirement_invariant(int ki, int n) {
    if (ki > 0.9 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - High task server requirement!" << endl;
        abort();
    }
}

// Function to check long server occupancy duration
void check_long_duration_invariant(int di) {
    if (di > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - Long server occupancy duration!" << endl;
        abort();
    }
}

// Function to check combined conditions for maximal time and server demands
void check_combined_conditions_invariant(int ti, int ki, int di, int n) {
    if (ti > 900000 && ki > 0.8 * n && di > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - Maximal time and server conditions!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &q);
    int max_t = 0;
    for (int i = 0; i < q; i++) {
        scanf("%d%d%d", &t[i], &k[i], &d[i]);
        max_t = max(max_t, t[i]);
        
        // Check performance invariants
        check_server_requirement_invariant(k[i], n);
        check_long_duration_invariant(d[i]);
        check_combined_conditions_invariant(t[i], k[i], d[i], n);
    }
    
    check_time_range_invariant(max_t);
    
    for (int i = 1; i <= (int)1e6; i++) {
        int p = 0, ans = 0;
        while (t[j] < i) j++;
        if (j >= q) break;
        for (int i = 1; i <= n; i++) {
            if (dp[i]) dp[i]--;
            if (!dp[i]) p++;
        }
        if (t[j] > i) continue;
        if (k[j] <= p) {
            for (int i = 1; i <= n; i++)
                if (!dp[i] && k[j]) {
                    ans += i;
                    dp[i] = d[j];
                    k[j]--;
                }
            cout << ans << '\n';
        } else
            cout << -1 << '\n';
    }
    return 0;
}
```

### Explanation

- **Placement of Checks:** The checks are placed right after reading inputs and before the processing loop to ensure they detect potential bottlenecks without adding overhead inside the loop.
- **Combined Checks:** The combined conditions check is placed to capture scenarios where multiple constraints align to create a slow path.
- **Thresholds:** The thresholds used are arbitrary but carefully chosen to approach constraint limits realistically without being too restrictive or lenient.

