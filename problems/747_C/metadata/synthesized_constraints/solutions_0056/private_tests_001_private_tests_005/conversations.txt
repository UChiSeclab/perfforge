system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int k[1000005], d[1000005], s[1000005], n, q, maxx, freee;
int ti, ki, di;
void settFree(int sec) {
  for (int i = 1; i <= n; ++i)
    if (sec == s[i]) s[i] = 0;
}
int countFree() {
  int ret = 0;
  for (int i = 1; i <= n; ++i)
    if (!s[i]) ++ret;
  return ret;
}
int getAns(int sec, int cnt, int time) {
  int ret = 0, solved = 0;
  for (int i = 1; i <= n; ++i) {
    if (!s[i]) {
      s[i] = sec + time;
      ret += i;
      ++solved;
      if (solved == cnt) return ret;
    }
  }
  return ret;
}
int main() {
  scanf("%d %d", &n, &q);
  for (int i = 1; i <= q; ++i) {
    scanf("%d %d %d", &ti, &ki, &di);
    k[ti] = ki;
    d[ti] = di;
    maxx = max(maxx, ti);
  }
  for (int i = 1; i <= maxx; ++i) {
    settFree(i);
    if (!k[i]) continue;
    freee = countFree();
    if (freee < k[i]) {
      printf("-1\n");
      continue;
    }
    printf("%d\n", getAns(i, k[i], d[i]));
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
1000000 100 1000


(G.2) Fast Input

4 1
6 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int k[1000005], d[1000005], s[1000005], n, q, maxx, freee; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int ti, ki, di; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void settFree(int sec) { /* line 5 slow_hit_count: 1000000, fast_hit_count: 6 */
  for (int i = 1; i <= n; ++i) /* line 6 slow_hit_count: 101000000, fast_hit_count: 30 */
    if (sec == s[i]) s[i] = 0; /* line 7 slow_hit_count: 100000000, fast_hit_count: 24 */
} /* line 8 slow_hit_count: 1000000, fast_hit_count: 6 */
int countFree() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int ret = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) /* line 11 slow_hit_count: 101, fast_hit_count: 5 */
    if (!s[i]) ++ret; /* line 12 slow_hit_count: 100, fast_hit_count: 4 */
  return ret; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int getAns(int sec, int cnt, int time) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int ret = 0, solved = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 17 slow_hit_count: 100, fast_hit_count: 1 */
    if (!s[i]) { /* line 18 slow_hit_count: 100, fast_hit_count: 1 */
      s[i] = sec + time; /* line 19 slow_hit_count: 100, fast_hit_count: 1 */
      ret += i; /* line 20 slow_hit_count: 100, fast_hit_count: 1 */
      ++solved; /* line 21 slow_hit_count: 100, fast_hit_count: 1 */
      if (solved == cnt) return ret; /* line 22 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &q); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= q; ++i) { /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%d %d %d", &ti, &ki, &di); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    k[ti] = ki; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    d[ti] = di; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    maxx = max(maxx, ti); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= maxx; ++i) { /* line 35 slow_hit_count: 1000001, fast_hit_count: 7 */
    settFree(i); /* line 36 slow_hit_count: 1000000, fast_hit_count: 6 */
    if (!k[i]) continue; /* line 37 slow_hit_count: 1000000, fast_hit_count: 6 */
    freee = countFree(); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    if (freee < k[i]) { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
      printf("-1\n"); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", getAns(i, k[i], d[i])); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts between the fast and slow runs, we can pinpoint areas where performance bottlenecks occur:

1. **Function `settFree`**:
   - **Line 6** (`for (int i = 1; i <= n; ++i)`): This line is hit 101,000,000 times in the slow run compared to 30 times in the fast run. It's part of a nested loop that checks each second if a server is free by comparing it to an array `s` that marks the time until each server is busy.
   - **Line 7** (`if (sec == s[i]) s[i] = 0;`): This condition checks and resets each server's busy status. In the slow run, it's executed 100,000,000 times, indicating extensive and repeated processing.

2. **Loop in `main`**:
   - **Line 35** (`for (int i = 1; i <= maxx; ++i)`): This loop iterates over each second until the last task time `maxx`. It runs 1,000,001 times for the slow input, reflecting the high task time.

This analysis suggests that the main performance bottleneck arises from processing each second of time, especially when the task time `ti` is large, leading to extensive iterations and checks even when no task occurs at most times.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, we can now generate natural language descriptions of the conditions under which the code tends to slow down:

1. **High Task Time (`ti`) and Long Duration (`di`)**:
   - **Invariant**: When the task time `ti` is significantly large in comparison to the number of servers `n`, and the duration `di` is considerable, the function `settFree` repeatedly iterates through time units without actual task processing, leading to inefficiencies.
   - **Natural Language Description**: "If the time `ti` is extensively large and duration `di` is long, the program may enter a time-intensive loop checking server availability unnecessarily, thus slowing performance."

2. **Excessive Loop Iterations Over Time**:
   - **Invariant**: If `maxx`, the maximum task time, is significantly large with respect to the number of tasks `q`, the main loop will iterate over many time units with minimal task processing, causing a substantial overhead.
   - **Natural Language Description**: "When the maximum task time `maxx` is substantially larger than the number of tasks `q`, the program may undergo excessive iteration over time units, leading to redundant operations and slow execution."

These statements encapsulate scenarios where the program becomes inefficient due to the nature of the input, particularly related to time and duration, without relying on specific numeric values from the slow input, respecting the constraints of `n <= 100` and `q <= 100,000`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from 1 to n.

It is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti — the moment in seconds in which the task will come, ki — the number of servers needed to perform it, and di — the time needed to perform this task in seconds. All ti are distinct.

To perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.

Write the program that determines which tasks will be performed and which will be ignored.

Input

The first line contains two positive integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 105) — the number of servers and the number of tasks. 

Next q lines contains three integers each, the i-th line contains integers ti, ki and di (1 ≤ ti ≤ 106, 1 ≤ ki ≤ n, 1 ≤ di ≤ 1000) — the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. 

Output

Print q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.

Examples

Input

4 3
1 3 2
2 2 1
3 4 3


Output

6
-1
10


Input

3 2
3 2 3
5 1 2


Output

3
3


Input

8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8


Output

6
9
30
-1
15
36

Note

In the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).

In the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as Checker Code in C++

Based on the natural language invariants derived, we will implement two checker functions to detect potential performance bottlenecks.

1. **Invariant Check for High Task Time (`ti`) and Long Duration (`di`)**:
   - We will create a checker to ensure that if the task time `ti` is significantly large relative to a reasonable threshold (e.g., `10^6` seconds) and simultaneously if the duration `di` is lengthy, we will recognize this as a potential bottleneck. 

2. **Invariant Check for Excessive Loop Iterations Over Time**:
   - We will place a checker to ensure that if the maximum task time `maxx` significantly exceeds the number of tasks `q`, it indicates excessive iterations over non-task time points.

Here is the C++ code for these checkers:

```cpp
void check_task_time_invariant(int ti, int di) {
    if (ti > 1000000 && di > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - high task time and long duration!" << endl;
        abort();
    }
}

void check_excessive_iterations_invariant(int maxx, int q) {
    if (maxx > 10 * q) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations over time!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Original Program

Now, we will integrate these checkers into the original C++ code. The check for high task time and long duration will be inserted after reading each task input, and the check for excessive iterations will be inserted after processing all tasks to determine `maxx`.

Here is the instrumented C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int k[1000005], d[1000005], s[1000005], n, q, maxx, freee;
int ti, ki, di;

// Checker function for high task time and long duration
void check_task_time_invariant(int ti, int di) {
    if (ti > 1000000 && di > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - high task time and long duration!" << endl;
        abort();
    }
}

// Checker function for excessive loop iterations
void check_excessive_iterations_invariant(int maxx, int q) {
    if (maxx > 10 * q) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations over time!" << endl;
        abort();
    }
}

void settFree(int sec) {
    for (int i = 1; i <= n; ++i)
        if (sec == s[i]) s[i] = 0;
}

int countFree() {
    int ret = 0;
    for (int i = 1; i <= n; ++i)
        if (!s[i]) ++ret;
    return ret;
}

int getAns(int sec, int cnt, int time) {
    int ret = 0, solved = 0;
    for (int i = 1; i <= n; ++i) {
        if (!s[i]) {
            s[i] = sec + time;
            ret += i;
            ++solved;
            if (solved == cnt) return ret;
        }
    }
    return ret;
}

int main() {
    scanf("%d %d", &n, &q);
    for (int i = 1; i <= q; ++i) {
        scanf("%d %d %d", &ti, &ki, &di);
        k[ti] = ki;
        d[ti] = di;
        maxx = max(maxx, ti);

        // Check for high task time and long duration
        check_task_time_invariant(ti, di);
    }

    // Check for excessive iterations based on maxx and q
    check_excessive_iterations_invariant(maxx, q);

    for (int i = 1; i <= maxx; ++i) {
        settFree(i);
        if (!k[i]) continue;
        freee = countFree();
        if (freee < k[i]) {
            printf("-1\n");
            continue;
        }
        printf("%d\n", getAns(i, k[i], d[i]));
    }
    return 0;
}
```

### Explanation

- **Task Time and Duration Check**: The checker `check_task_time_invariant` verifies each task's time and duration right after reading the task input. If both conditions are met, it issues a warning and aborts.
- **Excessive Iterations Check**: The checker `check_excessive_iterations_invariant` is placed after the task inputs are processed to evaluate whether the system is likely to perform excessive iterations over time slots.

These checks help ensure that performance bottlenecks are identified early, and they efficiently integrate into the existing program without adding overhead to performance-critical loops.

