system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
long long m;
int t[50];
long long dp[50][2505];
int main(void) {
  scanf("%d%d%lld", &n, &k, &m);
  for (int i = 0; i < k; i++) {
    scanf("%d", &t[i]);
  }
  sort(t, t + k);
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= n * (k + 1); j++) {
      dp[i][j] = 1000000000007;
    }
  }
  dp[0][0] = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j <= i * (k + 1); j++) {
      if (dp[i][j] < 1000000000007) {
        long long cost = 0;
        for (int a = 0; a <= k; a++) {
          dp[i + 1][j + a + (a == k ? 1 : 0)] =
              min(dp[i + 1][j + a + (a == k ? 1 : 0)], dp[i][j] + cost);
          cost += (long long)t[a];
        }
      }
    }
  }
  int res = 0;
  for (int i = 0; i <= (k + 1) * n; i++) {
    if (m >= dp[n][i]) {
      res = max(res, i);
    }
  }
  printf("%d\n", res);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

32 6 635
3 4 2 1 7 7


(G.2) Fast Input

1 2 17
3 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int t[50]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[50][2505]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%lld", &n, &k, &m); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < k; i++) { /* line 9 slow_hit_count: 7, fast_hit_count: 3 */
    scanf("%d", &t[i]); /* line 10 slow_hit_count: 6, fast_hit_count: 2 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  sort(t, t + k); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= n; i++) { /* line 13 slow_hit_count: 34, fast_hit_count: 3 */
    for (int j = 0; j <= n * (k + 1); j++) { /* line 14 slow_hit_count: 7458, fast_hit_count: 10 */
      dp[i][j] = 1000000000007; /* line 15 slow_hit_count: 7425, fast_hit_count: 8 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][0] = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 19 slow_hit_count: 33, fast_hit_count: 2 */
    for (int j = 0; j <= i * (k + 1); j++) { /* line 20 slow_hit_count: 3536, fast_hit_count: 2 */
      if (dp[i][j] < 1000000000007) { /* line 21 slow_hit_count: 3504, fast_hit_count: 1 */
        long long cost = 0; /* line 22 slow_hit_count: 3473, fast_hit_count: 1 */
        for (int a = 0; a <= k; a++) { /* line 23 slow_hit_count: 27784, fast_hit_count: 4 */
          dp[i + 1][j + a + (a == k ? 1 : 0)] = /* line 24 slow_hit_count: 24311, fast_hit_count: 3 */
              min(dp[i + 1][j + a + (a == k ? 1 : 0)], dp[i][j] + cost); /* line 25 slow_hit_count: 24311, fast_hit_count: 3 */
          cost += (long long)t[a]; /* line 26 slow_hit_count: 24311, fast_hit_count: 3 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= (k + 1) * n; i++) { /* line 32 slow_hit_count: 226, fast_hit_count: 5 */
    if (m >= dp[n][i]) { /* line 33 slow_hit_count: 225, fast_hit_count: 4 */
      res = max(res, i); /* line 34 slow_hit_count: 196, fast_hit_count: 3 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", res); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the code and derive performance-characterizing invariants, we need to focus on identifying code segments where the performance differs significantly between the fast and slow inputs. We will then deduce conditions under which the program tends to slow down.

### Phase 1: Identify Expensive or Inefficient Code Segments

Let's compare line-level hit counts for both fast and slow inputs:

1. **Initialization of `dp` array (lines 13-15):**
   - Slow input hit count: 7458
   - Fast input hit count: 10
   - This indicates that the initialization of the `dp` array is heavily affected by the size of the problem parameters `n` and `k`.

2. **Dynamic programming table updates (lines 19-30):**
   - Particularly lines 23-26 show a significant difference in hit counts (slow: 27784, fast: 4).
   - This indicates that the loop for updating the `dp` table is executed much more frequently, likely due to larger values of `n` and `k`.

3. **Final computation of result (lines 32-34):**
   - Slow input hit counts are higher, indicating that the range of indices in the loop is larger.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Dynamic Programming Initialization:**
   - Natural Language Description: "If the number of tasks `n` and the number of subtasks `k` are both large, the initialization of the dynamic programming table may cause performance degradation due to the quadratic increase in table size."
   - This is because the `dp` table is initialized for size `(n+1) x (n*(k+1)+1)`, leading to many operations when both `n` and `k` are maximized at their constraints.

2. **Frequent Updates in Dynamic Programming Table:**
   - Natural Language Description: "When `n` and `k` are large, the dynamic programming updates involve nested loops that result in a large number of operations, especially as the range of possible points grows."
   - The inner loop iterates over possible numbers of points, which increases significantly with larger `n` and `k`.

3. **High Number of Possible Points:**
   - Natural Language Description: "If the maximum potential points (`n*(k+1)`) are high, the evaluation of possible points can become extensive, especially towards higher indices in the `dp` table."
   - This involves running over a potentially large range of indices for which the program checks conditions leading to more computations.

These invariants describe the conditions under which the program is likely to slow down, emphasizing the impact of input size and the structure of the dynamic programming table on performance. They also highlight the importance of constraints `n` and `k` in determining the computational load of the algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived:

#### Invariant 1: Dynamic Programming Initialization
```cpp
void check_dp_initialization(int n, int k) {
    if ((n * (k + 1)) > 1000) { // This threshold is arbitrary; adjust based on performance testing
        cerr << "Warning: Performance bottleneck condition triggered due to large DP table initialization!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Updates in Dynamic Programming Table
```cpp
void check_dp_updates(int n, int k) {
    if ((n * (k + 1) * k) > 10000) { // This threshold reflects the large number of operations in nested loops
        cerr << "Warning: Performance bottleneck condition triggered due to excessive DP updates!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Number of Possible Points
```cpp
void check_possible_points(int n, int k) {
    if ((n * (k + 1)) > 1000) { // Again, this threshold is arbitrary and should be adjusted with testing
        cerr << "Warning: Performance bottleneck condition triggered due to high number of possible points!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, integrate these checks into the existing C++ code at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check the DP initialization bottleneck
void check_dp_initialization(int n, int k) {
    if ((n * (k + 1)) > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large DP table initialization!" << endl;
        abort();
    }
}

// Function to check the DP updates bottleneck
void check_dp_updates(int n, int k) {
    if ((n * (k + 1) * k) > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive DP updates!" << endl;
        abort();
    }
}

// Function to check the possible points bottleneck
void check_possible_points(int n, int k) {
    if ((n * (k + 1)) > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high number of possible points!" << endl;
        abort();
    }
}

int n, k;
long long m;
int t[50];
long long dp[50][2505];

int main(void) {
    scanf("%d%d%lld", &n, &k, &m);

    // Insert checks after reading inputs
    check_dp_initialization(n, k); // Check for DP initialization bottleneck
    check_dp_updates(n, k);        // Check for DP updates bottleneck
    check_possible_points(n, k);   // Check for possible points bottleneck

    for (int i = 0; i < k; i++) {
        scanf("%d", &t[i]);
    }
    sort(t, t + k);
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= n * (k + 1); j++) {
            dp[i][j] = 1000000000007;
        }
    }
    dp[0][0] = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i * (k + 1); j++) {
            if (dp[i][j] < 1000000000007) {
                long long cost = 0;
                for (int a = 0; a <= k; a++) {
                    dp[i + 1][j + a + (a == k ? 1 : 0)] =
                        min(dp[i + 1][j + a + (a == k ? 1 : 0)], dp[i][j] + cost);
                    cost += (long long)t[a];
                }
            }
        }
    }
    int res = 0;
    for (int i = 0; i <= (k + 1) * n; i++) {
        if (m >= dp[n][i]) {
            res = max(res, i);
        }
    }
    printf("%d\n", res);
    return 0;
}
```

### Explanation

- **`check_dp_initialization`**: Called right after input reading to check if the DP table initialization might be too large.
- **`check_dp_updates`**: Ensures that the frequent updates in the DP table do not cause excessive computation.
- **`check_possible_points`**: Ensures that managing potential points does not lead to excessive looping or calculation.

These checks are placed outside of the critical loops to avoid impacting performance, yet effectively catch scenarios that could lead to a slowdown.

