system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, m, x[50], ta;
long long dp[50 * 50 + 1];
int main() {
  scanf("%d%d%d", &n, &k, &m);
  for (int i = 1; i <= k; i++) scanf("%d", x + i);
  sort(x + 1, x + k + 1);
  for (int i = 1; i <= k; i++) x[i] += x[i - 1];
  m++;
  dp[0] = 1;
  for (int i = 0; i < n; i++)
    for (int j = 2500; j >= 0; j--)
      if (dp[j])
        for (int kk = 1; kk <= k; kk++) {
          ta = kk;
          if (kk == k) ta++;
          if (!dp[j + ta] || dp[j + ta] > dp[j] + x[kk])
            dp[j + ta] = dp[j] + x[kk];
        }
  for (int i = 2500; i >= 0; i--)
    if (dp[i] && dp[i] <= m) {
      printf("%d\n", i);
      return 0;
    }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40 1 8
3


(G.2) Fast Input

1 1 3
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, m, x[50], ta; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[50 * 50 + 1]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &k, &m); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) scanf("%d", x + i); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  sort(x + 1, x + k + 1); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) x[i] += x[i - 1]; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  m++; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0] = 1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) /* line 12 slow_hit_count: 41, fast_hit_count: 2 */
    for (int j = 2500; j >= 0; j--) /* line 13 slow_hit_count: 100080, fast_hit_count: 2502 */
      if (dp[j]) /* line 14 slow_hit_count: 100040, fast_hit_count: 2501 */
        for (int kk = 1; kk <= k; kk++) { /* line 15 slow_hit_count: 1640, fast_hit_count: 2 */
          ta = kk; /* line 16 slow_hit_count: 820, fast_hit_count: 1 */
          if (kk == k) ta++; /* line 17 slow_hit_count: 820, fast_hit_count: 1 */
          if (!dp[j + ta] || dp[j + ta] > dp[j] + x[kk]) /* line 18 slow_hit_count: 820, fast_hit_count: 1 */
            dp[j + ta] = dp[j] + x[kk]; /* line 19 slow_hit_count: 40, fast_hit_count: 1 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2500; i >= 0; i--) /* line 21 slow_hit_count: 2497, fast_hit_count: 2499 */
    if (dp[i] && dp[i] <= m) { /* line 22 slow_hit_count: 2497, fast_hit_count: 2499 */
      printf("%d\n", i); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants from the given C program and input scenarios, we need to focus on the difference in hit counts between the slow and fast inputs.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The nested loop starting at line 12 shows a significant difference in hit counts:
     - `for (int i = 0; i < n; i++)` (Line 12) has hit counts of 41 for the slow input and 2 for the fast input.
     - `for (int j = 2500; j >= 0; j--)` (Line 13) is executed 100080 times for the slow input versus 2502 for the fast input.
     - `if (dp[j])` (Line 14) is checked 100040 times for the slow input against 2501 for the fast input.
     - The innermost loop `for (int kk = 1; kk <= k; kk++)` (Line 15) is hit 1640 times for the slow input compared to 2 for the fast input.

2. **Inference on Data Structure Interaction**:
   - The `dp` array is recomputed extensively due to nested loops, especially the combination of lines 12, 13, and 15. This shows how `dp` updates are performed with a significant amount of redundant calculations under certain conditions (e.g., when `n` is large).

3. **Constraints**:
   - The number of tasks `n` and subtasks `k` directly relate to the nested loop depths causing a combinatorial explosion in potential operations on the `dp` array.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant 1: High Value of `n`**:
   - **Natural Language Statement**: "When the number of tasks `n` is large, the nested loops cause a significant overhead in processing time due to repeated updates of the `dp` array. This is especially critical when `k` is also large, leading to an exponential increase in iterations."
   - **Condition**: This condition is likely to trigger when `n` is near its upper limit relative to the problem's constraints (e.g., `n` close to 45).

2. **Invariant 2: High `k` and Deep Nested Loops**:
   - **Natural Language Statement**: "If both `n` and `k` are maximized, the nested loops over tasks and subtasks result in extensive recomputation within the dynamic programming table, slowing down execution significantly."
   - **Condition**: This condition is particularly triggered when both `n` and `k` are large, suggesting a scenario where the product `n * k` approaches 2025 (the square of the maximum allowed).

3. **Invariant 3: Insufficient Time `M`**:
   - **Natural Language Statement**: "When the available time `M` is significantly lower than the time required to solve a full subtask cycle, repetitive attempts to check conditions within loops slow down the program."
   - **Condition**: This scenario occurs when `M` is small relative to the cumulative time needed to solve several full sets of subtasks across multiple tasks.

4. **Invariant 4: Large `dp` Array Operations**:
   - **Natural Language Statement**: "If operations on the `dp` array are repeatedly executed across large sections of the array, processing time increases, especially when many elements must be reconsidered in each iteration."
   - **Condition**: This is evident when `dp` operations (like setting new values) occur frequently, as seen in cases where `j` spans its full range often.

By establishing these invariants, we gain an understanding of the conditions under which the code enters a slow path, aligning with the constraints and characteristics of the problem statement while avoiding reliance on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Transforming Invariants into C++ Code

Here are the C++ checkers for the performance-characterizing invariants we derived:

#### Invariant 1: High Value of `n`
```cpp
void check_high_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High 'n' value invariant triggered - many tasks causing overhead" << endl;
        abort();
    }
}
```

#### Invariant 2: High `k` and Deep Nested Loops
```cpp
void check_high_k_and_nested_loops_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High 'k' and nested loops invariant triggered - extensive recomputation" << endl;
        abort();
    }
}
```

#### Invariant 3: Insufficient Time `M`
```cpp
void check_insufficient_time_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Insufficient time invariant triggered - inadequate time for tasks" << endl;
        abort();
    }
}
```

#### Invariant 4: Large `dp` Array Operations
```cpp
void check_large_dp_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Large 'dp' operations invariant triggered - extensive operations on dp array" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Integrate the checkers at appropriate locations in the program to ensure they do not add unnecessary overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;
int n, k, m, x[50], ta;
long long dp[50 * 50 + 1];

// Invariant Checker Functions
void check_high_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High 'n' value invariant triggered - many tasks causing overhead" << endl;
        abort();
    }
}

void check_high_k_and_nested_loops_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High 'k' and nested loops invariant triggered - extensive recomputation" << endl;
        abort();
    }
}

void check_insufficient_time_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Insufficient time invariant triggered - inadequate time for tasks" << endl;
        abort();
    }
}

void check_large_dp_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Large 'dp' operations invariant triggered - extensive operations on dp array" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d", &n, &k, &m);
    for (int i = 1; i <= k; i++) scanf("%d", x + i);
    sort(x + 1, x + k + 1);
    for (int i = 1; i <= k; i++) x[i] += x[i - 1];
    m++;

    // Check for high 'n' value invariant (potential overhead from many tasks)
    check_high_n_invariant(n > 40);

    // Check for high 'k' and nested loops invariant (extensive recomputation)
    check_high_k_and_nested_loops_invariant(n * k > 2000);

    // Check for insufficient time invariant (not enough time for all tasks)
    check_insufficient_time_invariant(m < n);

    dp[0] = 1;
    for (int i = 0; i < n; i++)
        for (int j = 2500; j >= 0; j--)
            if (dp[j])
                for (int kk = 1; kk <= k; kk++) {
                    ta = kk;
                    if (kk == k) ta++;
                    if (!dp[j + ta] || dp[j + ta] > dp[j] + x[kk])
                        dp[j + ta] = dp[j] + x[kk];
                }

    // Check for large 'dp' operations invariant (extensive operations on dp array)
    check_large_dp_operations_invariant(n * k * 2500 > 100000);

    for (int i = 2500; i >= 0; i--)
        if (dp[i] && dp[i] <= m) {
            printf("%d\n", i);
            return 0;
        }
    return 0;
}
```

**Explanation**:
- **Invariant 1**: Check is placed after input parsing to detect scenarios with a large number of tasks.
- **Invariant 2**: Placed after input sorting and prefix sum preparation to ensure nested loop repercussions are caught.
- **Invariant 3**: Ensures that the available time `M` is enough to make substantial progress in solving tasks.
- **Invariant 4**: Before searching the `dp` array, ensure we don't incur excessive recomputation costs.

