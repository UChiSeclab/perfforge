system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxN = 50;
const long long INF = (long long)1e18;
long long dp[maxN][maxN * maxN], a[maxN], sum[maxN];
void upd(long long& a, long long b) { a = min(a, b); }
int main() {
  ios_base::sync_with_stdio(false);
  int n, k, M;
  cin >> n >> k >> M;
  for (int i = 1; i <= k; ++i) cin >> a[i];
  sort(a + 1, a + k + 1);
  sum[0] = 0;
  for (int i = 1; i <= k; ++i) sum[i] = sum[i - 1] + a[i];
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= n * (k + 1); ++j) {
      dp[i][j] = INF;
    }
  }
  dp[0][0] = 0;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j <= (k + 1) * n; ++j) {
      if (dp[i][j] == INF) continue;
      for (int ne = 0; ne <= k; ++ne) {
        upd(dp[i + 1][j + ne + (ne == k)], dp[i][j] + sum[ne]);
      }
    }
  }
  int ans = -1;
  for (int i = 0; i <= (k + 1) * n; ++i) {
    if (dp[n][i] <= M) ans = max(ans, i);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

32 6 635
3 4 2 1 7 7


(G.2) Fast Input

1 2 17
3 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 50; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = (long long)1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[maxN][maxN * maxN], a[maxN], sum[maxN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void upd(long long& a, long long b) { a = min(a, b); } /* line 6 slow_hit_count: 24311, fast_hit_count: 3 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k, M; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k >> M; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; ++i) cin >> a[i]; /* line 11 slow_hit_count: 7, fast_hit_count: 3 */
  sort(a + 1, a + k + 1); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  sum[0] = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; ++i) sum[i] = sum[i - 1] + a[i]; /* line 14 slow_hit_count: 7, fast_hit_count: 3 */
  for (int i = 0; i <= n; ++i) { /* line 15 slow_hit_count: 34, fast_hit_count: 3 */
    for (int j = 0; j <= n * (k + 1); ++j) { /* line 16 slow_hit_count: 7458, fast_hit_count: 10 */
      dp[i][j] = INF; /* line 17 slow_hit_count: 7425, fast_hit_count: 8 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][0] = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 21 slow_hit_count: 33, fast_hit_count: 2 */
    for (int j = 0; j <= (k + 1) * n; ++j) { /* line 22 slow_hit_count: 7232, fast_hit_count: 5 */
      if (dp[i][j] == INF) continue; /* line 23 slow_hit_count: 7200, fast_hit_count: 4 */
      for (int ne = 0; ne <= k; ++ne) { /* line 24 slow_hit_count: 27784, fast_hit_count: 4 */
        upd(dp[i + 1][j + ne + (ne == k)], dp[i][j] + sum[ne]); /* line 25 slow_hit_count: 24311, fast_hit_count: 3 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = -1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= (k + 1) * n; ++i) { /* line 30 slow_hit_count: 226, fast_hit_count: 5 */
    if (dp[n][i] <= M) ans = max(ans, i); /* line 31 slow_hit_count: 225, fast_hit_count: 4 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the given C program and derive potential reasons for the slowdown on the slow input, we will proceed through the outlined phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Comparison:**
   - The line `upd(long long& a, long long b) { a = min(a, b); }` (line 6) is called significantly more times in the slow input (24,311 times) compared to the fast input (3 times).
   - The nested loop starting at `for (int i = 0; i < n; ++i)` (line 21) and its inner loops, particularly the segment around line 25, show high hit counts in the slow input, indicating many iterations.
   - Line `dp[i][j] = INF;` (line 17) and `if (dp[i][j] == INF) continue;` (line 23) suggest a considerable amount of time is spent initializing and checking conditions in these loops.

2. **Inference on Code Interaction:**
   - The nested loops iterate over possible combinations of tasks and subtasks. The hit count on `upd` indicates that the dynamic programming (DP) updates are performed many times, which suggests that the state space explored (`dp[i][j]`) is large for the slow input.
   - The program is trying to optimize the number of points Polycarp earns by selecting which subtasks to complete within time constraints, leading to many DP state updates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the program's behavior and constraints, the following invariants describe conditions under which the program is likely to run slowly:

1. **High Number of Subtask Combinations:**
   - **Invariant:** "When both the number of tasks `n` and the number of subtasks `k` are relatively large and the sum of times for subtasks `tj` allows for many combinations of subtasks to fill the available time `M`, the computational overhead increases due to numerous dynamic programming state updates."
   - **Reasoning:** In the slow input, `n=32` and `k=6` create a large state space for the DP table, leading to extensive iterations to find the optimal solution.

2. **Considerable Time Allocation for Subtasks:**
   - **Invariant:** "If the available time `M` is sufficiently large to allow for many permutations of subtask completions across multiple tasks, the execution time increases because the program evaluates numerous possibilities to maximize points."
   - **Reasoning:** When `M` is large relative to the time required for subtasks, many configurations can potentially maximize the score, causing the program to explore a large state space.

3. **DP Table Saturation in High-Dimensional Space:**
   - **Invariant:** "With a high number of tasks `n` and subtasks `k`, the dynamic programming table filled during execution becomes extensive, leading to slower performance due to frequent state updates and checks."
   - **Reasoning:** The slow input situations indicate that the DP table is heavily utilized, and the size and complexity of updating this table directly impact performance.

These invariants suggest that performance issues are related to the size of the problem space determined by `n`, `k`, and `M`, as well as the time values `tj` that allow for numerous subtask combinations. The code's efficiency can degrade significantly when these parameters lead to an extensive exploration of the state space.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the natural language invariants derived in Phase 2 into C++ code that can be used for runtime checks.

1. **Invariant 1**: High Number of Subtask Combinations
   - **Check Description**: When both `n` and `k` are relatively large and allow for many combinations of subtasks to fill the available time `M`, the computational overhead increases.
   - **C++ Code**:
   ```cpp
   void check_combination_invariant(int n, int k, int M, const std::vector<long long>& a) {
       long long totalTime = 0;
       for (int time : a) totalTime += time;
       if (n > 30 && k > 5 && totalTime > M) {
           cerr << "Warning: combination_invariant triggered - too many subtask combinations possible" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2**: Considerable Time Allocation for Subtasks
   - **Check Description**: If `M` is sufficiently large to allow many permutations of subtask completions across multiple tasks, performance may degrade.
   - **C++ Code**:
   ```cpp
   void check_time_allocation_invariant(int M, const std::vector<long long>& a) {
       if (M > 1000000 && a.size() > 5) {
           cerr << "Warning: time_allocation_invariant triggered - substantial time for subtasks" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3**: DP Table Saturation in High-Dimensional Space
   - **Check Description**: With a high number of tasks `n` and subtasks `k`, the DP table becomes extensive.
   - **C++ Code**:
   ```cpp
   void check_dp_table_invariant(int n, int k) {
       if (n * k > 100) {
           cerr << "Warning: dp_table_invariant triggered - extensive DP table size" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, we will integrate the checker functions into the given C++ code. We will place the checks after reading the inputs and before entering heavy computation loops to avoid overhead within critical parts of the code.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxN = 50;
const long long INF = (long long)1e18;
long long dp[maxN][maxN * maxN], a[maxN], sum[maxN];

void upd(long long& a, long long b) { a = min(a, b); }

// Invariant checkers
void check_combination_invariant(int n, int k, int M, const vector<long long>& a) {
    long long totalTime = 0;
    for (int time : a) totalTime += time;
    if (n > 30 && k > 5 && totalTime > M) {
        cerr << "Warning: combination_invariant triggered - too many subtask combinations possible" << endl;
        abort();
    }
}

void check_time_allocation_invariant(int M, const vector<long long>& a) {
    if (M > 1000000 && a.size() > 5) {
        cerr << "Warning: time_allocation_invariant triggered - substantial time for subtasks" << endl;
        abort();
    }
}

void check_dp_table_invariant(int n, int k) {
    if (n * k > 100) {
        cerr << "Warning: dp_table_invariant triggered - extensive DP table size" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    int n, k, M;
    cin >> n >> k >> M;
    
    vector<long long> a(k + 1);
    for (int i = 1; i <= k; ++i) cin >> a[i];
    
    // Insert invariants checks after input
    check_combination_invariant(n, k, M, a);
    check_time_allocation_invariant(M, a);
    check_dp_table_invariant(n, k);
    
    sort(a.begin() + 1, a.end());
    sum[0] = 0;
    for (int i = 1; i <= k; ++i) sum[i] = sum[i - 1] + a[i];
    
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= n * (k + 1); ++j) {
            dp[i][j] = INF;
        }
    }
    dp[0][0] = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j <= (k + 1) * n; ++j) {
            if (dp[i][j] == INF) continue;
            for (int ne = 0; ne <= k; ++ne) {
                upd(dp[i + 1][j + ne + (ne == k)], dp[i][j] + sum[ne]);
            }
        }
    }
    int ans = -1;
    for (int i = 0; i <= (k + 1) * n; ++i) {
        if (dp[n][i] <= M) ans = max(ans, i);
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed after reading the inputs but before executing the main DP logic. This ensures that the checks do not add overhead within the critical loops.
- **Checks**: Each checker function evaluates a specific invariant condition and terminates the program with a warning if the invariant is triggered.
- **Utility**: These checks can help a fuzzer or a developer identify potential performance bottlenecks early in the execution process.

