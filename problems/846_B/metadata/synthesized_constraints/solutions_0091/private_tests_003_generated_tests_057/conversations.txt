system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, k, m;
long long M[50][2500];
long long A[50], V[50];
int main() {
  long long p, i, j, maxim = 0, x, sum = 0;
  cin >> n >> k >> m;
  for (p = 1; p <= n * (k + 1); p++) M[1][p] = 1e15;
  for (i = 1; i <= k; i++) {
    cin >> V[i];
  }
  sort(V + 1, V + k + 1);
  for (i = 1; i <= k; i++) {
    x = V[i];
    sum += x;
    A[i] = sum;
    if (i == k)
      M[1][k + 1] = sum;
    else
      M[1][i] = sum;
  }
  for (i = 2; i <= n; i++) {
    for (p = 1; p <= n * (k + 1); p++) {
      M[i][p] = M[i - 1][p];
      for (j = 1; j < k; j++) {
        if (p - j < 1) break;
        if (M[i - 1][p - j]) M[i][p] = min(M[i][p], M[i - 1][p - j] + A[j]);
      }
      if (p - k - 1 > 0 && M[i - 1][p - k - 1])
        M[i][p] = min(M[i][p], M[i - 1][p - k - 1] + A[k]);
    }
  }
  for (p = 1; p <= n * (k + 1); p++) {
    if (M[n][p] <= m) maxim = p;
  }
  cout << maxim;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

32 6 635
3 4 2 1 7 7


(G.2) Fast Input

1 2 17
3 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long M[50][2500]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long A[50], V[50]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long p, i, j, maxim = 0, x, sum = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k >> m; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (p = 1; p <= n * (k + 1); p++) M[1][p] = 1e15; /* line 9 slow_hit_count: 225, fast_hit_count: 4 */
  for (i = 1; i <= k; i++) { /* line 10 slow_hit_count: 7, fast_hit_count: 3 */
    cin >> V[i]; /* line 11 slow_hit_count: 6, fast_hit_count: 2 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  sort(V + 1, V + k + 1); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= k; i++) { /* line 14 slow_hit_count: 7, fast_hit_count: 3 */
    x = V[i]; /* line 15 slow_hit_count: 6, fast_hit_count: 2 */
    sum += x; /* line 16 slow_hit_count: 6, fast_hit_count: 2 */
    A[i] = sum; /* line 17 slow_hit_count: 6, fast_hit_count: 2 */
    if (i == k) /* line 18 slow_hit_count: 6, fast_hit_count: 2 */
      M[1][k + 1] = sum; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      M[1][i] = sum; /* line 21 slow_hit_count: 5, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 2; i <= n; i++) { /* line 23 slow_hit_count: 32, fast_hit_count: 1 */
    for (p = 1; p <= n * (k + 1); p++) { /* line 24 slow_hit_count: 6975, fast_hit_count: 0 */
      M[i][p] = M[i - 1][p]; /* line 25 slow_hit_count: 6944, fast_hit_count: 0 */
      for (j = 1; j < k; j++) { /* line 26 slow_hit_count: 41199, fast_hit_count: 0 */
        if (p - j < 1) break; /* line 27 slow_hit_count: 34410, fast_hit_count: 0 */
        if (M[i - 1][p - j]) M[i][p] = min(M[i][p], M[i - 1][p - j] + A[j]); /* line 28 slow_hit_count: 34255, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (p - k - 1 > 0 && M[i - 1][p - k - 1]) /* line 30 slow_hit_count: 6944, fast_hit_count: 0 */
        M[i][p] = min(M[i][p], M[i - 1][p - k - 1] + A[k]); /* line 31 slow_hit_count: 6727, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (p = 1; p <= n * (k + 1); p++) { /* line 34 slow_hit_count: 225, fast_hit_count: 4 */
    if (M[n][p] <= m) maxim = p; /* line 35 slow_hit_count: 224, fast_hit_count: 3 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << maxim; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive Code Segments

Based on the hit count information, we can observe several lines that are executed significantly more often with the slow input compared to the fast input. The key observations are:

1. **Matrix Initialization (Line 9):** This line is executed 225 times with the slow input, but only 4 times with the fast input. This suggests that the initialization of the matrix `M` scales with the size of `n` and `k`.

2. **Nested Loops (Lines 23-31):** The nested loops starting from line 23, particularly lines 24, 25, 26, 28, 30, and 31, are executed thousands of times with the slow input but hardly ever with the fast input. This indicates that the loops are a significant contributor to the slowdown, likely due to the complexity involved in filling up the dynamic programming matrix (M).

3. **Conditions in Inner Loops (Lines 28 and 31):** These lines, where the matrix `M` is updated based on previous values, are key areas where computational effort is concentrated. They are executed tens of thousands of times with the slow input, indicating expensive operations due to repeated evaluations and updates.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive several performance-characterizing invariants that likely contribute to the slowdown:

1. **Invariant on Matrix Size and Nested Loops:**
   - **Natural language description:** "When both `n` and `k` are large, the matrix calculations become significantly expensive due to the nested loops iterating over potential solutions."
   - **Rationale:** The matrix `M` is of size roughly proportional to `n * k`, and the nested loops that populate this matrix have a complexity that can approach `O(n^2 * k^2)`. This is exacerbated by the conditions that check and update potential values, indicating that larger values of `n` and `k` contribute to a slowdown.

2. **Invariant on Dynamic Programming Conditions:**
   - **Natural language description:** "If the number of potential points `n * (k + 1)` is high, the dynamic programming table calculations for updating minimum times become extensive due to repeated evaluations."
   - **Rationale:** The inner loop conditions that update the matrix `M` execute a large number of comparisons and assignments. With increasing `n * (k + 1)`, the conditions in the dynamic programming updates significantly increase computational overhead.

3. **Invariant on Input Constraints and Loop Iterations:**
   - **Natural language description:** "For higher values of `n` close to the maximum constraint of 45, the iterations across multiple tasks significantly increase, leading to performance degradation."
   - **Rationale:** The loop iterating over `n`, combined with the iterations over possible task points `p` and subtasks `j`, results in nested loop complexities that can slow down performance as `n` approaches its upper constraint.

These invariants capture the essence of what triggers the slow path in the program by focusing on the size of the input constraints and the inherent complexity within the nested loops and dynamic programming table updates. They highlight the interaction between input size and algorithmic complexity, which are critical in understanding performance bottlenecks in this solution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

Here are the C++ code snippets to implement the previously derived performance-characteristic invariants:

1. **Invariant on Matrix Size and Nested Loops:**
   ```cpp
   void check_matrix_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large matrix and nested loops!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Dynamic Programming Conditions:**
   ```cpp
   void check_dynamic_programming_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - extensive dynamic programming table!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Input Constraints and Loop Iterations:**
   ```cpp
   void check_input_constraints_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - high input constraints leading to numerous iterations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Here is the complete instrumented C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long n, k, m;
long long M[50][2500];
long long A[50], V[50];

// Checker functions to catch performance bottlenecks
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large matrix and nested loops!" << endl;
        abort();
    }
}

void check_dynamic_programming_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive dynamic programming table!" << endl;
        abort();
    }
}

void check_input_constraints_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high input constraints leading to numerous iterations!" << endl;
        abort();
    }
}

int main() {
    long long p, i, j, maxim = 0, x, sum = 0;
    cin >> n >> k >> m;
    
    // Check for large matrix and nested loops
    check_matrix_invariant(n * (k + 1) > 1000); // Hypothetical threshold

    for (p = 1; p <= n * (k + 1); p++) M[1][p] = 1e15;
    for (i = 1; i <= k; i++) {
        cin >> V[i];
    }
    sort(V + 1, V + k + 1);
    for (i = 1; i <= k; i++) {
        x = V[i];
        sum += x;
        A[i] = sum;
        if (i == k) 
            M[1][k + 1] = sum;
        else 
            M[1][i] = sum;
    }

    for (i = 2; i <= n; i++) {
        // Check for extensive dynamic programming table
        check_dynamic_programming_invariant(i * (k + 1) > 1000); // Hypothetical threshold

        for (p = 1; p <= n * (k + 1); p++) {
            M[i][p] = M[i - 1][p];
            for (j = 1; j < k; j++) {
                if (p - j < 1) break;
                if (M[i - 1][p - j]) M[i][p] = min(M[i][p], M[i - 1][p - j] + A[j]);
            }
            if (p - k - 1 > 0 && M[i - 1][p - k - 1])
                M[i][p] = min(M[i][p], M[i - 1][p - k - 1] + A[k]);
        }
    }

    // Check for high input constraints leading to iterations
    check_input_constraints_invariant(n > 40 && k > 40); // Hypothetical threshold

    for (p = 1; p <= n * (k + 1); p++) {
        if (M[n][p] <= m) maxim = p;
    }
    cout << maxim;
    return 0;
}
```

### Explanation of Checker Integration

- **Matrix Size and Nested Loops Check:** Placed right after reading the input, this check ensures that `n * (k + 1)` does not exceed a size that would indicate potential performance issues due to matrix handling.

- **Dynamic Programming Table Check:** Integrated within the loop that updates the dynamic programming table, ensuring the size of table updates doesn't grow excessively.

- **Input Constraints Check:** Positioned after major input handling to ensure `n` and `k` aren't hitting upper limits that could cause performance degradation due to many iterations.

These checks are placed strategically to catch potential performance issues without affecting the core logic execution.

