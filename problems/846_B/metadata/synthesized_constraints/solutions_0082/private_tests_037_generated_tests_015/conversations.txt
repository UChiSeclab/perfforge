system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int M = 1e9 + 7;
int mxK = 45 * 45 + 100;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, k;
  cin >> n >> k;
  long long m;
  cin >> m;
  vector<long long> A(k);
  for (int i = 0; i < k; ++i) {
    cin >> A[i];
  }
  sort(A.begin(), A.end());
  vector<vector<long long>> dp(n + 1, vector<long long>(mxK, 1e18));
  dp[0][0] = 0;
  long long ans = 0;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j < mxK; ++j) {
      long long cur = 0;
      for (int l = 1, en = min(k, j); l <= en; ++l) {
        cur += A[l - 1];
        dp[i][j] = min(dp[i][j], dp[i - 1][j - l] + cur);
        if (l == k && (j - l - 1 >= 0)) {
          dp[i][j] = min(dp[i][j], dp[i - 1][j - l - 1] + cur);
        }
      }
      if (dp[i][j] <= m) {
        ans = max(ans, j + 0LL);
      }
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3 11
1 1 2


(G.2) Fast Input

3 3 11
1 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int mxK = 45 * 45 + 100; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long m; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> A(k); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < k; ++i) { /* line 13 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> A[i]; /* line 14 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  sort(A.begin(), A.end()); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long>> dp(n + 1, vector<long long>(mxK, 1e18)); /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
  dp[0][0] = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 20 slow_hit_count: 6, fast_hit_count: 4 */
    for (int j = 1; j < mxK; ++j) { /* line 21 slow_hit_count: 10625, fast_hit_count: 6375 */
      long long cur = 0; /* line 22 slow_hit_count: 10620, fast_hit_count: 6372 */
      for (int l = 1, en = min(k, j); l <= en; ++l) { /* line 23 slow_hit_count: 42465, fast_hit_count: 25479 */
        cur += A[l - 1]; /* line 24 slow_hit_count: 31845, fast_hit_count: 19107 */
        dp[i][j] = min(dp[i][j], dp[i - 1][j - l] + cur); /* line 25 slow_hit_count: 31845, fast_hit_count: 19107 */
        if (l == k && (j - l - 1 >= 0)) { /* line 26 slow_hit_count: 31845, fast_hit_count: 19107 */
          dp[i][j] = min(dp[i][j], dp[i - 1][j - l - 1] + cur); /* line 27 slow_hit_count: 10605, fast_hit_count: 6363 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (dp[i][j] <= m) { /* line 30 slow_hit_count: 10620, fast_hit_count: 6372 */
        ans = max(ans, j + 0LL); /* line 31 slow_hit_count: 34, fast_hit_count: 19 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the given C program, we need to identify why the program experiences a slowdown with the slow input compared to the fast input. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison:**
   - The lines with significantly more hits for the slow input compared to the fast input are primarily the nested loops starting at lines 20 and 21.
   - Notably, line 23 (`for (int l = 1, en = min(k, j); l <= en; ++l)`) has the most discrepancy in hit counts: 42,465 for the slow input versus 25,479 for the fast input. This indicates that the nested loop is a major contributor to the slowdown.
   - Subsequent lines (24, 25, 26, and 27) also follow this pattern, suggesting the operations inside this loop are repeated significantly more for the slow input.

2. **Data Structure Interaction:**
   - The critical data structure here is the `dp` array, which is being updated frequently. The nested loops interact with this 2D array, leading to significant compute time as the loops iterate over potentially large ranges of `j` and `l`.

3. **Loop Boundaries and Input Constraints:**
   - The slowdown suggests that loop boundaries and the number of iterations within these nested loops are directly influenced by the value of `n`, `k`, and `M` in relation to the subtasks' time complexity, `tj`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, let's generate natural language performance invariants:

1. **Invariant: High Combination of Tasks and Subtasks**
   - **Description:** "When the number of tasks (n) approaches its upper limit combined with a high number of possible points (close to k), the nested loops over tasks and subtasks significantly increase, resulting in more computational effort."
   - This reflects the high iteration counts in the nested loops for the slow input.

2. **Invariant: High Subtask Resolution Time**
   - **Description:** "If the total time required to solve a combination of subtasks for multiple tasks exceeds available time (M), the program repeatedly attempts to calculate optimal solutions across many iterations, leading to a slowdown."
   - This aligns with the increased hit counts in the parts of the code responsible for calculating and comparing times (lines 24–27).

3. **Invariant: Increased Dynamic Programming State Space**
   - **Description:** "An increase in the number of subtasks (`k`) combined with near-maximal task counts results in a large state space for the dynamic programming array, causing slower performance due to frequent state updates and checks."
   - This reflects the repeated updates to the `dp` array (`line 25` and `line 27`).

By focusing these invariants on broader conditions without relying on specific input values, we ensure they apply to a variety of potential slow scenarios within the constraints provided (1 ≤ n, k ≤ 45).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?

Input

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).

The second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task.

Output

Print the maximum amount of points Polycarp can earn in M minutes.

Examples

Input

3 4 11
1 2 3 4


Output

6


Input

5 5 10
1 2 4 8 16


Output

7

Note

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.

Solution (C++ code):
{solution}


assistant: Let's implement the performance checkers based on the invariants we derived earlier. We'll first translate these invariants into C++ checks and then integrate them into the given program.

### Phase 3: Implementing the Invariants as C++ Code

1. **Invariant 1: High Combination of Tasks and Subtasks**
   - **Invariant Check:** When the number of tasks (`n`) approaches its upper limit combined with a high number of potential points (close to `k`), the nested loops over tasks and subtasks significantly increase, resulting in more computational effort.

```cpp
void check_task_subtask_invariant(int n, int k) {
    if (n > 40 && k > 40) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - high combination of tasks and subtasks" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Subtask Resolution Time**
   - **Invariant Check:** If the total time required to solve a combination of subtasks for multiple tasks exceeds available time (`M`), the program repeatedly attempts to calculate optimal solutions across many iterations, leading to a slowdown.

```cpp
void check_time_invariant(long long total_time, long long M) {
    if (total_time > M * 0.9) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - high subtask resolution time" << endl;
        abort();
    }
}
```

3. **Invariant 3: Increased Dynamic Programming State Space**
   - **Invariant Check:** An increase in the number of subtasks (`k`) combined with near-maximal task counts results in a large state space for the dynamic programming array, causing slower performance due to frequent state updates and checks.

```cpp
void check_dp_space_invariant(int n, int k) {
    if (n * k > 2000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - increased DP state space" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's integrate these checks into the original C++ code. We'll place them strategically to ensure they don't introduce overhead in the tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int M = 1e9 + 7;
int mxK = 45 * 45 + 100;

void check_task_subtask_invariant(int n, int k) {
    if (n > 40 && k > 40) {
        cerr << "Warning: Performance bottleneck condition triggered - high combination of tasks and subtasks" << endl;
        abort();
    }
}

void check_time_invariant(long long total_time, long long M) {
    if (total_time > M * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered - high subtask resolution time" << endl;
        abort();
    }
}

void check_dp_space_invariant(int n, int k) {
    if (n * k > 2000) {
        cerr << "Warning: Performance bottleneck condition triggered - increased DP state space" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, k;
    cin >> n >> k;
    long long m;
    cin >> m;
    vector<long long> A(k);
    for (int i = 0; i < k; ++i) {
        cin >> A[i];
    }
    sort(A.begin(), A.end());

    // Check task and subtask invariant
    check_task_subtask_invariant(n, k);

    // Calculate total time for checking
    long long total_time = accumulate(A.begin(), A.end(), 0LL);
    check_time_invariant(total_time * n, m);

    // Check DP state space invariant
    check_dp_space_invariant(n, k);

    vector<vector<long long>> dp(n + 1, vector<long long>(mxK, 1e18));
    dp[0][0] = 0;
    long long ans = 0;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j < mxK; ++j) {
            long long cur = 0;
            for (int l = 1, en = min(k, j); l <= en; ++l) {
                cur += A[l - 1];
                dp[i][j] = min(dp[i][j], dp[i - 1][j - l] + cur);
                if (l == k && (j - l - 1 >= 0)) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - l - 1] + cur);
                }
            }
            if (dp[i][j] <= m) {
                ans = max(ans, j + 0LL);
            }
        }
    }
    cout << ans << "\n";
    return 0;
}
```

### Explanation

- **Invariant Check Placement:** We place the checks after reading the input and before the main computational loops to ensure they do not interfere with the performance of tight loops.
- **Thresholds:** Threshold values in the checker functions are chosen based on a reasonable estimate that should trigger only under conditions likely to cause a performance bottleneck, adhering to problem constraints. These values may need adjustment based on empirical testing with different inputs.

