system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 2e9;
const int M = 5;
const int N = 125;
const double eps = 0.00001;
int ans = inf, n, a[N][M], h[M];
int p[6] = {500, 1000, 1500, 2000, 2500, 3000};
double r[6] = {1, 1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32};
double l[6] = {1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32, 0};
int getval(vector<int> c) {
  int first = 0, second = 0;
  for (int i = 0; i < M; i++) {
    if (a[0][i] != -1) {
      first += p[c[i]] - (p[c[i]] * a[0][i] / 250);
    }
    if (a[1][i] != -1) {
      second += p[c[i]] - (p[c[i]] * a[1][i] / 250);
    }
  }
  if (first <= second) {
    return inf;
  }
  int nn = ans;
  if (ans > 10000) {
    nn = 10000;
  }
  for (int res = 0; res < nn; res++) {
    double all = n + res;
    bool pp = 1;
    for (int i = 0; i < M && pp; i++) {
      if (a[0][i] == -1) {
        double p = h[i] / all;
        for (int j = 0; j < 6; j++) {
          if (l[j] < p && p <= r[j]) {
            if (j != c[i]) {
              pp = 0;
              break;
            }
          }
        }
      }
    }
    if (!pp) {
      continue;
    }
    bool p = 1;
    for (int i = 0; i < M; i++) {
      double l1 = l[c[i]];
      double r1 = r[c[i]];
      double xl = l1 * all - h[i];
      double xr = r1 * all - h[i];
      int dxl = int(ceil(xl + eps));
      int dxr = int(xr);
      if (xr >= 0 && res > xl && dxl <= dxr) {
        continue;
      } else {
        p = 0;
        break;
      }
    }
    if (p) {
      return res;
    }
  }
  return inf;
}
int main() {
  cin.tie(0);
  ios_base::sync_with_stdio(0);
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < M; j++) {
      cin >> a[i][j];
      h[j] += (a[i][j] != -1);
    }
  }
  vector<int> c(5);
  for (int p1 = 0; p1 < 6; p1++) {
    c[0] = p1;
    for (int p2 = 0; p2 < 6; p2++) {
      c[1] = p2;
      for (int p3 = 0; p3 < 6; p3++) {
        c[2] = p3;
        for (int p4 = 0; p4 < 6; p4++) {
          c[3] = p4;
          for (int p5 = 0; p5 < 6; p5++) {
            c[4] = p5;
            ans = min(ans, getval(c));
          }
        }
      }
    }
  }
  if (ans == inf) {
    ans = -1;
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
-1 20 19 77 119
30 10 73 30 107
21 29 -1 64 98
99 65 -2 -1 -1


(G.2) Fast Input

4
-1 20 40 77 119
30 10 73 30 107
21 29 -1 64 98
99 65 -2 -1 -1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 2e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 125; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 0.00001; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int ans = inf, n, a[N][M], h[M]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int p[6] = {500, 1000, 1500, 2000, 2500, 3000}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
double r[6] = {1, 1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32}; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
double l[6] = {1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32, 0}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int getval(vector<int> c) { /* line 11 slow_hit_count: 7776, fast_hit_count: 7776 */
  int first = 0, second = 0; /* line 12 slow_hit_count: 7776, fast_hit_count: 7776 */
  for (int i = 0; i < M; i++) { /* line 13 slow_hit_count: 46656, fast_hit_count: 46656 */
    if (a[0][i] != -1) { /* line 14 slow_hit_count: 38880, fast_hit_count: 38880 */
      first += p[c[i]] - (p[c[i]] * a[0][i] / 250); /* line 15 slow_hit_count: 31104, fast_hit_count: 31104 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (a[1][i] != -1) { /* line 17 slow_hit_count: 38880, fast_hit_count: 38880 */
      second += p[c[i]] - (p[c[i]] * a[1][i] / 250); /* line 18 slow_hit_count: 38880, fast_hit_count: 38880 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if (first <= second) { /* line 21 slow_hit_count: 7776, fast_hit_count: 7776 */
    return inf; /* line 22 slow_hit_count: 7767, fast_hit_count: 7776 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  int nn = ans; /* line 24 slow_hit_count: 9, fast_hit_count: 0 */
  if (ans > 10000) { /* line 25 slow_hit_count: 9, fast_hit_count: 0 */
    nn = 10000; /* line 26 slow_hit_count: 9, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int res = 0; res < nn; res++) { /* line 28 slow_hit_count: 90009, fast_hit_count: 0 */
    double all = n + res; /* line 29 slow_hit_count: 90000, fast_hit_count: 0 */
    bool pp = 1; /* line 30 slow_hit_count: 90000, fast_hit_count: 0 */
    for (int i = 0; i < M && pp; i++) { /* line 31 slow_hit_count: 180072, fast_hit_count: 0 */
      if (a[0][i] == -1) { /* line 32 slow_hit_count: 90072, fast_hit_count: 0 */
        double p = h[i] / all; /* line 33 slow_hit_count: 90000, fast_hit_count: 0 */
        for (int j = 0; j < 6; j++) { /* line 34 slow_hit_count: 538614, fast_hit_count: 0 */
          if (l[j] < p && p <= r[j]) { /* line 35 slow_hit_count: 538596, fast_hit_count: 0 */
            if (j != c[i]) { /* line 36 slow_hit_count: 90000, fast_hit_count: 0 */
              pp = 0; /* line 37 slow_hit_count: 89982, fast_hit_count: 0 */
              break; /* line 38 slow_hit_count: 89982, fast_hit_count: 0 */
            } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    if (!pp) { /* line 44 slow_hit_count: 90000, fast_hit_count: 0 */
      continue; /* line 45 slow_hit_count: 89982, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    bool p = 1; /* line 47 slow_hit_count: 18, fast_hit_count: 0 */
    for (int i = 0; i < M; i++) { /* line 48 slow_hit_count: 42, fast_hit_count: 0 */
      double l1 = l[c[i]]; /* line 49 slow_hit_count: 42, fast_hit_count: 0 */
      double r1 = r[c[i]]; /* line 50 slow_hit_count: 42, fast_hit_count: 0 */
      double xl = l1 * all - h[i]; /* line 51 slow_hit_count: 42, fast_hit_count: 0 */
      double xr = r1 * all - h[i]; /* line 52 slow_hit_count: 42, fast_hit_count: 0 */
      int dxl = int(ceil(xl + eps)); /* line 53 slow_hit_count: 42, fast_hit_count: 0 */
      int dxr = int(xr); /* line 54 slow_hit_count: 42, fast_hit_count: 0 */
      if (xr >= 0 && res > xl && dxl <= dxr) { /* line 55 slow_hit_count: 42, fast_hit_count: 0 */
        continue; /* line 56 slow_hit_count: 24, fast_hit_count: 0 */
      } else { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        p = 0; /* line 58 slow_hit_count: 18, fast_hit_count: 0 */
        break; /* line 59 slow_hit_count: 18, fast_hit_count: 0 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (p) { /* line 62 slow_hit_count: 18, fast_hit_count: 0 */
      return res; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  return inf; /* line 66 slow_hit_count: 9, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 72 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < M; j++) { /* line 73 slow_hit_count: 24, fast_hit_count: 24 */
      cin >> a[i][j]; /* line 74 slow_hit_count: 20, fast_hit_count: 20 */
      h[j] += (a[i][j] != -1); /* line 75 slow_hit_count: 20, fast_hit_count: 20 */
    } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> c(5); /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
  for (int p1 = 0; p1 < 6; p1++) { /* line 79 slow_hit_count: 7, fast_hit_count: 7 */
    c[0] = p1; /* line 80 slow_hit_count: 6, fast_hit_count: 6 */
    for (int p2 = 0; p2 < 6; p2++) { /* line 81 slow_hit_count: 42, fast_hit_count: 42 */
      c[1] = p2; /* line 82 slow_hit_count: 36, fast_hit_count: 36 */
      for (int p3 = 0; p3 < 6; p3++) { /* line 83 slow_hit_count: 252, fast_hit_count: 252 */
        c[2] = p3; /* line 84 slow_hit_count: 216, fast_hit_count: 216 */
        for (int p4 = 0; p4 < 6; p4++) { /* line 85 slow_hit_count: 1512, fast_hit_count: 1512 */
          c[3] = p4; /* line 86 slow_hit_count: 1296, fast_hit_count: 1296 */
          for (int p5 = 0; p5 < 6; p5++) { /* line 87 slow_hit_count: 9072, fast_hit_count: 9072 */
            c[4] = p5; /* line 88 slow_hit_count: 7776, fast_hit_count: 7776 */
            ans = min(ans, getval(c)); /* line 89 slow_hit_count: 7776, fast_hit_count: 7776 */
          } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans == inf) { /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
    ans = -1; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 99 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count differences between the slow and fast inputs, the following observations can be made:

1. **Higher Hit Counts in the Slow Input:**
   - **Lines 24-45 and 47-59 (Inside `getval()` Function):** These lines are executed significantly more times during the slow input run. In particular, the loop on line 28 (`for (int res = 0; res < nn; res++)`) and the nested loops within it (lines 31-37 and 48-59) are a core area of increased execution.
   - **Nested Loops for Different Score Configurations:**
     - Lines 79-93 define a quintuple nested loop structure that iterates over all possible configurations for the problem scoring.

2. **Key Areas Leading to Slow Execution:**
   - The loop on line 28 iterates over a range up to `nn`, which can be as high as 10,000, indicating a potentially very high number of iterations.
   - Inside this loop, another loop iterates over the problems (line 31), and further nested loops iterate to find suitable scoring values (line 34).
   - The complex conditional logic on lines 35-38 and 55-59 can significantly add to the computational cost, especially when evaluating many configurations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies, here are natural language performance invariants describing when the slow path might be triggered:

1. **Scoring Configuration Exploration:**
   - **Invariant:** "When exploring scoring configurations, if the number of potential configurations multiplies due to high scores or many participants, the program may slow down. This is more evident when the number of new accounts needed (res) approaches large thresholds, potentially nearing the upper bound of explorations."
   - **Explanation:** The program explores numerous scoring configurations to find a suitable one. When there are many potential configurations, the number of iterations becomes vast, leading to performance degradation.

2. **High Loop Iteration Counts:**
   - **Invariant:** "If the nested loop structure iterates over a vast space of combinations, particularly for each problem's score, the execution time can increase significantly. This is particularly true when close to the maximum theoretical number of new accounts."
   - **Explanation:** The quintuple nested loop structure incrementally increases the search space for configurations. Given the constraints (n ≤ 120), this can still lead to high iteration counts due to the large upper bound of account manipulations.

3. **Complex Conditional Checks:**
   - **Invariant:** "When the conditional checks involve complex and frequent evaluations over many participants and scoring thresholds, the logic may become a bottleneck if not simplified."
   - **Explanation:** Frequent and complex evaluations in tight loops can compound performance issues, especially when combined with the high iteration counts from nested loops.

These invariants capture the conditions that can lead to significant slowdowns, abstracting away from specific numeric slow input values and focusing on the structural triggers within the program logic.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the performance invariants derived from the analysis, here is the checker code for each invariant:

1. **Scoring Configuration Exploration:**
    ```cpp
    void check_scoring_configuration_exploration(int n, int nn) {
        if (nn > 5000) {  // Arbitrary threshold chosen based on problem constraints and structure
            cerr << "Warning: Performance bottleneck condition triggered: excessive scoring configurations explored!" << endl;
            abort();
        }
    }
    ```

2. **High Loop Iteration Counts:**
    ```cpp
    void check_high_loop_iteration_counts(int res, int max_res) {
        if (res > max_res) {  // Assuming max_res is a reasonable upper bound for res
            cerr << "Warning: Performance bottleneck condition triggered: high loop iteration counts!" << endl;
            abort();
        }
    }
    ```
   
3. **Complex Conditional Checks:**
    ```cpp
    void check_complex_conditional_checks(bool condition) {
        if (condition) {
            cerr << "Warning: Performance bottleneck condition triggered: complex conditional checks!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrating Checker Code into the Original Program

Now, we will incorporate these checker functions into the original program code at appropriate points to ensure the program doesn't degrade performance severely without detection.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 2e9;
const int M = 5;
const int N = 125;
const double eps = 0.00001;
int ans = inf, n, a[N][M], h[M];
int p[6] = {500, 1000, 1500, 2000, 2500, 3000};
double r[6] = {1, 1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32};
double l[6] = {1. / 2, 1. / 4, 1. / 8, 1. / 16, 1. / 32, 0};

// Performance bottleneck checkers
void check_scoring_configuration_exploration(int n, int nn) {
    if (nn > 5000) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered: excessive scoring configurations explored!" << endl;
        abort();
    }
}

void check_high_loop_iteration_counts(int res, int max_res) {
    if (res > max_res) {
        cerr << "Warning: Performance bottleneck condition triggered: high loop iteration counts!" << endl;
        abort();
    }
}

void check_complex_conditional_checks(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered: complex conditional checks!" << endl;
        abort();
    }
}

int getval(vector<int> c) {
    int first = 0, second = 0;
    for (int i = 0; i < M; i++) {
        if (a[0][i] != -1) {
            first += p[c[i]] - (p[c[i]] * a[0][i] / 250);
        }
        if (a[1][i] != -1) {
            second += p[c[i]] - (p[c[i]] * a[1][i] / 250);
        }
    }
    if (first <= second) {
        return inf;
    }
    int nn = ans;
    if (ans > 10000) {
        nn = 10000;
        check_scoring_configuration_exploration(n, nn); // Checking invariant 1
    }
    for (int res = 0; res < nn; res++) {
        double all = n + res;
        bool pp = 1;
        for (int i = 0; i < M && pp; i++) {
            if (a[0][i] == -1) {
                double p = h[i] / all;
                for (int j = 0; j < 6; j++) {
                    if (l[j] < p && p <= r[j]) {
                        if (j != c[i]) {
                            pp = 0;
                            break;
                        }
                    }
                }
            }
        }
        if (!pp) {
            continue;
        }
        bool p = 1;
        for (int i = 0; i < M; i++) {
            double l1 = l[c[i]];
            double r1 = r[c[i]];
            double xl = l1 * all - h[i];
            double xr = r1 * all - h[i];
            int dxl = int(ceil(xl + eps));
            int dxr = int(xr);
            check_complex_conditional_checks(xr < 0 || res <= xl || dxl > dxr); // Checking invariant 3
            if (xr >= 0 && res > xl && dxl <= dxr) {
                continue;
            } else {
                p = 0;
                break;
            }
        }
        if (p) {
            check_high_loop_iteration_counts(res, 10000); // Checking invariant 2
            return res;
        }
    }
    return inf;
}

int main() {
    cin.tie(0);
    ios_base::sync_with_stdio(0);
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < M; j++) {
            cin >> a[i][j];
            h[j] += (a[i][j] != -1);
        }
    }
    vector<int> c(5);
    for (int p1 = 0; p1 < 6; p1++) {
        c[0] = p1;
        for (int p2 = 0; p2 < 6; p2++) {
            c[1] = p2;
            for (int p3 = 0; p3 < 6; p3++) {
                c[2] = p3;
                for (int p4 = 0; p4 < 6; p4++) {
                    c[3] = p4;
                    for (int p5 = 0; p5 < 6; p5++) {
                        c[4] = p5;
                        ans = min(ans, getval(c));
                    }
                }
            }
        }
    }
    if (ans == inf) {
        ans = -1;
    }
    cout << ans << "\n";
}
```

### Explanation:

- **Invariant 1**: `check_scoring_configuration_exploration` is placed after deciding on `nn` to ensure the program does not explore excessive scoring configurations.
- **Invariant 2**: `check_high_loop_iteration_counts` is placed within the loop to detect when iterations become excessive, still using a reasonable bound.
- **Invariant 3**: `check_complex_conditional_checks` ensures that the complex logic conditions are evaluated correctly and do not become a bottleneck. It is inserted within the loop evaluating conditions.

This code will abort with an error message if the conditions that lead to potential performance bottlenecks are triggered, aiding in detecting problematic scenarios.

