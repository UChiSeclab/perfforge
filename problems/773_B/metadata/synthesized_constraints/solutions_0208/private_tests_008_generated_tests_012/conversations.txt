system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
int a[120][5];
int cur_maxpoint[5];
int nb_solved[5];
int optimal_config[5];
int idx_to_maxpoint[6];
int new_nb_solved[5];
int new_maxpoint[5];
int finalRs = 2000000000;
int calculate_score(int idx, int* maxpoints) {
  int rs = 0;
  for (int j = 0; j < 5; j++) {
    if (a[idx][j] > -1) {
      rs += ((maxpoints[j] / 250) * (250 - a[idx][j]));
    }
  }
  return rs;
}
bool compare(int p, int q, int x, int y) {
  int tmp1 = x * q;
  int tmp2 = y * p;
  if (tmp1 > tmp2) return false;
  return true;
}
bool strict_compare(int p, int q, int x, int y) {
  int tmp1 = x * q;
  int tmp2 = y * p;
  if (tmp1 >= tmp2) return false;
  return true;
}
int ratio_to_maxpoint(int ratio_up, int ratio_down) {
  if (compare(1, 1, ratio_up, ratio_down) &&
      strict_compare(ratio_up, ratio_down, 1, 2))
    return 500;
  if (compare(1, 2, ratio_up, ratio_down) &&
      strict_compare(ratio_up, ratio_down, 1, 4))
    return 1000;
  if (compare(1, 4, ratio_up, ratio_down) &&
      strict_compare(ratio_up, ratio_down, 1, 8))
    return 1500;
  if (compare(1, 8, ratio_up, ratio_down) &&
      strict_compare(ratio_up, ratio_down, 1, 16))
    return 2000;
  if (compare(1, 16, ratio_up, ratio_down) &&
      strict_compare(ratio_up, ratio_down, 1, 32))
    return 2500;
  return 3000;
}
bool isPossible(int proposedRs) {
  int new_n = n + proposedRs;
  for (int j = 0; j < 5; j++) {
    if (optimal_config[j] == 1)
      new_nb_solved[j] = nb_solved[j] + proposedRs;
    else
      new_nb_solved[j] = nb_solved[j];
  }
  for (int j = 0; j < 5; j++) {
    int ratio_up = new_nb_solved[j];
    int ratio_down = new_n;
    new_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down);
  }
  bool returnedval =
      (calculate_score(0, new_maxpoint) > calculate_score(1, new_maxpoint));
  return returnedval;
}
void binarysearch(int left, int right) {
  for (int i = left; i <= right; i++) {
    if (isPossible(i)) {
      if (i < finalRs) finalRs = i;
    }
  }
}
int main() {
  idx_to_maxpoint[0] = 500;
  idx_to_maxpoint[1] = 1000;
  idx_to_maxpoint[2] = 1500;
  idx_to_maxpoint[3] = 2000;
  idx_to_maxpoint[4] = 2500;
  idx_to_maxpoint[5] = 3000;
  nb_solved[0] = 0;
  nb_solved[1] = 0;
  nb_solved[2] = 0;
  nb_solved[3] = 0;
  nb_solved[4] = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 5; j++) {
      cin >> a[i][j];
      if (a[i][j] >= 0) nb_solved[j]++;
    }
  }
  for (int j = 0; j < 5; j++) {
    int ratio_up = nb_solved[j];
    int ratio_down = n;
    cur_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down);
  }
  if (calculate_score(0, cur_maxpoint) > calculate_score(1, cur_maxpoint))
    cout << "0\n";
  else {
    for (int j = 0; j < 5; j++) {
      if (a[0][j] == -1) {
        optimal_config[j] = 0;
      } else {
        if (a[1][j] == -1)
          optimal_config[j] = -1;
        else {
          if (a[0][j] < a[1][j])
            optimal_config[j] = -1;
          else if (a[0][j] == a[1][j])
            optimal_config[j] = 0;
          else if (a[0][j] > a[1][j])
            optimal_config[j] = 1;
        }
      }
    }
    finalRs = 2000000000;
    binarysearch(1, 5000);
    if (finalRs == 2000000000) finalRs = -1;
    cout << finalRs << "\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
0 0 0 0 1
0 0 0 1 0


(G.2) Fast Input

2
0 0 0 0 1
0 0 0 2 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[120][5]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int cur_maxpoint[5]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int nb_solved[5]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int optimal_config[5]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int idx_to_maxpoint[6]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int new_nb_solved[5]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int new_maxpoint[5]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int finalRs = 2000000000; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int calculate_score(int idx, int* maxpoints) { /* line 12 slow_hit_count: 10002, fast_hit_count: 2 */
  int rs = 0; /* line 13 slow_hit_count: 10002, fast_hit_count: 2 */
  for (int j = 0; j < 5; j++) { /* line 14 slow_hit_count: 60012, fast_hit_count: 12 */
    if (a[idx][j] > -1) { /* line 15 slow_hit_count: 50010, fast_hit_count: 10 */
      rs += ((maxpoints[j] / 250) * (250 - a[idx][j])); /* line 16 slow_hit_count: 50010, fast_hit_count: 10 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return rs; /* line 19 slow_hit_count: 10002, fast_hit_count: 2 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool compare(int p, int q, int x, int y) { /* line 21 slow_hit_count: 104813, fast_hit_count: 5 */
  int tmp1 = x * q; /* line 22 slow_hit_count: 104813, fast_hit_count: 5 */
  int tmp2 = y * p; /* line 23 slow_hit_count: 104813, fast_hit_count: 5 */
  if (tmp1 > tmp2) return false; /* line 24 slow_hit_count: 104813, fast_hit_count: 5 */
  return true; /* line 25 slow_hit_count: 104813, fast_hit_count: 5 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
bool strict_compare(int p, int q, int x, int y) { /* line 27 slow_hit_count: 104813, fast_hit_count: 5 */
  int tmp1 = x * q; /* line 28 slow_hit_count: 104813, fast_hit_count: 5 */
  int tmp2 = y * p; /* line 29 slow_hit_count: 104813, fast_hit_count: 5 */
  if (tmp1 >= tmp2) return false; /* line 30 slow_hit_count: 104813, fast_hit_count: 5 */
  return true; /* line 31 slow_hit_count: 5249, fast_hit_count: 5 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int ratio_to_maxpoint(int ratio_up, int ratio_down) { /* line 33 slow_hit_count: 25005, fast_hit_count: 5 */
  if (compare(1, 1, ratio_up, ratio_down) && /* line 34 slow_hit_count: 50010, fast_hit_count: 10 */
      strict_compare(ratio_up, ratio_down, 1, 2)) /* line 35 slow_hit_count: 25005, fast_hit_count: 5 */
    return 500; /* line 36 slow_hit_count: 5009, fast_hit_count: 5 */
  if (compare(1, 2, ratio_up, ratio_down) && /* line 37 slow_hit_count: 39992, fast_hit_count: 0 */
      strict_compare(ratio_up, ratio_down, 1, 4)) /* line 38 slow_hit_count: 19996, fast_hit_count: 0 */
    return 1000; /* line 39 slow_hit_count: 16, fast_hit_count: 0 */
  if (compare(1, 4, ratio_up, ratio_down) && /* line 40 slow_hit_count: 39960, fast_hit_count: 0 */
      strict_compare(ratio_up, ratio_down, 1, 8)) /* line 41 slow_hit_count: 19980, fast_hit_count: 0 */
    return 1500; /* line 42 slow_hit_count: 32, fast_hit_count: 0 */
  if (compare(1, 8, ratio_up, ratio_down) && /* line 43 slow_hit_count: 39896, fast_hit_count: 0 */
      strict_compare(ratio_up, ratio_down, 1, 16)) /* line 44 slow_hit_count: 19948, fast_hit_count: 0 */
    return 2000; /* line 45 slow_hit_count: 64, fast_hit_count: 0 */
  if (compare(1, 16, ratio_up, ratio_down) && /* line 46 slow_hit_count: 39768, fast_hit_count: 0 */
      strict_compare(ratio_up, ratio_down, 1, 32)) /* line 47 slow_hit_count: 19884, fast_hit_count: 0 */
    return 2500; /* line 48 slow_hit_count: 128, fast_hit_count: 0 */
  return 3000; /* line 49 slow_hit_count: 19756, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
bool isPossible(int proposedRs) { /* line 51 slow_hit_count: 5000, fast_hit_count: 0 */
  int new_n = n + proposedRs; /* line 52 slow_hit_count: 5000, fast_hit_count: 0 */
  for (int j = 0; j < 5; j++) { /* line 53 slow_hit_count: 30000, fast_hit_count: 0 */
    if (optimal_config[j] == 1) /* line 54 slow_hit_count: 25000, fast_hit_count: 0 */
      new_nb_solved[j] = nb_solved[j] + proposedRs; /* line 55 slow_hit_count: 5000, fast_hit_count: 0 */
    else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      new_nb_solved[j] = nb_solved[j]; /* line 57 slow_hit_count: 20000, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < 5; j++) { /* line 59 slow_hit_count: 30000, fast_hit_count: 0 */
    int ratio_up = new_nb_solved[j]; /* line 60 slow_hit_count: 25000, fast_hit_count: 0 */
    int ratio_down = new_n; /* line 61 slow_hit_count: 25000, fast_hit_count: 0 */
    new_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down); /* line 62 slow_hit_count: 25000, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  bool returnedval = /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      (calculate_score(0, new_maxpoint) > calculate_score(1, new_maxpoint)); /* line 65 slow_hit_count: 5000, fast_hit_count: 0 */
  return returnedval; /* line 66 slow_hit_count: 5000, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
void binarysearch(int left, int right) { /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = left; i <= right; i++) { /* line 69 slow_hit_count: 5001, fast_hit_count: 0 */
    if (isPossible(i)) { /* line 70 slow_hit_count: 5000, fast_hit_count: 0 */
      if (i < finalRs) finalRs = i; /* line 71 slow_hit_count: 4999, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
int main() { /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[0] = 500; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[1] = 1000; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[2] = 1500; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[3] = 2000; /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[4] = 2500; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  idx_to_maxpoint[5] = 3000; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  nb_solved[0] = 0; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  nb_solved[1] = 0; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  nb_solved[2] = 0; /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  nb_solved[3] = 0; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  nb_solved[4] = 0; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 88 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 0; j < 5; j++) { /* line 89 slow_hit_count: 12, fast_hit_count: 12 */
      cin >> a[i][j]; /* line 90 slow_hit_count: 10, fast_hit_count: 10 */
      if (a[i][j] >= 0) nb_solved[j]++; /* line 91 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < 5; j++) { /* line 94 slow_hit_count: 6, fast_hit_count: 6 */
    int ratio_up = nb_solved[j]; /* line 95 slow_hit_count: 5, fast_hit_count: 5 */
    int ratio_down = n; /* line 96 slow_hit_count: 5, fast_hit_count: 5 */
    cur_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down); /* line 97 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  if (calculate_score(0, cur_maxpoint) > calculate_score(1, cur_maxpoint)) /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "0\n"; /* line 100 slow_hit_count: 0, fast_hit_count: 1 */
  else { /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < 5; j++) { /* line 102 slow_hit_count: 6, fast_hit_count: 0 */
      if (a[0][j] == -1) { /* line 103 slow_hit_count: 5, fast_hit_count: 0 */
        optimal_config[j] = 0; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
        if (a[1][j] == -1) /* line 106 slow_hit_count: 5, fast_hit_count: 0 */
          optimal_config[j] = -1; /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
        else { /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
          if (a[0][j] < a[1][j]) /* line 109 slow_hit_count: 5, fast_hit_count: 0 */
            optimal_config[j] = -1; /* line 110 slow_hit_count: 1, fast_hit_count: 0 */
          else if (a[0][j] == a[1][j]) /* line 111 slow_hit_count: 4, fast_hit_count: 0 */
            optimal_config[j] = 0; /* line 112 slow_hit_count: 3, fast_hit_count: 0 */
          else if (a[0][j] > a[1][j]) /* line 113 slow_hit_count: 1, fast_hit_count: 0 */
            optimal_config[j] = 1; /* line 114 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
    finalRs = 2000000000; /* line 118 slow_hit_count: 1, fast_hit_count: 0 */
    binarysearch(1, 5000); /* line 119 slow_hit_count: 1, fast_hit_count: 0 */
    if (finalRs == 2000000000) finalRs = -1; /* line 120 slow_hit_count: 1, fast_hit_count: 0 */
    cout << finalRs << "\n"; /* line 121 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 123 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks observed in the given C code for the problem statement, we can break down the tasks as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The major difference in hit counts between the slow and fast inputs is observed in the `calculate_score`, `compare`, `strict_compare`, `ratio_to_maxpoint`, and `isPossible` functions. The slow input hits these functions significantly more often than the fast input.
   - Notably, the `binarysearch` function (lines 68-74) is frequently called for the slow input, indicating an inefficient search strategy compared to the fast input run.

2. **Pinpoint Lines or Functions with Significant Hits**:
   - Lines 12-19 (`calculate_score` function): The slow input hits this function 10,002 times compared to just 2 hits for the fast input. The repeated calculation of scores for different configurations suggests a performance bottleneck.
   - Lines 21-31 (`compare` and `strict_compare` functions): These are called heavily (104,813 times) in the slow input, indicating they are part of a critical computation loop.
   - Lines 33-49 (`ratio_to_maxpoint` function): Called 25,005 times in the slow input, suggesting frequent recalculation of point values.
   - Lines 51-67 (`isPossible` function): Called 5,000 times in the slow input, indicating excessive checking of possible configurations.
   - Line 69 (`binarysearch` function): This loop iterates over a range of 5,000 elements, directly influencing the overall hit count of the `isPossible` function.

3. **Infer Interactions with Data Structures and Loops**:
   - The high hit counts suggest that the binary search loop is excessively iterating, recalculating scores, and checking feasibility using expensive condition evaluations for each potential new account configuration.
   - The nested loops and repeated calculations hint at inefficiencies, particularly in the way the problem space (account configurations) is explored.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Natural Language Performance Invariants**:

   - **Invariant 1**: "If the binary search space for the number of new accounts is large and contains many configurations where Vasya's score doesn't change significantly, the program may enter a slow path."
     - This reflects excessive looping and score recalculations over potentially non-beneficial configurations.

   - **Invariant 2**: "If the `calculate_score` function is frequently called with similar parameters, indicating repetitive and redundant score calculations, performance is likely degraded."
     - This reflects repeated operations without significant variation in inputs.

   - **Invariant 3**: "When the participant's problem-solving times are close, necessitating fine-grained adjustments to maximize problem points, the search process may become inefficient."
     - This reflects scenarios where minor changes to submission times or configurations could impact the score, leading to exhaustive recalculations.

2. **Threshold Values Based on Constraints**:
   - Given the constraints (`n <= 120` and logical implications of the problem), thresholds should be set to ensure not every configuration is explored. A refined search or heuristic approach might be necessary to alleviate exhaustive checks.

3. **Broad Conditions for Future Scenarios**:
   - These invariants apply broadly to cases where small changes can lead to large computational overheads—a common issue with fine-grained score optimizations in combinatorial problems.

By identifying these invariants, we can better understand where the program might slow down and why, ultimately providing insights into more efficient ways to handle such input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Code

To implement the performance-characterizing invariants derived earlier, we'll translate each one into a C++ runtime check. Here's the C++ code for each invariant:

#### Invariant 1: Check for Large Binary Search Space
```cpp
void check_binary_search_space(int searchSpace, int threshold) {
    if (searchSpace > threshold) {
        cerr << "Warning: Performance bottleneck - excessive binary search space!" << endl;
        abort();
    }
}
```
- **Purpose**: This check is triggered when the binary search space becomes too large, causing excessive iterations.

#### Invariant 2: Repeated Score Calculations
```cpp
void check_repeated_score_calculation(int scoreCalculationCount, int threshold) {
    if (scoreCalculationCount > threshold) {
        cerr << "Warning: Performance bottleneck - excessive score calculations!" << endl;
        abort();
    }
}
```
- **Purpose**: This check is triggered when the `calculate_score` function is called excessively, indicating redundant computations.

#### Invariant 3: Fine-grained Adjustments to Maximize Points
```cpp
void check_fine_grained_adjustments(int adjustmentCount, int threshold) {
    if (adjustmentCount > threshold) {
        cerr << "Warning: Performance bottleneck - fine-grained adjustments!" << endl;
        abort();
    }
}
```
- **Purpose**: This check is triggered when numerous adjustments are made to submission configurations, indicating inefficient fine-tuning.

### Phase 4: Integrate Checkers into the Original C++ Code

Now, let's integrate these checker functions into the original C++ program at points where they would be most effective for detecting slow performance conditions without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_binary_search_space(int searchSpace, int threshold) {
    if (searchSpace > threshold) {
        cerr << "Warning: Performance bottleneck - excessive binary search space!" << endl;
        abort();
    }
}

void check_repeated_score_calculation(int scoreCalculationCount, int threshold) {
    if (scoreCalculationCount > threshold) {
        cerr << "Warning: Performance bottleneck - excessive score calculations!" << endl;
        abort();
    }
}

void check_fine_grained_adjustments(int adjustmentCount, int threshold) {
    if (adjustmentCount > threshold) {
        cerr << "Warning: Performance bottleneck - fine-grained adjustments!" << endl;
        abort();
    }
}

int n;
int a[120][5];
int cur_maxpoint[5];
int nb_solved[5];
int optimal_config[5];
int idx_to_maxpoint[6];
int new_nb_solved[5];
int new_maxpoint[5];
int finalRs = 2000000000;

int calculate_score(int idx, int* maxpoints) {
    static int scoreCalculationCount = 0;
    scoreCalculationCount++;
    check_repeated_score_calculation(scoreCalculationCount, 10000); // Arbitrary threshold for excessive calculations

    int rs = 0;
    for (int j = 0; j < 5; j++) {
        if (a[idx][j] > -1) {
            rs += ((maxpoints[j] / 250) * (250 - a[idx][j]));
        }
    }
    return rs;
}

bool compare(int p, int q, int x, int y) {
    int tmp1 = x * q;
    int tmp2 = y * p;
    if (tmp1 > tmp2) return false;
    return true;
}

bool strict_compare(int p, int q, int x, int y) {
    int tmp1 = x * q;
    int tmp2 = y * p;
    if (tmp1 >= tmp2) return false;
    return true;
}

int ratio_to_maxpoint(int ratio_up, int ratio_down) {
    if (compare(1, 1, ratio_up, ratio_down) &&
        strict_compare(ratio_up, ratio_down, 1, 2))
        return 500;
    if (compare(1, 2, ratio_up, ratio_down) &&
        strict_compare(ratio_up, ratio_down, 1, 4))
        return 1000;
    if (compare(1, 4, ratio_up, ratio_down) &&
        strict_compare(ratio_up, ratio_down, 1, 8))
        return 1500;
    if (compare(1, 8, ratio_up, ratio_down) &&
        strict_compare(ratio_up, ratio_down, 1, 16))
        return 2000;
    if (compare(1, 16, ratio_up, ratio_down) &&
        strict_compare(ratio_up, ratio_down, 1, 32))
        return 2500;
    return 3000;
}

bool isPossible(int proposedRs) {
    int new_n = n + proposedRs;
    for (int j = 0; j < 5; j++) {
        if (optimal_config[j] == 1)
            new_nb_solved[j] = nb_solved[j] + proposedRs;
        else
            new_nb_solved[j] = nb_solved[j];
    }
    for (int j = 0; j < 5; j++) {
        int ratio_up = new_nb_solved[j];
        int ratio_down = new_n;
        new_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down);
    }
    bool returnedval =
        (calculate_score(0, new_maxpoint) > calculate_score(1, new_maxpoint));
    return returnedval;
}

void binarysearch(int left, int right) {
    check_binary_search_space(right - left, 5000); // Arbitrary threshold for search space size

    for (int i = left; i <= right; i++) {
        if (isPossible(i)) {
            if (i < finalRs) finalRs = i;
        }
    }
}

int main() {
    idx_to_maxpoint[0] = 500;
    idx_to_maxpoint[1] = 1000;
    idx_to_maxpoint[2] = 1500;
    idx_to_maxpoint[3] = 2000;
    idx_to_maxpoint[4] = 2500;
    idx_to_maxpoint[5] = 3000;
    nb_solved[0] = 0;
    nb_solved[1] = 0;
    nb_solved[2] = 0;
    nb_solved[3] = 0;
    nb_solved[4] = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 5; j++) {
            cin >> a[i][j];
            if (a[i][j] >= 0) nb_solved[j]++;
        }
    }
    for (int j = 0; j < 5; j++) {
        int ratio_up = nb_solved[j];
        int ratio_down = n;
        cur_maxpoint[j] = ratio_to_maxpoint(ratio_up, ratio_down);
    }
    if (calculate_score(0, cur_maxpoint) > calculate_score(1, cur_maxpoint))
        cout << "0\n";
    else {
        for (int j = 0; j < 5; j++) {
            if (a[0][j] == -1) {
                optimal_config[j] = 0;
            } else {
                if (a[1][j] == -1)
                    optimal_config[j] = -1;
                else {
                    if (a[0][j] < a[1][j])
                        optimal_config[j] = -1;
                    else if (a[0][j] == a[1][j])
                        optimal_config[j] = 0;
                    else if (a[0][j] > a[1][j])
                        optimal_config[j] = 1;
                }
            }
        }
        finalRs = 2000000000;
        binarysearch(1, 5000);
        if (finalRs == 2000000000) finalRs = -1;
        cout << finalRs << "\n";
    }
}
```

### Explanation:
- **Checkers**: Each invariant has been translated into a checker function that gets triggered if the corresponding condition is met.
- **Location**: Checkers are placed strategically:
  - `check_binary_search_space` is called before the binary search loop.
  - `check_repeated_score_calculation` is called inside the `calculate_score` function.
- **Thresholds**: Arbitrary thresholds like `10000` for score calculations and `5000` for search space are used as reasonable starting points, based on problem constraints. Adjust these thresholds based on further performance testing.

