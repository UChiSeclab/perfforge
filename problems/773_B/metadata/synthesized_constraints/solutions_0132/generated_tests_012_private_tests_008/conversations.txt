system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int K = 5;
const int INF = 1e9;
int t[2][K];
int num[K];
int n;
int Pow2[K + 2] = {1, 2, 4, 8, 16, 32, INF};
int solve(int v) {
  int arr[K];
  for (int i = 0; i < K; i++) {
    arr[i] = v % 6;
    v /= 6;
  }
  pair<int, int> bots[K];
  for (int s = n; s < 8000; s++) {
    fill(bots, bots + K, pair<int, int>(0, INF));
    bool ind = true;
    for (int i = 0; i < K; i++) {
      if (t[0][i] == -1) {
        if (!(num[i] * Pow2[arr[i]] <= s &&
              (arr[i] == 5 || s < num[i] * Pow2[arr[i] + 1]))) {
          ind = false;
          break;
        }
        bots[i] = {0, 0};
      } else {
        bots[i].first =
            max(bots[i].first,
                (arr[i] == 5 ? -num[i] : (s / Pow2[arr[i] + 1] + 1 - num[i])));
        bots[i].second = min(bots[i].second, s / Pow2[arr[i]] - num[i]);
      }
    }
    if (!ind) continue;
    int max_sum = 0;
    for (int i = 0; i < K; i++) {
      if (bots[i].first > bots[i].second) {
        ind = false;
        break;
      }
      max_sum = max(max_sum, bots[i].first);
    }
    if (!ind || max_sum + n > s) {
      continue;
    }
    return s - n;
  }
  return -1;
}
bool check(int v) {
  int arr[K];
  for (int i = 0; i < K; i++) {
    arr[i] = v % 6;
    v /= 6;
  }
  int score[K];
  for (int i = 0; i < K; i++) score[i] = 500 * (arr[i] + 1);
  int s[2] = {0, 0};
  for (int i = 0; i < K; i++) {
    for (int j = 0; j < 2; j++) {
      if (t[j][i] == -1) continue;
      s[j] += score[i] * (250 - t[j][i]) / 250;
    }
  }
  return s[0] > s[1];
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < K; j++) {
      int tmp;
      cin >> tmp;
      if (i < 2) {
        t[i][j] = tmp;
      }
      if (tmp != -1) num[j]++;
    }
  }
  int res = INF;
  for (int i = 0; i < 7776; i++) {
    if (check(i)) {
      int tmp = solve(i);
      if (tmp >= 0) res = min(res, tmp);
    }
  }
  if (res < INF) {
    cout << res << endl;
  } else {
    cout << "-1" << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
0 0 0 0 1
0 0 0 2 0


(G.2) Fast Input

2
0 0 0 0 1
0 0 0 1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int K = 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int t[2][K]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int num[K]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int Pow2[K + 2] = {1, 2, 4, 8, 16, 32, INF}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int v) { /* line 9 slow_hit_count: 5832, fast_hit_count: 3240 */
  int arr[K]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < K; i++) { /* line 11 slow_hit_count: 34992, fast_hit_count: 19440 */
    arr[i] = v % 6; /* line 12 slow_hit_count: 29160, fast_hit_count: 16200 */
    v /= 6; /* line 13 slow_hit_count: 29160, fast_hit_count: 16200 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  pair<int, int> bots[K]; /* line 15 slow_hit_count: 5832, fast_hit_count: 3240 */
  for (int s = n; s < 8000; s++) { /* line 16 slow_hit_count: 277518, fast_hit_count: 157296 */
    fill(bots, bots + K, pair<int, int>(0, INF)); /* line 17 slow_hit_count: 277518, fast_hit_count: 157296 */
    bool ind = true; /* line 18 slow_hit_count: 277518, fast_hit_count: 157296 */
    for (int i = 0; i < K; i++) { /* line 19 slow_hit_count: 1665108, fast_hit_count: 943776 */
      if (t[0][i] == -1) { /* line 20 slow_hit_count: 1387590, fast_hit_count: 786480 */
        if (!(num[i] * Pow2[arr[i]] <= s && /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
              (arr[i] == 5 || s < num[i] * Pow2[arr[i] + 1]))) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
          ind = false; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        bots[i] = {0, 0}; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        bots[i].first = /* line 28 slow_hit_count: 1387590, fast_hit_count: 786480 */
            max(bots[i].first, /* line 29 slow_hit_count: 2775180, fast_hit_count: 1572960 */
                (arr[i] == 5 ? -num[i] : (s / Pow2[arr[i] + 1] + 1 - num[i]))); /* line 30 slow_hit_count: 1387590, fast_hit_count: 786480 */
        bots[i].second = min(bots[i].second, s / Pow2[arr[i]] - num[i]); /* line 31 slow_hit_count: 1387590, fast_hit_count: 786480 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ind) continue; /* line 34 slow_hit_count: 549204, fast_hit_count: 311352 */
    int max_sum = 0; /* line 35 slow_hit_count: 277518, fast_hit_count: 157296 */
    for (int i = 0; i < K; i++) { /* line 36 slow_hit_count: 627346, fast_hit_count: 354594 */
      if (bots[i].first > bots[i].second) { /* line 37 slow_hit_count: 621514, fast_hit_count: 351354 */
        ind = false; /* line 38 slow_hit_count: 271686, fast_hit_count: 154056 */
        break; /* line 39 slow_hit_count: 271686, fast_hit_count: 154056 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      max_sum = max(max_sum, bots[i].first); /* line 41 slow_hit_count: 349828, fast_hit_count: 197298 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ind || max_sum + n > s) { /* line 43 slow_hit_count: 277518, fast_hit_count: 157296 */
      continue; /* line 44 slow_hit_count: 271686, fast_hit_count: 154056 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return s - n; /* line 46 slow_hit_count: 5832, fast_hit_count: 3240 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  return -1; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int v) { /* line 50 slow_hit_count: 7776, fast_hit_count: 7776 */
  int arr[K]; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < K; i++) { /* line 52 slow_hit_count: 46656, fast_hit_count: 46656 */
    arr[i] = v % 6; /* line 53 slow_hit_count: 38880, fast_hit_count: 38880 */
    v /= 6; /* line 54 slow_hit_count: 38880, fast_hit_count: 38880 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  int score[K]; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < K; i++) score[i] = 500 * (arr[i] + 1); /* line 57 slow_hit_count: 46656, fast_hit_count: 46656 */
  int s[2] = {0, 0}; /* line 58 slow_hit_count: 7776, fast_hit_count: 7776 */
  for (int i = 0; i < K; i++) { /* line 59 slow_hit_count: 46656, fast_hit_count: 46656 */
    for (int j = 0; j < 2; j++) { /* line 60 slow_hit_count: 116640, fast_hit_count: 116640 */
      if (t[j][i] == -1) continue; /* line 61 slow_hit_count: 77760, fast_hit_count: 77760 */
      s[j] += score[i] * (250 - t[j][i]) / 250; /* line 62 slow_hit_count: 77760, fast_hit_count: 77760 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return s[0] > s[1]; /* line 65 slow_hit_count: 7776, fast_hit_count: 7776 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 71 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 0; j < K; j++) { /* line 72 slow_hit_count: 12, fast_hit_count: 12 */
      int tmp; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> tmp; /* line 74 slow_hit_count: 10, fast_hit_count: 10 */
      if (i < 2) { /* line 75 slow_hit_count: 10, fast_hit_count: 10 */
        t[i][j] = tmp; /* line 76 slow_hit_count: 10, fast_hit_count: 10 */
      } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      if (tmp != -1) num[j]++; /* line 78 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  int res = INF; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 7776; i++) { /* line 82 slow_hit_count: 7777, fast_hit_count: 7777 */
    if (check(i)) { /* line 83 slow_hit_count: 7776, fast_hit_count: 7776 */
      int tmp = solve(i); /* line 84 slow_hit_count: 5832, fast_hit_count: 3240 */
      if (tmp >= 0) res = min(res, tmp); /* line 85 slow_hit_count: 5832, fast_hit_count: 3240 */
    } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  if (res < INF) { /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
    cout << res << endl; /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1" << endl; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Upon analyzing the provided C code and comparing the line-level hit counts for both the fast and slow inputs, the following observations were made:

1. **Function `solve(int v)` (Lines 9-49):**
   - **Loop on line 16:** This loop is executed significantly more often for the slow input compared to the fast input (`277518` vs. `157296`), indicating that a larger search space is being explored. This suggests that the loop conditions allow it to iterate more times with the slow input.
   - **Nested loop on line 19:** This loop also shows a high hit count, emphasizing its involvement in the slow execution path.

2. **Function `check(int v)` (Lines 50-66):**
   - The `check()` function is called the same number of times (7776) for both inputs, suggesting that the number of possible configurations checked doesn't differ between the inputs.
   - However, `solve(i)` is called more frequently for the slow input (`5832` vs. `3240`), which suggests that more configurations pass the `check()` condition and lead to further exploration in the `solve()` function.

The significant disparity in the hit counts between `solve()` executions for different inputs indicates that the slowdown is likely due to the extra iterations and evaluations happening within the `solve()` function.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the analysis, here are performance-characterizing invariants that describe the conditions under which the program slows down:

1. **High Iterative Search Space Invariant:**
   - Natural Language Description: "If the number of participants and the configuration permutations lead to a large iterative search space inside the `solve()` function, the execution time may increase significantly. This can occur when the slow input configuration allows more potential score configurations to be explored."
   - This invariant suggests that increasing the number of configurations that pass the initial `check()` and require evaluation in `solve()` leads to a slowdown.

2. **Frequent Evaluation of `solve()` Invariant:**
   - Natural Language Description: "When the `solve()` function is called frequently due to many configurations passing the `check()` condition, performance can degrade. This is likely when the input structure allows more viable candidate configurations for Vasya to explore in trying to beat Petya."
   - This invariant highlights that the frequency of function calls to `solve()`, which is computationally expensive due to its nested loops and search iterations, is a critical factor in slow performance.

These invariants are designed to be broad enough to capture similar slow scenarios without relying on specific input values, focusing instead on the underlying conditions that lead to increased computational effort within the loops of the `solve()` function.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.

For this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.

<image>

Pay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.

If the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.

There are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.

With two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.

Unfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.

Vasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.

Find the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.

Input

The first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.

Each of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.

It is guaranteed that each participant has made at least one successful submission.

Vasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.

Output

Output a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.

Examples

Input

2
5 15 40 70 115
50 45 40 30 15


Output

2


Input

3
55 80 10 -1 -1
15 -1 79 60 -1
42 -1 13 -1 -1


Output

3


Input

5
119 119 119 119 119
0 0 0 0 -1
20 65 12 73 77
78 112 22 23 11
1 78 60 111 62


Output

27


Input

4
-1 20 40 77 119
30 10 73 50 107
21 29 -1 64 98
117 65 -1 -1 -1


Output

-1

Note

In the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.

In the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.

In the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checkers in C++

Based on the natural language invariants derived in the previous phase, here are the C++ code snippets that implement the performance checks:

1. **High Iterative Search Space Invariant Checker:**
   - This check should be placed to ensure that the `solve` function does not enter a large search space excessively.

```cpp
void check_iterative_search_space(int iterations) {
    if (iterations > 7000) {  // Threshold based on n and configurations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in iterative search space!" << endl;
        abort();
    }
}
```

2. **Frequent Evaluation of `solve()` Invariant Checker:**
   - This check ensures that the `solve()` function isn't called too frequently, indicating a performance bottleneck.

```cpp
void check_frequent_solve_calls(int solveCalls) {
    if (solveCalls > 5000) {  // Arbitrary threshold considering problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to solve() function!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

The following is the instrumented version of the original C++ code, with the performance checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int K = 5;
const int INF = 1e9;
int t[2][K];
int num[K];
int n;
int Pow2[K + 2] = {1, 2, 4, 8, 16, 32, INF};

void check_iterative_search_space(int iterations) {
    if (iterations > 7000) {  // Threshold based on n and configurations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in iterative search space!" << endl;
        abort();
    }
}

void check_frequent_solve_calls(int solveCalls) {
    if (solveCalls > 5000) {  // Arbitrary threshold considering problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to solve() function!" << endl;
        abort();
    }
}

int solve(int v) {
    int arr[K];
    for (int i = 0; i < K; i++) {
        arr[i] = v % 6;
        v /= 6;
    }
    pair<int, int> bots[K];
    int iterationCount = 0;
    for (int s = n; s < 8000; s++) {
        iterationCount++;
        fill(bots, bots + K, pair<int, int>(0, INF));
        bool ind = true;
        for (int i = 0; i < K; i++) {
            if (t[0][i] == -1) {
                if (!(num[i] * Pow2[arr[i]] <= s &&
                      (arr[i] == 5 || s < num[i] * Pow2[arr[i] + 1]))) {
                    ind = false;
                    break;
                }
                bots[i] = {0, 0};
            } else {
                bots[i].first =
                    max(bots[i].first,
                        (arr[i] == 5 ? -num[i] : (s / Pow2[arr[i] + 1] + 1 - num[i])));
                bots[i].second = min(bots[i].second, s / Pow2[arr[i]] - num[i]);
            }
        }
        if (!ind) continue;
        int max_sum = 0;
        for (int i = 0; i < K; i++) {
            if (bots[i].first > bots[i].second) {
                ind = false;
                break;
            }
            max_sum = max(max_sum, bots[i].first);
        }
        if (!ind || max_sum + n > s) {
            continue;
        }
        check_iterative_search_space(iterationCount);  // Insert checker for iterations
        return s - n;
    }
    return -1;
}

bool check(int v) {
    int arr[K];
    for (int i = 0; i < K; i++) {
        arr[i] = v % 6;
        v /= 6;
    }
    int score[K];
    for (int i = 0; i < K; i++) score[i] = 500 * (arr[i] + 1);
    int s[2] = {0, 0};
    for (int i = 0; i < K; i++) {
        for (int j = 0; j < 2; j++) {
            if (t[j][i] == -1) continue;
            s[j] += score[i] * (250 - t[j][i]) / 250;
        }
    }
    return s[0] > s[1];
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < K; j++) {
            int tmp;
            cin >> tmp;
            if (i < 2) {
                t[i][j] = tmp;
            }
            if (tmp != -1) num[j]++;
        }
    }
    int res = INF;
    int solveCallCount = 0;
    for (int i = 0; i < 7776; i++) {
        if (check(i)) {
            int tmp = solve(i);
            solveCallCount++;
            if (tmp >= 0) res = min(res, tmp);
        }
    }
    check_frequent_solve_calls(solveCallCount);  // Insert checker for solve() calls
    if (res < INF) {
        cout << res << endl;
    } else {
        cout << "-1" << endl;
    }
    return 0;
}
```

### Explanation of Integrated Checkers

- **Iteration Check in `solve()`:** The `check_iterative_search_space` function is called within the `solve()` function to monitor the number of iterations for each call. This ensures the function doesn't perform excessively long iterations.
- **Call Frequency Check for `solve()`:** The `check_frequent_solve_calls` function is called after the loop that iterates over possible configurations. It ensures the `solve()` function isn't called excessively, which would indicate a potential slowdown due to too many configurations passing the `check()` condition. 

These checks are placed in a way that doesn't interfere with performance during normal execution but help identify when the program enters a slow path, ensuring the checks are both effective and efficient.

