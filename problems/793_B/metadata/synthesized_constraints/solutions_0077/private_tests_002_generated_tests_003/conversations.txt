system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Woken up by the alarm clock Igor the financial analyst hurried up to the work. He ate his breakfast and sat in his car. Sadly, when he opened his GPS navigator, he found that some of the roads in Bankopolis, the city where he lives, are closed due to road works. Moreover, Igor has some problems with the steering wheel, so he can make no more than two turns on his way to his office in bank.

Bankopolis looks like a grid of n rows and m columns. Igor should find a way from his home to the bank that has no more than two turns and doesn't contain cells with road works, or determine that it is impossible and he should work from home. A turn is a change in movement direction. Igor's car can only move to the left, to the right, upwards and downwards. Initially Igor can choose any direction. Igor is still sleepy, so you should help him.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid.

Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: 

  * "." — an empty cell; 
  * "*" — a cell with road works; 
  * "S" — the cell where Igor's home is located; 
  * "T" — the cell where Igor's office is located. 



It is guaranteed that "S" and "T" appear exactly once each.

Output

In the only line print "YES" if there is a path between Igor's home and Igor's office with no more than two turns, and "NO" otherwise.

Examples

Input

5 5
..S..
****.
T....
****.
.....


Output

YES

Input

5 5
S....
****.
.....
.****
..T..


Output

NO

Note

The first sample is shown on the following picture:

<image>

In the second sample it is impossible to reach Igor's office using less that 4 turns, thus there exists no path using no more than 2 turns. The path using exactly 4 turns is shown on this picture:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
template <typename Arg1>
void ZZ(const char* name, Arg1&& arg1) {
  std::cout << name << " = " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void ZZ(const char* names, Arg1&& arg1, Args&&... args) {
  const char* comma = strchr(names + 1, ',');
  std::cout.write(names, comma - names) << " = " << arg1;
  ZZ(comma, args...);
}
using namespace std;
long long int to_ll(string& s) {
  long long int i, ret = 0, p = 1;
  for (i = (long long int)s.length() - 1; i >= 0; i--)
    ret += (s[i] - '0') * p, p *= 10LL;
  return ret;
}
long long int gcd(long long int x, long long int y) {
  if (y == 0) return x;
  return gcd(y, x % y);
}
long long int pwr(long long int base, long long int expo, long long int m) {
  if (base == 0) return 0LL;
  if (expo == 0) return (1LL % m);
  if ((expo & 1) == 0) {
    long long int temp = pwr(base, expo >> 1, m);
    return (temp * temp) % m;
  }
  return ((base % m) * pwr(base, expo - 1, m)) % 1000000007;
}
vector<string> v;
long long int n, m;
pair<long long int, long long int> s, t;
bool vis[1009][1009][3][4];
pair<long long int, long long int> find_pos(char ch) {
  long long int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      if (v[i][j] == ch) {
        pair<long long int, long long int> p = {i, j};
        return p;
      }
    }
  }
}
void dfs(long long int r, long long int c, long long int turns,
         long long int dir) {
  if (r >= n || r < 0 || c >= m || c < 0) return;
  if (turns > 2) return;
  if (vis[r][c][turns][dir] == 1) return;
  if (v[r][c] == '*') return;
  if (r == t.first && c == t.second) {
    cout << "YES\n";
    exit(0);
  }
  vis[r][c][turns][dir] = 1;
  if (dir == 0) {
    dfs(r - 1, c, turns, 0);
    dfs(r + 1, c, turns + 1, 2);
    dfs(r, c + 1, turns + 1, 1);
    dfs(r, c - 1, turns + 1, 3);
  } else if (dir == 1) {
    dfs(r - 1, c, turns + 1, 0);
    dfs(r + 1, c, turns + 1, 2);
    dfs(r, c + 1, turns, 1);
    dfs(r, c - 1, turns + 1, 3);
  } else if (dir == 2) {
    dfs(r - 1, c, turns + 1, 0);
    dfs(r + 1, c, turns, 2);
    dfs(r, c + 1, turns + 1, 1);
    dfs(r, c - 1, turns + 1, 3);
  } else if (dir == 3) {
    dfs(r - 1, c, turns + 1, 0);
    dfs(r + 1, c, turns + 1, 2);
    dfs(r, c + 1, turns + 1, 1);
    dfs(r, c - 1, turns, 3);
  }
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  ;
  long long int i, j, sm = 0, dir;
  cin >> n >> m;
  v.resize(n);
  for (i = 0; i < n; i++) cin >> v[i];
  s = find_pos('S');
  t = find_pos('T');
  for (i = 0; i < 4; i++) {
    for (long long int p = 0; p < 1009; p++) {
      for (long long int q = 0; q < 1009; q++) {
        for (long long int x = 0; x < 3; x++) {
          for (long long int y = 0; y < 4; y++) {
            vis[p][q][x][y] = 0;
          }
        }
      }
    }
    dfs(s.first, s.second, 0, i);
  }
  cout << "NO\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 3
**T
*S*
***


(G.2) Fast Input

3 3
*T*
*S*
***


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Arg1> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void ZZ(const char* name, Arg1&& arg1) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << name << " = " << arg1 << std::endl; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Arg1, typename... Args> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void ZZ(const char* names, Arg1&& arg1, Args&&... args) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  const char* comma = strchr(names + 1, ','); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout.write(names, comma - names) << " = " << arg1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  ZZ(comma, args...); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long int to_ll(string& s) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  long long int i, ret = 0, p = 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = (long long int)s.length() - 1; i >= 0; i--) /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    ret += (s[i] - '0') * p, p *= 10LL; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long int gcd(long long int x, long long int y) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(y, x % y); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long int pwr(long long int base, long long int expo, long long int m) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (base == 0) return 0LL; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (expo == 0) return (1LL % m); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if ((expo & 1) == 0) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    long long int temp = pwr(base, expo >> 1, m); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return (temp * temp) % m; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return ((base % m) * pwr(base, expo - 1, m)) % 1000000007; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, m; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long int, long long int> s, t; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[1009][1009][3][4]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long int, long long int> find_pos(char ch) { /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
  long long int i, j; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) { /* line 38 slow_hit_count: 3, fast_hit_count: 3 */
    for (j = 0; j < m; j++) { /* line 39 slow_hit_count: 9, fast_hit_count: 8 */
      if (v[i][j] == ch) { /* line 40 slow_hit_count: 8, fast_hit_count: 7 */
        pair<long long int, long long int> p = {i, j}; /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
        return p; /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(long long int r, long long int c, long long int turns, /* line 47 slow_hit_count: 20, fast_hit_count: 2 */
         long long int dir) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  if (r >= n || r < 0 || c >= m || c < 0) return; /* line 49 slow_hit_count: 20, fast_hit_count: 2 */
  if (turns > 2) return; /* line 50 slow_hit_count: 20, fast_hit_count: 2 */
  if (vis[r][c][turns][dir] == 1) return; /* line 51 slow_hit_count: 20, fast_hit_count: 2 */
  if (v[r][c] == '*') return; /* line 52 slow_hit_count: 20, fast_hit_count: 2 */
  if (r == t.first && c == t.second) { /* line 53 slow_hit_count: 4, fast_hit_count: 2 */
    cout << "YES\n"; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
    exit(0); /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  vis[r][c][turns][dir] = 1; /* line 57 slow_hit_count: 4, fast_hit_count: 1 */
  if (dir == 0) { /* line 58 slow_hit_count: 4, fast_hit_count: 1 */
    dfs(r - 1, c, turns, 0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    dfs(r + 1, c, turns + 1, 2); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c + 1, turns + 1, 1); /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c - 1, turns + 1, 3); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  } else if (dir == 1) { /* line 63 slow_hit_count: 3, fast_hit_count: 0 */
    dfs(r - 1, c, turns + 1, 0); /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r + 1, c, turns + 1, 2); /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c + 1, turns, 1); /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c - 1, turns + 1, 3); /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
  } else if (dir == 2) { /* line 68 slow_hit_count: 2, fast_hit_count: 0 */
    dfs(r - 1, c, turns + 1, 0); /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r + 1, c, turns, 2); /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c + 1, turns + 1, 1); /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c - 1, turns + 1, 3); /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  } else if (dir == 3) { /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r - 1, c, turns + 1, 0); /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r + 1, c, turns + 1, 2); /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c + 1, turns + 1, 1); /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
    dfs(r, c - 1, turns, 3); /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  long long int i, j, sm = 0, dir; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  v.resize(n); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) cin >> v[i]; /* line 88 slow_hit_count: 4, fast_hit_count: 4 */
  s = find_pos('S'); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  t = find_pos('T'); /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < 4; i++) { /* line 91 slow_hit_count: 5, fast_hit_count: 1 */
    for (long long int p = 0; p < 1009; p++) { /* line 92 slow_hit_count: 4040, fast_hit_count: 1010 */
      for (long long int q = 0; q < 1009; q++) { /* line 93 slow_hit_count: 4076360, fast_hit_count: 1019090 */
        for (long long int x = 0; x < 3; x++) { /* line 94 slow_hit_count: 16289296, fast_hit_count: 4072324 */
          for (long long int y = 0; y < 4; y++) { /* line 95 slow_hit_count: 61084860, fast_hit_count: 15271215 */
            vis[p][q][x][y] = 0; /* line 96 slow_hit_count: 48867888, fast_hit_count: 12216972 */
          } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
    dfs(s.first, s.second, 0, i); /* line 101 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO\n"; /* line 103 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 104 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose the performance issue with the provided C program, we need to analyze the code execution and pinpoint why the "slow" input takes significantly longer than the "fast" input despite their apparent similarity in structure and size.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Code Analysis
1. **DFS Function (`dfs`)**:
   - The `dfs` function is recursively called to explore possible paths on the grid.
   - High hit counts in this function (20 hits for slow input vs. 2 for fast) indicate it explores many more paths for the slow input.
   - The function employs four direction options (up, down, left, right), checks for out-of-bounds conditions, and ensures not to exceed two turns.

2. **Initialization of the `vis` array**:
   - The `vis` array, which tracks visited states, is initialized for all possible states in a large 4D array. Lines 92-96 show disproportionately large hit counts for the slow input.
   - This suggests an inefficiency due to the large size of the array relative to the input constraints.

3. **Grid Size and Road Block Configurations**:
   - The grid size (n x m) affects how many paths need to be evaluated, particularly with roadblocks (`*`) limiting viable paths.

#### Hit Count Insights
- The initialization of the `vis` array has very high hit counts (e.g., line 96: 48,867,888 for slow input vs. 12,216,972 for fast), indicating a potential area for optimization.
- The DFS function has significantly higher hits for the slow input, suggesting it explores a much larger search space due to roadblock configurations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we derive the following natural language invariants to describe conditions that lead to slow execution:

1. **Path Complexity Due to Turns and Roadblocks**:
   - "When the initial path options from 'S' to 'T' are severely limited by roadblocks, the algorithm may explore a large number of possibilities, causing significant slowdowns. This is exacerbated when the constraints (e.g., no more than two turns) require deeper search depth due to grid configuration."

2. **Large Visited State Space**:
   - "The initialization and management of a large visited state space can lead to inefficiencies, particularly when the grid size approaches maximum constraints (n, m close to 1000) and is sparsely populated with valid paths between 'S' and 'T'. Optimizing the storage and checking mechanism for visited states may mitigate performance bottlenecks."

3. **Inefficient Path Exploration**:
   - "If the grid contains complex barriers that require many direction changes to navigate within the constraint of two turns, the DFS approach may become inefficient as it potentially revisits states multiple times due to the large `vis` array tracking."

These invariants help in understanding the performance triggers and guide potential optimizations, such as refining the search strategy or optimizing the memory usage of the visited states array.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Woken up by the alarm clock Igor the financial analyst hurried up to the work. He ate his breakfast and sat in his car. Sadly, when he opened his GPS navigator, he found that some of the roads in Bankopolis, the city where he lives, are closed due to road works. Moreover, Igor has some problems with the steering wheel, so he can make no more than two turns on his way to his office in bank.

Bankopolis looks like a grid of n rows and m columns. Igor should find a way from his home to the bank that has no more than two turns and doesn't contain cells with road works, or determine that it is impossible and he should work from home. A turn is a change in movement direction. Igor's car can only move to the left, to the right, upwards and downwards. Initially Igor can choose any direction. Igor is still sleepy, so you should help him.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid.

Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: 

  * "." — an empty cell; 
  * "*" — a cell with road works; 
  * "S" — the cell where Igor's home is located; 
  * "T" — the cell where Igor's office is located. 



It is guaranteed that "S" and "T" appear exactly once each.

Output

In the only line print "YES" if there is a path between Igor's home and Igor's office with no more than two turns, and "NO" otherwise.

Examples

Input

5 5
..S..
****.
T....
****.
.....


Output

YES

Input

5 5
S....
****.
.....
.****
..T..


Output

NO

Note

The first sample is shown on the following picture:

<image>

In the second sample it is impossible to reach Igor's office using less that 4 turns, thus there exists no path using no more than 2 turns. The path using exactly 4 turns is shown on this picture:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the invariants derived earlier, I'll create checker functions in C++ to identify performance bottlenecks as described in the natural language statements.

1. **Checker for Path Complexity Due to Turns and Roadblocks**:
   ```cpp
   void check_path_complexity_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Path complexity invariant triggered - excessive path exploration!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Large Visited State Space**:
   ```cpp
   void check_large_state_space_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Large state space invariant triggered - inefficient memory usage!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Inefficient Path Exploration**:
   ```cpp
   void check_inefficient_path_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Inefficient path exploration invariant triggered - excessive recursion or revisits!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, I'll integrate these checkers into the C++ program at effective points to ensure they help identify potential slow execution paths.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_path_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Path complexity invariant triggered - excessive path exploration!" << endl;
        abort();
    }
}

void check_large_state_space_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Large state space invariant triggered - inefficient memory usage!" << endl;
        abort();
    }
}

void check_inefficient_path_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Inefficient path exploration invariant triggered - excessive recursion or revisits!" << endl;
        abort();
    }
}

vector<string> v;
long long int n, m;
pair<long long int, long long int> s, t;
bool vis[1009][1009][3][4];

// Helper functions
pair<long long int, long long int> find_pos(char ch) {
    for (long long int i = 0; i < n; i++) {
        for (long long int j = 0; j < m; j++) {
            if (v[i][j] == ch) {
                return {i, j};
            }
        }
    }
}

// Recursive DFS function
void dfs(long long int r, long long int c, long long int turns, long long int dir) {
    if (r >= n || r < 0 || c >= m || c < 0) return;
    if (turns > 2) return;
    if (vis[r][c][turns][dir] == 1) return;
    if (v[r][c] == '*') return;
    if (r == t.first && c == t.second) {
        cout << "YES\n";
        exit(0);
    }
    
    vis[r][c][turns][dir] = 1;

    // Check inefficient path invariant
    check_inefficient_path_invariant(turns > 2);

    if (dir == 0) {
        dfs(r - 1, c, turns, 0);
        dfs(r + 1, c, turns + 1, 2);
        dfs(r, c + 1, turns + 1, 1);
        dfs(r, c - 1, turns + 1, 3);
    } else if (dir == 1) {
        dfs(r - 1, c, turns + 1, 0);
        dfs(r + 1, c, turns + 1, 2);
        dfs(r, c + 1, turns, 1);
        dfs(r, c - 1, turns + 1, 3);
    } else if (dir == 2) {
        dfs(r - 1, c, turns + 1, 0);
        dfs(r + 1, c, turns, 2);
        dfs(r, c + 1, turns + 1, 1);
        dfs(r, c - 1, turns + 1, 3);
    } else if (dir == 3) {
        dfs(r - 1, c, turns + 1, 0);
        dfs(r + 1, c, turns + 1, 2);
        dfs(r, c + 1, turns + 1, 1);
        dfs(r, c - 1, turns, 3);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    v.resize(n);
    for (long long int i = 0; i < n; i++) cin >> v[i];

    s = find_pos('S');
    t = find_pos('T');

    // Check large state space invariant
    check_large_state_space_invariant(n * m > 1000000);

    for (long long int i = 0; i < 4; i++) {
        memset(vis, 0, sizeof(vis));
        dfs(s.first, s.second, 0, i);
    }

    // Check path complexity invariant
    check_path_complexity_invariant(s.first == t.first && s.second == t.second);

    cout << "NO\n";
}
```

### Explanation

- **Checker Placement**:
  - **`check_path_complexity_invariant`**: Added to ensure immediate termination if starting and ending positions coincide but the path complexity is still high.
  - **`check_large_state_space_invariant`**: Checks if the grid size is excessively large before DFS exploration starts, which can lead to inefficient memory usage.
  - **`check_inefficient_path_invariant`**: Placed within the DFS to monitor if the number of turns exceeds constraints during path exploration, indicating inefficiency.

These checks serve as guards against conditions that could lead to performance bottlenecks and are strategically placed to avoid introducing overhead in tight loops.

