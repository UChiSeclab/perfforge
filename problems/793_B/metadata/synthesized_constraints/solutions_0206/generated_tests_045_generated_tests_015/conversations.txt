system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Woken up by the alarm clock Igor the financial analyst hurried up to the work. He ate his breakfast and sat in his car. Sadly, when he opened his GPS navigator, he found that some of the roads in Bankopolis, the city where he lives, are closed due to road works. Moreover, Igor has some problems with the steering wheel, so he can make no more than two turns on his way to his office in bank.

Bankopolis looks like a grid of n rows and m columns. Igor should find a way from his home to the bank that has no more than two turns and doesn't contain cells with road works, or determine that it is impossible and he should work from home. A turn is a change in movement direction. Igor's car can only move to the left, to the right, upwards and downwards. Initially Igor can choose any direction. Igor is still sleepy, so you should help him.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid.

Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: 

  * "." — an empty cell; 
  * "*" — a cell with road works; 
  * "S" — the cell where Igor's home is located; 
  * "T" — the cell where Igor's office is located. 



It is guaranteed that "S" and "T" appear exactly once each.

Output

In the only line print "YES" if there is a path between Igor's home and Igor's office with no more than two turns, and "NO" otherwise.

Examples

Input

5 5
..S..
****.
T....
****.
.....


Output

YES

Input

5 5
S....
****.
.....
.****
..T..


Output

NO

Note

The first sample is shown on the following picture:

<image>

In the second sample it is impossible to reach Igor's office using less that 4 turns, thus there exists no path using no more than 2 turns. The path using exactly 4 turns is shown on this picture:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization("unroll-loops")
using namespace std;
long long dx[] = {1, 0, -1, 0};
long long dy[] = {0, 1, 0, -1};
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }
template <typename T, typename V>
void __print(const pair<T, V> &x) {
  cerr << '{';
  __print(x.first);
  cerr << ',';
  __print(x.second);
  cerr << '}';
}
template <typename T>
void __print(const T &x) {
  long long f = 0;
  cerr << '{';
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i);
  cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v) {
  __print(t);
  if (sizeof...(v)) cerr << ", ";
  _print(v...);
}
pair<long long, long long> shuru, ant;
vector<string> v;
long long n, m;
char a[4] = {'L', 'R', 'U', 'D'};
long long vis[1005][1005][5];
bool kro(long long x, long long y, long long dir, long long cnt) {
  if (x < 0 || y < 0 || x >= n || y >= m || cnt > 2 || v[x][y] == '*')
    return false;
  if (cnt <= 2 && x == ant.first && y == ant.second) return true;
  if (vis[x][y][dir]) return false;
  bool b, c, d, e;
  vis[x][y][dir] = 1;
  if (dir == 0) {
    b = kro(x, y + 1, 0, cnt);
    c = kro(x + 1, y, 2, cnt + 1);
    d = kro(x - 1, y, 3, cnt + 1);
  } else if (dir == 1) {
    b = kro(x, y - 1, 1, cnt);
    c = kro(x + 1, y, 2, cnt + 1);
    d = kro(x - 1, y, 3, cnt + 1);
  } else if (dir == 2) {
    b = kro(x, y + 1, 0, cnt + 1);
    c = kro(x + 1, y, 2, cnt);
    d = kro(x, y - 1, 1, cnt + 1);
  } else if (dir == 3) {
    b = kro(x, y + 1, 0, cnt + 1);
    c = kro(x - 1, y, 3, cnt);
    d = kro(x, y - 1, 1, cnt + 1);
  }
  return b || c || d;
}
void solve() {
  cin >> n >> m;
  v.resize(n);
  for (long long i = 0; i < n; i++) cin >> v[i];
  for (long long i = 0; i < n; i++) {
    for (long long j = 0; j < m; j++) {
      if (v[i][j] == 'S') shuru.first = i, shuru.second = j;
      if (v[i][j] == 'T') ant.first = i, ant.second = j;
    }
  }
  for (long long i = 0; i < 4; i++) {
    for (long long i = 0; i < 1001; i++) {
      for (long long j = 0; j < 1001; j++) {
        for (long long k = 0; k < 4; k++) vis[i][j][k] = 0;
      }
    }
    if (kro(shuru.first, shuru.second, i, 0)) {
      cout << "YES"
           << "\n";
      return;
    }
  }
  cout << "NO"
       << "\n";
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 5
..S..
*.***
....T
.****
../..


(G.2) Fast Input

5 5
..S..
****.
....T
.****
../..


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("avx,avx2,fma") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimization("unroll-loops") /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dx[] = {1, 0, -1, 0}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dy[] = {0, 1, 0, -1}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long x) { cerr << x; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long long x) { cerr << x; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned x) { cerr << x; } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long x) { cerr << x; } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long long x) { cerr << x; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void __print(float x) { cerr << x; } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void __print(double x) { cerr << x; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long double x) { cerr << x; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void __print(char x) { cerr << '\'' << x << '\''; } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const char *x) { cerr << '\"' << x << '\"'; } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const string &x) { cerr << '\"' << x << '\"'; } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void __print(bool x) { cerr << (x ? "true" : "false"); } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename V> /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const pair<T, V> &x) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.first); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << ','; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.second); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '}'; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const T &x) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  long long f = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << "}"; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
void _print() { cerr << "]\n"; } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... V> /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
void _print(T t, V... v) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  __print(t); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  if (sizeof...(v)) cerr << ", "; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  _print(v...); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> shuru, ant; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
char a[4] = {'L', 'R', 'U', 'D'}; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
long long vis[1005][1005][5]; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
bool kro(long long x, long long y, long long dir, long long cnt) { /* line 47 slow_hit_count: 35, fast_hit_count: 13 */
  if (x < 0 || y < 0 || x >= n || y >= m || cnt > 2 || v[x][y] == '*') /* line 48 slow_hit_count: 35, fast_hit_count: 13 */
    return false; /* line 49 slow_hit_count: 23, fast_hit_count: 8 */
  if (cnt <= 2 && x == ant.first && y == ant.second) return true; /* line 50 slow_hit_count: 12, fast_hit_count: 5 */
  if (vis[x][y][dir]) return false; /* line 51 slow_hit_count: 11, fast_hit_count: 4 */
  bool b, c, d, e; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  vis[x][y][dir] = 1; /* line 53 slow_hit_count: 11, fast_hit_count: 4 */
  if (dir == 0) { /* line 54 slow_hit_count: 11, fast_hit_count: 4 */
    b = kro(x, y + 1, 0, cnt); /* line 55 slow_hit_count: 5, fast_hit_count: 3 */
    c = kro(x + 1, y, 2, cnt + 1); /* line 56 slow_hit_count: 5, fast_hit_count: 3 */
    d = kro(x - 1, y, 3, cnt + 1); /* line 57 slow_hit_count: 5, fast_hit_count: 3 */
  } else if (dir == 1) { /* line 58 slow_hit_count: 6, fast_hit_count: 1 */
    b = kro(x, y - 1, 1, cnt); /* line 59 slow_hit_count: 4, fast_hit_count: 0 */
    c = kro(x + 1, y, 2, cnt + 1); /* line 60 slow_hit_count: 4, fast_hit_count: 0 */
    d = kro(x - 1, y, 3, cnt + 1); /* line 61 slow_hit_count: 4, fast_hit_count: 0 */
  } else if (dir == 2) { /* line 62 slow_hit_count: 2, fast_hit_count: 1 */
    b = kro(x, y + 1, 0, cnt + 1); /* line 63 slow_hit_count: 2, fast_hit_count: 1 */
    c = kro(x + 1, y, 2, cnt); /* line 64 slow_hit_count: 2, fast_hit_count: 1 */
    d = kro(x, y - 1, 1, cnt + 1); /* line 65 slow_hit_count: 2, fast_hit_count: 1 */
  } else if (dir == 3) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    b = kro(x, y + 1, 0, cnt + 1); /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    c = kro(x - 1, y, 3, cnt); /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    d = kro(x, y - 1, 1, cnt + 1); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  return b || c || d; /* line 71 slow_hit_count: 11, fast_hit_count: 4 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  v.resize(n); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) cin >> v[i]; /* line 76 slow_hit_count: 6, fast_hit_count: 6 */
  for (long long i = 0; i < n; i++) { /* line 77 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 0; j < m; j++) { /* line 78 slow_hit_count: 30, fast_hit_count: 30 */
      if (v[i][j] == 'S') shuru.first = i, shuru.second = j; /* line 79 slow_hit_count: 25, fast_hit_count: 25 */
      if (v[i][j] == 'T') ant.first = i, ant.second = j; /* line 80 slow_hit_count: 25, fast_hit_count: 25 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < 4; i++) { /* line 83 slow_hit_count: 2, fast_hit_count: 1 */
    for (long long i = 0; i < 1001; i++) { /* line 84 slow_hit_count: 2004, fast_hit_count: 1002 */
      for (long long j = 0; j < 1001; j++) { /* line 85 slow_hit_count: 2006004, fast_hit_count: 1003002 */
        for (long long k = 0; k < 4; k++) vis[i][j][k] = 0; /* line 86 slow_hit_count: 10020010, fast_hit_count: 5010005 */
      } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    if (kro(shuru.first, shuru.second, i, 0)) { /* line 89 slow_hit_count: 2, fast_hit_count: 1 */
      cout << "YES" /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
           << "\n"; /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
      return; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO" /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
       << "\n"; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 103 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 47 to Line 71 (`bool kro` function)**:
   - This function is called recursively to explore paths on the grid. 
   - The line-level hit count shows that lines within this function have significantly higher hit counts for the slow input compared to the fast input. 

2. **Line 84 to Line 86 (Initialization of `vis` array)**:
   - The triple loop for initializing the `vis` array is heavily hit in both inputs, but twice as much in the slow input. This suggests that the initialization logic is contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Recursion/Branching**:
   - Natural Language: "If the search space through the grid requires exploring many branches due to complex paths and obstructions (like road works), the recursive exploration with branching may cause increased computational time."
   - This means that when the grid has multiple potential paths but is constrained by turns and obstacles, the time spent checking each path recursively can grow significantly.

2. **Repeated Array Initialization**:
   - Natural Language: "If the `vis` array is frequently reinitialized for large grid sizes, especially in combination with nested loops, it can lead to performance bottlenecks."
   - When the grid size is large and the function to check paths (`kro`) is invoked multiple times, the repeated initialization of a large 3D array can become a major performance issue.

3. **Obstacle-Induced Path Complexity**:
   - Natural Language: "Obstacles that create narrow or zigzagging paths may increase the complexity of finding a valid route with fewer than three turns, leading to longer execution times."
   - This implies that when roadworks (`*`) create convoluted paths, the depth and breadth of recursion needed to find a solution can increase drastically, causing slowdowns.

### Considerations

- **Grid Size and Turn Limits**:
  - With `n` and `m` both <= 1000, the constraints allow for a maximum of 1,000,000 cells. If the maximum turn constraint (2 turns) forces more complex checks, performance can degrade.
  
- **Avoidance of Hardcoding**:
  - While exact numbers are not used, it is understood that these conditions can be exacerbated as grid size approaches maximum constraints and obstacles create more complexity.

These invariants capture potential scenarios leading to slow execution without relying on specific numeric values from the slow input, instead abstracting them into general patterns and categories. They help in foreseeing slowdowns in future scenarios with similar constraints and input patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Woken up by the alarm clock Igor the financial analyst hurried up to the work. He ate his breakfast and sat in his car. Sadly, when he opened his GPS navigator, he found that some of the roads in Bankopolis, the city where he lives, are closed due to road works. Moreover, Igor has some problems with the steering wheel, so he can make no more than two turns on his way to his office in bank.

Bankopolis looks like a grid of n rows and m columns. Igor should find a way from his home to the bank that has no more than two turns and doesn't contain cells with road works, or determine that it is impossible and he should work from home. A turn is a change in movement direction. Igor's car can only move to the left, to the right, upwards and downwards. Initially Igor can choose any direction. Igor is still sleepy, so you should help him.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid.

Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: 

  * "." — an empty cell; 
  * "*" — a cell with road works; 
  * "S" — the cell where Igor's home is located; 
  * "T" — the cell where Igor's office is located. 



It is guaranteed that "S" and "T" appear exactly once each.

Output

In the only line print "YES" if there is a path between Igor's home and Igor's office with no more than two turns, and "NO" otherwise.

Examples

Input

5 5
..S..
****.
T....
****.
.....


Output

YES

Input

5 5
S....
****.
.....
.****
..T..


Output

NO

Note

The first sample is shown on the following picture:

<image>

In the second sample it is impossible to reach Igor's office using less that 4 turns, thus there exists no path using no more than 2 turns. The path using exactly 4 turns is shown on this picture:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Here are the checkers for the performance-characterizing invariants we derived:

1. **High Recursion/Branching**:
   - We need to estimate the maximum possible branching factor and recursion depth. Since the problem constraints allow a grid of up to 1000x1000, a reasonable estimation could be if a single recursion call could explore more than 100 potential paths due to complex road conditions.

   ```cpp
   void check_recursion_invariant(int recursionDepth, int branchingFactor) {
       if (recursionDepth > 100 || branchingFactor > 10) {
           cerr << "Warning: Recursion invariant triggered - high recursion depth or branching factor" << endl;
           abort();
       }
   }
   ```

2. **Repeated Array Initialization**:
   - Large grid sizes leading to repeated initialization of the `vis` array could be a bottleneck. We can add a check right after initialization to ensure it doesn't exceed a certain threshold.
   
   ```cpp
   void check_initialization_invariant(int n, int m) {
       if (n * m > 100000) { // Check against a large grid size
           cerr << "Warning: Initialization invariant triggered - potentially large grid initialization" << endl;
           abort();
       }
   }
   ```

3. **Obstacle-Induced Path Complexity**:
   - If the grid has a high density of obstacles that could cause complex path searches, we can use a checker to capture this situation.
   
   ```cpp
   void check_path_complexity_invariant(int obstacleCount, int n, int m) {
       if (obstacleCount > (n * m) / 2) { // More than half of the grid is obstacles
           cerr << "Warning: Path complexity invariant triggered - high obstacle density" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original C++ Code

Now, let's integrate these checkers into the original program. We'll place them at logical points in the control flow where they're effective without adding significant overhead.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization("unroll-loops")
using namespace std;

// Checkers for performance-characterizing invariants
void check_recursion_invariant(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 100 || branchingFactor > 10) {
        cerr << "Warning: Recursion invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_initialization_invariant(int n, int m) {
    if (n * m > 100000) {
        cerr << "Warning: Initialization invariant triggered - potentially large grid initialization" << endl;
        abort();
    }
}

void check_path_complexity_invariant(int obstacleCount, int n, int m) {
    if (obstacleCount > (n * m) / 2) {
        cerr << "Warning: Path complexity invariant triggered - high obstacle density" << endl;
        abort();
    }
}

long long dx[] = {1, 0, -1, 0};
long long dy[] = {0, 1, 0, -1};
pair<long long, long long> shuru, ant;
vector<string> v;
long long n, m;
char a[4] = {'L', 'R', 'U', 'D'};
long long vis[1005][1005][5];

bool kro(long long x, long long y, long long dir, long long cnt) {
    check_recursion_invariant(cnt, 4); // Example call to monitor recursion

    if (x < 0 || y < 0 || x >= n || y >= m || cnt > 2 || v[x][y] == '*')
        return false;
    if (cnt <= 2 && x == ant.first && y == ant.second) return true;
    if (vis[x][y][dir]) return false;
    bool b, c, d, e;
    vis[x][y][dir] = 1;
    if (dir == 0) {
        b = kro(x, y + 1, 0, cnt);
        c = kro(x + 1, y, 2, cnt + 1);
        d = kro(x - 1, y, 3, cnt + 1);
    } else if (dir == 1) {
        b = kro(x, y - 1, 1, cnt);
        c = kro(x + 1, y, 2, cnt + 1);
        d = kro(x - 1, y, 3, cnt + 1);
    } else if (dir == 2) {
        b = kro(x, y + 1, 0, cnt + 1);
        c = kro(x + 1, y, 2, cnt);
        d = kro(x, y - 1, 1, cnt + 1);
    } else if (dir == 3) {
        b = kro(x, y + 1, 0, cnt + 1);
        c = kro(x - 1, y, 3, cnt);
        d = kro(x, y - 1, 1, cnt + 1);
    }
    return b || c || d;
}

void solve() {
    cin >> n >> m;
    v.resize(n);
    int obstacleCount = 0;

    for (long long i = 0; i < n; i++) cin >> v[i];
    for (long long i = 0; i < n; i++) {
        for (long long j = 0; j < m; j++) {
            if (v[i][j] == 'S') shuru.first = i, shuru.second = j;
            if (v[i][j] == 'T') ant.first = i, ant.second = j;
            if (v[i][j] == '*') obstacleCount++;
        }
    }

    check_initialization_invariant(n, m); // Checking initialization thresholds
    check_path_complexity_invariant(obstacleCount, n, m); // Checking path complexity

    for (long long i = 0; i < 4; i++) {
        for (long long i = 0; i < 1001; i++) {
            for (long long j = 0; j < 1001; j++) {
                for (long long k = 0; k < 4; k++) vis[i][j][k] = 0;
            }
        }
        if (kro(shuru.first, shuru.second, i, 0)) {
            cout << "YES"
                 << "\n";
            return;
        }
    }
    cout << "NO"
         << "\n";
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}
```

### Explanation

- **Checkers**: The checkers are added to monitor potential bottlenecks by checking recursion depth, initialization size, and obstacle complexity.
- **Placement**: The checkers are strategically placed to run just after input reading and before recursive calls to avoid impacting performance in tight loops. They will help in detecting runtime conditions that could lead to slow performance, allowing for early detection and debugging.

