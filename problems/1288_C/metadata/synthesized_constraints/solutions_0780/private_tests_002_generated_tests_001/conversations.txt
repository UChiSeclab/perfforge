system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m, dp[1005][1005][10];
long long fn(long long l, long long r, long long pos) {
  if (pos == m) return 1;
  if (l > r) return 0;
  long long &z = dp[l][r][pos];
  if (z != -1) return z;
  z = 0;
  z += fn(l, r, pos + 1);
  z %= 1000000007;
  z += fn(l + 1, r, pos);
  z %= 1000000007;
  z += fn(l, r - 1, pos);
  z %= 1000000007;
  z -= fn(l + 1, r - 1, pos);
  z += 1000000007;
  z %= 1000000007;
  return z;
}
int main() {
  long long int i, j, k, z = 0, c = 0, t, x, y, l, r, mid;
  scanf("%lld", &n);
  scanf("%lld", &m);
  memset(dp, -1, sizeof(dp));
  z = fn(1, n, 0);
  cout << z << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

678 7


(G.2) Fast Input

7 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, dp[1005][1005][10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long fn(long long l, long long r, long long pos) { /* line 4 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (pos == m) return 1; /* line 5 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (l > r) return 0; /* line 6 slow_hit_count: 6214888, fast_hit_count: 757 */
  long long &z = dp[l][r][pos]; /* line 7 slow_hit_count: 6195911, fast_hit_count: 568 */
  if (z != -1) return z; /* line 8 slow_hit_count: 6195911, fast_hit_count: 568 */
  z = 0; /* line 9 slow_hit_count: 1611267, fast_hit_count: 196 */
  z += fn(l, r, pos + 1); /* line 10 slow_hit_count: 1611267, fast_hit_count: 196 */
  z %= 1000000007; /* line 11 slow_hit_count: 1611267, fast_hit_count: 196 */
  z += fn(l + 1, r, pos); /* line 12 slow_hit_count: 1611267, fast_hit_count: 196 */
  z %= 1000000007; /* line 13 slow_hit_count: 1611267, fast_hit_count: 196 */
  z += fn(l, r - 1, pos); /* line 14 slow_hit_count: 1611267, fast_hit_count: 196 */
  z %= 1000000007; /* line 15 slow_hit_count: 1611267, fast_hit_count: 196 */
  z -= fn(l + 1, r - 1, pos); /* line 16 slow_hit_count: 1611267, fast_hit_count: 196 */
  z += 1000000007; /* line 17 slow_hit_count: 1611267, fast_hit_count: 196 */
  z %= 1000000007; /* line 18 slow_hit_count: 1611267, fast_hit_count: 196 */
  return z; /* line 19 slow_hit_count: 1611267, fast_hit_count: 196 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long int i, j, k, z = 0, c = 0, t, x, y, l, r, mid; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld", &n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld", &m); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  z = fn(1, n, 0); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cout << z << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - The recursive function `fn` is hit significantly more times with the slow input (6,445,069 times) compared to the fast input (785 times).
   - Lines 5 and 6 (`if` statements) and line 7 (retrieving from the DP table) are also heavily hit, indicating that many recursive calls are being made and the function is being visited multiple times for the same parameters.
   - Lines 9-19 are part of the recursive function, which is executed repeatedly during the slow input run.

2. **Pinpointing Lines or Functions:**
   - The line `long long fn(long long l, long long r, long long pos)` (line 4) is where recursion begins and contributes to a large number of hits.
   - The function frequently hits lines 9-19 within recursive calls, indicating a depth-first exploration pattern.

3. **Data Structure and Loop Interaction:**
   - The recursion depends on dynamic programming (DP) table usage (`dp[l][r][pos]`), and the high hit counts suggest that the DP table's initial state (being filled with `-1`) leads to many states being recomputed.
   - The parameters `l` and `r`, which define the range of elements being considered, contribute to the number of recursive calls, especially when the range size increases.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**
   - **Invariant #1: Recursion Depth and Range Size**
     - "When the range `r - l` in the recursive function is large, the number of recursive calls increases significantly, leading to performance degradation."
   
   - **Invariant #2: Inefficient DP Table Utilization**
     - "If the dynamic programming table is not effectively utilized (i.e., there are many states being recomputed due to insufficient memoization), performance will degrade. This often occurs when the state space (`n * n * m`) is large."
   
   - **Invariant #3: High Branching in Recursive Calls**
     - "The branching factor in recursive calls, especially when `m` is close to its upper limit, can lead to extensive exploration and recursive computations, slowing down the program."

2. **Explanation of Performance Triggers:**
   - **Large Range Size (`r - l`)**: When `n` is large (close to 1000), the recursion explores a wide range, causing numerous DP table accesses and recalculations.
   - **Insufficient DP Utilization**: With high `n` and `m` values, if many DP entries are not cached properly, the function recalculates results for the same subproblems, leading to inefficiency.
   - **High Branching Factor**: As `m` approaches 10, more recursive calls are made per function invocation, leading to exponential growth in computation due to the recursive nature.

3. **Recommendations for Future Scenarios:**
   - The program should carefully manage the DP table size and ensure effective memoization by reducing unnecessary recalculations.
   - Consider optimizing the recursion strategy to minimize the depth and breadth of exploration, especially when `n` and `m` are large.
   - Implement checks to detect when recursion is occurring with large parameters and optimize those paths to avoid exponential growth in computation time.

These performance invariants provide insight into how changes in input size and algorithmic strategies influence the runtime, aiding in detecting and optimizing slow paths in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets implementing the checks.

1. **Invariant #1: Recursion Depth and Range Size**
   - **Natural Language Description**: "When the range `r - l` in the recursive function is large, the number of recursive calls increases significantly, leading to performance degradation."
   - **Checker Code**:
   ```cpp
   void check_range_size_invariant(long long l, long long r) {
       if (r - l > 500) { // Example threshold
           cerr << "Warning: Performance bottleneck condition triggered - large range size in recursive calls!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Inefficient DP Table Utilization**
   - **Natural Language Description**: "If the dynamic programming table is not effectively utilized (i.e., there are many states being recomputed due to insufficient memoization), performance will degrade."
   - **Checker Code**:
   ```cpp
   void check_dp_utilization_invariant(long long l, long long r, long long pos) {
       if (dp[l][r][pos] == -1 && (r - l) > 100) { // Example threshold
           cerr << "Warning: Performance bottleneck condition triggered - inefficient DP table utilization!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: High Branching in Recursive Calls**
   - **Natural Language Description**: "The branching factor in recursive calls, especially when `m` is close to its upper limit, can lead to extensive exploration and recursive computations, slowing down the program."
   - **Checker Code**:
   ```cpp
   void check_branching_invariant(long long pos) {
       if (pos > 7) { // Example threshold for branching
           cerr << "Warning: Performance bottleneck condition triggered - high branching in recursive calls!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the instrumented C++ code with the checker functions integrated at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m, dp[1005][1005][10];

void check_range_size_invariant(long long l, long long r) {
    if (r - l > 500) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - large range size in recursive calls!" << endl;
        abort();
    }
}

void check_dp_utilization_invariant(long long l, long long r, long long pos) {
    if (dp[l][r][pos] == -1 && (r - l) > 100) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - inefficient DP table utilization!" << endl;
        abort();
    }
}

void check_branching_invariant(long long pos) {
    if (pos > 7) { // Example threshold for branching
        cerr << "Warning: Performance bottleneck condition triggered - high branching in recursive calls!" << endl;
        abort();
    }
}

long long fn(long long l, long long r, long long pos) {
    check_range_size_invariant(l, r); // Check for large range size
    check_dp_utilization_invariant(l, r, pos); // Check for inefficient DP utilization
    check_branching_invariant(pos); // Check for high branching
    
    if (pos == m) return 1;
    if (l > r) return 0;
    long long &z = dp[l][r][pos];
    if (z != -1) return z;
    z = 0;
    z += fn(l, r, pos + 1);
    z %= 1000000007;
    z += fn(l + 1, r, pos);
    z %= 1000000007;
    z += fn(l, r - 1, pos);
    z %= 1000000007;
    z -= fn(l + 1, r - 1, pos);
    z += 1000000007;
    z %= 1000000007;
    return z;
}

int main() {
    long long int i, j, k, z = 0, c = 0, t, x, y, l, r, mid;
    scanf("%lld", &n);
    scanf("%lld", &m);
    memset(dp, -1, sizeof(dp));
    z = fn(1, n, 0);
    cout << z << endl;
}
```

### Explanation of Instrumented Code

- **Range Size Check**: The `check_range_size_invariant` function is called at the start of the `fn` function to ensure the range size does not exceed a threshold, potentially causing excessive recursive calls.
- **DP Utilization Check**: The `check_dp_utilization_invariant` function checks if a state is being computed for the first time with a large range, indicating inefficient DP use.
- **Branching Check**: The `check_branching_invariant` function ensures that the recursion does not go too deep, which would cause high branching and performance issues.

These checks are strategically placed to detect and abort execution when potential performance bottlenecks are encountered, making the program more robust against slowdowns.

