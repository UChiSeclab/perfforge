system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long mod = 1e9 + 7;
vector<long long> factorials;
long long modExp(long long x, long long n) {
  if (n == 0) return 1;
  if (n == 1) return x;
  long long ans = modExp(x, n / 2);
  ans = (ans * ans) % mod;
  if (n % 2) ans *= x;
  return ans % mod;
}
long long modInv(long long a) { return modExp(a, mod - 2); }
long long choose(long long n, long long k) {
  if (k > n) return 0;
  long long num = factorials[n];
  long long den = (factorials[k] * factorials[n - k]) % mod;
  return ((num * modInv(den)) % mod);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, m;
  cin >> n >> m;
  factorials.resize(2 * n * m + 1);
  factorials[0] = factorials[1] = 1;
  for (int i = 2; i < 2 * n * m + 1; ++i) {
    factorials[i] = (factorials[i - 1] * i) % mod;
  }
  long long ans = 0;
  for (int i = 1; i < n + 1; ++i) {
    for (int k = i; k < n + 1; ++k) {
      ans += (choose(m + i - 2, i - 1) * choose(m + n - k - 1, n - k)) % mod;
      ans %= mod;
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> factorials; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long modExp(long long x, long long n) { /* line 5 slow_hit_count: 30030000, fast_hit_count: 60 */
  if (n == 0) return 1; /* line 6 slow_hit_count: 30030000, fast_hit_count: 60 */
  if (n == 1) return x; /* line 7 slow_hit_count: 30030000, fast_hit_count: 60 */
  long long ans = modExp(x, n / 2); /* line 8 slow_hit_count: 29029000, fast_hit_count: 58 */
  ans = (ans * ans) % mod; /* line 9 slow_hit_count: 29029000, fast_hit_count: 58 */
  if (n % 2) ans *= x; /* line 10 slow_hit_count: 29029000, fast_hit_count: 58 */
  return ans % mod; /* line 11 slow_hit_count: 29029000, fast_hit_count: 58 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long modInv(long long a) { return modExp(a, mod - 2); } /* line 13 slow_hit_count: 1001000, fast_hit_count: 2 */
long long choose(long long n, long long k) { /* line 14 slow_hit_count: 1001000, fast_hit_count: 2 */
  if (k > n) return 0; /* line 15 slow_hit_count: 1001000, fast_hit_count: 2 */
  long long num = factorials[n]; /* line 16 slow_hit_count: 1001000, fast_hit_count: 2 */
  long long den = (factorials[k] * factorials[n - k]) % mod; /* line 17 slow_hit_count: 1001000, fast_hit_count: 2 */
  return ((num * modInv(den)) % mod); /* line 18 slow_hit_count: 1001000, fast_hit_count: 2 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  factorials.resize(2 * n * m + 1); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  factorials[0] = factorials[1] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < 2 * n * m + 1; ++i) { /* line 27 slow_hit_count: 2000, fast_hit_count: 2 */
    factorials[i] = (factorials[i - 1] * i) % mod; /* line 28 slow_hit_count: 1999, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n + 1; ++i) { /* line 31 slow_hit_count: 1001, fast_hit_count: 2 */
    for (int k = i; k < n + 1; ++k) { /* line 32 slow_hit_count: 501500, fast_hit_count: 2 */
      ans += (choose(m + i - 2, i - 1) * choose(m + n - k - 1, n - k)) % mod; /* line 33 slow_hit_count: 500500, fast_hit_count: 1 */
      ans %= mod; /* line 34 slow_hit_count: 500500, fast_hit_count: 1 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we need to identify which parts of the program contribute to the slowdown, particularly when processing the "slow" input. Let's follow the outlined phases to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The lines within the `modExp` function (lines 5-11) are hit significantly more on the slow input compared to the fast input. This indicates that the function is called recursively many times.
   - The `choose` function (lines 14-18) is also called frequently in the slow input case, specifically when calculating combinations for the array pairs.
   - The nested loops starting from line 31 to line 34 have a high number of hits, particularly for the slow input. This indicates that the loops iterate many times when `n` is large.

2. **Pinpoint Lines or Functions with More Hits**:
   - `modExp` contributes to the slowdown due to its recursive nature, especially when calculating modular inverses in `choose`.
   - The double loop structure from lines 31 to 34 iterates over a large number of elements when `n = 1000`, significantly increasing the hit count.

3. **Infer Interaction with Data Structures/Loops**:
   - The outer loop iterates `n` times, and the inner loop iterates up to `n` times, leading to approximately `n^2` operations.
   - Each call to `choose` involves computation of factorials and modular inverses, which are computationally expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we derive the following performance-characterizing invariants:

1. **High Recursion Due to Exponentiation**:
   - **Natural Language Description**: "When the modular exponentiation function is called frequently due to large values of `n`, the recursion depth can increase significantly, leading to performance degradation."
   - **Condition**: Frequent calls to `modExp` during combination calculations when `n` is large contribute to slow performance.

2. **Nested Loop Iteration with Large `n`**:
   - **Natural Language Description**: "When `n` is large, the double loop structure in the main function results in `n^2` iterations, which can significantly slow the program."
   - **Condition**: The complexity of the loops scales with `n^2`, causing slowdowns for large values of `n` within the constraints.

3. **Frequent Combination Calculations**:
   - **Natural Language Description**: "Repeated calculations of combinations using factorials and modular inverses become expensive, especially when both `n` and the range of indices are large."
   - **Condition**: The computation inside the loops involves costly operations like combination and modular arithmetic, which are exacerbated by high iteration counts.

### Summary

This analysis shows that the primary performance bottlenecks are due to high recursion depth in modular exponentiation, extensive nested loop iterations, and repeated expensive combination calculations. The most significant slowdown occurs when `n` approaches its upper limit of 1000, as this maximizes the number of operations required. To mitigate these issues in future scenarios, potential optimizations could include memoization of factorials, avoiding repeated computation, or restructuring the algorithm to minimize expensive operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance Characteristic Invariants as C++ Checkers

Here, we translate the identified natural language invariants into C++ code snippets that check the conditions at runtime.

#### Invariant 1: High Recursion Due to Exponentiation

```cpp
void check_recursion_invariant(int recursionDepth) {
    if (recursionDepth > 20) { // Example threshold
        cerr << "Warning: Recursion depth too high in modExp!" << endl;
        abort();
    }
}
```

#### Invariant 2: Nested Loop Iteration with Large `n`

```cpp
void check_nested_loop_invariant(int n) {
    if (n > 800) { // Example threshold for when n is large
        cerr << "Warning: Large number of iterations due to high n!" << endl;
        abort();
    }
}
```

#### Invariant 3: Frequent Combination Calculations

```cpp
void check_combination_invariant(int numCombinations) {
    if (numCombinations > 1000000) { // Example threshold for high combinations
        cerr << "Warning: Too many combination calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

We will integrate the checkers into the original C++ program appropriately, ensuring they are placed at effective points in the code without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
long long mod = 1e9 + 7;
vector<long long> factorials;

long long modExp(long long x, long long n, int depth) {
    check_recursion_invariant(depth); // Check recursion depth
    if (n == 0) return 1;
    if (n == 1) return x;
    long long ans = modExp(x, n / 2, depth + 1);
    ans = (ans * ans) % mod;
    if (n % 2) ans *= x;
    return ans % mod;
}

long long modInv(long long a) { return modExp(a, mod - 2, 0); }

long long choose(long long n, long long k) {
    if (k > n) return 0;
    long long num = factorials[n];
    long long den = (factorials[k] * factorials[n - k]) % mod;
    return ((num * modInv(den)) % mod);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, m;
    cin >> n >> m;

    // Checking for large n before loops
    check_nested_loop_invariant(n);

    factorials.resize(2 * n * m + 1);
    factorials[0] = factorials[1] = 1;
    for (int i = 2; i < 2 * n * m + 1; ++i) {
        factorials[i] = (factorials[i - 1] * i) % mod;
    }

    long long ans = 0;
    int numCombinations = 0;
    for (int i = 1; i < n + 1; ++i) {
        for (int k = i; k < n + 1; ++k) {
            ans += (choose(m + i - 2, i - 1) * choose(m + n - k - 1, n - k)) % mod;
            ans %= mod;
            numCombinations++;
        }
    }

    // Check for excessive combination calculations
    check_combination_invariant(numCombinations);

    cout << ans << "\n";
    return 0;
}
```

### Explanation

- **Recursion Invariant**: The `modExp` function is modified to include a depth parameter to track recursion depth. A checker is invoked within this function to abort if the recursion depth exceeds a chosen threshold.
- **Nested Loop Invariant**: A checker is invoked after reading inputs to ensure `n` is below a threshold, avoiding excessive iteration counts.
- **Combination Invariant**: A counter (`numCombinations`) tracks how many times combinations are calculated. A checker is invoked to abort if this count becomes too high, indicating excessive calculations. 

These checkers help identify performance bottlenecks and are strategically placed to minimize added overhead.

