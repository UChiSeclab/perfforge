system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = (long long)1e9 + 7;
long long n, m;
long long dp[1010][1010][15];
long long fn(long long i, long long j, long long k) {
  if (i > j) return 0;
  if (k >= m) return 1;
  if (dp[i][j][k] != -1) return dp[i][j][k];
  long long ans = 0;
  ans += fn(i + 1, j, k);
  ans %= mod;
  ans += fn(i, j - 1, k);
  ans %= mod;
  ans += fn(i, j, k + 1);
  ans %= mod;
  ans -= fn(i + 1, j - 1, k);
  return dp[i][j][k] = ans % mod;
}
void solve() {
  cin >> n >> m;
  memset(dp, -1, sizeof(dp));
  ;
  long long value = fn(1, n, 0);
  if (value < 0)
    cout << value + mod;
  else
    cout << value;
}
int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

678 7


(G.2) Fast Input

7 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = (long long)1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[1010][1010][15]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long fn(long long i, long long j, long long k) { /* line 6 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (i > j) return 0; /* line 7 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (k >= m) return 1; /* line 8 slow_hit_count: 6426092, fast_hit_count: 596 */
  if (dp[i][j][k] != -1) return dp[i][j][k]; /* line 9 slow_hit_count: 6195911, fast_hit_count: 568 */
  long long ans = 0; /* line 10 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans += fn(i + 1, j, k); /* line 11 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans %= mod; /* line 12 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans += fn(i, j - 1, k); /* line 13 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans %= mod; /* line 14 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans += fn(i, j, k + 1); /* line 15 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans %= mod; /* line 16 slow_hit_count: 1611267, fast_hit_count: 196 */
  ans -= fn(i + 1, j - 1, k); /* line 17 slow_hit_count: 1611267, fast_hit_count: 196 */
  return dp[i][j][k] = ans % mod; /* line 18 slow_hit_count: 1611267, fast_hit_count: 196 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  long long value = fn(1, n, 0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  if (value < 0) /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    cout << value + mod; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    cout << value; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
int32_t main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, let's walk through the provided tasks and identify potential causes of slowdown based on the hit counts provided.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - The function `fn` at line 6 is heavily utilized, with the slow input hitting line 6 (and subsequent lines within the function) over 6 million times compared to just 785 times for the fast input.
   - Lines 7-18 within this function see similar disparities, showing that the recursive calls in `fn` are being executed far more frequently for the slow input.

2. **Pinpoint Lines/Functions with Significant Hit Differences**:
   - The recursive calls to `fn` on lines 11, 13, 15, and 17 are the primary contributors to the increased hit count. The recursion depth or the number of recursive calls seems to be a significant factor.

3. **Interaction with Data Structures and Input Constraints**:
   - The recursive function explores possibilities of array configurations based on conditions where `a_i ≤ b_i`. The difference in hit counts suggests the recursion depth is likely influenced by the values of `n` and `m`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some performance-characterizing invariants in natural language:

1. **High Recursive Call Volume**:
   - **Invariant**: "If the range of possible integers (`n`) is large, combined with a moderately high array length (`m`), the number of recursive calls may increase substantially, leading to performance degradation."
   - **Explanation**: As `n` increases, the range of possible values for each element in arrays `a` and `b` increases. When `m` is also significant, this leads to a larger search space for valid combinations, resulting in deeper and more frequent recursive calls.

2. **Recursive Depth Concern**:
   - **Invariant**: "When both `n` and `m` are closer to their upper limits (e.g., `n` near 1000, `m` near 10), the recursion may explore a vast number of configurations, significantly increasing computational overhead."
   - **Explanation**: The program's recursive logic results in exponential growth in computations with increases in `n` and `m`, causing performance bottlenecks.

3. **Memory and DP Table Utilization**:
   - **Invariant**: "If the dimensions of the DP table are fully utilized (due to high `n` and `m`), the memory access patterns may contribute to slowdown, especially with high recursive calls."
   - **Explanation**: With `n` and `m` at high values, the DP table's potential size and memory access frequency rise, affecting cache efficiency and increasing execution time.

### Observations

- The recursive nature of the function and extensive use of DP to store results is typical in combinatorial problems but becomes unwieldy as problem constraints are pushed to their limits. 
- These invariants suggest that scenarios maximizing both range (`n`) and length (`m`) are likely to trigger slow execution paths due to the problem's combinatorial nature and recursive exploration depth.

By using these invariants, we can predict and identify potential slowdowns in future scenarios where the inputs stress similar constraints, helping guide optimizations or alternative approaches.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

Solution (C++ code):
{solution}


assistant: Certainly! Let's implement the performance-characterizing invariants derived in Phase 2 as runtime checks in C++ and integrate them with the given C++ program.

### Phase 3: Implementing Invariants as C++ Checkers

1. **High Recursive Call Volume Invariant**:
   - **Invariant Check**: Given that high values of `n` and `m` can lead to increased recursion depth and number of calls, let's add a check for when both are significant.

```cpp
void check_recursion_depth_invariant(long long n, long long m) {
    if (n > 900 && m > 8) {
        cerr << "Warning: High recursion depth and call volume due to large n and m!" << endl;
        abort();
    }
}
```

2. **Recursive Depth Concern**:
   - **Invariant Check**: As the depth of recursion increases significantly when both `n` and `m` are high, incorporate a check for these upper bounds.

```cpp
void check_combination_exploration_invariant(long long n, long long m) {
    if ((n > 900 || m > 8) && n * m > 7000) {
        cerr << "Warning: Extensive combination exploration due to high n or m!" << endl;
        abort();
    }
}
```

3. **Memory and DP Table Utilization**:
   - **Invariant Check**: Ensure that the DP table utilization is within reasonable limits.

```cpp
void check_dp_table_utilization_invariant(long long n, long long m) {
    if (n * m > 9000) {
        cerr << "Warning: High DP table utilization, potential memory footprint issue!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers in the Original C++ Code

Now, let's integrate these checks into the original C++ code base.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = (long long)1e9 + 7;
long long n, m;
long long dp[1010][1010][15];

void check_recursion_depth_invariant(long long n, long long m) {
    if (n > 900 && m > 8) {
        cerr << "Warning: High recursion depth and call volume due to large n and m!" << endl;
        abort();
    }
}

void check_combination_exploration_invariant(long long n, long long m) {
    if ((n > 900 || m > 8) && n * m > 7000) {
        cerr << "Warning: Extensive combination exploration due to high n or m!" << endl;
        abort();
    }
}

void check_dp_table_utilization_invariant(long long n, long long m) {
    if (n * m > 9000) {
        cerr << "Warning: High DP table utilization, potential memory footprint issue!" << endl;
        abort();
    }
}

long long fn(long long i, long long j, long long k) {
    if (i > j) return 0;
    if (k >= m) return 1;
    if (dp[i][j][k] != -1) return dp[i][j][k];
    long long ans = 0;
    ans += fn(i + 1, j, k);
    ans %= mod;
    ans += fn(i, j - 1, k);
    ans %= mod;
    ans += fn(i, j, k + 1);
    ans %= mod;
    ans -= fn(i + 1, j - 1, k);
    return dp[i][j][k] = ans % mod;
}

void solve() {
    cin >> n >> m;

    // Insert checks after reading inputs
    check_recursion_depth_invariant(n, m);
    check_combination_exploration_invariant(n, m);
    check_dp_table_utilization_invariant(n, m);

    memset(dp, -1, sizeof(dp));
    long long value = fn(1, n, 0);
    if (value < 0)
        cout << value + mod;
    else
        cout << value;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
}
```

### Explanation

- **Check Placement**: The checks are placed right after reading `n` and `m` values since they are dependent on the input values and should be verified before any heavy computation begins.
- **Threshold Values**: The thresholds used in the checks are aligned with the upper limits of constraints (`n` and `m`) while also considering potential combinations and memory utilization.
- **Warnings and Aborts**: Each check outputs a warning and aborts execution if a potential performance bottleneck condition is detected, facilitating early detection and debugging.

This instrumented code helps identify performance bottlenecks early in runtime, especially when the program is run with input that might trigger slow execution paths.

