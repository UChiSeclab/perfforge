=== Invariants Response ===
To diagnose the performance bottlenecks in the provided C program and derive performance-characterizing invariants, let's analyze the differences in line-level hit counts between the fast and slow inputs, and consider how they might relate to the data structures and algorithms used.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - Lines 14-15, 20-21, 25-26, and 31-32 show a substantial increase in hit counts for the slow input compared to the fast one.
   - These lines are part of nested loops iterating over `n`, which could scale quadratically or even cubically in the total number of iterations when considering all loop levels.

2. **Function and Loop Analysis:**
   - The triple nested loops at lines 18, 19, and 20 are directly proportional to `n`. Therefore, this portion of the code scales with `n^3` due to three loops iterating up to `n`. This is a significant factor in the slowdown.
   - Similarly, the loops at lines 24 and 30 also contribute to a high complexity, iterating through the arrays multiple times.
   - The use of dynamic programming arrays such as `dp`, `sdp`, `ssdp`, and `ssdp2` suggests that these nested loops are used to calculate aggregate values repeatedly, which can lead to performance degradation with large `n`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following natural language performance invariants:

1. **Nested Loop Complexity:**
   - **Invariant:** "When `n` is close to the upper constraint (1000), the nested loops in the program become significantly more expensive, leading to a slowdown. Specifically, the triple nested loops (u, l, r) lead to a complexity of about `m * n^3`, making the process computationally expensive as `n` increases."

2. **Array Index Boundaries:**
   - **Invariant:** "When the indices of the arrays `a` and `b` utilized in dynamic programming (`dp`, `sdp`, `ssdp`) approach their maximum boundaries (`n`), the intensive boundary conditions and summation operations inside loops can further contribute to inefficiencies."

3. **Dynamic Programming Array Access:**
   - **Invariant:** "The repeated access and update of large 3D dynamic programming arrays (`dp[u][l][r]`) and 2D arrays (`sdp`, `ssdp`) increase the execution time drastically when both `m` and `n` are large, owing to the nested loop structure processing them extensively."

These invariants offer a broad understanding of conditions leading to slow execution without relying on specific numeric values from the inputs, and they respect the problem constraints. They also help guide potential optimizations or checks that could be added to detect when the performance path becomes overly slow due to these factors.

=== Checker Response ===
### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived previously, we will implement them as runtime checks in C++.

1. **Nested Loop Complexity Invariant:**
   - **Description:** Check if `n` is approaching a high value (close to 1000) where the `n^3` complexity becomes a bottleneck.
   - **Checker Code:**
   ```cpp
   void check_nested_loop_invariant(int n, int m) {
       if (n > 900 && m > 5) {  // Threshold chosen based on potential slow paths in loops
           cerr << "Warning: Nested loop invariant triggered - high complexity due to large n and m" << endl;
           abort();
       }
   }
   ```

2. **Array Index Boundaries Invariant:**
   - **Description:** Ensure that the indices used in arrays are within a boundary that doesn't cause excessive computation.
   - **Checker Code:**
   ```cpp
   void check_array_boundaries_invariant(int n) {
       if (n > 900) {  // Threshold chosen to avoid excessive computation
           cerr << "Warning: Array boundaries invariant triggered - large index range" << endl;
           abort();
       }
   }
   ```

3. **Dynamic Programming Array Access Invariant:**
   - **Description:** Check if large DP arrays are being accessed repeatedly in loops, leading to slow execution.
   - **Checker Code:**
   ```cpp
   void check_dp_access_invariant(int n, int m) {
       if (n > 900 && m > 5) {  // Condition for costly DP operations
           cerr << "Warning: DP access invariant triggered - extensive DP usage with large n and m" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here's the original program with the checks integrated at appropriate points to catch potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;
long long dp[11][1001][1001];
long long sdp[1001][1001];
long long ssdp[1001][1001];
long long ssdp2[1001];

// Checker functions for performance invariants
void check_nested_loop_invariant(int n, int m) {
    if (n > 900 && m > 5) {  // Threshold chosen based on potential slow paths in loops
        cerr << "Warning: Nested loop invariant triggered - high complexity due to large n and m" << endl;
        abort();
    }
}

void check_array_boundaries_invariant(int n) {
    if (n > 900) {  // Threshold chosen to avoid excessive computation
        cerr << "Warning: Array boundaries invariant triggered - large index range" << endl;
        abort();
    }
}

void check_dp_access_invariant(int n, int m) {
    if (n > 900 && m > 5) {  // Condition for costly DP operations
        cerr << "Warning: DP access invariant triggered - extensive DP usage with large n and m" << endl;
        abort();
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    cin >> n >> m;

    // Insert checks after reading inputs
    check_nested_loop_invariant(n, m);
    check_array_boundaries_invariant(n);
    check_dp_access_invariant(n, m);

    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= n; ++j) {
            dp[0][i][j] = 1;
        }
    }
    for (int u = 1; u <= m; ++u) {
        for (int l = 1; l <= n; ++l) {
            for (int r = 1; r <= n; ++r) {
                sdp[l][r] = (sdp[l][r - 1] + dp[u - 1][l][r]) % MOD;
            }
        }
        for (int r = 1; r <= n; ++r) {
            for (int l = 1; l <= n; ++l) {
                ssdp[r][l] = (ssdp[r][l - 1] + sdp[l][r]) % MOD;
            }
            ssdp2[r] = (sdp[r][r - 1] + ssdp2[r - 1]) % MOD;
        }
        for (int l = 1; l <= n; ++l) {
            for (int r = 1; r <= n; ++r) {
                if (l <= r) {
                    dp[u][l][r] += ssdp[n][l] - ssdp[r - 1][l];
                } else {
                    dp[u][l][r] += ssdp[n][l] - ssdp[r - 1][r];
                    dp[u][l][r] -= ssdp2[l] - ssdp2[r];
                }
                dp[u][l][r] %= MOD;
            }
        }
    }
    cout << (dp[m][n][1] + MOD) % MOD;
}
```

These integrated checks will help identify scenarios that could lead to performance bottlenecks and provide helpful warnings during development or testing.
