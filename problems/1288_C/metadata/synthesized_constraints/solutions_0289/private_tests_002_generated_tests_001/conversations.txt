system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = 1000000000;
struct edge {
  long long to, cost;
  edge(int a, int b) : to(a), cost(b) {}
};
long long n, m;
long long mod = 1000000007;
long long dp[15][1005][1005];
long long dfs(long long pos, long long sta, long long stb) {
  if (sta > stb) return 0;
  if (pos >= m) return 1;
  if (dp[pos][sta][stb]) return dp[pos][sta][stb];
  long long re = dfs(pos + 1, sta, stb);
  re += dfs(pos, sta, stb - 1) + dfs(pos, sta + 1, stb) -
        dfs(pos, sta + 1, stb - 1) + mod;
  re %= mod;
  dp[pos][sta][stb] = re;
  return re;
}
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  cin >> n >> m;
  cout << dfs(0, 1, n) << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

678 7


(G.2) Fast Input

7 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct edge { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long to, cost; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  edge(int a, int b) : to(a), cost(b) {} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 1000000007; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[15][1005][1005]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long dfs(long long pos, long long sta, long long stb) { /* line 11 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (sta > stb) return 0; /* line 12 slow_hit_count: 6445069, fast_hit_count: 785 */
  if (pos >= m) return 1; /* line 13 slow_hit_count: 6426092, fast_hit_count: 596 */
  if (dp[pos][sta][stb]) return dp[pos][sta][stb]; /* line 14 slow_hit_count: 6195911, fast_hit_count: 568 */
  long long re = dfs(pos + 1, sta, stb); /* line 15 slow_hit_count: 1611267, fast_hit_count: 196 */
  re += dfs(pos, sta, stb - 1) + dfs(pos, sta + 1, stb) - /* line 16 slow_hit_count: 1611267, fast_hit_count: 196 */
        dfs(pos, sta + 1, stb - 1) + mod; /* line 17 slow_hit_count: 1611267, fast_hit_count: 196 */
  re %= mod; /* line 18 slow_hit_count: 1611267, fast_hit_count: 196 */
  dp[pos][sta][stb] = re; /* line 19 slow_hit_count: 1611267, fast_hit_count: 196 */
  return re; /* line 20 slow_hit_count: 1611267, fast_hit_count: 196 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(false); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  std::cin.tie(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dfs(0, 1, n) << endl; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts and the C code, we can identify the following issues regarding performance:

1. **Line 11-20 (DFS Function Call and Recursion):**  
   - The function `dfs` is called recursively. This is evident from the high hit counts for lines 11 to 20.
   - Lines 12-19 indicate that the recursive exploration (`dfs(pos + 1, sta, stb)` and other calls) is the core of the computational workload.

2. **Line 14 (Memoization Check):**  
   - The memoization check at line 14 is crucial for performance but with high hit counts, it suggests many recursive states are being revisited, indicating large search space exploration.

3. **Line 15-19 (Recursive Calls and Computation):**  
   - These lines, especially line 16 with multiple recursive calls, indicate potential performance bottleneck due to combinatorial explosion of recursive states.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following conditions are likely to trigger slowdown:

1. **High Value of `n`:**  
   - **Natural language invariant:** "When `n` is large, the depth and breadth of recursive states explored by the DFS increase significantly, leading to exponential growth in computation time."
   - **Explanation:** As `n` increases, the range of values for each element in arrays `a` and `b` increases, leading to more states to explore in the DFS.

2. **Value of `m` Close to Its Upper Limit (10):**  
   - **Natural language invariant:** "When `m` approaches its maximum value, the dimensional depth of recursive exploration significantly increases, compounding the computational workload."
   - **Explanation:** Since `m` represents the length of the arrays, a higher `m` means more positions to fill, increasing the recursion depth significantly.

3. **Combinatorial Explosion in Recursion:**  
   - **Natural language invariant:** "When both `n` and `m` are large, the combination of states that need to be evaluated by the recursive DFS function proliferates, leading to inefficient runtime."
   - **Explanation:** The interaction between `n` and `m` causes a combinatorial increase in the number of states the recursion has to evaluate, exacerbating the memoized recursion's efficiency.

4. **Inefficient Memoization Due to State Complexity:**  
   - **Natural language invariant:** "If the memoized states do not capture a significant portion of overlapping subproblems, the recursive approach tends toward redundant computation, increasing run time."
   - **Explanation:** Memoization is intended to prevent recalculation, but with a vast state space, the table might not efficiently capture already computed results if the states are too distinct.

These invariants help diagnose potential slow performance paths and could be used as a basis for further optimization, such as refining the recursion logic or improving memoization strategies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two integers n and m. Calculate the number of pairs of arrays (a, b) such that:

  * the length of both arrays is equal to m; 
  * each element of each array is an integer between 1 and n (inclusive); 
  * a_i ≤ b_i for any index i from 1 to m; 
  * array a is sorted in non-descending order; 
  * array b is sorted in non-ascending order. 



As the result can be very large, you should print it modulo 10^9+7.

Input

The only line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10).

Output

Print one integer – the number of arrays a and b satisfying the conditions described above modulo 10^9+7.

Examples

Input


2 2


Output


5


Input


10 1


Output


55


Input


723 9


Output


157557417

Note

In the first test there are 5 suitable arrays: 

  * a = [1, 1], b = [2, 2]; 
  * a = [1, 2], b = [2, 2]; 
  * a = [2, 2], b = [2, 2]; 
  * a = [1, 1], b = [2, 1]; 
  * a = [1, 1], b = [1, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the natural language invariants into C++ runtime checks.

```cpp
#include <iostream>
#include <cstdlib>

void check_large_n_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large n value causing deep and broad recursion!" << std::endl;
        abort();
    }
}

void check_large_m_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large m value leading to deep recursion depth!" << std::endl;
        abort();
    }
}

void check_combination_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large n and m causing combinatorial explosion!" << std::endl;
        abort();
    }
}

// Example usage of these checks
void perform_checks(long long n, long long m) {
    // Check if n is too large given the problem constraints
    check_large_n_invariant(n > 800); // Arbitrary threshold close to upper limit (1000)

    // Check if m is at its higher range
    check_large_m_invariant(m >= 9); // m close to its upper limit (10)

    // Check for the combination of large n and m
    check_combination_invariant(n > 600 && m >= 8); // Combination threshold
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the instrumented version of the original C++ program with the performance bottleneck checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Insert the checker functions
void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large n value causing deep and broad recursion!" << endl;
        abort();
    }
}

void check_large_m_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large m value leading to deep recursion depth!" << endl;
        abort();
    }
}

void check_combination_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large n and m causing combinatorial explosion!" << endl;
        abort();
    }
}

// Main program starts here
const long long INF = 1000000000;
struct edge {
    long long to, cost;
    edge(int a, int b) : to(a), cost(b) {}
};
long long n, m;
long long mod = 1000000007;
long long dp[15][1005][1005];

long long dfs(long long pos, long long sta, long long stb) {
    if (sta > stb) return 0;
    if (pos >= m) return 1;
    if (dp[pos][sta][stb]) return dp[pos][sta][stb];
    long long re = dfs(pos + 1, sta, stb);
    re += dfs(pos, sta, stb - 1) + dfs(pos, sta + 1, stb) -
          dfs(pos, sta + 1, stb - 1) + mod;
    re %= mod;
    dp[pos][sta][stb] = re;
    return re;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    
    // Perform performance checks
    check_large_n_invariant(n > 800); // Check for large n values
    check_large_m_invariant(m >= 9); // Check for large m values
    check_combination_invariant(n > 600 && m >= 8); // Check for combination of large n and m

    cout << dfs(0, 1, n) << endl;
}
```

### Explanation of Insertions

1. **`check_large_n_invariant`:** Checks if `n` is close to its upper limit, which might cause the recursion to explore too many states, especially when `n` increases the range of values for each array element.

2. **`check_large_m_invariant`:** Ensures `m` is checked at runtime to see if it is close to its maximum allowable value, causing deeper recursion.

3. **`check_combination_invariant`:** Monitors combinations of large `n` and `m` values that could lead to a combinatorial explosion of recursive states.

These checks are placed right after reading the input values, ensuring they do not interfere with the main computation but catch problematic input cases early.

