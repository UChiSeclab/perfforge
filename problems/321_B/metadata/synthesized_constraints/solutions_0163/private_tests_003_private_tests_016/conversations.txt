system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct CostFlow {
  static const int MXN = 205;
  static const long long INF = 102938475610293847LL;
  struct Edge {
    int v, r;
    long long f, c;
  };
  int n, s, t, prv[MXN], prvL[MXN], inq[MXN];
  long long dis[MXN], fl, cost;
  vector<Edge> E[MXN];
  void init(int _n, int _s, int _t) {
    n = _n;
    s = _s;
    t = _t;
    for (int i = 0; i < n; i++) E[i].clear();
    fl = cost = 0;
  }
  void AddEdge(int u, int v, long long f, long long c) {
    E[u].push_back({v, (int)E[v].size(), f, c});
    E[v].push_back({u, (int)E[u].size() - 1, 0, -c});
  }
  pair<long long, long long> flow() {
    while (true) {
      for (int i = 0; i < n; i++) {
        dis[i] = INF, inq[i] = 0;
      }
      dis[s] = 0;
      queue<int> q({s});
      while (!q.empty()) {
        int u = q.front();
        q.pop();
        inq[u] = 0;
        for (int i = 0; i < E[u].size(); i++) {
          int v = E[u][i].v;
          long long w = E[u][i].c;
          if (E[u][i].f > 0 && dis[v] > dis[u] + w) {
            prv[v] = u;
            prvL[v] = i;
            dis[v] = dis[u] + w;
            if (!inq[v]) {
              inq[v] = 1;
              q.push(v);
            }
          }
        }
      }
      if (dis[t] == INF) break;
      long long tf = INF;
      for (int v = t, u, l; v != s; v = u) {
        u = prv[v];
        l = prvL[v];
        tf = min(tf, E[u][l].f);
      }
      for (int v = t, u, l; v != s; v = u) {
        u = prv[v];
        l = prvL[v];
        E[u][l].f -= tf;
        E[v][E[u][l].r].f += tf;
      }
      cost += tf * dis[t];
      fl += tf;
    }
    return {fl, cost};
  }
};
const int N = 105;
int n, m;
string str[N];
int jiro[N], ciel[N];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> str[i] >> jiro[i];
  for (int i = 1; i <= m; i++) cin >> ciel[i];
  long long ans = 0;
  CostFlow flow1;
  flow1.init(n + m + 2, 0, n + m + 1);
  for (int i = 1; i <= m; i++) flow1.AddEdge(0, i, 1, 0);
  for (int i = 1; i <= n; i++) flow1.AddEdge(m + i, n + m + 1, 1, 0);
  for (int i = 1; i <= m; i++) {
    for (int j = 1; j <= n; j++) {
      if (str[j] == "ATK") {
        if (ciel[i] >= jiro[j])
          flow1.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j]));
        else
          flow1.AddEdge(i, m + j, 1, 0);
      }
    }
  }
  pair<long long, long long> p = flow1.flow();
  ans = max(ans, -p.second);
  if (m > n) {
    CostFlow flow2;
    flow2.init(m + m + 2, 0, m + m + 1);
    for (int i = 1; i <= m; i++) flow2.AddEdge(0, i, 1, 0);
    for (int i = 1; i <= m; i++) flow2.AddEdge(m + i, m + m + 1, 1, 0);
    for (int i = 1; i <= m; i++) {
      for (int j = 1; j <= n; j++) {
        if (str[j] == "ATK" and ciel[i] >= jiro[j])
          flow2.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j]));
        if (str[j] == "DEF" and ciel[i] > jiro[j])
          flow2.AddEdge(i, m + j, 1, 0);
      }
      for (int j = n + 1; j <= m; j++) {
        flow2.AddEdge(i, m + j, 1, -ciel[i]);
      }
    }
    pair<long long, long long> p = flow2.flow();
    if (p.first == m) ans = max(ans, -p.second);
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 25
ATK 3519
ATK 2186
ATK 3219
ATK 3116
ATK 2170
ATK 3236
ATK 3013
DEF 1188
ATK 1914
ATK 2838
1335
725
752
1254
414
1653
439
784
649
477
759
1666
417
1316
392
799
534
1402
515
1334
1435
898
1214
1427
1820


(G.2) Fast Input

10 7
ATK 1
ATK 2
ATK 3
ATK 4
ATK 5
ATK 6
ATK 7
DEF 8
DEF 9
DEF 10
1
2
3
4
5
6
7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct CostFlow { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  static const int MXN = 205; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  static const long long INF = 102938475610293847LL; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  struct Edge { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    int v, r; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    long long f, c; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int n, s, t, prv[MXN], prvL[MXN], inq[MXN]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  long long dis[MXN], fl, cost; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  vector<Edge> E[MXN]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  void init(int _n, int _s, int _t) { /* line 13 slow_hit_count: 2, fast_hit_count: 1 */
    n = _n; /* line 14 slow_hit_count: 2, fast_hit_count: 1 */
    s = _s; /* line 15 slow_hit_count: 2, fast_hit_count: 1 */
    t = _t; /* line 16 slow_hit_count: 2, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) E[i].clear(); /* line 17 slow_hit_count: 91, fast_hit_count: 20 */
    fl = cost = 0; /* line 18 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 2, fast_hit_count: 1 */
  void AddEdge(int u, int v, long long f, long long c) { /* line 20 slow_hit_count: 696, fast_hit_count: 66 */
    E[u].push_back({v, (int)E[v].size(), f, c}); /* line 21 slow_hit_count: 696, fast_hit_count: 66 */
    E[v].push_back({u, (int)E[u].size() - 1, 0, -c}); /* line 22 slow_hit_count: 696, fast_hit_count: 66 */
  } /* line 23 slow_hit_count: 696, fast_hit_count: 66 */
  pair<long long, long long> flow() { /* line 24 slow_hit_count: 27, fast_hit_count: 8 */
    while (true) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 0; i < n; i++) { /* line 26 slow_hit_count: 1281, fast_hit_count: 160 */
        dis[i] = INF, inq[i] = 0; /* line 27 slow_hit_count: 1254, fast_hit_count: 152 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      dis[s] = 0; /* line 29 slow_hit_count: 27, fast_hit_count: 8 */
      queue<int> q({s}); /* line 30 slow_hit_count: 54, fast_hit_count: 16 */
      while (!q.empty()) { /* line 31 slow_hit_count: 1116, fast_hit_count: 121 */
        int u = q.front(); /* line 32 slow_hit_count: 1089, fast_hit_count: 113 */
        q.pop(); /* line 33 slow_hit_count: 1089, fast_hit_count: 113 */
        inq[u] = 0; /* line 34 slow_hit_count: 1089, fast_hit_count: 113 */
        for (int i = 0; i < E[u].size(); i++) { /* line 35 slow_hit_count: 20915, fast_hit_count: 1023 */
          int v = E[u][i].v; /* line 36 slow_hit_count: 19826, fast_hit_count: 910 */
          long long w = E[u][i].c; /* line 37 slow_hit_count: 19826, fast_hit_count: 910 */
          if (E[u][i].f > 0 && dis[v] > dis[u] + w) { /* line 38 slow_hit_count: 19826, fast_hit_count: 910 */
            prv[v] = u; /* line 39 slow_hit_count: 1683, fast_hit_count: 165 */
            prvL[v] = i; /* line 40 slow_hit_count: 1683, fast_hit_count: 165 */
            dis[v] = dis[u] + w; /* line 41 slow_hit_count: 1683, fast_hit_count: 165 */
            if (!inq[v]) { /* line 42 slow_hit_count: 1683, fast_hit_count: 165 */
              inq[v] = 1; /* line 43 slow_hit_count: 1062, fast_hit_count: 105 */
              q.push(v); /* line 44 slow_hit_count: 1062, fast_hit_count: 105 */
            } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      if (dis[t] == INF) break; /* line 49 slow_hit_count: 27, fast_hit_count: 8 */
      long long tf = INF; /* line 50 slow_hit_count: 25, fast_hit_count: 7 */
      for (int v = t, u, l; v != s; v = u) { /* line 51 slow_hit_count: 102, fast_hit_count: 28 */
        u = prv[v]; /* line 52 slow_hit_count: 77, fast_hit_count: 21 */
        l = prvL[v]; /* line 53 slow_hit_count: 77, fast_hit_count: 21 */
        tf = min(tf, E[u][l].f); /* line 54 slow_hit_count: 77, fast_hit_count: 21 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      for (int v = t, u, l; v != s; v = u) { /* line 56 slow_hit_count: 102, fast_hit_count: 28 */
        u = prv[v]; /* line 57 slow_hit_count: 77, fast_hit_count: 21 */
        l = prvL[v]; /* line 58 slow_hit_count: 77, fast_hit_count: 21 */
        E[u][l].f -= tf; /* line 59 slow_hit_count: 77, fast_hit_count: 21 */
        E[v][E[u][l].r].f += tf; /* line 60 slow_hit_count: 77, fast_hit_count: 21 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      cost += tf * dis[t]; /* line 62 slow_hit_count: 25, fast_hit_count: 7 */
      fl += tf; /* line 63 slow_hit_count: 25, fast_hit_count: 7 */
    } /* line 64 slow_hit_count: 25, fast_hit_count: 7 */
    return {fl, cost}; /* line 65 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 105; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
string str[N]; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
int jiro[N], ciel[N]; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> str[i] >> jiro[i]; /* line 76 slow_hit_count: 11, fast_hit_count: 11 */
  for (int i = 1; i <= m; i++) cin >> ciel[i]; /* line 77 slow_hit_count: 26, fast_hit_count: 8 */
  long long ans = 0; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  CostFlow flow1; /* line 79 slow_hit_count: 2, fast_hit_count: 2 */
  flow1.init(n + m + 2, 0, n + m + 1); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) flow1.AddEdge(0, i, 1, 0); /* line 81 slow_hit_count: 26, fast_hit_count: 8 */
  for (int i = 1; i <= n; i++) flow1.AddEdge(m + i, n + m + 1, 1, 0); /* line 82 slow_hit_count: 11, fast_hit_count: 11 */
  for (int i = 1; i <= m; i++) { /* line 83 slow_hit_count: 26, fast_hit_count: 8 */
    for (int j = 1; j <= n; j++) { /* line 84 slow_hit_count: 275, fast_hit_count: 77 */
      if (str[j] == "ATK") { /* line 85 slow_hit_count: 250, fast_hit_count: 70 */
        if (ciel[i] >= jiro[j]) /* line 86 slow_hit_count: 225, fast_hit_count: 49 */
          flow1.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j])); /* line 87 slow_hit_count: 0, fast_hit_count: 28 */
        else /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
          flow1.AddEdge(i, m + j, 1, 0); /* line 89 slow_hit_count: 225, fast_hit_count: 21 */
      } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  pair<long long, long long> p = flow1.flow(); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  ans = max(ans, -p.second); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  if (m > n) { /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
    CostFlow flow2; /* line 96 slow_hit_count: 2, fast_hit_count: 0 */
    flow2.init(m + m + 2, 0, m + m + 1); /* line 97 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) flow2.AddEdge(0, i, 1, 0); /* line 98 slow_hit_count: 26, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) flow2.AddEdge(m + i, m + m + 1, 1, 0); /* line 99 slow_hit_count: 26, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) { /* line 100 slow_hit_count: 26, fast_hit_count: 0 */
      for (int j = 1; j <= n; j++) { /* line 101 slow_hit_count: 275, fast_hit_count: 0 */
        if (str[j] == "ATK" and ciel[i] >= jiro[j]) /* line 102 slow_hit_count: 250, fast_hit_count: 0 */
          flow2.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j])); /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
        if (str[j] == "DEF" and ciel[i] > jiro[j]) /* line 104 slow_hit_count: 250, fast_hit_count: 0 */
          flow2.AddEdge(i, m + j, 1, 0); /* line 105 slow_hit_count: 11, fast_hit_count: 0 */
      } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = n + 1; j <= m; j++) { /* line 107 slow_hit_count: 400, fast_hit_count: 0 */
        flow2.AddEdge(i, m + j, 1, -ciel[i]); /* line 108 slow_hit_count: 375, fast_hit_count: 0 */
      } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    pair<long long, long long> p = flow2.flow(); /* line 111 slow_hit_count: 1, fast_hit_count: 0 */
    if (p.first == m) ans = max(ans, -p.second); /* line 112 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 114 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 115 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count information, we can observe that certain parts of the code are executed significantly more often with the slow input than with the fast input. Here are the critical observations:

1. **Flow Initialization and Edge Addition**: 
   - The `AddEdge` function (lines 20-23) and related loops (lines 83-92 and lines 100-110) for adding edges in the flow networks are called a considerable number of times in the slow input compared to the fast input. This indicates a potential bottleneck in setting up the flow network, especially for larger inputs.

2. **Inner While Loop in Flow Calculation**: 
   - The while loop (lines 31-48) within the `flow()` function shows a large disparity in hit counts, indicating that the loop iterates many more times for the slow input. This suggests that finding augmenting paths is more complex in these cases, likely due to the structure of the input graph derived from the card configurations.

3. **Edge Relaxation and Queue Operations**: 
   - The operations within the loop (lines 35-47) are executed significantly more for the slow input, especially the conditions and updates (lines 38-44). These lines are critical as they determine how the pathfinding algorithm in the flow network progresses.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants can be postulated:

1. **Invariant 1: High Cardinality of Attack-to-Defense Transitions**
   - **Description**: "If the number of attack cards greatly exceeds the number of defense cards, the program may incur a performance penalty due to the complexity of resolving attack-to-defense transitions in the flow network."
   - **Rationale**: The disparity in handling different types of cards (ATK vs. DEF) can lead to more complex augmenting paths, as seen in the slow input.

2. **Invariant 2: Dense Flow Network Configuration**
   - **Description**: "If the combined number of Ciel's and Jiro's cards approaches the upper limit, the resulting dense flow network can increase the complexity of finding maximum flow, leading to slower execution times."
   - **Rationale**: With input constraints of n, m ≤ 100, when both n and m are at their upper bounds or close, the network graph becomes dense, complicating the flow calculations.

3. **Invariant 3: Frequent Relaxations in Flow Algorithm**
   - **Description**: "When the number of potential card interactions leading to non-improving edge relaxations is high, the flow algorithm's complexity increases, causing reduced performance."
   - **Rationale**: Non-improving relaxations (where conditions like `ciel[i] >= jiro[j]` are not met) can introduce inefficiency by unnecessarily iterating through possibilities that do not lead to augmenting paths.

4. **Invariant 4: Imbalance in Card Strength Distribution**
   - **Description**: "An imbalanced distribution of card strengths between Ciel's and Jiro's cards can lead to performance issues due to the increased difficulty in establishing advantageous augmenting paths in the flow."
   - **Rationale**: The performance can degrade when a large proportion of the execution time is spent on unproductive comparisons or transitions that do not contribute effectively to maximizing damage.

These invariants aim to generalize the conditions under which the performance of the code is likely to degrade, considering the input-related constraints and the observed behavior from the hit count data.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived previously:

1. **Invariant 1: High Cardinality of Attack-to-Defense Transitions**

```cpp
void check_attack_defense_balance(int atkCount, int defCount) {
    if (atkCount > 2 * defCount) {
        cerr << "Warning: Performance bottleneck condition triggered! High cardinality of attack-to-defense transitions." << endl;
        abort();
    }
}
```

2. **Invariant 2: Dense Flow Network Configuration**

```cpp
void check_dense_flow_network(int n, int m) {
    if (n + m > 150) {  // Assume a threshold based on input constraint n, m <= 100
        cerr << "Warning: Performance bottleneck condition triggered! Dense flow network configuration." << endl;
        abort();
    }
}
```

3. **Invariant 3: Frequent Relaxations in Flow Algorithm**

```cpp
void check_frequent_relaxations(int relaxationCount, int threshold) {
    if (relaxationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Frequent non-improving relaxations." << endl;
        abort();
    }
}
```

4. **Invariant 4: Imbalance in Card Strength Distribution**

```cpp
void check_strength_distribution(int maxStrength, int minStrength) {
    if (maxStrength > 2 * minStrength) {
        cerr << "Warning: Performance bottleneck condition triggered! Imbalance in card strength distribution." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Here is the instrumented C++ code with the checkers integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct CostFlow {
    static const int MXN = 205;
    static const long long INF = 102938475610293847LL;
    struct Edge {
        int v, r;
        long long f, c;
    };
    int n, s, t, prv[MXN], prvL[MXN], inq[MXN];
    long long dis[MXN], fl, cost;
    vector<Edge> E[MXN];
    
    void init(int _n, int _s, int _t) {
        n = _n;
        s = _s;
        t = _t;
        for (int i = 0; i < n; i++) E[i].clear();
        fl = cost = 0;
    }
    
    void AddEdge(int u, int v, long long f, long long c) {
        E[u].push_back({v, (int)E[v].size(), f, c});
        E[v].push_back({u, (int)E[u].size() - 1, 0, -c});
    }
    
    pair<long long, long long> flow() {
        while (true) {
            for (int i = 0; i < n; i++) {
                dis[i] = INF, inq[i] = 0;
            }
            dis[s] = 0;
            queue<int> q({s});
            while (!q.empty()) {
                int u = q.front();
                q.pop();
                inq[u] = 0;
                for (int i = 0; i < E[u].size(); i++) {
                    int v = E[u][i].v;
                    long long w = E[u][i].c;
                    if (E[u][i].f > 0 && dis[v] > dis[u] + w) {
                        prv[v] = u;
                        prvL[v] = i;
                        dis[v] = dis[u] + w;
                        if (!inq[v]) {
                            inq[v] = 1;
                            q.push(v);
                        }
                    }
                }
            }
            if (dis[t] == INF) break;
            long long tf = INF;
            for (int v = t, u, l; v != s; v = u) {
                u = prv[v];
                l = prvL[v];
                tf = min(tf, E[u][l].f);
            }
            for (int v = t, u, l; v != s; v = u) {
                u = prv[v];
                l = prvL[v];
                E[u][l].f -= tf;
                E[v][E[u][l].r].f += tf;
            }
            cost += tf * dis[t];
            fl += tf;
        }
        return {fl, cost};
    }
};

const int N = 105;
int n, m;
string str[N];
int jiro[N], ciel[N];

void check_attack_defense_balance(int atkCount, int defCount) {
    if (atkCount > 2 * defCount) {
        cerr << "Warning: Performance bottleneck condition triggered! High cardinality of attack-to-defense transitions." << endl;
        abort();
    }
}

void check_dense_flow_network(int n, int m) {
    if (n + m > 150) {  // Assume a threshold based on input constraint n, m <= 100
        cerr << "Warning: Performance bottleneck condition triggered! Dense flow network configuration." << endl;
        abort();
    }
}

void check_frequent_relaxations(int relaxationCount, int threshold) {
    if (relaxationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Frequent non-improving relaxations." << endl;
        abort();
    }
}

void check_strength_distribution(int maxStrength, int minStrength) {
    if (maxStrength > 2 * minStrength) {
        cerr << "Warning: Performance bottleneck condition triggered! Imbalance in card strength distribution." << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n >> m;

    int atkCount = 0, defCount = 0;
    int maxStrength = 0, minStrength = INT_MAX;

    for (int i = 1; i <= n; i++) {
        cin >> str[i] >> jiro[i];
        if (str[i] == "ATK") atkCount++;
        else defCount++;
        maxStrength = max(maxStrength, jiro[i]);
        minStrength = min(minStrength, jiro[i]);
    }
    for (int i = 1; i <= m; i++) {
        cin >> ciel[i];
        maxStrength = max(maxStrength, ciel[i]);
        minStrength = min(minStrength, ciel[i]);
    }

    // Check high cardinality of attack-to-defense transitions
    check_attack_defense_balance(atkCount, defCount);
    
    // Check for dense flow network configuration
    check_dense_flow_network(n, m);

    // Check for imbalance in card strength distribution
    check_strength_distribution(maxStrength, minStrength);

    long long ans = 0;
    CostFlow flow1;
    flow1.init(n + m + 2, 0, n + m + 1);
    for (int i = 1; i <= m; i++) flow1.AddEdge(0, i, 1, 0);
    for (int i = 1; i <= n; i++) flow1.AddEdge(m + i, n + m + 1, 1, 0);

    int relaxationCount = 0;
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (str[j] == "ATK") {
                if (ciel[i] >= jiro[j]) {
                    flow1.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j]));
                } else {
                    flow1.AddEdge(i, m + j, 1, 0);
                    relaxationCount++;
                }
            }
        }
    }

    // Check for frequent relaxations in the flow algorithm
    check_frequent_relaxations(relaxationCount, 100); // Set an appropriate threshold

    pair<long long, long long> p = flow1.flow();
    ans = max(ans, -p.second);

    if (m > n) {
        CostFlow flow2;
        flow2.init(m + m + 2, 0, m + m + 1);
        for (int i = 1; i <= m; i++) flow2.AddEdge(0, i, 1, 0);
        for (int i = 1; i <= m; i++) flow2.AddEdge(m + i, m + m + 1, 1, 0);
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (str[j] == "ATK" and ciel[i] >= jiro[j])
                    flow2.AddEdge(i, m + j, 1, -(ciel[i] - jiro[j]));
                if (str[j] == "DEF" and ciel[i] > jiro[j])
                    flow2.AddEdge(i, m + j, 1, 0);
            }
            for (int j = n + 1; j <= m; j++) {
                flow2.AddEdge(i, m + j, 1, -ciel[i]);
            }
        }
        pair<long long, long long> p = flow2.flow();
        if (p.first == m) ans = max(ans, -p.second);
    }

    cout << ans << "\n";
}
```

In this instrumented code, each invariant check is integrated at a logical point in the program. This ensures that performance issues can be detected early without affecting performance during critical computations.

