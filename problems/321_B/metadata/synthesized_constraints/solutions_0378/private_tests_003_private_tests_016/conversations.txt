system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 11;
const int MAXN = maxn;
const long long oo = 0x3f3f3f3f3f3f3f3f;
const long long ooo = 0x3f3f3f3f;
long long read() {
  long long x = 0, f = 1;
  register char ch = getchar();
  while (ch < '0' || ch > '9') {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (ch >= '0' && ch <= '9') {
    x = x * 10 + ch - '0';
    ch = getchar();
  }
  return x * f;
}
int to[maxn << 1], nxt[maxn << 1];
long long cost[maxn << 1], cap[maxn << 1], flow[maxn << 1];
int head[maxn], tot;
void init() {
  memset(head, -1, sizeof head);
  tot = 0;
}
void add(int u, int v, long long c, long long w) {
  to[tot] = v;
  cap[tot] = c;
  flow[tot] = 0;
  cost[tot] = w;
  nxt[tot] = head[u];
  head[u] = tot++;
  swap(u, v);
  to[tot] = v;
  cap[tot] = 0;
  flow[tot] = 0;
  cost[tot] = -w;
  nxt[tot] = head[u];
  head[u] = tot++;
}
struct QUEUE {
  int que[maxn];
  int front, rear;
  void init() { front = rear = 0; }
  void push(int x) { que[rear++] = x; }
  int pop() { return que[front++]; }
  bool empty() { return front == rear; }
} que;
int n, m, s, t;
bool vis[maxn];
long long pre[maxn], dis[maxn];
bool spfa() {
  que.init();
  memset(vis, 0, sizeof vis);
  memset(pre, -1, sizeof pre);
  memset(dis, 0x3f, sizeof dis);
  que.push(s);
  vis[s] = 1;
  dis[s] = 0;
  while (!que.empty()) {
    int u = que.pop();
    vis[u] = 0;
    for (int i = head[u]; ~i; i = nxt[i]) {
      long long v = to[i], c = cap[i], f = flow[i], w = cost[i];
      if (c > f && dis[v] > dis[u] + w) {
        dis[v] = dis[u] + w;
        pre[v] = i;
        if (!vis[v]) {
          que.push(v);
          vis[v] = 1;
        }
      }
    }
  }
  if (dis[t] == oo)
    return 0;
  else
    return 1;
}
long long mcmf() {
  long long mc = 0, mf = 0;
  while (spfa()) {
    long long tf = oo + 1;
    for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) {
      tf = min(tf, cap[i] - flow[i]);
    }
    mf += tf;
    for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) {
      flow[i] += tf;
      flow[i ^ 1] -= tf;
    }
    mc += dis[t] * tf;
  }
  return mc;
}
int a[MAXN], b[MAXN];
bool type[MAXN];
char str[MAXN];
int main() {
  int A, B;
  while (cin >> A >> B) {
    for (int i = 1; i <= A; i++) {
      scanf("%s", str + 1);
      a[i] = read();
      if (str[1] == 'A')
        type[i] = 1;
      else
        type[i] = 0;
    }
    for (int i = 1; i <= B; i++) b[i] = read();
    long long mx = 0;
    init();
    s = 2 * A + B + 1;
    t = s + 1;
    int ss = t + 1;
    n = ss;
    for (int j = 1; j <= B; j++) add(ss, j, 1, 0);
    for (int j = 1; j <= A; j++) add(B + j, B + A + j, 1, -2ll * ooo);
    for (int j = 1; j <= A; j++) add(B + A + j, t, 1, 0);
    for (int j = 1; j <= B; j++) {
      for (int k = 1; k <= A; k++) {
        if (type[k] == 0 && b[j] > a[k])
          add(j, B + k, 1, ooo);
        else if (type[k] == 1 && b[j] >= a[k])
          add(j, B + k, 1, ooo - (b[j] - a[k]));
      }
    }
    for (int j = 1; j <= B; j++) add(j, t, 1, ooo - b[j]);
    add(s, ss, 666, 0);
    for (int i = 1; i <= B; i++) {
      for (int i = 0; i <= tot - 1; i++) flow[i] = 0;
      cap[tot - 2] = i;
      long long mc = mcmf();
      if (i <= A) {
        mc += ooo * i;
        mc = -mc;
      } else {
        mc += ooo * A;
        mc -= ooo * (i - A);
        mc = -mc;
      }
      mx = max(mx, mc);
    }
    printf("%lld\n", (long long)(mx));
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 25
ATK 3519
ATK 2186
ATK 3219
ATK 3116
ATK 2170
ATK 3236
ATK 3013
DEF 1188
ATK 1914
ATK 2838
1335
725
752
1254
414
1653
439
784
649
477
759
1666
417
1316
392
799
534
1402
515
1334
1435
898
1214
1427
1820


(G.2) Fast Input

10 7
ATK 1
ATK 2
ATK 3
ATK 4
ATK 5
ATK 6
ATK 7
DEF 8
DEF 9
DEF 10
1
2
3
4
5
6
7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e5 + 11; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = maxn; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long oo = 0x3f3f3f3f3f3f3f3f; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long ooo = 0x3f3f3f3f; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long read() { /* line 7 slow_hit_count: 35, fast_hit_count: 17 */
  long long x = 0, f = 1; /* line 8 slow_hit_count: 35, fast_hit_count: 17 */
  register char ch = getchar(); /* line 9 slow_hit_count: 35, fast_hit_count: 17 */
  while (ch < '0' || ch > '9') { /* line 10 slow_hit_count: 45, fast_hit_count: 27 */
    if (ch == '-') f = -1; /* line 11 slow_hit_count: 10, fast_hit_count: 10 */
    ch = getchar(); /* line 12 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  while (ch >= '0' && ch <= '9') { /* line 14 slow_hit_count: 161, fast_hit_count: 35 */
    x = x * 10 + ch - '0'; /* line 15 slow_hit_count: 126, fast_hit_count: 18 */
    ch = getchar(); /* line 16 slow_hit_count: 126, fast_hit_count: 18 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return x * f; /* line 18 slow_hit_count: 35, fast_hit_count: 17 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int to[maxn << 1], nxt[maxn << 1]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long cost[maxn << 1], cap[maxn << 1], flow[maxn << 1]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int head[maxn], tot; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  memset(head, -1, sizeof head); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  tot = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
void add(int u, int v, long long c, long long w) { /* line 27 slow_hit_count: 82, fast_hit_count: 63 */
  to[tot] = v; /* line 28 slow_hit_count: 82, fast_hit_count: 63 */
  cap[tot] = c; /* line 29 slow_hit_count: 82, fast_hit_count: 63 */
  flow[tot] = 0; /* line 30 slow_hit_count: 82, fast_hit_count: 63 */
  cost[tot] = w; /* line 31 slow_hit_count: 82, fast_hit_count: 63 */
  nxt[tot] = head[u]; /* line 32 slow_hit_count: 82, fast_hit_count: 63 */
  head[u] = tot++; /* line 33 slow_hit_count: 82, fast_hit_count: 63 */
  swap(u, v); /* line 34 slow_hit_count: 82, fast_hit_count: 63 */
  to[tot] = v; /* line 35 slow_hit_count: 82, fast_hit_count: 63 */
  cap[tot] = 0; /* line 36 slow_hit_count: 82, fast_hit_count: 63 */
  flow[tot] = 0; /* line 37 slow_hit_count: 82, fast_hit_count: 63 */
  cost[tot] = -w; /* line 38 slow_hit_count: 82, fast_hit_count: 63 */
  nxt[tot] = head[u]; /* line 39 slow_hit_count: 82, fast_hit_count: 63 */
  head[u] = tot++; /* line 40 slow_hit_count: 82, fast_hit_count: 63 */
} /* line 41 slow_hit_count: 82, fast_hit_count: 63 */
struct QUEUE { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  int que[maxn]; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  int front, rear; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  void init() { front = rear = 0; } /* line 45 slow_hit_count: 350, fast_hit_count: 35 */
  void push(int x) { que[rear++] = x; } /* line 46 slow_hit_count: 9968, fast_hit_count: 763 */
  int pop() { return que[front++]; } /* line 47 slow_hit_count: 9968, fast_hit_count: 763 */
  bool empty() { return front == rear; } /* line 48 slow_hit_count: 10318, fast_hit_count: 798 */
} que; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, s, t; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[maxn]; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
long long pre[maxn], dis[maxn]; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
bool spfa() { /* line 53 slow_hit_count: 350, fast_hit_count: 35 */
  que.init(); /* line 54 slow_hit_count: 350, fast_hit_count: 35 */
  memset(vis, 0, sizeof vis); /* line 55 slow_hit_count: 350, fast_hit_count: 35 */
  memset(pre, -1, sizeof pre); /* line 56 slow_hit_count: 350, fast_hit_count: 35 */
  memset(dis, 0x3f, sizeof dis); /* line 57 slow_hit_count: 350, fast_hit_count: 35 */
  que.push(s); /* line 58 slow_hit_count: 350, fast_hit_count: 35 */
  vis[s] = 1; /* line 59 slow_hit_count: 350, fast_hit_count: 35 */
  dis[s] = 0; /* line 60 slow_hit_count: 350, fast_hit_count: 35 */
  while (!que.empty()) { /* line 61 slow_hit_count: 10318, fast_hit_count: 798 */
    int u = que.pop(); /* line 62 slow_hit_count: 9968, fast_hit_count: 763 */
    vis[u] = 0; /* line 63 slow_hit_count: 9968, fast_hit_count: 763 */
    for (int i = head[u]; ~i; i = nxt[i]) { /* line 64 slow_hit_count: 57261, fast_hit_count: 4634 */
      long long v = to[i], c = cap[i], f = flow[i], w = cost[i]; /* line 65 slow_hit_count: 47293, fast_hit_count: 3871 */
      if (c > f && dis[v] > dis[u] + w) { /* line 66 slow_hit_count: 47293, fast_hit_count: 3871 */
        dis[v] = dis[u] + w; /* line 67 slow_hit_count: 10546, fast_hit_count: 818 */
        pre[v] = i; /* line 68 slow_hit_count: 10546, fast_hit_count: 818 */
        if (!vis[v]) { /* line 69 slow_hit_count: 10546, fast_hit_count: 818 */
          que.push(v); /* line 70 slow_hit_count: 9618, fast_hit_count: 728 */
          vis[v] = 1; /* line 71 slow_hit_count: 9618, fast_hit_count: 728 */
        } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  if (dis[t] == oo) /* line 76 slow_hit_count: 350, fast_hit_count: 35 */
    return 0; /* line 77 slow_hit_count: 25, fast_hit_count: 7 */
  else /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 79 slow_hit_count: 325, fast_hit_count: 28 */
} /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
long long mcmf() { /* line 81 slow_hit_count: 25, fast_hit_count: 7 */
  long long mc = 0, mf = 0; /* line 82 slow_hit_count: 25, fast_hit_count: 7 */
  while (spfa()) { /* line 83 slow_hit_count: 350, fast_hit_count: 35 */
    long long tf = oo + 1; /* line 84 slow_hit_count: 325, fast_hit_count: 28 */
    for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) { /* line 85 slow_hit_count: 1438, fast_hit_count: 180 */
      tf = min(tf, cap[i] - flow[i]); /* line 86 slow_hit_count: 1113, fast_hit_count: 152 */
    } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    mf += tf; /* line 88 slow_hit_count: 325, fast_hit_count: 28 */
    for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) { /* line 89 slow_hit_count: 1438, fast_hit_count: 180 */
      flow[i] += tf; /* line 90 slow_hit_count: 1113, fast_hit_count: 152 */
      flow[i ^ 1] -= tf; /* line 91 slow_hit_count: 1113, fast_hit_count: 152 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    mc += dis[t] * tf; /* line 93 slow_hit_count: 325, fast_hit_count: 28 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  return mc; /* line 95 slow_hit_count: 25, fast_hit_count: 7 */
} /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAXN], b[MAXN]; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
bool type[MAXN]; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
char str[MAXN]; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 100 slow_hit_count: 2, fast_hit_count: 2 */
  int A, B; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> A >> B) { /* line 102 slow_hit_count: 2, fast_hit_count: 2 */
    for (int i = 1; i <= A; i++) { /* line 103 slow_hit_count: 11, fast_hit_count: 11 */
      scanf("%s", str + 1); /* line 104 slow_hit_count: 10, fast_hit_count: 10 */
      a[i] = read(); /* line 105 slow_hit_count: 10, fast_hit_count: 10 */
      if (str[1] == 'A') /* line 106 slow_hit_count: 10, fast_hit_count: 10 */
        type[i] = 1; /* line 107 slow_hit_count: 9, fast_hit_count: 7 */
      else /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
        type[i] = 0; /* line 109 slow_hit_count: 1, fast_hit_count: 3 */
    } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= B; i++) b[i] = read(); /* line 111 slow_hit_count: 26, fast_hit_count: 8 */
    long long mx = 0; /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
    init(); /* line 113 slow_hit_count: 1, fast_hit_count: 1 */
    s = 2 * A + B + 1; /* line 114 slow_hit_count: 1, fast_hit_count: 1 */
    t = s + 1; /* line 115 slow_hit_count: 1, fast_hit_count: 1 */
    int ss = t + 1; /* line 116 slow_hit_count: 1, fast_hit_count: 1 */
    n = ss; /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 1; j <= B; j++) add(ss, j, 1, 0); /* line 118 slow_hit_count: 26, fast_hit_count: 8 */
    for (int j = 1; j <= A; j++) add(B + j, B + A + j, 1, -2ll * ooo); /* line 119 slow_hit_count: 11, fast_hit_count: 11 */
    for (int j = 1; j <= A; j++) add(B + A + j, t, 1, 0); /* line 120 slow_hit_count: 11, fast_hit_count: 11 */
    for (int j = 1; j <= B; j++) { /* line 121 slow_hit_count: 26, fast_hit_count: 8 */
      for (int k = 1; k <= A; k++) { /* line 122 slow_hit_count: 275, fast_hit_count: 77 */
        if (type[k] == 0 && b[j] > a[k]) /* line 123 slow_hit_count: 250, fast_hit_count: 70 */
          add(j, B + k, 1, ooo); /* line 124 slow_hit_count: 11, fast_hit_count: 0 */
        else if (type[k] == 1 && b[j] >= a[k]) /* line 125 slow_hit_count: 239, fast_hit_count: 70 */
          add(j, B + k, 1, ooo - (b[j] - a[k])); /* line 126 slow_hit_count: 0, fast_hit_count: 28 */
      } /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= B; j++) add(j, t, 1, ooo - b[j]); /* line 129 slow_hit_count: 26, fast_hit_count: 8 */
    add(s, ss, 666, 0); /* line 130 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= B; i++) { /* line 131 slow_hit_count: 26, fast_hit_count: 8 */
      for (int i = 0; i <= tot - 1; i++) flow[i] = 0; /* line 132 slow_hit_count: 4125, fast_hit_count: 889 */
      cap[tot - 2] = i; /* line 133 slow_hit_count: 25, fast_hit_count: 7 */
      long long mc = mcmf(); /* line 134 slow_hit_count: 25, fast_hit_count: 7 */
      if (i <= A) { /* line 135 slow_hit_count: 25, fast_hit_count: 7 */
        mc += ooo * i; /* line 136 slow_hit_count: 10, fast_hit_count: 7 */
        mc = -mc; /* line 137 slow_hit_count: 10, fast_hit_count: 7 */
      } else { /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
        mc += ooo * A; /* line 139 slow_hit_count: 15, fast_hit_count: 0 */
        mc -= ooo * (i - A); /* line 140 slow_hit_count: 15, fast_hit_count: 0 */
        mc = -mc; /* line 141 slow_hit_count: 15, fast_hit_count: 0 */
      } /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
      mx = max(mx, mc); /* line 143 slow_hit_count: 25, fast_hit_count: 7 */
    } /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", (long long)(mx)); /* line 145 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 147 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 148 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the given input and derive conditions or invariants that capture what triggers this slowdown, we need to analyze the provided C code, inputs, and hit counts. Let's proceed with the tasks outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts**: 
   - Lines within the `spfa()` function and the loop `while (spfa())` in `mcmf()` have significantly higher hit counts for the slow input compared to the fast input.
   - Specifically, lines related to queue operations, distance updates, and the relaxation within the SPFA loop show high hit counts.
   - The nested loops (lines 121-122) and their associated conditional checks (lines 123-126) also show high hit counts.

2. **Pinpoint Hot Spots**:
   - The SPFA function has significantly more iterations for the slow input, indicating that the graph traversal or shortest path calculation is more complex or takes longer to converge.
   - The nested looping over `B` (Ciel's cards) and `A` (Jiro's cards) and the condition checks within these loops might be leading to performance degradation.

3. **Inferring Interactions**:
   - The performance issue seems to stem from the high complexity in the network flow computation, exacerbated by the number of cards (`n` and `m`) and the conditions checked (whether cards can attack each other based on strength).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can now derive natural language performance invariants that describe conditions under which the program likely enters a slow path. These invariants should capture broad conditions that could lead to slow execution:

1. **Invariant 1: Network Flow Complexity**:
   - Natural Language: "When the number of cards (`n` and `m`) is large and the difference in strength between attack and defense cards is small, the complexity of finding the maximum flow increases significantly, leading to slow execution."
   - Explanation: With more cards, SPFA runs more iterations to find the shortest path for augmenting flows, especially when the conditions for attacking are met frequently due to small differences in strength.

2. **Invariant 2: Conditional Checks in Nested Loops**:
   - Natural Language: "If there are many combinations of Ciel's attack cards and Jiro's defense or attack cards that satisfy the conditions for attack, the nested loop processing time increases, resulting in slow performance."
   - Explanation: As the program checks each card combination against attack conditions, more valid combinations lead to more graph edge additions and therefore more processing.

3. **Invariant 3: SPFA Iterations**:
   - Natural Language: "The Shortest Path Faster Algorithm (SPFA) iterations become more frequent when many edges get relaxed due to favorable conditions, thereby increasing runtime."
   - Explanation: The repeated updates within SPFA due to numerous potential attacks or defenses lead to longer execution times.

These conditions abstract the potential slow paths without specifying particular numeric values, and are intended to highlight the structural aspects that trigger high computational demand. They consider both maximum `n` and `m` (100 in this problem) and how close card strengths are, leading to more feasible attacks or defenses.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To create runtime checks based on the performance-characterizing invariants derived earlier, we need to implement these checks in C++ code. Each invariant will have a corresponding check in the program. Let's translate the invariants into checker functions:

#### Invariant 1: Network Flow Complexity

```cpp
void check_network_flow_complexity(int n, int m, const std::vector<int>& a, const std::vector<int>& b) {
    // If the number of cards is high and the strengths are close, this might lead to slow execution
    int threshold = 100; // Assume large values for n and m given the constraints
    if (n > threshold || m > threshold) {
        cerr << "Warning: Network flow complexity invariant triggered - large number of cards" << endl;
        abort();
    }
}
```

#### Invariant 2: Conditional Checks in Nested Loops

```cpp
void check_conditional_loop_invariant(int A, int B, const std::vector<int>& a, const std::vector<int>& b, const std::vector<bool>& type) {
    int validCombinations = 0;
    for (int j = 0; j < B; ++j) {
        for (int k = 0; k < A; ++k) {
            if ((type[k] == 0 && b[j] > a[k]) || (type[k] == 1 && b[j] >= a[k])) {
                validCombinations++;
                if (validCombinations > 2000) { // Arbitrary threshold for a large number of combinations
                    cerr << "Warning: Conditional loop invariant triggered - too many valid combinations" << endl;
                    abort();
                }
            }
        }
    }
}
```

#### Invariant 3: SPFA Iterations

```cpp
void check_spfa_iterations(int iterationCount) {
    int iterationThreshold = 10000; // Assume an upper limit for iterations
    if (iterationCount > iterationThreshold) {
        cerr << "Warning: SPFA iterations invariant triggered - excessive iterations" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now let's integrate these checker functions into the original C++ program at appropriate points to monitor and detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 11;
const int MAXN = maxn;
const long long oo = 0x3f3f3f3f3f3f3f3f;
const long long ooo = 0x3f3f3f3f;

// Checker Functions
void check_network_flow_complexity(int n, int m, const vector<int>& a, const vector<int>& b) {
    int threshold = 100; 
    if (n > threshold || m > threshold) {
        cerr << "Warning: Network flow complexity invariant triggered - large number of cards" << endl;
        abort();
    }
}

void check_conditional_loop_invariant(int A, int B, const vector<int>& a, const vector<int>& b, const vector<bool>& type) {
    int validCombinations = 0;
    for (int j = 0; j < B; ++j) {
        for (int k = 0; k < A; ++k) {
            if ((type[k] == 0 && b[j] > a[k]) || (type[k] == 1 && b[j] >= a[k])) {
                validCombinations++;
                if (validCombinations > 2000) {
                    cerr << "Warning: Conditional loop invariant triggered - too many valid combinations" << endl;
                    abort();
                }
            }
        }
    }
}

void check_spfa_iterations(int iterationCount) {
    int iterationThreshold = 10000;
    if (iterationCount > iterationThreshold) {
        cerr << "Warning: SPFA iterations invariant triggered - excessive iterations" << endl;
        abort();
    }
}

// Original Program
long long read() {
    long long x = 0, f = 1;
    register char ch = getchar();
    while (ch < '0' || ch > '9') {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9') {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}
int to[maxn << 1], nxt[maxn << 1];
long long cost[maxn << 1], cap[maxn << 1], flow[maxn << 1];
int head[maxn], tot;
void init() {
    memset(head, -1, sizeof head);
    tot = 0;
}
void add(int u, int v, long long c, long long w) {
    to[tot] = v;
    cap[tot] = c;
    flow[tot] = 0;
    cost[tot] = w;
    nxt[tot] = head[u];
    head[u] = tot++;
    swap(u, v);
    to[tot] = v;
    cap[tot] = 0;
    flow[tot] = 0;
    cost[tot] = -w;
    nxt[tot] = head[u];
    head[u] = tot++;
}
struct QUEUE {
    int que[maxn];
    int front, rear;
    void init() { front = rear = 0; }
    void push(int x) { que[rear++] = x; }
    int pop() { return que[front++]; }
    bool empty() { return front == rear; }
} que;
int n, m, s, t;
bool vis[maxn];
long long pre[maxn], dis[maxn];
bool spfa() {
    que.init();
    memset(vis, 0, sizeof vis);
    memset(pre, -1, sizeof pre);
    memset(dis, 0x3f, sizeof dis);
    que.push(s);
    vis[s] = 1;
    dis[s] = 0;
    int iterationCount = 0; // Track iterations
    while (!que.empty()) {
        int u = que.pop();
        vis[u] = 0;
        for (int i = head[u]; ~i; i = nxt[i]) {
            long long v = to[i], c = cap[i], f = flow[i], w = cost[i];
            if (c > f && dis[v] > dis[u] + w) {
                dis[v] = dis[u] + w;
                pre[v] = i;
                if (!vis[v]) {
                    que.push(v);
                    vis[v] = 1;
                }
            }
        }
        iterationCount++;
    }
    check_spfa_iterations(iterationCount); // Check for excessive iterations
    return dis[t] != oo;
}
long long mcmf() {
    long long mc = 0, mf = 0;
    while (spfa()) {
        long long tf = oo + 1;
        for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) {
            tf = min(tf, cap[i] - flow[i]);
        }
        mf += tf;
        for (int i = pre[t]; ~i; i = pre[to[i ^ 1]]) {
            flow[i] += tf;
            flow[i ^ 1] -= tf;
        }
        mc += dis[t] * tf;
    }
    return mc;
}
int a[MAXN], b[MAXN];
bool type[MAXN];
char str[MAXN];
int main() {
    while (cin >> n >> m) {
        vector<int> a(n+1), b(m+1);
        vector<bool> type(n+1);
        for (int i = 1; i <= n; i++) {
            scanf("%s", str + 1);
            a[i] = read();
            if (str[1] == 'A')
                type[i] = 1;
            else
                type[i] = 0;
        }
        for (int i = 1; i <= m; i++) b[i] = read();
        
        // Check for potential performance bottlenecks
        check_network_flow_complexity(n, m, a, b);
        check_conditional_loop_invariant(n, m, a, b, type);

        long long mx = 0;
        init();
        s = 2 * n + m + 1;
        t = s + 1;
        int ss = t + 1;
        n = ss;
        for (int j = 1; j <= m; j++) add(ss, j, 1, 0);
        for (int j = 1; j <= n; j++) add(m + j, m + n + j, 1, -2ll * ooo);
        for (int j = 1; j <= n; j++) add(m + n + j, t, 1, 0);
        for (int j = 1; j <= m; j++) {
            for (int k = 1; k <= n; k++) {
                if (type[k] == 0 && b[j] > a[k])
                    add(j, m + k, 1, ooo);
                else if (type[k] == 1 && b[j] >= a[k])
                    add(j, m + k, 1, ooo - (b[j] - a[k]));
            }
        }
        for (int j = 1; j <= m; j++) add(j, t, 1, ooo - b[j]);
        add(s, ss, 666, 0);
        for (int i = 1; i <= m; i++) {
            for (int i = 0; i <= tot - 1; i++) flow[i] = 0;
            cap[tot - 2] = i;
            long long mc = mcmf();
            if (i <= n) {
                mc += ooo * i;
                mc = -mc;
            } else {
                mc += ooo * n;
                mc -= ooo * (i - n);
                mc = -mc;
            }
            mx = max(mx, mc);
        }
        printf("%lld\n", (long long)(mx));
    }
    return 0;
}
```

### Comments:
- **Invariant 1** is checked at the beginning of `main` after reading the input size.
- **Invariant 2** is checked right after input processing to avoid adding overhead in the nested loops.
- **Invariant 3** is checked within the `spfa` function to monitor excessive iterations. These checks help identify when the code would potentially enter a slow path.

