system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void io() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cout.precision(15);
}
const int INF = 1e9;
const int InfCost = 1e9;
struct MCMF {
  static const int InfCapacity = INF;
  struct Edge {
    int to;
    int rev;
    int capacity;
    int cost;
  };
  vector<vector<Edge> > g;
  void init(int n) { g.assign(n, vector<Edge>()); }
  void add(int i, int j, int capacity = InfCapacity, int cost = int()) {
    Edge e, f;
    e.to = j, f.to = i;
    e.capacity = capacity, f.capacity = 0;
    e.cost = cost, f.cost = -cost;
    g[i].push_back(e);
    g[j].push_back(f);
    g[i].back().rev = (int)g[j].size() - 1;
    g[j].back().rev = (int)g[i].size() - 1;
  }
  void addB(int i, int j, int capacity = InfCapacity, int cost = int()) {
    add(i, j, capacity, cost);
    add(j, i, capacity, cost);
  }
  pair<int, int> minimumCostMaximumFlow(int s, int t, int f = InfCapacity,
                                        bool bellmanFord = false) {
    int n = g.size();
    vector<int> dist(n);
    vector<int> prev(n);
    vector<int> prevEdge(n);
    pair<int, int> total = make_pair(0, 0);
    vector<int> potential(n);
    while (f > 0) {
      fill(dist.begin(), dist.end(), InfCost);
      if (bellmanFord || total.second == 0) {
        dist[s] = 0;
        for (int k = 0; k < n; k++) {
          bool update = false;
          for (int i = 0; i < n; i++)
            if (dist[i] != InfCost)
              for (int ei = 0; ei < (int)g[i].size(); ei++) {
                const Edge &e = g[i][ei];
                if (e.capacity <= 0) continue;
                int j = e.to;
                int d = dist[i] + e.cost;
                if (dist[j] > d) {
                  dist[j] = d;
                  prev[j] = i;
                  prevEdge[j] = ei;
                  update = true;
                }
              }
          if (!update) break;
        }
      } else {
        vector<bool> vis(n);
        priority_queue<pair<int, int> > q;
        q.push(make_pair(-0, s));
        dist[s] = 0;
        while (!q.empty()) {
          int i = q.top().second;
          q.pop();
          if (vis[i]) continue;
          vis[i] = true;
          for (int ei = 0; ei < (int)g[i].size(); ei++) {
            const Edge &e = g[i][ei];
            if (e.capacity <= 0) continue;
            int j = e.to;
            int d = dist[i] + e.cost + potential[i] - potential[j];
            if (d < dist[i]) d = dist[i];
            if (dist[j] > d) {
              dist[j] = d;
              prev[j] = i;
              prevEdge[j] = ei;
              q.push(make_pair(-d, j));
            }
          }
        }
      }
      if (dist[t] == InfCost) break;
      if (!bellmanFord)
        for (int i = 0; i < n; i++) potential[i] += dist[i];
      int d = f;
      int distt = 0;
      for (int v = t; v != s;) {
        int u = prev[v];
        const Edge &e = g[u][prevEdge[v]];
        d = min(d, e.capacity);
        distt += e.cost;
        v = u;
      }
      f -= d;
      total.first += d * distt;
      total.second += d;
      for (int v = t; v != s; v = prev[v]) {
        Edge &e = g[prev[v]][prevEdge[v]];
        e.capacity -= d;
        g[e.to][e.rev].capacity += d;
      }
    }
    return total;
  }
};
int m, n;
string typ[105];
int pwr1[105];
int pwr2[105];
int solve1() {
  if (m < n) return 0;
  MCMF mcmf;
  mcmf.init(2 * m + 2);
  int src = 2 * m;
  int snk = 2 * m + 1;
  for (int i = 0; i < m; i++) {
    mcmf.add(src, i, 1, 0);
  }
  for (int i = m; i < 2 * m; i++) {
    mcmf.add(i, snk, 1, 0);
  }
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      if (j < n) {
        if (typ[j] == "ATK") {
          if (pwr1[i] >= pwr2[j]) mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j]));
        } else {
          if (pwr1[i] > pwr2[j]) {
            mcmf.add(i, j + m, 1, 0);
          }
        }
      } else {
        mcmf.add(i, j + m, 1, -pwr1[i]);
      }
    }
  }
  pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk);
  if (ans.second < m) return 0;
  return -ans.first;
}
int solve2() {
  MCMF mcmf;
  mcmf.init(m + n + 2);
  int src = m + n;
  int snk = m + n + 1;
  for (int i = 0; i < m; i++) {
    mcmf.add(src, i, 1, 0);
    mcmf.add(i, snk, 1, 0);
  }
  for (int j = 0; j < n; j++) {
    mcmf.add(j + m, snk, 1, 0);
  }
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
      if (typ[j] == "ATK") {
        if (pwr1[i] >= pwr2[j]) mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j]));
      }
    }
  }
  pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk);
  return -ans.first;
}
int main(int argc, char *argv[]) {
  io();
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> typ[i] >> pwr2[i];
  }
  for (int i = 0; i < m; i++) {
    cin >> pwr1[i];
  }
  int an1 = solve1();
  int an2 = solve2();
  cout << max(an1, an2) << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 25
ATK 3519
ATK 2186
ATK 3219
ATK 3116
ATK 2170
ATK 3236
ATK 3013
DEF 1188
ATK 1914
ATK 2838
1335
725
752
1254
414
1653
439
784
649
586
759
1666
417
1316
392
799
534
1402
515
1334
1435
898
1214
1427
1820


(G.2) Fast Input

10 7
ATK 1
ATK 2
ATK 3
ATK 4
ATK 5
ATK 6
ATK 7
DEF 8
DEF 9
DEF 10
1
2
3
4
5
6
7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void io() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(15); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
const int INF = 1e9; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const int InfCost = 1e9; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
struct MCMF { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  static const int InfCapacity = INF; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  struct Edge { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    int to; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    int rev; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    int capacity; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    int cost; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<Edge> > g; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  void init(int n) { g.assign(n, vector<Edge>()); } /* line 20 slow_hit_count: 2, fast_hit_count: 1 */
  void add(int i, int j, int capacity = InfCapacity, int cost = int()) { /* line 21 slow_hit_count: 496, fast_hit_count: 52 */
    Edge e, f; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    e.to = j, f.to = i; /* line 23 slow_hit_count: 496, fast_hit_count: 52 */
    e.capacity = capacity, f.capacity = 0; /* line 24 slow_hit_count: 496, fast_hit_count: 52 */
    e.cost = cost, f.cost = -cost; /* line 25 slow_hit_count: 496, fast_hit_count: 52 */
    g[i].push_back(e); /* line 26 slow_hit_count: 496, fast_hit_count: 52 */
    g[j].push_back(f); /* line 27 slow_hit_count: 496, fast_hit_count: 52 */
    g[i].back().rev = (int)g[j].size() - 1; /* line 28 slow_hit_count: 496, fast_hit_count: 52 */
    g[j].back().rev = (int)g[i].size() - 1; /* line 29 slow_hit_count: 496, fast_hit_count: 52 */
  } /* line 30 slow_hit_count: 496, fast_hit_count: 52 */
  void addB(int i, int j, int capacity = InfCapacity, int cost = int()) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    add(i, j, capacity, cost); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    add(j, i, capacity, cost); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  pair<int, int> minimumCostMaximumFlow(int s, int t, int f = InfCapacity, /* line 35 slow_hit_count: 2, fast_hit_count: 1 */
                                        bool bellmanFord = false) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    int n = g.size(); /* line 37 slow_hit_count: 2, fast_hit_count: 1 */
    vector<int> dist(n); /* line 38 slow_hit_count: 4, fast_hit_count: 2 */
    vector<int> prev(n); /* line 39 slow_hit_count: 4, fast_hit_count: 2 */
    vector<int> prevEdge(n); /* line 40 slow_hit_count: 4, fast_hit_count: 2 */
    pair<int, int> total = make_pair(0, 0); /* line 41 slow_hit_count: 2, fast_hit_count: 1 */
    vector<int> potential(n); /* line 42 slow_hit_count: 4, fast_hit_count: 2 */
    while (f > 0) { /* line 43 slow_hit_count: 43, fast_hit_count: 8 */
      fill(dist.begin(), dist.end(), InfCost); /* line 44 slow_hit_count: 43, fast_hit_count: 8 */
      if (bellmanFord || total.second == 0) { /* line 45 slow_hit_count: 43, fast_hit_count: 8 */
        dist[s] = 0; /* line 46 slow_hit_count: 2, fast_hit_count: 1 */
        for (int k = 0; k < n; k++) { /* line 47 slow_hit_count: 6, fast_hit_count: 3 */
          bool update = false; /* line 48 slow_hit_count: 6, fast_hit_count: 3 */
          for (int i = 0; i < n; i++) /* line 49 slow_hit_count: 273, fast_hit_count: 60 */
            if (dist[i] != InfCost) /* line 50 slow_hit_count: 267, fast_hit_count: 57 */
              for (int ei = 0; ei < (int)g[i].size(); ei++) { /* line 51 slow_hit_count: 2138, fast_hit_count: 242 */
                const Edge &e = g[i][ei]; /* line 52 slow_hit_count: 1996, fast_hit_count: 209 */
                if (e.capacity <= 0) continue; /* line 53 slow_hit_count: 1996, fast_hit_count: 209 */
                int j = e.to; /* line 54 slow_hit_count: 1004, fast_hit_count: 105 */
                int d = dist[i] + e.cost; /* line 55 slow_hit_count: 1004, fast_hit_count: 105 */
                if (dist[j] > d) { /* line 56 slow_hit_count: 1004, fast_hit_count: 105 */
                  dist[j] = d; /* line 57 slow_hit_count: 114, fast_hit_count: 37 */
                  prev[j] = i; /* line 58 slow_hit_count: 114, fast_hit_count: 37 */
                  prevEdge[j] = ei; /* line 59 slow_hit_count: 114, fast_hit_count: 37 */
                  update = true; /* line 60 slow_hit_count: 114, fast_hit_count: 37 */
                } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
              } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
          if (!update) break; /* line 63 slow_hit_count: 6, fast_hit_count: 3 */
        } /* line 64 slow_hit_count: 2, fast_hit_count: 1 */
      } else { /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        vector<bool> vis(n); /* line 66 slow_hit_count: 82, fast_hit_count: 14 */
        priority_queue<pair<int, int> > q; /* line 67 slow_hit_count: 82, fast_hit_count: 14 */
        q.push(make_pair(-0, s)); /* line 68 slow_hit_count: 41, fast_hit_count: 7 */
        dist[s] = 0; /* line 69 slow_hit_count: 41, fast_hit_count: 7 */
        while (!q.empty()) { /* line 70 slow_hit_count: 1806, fast_hit_count: 119 */
          int i = q.top().second; /* line 71 slow_hit_count: 1765, fast_hit_count: 112 */
          q.pop(); /* line 72 slow_hit_count: 1765, fast_hit_count: 112 */
          if (vis[i]) continue; /* line 73 slow_hit_count: 1765, fast_hit_count: 112 */
          vis[i] = true; /* line 74 slow_hit_count: 1336, fast_hit_count: 97 */
          for (int ei = 0; ei < (int)g[i].size(); ei++) { /* line 75 slow_hit_count: 17784, fast_hit_count: 710 */
            const Edge &e = g[i][ei]; /* line 76 slow_hit_count: 16448, fast_hit_count: 613 */
            if (e.capacity <= 0) continue; /* line 77 slow_hit_count: 16448, fast_hit_count: 613 */
            int j = e.to; /* line 78 slow_hit_count: 8016, fast_hit_count: 294 */
            int d = dist[i] + e.cost + potential[i] - potential[j]; /* line 79 slow_hit_count: 8016, fast_hit_count: 294 */
            if (d < dist[i]) d = dist[i]; /* line 80 slow_hit_count: 8016, fast_hit_count: 294 */
            if (dist[j] > d) { /* line 81 slow_hit_count: 8016, fast_hit_count: 294 */
              dist[j] = d; /* line 82 slow_hit_count: 1724, fast_hit_count: 105 */
              prev[j] = i; /* line 83 slow_hit_count: 1724, fast_hit_count: 105 */
              prevEdge[j] = ei; /* line 84 slow_hit_count: 1724, fast_hit_count: 105 */
              q.push(make_pair(-d, j)); /* line 85 slow_hit_count: 1724, fast_hit_count: 105 */
            } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
      if (dist[t] == InfCost) break; /* line 90 slow_hit_count: 43, fast_hit_count: 8 */
      if (!bellmanFord) /* line 91 slow_hit_count: 41, fast_hit_count: 7 */
        for (int i = 0; i < n; i++) potential[i] += dist[i]; /* line 92 slow_hit_count: 1798, fast_hit_count: 140 */
      int d = f; /* line 93 slow_hit_count: 41, fast_hit_count: 7 */
      int distt = 0; /* line 94 slow_hit_count: 41, fast_hit_count: 7 */
      for (int v = t; v != s;) { /* line 95 slow_hit_count: 141, fast_hit_count: 24 */
        int u = prev[v]; /* line 96 slow_hit_count: 100, fast_hit_count: 17 */
        const Edge &e = g[u][prevEdge[v]]; /* line 97 slow_hit_count: 100, fast_hit_count: 17 */
        d = min(d, e.capacity); /* line 98 slow_hit_count: 100, fast_hit_count: 17 */
        distt += e.cost; /* line 99 slow_hit_count: 100, fast_hit_count: 17 */
        v = u; /* line 100 slow_hit_count: 100, fast_hit_count: 17 */
      } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
      f -= d; /* line 102 slow_hit_count: 41, fast_hit_count: 7 */
      total.first += d * distt; /* line 103 slow_hit_count: 41, fast_hit_count: 7 */
      total.second += d; /* line 104 slow_hit_count: 41, fast_hit_count: 7 */
      for (int v = t; v != s; v = prev[v]) { /* line 105 slow_hit_count: 141, fast_hit_count: 24 */
        Edge &e = g[prev[v]][prevEdge[v]]; /* line 106 slow_hit_count: 100, fast_hit_count: 17 */
        e.capacity -= d; /* line 107 slow_hit_count: 100, fast_hit_count: 17 */
        g[e.to][e.rev].capacity += d; /* line 108 slow_hit_count: 100, fast_hit_count: 17 */
      } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    return total; /* line 111 slow_hit_count: 4, fast_hit_count: 2 */
  } /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
int m, n; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
string typ[105]; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
int pwr1[105]; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
int pwr2[105]; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
int solve1() { /* line 118 slow_hit_count: 1, fast_hit_count: 1 */
  if (m < n) return 0; /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
  MCMF mcmf; /* line 120 slow_hit_count: 2, fast_hit_count: 0 */
  mcmf.init(2 * m + 2); /* line 121 slow_hit_count: 1, fast_hit_count: 0 */
  int src = 2 * m; /* line 122 slow_hit_count: 1, fast_hit_count: 0 */
  int snk = 2 * m + 1; /* line 123 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 124 slow_hit_count: 26, fast_hit_count: 0 */
    mcmf.add(src, i, 1, 0); /* line 125 slow_hit_count: 25, fast_hit_count: 0 */
  } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = m; i < 2 * m; i++) { /* line 127 slow_hit_count: 26, fast_hit_count: 0 */
    mcmf.add(i, snk, 1, 0); /* line 128 slow_hit_count: 25, fast_hit_count: 0 */
  } /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 130 slow_hit_count: 26, fast_hit_count: 0 */
    for (int j = 0; j < m; j++) { /* line 131 slow_hit_count: 650, fast_hit_count: 0 */
      if (j < n) { /* line 132 slow_hit_count: 625, fast_hit_count: 0 */
        if (typ[j] == "ATK") { /* line 133 slow_hit_count: 250, fast_hit_count: 0 */
          if (pwr1[i] >= pwr2[j]) mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j])); /* line 134 slow_hit_count: 225, fast_hit_count: 0 */
        } else { /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
          if (pwr1[i] > pwr2[j]) { /* line 136 slow_hit_count: 25, fast_hit_count: 0 */
            mcmf.add(i, j + m, 1, 0); /* line 137 slow_hit_count: 11, fast_hit_count: 0 */
          } /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
        mcmf.add(i, j + m, 1, -pwr1[i]); /* line 141 slow_hit_count: 375, fast_hit_count: 0 */
      } /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
  pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk); /* line 145 slow_hit_count: 1, fast_hit_count: 0 */
  if (ans.second < m) return 0; /* line 146 slow_hit_count: 1, fast_hit_count: 0 */
  return -ans.first; /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
int solve2() { /* line 149 slow_hit_count: 1, fast_hit_count: 1 */
  MCMF mcmf; /* line 150 slow_hit_count: 1, fast_hit_count: 1 */
  mcmf.init(m + n + 2); /* line 151 slow_hit_count: 1, fast_hit_count: 1 */
  int src = m + n; /* line 152 slow_hit_count: 1, fast_hit_count: 1 */
  int snk = m + n + 1; /* line 153 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 154 slow_hit_count: 26, fast_hit_count: 8 */
    mcmf.add(src, i, 1, 0); /* line 155 slow_hit_count: 25, fast_hit_count: 7 */
    mcmf.add(i, snk, 1, 0); /* line 156 slow_hit_count: 25, fast_hit_count: 7 */
  } /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < n; j++) { /* line 158 slow_hit_count: 11, fast_hit_count: 11 */
    mcmf.add(j + m, snk, 1, 0); /* line 159 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 161 slow_hit_count: 26, fast_hit_count: 8 */
    for (int j = 0; j < n; j++) { /* line 162 slow_hit_count: 275, fast_hit_count: 77 */
      if (typ[j] == "ATK") { /* line 163 slow_hit_count: 250, fast_hit_count: 70 */
        if (pwr1[i] >= pwr2[j]) mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j])); /* line 164 slow_hit_count: 225, fast_hit_count: 49 */
      } /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
  pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk); /* line 168 slow_hit_count: 1, fast_hit_count: 1 */
  return -ans.first; /* line 169 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char *argv[]) { /* line 171 slow_hit_count: 1, fast_hit_count: 1 */
  io(); /* line 172 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 173 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 174 slow_hit_count: 11, fast_hit_count: 11 */
    cin >> typ[i] >> pwr2[i]; /* line 175 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 177 slow_hit_count: 26, fast_hit_count: 8 */
    cin >> pwr1[i]; /* line 178 slow_hit_count: 25, fast_hit_count: 7 */
  } /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
  int an1 = solve1(); /* line 180 slow_hit_count: 1, fast_hit_count: 1 */
  int an2 = solve2(); /* line 181 slow_hit_count: 1, fast_hit_count: 1 */
  cout << max(an1, an2) << '\n'; /* line 182 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 183 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 184 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To tackle this problem, we'll follow the phases specified in the task to generate performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the given hit count data, the following observations can be made:

1. **Line 21-30 (add function):** The `add` function is called significantly more during the slow run (496 times) compared to the fast run (52 times). This suggests that the graph's construction is more intensive for the slow input.

2. **Lines 49-64 (Bellman-Ford initialization):** These lines execute more frequently in the slow run. The initialization and updates of distances in the Bellman-Ford algorithm occur more often, indicating a potentially larger or more complex graph is being processed.

3. **Lines 70-87 (Dijkstra-like optimization):** These lines execute many more times in the slow run. The priority queue operations are particularly costly, and these get hit much more frequently in the slow run, which suggests a more complex network flow graph or more iterations of the algorithm are required.

4. **Lines 130-143, 161-167 (Nested loops in `solve1` and `solve2`):** The loops are heavily used in the slow input, indicating that both card sets are extensively iterated.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit counts and the code's structure, the following natural language performance invariants can be proposed:

1. **Complexity of Graph Construction:**
   - **Invariant:** "If the product of the number of Ciel's cards and Jiro's cards is large, the code may spend excessive time constructing the graph, leading to performance degradation."
   - **Rationale:** The nested loop, along with the `add` function calls, increases exponentially with the input sizes.

2. **Graph Traversal Intensity:**
   - **Invariant:** "When the graph's potential paths are numerous, indicated by high iteration counts in the Bellman-Ford or Dijkstra portions, the traversal becomes expensive."
   - **Rationale:** More iterations in these algorithms suggest that the graph is complex with many possible paths, leading to more calculation overhead.

3. **Priority Queue Operations:**
   - **Invariant:** "If the graph retains a high number of nodes with active edges, priority queue operations may become a bottleneck, slowing the entire algorithm."
   - **Rationale:** The use of priority queues in Dijkstra's algorithm inherently scales with the number of nodes, leading to more computational time when the graph is dense or complex.

4. **Data Input and Structure Iterations:**
   - **Invariant:** "When the number of Ciel's cards or Jiro's cards approaches the upper constraint (e.g., both close to 100), the nested loop operations become intensive, potentially leading to slow execution."
   - **Rationale:** The nested loops iterating over the cards imply an O(m*n) complexity, which becomes significant when both m and n are large.

These invariants aim to provide a general understanding of when the code's performance might degrade, focusing on the complexities inherent in dealing with larger graph structures and dense iterative operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

Solution (C++ code):
{solution}


assistant: Let's translate the invariants derived in Phase 2 into runtime checks using C++ code (Phase 3).

### Phase 3: Implementing Natural Language Invariants in C++

1. **Complexity of Graph Construction:**
   - **Invariant Implementation:**
     ```cpp
     void check_graph_construction_invariant(int n, int m) {
         if (n * m > 5000) {  // Example threshold for potential bottleneck
             cerr << "Warning: Graph construction might be expensive due to large input size combination!" << endl;
             abort();
         }
     }
     ```

2. **Graph Traversal Intensity:**
   - **Invariant Implementation:**
     ```cpp
     void check_traversal_intensity_invariant(int potentialPaths) {
         if (potentialPaths > 10000) {  // Example threshold for potential bottleneck
             cerr << "Warning: High traversal intensity might slow down the execution!" << endl;
             abort();
         }
     }
     ```

3. **Priority Queue Operations:**
   - **Invariant Implementation:**
     ```cpp
     void check_priority_queue_invariant(int nodes, int activeEdges) {
         if (nodes * activeEdges > 10000) {  // Example threshold for potential bottleneck
             cerr << "Warning: Priority queue operations might be excessive due to dense graph!" << endl;
             abort();
         }
     }
     ```

4. **Data Input and Structure Iterations:**
   - **Invariant Implementation:**
     ```cpp
     void check_iteration_invariant(int n, int m) {
         if (m > 90 && n > 90) {  // Close to the maximum constraint
             cerr << "Warning: Nested iterations might lead to performance issues!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrating Checkers into the Program

Now, let's integrate these checks into the original program. We'll place the checks at strategic points to prevent adding unnecessary overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void io() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cout.precision(15);
}

const int INF = 1e9;
const int InfCost = 1e9;

struct MCMF {
    static const int InfCapacity = INF;

    struct Edge {
        int to;
        int rev;
        int capacity;
        int cost;
    };

    vector<vector<Edge>> g;
    
    void init(int n) { 
        g.assign(n, vector<Edge>()); 
    }
    
    void add(int i, int j, int capacity = InfCapacity, int cost = int()) {
        Edge e, f;
        e.to = j, f.to = i;
        e.capacity = capacity, f.capacity = 0;
        e.cost = cost, f.cost = -cost;
        g[i].push_back(e);
        g[j].push_back(f);
        g[i].back().rev = (int)g[j].size() - 1;
        g[j].back().rev = (int)g[i].size() - 1;
    }

    pair<int, int> minimumCostMaximumFlow(int s, int t, int f = InfCapacity, bool bellmanFord = false) {
        int n = g.size();
        vector<int> dist(n);
        vector<int> prev(n);
        vector<int> prevEdge(n);
        pair<int, int> total = make_pair(0, 0);
        vector<int> potential(n);

        while (f > 0) {
            fill(dist.begin(), dist.end(), InfCost);
            if (bellmanFord || total.second == 0) {
                dist[s] = 0;
                for (int k = 0; k < n; k++) {
                    bool update = false;
                    for (int i = 0; i < n; i++)
                        if (dist[i] != InfCost)
                            for (int ei = 0; ei < (int)g[i].size(); ei++) {
                                const Edge &e = g[i][ei];
                                if (e.capacity <= 0) continue;
                                int j = e.to;
                                int d = dist[i] + e.cost;
                                if (dist[j] > d) {
                                    dist[j] = d;
                                    prev[j] = i;
                                    prevEdge[j] = ei;
                                    update = true;
                                }
                            }
                    if (!update) break;
                }
            } else {
                vector<bool> vis(n);
                priority_queue<pair<int, int>> q;
                q.push(make_pair(-0, s));
                dist[s] = 0;
                while (!q.empty()) {
                    int i = q.top().second;
                    q.pop();
                    if (vis[i]) continue;
                    vis[i] = true;
                    for (int ei = 0; ei < (int)g[i].size(); ei++) {
                        const Edge &e = g[i][ei];
                        if (e.capacity <= 0) continue;
                        int j = e.to;
                        int d = dist[i] + e.cost + potential[i] - potential[j];
                        if (d < dist[i]) d = dist[i];
                        if (dist[j] > d) {
                            dist[j] = d;
                            prev[j] = i;
                            prevEdge[j] = ei;
                            q.push(make_pair(-d, j));
                        }
                    }
                }
            }
            if (dist[t] == InfCost) break;
            if (!bellmanFord)
                for (int i = 0; i < n; i++) potential[i] += dist[i];
            int d = f;
            int distt = 0;
            for (int v = t; v != s;) {
                int u = prev[v];
                const Edge &e = g[u][prevEdge[v]];
                d = min(d, e.capacity);
                distt += e.cost;
                v = u;
            }
            f -= d;
            total.first += d * distt;
            total.second += d;
            for (int v = t; v != s; v = prev[v]) {
                Edge &e = g[prev[v]][prevEdge[v]];
                e.capacity -= d;
                g[e.to][e.rev].capacity += d;
            }
        }
        return total;
    }
};

int m, n;
string typ[105];
int pwr1[105];
int pwr2[105];

// Checkers for performance bottlenecks
void check_graph_construction_invariant(int n, int m) {
    if (n * m > 5000) {
        cerr << "Warning: Graph construction might be expensive due to large input size combination!" << endl;
        abort();
    }
}

void check_traversal_intensity_invariant(int potentialPaths) {
    if (potentialPaths > 10000) {
        cerr << "Warning: High traversal intensity might slow down the execution!" << endl;
        abort();
    }
}

void check_priority_queue_invariant(int nodes, int activeEdges) {
    if (nodes * activeEdges > 10000) {
        cerr << "Warning: Priority queue operations might be excessive due to dense graph!" << endl;
        abort();
    }
}

void check_iteration_invariant(int n, int m) {
    if (m > 90 && n > 90) {
        cerr << "Warning: Nested iterations might lead to performance issues!" << endl;
        abort();
    }
}

int solve1() {
    if (m < n) return 0;
    MCMF mcmf;
    mcmf.init(2 * m + 2);
    int src = 2 * m;
    int snk = 2 * m + 1;
    for (int i = 0; i < m; i++) {
        mcmf.add(src, i, 1, 0);
    }
    for (int i = m; i < 2 * m; i++) {
        mcmf.add(i, snk, 1, 0);
    }
    int potentialPaths = 0;  // Assumed variable to check potential paths
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            if (j < n) {
                if (typ[j] == "ATK") {
                    if (pwr1[i] >= pwr2[j]) {
                        mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j]));
                        potentialPaths++;
                    }
                } else {
                    if (pwr1[i] > pwr2[j]) {
                        mcmf.add(i, j + m, 1, 0);
                        potentialPaths++;
                    }
                }
            } else {
                mcmf.add(i, j + m, 1, -pwr1[i]);
                potentialPaths++;
            }
        }
    }

    // Check traversal intensity based on an estimated count of paths
    check_traversal_intensity_invariant(potentialPaths);

    pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk);
    if (ans.second < m) return 0;
    return -ans.first;
}

int solve2() {
    MCMF mcmf;
    mcmf.init(m + n + 2);
    int src = m + n;
    int snk = m + n + 1;
    for (int i = 0; i < m; i++) {
        mcmf.add(src, i, 1, 0);
        mcmf.add(i, snk, 1, 0);
    }
    for (int j = 0; j < n; j++) {
        mcmf.add(j + m, snk, 1, 0);
    }
    int potentialPaths = 0;  // Assumed variable to check potential paths
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (typ[j] == "ATK") {
                if (pwr1[i] >= pwr2[j]) {
                    mcmf.add(i, j + m, 1, -(pwr1[i] - pwr2[j]));
                    potentialPaths++;
                }
            }
        }
    }

    // Check traversal intensity based on an estimated count of paths
    check_traversal_intensity_invariant(potentialPaths);

    pair<int, int> ans = mcmf.minimumCostMaximumFlow(src, snk);
    return -ans.first;
}

int main(int argc, char *argv[]) {
    io();
    cin >> n >> m;
    
    check_graph_construction_invariant(n, m);
    check_iteration_invariant(n, m);

    for (int i = 0; i < n; i++) {
        cin >> typ[i] >> pwr2[i];
    }
    for (int i = 0; i < m; i++) {
        cin >> pwr1[i];
    }

    int an1 = solve1();
    int an2 = solve2();
    cout << max(an1, an2) << '\n';
    return 0;
}
```

### Explanation of Check Integrations:
- **`check_graph_construction_invariant`** is placed after reading `n` and `m` to catch scenarios where the product of card counts might lead to intensive graph construction.
- **`check_iteration_invariant`** is also placed after reading `n` and `m` to avoid issues with extensive iterations.
- **`check_traversal_intensity_invariant`** is used in both `solve1` and `solve2` to ensure the graph traversal does not become too complex.
- **`check_priority_queue_invariant`** is not explicitly placed due to the lack of direct parameters like nodes and active edges in this context, but it should generally be used in graph algorithms where priority queue usage can be estimated.

These checks should help catch potential performance issues without adding significant overhead during normal execution.

