system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = numeric_limits<long long>::max() / 4;
int n, m, S, T, SCRAP;
long long res = 0;
string enemy[1234];
int enemyi[1234], mei[1234];
struct MinCostMaxFlow {
  int N;
  vector<vector<long long> > cap, flow, cost;
  vector<int> found;
  vector<long long> dist, pi, width;
  vector<pair<int, int> > dad;
  MinCostMaxFlow(int N)
      : N(N),
        cap(N, vector<long long>(N)),
        flow(N, vector<long long>(N)),
        cost(N, vector<long long>(N)),
        found(N),
        dist(N),
        pi(N),
        width(N),
        dad(N) {}
  void AddEdge(int from, int to, long long cap, long long cost) {
    this->cap[from][to] = cap;
    this->cost[from][to] = cost;
  }
  void Relax(int s, int k, long long cap, long long cost, int dir) {
    long long val = dist[s] + pi[s] - pi[k] + cost;
    if (cap && val < dist[k]) {
      dist[k] = val;
      dad[k] = make_pair(s, dir);
      width[k] = min(cap, width[s]);
    }
  }
  long long Dijkstra(int s, int t) {
    fill(found.begin(), found.end(), false);
    fill(dist.begin(), dist.end(), INF);
    fill(width.begin(), width.end(), 0);
    dist[s] = 0;
    width[s] = INF;
    while (s != -1) {
      int best = -1;
      found[s] = true;
      for (int k = 0; k < N; k++) {
        if (found[k]) continue;
        Relax(s, k, cap[s][k] - flow[s][k], cost[s][k], 1);
        Relax(s, k, flow[k][s], -cost[k][s], -1);
        if (best == -1 || dist[k] < dist[best]) best = k;
      }
      s = best;
    }
    for (int k = 0; k < N; k++) pi[k] = min(pi[k] + dist[k], INF);
    return width[t];
  }
  pair<long long, long long> GetMaxFlow(int s, int t) {
    long long totflow = 0, totcost = 0;
    while (long long amt = Dijkstra(s, t)) {
      totflow += amt;
      for (int x = t; x != s; x = dad[x].first) {
        if (dad[x].second == 1) {
          flow[dad[x].first][x] += amt;
          totcost += amt * cost[dad[x].first][x];
        } else {
          flow[x][dad[x].first] -= amt;
          totcost -= amt * cost[x][dad[x].first];
        }
      }
      long long tot = min<long long>(n, totflow) * 10000LL +
                      max<long long>(0, totflow - n) * 1000000LL;
      res = max(res, tot - totcost);
    }
    return make_pair(totflow, totcost);
  }
};
int main() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; ++i) {
    cin >> enemy[i] >> enemyi[i];
  }
  for (int i = 0; i < m; ++i) {
    cin >> mei[i];
  }
  S = n + m, T = S + 1, SCRAP = T + 1;
  MinCostMaxFlow mf(n + m + 3);
  for (int i = 0; i < m; ++i) {
    mf.AddEdge(S, i, 1, 0);
  }
  mf.AddEdge(SCRAP, T, 100, 0);
  for (int i = 0; i < n; ++i) {
    mf.AddEdge(i + m, T, 1, 0);
  }
  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < n; ++j) {
      if (enemy[j] == "ATK") {
        if (enemyi[j] <= mei[i]) {
          mf.AddEdge(i, j + m, 1, 10000 - (-enemyi[j] + mei[i]));
        }
      } else {
        if (enemyi[j] < mei[i]) {
          mf.AddEdge(i, j + m, 1, 10000);
        }
      }
      mf.AddEdge(i, SCRAP, 1, 1000000 - mei[i]);
    }
  }
  mf.GetMaxFlow(S, T);
  cout << res << endl;
  return (0);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

39 22
DEF 5748
DEF 5028
DEF 1873
DEF 6817
DEF 5727
DEF 4386
DEF 4549
DEF 5498
DEF 1506
DEF 2805
ATK 3186
DEF 6202
DEF 2129
DEF 1646
DEF 5367
DEF 5754
DEF 6195
DEF 3131
DEF 1837
DEF 6575
DEF 2842
DEF 2970
DEF 4494
ATK 3300
DEF 4290
DEF 6751
DEF 3802
DEF 5067
DEF 1463
DEF 3643
DEF 6442
DEF 4856
DEF 4226
DEF 3835
DEF 1790
DEF 5415
DEF 6668
DEF 5320
DEF 1787
252
237
304
525
99
322
280
341
215
132
303
436
80
283
400
192
425
513
138
427
514
470


(G.2) Fast Input

34 9
DEF 7295
DEF 7017
DEF 7483
DEF 7509
DEF 7458
DEF 7434
DEF 6981
DEF 7090
DEF 7298
DEF 7134
ATK 737
DEF 7320
DEF 7228
DEF 7323
ATK 786
DEF 6895
DEF 7259
DEF 6921
DEF 7373
DEF 7505
DEF 7421
DEF 6930
DEF 6890
DEF 7507
DEF 6964
DEF 7418
DEF 7098
DEF 6867
DEF 7229
DEF 7162
DEF 6987
DEF 7043
DEF 7230
DEF 7330
3629
4161
2611
4518
2357
2777
1923
1909
1738


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = numeric_limits<long long>::max() / 4; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, S, T, SCRAP; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long res = 0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string enemy[1234]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int enemyi[1234], mei[1234]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
struct MinCostMaxFlow { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int N; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<long long> > cap, flow, cost; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> found; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> dist, pi, width; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, int> > dad; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  MinCostMaxFlow(int N) /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
      : N(N), /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
        cap(N, vector<long long>(N)), /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
        flow(N, vector<long long>(N)), /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
        cost(N, vector<long long>(N)), /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
        found(N), /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        dist(N), /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        pi(N), /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        width(N), /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        dad(N) {} /* line 23 slow_hit_count: 7, fast_hit_count: 7 */
  void AddEdge(int from, int to, long long cap, long long cost) { /* line 24 slow_hit_count: 920, fast_hit_count: 368 */
    this->cap[from][to] = cap; /* line 25 slow_hit_count: 920, fast_hit_count: 368 */
    this->cost[from][to] = cost; /* line 26 slow_hit_count: 920, fast_hit_count: 368 */
  } /* line 27 slow_hit_count: 920, fast_hit_count: 368 */
  void Relax(int s, int k, long long cap, long long cost, int dir) { /* line 28 slow_hit_count: 92736, fast_hit_count: 20700 */
    long long val = dist[s] + pi[s] - pi[k] + cost; /* line 29 slow_hit_count: 92736, fast_hit_count: 20700 */
    if (cap && val < dist[k]) { /* line 30 slow_hit_count: 92736, fast_hit_count: 20700 */
      dist[k] = val; /* line 31 slow_hit_count: 582, fast_hit_count: 129 */
      dad[k] = make_pair(s, dir); /* line 32 slow_hit_count: 582, fast_hit_count: 129 */
      width[k] = min(cap, width[s]); /* line 33 slow_hit_count: 582, fast_hit_count: 129 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 92736, fast_hit_count: 20700 */
  long long Dijkstra(int s, int t) { /* line 36 slow_hit_count: 23, fast_hit_count: 10 */
    fill(found.begin(), found.end(), false); /* line 37 slow_hit_count: 23, fast_hit_count: 10 */
    fill(dist.begin(), dist.end(), INF); /* line 38 slow_hit_count: 23, fast_hit_count: 10 */
    fill(width.begin(), width.end(), 0); /* line 39 slow_hit_count: 23, fast_hit_count: 10 */
    dist[s] = 0; /* line 40 slow_hit_count: 23, fast_hit_count: 10 */
    width[s] = INF; /* line 41 slow_hit_count: 23, fast_hit_count: 10 */
    while (s != -1) { /* line 42 slow_hit_count: 1495, fast_hit_count: 470 */
      int best = -1; /* line 43 slow_hit_count: 1472, fast_hit_count: 460 */
      found[s] = true; /* line 44 slow_hit_count: 1472, fast_hit_count: 460 */
      for (int k = 0; k < N; k++) { /* line 45 slow_hit_count: 95680, fast_hit_count: 21620 */
        if (found[k]) continue; /* line 46 slow_hit_count: 94208, fast_hit_count: 21160 */
        Relax(s, k, cap[s][k] - flow[s][k], cost[s][k], 1); /* line 47 slow_hit_count: 46368, fast_hit_count: 10350 */
        Relax(s, k, flow[k][s], -cost[k][s], -1); /* line 48 slow_hit_count: 46368, fast_hit_count: 10350 */
        if (best == -1 || dist[k] < dist[best]) best = k; /* line 49 slow_hit_count: 46368, fast_hit_count: 10350 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      s = best; /* line 51 slow_hit_count: 1472, fast_hit_count: 460 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    for (int k = 0; k < N; k++) pi[k] = min(pi[k] + dist[k], INF); /* line 53 slow_hit_count: 1495, fast_hit_count: 470 */
    return width[t]; /* line 54 slow_hit_count: 23, fast_hit_count: 10 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  pair<long long, long long> GetMaxFlow(int s, int t) { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    long long totflow = 0, totcost = 0; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    while (long long amt = Dijkstra(s, t)) { /* line 58 slow_hit_count: 23, fast_hit_count: 10 */
      totflow += amt; /* line 59 slow_hit_count: 22, fast_hit_count: 9 */
      for (int x = t; x != s; x = dad[x].first) { /* line 60 slow_hit_count: 88, fast_hit_count: 36 */
        if (dad[x].second == 1) { /* line 61 slow_hit_count: 66, fast_hit_count: 27 */
          flow[dad[x].first][x] += amt; /* line 62 slow_hit_count: 66, fast_hit_count: 27 */
          totcost += amt * cost[dad[x].first][x]; /* line 63 slow_hit_count: 66, fast_hit_count: 27 */
        } else { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
          flow[x][dad[x].first] -= amt; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
          totcost -= amt * cost[x][dad[x].first]; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      long long tot = min<long long>(n, totflow) * 10000LL + /* line 69 slow_hit_count: 22, fast_hit_count: 9 */
                      max<long long>(0, totflow - n) * 1000000LL; /* line 70 slow_hit_count: 22, fast_hit_count: 9 */
      res = max(res, tot - totcost); /* line 71 slow_hit_count: 22, fast_hit_count: 9 */
    } /* line 72 slow_hit_count: 22, fast_hit_count: 9 */
    return make_pair(totflow, totcost); /* line 73 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 78 slow_hit_count: 40, fast_hit_count: 35 */
    cin >> enemy[i] >> enemyi[i]; /* line 79 slow_hit_count: 39, fast_hit_count: 34 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; ++i) { /* line 81 slow_hit_count: 23, fast_hit_count: 10 */
    cin >> mei[i]; /* line 82 slow_hit_count: 22, fast_hit_count: 9 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  S = n + m, T = S + 1, SCRAP = T + 1; /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  MinCostMaxFlow mf(n + m + 3); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; ++i) { /* line 86 slow_hit_count: 23, fast_hit_count: 10 */
    mf.AddEdge(S, i, 1, 0); /* line 87 slow_hit_count: 22, fast_hit_count: 9 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  mf.AddEdge(SCRAP, T, 100, 0); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 90 slow_hit_count: 40, fast_hit_count: 35 */
    mf.AddEdge(i + m, T, 1, 0); /* line 91 slow_hit_count: 39, fast_hit_count: 34 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; ++i) { /* line 93 slow_hit_count: 23, fast_hit_count: 10 */
    for (int j = 0; j < n; ++j) { /* line 94 slow_hit_count: 880, fast_hit_count: 315 */
      if (enemy[j] == "ATK") { /* line 95 slow_hit_count: 858, fast_hit_count: 306 */
        if (enemyi[j] <= mei[i]) { /* line 96 slow_hit_count: 44, fast_hit_count: 18 */
          mf.AddEdge(i, j + m, 1, 10000 - (-enemyi[j] + mei[i])); /* line 97 slow_hit_count: 0, fast_hit_count: 18 */
        } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
        if (enemyi[j] < mei[i]) { /* line 100 slow_hit_count: 814, fast_hit_count: 288 */
          mf.AddEdge(i, j + m, 1, 10000); /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      mf.AddEdge(i, SCRAP, 1, 1000000 - mei[i]); /* line 104 slow_hit_count: 858, fast_hit_count: 306 */
    } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  mf.GetMaxFlow(S, T); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  cout << res << endl; /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  return (0); /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 110 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks and derive performance-characterizing invariants, let's analyze the provided C code and the hit counts for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Lines**:
   - **Lines 28 to 35** (`Relax` function): This function is called repeatedly and contributes significantly to the hit count difference between slow and fast inputs. The slow run has 92,736 hits compared to 20,700 hits in the fast run. This suggests that there are many more paths or iterations occurring in the slow input.
   - **Lines 45 to 49** (Dijkstra's loop): These lines are part of the main loop inside the `Dijkstra` method, where the graph is traversed. The high hit counts (95,680 in slow, 21,620 in fast) indicate extensive iterations over nodes and edges, likely due to a larger effective graph size or more complex connections in the input data for the slow case.
   - **Line 47 and Line 48** (inside loop in Dijkstra): These lines call the `Relax` function, showing high hit counts, indicating repeated relaxation steps due to the graph's nature in the slow input.

2. **Interaction with Data Structures**:
   - The `MinCostMaxFlow` structure is heavily utilized, with a focus on repeated calls to `Relax` and `Dijkstra`. The problem involves network flow, suggesting that the complexity is tied to the graph representation of cards and their interactions.

3. **Input Constraints Context**:
   - The problem involves `n` and `m` being up to 100, which is not massive, but the card strengths and positions create a graph-like structure that can vary significantly between inputs, impacting the number of iterations in flow computations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, let's derive some performance-invariant statements:

1. **Graph Complexity Invariant**:
   - **Natural Language Description**: "The performance degrades significantly when the effective graph derived from card interactions has a high density of connections, causing extensive iterations in Dijkstra's algorithm."
   - **Explanation**: If the graph representing potential interactions between Ciel's and Jiro's cards has many edges due to various strengths and positions enabling multiple connections, the `Dijkstra` method iterates over a large number of edges, slowing down computation.

2. **Iterative Relaxation Invariant**:
   - **Natural Language Description**: "If the connections between cards require frequent relaxation steps due to many feasible paths in the network flow model, performance may degrade."
   - **Explanation**: The relaxation function is called extensively when there are numerous potential paths between nodes (card interactions), leading to repeated updates and checks.

3. **Card Strength and Position Complexity Invariant**:
   - **Natural Language Description**: "Performance issues arise when the strengths of Ciel's cards vary widely and many of Jiro's cards can be countered, resulting in numerous edge combinations and graph adjustments."
   - **Explanation**: The diversity in card strengths and the ability to counter many of Jiro's cards lead to a more complex graph and an increase in `AddEdge` and `Relax` operations.

4. **Effective Node and Edge Count Invariant**:
   - **Natural Language Description**: "A high number of effective nodes and edges, as derived from the interaction rules, increases computational complexity, slowing down the network flow determination."
   - **Explanation**: The number of nodes and edges effectively processed in the graph can significantly impact performance, especially when many cards can interact based on the rules.

These invariants provide conditions under which the performance of the program may degrade, focusing on graph complexity and card interaction scenarios rather than specific numeric constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel is playing a card game with her friend Jiro.

Jiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.

Now is Ciel's battle phase, Ciel can do the following operation many times:

  1. Choose one of her cards X. This card mustn't be chosen before. 
  2. If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then: 
    * If Y's position is Attack, then (X's strength)  ≥  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength). 
    * If Y's position is Defense, then (X's strength)  > (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage. 



Ciel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of cards Jiro and Ciel have.

Each of the next n lines contains a string position and an integer strength (0 ≤ strength ≤ 8000) — the position and strength of Jiro's current card. Position is the string "ATK" for attack, and the string "DEF" for defense.

Each of the next m lines contains an integer strength (0 ≤ strength ≤ 8000) — the strength of Ciel's current card.

Output

Output an integer: the maximal damage Jiro can get.

Examples

Input

2 3
ATK 2000
DEF 1700
2500
2500
2500


Output

3000


Input

3 4
ATK 10
ATK 100
ATK 1000
1
11
101
1001


Output

992


Input

2 4
DEF 0
ATK 0
0
0
1
1


Output

1

Note

In the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack "ATK 2000" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the "DEF 1700" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.

In the second test case, she should use the "1001" card to attack the "ATK 100" card, then use the "101" card to attack the "ATK 10" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.

In the third test case note that she can destroy the "ATK 0" card by a card with strength equal to 0, but she can't destroy a "DEF 0" card with that card.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker code snippets for the performance-characterizing invariants derived earlier.

1. **Graph Complexity Invariant**: This checks if the effective graph has a high density of connections.

```cpp
void check_graph_complexity_invariant(int edgeCount, int threshold) {
    if (edgeCount > threshold) {
        cerr << "Warning: Performance bottleneck due to high graph density!" << endl;
        abort();
    }
}
```

2. **Iterative Relaxation Invariant**: This checks for excessive relaxation steps.

```cpp
void check_relaxation_invariant(int relaxationSteps, int threshold) {
    if (relaxationSteps > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive relaxation steps!" << endl;
        abort();
    }
}
```

3. **Card Strength and Position Complexity Invariant**: This checks for complex interactions based on card properties.

```cpp
void check_card_interaction_invariant(int interactionCount, int threshold) {
    if (interactionCount > threshold) {
        cerr << "Warning: Performance bottleneck due to complex card interactions!" << endl;
        abort();
    }
}
```

4. **Effective Node and Edge Count Invariant**: This checks if the number of nodes and edges exceeds a threshold.

```cpp
void check_node_edge_invariant(int nodeCount, int edgeCount, int nodeThreshold, int edgeThreshold) {
    if (nodeCount > nodeThreshold || edgeCount > edgeThreshold) {
        cerr << "Warning: Performance bottleneck due to excessive nodes or edges!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Here's how you would integrate these checks into the provided C++ program. We insert these checks at strategic points to ensure they do not degrade performance.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long INF = numeric_limits<long long>::max() / 4;
int n, m, S, T, SCRAP;
long long res = 0;
string enemy[1234];
int enemyi[1234], mei[1234];

void check_graph_complexity_invariant(int edgeCount, int threshold) {
    if (edgeCount > threshold) {
        cerr << "Warning: Performance bottleneck due to high graph density!" << endl;
        abort();
    }
}

void check_relaxation_invariant(int relaxationSteps, int threshold) {
    if (relaxationSteps > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive relaxation steps!" << endl;
        abort();
    }
}

void check_card_interaction_invariant(int interactionCount, int threshold) {
    if (interactionCount > threshold) {
        cerr << "Warning: Performance bottleneck due to complex card interactions!" << endl;
        abort();
    }
}

void check_node_edge_invariant(int nodeCount, int edgeCount, int nodeThreshold, int edgeThreshold) {
    if (nodeCount > nodeThreshold || edgeCount > edgeThreshold) {
        cerr << "Warning: Performance bottleneck due to excessive nodes or edges!" << endl;
        abort();
    }
}

struct MinCostMaxFlow {
    int N;
    vector<vector<long long> > cap, flow, cost;
    vector<int> found;
    vector<long long> dist, pi, width;
    vector<pair<int, int> > dad;
    MinCostMaxFlow(int N)
        : N(N),
          cap(N, vector<long long>(N)),
          flow(N, vector<long long>(N)),
          cost(N, vector<long long>(N)),
          found(N),
          dist(N),
          pi(N),
          width(N),
          dad(N) {}

    void AddEdge(int from, int to, long long cap, long long cost) {
        this->cap[from][to] = cap;
        this->cost[from][to] = cost;
    }

    void Relax(int s, int k, long long cap, long long cost, int dir) {
        long long val = dist[s] + pi[s] - pi[k] + cost;
        if (cap && val < dist[k]) {
            dist[k] = val;
            dad[k] = make_pair(s, dir);
            width[k] = min(cap, width[s]);
        }
    }

    long long Dijkstra(int s, int t) {
        fill(found.begin(), found.end(), false);
        fill(dist.begin(), dist.end(), INF);
        fill(width.begin(), width.end(), 0);
        dist[s] = 0;
        width[s] = INF;
        int relaxationSteps = 0; // Count relaxation steps
        while (s != -1) {
            int best = -1;
            found[s] = true;
            for (int k = 0; k < N; k++) {
                if (found[k]) continue;
                Relax(s, k, cap[s][k] - flow[s][k], cost[s][k], 1);
                Relax(s, k, flow[k][s], -cost[k][s], -1);
                relaxationSteps += 2;
                if (best == -1 || dist[k] < dist[best]) best = k;
            }
            s = best;
        }
        check_relaxation_invariant(relaxationSteps, 50000); // Arbitrary threshold for demo
        for (int k = 0; k < N; k++) pi[k] = min(pi[k] + dist[k], INF);
        return width[t];
    }

    pair<long long, long long> GetMaxFlow(int s, int t) {
        long long totflow = 0, totcost = 0;
        int edgeCount = 0; // Count edges
        while (long long amt = Dijkstra(s, t)) {
            totflow += amt;
            for (int x = t; x != s; x = dad[x].first) {
                if (dad[x].second == 1) {
                    flow[dad[x].first][x] += amt;
                    totcost += amt * cost[dad[x].first][x];
                } else {
                    flow[x][dad[x].first] -= amt;
                    totcost -= amt * cost[x][dad[x].first];
                }
                edgeCount++;
            }
            long long tot = min<long long>(n, totflow) * 10000LL +
                            max<long long>(0, totflow - n) * 1000000LL;
            res = max(res, tot - totcost);
        }
        check_graph_complexity_invariant(edgeCount, 5000); // Arbitrary threshold for demo
        return make_pair(totflow, totcost);
    }
};

int main() {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        cin >> enemy[i] >> enemyi[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> mei[i];
    }
    S = n + m, T = S + 1, SCRAP = T + 1;
    MinCostMaxFlow mf(n + m + 3);
    for (int i = 0; i < m; ++i) {
        mf.AddEdge(S, i, 1, 0);
    }
    mf.AddEdge(SCRAP, T, 100, 0);
    int interactionCount = 0; // Count interactions
    for (int i = 0; i < n; ++i) {
        mf.AddEdge(i + m, T, 1, 0);
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (enemy[j] == "ATK") {
                if (enemyi[j] <= mei[i]) {
                    mf.AddEdge(i, j + m, 1, 10000 - (-enemyi[j] + mei[i]));
                }
            } else {
                if (enemyi[j] < mei[i]) {
                    mf.AddEdge(i, j + m, 1, 10000);
                }
            }
            mf.AddEdge(i, SCRAP, 1, 1000000 - mei[i]);
            interactionCount++;
        }
    }
    check_card_interaction_invariant(interactionCount, 2000); // Arbitrary threshold for demo
    mf.GetMaxFlow(S, T);
    cout << res << endl;
    return 0;
}
```

### Explanation

- **Graph Complexity Check**: Placed in `GetMaxFlow` to check the edge count.
- **Relaxation Steps Check**: Placed in `Dijkstra` to count relaxation steps during iterations.
- **Card Interaction Check**: Placed after adding edges between cards, which accounts for interactions.
- **Use of Thresholds**: Thresholds are set arbitrarily for demonstration purposes and may need adjustment based on empirical testing or further analysis.

