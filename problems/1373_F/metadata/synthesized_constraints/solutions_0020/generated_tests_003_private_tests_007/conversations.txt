system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and n cities in a circle around the capital. The capital already has a good network coverage (so the government ignores it), but the i-th city contains a_i households that require a connection.

The government designed a plan to build n network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the i-th network station will provide service only for the i-th and the (i + 1)-th city (the n-th station is connected to the n-th and the 1-st city).

All network stations have capacities: the i-th station can provide the connection to at most b_i households.

Now the government asks you to check can the designed stations meet the needs of all cities or not — that is, is it possible to assign each household a network station so that each network station i provides the connection to at most b_i households.

Input

The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The first line of each test case contains the single integer n (2 ≤ n ≤ 10^6) — the number of cities and stations.

The second line of each test case contains n integers (1 ≤ a_i ≤ 10^9) — the number of households in the i-th city.

The third line of each test case contains n integers (1 ≤ b_i ≤ 10^9) — the capacities of the designed stations.

It's guaranteed that the sum of n over test cases doesn't exceed 10^6.

Output

For each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise (case insensitive).

Example

Input


5
3
2 3 4
3 3 3
3
3 3 3
2 3 4
4
2 3 4 5
3 7 2 2
4
4 5 2 3
2 3 2 7
2
1 1
10 10


Output


YES
YES
NO
YES
YES

Note

In the first test case: 

  * the first network station can provide 2 connections to the first city and 1 connection to the second city; 
  * the second station can provide 2 connections to the second city and 1 connection to the third city; 
  * the third station can provide 3 connections to the third city. 



In the second test case: 

  * the 1-st station can provide 2 connections to the 1-st city; 
  * the 2-nd station can provide 3 connections to the 2-nd city; 
  * the 3-rd station can provide 3 connections to the 3-rd city and 1 connection to the 1-st station. 



In the third test case, the fourth city needs 5 connections, but the third and the fourth station has 4 connections in total.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, t[5000005], save[5000005], a[1000005], b[1000005], pown, l, r, ad;
void solv(long long x) {
  for (int i = x - 1; i >= 1; i--) {
    a[i] -= b[i];
    a[i] = max(a[i], 0LL);
    long long ind = i - 1;
    if (!ind && x != 1) ind = n;
    if (a[i] > 0 && b[ind] < a[i]) {
      printf("NO\n");
      return;
    }
    b[ind] -= a[i];
  }
  for (int i = n; i >= x; i--) {
    a[i] -= b[i];
    a[i] = max(a[i], 0LL);
    long long ind = i - 1;
    if (i == x) ind = 0;
    if (a[i] > 0 && a[i] > b[ind]) {
      printf("NO\n");
      return;
    }
    b[ind] -= a[i];
  }
  printf("YES\n");
}
void add(long long x, long long L, long long R) {
  if (L > r || R < l) return;
  if (L >= l && R <= r) {
    t[x] += ad;
    save[x] += ad;
    return;
  }
  if (save[x]) {
    t[2 * x] += save[x];
    t[2 * x + 1] += save[x];
    save[2 * x] += save[x];
    save[2 * x + 1] += save[x];
    save[x] = 0;
  }
  add(2 * x, L, (L + R) / 2);
  add(2 * x + 1, (L + R) / 2 + 1, R);
  t[x] = t[2 * x];
  if (t[2 * x + 1] < t[x]) t[x] = t[2 * x + 1];
}
void solve() {
  scanf("%I64d", &n);
  pown = 1;
  while (pown <= n) pown *= 2;
  for (int i = 1; i <= 2 * pown; i++) {
    t[i] = 0;
    save[i] = 0;
  }
  long long asum = 0, bsum = 0;
  for (int i = 1; i <= n; i++) {
    scanf("%I64d", &a[i]);
    asum += a[i];
  }
  for (int i = 1; i <= n; i++) {
    scanf("%I64d", &b[i]);
    bsum += b[i];
  }
  for (int i = 1; i <= n; i++) {
    l = i, r = n, ad = b[i] - a[i];
    add(1, 1, pown);
  }
  if (t[1] >= 0) {
    solv(1);
    return;
  }
  for (int i = 1; i < n; i++) {
    l = 1, r = pown, ad = -(b[i] - a[i]);
    add(1, 1, pown);
    l = i, r = i, ad = -asum + a[i] + bsum - b[i] + (b[i] - a[i]);
    add(1, 1, pown);
    if (t[1] >= 0) {
      solv(i + 1);
      return;
    }
  }
  printf("NO\n");
}
int main() {
  long long q;
  cin >> q;
  while (q--) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
10
3 3 2 3 2 5 1 2 6 3
6 5 2 5 6 2 4 2 1 2
20
9 1 10 1 17 7 5 5 8 1 1 2 7 1 4 2 3 7 6 3
2 6 3 2 37 1 5 5 2 5 1 3 21 15 1 7 7 5 1 1
20
9 1 9 5 5 1 3 2 6 3 6 1 2 8 11 7 3 5 14 2
11 14 6 4 6 8 8 2 9 9 6 5 3 2 5 7 1 9 14 1


(G.2) Fast Input

1
4
3 3 3 3
3 3 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, t[5000005], save[5000005], a[1000005], b[1000005], pown, l, r, ad; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void solv(long long x) { /* line 4 slow_hit_count: 3, fast_hit_count: 0 */
  for (int i = x - 1; i >= 1; i--) { /* line 5 slow_hit_count: 3, fast_hit_count: 0 */
    a[i] -= b[i]; /* line 6 slow_hit_count: 1, fast_hit_count: 0 */
    a[i] = max(a[i], 0LL); /* line 7 slow_hit_count: 1, fast_hit_count: 0 */
    long long ind = i - 1; /* line 8 slow_hit_count: 1, fast_hit_count: 0 */
    if (!ind && x != 1) ind = n; /* line 9 slow_hit_count: 1, fast_hit_count: 0 */
    if (a[i] > 0 && b[ind] < a[i]) { /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
      printf("NO\n"); /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
      return; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    b[ind] -= a[i]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= x; i--) { /* line 16 slow_hit_count: 8, fast_hit_count: 0 */
    a[i] -= b[i]; /* line 17 slow_hit_count: 8, fast_hit_count: 0 */
    a[i] = max(a[i], 0LL); /* line 18 slow_hit_count: 8, fast_hit_count: 0 */
    long long ind = i - 1; /* line 19 slow_hit_count: 8, fast_hit_count: 0 */
    if (i == x) ind = 0; /* line 20 slow_hit_count: 8, fast_hit_count: 0 */
    if (a[i] > 0 && a[i] > b[ind]) { /* line 21 slow_hit_count: 8, fast_hit_count: 0 */
      printf("NO\n"); /* line 22 slow_hit_count: 2, fast_hit_count: 0 */
      return; /* line 23 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    b[ind] -= a[i]; /* line 25 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  printf("YES\n"); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
void add(long long x, long long L, long long R) { /* line 29 slow_hit_count: 638, fast_hit_count: 46 */
  if (L > r || R < l) return; /* line 30 slow_hit_count: 638, fast_hit_count: 46 */
  if (L >= l && R <= r) { /* line 31 slow_hit_count: 428, fast_hit_count: 29 */
    t[x] += ad; /* line 32 slow_hit_count: 137, fast_hit_count: 11 */
    save[x] += ad; /* line 33 slow_hit_count: 137, fast_hit_count: 11 */
    return; /* line 34 slow_hit_count: 137, fast_hit_count: 11 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (save[x]) { /* line 36 slow_hit_count: 291, fast_hit_count: 18 */
    t[2 * x] += save[x]; /* line 37 slow_hit_count: 56, fast_hit_count: 0 */
    t[2 * x + 1] += save[x]; /* line 38 slow_hit_count: 56, fast_hit_count: 0 */
    save[2 * x] += save[x]; /* line 39 slow_hit_count: 56, fast_hit_count: 0 */
    save[2 * x + 1] += save[x]; /* line 40 slow_hit_count: 56, fast_hit_count: 0 */
    save[x] = 0; /* line 41 slow_hit_count: 56, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  add(2 * x, L, (L + R) / 2); /* line 43 slow_hit_count: 291, fast_hit_count: 18 */
  add(2 * x + 1, (L + R) / 2 + 1, R); /* line 44 slow_hit_count: 291, fast_hit_count: 18 */
  t[x] = t[2 * x]; /* line 45 slow_hit_count: 291, fast_hit_count: 18 */
  if (t[2 * x + 1] < t[x]) t[x] = t[2 * x + 1]; /* line 46 slow_hit_count: 291, fast_hit_count: 18 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 48 slow_hit_count: 3, fast_hit_count: 1 */
  scanf("%I64d", &n); /* line 49 slow_hit_count: 3, fast_hit_count: 1 */
  pown = 1; /* line 50 slow_hit_count: 3, fast_hit_count: 1 */
  while (pown <= n) pown *= 2; /* line 51 slow_hit_count: 17, fast_hit_count: 4 */
  for (int i = 1; i <= 2 * pown; i++) { /* line 52 slow_hit_count: 163, fast_hit_count: 17 */
    t[i] = 0; /* line 53 slow_hit_count: 160, fast_hit_count: 16 */
    save[i] = 0; /* line 54 slow_hit_count: 160, fast_hit_count: 16 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  long long asum = 0, bsum = 0; /* line 56 slow_hit_count: 3, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 57 slow_hit_count: 53, fast_hit_count: 5 */
    scanf("%I64d", &a[i]); /* line 58 slow_hit_count: 50, fast_hit_count: 4 */
    asum += a[i]; /* line 59 slow_hit_count: 50, fast_hit_count: 4 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 61 slow_hit_count: 53, fast_hit_count: 5 */
    scanf("%I64d", &b[i]); /* line 62 slow_hit_count: 50, fast_hit_count: 4 */
    bsum += b[i]; /* line 63 slow_hit_count: 50, fast_hit_count: 4 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 65 slow_hit_count: 53, fast_hit_count: 5 */
    l = i, r = n, ad = b[i] - a[i]; /* line 66 slow_hit_count: 50, fast_hit_count: 4 */
    add(1, 1, pown); /* line 67 slow_hit_count: 50, fast_hit_count: 4 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  if (t[1] >= 0) { /* line 69 slow_hit_count: 3, fast_hit_count: 1 */
    solv(1); /* line 70 slow_hit_count: 2, fast_hit_count: 0 */
    return; /* line 71 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < n; i++) { /* line 73 slow_hit_count: 3, fast_hit_count: 4 */
    l = 1, r = pown, ad = -(b[i] - a[i]); /* line 74 slow_hit_count: 3, fast_hit_count: 3 */
    add(1, 1, pown); /* line 75 slow_hit_count: 3, fast_hit_count: 3 */
    l = i, r = i, ad = -asum + a[i] + bsum - b[i] + (b[i] - a[i]); /* line 76 slow_hit_count: 3, fast_hit_count: 3 */
    add(1, 1, pown); /* line 77 slow_hit_count: 3, fast_hit_count: 3 */
    if (t[1] >= 0) { /* line 78 slow_hit_count: 3, fast_hit_count: 3 */
      solv(i + 1); /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
      return; /* line 80 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  printf("NO\n"); /* line 83 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  long long q; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) solve(); /* line 88 slow_hit_count: 4, fast_hit_count: 2 */
  return 0; /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Compare line-level hit counts between the fast and slow runs:**

- The `solv` function (lines 4-28) has multiple lines with hits only in the slow input, indicating it's likely responsible for some of the slowdown.
- The `add` function (lines 29-47) is called significantly more times in the slow input (638 vs 46). This function is likely a hotspot.
- The lines dealing with tree manipulation within the `add` function (lines 36-46) show a stark difference in hit counts, indicating frequent updates to a data structure that may be causing performance issues.

**2. Pinpoint lines or functions that get significantly more hits under the slow input:**

- The `solv` function's loop structure (especially lines 16-25) operates extensively on the slow input but is not executed during fast input runs.
- The `add` function (lines 29-47) runs numerous times, especially lines 31-46 which involve recursive segment tree updates, suggesting these updates are computationally expensive.

**3. Infer how these lines might be interacting with data structures, loops, recursion, etc.:**

- The segment tree manipulation within `add` (lines 31-46) involves recursive calls and updates, which likely become expensive when the data range (denoted by `pown`) grows large.
- The `solv` function handles backward and forward checking of station assignments, which could loop through the cities multiple times if constraints are tight or if many cities need reassignment.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: Recursive Segment Tree Updates**

   **Natural Language Description**: "When the number of cities `n` is large, resulting in a deep segment tree structure, frequent updates to the segment tree can become computationally expensive."

2. **Invariant: Excessive Backtracking in Network Station Assignment**

   **Natural Language Description**: "If the capacity constraints of stations are close to the demands of the connected cities (i.e., small differences between `b[i]` and `a[i]`), the algorithm may need excessive backtracking or adjustment of assignments, leading to increased execution time."

3. **Invariant: Large Input Size and Computation**

   **Natural Language Description**: "Handling a large number of cities with high household demands, combined with complex constraints, may cause performance degradation due to extensive calculations for assigning households to network stations."

These invariants are broad yet focused on the operations that lead to slowdowns and adhere to the input constraints (e.g., `n <= 10^6`). They help identify scenarios that could trigger slow performance, useful for testing and improving the algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and n cities in a circle around the capital. The capital already has a good network coverage (so the government ignores it), but the i-th city contains a_i households that require a connection.

The government designed a plan to build n network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the i-th network station will provide service only for the i-th and the (i + 1)-th city (the n-th station is connected to the n-th and the 1-st city).

All network stations have capacities: the i-th station can provide the connection to at most b_i households.

Now the government asks you to check can the designed stations meet the needs of all cities or not — that is, is it possible to assign each household a network station so that each network station i provides the connection to at most b_i households.

Input

The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The first line of each test case contains the single integer n (2 ≤ n ≤ 10^6) — the number of cities and stations.

The second line of each test case contains n integers (1 ≤ a_i ≤ 10^9) — the number of households in the i-th city.

The third line of each test case contains n integers (1 ≤ b_i ≤ 10^9) — the capacities of the designed stations.

It's guaranteed that the sum of n over test cases doesn't exceed 10^6.

Output

For each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise (case insensitive).

Example

Input


5
3
2 3 4
3 3 3
3
3 3 3
2 3 4
4
2 3 4 5
3 7 2 2
4
4 5 2 3
2 3 2 7
2
1 1
10 10


Output


YES
YES
NO
YES
YES

Note

In the first test case: 

  * the first network station can provide 2 connections to the first city and 1 connection to the second city; 
  * the second station can provide 2 connections to the second city and 1 connection to the third city; 
  * the third station can provide 3 connections to the third city. 



In the second test case: 

  * the 1-st station can provide 2 connections to the 1-st city; 
  * the 2-nd station can provide 3 connections to the 2-nd city; 
  * the 3-rd station can provide 3 connections to the 3-rd city and 1 connection to the 1-st station. 



In the third test case, the fourth city needs 5 connections, but the third and the fourth station has 4 connections in total.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we can implement the following checker functions to detect performance bottlenecks:

1. **Invariant: Recursive Segment Tree Updates**

   ```cpp
   void check_segment_tree_invariant(int pown, int callCount) {
       if (pown > 100000 && callCount > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive segment tree updates!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Excessive Backtracking in Network Station Assignment**

   ```cpp
   void check_backtracking_invariant(int n, long long asum, long long bsum) {
       if (n > 100 && (bsum - asum) < n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive backtracking in station assignment!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Large Input Size and Computation**

   ```cpp
   void check_large_input_invariant(int n) {
       if (n > 500000) {
           cerr << "Warning: Performance bottleneck condition triggered - handling large input size!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Propagate and Insert Conditional Checks

Now, let's integrate these checker functions into the given C++ program at strategic points to avoid overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, t[5000005], save[5000005], a[1000005], b[1000005], pown, l, r, ad;

// Checker functions based on performance invariants
void check_segment_tree_invariant(int pown, int callCount) {
    if (pown > 100000 && callCount > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive segment tree updates!" << endl;
        abort();
    }
}

void check_backtracking_invariant(int n, long long asum, long long bsum) {
    if (n > 100 && (bsum - asum) < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive backtracking in station assignment!" << endl;
        abort();
    }
}

void check_large_input_invariant(int n) {
    if (n > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered - handling large input size!" << endl;
        abort();
    }
}

void solv(long long x) {
    for (int i = x - 1; i >= 1; i--) {
        a[i] -= b[i];
        a[i] = max(a[i], 0LL);
        long long ind = i - 1;
        if (!ind && x != 1) ind = n;
        if (a[i] > 0 && b[ind] < a[i]) {
            printf("NO\n");
            return;
        }
        b[ind] -= a[i];
    }
    for (int i = n; i >= x; i--) {
        a[i] -= b[i];
        a[i] = max(a[i], 0LL);
        long long ind = i - 1;
        if (i == x) ind = 0;
        if (a[i] > 0 && a[i] > b[ind]) {
            printf("NO\n");
            return;
        }
        b[ind] -= a[i];
    }
    printf("YES\n");
}

void add(long long x, long long L, long long R, int& callCount) {
    callCount++;
    if (L > r || R < l) return;
    if (L >= l && R <= r) {
        t[x] += ad;
        save[x] += ad;
        return;
    }
    if (save[x]) {
        t[2 * x] += save[x];
        t[2 * x + 1] += save[x];
        save[2 * x] += save[x];
        save[2 * x + 1] += save[x];
        save[x] = 0;
    }
    add(2 * x, L, (L + R) / 2, callCount);
    add(2 * x + 1, (L + R) / 2 + 1, R, callCount);
    t[x] = t[2 * x];
    if (t[2 * x + 1] < t[x]) t[x] = t[2 * x + 1];
}

void solve() {
    scanf("%I64d", &n);

    // Check for large input invariant
    check_large_input_invariant(n);

    pown = 1;
    while (pown <= n) pown *= 2;
    for (int i = 1; i <= 2 * pown; i++) {
        t[i] = 0;
        save[i] = 0;
    }
    long long asum = 0, bsum = 0;
    for (int i = 1; i <= n; i++) {
        scanf("%I64d", &a[i]);
        asum += a[i];
    }
    for (int i = 1; i <= n; i++) {
        scanf("%I64d", &b[i]);
        bsum += b[i];
    }

    // Check for excessive backtracking invariant
    check_backtracking_invariant(n, asum, bsum);

    int callCount = 0;  // Track the number of `add` function calls

    for (int i = 1; i <= n; i++) {
        l = i, r = n, ad = b[i] - a[i];
        add(1, 1, pown, callCount);

        // Check for segment tree invariant after each full `add` operation
        check_segment_tree_invariant(pown, callCount);
    }
    if (t[1] >= 0) {
        solv(1);
        return;
    }
    for (int i = 1; i < n; i++) {
        l = 1, r = pown, ad = -(b[i] - a[i]);
        add(1, 1, pown, callCount);

        // Check for segment tree invariant
        check_segment_tree_invariant(pown, callCount);

        l = i, r = i, ad = -asum + a[i] + bsum - b[i] + (b[i] - a[i]);
        add(1, 1, pown, callCount);

        // Check for segment tree invariant
        check_segment_tree_invariant(pown, callCount);

        if (t[1] >= 0) {
            solv(i + 1);
            return;
        }
    }
    printf("NO\n");
}

int main() {
    long long q;
    cin >> q;
    while (q--) solve();
    return 0;
}
```

### Comments on Inserted Checks:

- **`check_large_input_invariant(n)`**: This check is added after reading the number of cities `n` for each test case to detect potential slowdowns due to large input sizes.
- **`check_backtracking_invariant(n, asum, bsum)`**: Placed after calculating `asum` and `bsum` to check if the difference is small, triggering excessive backtracking.
- **`check_segment_tree_invariant(pown, callCount)`**: Inserted within the loop calling `add()` to detect when excessive updates to the segment tree could become a bottleneck. The `callCount` variable helps track the frequency of `add()` calls.

These checks are strategically placed to provide early warnings of performance issues without introducing significant overhead in tight loops.

