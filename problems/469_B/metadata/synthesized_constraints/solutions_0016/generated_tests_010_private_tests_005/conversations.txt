system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void err(istream_iterator<string> it) {}
template <typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " = " << a << endl;
  err(++it, args...);
}
const long long N = 1e4 + 1;
long long gcd(long long a, long long b) {
  if (b > a) {
    return gcd(b, a);
  }
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}
void swap(long long &x, long long &y) {
  long long temp = x;
  x = y;
  y = temp;
}
long long mod_add(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a + b) % m) + m) % m;
}
long long mod_mul(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a * b) % m) + m) % m;
}
long long mod_sub(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a - b) % m) + m) % m;
}
void solve() {
  long long p, q, l, r;
  cin >> p >> q >> l >> r;
  vector<long long> v(2000 + 7, 0);
  for (long long i = 0; i < p; i++) {
    long long f, s;
    cin >> f >> s;
    for (long long j = f; j <= s; j++) {
      v[j] = 1;
    }
  }
  vector<long long> c;
  for (long long i = 0; i < q; i++) {
    long long f, s;
    cin >> f >> s;
    for (__typeof(s + 1) j = (f) - ((f) > (s + 1));
         j != (s + 1) - ((f) > (s + 1)); j += 1 - 2 * ((f) > (s + 1))) {
      c.push_back(j);
    }
  }
  long long ans = 0;
  for (long long i = l; i <= r; i++) {
    for (auto x : c) {
      if (v[x + i]) {
        ans++;
        {
          string _s = "ans";
          replace(_s.begin(), _s.end(), ',', ' ');
          stringstream _ss(_s);
          istream_iterator<string> _it(_ss);
          err(_it, ans);
        };
        break;
      }
    }
  }
  cout << ans << '\n';
  return;
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long t;
  t = 1;
  while (t--) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 11 201 515
2 3
102 103
202 203
302 304
401 402
502 503
600 603
701 702
800 803
900 902
1 2
103 104
37 202
302 304
400 404
501 504
600 601
603 604
701 704
800 801
900 902


(G.2) Fast Input

10 11 201 515
2 3
102 103
202 203
302 304
401 402
502 503
600 603
701 702
800 803
900 902
1 2
103 104
201 202
302 304
400 404
501 504
600 601
603 604
701 704
800 801
900 902


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void err(istream_iterator<string> it) {} /* line 3 slow_hit_count: 315, fast_hit_count: 26 */
template <typename T, typename... Args> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void err(istream_iterator<string> it, T a, Args... args) { /* line 5 slow_hit_count: 315, fast_hit_count: 26 */
  cerr << *it << " = " << a << endl; /* line 6 slow_hit_count: 315, fast_hit_count: 26 */
  err(++it, args...); /* line 7 slow_hit_count: 315, fast_hit_count: 26 */
} /* line 8 slow_hit_count: 315, fast_hit_count: 26 */
const long long N = 1e4 + 1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (b > a) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return gcd(b, a); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return a; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void swap(long long &x, long long &y) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  long long temp = x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  x = y; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  y = temp; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_add(long long a, long long b, long long m) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  a = a % m; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  b = b % m; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return (((a + b) % m) + m) % m; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_mul(long long a, long long b, long long m) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  a = a % m; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  b = b % m; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return (((a * b) % m) + m) % m; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_sub(long long a, long long b, long long m) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  a = a % m; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  b = b % m; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return (((a - b) % m) + m) % m; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  long long p, q, l, r; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> q >> l >> r; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v(2000 + 7, 0); /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < p; i++) { /* line 43 slow_hit_count: 11, fast_hit_count: 11 */
    long long f, s; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> f >> s; /* line 45 slow_hit_count: 10, fast_hit_count: 10 */
    for (long long j = f; j <= s; j++) { /* line 46 slow_hit_count: 36, fast_hit_count: 36 */
      v[j] = 1; /* line 47 slow_hit_count: 26, fast_hit_count: 26 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> c; /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < q; i++) { /* line 51 slow_hit_count: 12, fast_hit_count: 12 */
    long long f, s; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> f >> s; /* line 53 slow_hit_count: 11, fast_hit_count: 11 */
    for (__typeof(s + 1) j = (f) - ((f) > (s + 1)); /* line 54 slow_hit_count: 11, fast_hit_count: 11 */
         j != (s + 1) - ((f) > (s + 1)); j += 1 - 2 * ((f) > (s + 1))) { /* line 55 slow_hit_count: 206, fast_hit_count: 42 */
      c.push_back(j); /* line 56 slow_hit_count: 195, fast_hit_count: 31 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = l; i <= r; i++) { /* line 60 slow_hit_count: 316, fast_hit_count: 316 */
    for (auto x : c) { /* line 61 slow_hit_count: 15446, fast_hit_count: 9347 */
      if (v[x + i]) { /* line 62 slow_hit_count: 15446, fast_hit_count: 9058 */
        ans++; /* line 63 slow_hit_count: 315, fast_hit_count: 26 */
        { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
          string _s = "ans"; /* line 65 slow_hit_count: 630, fast_hit_count: 52 */
          replace(_s.begin(), _s.end(), ',', ' '); /* line 66 slow_hit_count: 315, fast_hit_count: 26 */
          stringstream _ss(_s); /* line 67 slow_hit_count: 630, fast_hit_count: 52 */
          istream_iterator<string> _it(_ss); /* line 68 slow_hit_count: 315, fast_hit_count: 26 */
          err(_it, ans); /* line 69 slow_hit_count: 315, fast_hit_count: 26 */
        }; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 71 slow_hit_count: 315, fast_hit_count: 26 */
      } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  return; /* line 76 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  long long t; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  t = 1; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 84 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 86 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the line-level hit counts for both the slow and fast inputs, the critical sections of the code where performance diverges significantly are identified:

1. **Lines 60-63:**
   - These lines iterate over all possible times `i` from `l` to `r` (inclusive). 
   - For each time `i`, the code checks every element `x` in vector `c` to see if `v[x + i]` is set (indicating that both friends are online).
   - The frequency of hits on these lines is significantly higher for the slow input compared to the fast input, suggesting they are a potential bottleneck.

2. **Vector `c` Construction (Lines 51-56):**
   - The vector `c` is populated with all possible time intervals for Little X's online times adjusted by `t`.
   - The construction of `c` involves nested loops that iterate over a potentially large number of elements, contributing to increased execution time.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis, the following conditions and patterns likely lead to the slowdown:

1. **High Density of Possible Overlaps:**
   - Natural Language Description: "When the range of possible times `l` to `r` is large, and the scheduling intervals for Little X (`ci`, `di`) and Little Z (`ai`, `bi`) overlap frequently, especially if p and q are at their maximum, performance may degrade due to extensive checking of overlaps."
   - This is due to the code iterating over a large number of potential start times (`l` to `r`) and checking overlap for each, often resulting in nested loops performing redundant checks.

2. **Large Number of Online Periods:**
   - Natural Language Description: "If the number of intervals `p` or `q` is close to the upper limit, the computational load increases as each interval is compared against a potentially large set of shifted intervals."
   - With maximum `p` or `q` values (both up to 50), the number of comparisons for overlaps significantly increases, affecting performance.

3. **Extensive Iteration for Overlap Checking:**
   - Natural Language Description: "If the vector `c`, representing potential start times for Little X, has a length that results in multiple redundant checks against the availability vector `v`, the program's performance may degrade."
   - This is due to repeated checks of `v[x + i]` for many values of `x` and `i`, which can be computationally expensive when both `l` and `r` span a large range.

### Implementation of Invariants

These conditions can be captured and monitored in the program to help identify scenarios where performance might degrade. For example, adding checks for the invariants could help alert when conditions are met that are known to trigger performance issues:

```cpp
void check_overlap_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: overlap_invariant triggered - extensive overlap checks likely" << endl;
        abort();
    }
}

// Usage in the solve function
check_overlap_invariant((r - l > 800) && (p > 45) && (q > 45));
```

These checks would alert programmers or testers when the input conditions are likely to cause slow performance due to the extensive overlap checking and large number of iterations in the loops.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, I will now implement the corresponding C++ code checks.

#### Invariant 1: High Density of Possible Overlaps
```cpp
// Checks if the range [l, r] is large and there are many overlapping intervals
void check_overlap_invariant(long long l, long long r, long long p, long long q) {
    if ((r - l > 800) && (p > 45) && (q > 45)) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive overlap checks likely!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Number of Online Periods
```cpp
// Checks if the number of intervals p or q is close to the upper limit
void check_interval_count_invariant(long long p, long long q) {
    if ((p > 45) || (q > 45)) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of online periods!" << endl;
        abort();
    }
}
```

#### Invariant 3: Extensive Iteration for Overlap Checking
```cpp
// Checks if vector c could lead to extensive overlap checking
void check_iteration_invariant(long long l, long long r, size_t c_size) {
    if ((r - l > 800) && (c_size > 900)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iteration expected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, I will integrate these checker functions into the existing C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check high density of possible overlaps
void check_overlap_invariant(long long l, long long r, long long p, long long q) {
    if ((r - l > 800) && (p > 45) && (q > 45)) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive overlap checks likely!" << endl;
        abort();
    }
}

// Function to check large number of online periods
void check_interval_count_invariant(long long p, long long q) {
    if ((p > 45) || (q > 45)) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of online periods!" << endl;
        abort();
    }
}

// Function to check extensive iteration for overlap checking
void check_iteration_invariant(long long l, long long r, size_t c_size) {
    if ((r - l > 800) && (c_size > 900)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iteration expected!" << endl;
        abort();
    }
}

void solve() {
    long long p, q, l, r;
    cin >> p >> q >> l >> r;

    // Check the invariants after reading input
    check_overlap_invariant(l, r, p, q);
    check_interval_count_invariant(p, q);

    vector<long long> v(2000 + 7, 0);
    for (long long i = 0; i < p; i++) {
        long long f, s;
        cin >> f >> s;
        for (long long j = f; j <= s; j++) {
            v[j] = 1;
        }
    }
    vector<long long> c;
    for (long long i = 0; i < q; i++) {
        long long f, s;
        cin >> f >> s;
        for (__typeof(s + 1) j = (f) - ((f) > (s + 1));
             j != (s + 1) - ((f) > (s + 1)); j += 1 - 2 * ((f) > (s + 1))) {
            c.push_back(j);
        }
    }

    // Check the iteration invariant before executing the main loop
    check_iteration_invariant(l, r, c.size());

    long long ans = 0;
    for (long long i = l; i <= r; i++) {
        for (auto x : c) {
            if (v[x + i]) {
                ans++;
                break;
            }
        }
    }
    cout << ans << '\n';
    return;
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    long long t;
    t = 1;
    while (t--) solve();
    return 0;
}
```

### Explanation:
- **Check Insertion:** The checks are inserted immediately after reading input parameters and before entering the main loop, ensuring they do not add overhead inside performance-critical loops.
- **Checker Functions:** Each invariant is translated into a function that checks the specific conditions and outputs a warning if triggered, using `abort()` to immediately stop the program.

