system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct s {
  int l, r;
} ab[55], cd[55];
int c[2111];
int getnum(int x) {
  if (x <= 0) return 0;
  int rnt = 0;
  for (int i = x; i <= 2111; i += (i & (-i))) {
    rnt += c[i];
  }
  return rnt;
}
void add(int i, int a) {
  while (i >= 1) {
    c[i] += a;
    i -= (i & (-i));
  }
}
int main() {
  int p, q, l, r;
  scanf("%d%d%d%d", &p, &q, &l, &r);
  for (int i = 0; i < p; i++) scanf("%d%d", &ab[i].l, &ab[i].r);
  for (int i = 0; i < q; i++) scanf("%d%d", &cd[i].l, &cd[i].r);
  int ans = 0;
  for (int i = l; i <= r; i++) {
    memset(c, 0, sizeof(c));
    for (int j = 0; j < p; j++) {
      add(ab[j].r, 1);
      add(ab[j].l - 1, -1);
    }
    for (int j = 0; j < q; j++) {
      add(cd[j].r + i, 1);
      add(cd[j].l - 1 + i, -1);
    }
    for (int j = 1; j < 2111; j++) {
      if (getnum(j) > 1) {
        ans++;
        break;
      }
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33 17 295 791
41 49
66 73
95 102
118 126
157 158
189 198
228 237
247 251
301 307
318 230
328 333
356 363
373 381
454 460
463 466
471 477
500 501
505 510
559 566
585 588
597 604
675 684
688 695
699 705
749 755
780 788
869 873
879 888
890 892
909 918
953 954
973 978
993 996
53 60
68 74
102 105
149 153
191 206
230 242
249 252
320 325
483 488
509 513
523 524
544 560
651 655
670 672
691 708
742 748
920 939


(G.2) Fast Input

33 17 295 791
41 49
66 73
95 102
118 126
157 158
14 198
228 237
247 251
301 307
318 230
328 333
356 363
373 381
454 460
463 466
471 477
500 501
505 510
559 566
585 588
597 604
675 684
688 695
699 705
749 755
780 788
869 873
879 888
890 892
909 918
953 954
973 978
993 996
53 60
68 74
102 105
149 153
191 206
230 242
249 252
320 325
483 488
509 513
523 524
544 560
651 655
670 672
691 708
742 748
920 939


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct s { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int l, r; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} ab[55], cd[55]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int c[2111]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int getnum(int x) { /* line 7 slow_hit_count: 321906, fast_hit_count: 20377 */
  if (x <= 0) return 0; /* line 8 slow_hit_count: 321906, fast_hit_count: 20377 */
  int rnt = 0; /* line 9 slow_hit_count: 321906, fast_hit_count: 20377 */
  for (int i = x; i <= 2111; i += (i & (-i))) { /* line 10 slow_hit_count: 2723469, fast_hit_count: 214207 */
    rnt += c[i]; /* line 11 slow_hit_count: 2401563, fast_hit_count: 193830 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return rnt; /* line 13 slow_hit_count: 321906, fast_hit_count: 20377 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void add(int i, int a) { /* line 15 slow_hit_count: 317455, fast_hit_count: 316461 */
  while (i >= 1) { /* line 16 slow_hit_count: 317455, fast_hit_count: 316461 */
    c[i] += a; /* line 17 slow_hit_count: 267755, fast_hit_count: 266761 */
    i -= (i & (-i)); /* line 18 slow_hit_count: 267755, fast_hit_count: 266761 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 49700, fast_hit_count: 49700 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int p, q, l, r; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d%d%d", &p, &q, &l, &r); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < p; i++) scanf("%d%d", &ab[i].l, &ab[i].r); /* line 24 slow_hit_count: 34, fast_hit_count: 34 */
  for (int i = 0; i < q; i++) scanf("%d%d", &cd[i].l, &cd[i].r); /* line 25 slow_hit_count: 18, fast_hit_count: 18 */
  int ans = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = l; i <= r; i++) { /* line 27 slow_hit_count: 498, fast_hit_count: 498 */
    memset(c, 0, sizeof(c)); /* line 28 slow_hit_count: 497, fast_hit_count: 497 */
    for (int j = 0; j < p; j++) { /* line 29 slow_hit_count: 16898, fast_hit_count: 16898 */
      add(ab[j].r, 1); /* line 30 slow_hit_count: 16401, fast_hit_count: 16401 */
      add(ab[j].l - 1, -1); /* line 31 slow_hit_count: 16401, fast_hit_count: 16401 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < q; j++) { /* line 33 slow_hit_count: 8946, fast_hit_count: 8946 */
      add(cd[j].r + i, 1); /* line 34 slow_hit_count: 8449, fast_hit_count: 8449 */
      add(cd[j].l - 1 + i, -1); /* line 35 slow_hit_count: 8449, fast_hit_count: 8449 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j < 2111; j++) { /* line 37 slow_hit_count: 321906, fast_hit_count: 20377 */
      if (getnum(j) > 1) { /* line 38 slow_hit_count: 321906, fast_hit_count: 20377 */
        ans++; /* line 39 slow_hit_count: 497, fast_hit_count: 497 */
        break; /* line 40 slow_hit_count: 497, fast_hit_count: 497 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the provided hit count information, we can observe significant differences in hit counts between the slow and fast input runs:

1. **Function `getnum`**: 
   - The lines inside this function (specifically the loop starting at line 10) are hit considerably more for the slow input compared to the fast input. This indicates that the inner loop in `getnum` is a potential source of inefficiency.

2. **Loop on Line 37**:
   - The loop iterating from `j = 1` to `j < 2111` is also executed significantly more times for the slow input than the fast input. This loop seems to be heavily interacting with the `getnum` function.

The high hit count suggests that the loop is being executed many times due to the values in `c` array, possibly due to the conditions under which the `add` function is invoked. This might be related to the input patterns or how intervals are managed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Interval Overlap Complexity**:
   - **Natural Language**: "The program slows down when there are numerous overlapping intervals between Little Z and Little X, causing the algorithm to perform many redundant checks over a wide range."
   - **Explanation**: If there are many overlaps, especially when the segments of Little Z are dense or when Little X’s shifted segments overlap multiple intervals of Little Z, the checking mechanism (via `getnum`) needs to iterate through more potential intersections, leading to increased computation.

2. **High Range of Possible Wake-up Times**:
   - **Natural Language**: "A broad range of possible wake-up times for Little X (large `r - l` value) increases the number of iterations over potential offset schedules, which may introduce significant computational overhead."
   - **Explanation**: The outer loop running from `l` to `r` significantly influences performance. Wider ranges increase the number of iterations, directly affecting the inner loop complexity.

3. **Dense Time Intervals**:
   - **Natural Language**: "When the time intervals for either Little X or Little Z are densely packed within a short period, it can lead to frequent interactions and updates in the cumulative array, which may slow down the process of verifying overlapping schedules."
   - **Explanation**: Dense intervals may result in numerous `add` operations affecting similar indices, leading to inefficiencies in updating and querying the cumulative frequencies.

By recognizing these patterns and conditions, we can guide optimizations or anticipate performance bottlenecks in different scenarios without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

1. **Interval Overlap Complexity Checker**:
   ```cpp
   void check_overlap_invariant(int overlapCount) {
       if (overlapCount > 2000) {  // Example threshold for overlap complexity
           cerr << "Warning: Performance bottleneck condition triggered due to excessive interval overlap!" << endl;
           abort();
       }
   }
   ```

2. **High Range of Possible Wake-up Times Checker**:
   ```cpp
   void check_wakeup_range_invariant(int range) {
       if (range > 500) {  // Example threshold for wake-up range
           cerr << "Warning: Performance bottleneck condition triggered due to large wake-up time range!" << endl;
           abort();
       }
   }
   ```

3. **Dense Time Intervals Checker**:
   ```cpp
   void check_dense_intervals_invariant(int p, int q) {
       if (p * q > 1500) {  // Example threshold for dense intervals
           cerr << "Warning: Performance bottleneck condition triggered due to dense time intervals!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers with the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct s {
  int l, r;
} ab[55], cd[55];

int c[2111];

// Checker function for interval overlap complexity
void check_overlap_invariant(int overlapCount) {
    if (overlapCount > 2000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive interval overlap!" << endl;
        abort();
    }
}

// Checker function for high range of possible wake-up times
void check_wakeup_range_invariant(int range) {
    if (range > 500) {
        cerr << "Warning: Performance bottleneck condition triggered due to large wake-up time range!" << endl;
        abort();
    }
}

// Checker function for dense time intervals
void check_dense_intervals_invariant(int p, int q) {
    if (p * q > 1500) {
        cerr << "Warning: Performance bottleneck condition triggered due to dense time intervals!" << endl;
        abort();
    }
}

int getnum(int x) {
  if (x <= 0) return 0;
  int rnt = 0;
  for (int i = x; i <= 2111; i += (i & (-i))) {
    rnt += c[i];
  }
  return rnt;
}

void add(int i, int a) {
  while (i >= 1) {
    c[i] += a;
    i -= (i & (-i));
  }
}

int main() {
  int p, q, l, r;
  scanf("%d%d%d%d", &p, &q, &l, &r);

  // Check for dense time intervals
  check_dense_intervals_invariant(p, q);

  for (int i = 0; i < p; i++) scanf("%d%d", &ab[i].l, &ab[i].r);
  for (int i = 0; i < q; i++) scanf("%d%d", &cd[i].l, &cd[i].r);

  // Check for high range of possible wake-up times
  check_wakeup_range_invariant(r - l);

  int ans = 0;
  for (int i = l; i <= r; i++) {
    memset(c, 0, sizeof(c));
    for (int j = 0; j < p; j++) {
      add(ab[j].r, 1);
      add(ab[j].l - 1, -1);
    }
    for (int j = 0; j < q; j++) {
      add(cd[j].r + i, 1);
      add(cd[j].l - 1 + i, -1);
    }
    for (int j = 1; j < 2111; j++) {
      int overlapCount = getnum(j);
      
      // Check for excessive interval overlap
      check_overlap_invariant(overlapCount);

      if (overlapCount > 1) {
        ans++;
        break;
      }
    }
  }

  cout << ans << endl;
  return 0;
}
```

### Explanation

- **Checker Placement**:
  - `check_dense_intervals_invariant` is called right after input reading to ensure input data doesn't cause dense time interval issues.
  - `check_wakeup_range_invariant` is applied after calculating the wake-up range to preemptively catch long ranges.
  - `check_overlap_invariant` is inside the loop, checking each overlap count but not inside the tightest loop to minimize overhead. This ensures any excessively overlapping intervals are detected early.

By integrating these checks, the program can now notify potentially problematic input scenarios reflective of the identified performance bottlenecks.

