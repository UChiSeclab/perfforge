system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = 1e9 + 7;
const double PI = 2 * acos(0.0);
const long double EPS = 1.0E-14;
bool check[2005];
set<long long> st;
int main() {
  long long p, q, l, r, x, y, newX, newY;
  cin >> p >> q >> l >> r;
  for (int i = 0; i < p; i++) {
    scanf("%lld %lld", &x, &y);
    for (int j = x; j <= y; j++) {
      check[j] = true;
    }
  }
  for (int i = 0; i < q; i++) {
    scanf("%lld %lld", &x, &y);
    for (int j = l; j <= r; j++) {
      newX = x + j, newY = y + j;
      for (int k = newX; k <= newY; k++) {
        if (check[k]) {
          st.insert(j);
          break;
        }
      }
    }
  }
  cout << st.size();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 11 201 515
2 3
102 103
202 203
302 304
401 402
502 503
600 603
701 702
800 803
900 902
1 2
103 104
37 202
302 304
400 404
501 504
600 601
603 604
701 704
800 801
900 902


(G.2) Fast Input

10 11 201 515
2 3
102 103
202 203
302 304
401 402
502 503
600 603
701 702
800 803
900 902
1 2
103 104
201 202
302 304
400 404
501 504
600 601
603 604
701 704
800 801
900 902


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = 2 * acos(0.0); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1.0E-14; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool check[2005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
set<long long> st; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long p, q, l, r, x, y, newX, newY; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> q >> l >> r; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < p; i++) { /* line 11 slow_hit_count: 11, fast_hit_count: 11 */
    scanf("%lld %lld", &x, &y); /* line 12 slow_hit_count: 10, fast_hit_count: 10 */
    for (int j = x; j <= y; j++) { /* line 13 slow_hit_count: 36, fast_hit_count: 36 */
      check[j] = true; /* line 14 slow_hit_count: 26, fast_hit_count: 26 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < q; i++) { /* line 17 slow_hit_count: 12, fast_hit_count: 12 */
    scanf("%lld %lld", &x, &y); /* line 18 slow_hit_count: 11, fast_hit_count: 11 */
    for (int j = l; j <= r; j++) { /* line 19 slow_hit_count: 3476, fast_hit_count: 3476 */
      newX = x + j, newY = y + j; /* line 20 slow_hit_count: 3465, fast_hit_count: 3465 */
      for (int k = newX; k <= newY; k++) { /* line 21 slow_hit_count: 27572, fast_hit_count: 12967 */
        if (check[k]) { /* line 22 slow_hit_count: 24513, fast_hit_count: 9605 */
          st.insert(j); /* line 23 slow_hit_count: 406, fast_hit_count: 103 */
          break; /* line 24 slow_hit_count: 406, fast_hit_count: 103 */
        } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << st.size(); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck and derive performance-characterizing invariants for the given C code, we need to analyze the hit count information and identify the potential reasons for the slowdown when dealing with the slow input.

### Phase 1: Identification of Expensive Code Segments

1. **Hit Count Analysis**: 
   - The loop at line 19 is executed 3476 times for both inputs, which indicates that both inputs have the same range \( r - l + 1 \).
   - The inner loop at line 21 has a significantly higher hit count with the slow input (27572 vs. 12967). This indicates that the range of `k` is significantly larger for the slow input.
   - The condition check at line 22 and the set insertion at line 23 also have higher hit counts for the slow input, showing that more time points are being checked and inserted into the set.

2. **Inferences**:
   - The slowdown is likely due to the increased number of iterations in the inner loop at line 21. This happens because the ranges `[newX, newY]` are larger or more frequently hit for the slow input.
   - The set insertion at line 23 is more frequent in the slow input, indicating that more suitable times are found which require additional operations.

### Phase 2: Derivation of Performance-Characterizing Invariants

Based on the analysis, we can derive conditions that might trigger a slowdown:

1. **Large Overlapping Ranges**:
   - **Invariant**: "When the ranges of time Little Z is online and the shifted ranges of Little X overlap extensively, the inner loop processes a larger number of elements, causing a slowdown."
   - **Explanation**: Extensive overlap between Little Z's fixed schedule and the potential shifted schedules of Little X results in more iterations over time points, increasing computation time.

2. **High Density of Active Times**:
   - **Invariant**: "If the density of active times (moments when either Little X or Little Z is online) is very high, particularly within the range `[l, r]`, the program may enter more branches, resulting in performance degradation."
   - **Explanation**: A high density of active times leads to more checks and potential insertions into the set, which can slow down the execution significantly.

3. **Increased Range Sizes**:
   - **Invariant**: "When the intervals `[ci, di]` for Little X, after shifting, become large, the number of iterations in the nested loops increases, leading to slower performance."
   - **Explanation**: Larger intervals imply more iterations over possible overlapping times, thus consuming more processing time.

By understanding these invariants, we can anticipate performance issues in similar scenarios or future inputs, allowing for more efficient testing and optimization.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

Solution (C++ code):
{solution}


assistant: Let's proceed to implement the checker code for the performance-characterizing invariants, and then integrate these into the original C++ program.

### Phase 3: Implementing Natural Language Invariants in C++

1. **Large Overlapping Ranges**:
   - **Checker**: We need to monitor if the overlapping intervals between Little Z's and Little X's schedules become too extensive, causing excessive iterations.
   
   ```cpp
   void check_large_overlap(int overlap_count) {
       if (overlap_count > 10000) {  // Threshold chosen based on expected overlap
           cerr << "Warning: Performance bottleneck condition triggered - large overlapping ranges!" << endl;
           abort();
       }
   }
   ```

2. **High Density of Active Times**:
   - **Checker**: If the density of active overlap moments is very high, it may cause performance issues.
   
   ```cpp
   void check_high_density(int active_count) {
       if (active_count > 5000) {  // Threshold for high density
           cerr << "Warning: Performance bottleneck condition triggered - high density of active times!" << endl;
           abort();
       }
   }
   ```

3. **Increased Range Sizes**:
   - **Checker**: Check if the shifted ranges for Little X become too large.
   
   ```cpp
   void check_large_range(int range_size) {
       if (range_size > 100) {  // Arbitrary threshold for a large range size
           cerr << "Warning: Performance bottleneck condition triggered - large range sizes!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, let's integrate these performance checkers into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = 1e9 + 7;
const double PI = 2 * acos(0.0);
const long double EPS = 1.0E-14;
bool check[2005];
set<long long> st;

// Checker functions
void check_large_overlap(int overlap_count) {
    if (overlap_count > 10000) {  // Threshold chosen based on expected overlap
        cerr << "Warning: Performance bottleneck condition triggered - large overlapping ranges!" << endl;
        abort();
    }
}

void check_high_density(int active_count) {
    if (active_count > 5000) {  // Threshold for high density
        cerr << "Warning: Performance bottleneck condition triggered - high density of active times!" << endl;
        abort();
    }
}

void check_large_range(int range_size) {
    if (range_size > 100) {  // Arbitrary threshold for a large range size
        cerr << "Warning: Performance bottleneck condition triggered - large range sizes!" << endl;
        abort();
    }
}

int main() {
    long long p, q, l, r, x, y, newX, newY;
    cin >> p >> q >> l >> r;
    
    for (int i = 0; i < p; i++) {
        scanf("%lld %lld", &x, &y);
        for (int j = x; j <= y; j++) {
            check[j] = true;
        }
    }

    int overall_overlap_count = 0;  // To track total overlaps
    int active_count = 0;           // To track active overlapping times

    for (int i = 0; i < q; i++) {
        scanf("%lld %lld", &x, &y);
        for (int j = l; j <= r; j++) {
            newX = x + j, newY = y + j;
            check_large_range(newY - newX);  // Check for large range size
            int overlap_count = 0;  // Count for each new range
            for (int k = newX; k <= newY; k++) {
                if (check[k]) {
                    st.insert(j);
                    overlap_count++;
                    active_count++;
                    break;
                }
            }
            overall_overlap_count += overlap_count;
            check_high_density(active_count);  // Check high density of active times
        }
    }
    check_large_overlap(overall_overlap_count);  // Check for large overall overlaps
    cout << st.size();
}
```

### Explanation
- **Check Placement**: Each checker is placed at strategic points in the control flow to monitor conditions without significantly affecting performance.
- **Thresholds**: These are indicative and based on the problem constraints. They serve to trigger warnings when a condition might lead to performance degradation.
- **Assertions**: If any condition is met, an error message is printed and the program stops execution, helping in the detection of potential bottlenecks.

This instrumented code should help detect when the performance-triggering conditions are met using runtime checks.

