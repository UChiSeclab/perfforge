system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<int, int> mp;
set<int> st;
int main() {
  int p, q, l, r, x, y;
  cin >> p >> q >> l >> r;
  for (int i = 0; i < p; i++) {
    cin >> x >> y;
    for (int j = x; j <= y; j++) {
      mp[j] = 1;
    }
  }
  for (int i = 0; i < q; i++) {
    cin >> x >> y;
    for (int j = l; j <= r; j++)
      for (int z = x + j; z <= y + j; z++)
        if (mp[z]) {
          st.insert(j);
        }
  }
  cout << st.size() << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 10 87 239
8 23
325 374
516 540
633 658
728 742
833 839
960 995
99 114
151 232
264 269
321 327
492 984
551 559
587 590
625 637
704 723
750 764


(G.2) Fast Input

7 10 87 239
8 23
325 374
516 540
633 658
728 742
833 839
960 995
99 114
151 232
264 269
321 327
492 540
551 559
587 590
625 637
704 723
750 764


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> mp; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<int> st; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int p, q, l, r, x, y; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> q >> l >> r; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < p; i++) { /* line 8 slow_hit_count: 8, fast_hit_count: 8 */
    cin >> x >> y; /* line 9 slow_hit_count: 7, fast_hit_count: 7 */
    for (int j = x; j <= y; j++) { /* line 10 slow_hit_count: 182, fast_hit_count: 182 */
      mp[j] = 1; /* line 11 slow_hit_count: 175, fast_hit_count: 175 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < q; i++) { /* line 14 slow_hit_count: 11, fast_hit_count: 11 */
    cin >> x >> y; /* line 15 slow_hit_count: 10, fast_hit_count: 10 */
    for (int j = l; j <= r; j++) /* line 16 slow_hit_count: 1540, fast_hit_count: 1540 */
      for (int z = x + j; z <= y + j; z++) /* line 17 slow_hit_count: 103275, fast_hit_count: 35343 */
        if (mp[z]) { /* line 18 slow_hit_count: 101745, fast_hit_count: 33813 */
          st.insert(j); /* line 19 slow_hit_count: 16676, fast_hit_count: 7996 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << st.size() << endl; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, we'll analyze the hit count information and then derive performance-characterizing invariants. The goal is to understand why the program runs slower for the slow input even though the inputs are of similar size and structure.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The slow input and the fast input both have loops iterating over similar ranges (`l` to `r`, and over `p` and `q` intervals).
   - The line with the `for` loop `for (int z = x + j; z <= y + j; z++)` (Line 17) has significantly more hits for the slow input (103,275) compared to the fast input (35,343). This indicates a nested loop or condition within this segment that is disproportionately executed for the slow scenario.
   - The conditional `if (mp[z])` (Line 18) and related line `st.insert(j)` (Line 19) are also more frequently hit during the slow run, suggesting that the condition is often true, leading to frequent insertions into the set `st`.

2. **Inference on Interaction with Data Structures:**
   - The `mp` map is being used to mark certain time intervals that Little Z is online. The nested loop with the condition `if (mp[z])` checks if Little X can also be online at these moments.
   - The loops are likely generating many potential overlaps because of how the `x + j` and `y + j` computations interact with Little Z's schedule.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations above, we can derive the following natural language performance invariants:

1. **Invariant regarding potential overlap range:**
   - "If the range of Little Z's online intervals is wide, and multiple intervals of Little X are checked for each possible wake-up time, the number of potential overlaps tested increases, triggering more iterations in nested loops."
   - This condition is exacerbated when the total number of intervals (`p` or `q`) is large, as it maximizes possible overlaps and increases the processing time for each wake-up time.

2. **Invariant on sequential checks across large time segments:**
   - "When the difference between `l` and `r` is large, many wake-up times are checked, each potentially leading to numerous comparisons with Little Z's intervals, leading to increased execution time."
   - This condition is specifically relevant when each interval of Little X must be checked against a wide range of Little Z's intervals across many wake-up times.

3. **Invariant on the density of time intervals:**
   - "If the intervals for Little Z are densely packed or overlap significantly, the likelihood of intersecting intervals increases, causing the algorithm to perform more checks and insertions."
   - This implies that if `p` intervals of Little Z span a wide but continuous range, the computation for checking overlaps becomes expensive.

The above invariants highlight the conditions under which the program might slow down, without relying on exact values from the slow input but rather on patterns and interactions derived from the problem constraints (e.g., maximum size of intervals or range checking).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

Solution (C++ code):
{solution}


assistant: Let's take the natural language invariants derived in the previous phase and transform them into C++ runtime checks. 

### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets to implement the invariants as runtime checks:

1. **Check for a wide range of Little Z's intervals:**

   The performance bottleneck could occur if Little Z's online intervals cover a large range, especially if the number of intervals is high. This check will ensure that the intervals do not cover a broad range exceeding a predefined threshold.

   ```cpp
   void check_wide_range_invariant(int p, const vector<pair<int, int>>& intervals) {
       int totalRange = 0;
       for (const auto& interval : intervals) {
           totalRange += (interval.second - interval.first + 1);
       }
       if (totalRange > 500) { // Arbitrarily chosen threshold based on the problem constraints
           cerr << "Warning: wide_range_invariant triggered - Little Z's intervals cover a wide range." << endl;
           abort();
       }
   }
   ```

2. **Check for a large difference between `l` and `r`:**

   This check ensures that the range of possible wake-up times for Little X isn't excessively large, resulting in numerous interval checks.

   ```cpp
   void check_large_wake_up_range_invariant(int l, int r) {
       if ((r - l) > 100) { // Arbitrary threshold considering the problem constraints
           cerr << "Warning: large_wake_up_range_invariant triggered - Large range of wake-up times." << endl;
           abort();
       }
   }
   ```

3. **Check for dense or overlapping intervals:**

   If Little Z's intervals are particularly dense or overlapping, the computation for checking overlaps becomes expensive.

   ```cpp
   void check_dense_intervals_invariant(int p, const vector<pair<int, int>>& intervals) {
       for (size_t i = 0; i < intervals.size(); ++i) {
           for (size_t j = i + 1; j < intervals.size(); ++j) {
               if (intervals[i].second >= intervals[j].first) {
                   cerr << "Warning: dense_intervals_invariant triggered - Overlapping intervals detected." << endl;
                   abort();
               }
           }
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Now, let's integrate these checks into the original C++ program. We'll include these checks at strategic points to ensure they do not add significant overhead to the computation.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for wide range invariant
void check_wide_range_invariant(int p, const vector<pair<int, int>>& intervals) {
    int totalRange = 0;
    for (const auto& interval : intervals) {
        totalRange += (interval.second - interval.first + 1);
    }
    if (totalRange > 500) { // Arbitrarily chosen threshold based on the problem constraints
        cerr << "Warning: wide_range_invariant triggered - Little Z's intervals cover a wide range." << endl;
        abort();
    }
}

// Function to check for large wake-up time range invariant
void check_large_wake_up_range_invariant(int l, int r) {
    if ((r - l) > 100) { // Arbitrary threshold considering the problem constraints
        cerr << "Warning: large_wake_up_range_invariant triggered - Large range of wake-up times." << endl;
        abort();
    }
}

// Function to check for dense intervals invariant
void check_dense_intervals_invariant(int p, const vector<pair<int, int>>& intervals) {
    for (size_t i = 0; i < intervals.size(); ++i) {
        for (size_t j = i + 1; j < intervals.size(); ++j) {
            if (intervals[i].second >= intervals[j].first) {
                cerr << "Warning: dense_intervals_invariant triggered - Overlapping intervals detected." << endl;
                abort();
            }
        }
    }
}

int main() {
    int p, q, l, r, x, y;
    cin >> p >> q >> l >> r;

    vector<pair<int, int>> z_intervals(p);
    for (int i = 0; i < p; i++) {
        cin >> x >> y;
        z_intervals[i] = {x, y};
    }

    // Perform invariant checks on Little Z's intervals
    check_wide_range_invariant(p, z_intervals);
    check_dense_intervals_invariant(p, z_intervals);

    // Perform invariant check on the range of wake-up times
    check_large_wake_up_range_invariant(l, r);

    map<int, int> mp;
    set<int> st;
    
    for (const auto& [x, y] : z_intervals) {
        for (int j = x; j <= y; j++) {
            mp[j] = 1;
        }
    }

    for (int i = 0; i < q; i++) {
        cin >> x >> y;
        for (int j = l; j <= r; j++)
            for (int z = x + j; z <= y + j; z++)
                if (mp[z]) {
                    st.insert(j);
                }
    }

    cout << st.size() << endl;
    return 0;
}
```

### Explanation of Integration

- **Wide Range, Dense Intervals Checks:** Implemented as functions and invoked after reading Little Z's intervals.
- **Large Wake-Up Range Check:** Implemented as a function and invoked after reading the wake-up range (`l` and `r`).
- **Placement:** Ensured the checks are outside the main computation loops to avoid performance overhead during each iteration.

