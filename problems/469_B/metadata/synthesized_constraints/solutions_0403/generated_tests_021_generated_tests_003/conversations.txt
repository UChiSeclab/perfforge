system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int p, q, l, r;
  cin >> p >> q >> l >> r;
  set<int> a, b, tmp;
  int t1, t2;
  for (int i = 0; i < p; i++) {
    cin >> t1 >> t2;
    for (; t1 <= t2; t1++) a.insert(t1);
  }
  for (int i = 0; i < q; i++) {
    cin >> t1 >> t2;
    for (; t1 <= t2; t1++) {
      b.insert(t1);
    }
  }
  int ans = 0;
  for (; l <= r; l++) {
    tmp.clear();
    for (set<int>::iterator it = b.begin(); it != b.end(); it++) {
      tmp.insert(*it + l);
    }
    vector<int> c(min(a.size(), tmp.size()));
    vector<int>::iterator it;
    it =
        set_intersection(a.begin(), a.end(), tmp.begin(), tmp.end(), c.begin());
    c.resize(it - c.begin());
    ans += c.size() > 0;
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 10 87 239
8 23
325 374
516 540
633 658
728 742
833 839
960 995
99 114
151 232
264 269
321 327
492 984
551 559
587 590
625 637
704 723
750 764


(G.2) Fast Input

7 10 87 239
8 23
325 374
516 540
633 658
728 742
833 839
960 995
99 114
151 232
264 269
321 327
492 540
551 559
587 590
625 637
704 723
750 764


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int p, q, l, r; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> q >> l >> r; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  set<int> a, b, tmp; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  int t1, t2; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < p; i++) { /* line 8 slow_hit_count: 8, fast_hit_count: 8 */
    cin >> t1 >> t2; /* line 9 slow_hit_count: 7, fast_hit_count: 7 */
    for (; t1 <= t2; t1++) a.insert(t1); /* line 10 slow_hit_count: 182, fast_hit_count: 182 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < q; i++) { /* line 12 slow_hit_count: 11, fast_hit_count: 11 */
    cin >> t1 >> t2; /* line 13 slow_hit_count: 10, fast_hit_count: 10 */
    for (; t1 <= t2; t1++) { /* line 14 slow_hit_count: 675, fast_hit_count: 231 */
      b.insert(t1); /* line 15 slow_hit_count: 665, fast_hit_count: 221 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (; l <= r; l++) { /* line 19 slow_hit_count: 154, fast_hit_count: 154 */
    tmp.clear(); /* line 20 slow_hit_count: 153, fast_hit_count: 153 */
    for (set<int>::iterator it = b.begin(); it != b.end(); it++) { /* line 21 slow_hit_count: 92565, fast_hit_count: 33966 */
      tmp.insert(*it + l); /* line 22 slow_hit_count: 92412, fast_hit_count: 33813 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    vector<int> c(min(a.size(), tmp.size())); /* line 24 slow_hit_count: 153, fast_hit_count: 153 */
    vector<int>::iterator it; /* line 25 slow_hit_count: 153, fast_hit_count: 153 */
    it = /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        set_intersection(a.begin(), a.end(), tmp.begin(), tmp.end(), c.begin()); /* line 27 slow_hit_count: 153, fast_hit_count: 153 */
    c.resize(it - c.begin()); /* line 28 slow_hit_count: 153, fast_hit_count: 153 */
    ans += c.size() > 0; /* line 29 slow_hit_count: 153, fast_hit_count: 153 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slowdown and generate performance-characterizing invariants, let's analyze the provided C program and the hit count information for both the slow and fast inputs.

### Phase 1: Identify expensive or inefficient code segments

1. **Line-level Hit Comparison**:
   - Line 14 and Line 15: `for (; t1 <= t2; t1++) { b.insert(t1); }`
     - **Observation**: These lines have significantly more hits under the slow input (675 vs 231 and 665 vs 221 respectively). This indicates that the range [t1, t2] for schedule `b` is larger in the slow input, leading to more insertions into the set `b`.
   
   - Line 21 and 22: `for (set<int>::iterator it = b.begin(); it != b.end(); it++) { tmp.insert(*it + l); }`
     - **Observation**: These lines also have drastically more hits in the slow run (92565 vs 33966 and 92412 vs 33813 respectively), pointing to a larger set `b` and, consequently, more operations in populating the `tmp` set for each shift `l`.

2. **Interactions and Impact**:
   - The bulk of additional operations in the slow input stems from the nested iteration over the set `b` for each shift `l` and the subsequent insertions into the `tmp` set.
   - The size of `b` directly impacts the number of operations in Line 21 and 22, indicating a strong correlation between the size of `b` and the slow performance.

### Phase 2: Derive performance-characterizing invariants

Based on the analysis, we can derive the following natural language invariants that describe conditions leading to slowdowns:

1. **Invariant 1: Large Schedule Range for `b`**
   - Natural Language Description: "If the combined range of all scheduled intervals for Little Z (set `b`) is large, the number of insertions into the auxiliary set `tmp` increases significantly, leading to slow execution. This is especially true when these operations are repeated for many potential wake-up times of Little X."
   - Code Implementation: 
     ```cpp
     void check_large_b_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: large_b_invariant triggered - excessive operations due to large schedule range for `b`" << endl;
             abort();
         }
     }

     int bSize = b.size();  // Use the number of unique time points in `b` as a proxy for its range
     check_large_b_invariant(bSize > SOME_THRESHOLD);
     ```

2. **Invariant 2: Extensive Time Shifts**
   - Natural Language Description: "If the range [l, r] of possible wake-up times for Little X is large, the iteration over every possible `l` increases significantly, amplifying the cost of operations related to set intersection."
   - Code Implementation: 
     ```cpp
     void check_large_r_l_range_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: large_r_l_range_invariant triggered - many shifts causing excessive set operations" << endl;
             abort();
         }
     }

     int timeRange = r - l;
     check_large_r_l_range_invariant(timeRange > ANOTHER_THRESHOLD);
     ```

### Important Considerations

- The thresholds `SOME_THRESHOLD` and `ANOTHER_THRESHOLD` should be set based on empirical testing or theoretical limits, considering the constraints (e.g., maximum size of `b` or the number of shifts given `l` and `r`).
- The checks should be placed outside the critical loops to avoid adding overhead.
- Focus on general patterns (e.g., large ranges or repetitive operations) rather than specific values from the inputs. 

These invariants help capture scenarios where the program’s performance degrades due to the input characteristics, particularly the size of schedule ranges and the number of time shifts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little X and Little Z are good friends. They always chat online. But both of them have schedules.

Little Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).

If at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?

Input

The first line contains four space-separated integers p, q, l, r (1 ≤ p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).

Each of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).

It's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.

Output

Output a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.

Examples

Input

1 1 0 4
2 3
0 1


Output

3


Input

2 3 0 20
15 17
23 26
1 4
7 11
15 17


Output

20

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as runtime checks in C++ and integrate them into the original program. We'll do this in two phases as described.

### Phase 3: Implementing the Invariants as C++ Checkers

1. **Invariant 1: Large Schedule Range for `b`**
   - Checker Code:
     ```cpp
     void check_large_b_invariant(const std::set<int>& b) {
         int threshold = 500; // Arbitrary threshold for demonstration
         if (b.size() > threshold) {
             cerr << "Warning: large_b_invariant triggered - excessive operations due to large schedule range for `b`" << endl;
             abort();
         }
     }
     ```

2. **Invariant 2: Extensive Time Shifts**
   - Checker Code:
     ```cpp
     void check_large_r_l_range_invariant(int l, int r) {
         int threshold = 300; // Arbitrary threshold for demonstration
         if ((r - l) > threshold) {
             cerr << "Warning: large_r_l_range_invariant triggered - many shifts causing excessive set operations" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrating the Checkers into the Original Program

We'll integrate these checks into the original C++ program. The checks will be placed at strategic points to minimize overhead, such as after data initialization and before the main computation loop.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_b_invariant(const std::set<int>& b) {
    int threshold = 500; // Arbitrary threshold for demonstration
    if (b.size() > threshold) {
        cerr << "Warning: large_b_invariant triggered - excessive operations due to large schedule range for `b`" << endl;
        abort();
    }
}

void check_large_r_l_range_invariant(int l, int r) {
    int threshold = 300; // Arbitrary threshold for demonstration
    if ((r - l) > threshold) {
        cerr << "Warning: large_r_l_range_invariant triggered - many shifts causing excessive set operations" << endl;
        abort();
    }
}

int main() {
    int p, q, l, r;
    cin >> p >> q >> l >> r;
    set<int> a, b, tmp;
    int t1, t2;
    
    for (int i = 0; i < p; i++) {
        cin >> t1 >> t2;
        for (; t1 <= t2; t1++) a.insert(t1);
    }
    
    for (int i = 0; i < q; i++) {
        cin >> t1 >> t2;
        for (; t1 <= t2; t1++) {
            b.insert(t1);
        }
    }
    
    // Run the invariants after data setup
    check_large_b_invariant(b); // Check condition for large schedule range for `b`
    check_large_r_l_range_invariant(l, r); // Check condition for extensive time shifts
    
    int ans = 0;
    for (; l <= r; l++) {
        tmp.clear();
        for (set<int>::iterator it = b.begin(); it != b.end(); it++) {
            tmp.insert(*it + l);
        }
        vector<int> c(min(a.size(), tmp.size()));
        vector<int>::iterator it;
        it = set_intersection(a.begin(), a.end(), tmp.begin(), tmp.end(), c.begin());
        c.resize(it - c.begin());
        ans += c.size() > 0;
    }
    cout << ans << "\n";
    return 0;
}
```

### Explanation of Integration

- **Placement of Checkers**: The check for the large schedule range of `b` is placed after the set `b` is fully populated. The check for the extensive time shifts is placed after reading `l` and `r`. This ensures that we evaluate the conditions with the final data and do not add unnecessary checks inside performance-critical loops.
- **Thresholds**: I've set arbitrary thresholds for demonstration purposes. In practice, these should be determined by performance testing and analysis specific to the problem constraints and environment.

