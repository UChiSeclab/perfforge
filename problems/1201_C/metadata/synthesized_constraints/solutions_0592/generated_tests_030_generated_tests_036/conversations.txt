system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, a[200004], m, i;
int main() {
  cin >> n >> k;
  m = n / 2;
  for (long long i = 0; i < n; i++) cin >> a[i];
  sort(a, a + n);
  for (i = a[m]; k > 0; i++) {
    while (i == a[m + 1]) m++;
    k -= m - n / 2 + 1;
  }
  if (k == 0)
    cout << i << endl;
  else
    cout << i - 1 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

23 691688417
162011045 845692742 774584765 103906675 222286673 251540072 657857114 30856336 71306611 790640347 835976636 327687572 468471193 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(G.2) Fast Input

23 290352079
162011045 845692742 774584765 103906675 222286673 251540072 657857114 30856336 71306611 790640347 835976636 327687572 468471193 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, a[200004], m, i; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  m = n / 2; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) cin >> a[i]; /* line 7 slow_hit_count: 24, fast_hit_count: 24 */
  sort(a, a + n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = a[m]; k > 0; i++) { /* line 9 slow_hit_count: 290113174, fast_hit_count: 156334394 */
    while (i == a[m + 1]) m++; /* line 10 slow_hit_count: 290113175, fast_hit_count: 156334395 */
    k -= m - n / 2 + 1; /* line 11 slow_hit_count: 290113173, fast_hit_count: 156334393 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    cout << i << endl; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    cout << i - 1 << endl; /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - **Line 9**: `for (i = a[m]; k > 0; i++)`  
     - **Slow Input Hit Count**: 290,113,174
     - **Fast Input Hit Count**: 156,334,394
     - This line is part of the loop that iteratively increases `i` and decreases `k`. It gets significantly more hits for the slow input.
   
   - **Line 10**: `while (i == a[m + 1]) m++`
     - **Slow Input Hit Count**: 290,113,175
     - **Fast Input Hit Count**: 156,334,395
     - This line increments `m` if multiple elements in `a` match the current `i`. The high hit count suggests frequent matches or a large group to iterate over.
   
   - **Line 11**: `k -= m - n / 2 + 1`
     - **Slow Input Hit Count**: 290,113,173
     - **Fast Input Hit Count**: 156,334,393
     - This line accounts for the reduction in `k` based on the number of elements that have been adjusted. The large number of iterations indicates that `k` is reduced slowly per iteration.

2. **Inference**:
   - The loop starting at line 9 iterates over integers and continues while `k` is greater than 0, adjusting `k` and `i`. A slow decrease in `k` per iteration might indicate minimal adjustments to achieve the maximum median, leading to a large number of iterations.
   - The while-loop on line 10 is frequently hit, suggesting the presence of many consecutive elements with the same value as `i`, thus incrementing `m` several times.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Natural Language Invariants**:
   - **Invariant 1**: "When a large number of elements in the array are clustered around the initial median, each incremental increase to the median element results in minimal improvement, causing the loop to perform many operations."
     - The condition is characterized by the clustering of elements near the median position, leading to a slow decrease in `k` as we attempt to raise the median value.
   
   - **Invariant 2**: "If multiple elements equal the value of the current median, causing the while-loop to execute many times, the computation may become inefficient, as this results in incrementally adjusting the median across many similar elements."
     - This condition is triggered by a large segment of the array having values around the median value, forcing multiple adjustments.

2. **Thresholds and Triggers**:
   - These invariants are not directly tied to the maximum value of `n` (which is 200,000), but rather to the distribution of values within the array and how they interact with the operations allowed (`k`), which can be up to 10^9.
   - The inefficiencies are less about hitting the bounds of `n` and more about the relationship between `k` and the array's sorted structure causing repeated minimal-impact operations.

3. **Application to Fuzzers**:
   - These conditions suggest scenarios where performance might degrade due to specific input patterns, such as large clusters around the median value or a high number of operations (`k`) relative to the sparse increase in median.

The above invariants help detect potential performance bottlenecks by understanding how specific data distributions and allowed operations could lead to inefficiencies in the current algorithm implementation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets that check the performance-characterizing invariants identified earlier:

#### Invariant 1: Large Cluster Near Initial Median
```cpp
void check_cluster_invariant(int k, int m, int n, int a[]) {
    int threshold = 1000;  // Arbitrary threshold for demonstration
    int cluster_count = 0;
    for (int j = m; j < n; ++j) {
        if (a[j] == a[m]) cluster_count++;
        else break;
    }
    if (cluster_count > threshold) {
        cerr << "Warning: Cluster near median too large, performance bottleneck!" << endl;
        abort();
    }
}
```

#### Invariant 2: Excessive While-Loop Execution
```cpp
void check_while_loop_invariant(int while_hits, int limit) {
    if (while_hits > limit) {
        cerr << "Warning: Excessive while-loop iterations, performance bottleneck!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

We will now integrate these checks into the C++ program while ensuring minimal impact on the performance by placing them outside of the main loop:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k, a[200004], m, i;

// Check for large cluster near the initial median
void check_cluster_invariant(int m, int n, int a[]) {
    int threshold = 1000;  // Arbitrary threshold for demonstration
    int cluster_count = 0;
    for (int j = m; j < n; ++j) {
        if (a[j] == a[m]) cluster_count++;
        else break;
    }
    if (cluster_count > threshold) {
        cerr << "Warning: Cluster near median too large, performance bottleneck!" << endl;
        abort();
    }
}

// Check excessive while-loop execution
void check_while_loop_invariant(int while_hits, int limit) {
    if (while_hits > limit) {
        cerr << "Warning: Excessive while-loop iterations, performance bottleneck!" << endl;
        abort();
    }
}

int main() {
  cin >> n >> k;
  m = n / 2;
  for (long long i = 0; i < n; i++) cin >> a[i];
  sort(a, a + n);

  // Integrating the cluster invariant check after sorting
  check_cluster_invariant(m, n, a);

  int while_hits = 0;  // Counter for while-loop iterations
  for (i = a[m]; k > 0; i++) {
    while (i == a[m + 1]) {
      m++;
      while_hits++;
    }
    k -= m - n / 2 + 1;
  }

  // Integrating the while-loop invariant check
  check_while_loop_invariant(while_hits, 1000000);  // Threshold for demonstration

  if (k == 0)
    cout << i << endl;
  else
    cout << i - 1 << endl;
}
```

### Comments on Placement:
- **Cluster Check**: Placed right after sorting, it checks for clusters around the median that might cause inefficient use of the allowed operations.
- **While-Loop Check**: Monitors how often the while-loop executes. Once the program execution is complete, we check if it exceeds a particular threshold, indicating possible inefficiencies.

This implementation ensures that the checks are meaningful and apply to the scenarios under which the original problem can slow down, providing insights into potential performance bottlenecks.

