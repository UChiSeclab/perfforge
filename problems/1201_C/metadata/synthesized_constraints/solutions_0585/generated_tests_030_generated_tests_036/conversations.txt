system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k, a;
  cin >> n >> k;
  vector<int> g;
  for (int i = 0; i < n; i++) {
    cin >> a;
    g.push_back(a);
  }
  sort(g.begin(), g.end());
  for (int j = 0; j < (n + 1) / 2; j++) {
    if (j == (n + 1) / 2 - 1) {
      while (k >= j + 1) {
        k -= (j + 1);
        g[((n - 1) / 2)]++;
      }
    } else {
      while (k >= (j + 1) && g[((n - 1) / 2) + j] < g[((n - 1) / 2) + j + 1]) {
        g[((n - 1) / 2)]++;
        if (j) {
          g[((n - 1) / 2) + j]++;
        }
        k -= (j + 1);
      }
    }
  }
  cout << g[((n - 1) / 2)];
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

23 691688417
162011045 845692742 774584765 103906675 222286673 251540072 657857114 30856336 71306611 790640347 835976636 327687572 468471193 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(G.2) Fast Input

23 290352079
162011045 845692742 774584765 103906675 222286673 251540072 657857114 30856336 71306611 790640347 835976636 327687572 468471193 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k, a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> g; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 24, fast_hit_count: 24 */
    cin >> a; /* line 8 slow_hit_count: 23, fast_hit_count: 23 */
    g.push_back(a); /* line 9 slow_hit_count: 23, fast_hit_count: 23 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  sort(g.begin(), g.end()); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < (n + 1) / 2; j++) { /* line 12 slow_hit_count: 13, fast_hit_count: 13 */
    if (j == (n + 1) / 2 - 1) { /* line 13 slow_hit_count: 12, fast_hit_count: 12 */
      while (k >= j + 1) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
        k -= (j + 1); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
        g[((n - 1) / 2)]++; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      while (k >= (j + 1) && g[((n - 1) / 2) + j] < g[((n - 1) / 2) + j + 1]) { /* line 19 slow_hit_count: 290113183, fast_hit_count: 156334404 */
        g[((n - 1) / 2)]++; /* line 20 slow_hit_count: 290113172, fast_hit_count: 156334393 */
        if (j) { /* line 21 slow_hit_count: 290113172, fast_hit_count: 156334393 */
          g[((n - 1) / 2) + j]++; /* line 22 slow_hit_count: 238043303, fast_hit_count: 104264524 */
        } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        k -= (j + 1); /* line 24 slow_hit_count: 290113172, fast_hit_count: 156334393 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << g[((n - 1) / 2)]; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts, there are specific lines that exhibit a significant disparity in hits between the slow and fast inputs:

1. **Line 19**: The `while` loop condition `k >= (j + 1) && g[((n - 1) / 2) + j] < g[((n - 1) / 2) + j + 1]` has an extremely high hit count for both the slow and fast inputs, but with the slow input having vastly more hits.
2. **Line 20**: Incrementing the median element `g[((n - 1) / 2)]++` shows a high number of executions, reflecting the number of times this operation is performed.
3. **Line 22**: Increments of `g[((n - 1) / 2) + j]++` occur frequently when `j` is not zero, contributing to the high hit count.

The bottleneck seems to be related to the repeated execution of the `while` loop, which is dependent on the value of `k` and the differences between consecutive elements in the sorted array.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language invariants that characterize performance slowdowns:

1. **Repeated Increment Operations**:
   - **Invariant**: "If the number of operations `k` is much larger than the number of elements `n`, and there is a substantial difference between consecutive elements in the middle of the sorted array, the program may repeatedly increment elements, causing a slowdown."
   - **Explanation**: This invariant captures the condition where high `k` relative to `n` allows for many operations to be performed, especially when there is a significant gap between elements around the median, requiring many increments to reach the next element's value.

2. **Large Operational Budget Relative to Element Gaps**:
   - **Invariant**: "When the operational budget `k` allows for multiple adjustments beyond small differences between adjacent elements near the median, the execution path may become prolonged."
   - **Explanation**: This details how a large `k` compared to small gaps can lead to excessive operations since the loop attempts to equalize elements up to the next larger element, exhausting operations.

3. **Costly Element Updates in a Loop**:
   - **Invariant**: "If the median's vicinity involves multiple elements needing frequent updates due to small incremental value differences, the execution time can increase significantly."
   - **Explanation**: Focuses on the impact of having many elements near the median with small incremental differences, causing the loop to run many iterations.

These invariants suggest that the essential factor in performance degradation is the relationship between the operational budget `k`, the number of elements `n`, and the differences between consecutive elements around the median of the sorted array. These conditions lead to repeated iterations and updates, significantly impacting performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Performance-Characterizing Invariants

Here are the runtime checks for the performance-characterizing invariants derived earlier:

#### Invariant 1: Repeated Increment Operations
```cpp
void check_repeated_increment_operations(int k, int n, const std::vector<int>& g) {
    int median_index = (n - 1) / 2;
    if (k > n * (g[median_index + 1] - g[median_index])) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated increment operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Operational Budget Relative to Element Gaps
```cpp
void check_large_operational_budget(int k, int n, const std::vector<int>& g) {
    int median_index = (n - 1) / 2;
    int max_gap = 0;
    for (int j = 0; j < n / 2; ++j) {
        max_gap = max(max_gap, g[median_index + j + 1] - g[median_index + j]);
    }
    if (k > n * max_gap) {
        cerr << "Warning: Performance bottleneck condition triggered - large operational budget relative to element gaps!" << endl;
        abort();
    }
}
```

#### Invariant 3: Costly Element Updates in a Loop
```cpp
void check_costly_element_updates(int k, int n, const std::vector<int>& g) {
    int median_index = (n - 1) / 2;
    int nearby_updates = 0;
    for (int j = 0; j < n / 2; ++j) {
        nearby_updates += g[median_index + j + 1] - g[median_index + j] <= 1;
    }
    if (k > n && nearby_updates > n / 4) {
        cerr << "Warning: Performance bottleneck condition triggered - costly element updates in a loop!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the instrumented C++ code, including the runtime checks for performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check repeated increment operations
void check_repeated_increment_operations(int k, int n, const vector<int>& g) {
    int median_index = (n - 1) / 2;
    if (k > n * (g[median_index + 1] - g[median_index])) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated increment operations!" << endl;
        abort();
    }
}

// Function to check large operational budget relative to element gaps
void check_large_operational_budget(int k, int n, const vector<int>& g) {
    int median_index = (n - 1) / 2;
    int max_gap = 0;
    for (int j = 0; j < n / 2; ++j) {
        max_gap = max(max_gap, g[median_index + j + 1] - g[median_index + j]);
    }
    if (k > n * max_gap) {
        cerr << "Warning: Performance bottleneck condition triggered - large operational budget relative to element gaps!" << endl;
        abort();
    }
}

// Function to check costly element updates in a loop
void check_costly_element_updates(int k, int n, const vector<int>& g) {
    int median_index = (n - 1) / 2;
    int nearby_updates = 0;
    for (int j = 0; j < n / 2; ++j) {
        nearby_updates += g[median_index + j + 1] - g[median_index + j] <= 1;
    }
    if (k > n && nearby_updates > n / 4) {
        cerr << "Warning: Performance bottleneck condition triggered - costly element updates in a loop!" << endl;
        abort();
    }
}

int main() {
    int n, k, a;
    cin >> n >> k;
    vector<int> g;
    for (int i = 0; i < n; i++) {
        cin >> a;
        g.push_back(a);
    }
    sort(g.begin(), g.end());

    // Insert checks after sorting
    check_repeated_increment_operations(k, n, g);
    check_large_operational_budget(k, n, g);
    check_costly_element_updates(k, n, g);

    for (int j = 0; j < (n + 1) / 2; j++) {
        if (j == (n + 1) / 2 - 1) {
            while (k >= j + 1) {
                k -= (j + 1);
                g[((n - 1) / 2)]++;
            }
        } else {
            while (k >= (j + 1) && g[((n - 1) / 2) + j] < g[((n - 1) / 2) + j + 1]) {
                g[((n - 1) / 2)]++;
                if (j) {
                    g[((n - 1) / 2) + j]++;
                }
                k -= (j + 1);
            }
        }
    }
    cout << g[((n - 1) / 2)];
    return 0;
}
```

### Explanation

- **Checker Functions**: The functions `check_repeated_increment_operations`, `check_large_operational_budget`, and `check_costly_element_updates` are defined to encapsulate the logic of each performance-checking condition.
- **Integration**: These checkers are called right after sorting the array, i.e., before entering the main loop execution, ensuring that they evaluate the conditions efficiently without adding overhead inside tight loops.
- **Effectiveness**: By placing the checks before the loop execution, we maintain the efficiency of the code while guarding against performance issues that might arise with pathological input scenarios.

