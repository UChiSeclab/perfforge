system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[200005];
long long sum[200005];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n, k;
  cin >> n >> k;
  for (int i = 1; i <= n; i++) cin >> a[i];
  sort(a + 1, a + n + 1);
  for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i];
  int ans = a[n / 2 + 1];
  int pos = n / 2 + 2, cnt = 1;
  while (pos <= n && a[pos] == a[pos - 1]) {
    ++pos;
    ++cnt;
  }
  while (k >= cnt) {
    k -= cnt;
    ++ans;
    if (pos <= n && ans == a[pos]) {
      ++cnt;
      ++pos;
    }
    if (pos > n) {
      ans += k / cnt;
      break;
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

23 691688417
162011045 845692742 774584765 103906675 222286673 251540072 657857114 30856336 71306611 790640347 835976636 327687572 570766082 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(G.2) Fast Input

23 290352079
162011045 845692742 774584765 103906675 222286673 251540072 1067675108 30856336 71306611 790640347 835976636 327687572 387722548 48938195 769656348 341889962 393959831 928029640 320443541 248114937 798473713 159552755 814528707


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[200005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long sum[200005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i]; /* line 11 slow_hit_count: 24, fast_hit_count: 24 */
  sort(a + 1, a + n + 1); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i]; /* line 13 slow_hit_count: 24, fast_hit_count: 24 */
  int ans = a[n / 2 + 1]; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int pos = n / 2 + 2, cnt = 1; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  while (pos <= n && a[pos] == a[pos - 1]) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    ++pos; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    ++cnt; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  while (k >= cnt) { /* line 20 slow_hit_count: 322150390, fast_hit_count: 129418179 */
    k -= cnt; /* line 21 slow_hit_count: 322150389, fast_hit_count: 129418178 */
    ++ans; /* line 22 slow_hit_count: 322150389, fast_hit_count: 129418178 */
    if (pos <= n && ans == a[pos]) { /* line 23 slow_hit_count: 322150389, fast_hit_count: 129418178 */
      ++cnt; /* line 24 slow_hit_count: 3, fast_hit_count: 2 */
      ++pos; /* line 25 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (pos > n) { /* line 27 slow_hit_count: 322150389, fast_hit_count: 129418178 */
      ans += k / cnt; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the provided C program and derive performance-characterizing invariants, let's go through the steps outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The most significant difference in hit counts between the slow and fast runs is observed in the loop starting at line 20. The slow input has 322,150,390 hits, while the fast input has 129,418,179 hits. This stark difference suggests that this loop is the primary culprit for the slowdown.

2. **Pinpoint Lines with More Hits:**
   - Lines 20 through 23 within the loop have significantly more hits in the slow run compared to the fast run. This loop is likely responsible for the bulk of the additional execution time in the slow case.

3. **Infer Interactions:**
   - The loop repeatedly increments the `ans` variable until the remaining operations `k` are exhausted. The expensive nature of this loop suggests that for certain inputs, the number of operations required to maximize the median causes the loop to iterate many more times, leading to performance degradation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language performance-characterizing invariants:

1. **Invariant: Number of Increment Operations**

   - **Description:** "The loop will be significantly slower if the number of operations `k` is large relative to the difference between the initial median and higher values in the array. Specifically, when `k` is large enough to allow multiple elements to potentially become the new median, the loop must iterate many times, causing a slowdown."

2. **Invariant: High Initial Median and Element Parity**

   - **Description:** "If the array elements around the initial median are already equal or close in value, and `k` is large, the algorithm will need to perform many small increments to change the median, leading to increased loop iterations and slower performance."

3. **Invariant: Element Clustering Effect**

   - **Description:** "When there is a cluster of elements at the end of the sorted array that matches the initial median, the loop will quickly increase the median without much iteration. Conversely, if these elements are spaced, the loop will require more iterations to reach a higher median, slowing performance."

By understanding these conditions, a developer or fuzzer can identify potential slow execution scenarios and optimize or test accordingly. These invariants abstractly describe the relationship between the input values and the loop's performance characteristics without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array a of n integers, where n is odd. You can make the following operation with it:

  * Choose one of the elements of the array (for example a_i) and increase it by 1 (that is, replace it with a_i + 1). 



You want to make the median of the array the largest possible using at most k operations.

The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array [1, 5, 2, 3, 5] is 3.

Input

The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).

Output

Print a single integer — the maximum possible median after the operations.

Examples

Input


3 2
1 3 5


Output


5

Input


5 5
1 2 1 1 1


Output


3

Input


7 7
4 1 2 4 3 4 4


Output


5

Note

In the first example, you can increase the second element twice. Than array will be [1, 5, 5] and it's median is 5.

In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3.

In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [5, 1, 2, 5, 3, 5, 5] and the median will be 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Here are the C++ checker functions for each invariant derived in Phase 2:

1. **Invariant: Number of Increment Operations**

   - **Checker Code:**

     ```cpp
     void check_large_k_invariant(int k, int initialMedian, int maxElement) {
         if (k > (maxElement - initialMedian) * 1000) { // Arbitrary multiplier for sensitivity
             cerr << "Warning: Performance bottleneck condition triggered - large k relative to element differences!" << endl;
             abort();
         }
     }
     ```

2. **Invariant: High Initial Median and Element Parity**

   - **Checker Code:**

     ```cpp
     void check_element_closeness_invariant(int a[], int n) {
         int medianIndex = n / 2 + 1;
         int countClose = 0;
         for (int i = medianIndex; i < n; ++i) {
             if (a[i] - a[i - 1] <= 2) // Assume 'close' is within 2 units
                 ++countClose;
         }
         if (countClose > n / 4) { // If more than a quarter are close
             cerr << "Warning: Performance bottleneck condition triggered - too many close elements!" << endl;
             abort();
         }
     }
     ```

3. **Invariant: Element Clustering Effect**

   - **Checker Code:**

     ```cpp
     void check_element_clustering_invariant(int a[], int n, int initialMedian) {
         int clusterCount = 0;
         for (int i = n / 2 + 1; i <= n; ++i) {
             if (a[i] == initialMedian)
                 ++clusterCount;
         }
         if (clusterCount < n / 10) { // Less than 10% elements clustering around initial median
             cerr << "Warning: Performance bottleneck condition triggered - low clustering!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrate Checkers into Original Program

Now, integrate these checkers into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[200005];
long long sum[200005];

void check_large_k_invariant(int k, int initialMedian, int maxElement) {
    if (k > (maxElement - initialMedian) * 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - large k relative to element differences!" << endl;
        abort();
    }
}

void check_element_closeness_invariant(int a[], int n) {
    int medianIndex = n / 2 + 1;
    int countClose = 0;
    for (int i = medianIndex; i < n; ++i) {
        if (a[i] - a[i - 1] <= 2)
            ++countClose;
    }
    if (countClose > n / 4) {
        cerr << "Warning: Performance bottleneck condition triggered - too many close elements!" << endl;
        abort();
    }
}

void check_element_clustering_invariant(int a[], int n, int initialMedian) {
    int clusterCount = 0;
    for (int i = n / 2 + 1; i

