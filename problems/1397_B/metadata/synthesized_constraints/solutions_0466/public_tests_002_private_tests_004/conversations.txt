system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long arr[100010];
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  int t = 1;
  while (t--) {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) cin >> arr[i];
    sort(arr, arr + n);
    int x = 14;
    if (x % (n - 1))
      x = x / (n - 1) + 1;
    else
      x = x / (n - 1);
    int range = 1;
    for (int i = 0; i < x; i++) range = range * 10;
    long long res = 1e18;
    for (int c = 1; c <= range; c++) {
      long long val = 1;
      long long tmp = 0;
      bool flag = true;
      for (int j = 0; j < n; j++) {
        if (val > 1e16 || val < 0 || tmp > 1e16 || tmp < 0) {
          flag = false;
          break;
        }
        if (arr[j] != val) tmp += abs(val - arr[j]);
        val = val * c;
      }
      if (flag) res = min(res, tmp);
    }
    cout << res << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1000000000 1000000000 1000000000


(G.2) Fast Input

16
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long arr[100010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int t = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    int n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) cin >> arr[i]; /* line 13 slow_hit_count: 4, fast_hit_count: 17 */
    sort(arr, arr + n); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    int x = 14; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    if (x % (n - 1)) /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
      x = x / (n - 1) + 1; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      x = x / (n - 1); /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
    int range = 1; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < x; i++) range = range * 10; /* line 21 slow_hit_count: 8, fast_hit_count: 2 */
    long long res = 1e18; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    for (int c = 1; c <= range; c++) { /* line 23 slow_hit_count: 10000001, fast_hit_count: 11 */
      long long val = 1; /* line 24 slow_hit_count: 10000000, fast_hit_count: 10 */
      long long tmp = 0; /* line 25 slow_hit_count: 10000000, fast_hit_count: 10 */
      bool flag = true; /* line 26 slow_hit_count: 10000000, fast_hit_count: 10 */
      for (int j = 0; j < n; j++) { /* line 27 slow_hit_count: 40000000, fast_hit_count: 170 */
        if (val > 1e16 || val < 0 || tmp > 1e16 || tmp < 0) { /* line 28 slow_hit_count: 30000000, fast_hit_count: 160 */
          flag = false; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        if (arr[j] != val) tmp += abs(val - arr[j]); /* line 32 slow_hit_count: 30000000, fast_hit_count: 160 */
        val = val * c; /* line 33 slow_hit_count: 30000000, fast_hit_count: 160 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      if (flag) res = min(res, tmp); /* line 35 slow_hit_count: 10000000, fast_hit_count: 10 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << "\n"; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon reviewing the hit count data and the program logic, we can identify the following key observations:

1. **Loop Iteration Over `range` (Line 23):** 
   - The outer loop `for (int c = 1; c <= range; c++)` is hit 10,000,001 times in the slow input compared to only 11 times in the fast input. 
   - The value of `range` is substantially larger for the slow input (10^8) than for the fast input (10^1), leading to significantly more iterations.

2. **Nested Loop Over `n` (Line 27):**
   - The inner loop `for (int j = 0; j < n; j++)` is executed 40,000,000 times in the slow input compared to 170 times in the fast input. 
   - This discrepancy indicates a high cost associated with repeated operations due to the product of `n` and `range`.

3. **Potential Overflow Check (Lines 28 and 32):**
   - The condition `if (val > 1e16 || val < 0 || tmp > 1e16 || tmp < 0)` is frequently evaluated, though it does not result in stopping the loop during the slow run. This check is likely used to prevent overflow but could lead to unnecessary computation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **High Iteration Count in `range`:**
   - **Natural Language Description:** "When the calculated `range` becomes excessively large due to small values of `(n - 1)`, the program executes significantly more iterations, slowing down the execution."
   - **Abstract Condition:** This condition is triggered when `range` is much larger than `n`, leading to a potentially high number of iterations in the loop, especially when `n` is small.

2. **Nested Loop Complexity:**
   - **Natural Language Description:** "If the product of `n` and the `range` is very high, the nested loop operation becomes computationally expensive, resulting in a slowdown."
   - **Abstract Condition:** The interaction between `n` and `range` leads to a multiplication effect in loop iterations, causing a slowdown when the combination is large.

3. **Potential Overflow and Large Values:**
   - **Natural Language Description:** "When `c` powers grow rapidly, reaching close to overflow thresholds, the processing of large numbers can introduce inefficiencies in computation."
   - **Abstract Condition:** This is more likely when `c` is large, leading to `val` or `tmp` nearing overflow limits, adding overhead for checks and calculations.

### Summary

The primary reason for the slowdown with the slow input is the excessively large `range` calculated due to the choice of `n`, combined with the nested loop structure that compounds the number of operations. These conditions are exacerbated when the potential for large number handling and overflow checks add additional computational overhead.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checker Code in C++

Based on the previously derived invariants, we can implement the following runtime checks:

1. **High Iteration Count in `range`:**
   ```cpp
   void check_range_invariant(int range, int n) {
       if (range > n * 100) { // Arbitrary factor for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - excessive range!" << endl;
           abort();
       }
   }
   ```

2. **Nested Loop Complexity:**
   ```cpp
   void check_nested_loop_invariant(int range, int n) {
       if (static_cast<long long>(range) * n > 1000000) { // Example threshold
           cerr << "Warning: Performance bottleneck condition triggered - high nested loop complexity!" << endl;
           abort();
       }
   }
   ```

3. **Potential Overflow and Large Values in Exponentiation:**
   ```cpp
   void check_overflow_invariant(long long val, int c) {
       if (val > 1e16) {
           cerr << "Warning: Performance bottleneck condition triggered - potential overflow in multiplication!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original C++ Program

Now, let's integrate these runtime checks into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long arr[100010];

// Checker functions
void check_range_invariant(int range, int n) {
    if (range > n * 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive range!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int range, int n) {
    if (static_cast<long long>(range) * n > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high nested loop complexity!" << endl;
        abort();
    }
}

void check_overflow_invariant(long long val, int c) {
    if (val > 1e16) {
        cerr << "Warning: Performance bottleneck condition triggered - potential overflow in multiplication!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int t = 1;
    while (t--) {
        int n;
        cin >> n;
        for (int i = 0; i < n; i++) cin >> arr[i];
        sort(arr, arr + n);

        int x = 14;
        if (x % (n - 1))
            x = x / (n - 1) + 1;
        else
            x = x / (n - 1);
        
        int range = 1;
        for (int i = 0; i < x; i++) range = range * 10;

        // Check performance bottlenecks after computing range
        check_range_invariant(range, n);
        check_nested_loop_invariant(range, n);

        long long res = 1e18;
        for (int c = 1; c <= range; c++) {
            long long val = 1;
            long long tmp = 0;
            bool flag = true;
            for (int j = 0; j < n; j++) {
                // Check for potential overflow during computation
                check_overflow_invariant(val, c);

                if (val > 1e16 || val < 0 || tmp > 1e16 || tmp < 0) {
                    flag = false;
                    break;
                }
                if (arr[j] != val) tmp += abs(val - arr[j]);
                val = val * c;
            }
            if (flag) res = min(res, tmp);
        }
        cout << res << "\n";
    }
    return 0;
}
```

**Explanation of Integration:**

- **After `range` Calculation:** The invariants for `range` and nested loops are checked right after computing `range` to avoid unnecessary calculations if a problem is detected.
- **Inside Nested Loop:** The overflow check is placed where `val` is calculated and potentially exceeds the specified limits, ensuring that potential overflow issues are caught early.

