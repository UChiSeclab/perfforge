system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void fast_io() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
}
void solve() {
  int n;
  cin >> n;
  long long a[n];
  for (int i = 0; i < n; i++) cin >> a[i];
  sort(a, a + n);
  long long c = 1, minCost = 1e17, f = 0, ans;
  while (pow(c, n - 1) < 1e13) {
    long long cost = 0;
    for (int i = 0; i < n; i++) {
      cost += abs(a[i] - pow(c, i));
    }
    minCost = min(minCost, cost);
    c++;
  }
  cout << minCost << "\n";
}
int main() {
  fast_io();
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1000000000 1000000000 1000000000


(G.2) Fast Input

16
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void fast_io() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
void solve() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  long long a[n]; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> a[i]; /* line 12 slow_hit_count: 4, fast_hit_count: 17 */
  sort(a, a + n); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  long long c = 1, minCost = 1e17, f = 0, ans; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  while (pow(c, n - 1) < 1e13) { /* line 15 slow_hit_count: 3162278, fast_hit_count: 8 */
    long long cost = 0; /* line 16 slow_hit_count: 3162277, fast_hit_count: 7 */
    for (int i = 0; i < n; i++) { /* line 17 slow_hit_count: 12649108, fast_hit_count: 119 */
      cost += abs(a[i] - pow(c, i)); /* line 18 slow_hit_count: 9486831, fast_hit_count: 112 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    minCost = min(minCost, cost); /* line 20 slow_hit_count: 3162277, fast_hit_count: 7 */
    c++; /* line 21 slow_hit_count: 3162277, fast_hit_count: 7 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << minCost << "\n"; /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  fast_io(); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Based on the provided hit count data, the following observations can be made:

1. **Line 15 (`while (pow(c, n - 1) < 1e13)`)**: This line is hit significantly more often in the slow input (3,162,278 times) compared to the fast input (8 times). This indicates that the loop iterates many more times for the slow input.

2. **Line 17 (`for (int i = 0; i < n; i++)`)**: The inner loop is executed 12,649,108 times for the slow input compared to 119 times for the fast input. This shows that the cost computation occurs many times.

3. **Line 18 (`cost += abs(a[i] - pow(c, i));`)**: This line is also executed significantly more often for the slow input (9,486,831 times) than for the fast input (112 times), suggesting that the computation of the cost is the major bottleneck.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the observations from Phase 1, the following natural language invariants can be derived:

1. **Invariant #1: High Iteration Count in the Main Loop**
   - **Natural Language Description**: "If the initial elements of the list are large, the main loop iterating over potential power sequence bases (`c`) can run excessively often, leading to performance degradation. This is particularly evident when the base raised to the power of `n-1` does not quickly exceed a large threshold."
   - **Explanation**: When the elements of `a` are large, it takes more iterations for `pow(c, n-1)` to reach the stopping condition (`1e13`), leading to a large number of loop executions.

2. **Invariant #2: Cost Calculation for Large Numbers**
   - **Natural Language Description**: "If the elements of the list are large and close to each other, particularly near the limits of their range, the cost calculation within the nested loop can become expensive, as small differences require large adjustments to match a power sequence."
   - **Explanation**: Large `a[i]` values mean that each adjustment to align with `c^i` can have a significant cost, especially when the values are initially similar and large, emphasizing the calculation within the inner loop.

3. **Invariant #3: Large `a[i]` with Small `n`**
   - **Natural Language Description**: "When the list size `n` is relatively small, but the elements are large, the cost computation for converting to a power sequence involves many calculations for each potential base `c`, increasing the total computational load."
   - **Explanation**: A small `n` combined with large `a[i]` values increases the number of potential power sequences that are attempted before finding the one with minimal cost, resulting in high total iterations.

By identifying and understanding these conditions, future inputs that might lead to similarly slow execution can be better anticipated and handled, potentially guiding further optimization strategies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants in C++**

Based on the performance-characterizing invariants previously described, let's translate them into C++ checker functions:

1. **Checker for High Iteration Count in the Main Loop:**

   ```cpp
   void check_iteration_invariant(long long c, int n) {
       if (pow(c, n - 1) < 1e13) {
           cerr << "Warning: Performance bottleneck condition triggered due to high iteration count!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Cost Calculation with Large Numbers:**

   ```cpp
   void check_cost_invariant(long long cost, int n) {
       if (cost > 1e12 * n) { // Arbitrary large threshold for cost
           cerr << "Warning: Performance bottleneck condition triggered due to large cost calculation!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Large `a[i]` with Small `n`:**

   ```cpp
   void check_small_n_large_values_invariant(long long* a, int n) {
       long long maxValue = *max_element(a, a + n);
       if (n < 10 && maxValue > 1e8) { // Example condition for small n and large values
           cerr << "Warning: Performance bottleneck condition triggered due to small n and large values!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate the Checkers into the Original Program**

Now, let's integrate the checkers into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

void fast_io() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
}

// Checker Functions
void check_iteration_invariant(long long c, int n) {
    if (pow(c, n - 1) < 1e13) {
        cerr << "Warning: Performance bottleneck condition triggered due to high iteration count!" << endl;
        abort();
    }
}

void check_cost_invariant(long long cost, int n) {
    if (cost > 1e12 * n) { // Arbitrary large threshold for cost
        cerr << "Warning: Performance bottleneck condition triggered due to large cost calculation!" << endl;
        abort();
    }
}

void check_small_n_large_values_invariant(long long* a, int n) {
    long long maxValue = *max_element(a, a + n);
    if (n < 10 && maxValue > 1e8) { // Example condition for small n and large values
        cerr << "Warning: Performance bottleneck condition triggered due to small n and large values!" << endl;
        abort();
    }
}

void solve() {
  int n;
  cin >> n;
  long long a[n];

  for (int i = 0; i < n; i++) cin >> a[i];

  // Check for small n and large values
  check_small_n_large_values_invariant(a, n);

  sort(a, a + n);
  long long c = 1, minCost = 1e17, f = 0, ans;

  // Main loop checker
  while (pow(c, n - 1) < 1e13) {
    long long cost = 0;

    for (int i = 0; i < n; i++) {
      cost += abs(a[i] - pow(c, i));
    }

    // Cost computation checker
    check_cost_invariant(cost, n);

    minCost = min(minCost, cost);
    c++;

    // Iteration count checker
    check_iteration_invariant(c, n);
  }

  cout << minCost << "\n";
}

int main() {
  fast_io();
  solve();
  return 0;
}
```

**Explanation of Changes:**

- Each checker function is called at appropriate points in the program to ensure that the conditions leading to performance bottlenecks are monitored.
- The `check_small_n_large_values_invariant` function is called after reading the input to check for conditions where `n` is small, and elements are large.
- Inside the while loop, after computing the cost, the `check_cost_invariant` function is called to ensure that the cost does not exceed a reasonable threshold.
- The `check_iteration_invariant` function is placed after modifying `c` in the loop to ensure we do not iterate excessively for large values of `c`.

