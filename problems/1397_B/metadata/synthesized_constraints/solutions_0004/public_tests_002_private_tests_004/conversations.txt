system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void solve(vector<long long> a, long long n) {
  long long big = (long long)1e15;
  long long ans = big, c = 1, k = 0;
  while (1) {
    long long val = 0, pw = 1;
    for (long long i = 0; i < n; i++, pw *= c) {
      if (pw >= big) {
        val = -1;
        break;
      }
      val += abs(pw - a[i]);
    }
    if (val == -1) break;
    ans = min(ans, val);
    c++;
  }
  cout << ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n;
  cin >> n;
  vector<long long> arr(n);
  for (long long i = 0; i < n; i++) {
    cin >> arr[i];
  }
  sort(arr.begin(), arr.end());
  solve(arr, n);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1000000000 1000000000 1000000000


(G.2) Fast Input

16
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void solve(vector<long long> a, long long n) { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long big = (long long)1e15; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = big, c = 1, k = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (1) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    long long val = 0, pw = 1; /* line 7 slow_hit_count: 31622777, fast_hit_count: 10 */
    for (long long i = 0; i < n; i++, pw *= c) { /* line 8 slow_hit_count: 126491107, fast_hit_count: 169 */
      if (pw >= big) { /* line 9 slow_hit_count: 94868331, fast_hit_count: 160 */
        val = -1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      val += abs(pw - a[i]); /* line 13 slow_hit_count: 94868330, fast_hit_count: 159 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    if (val == -1) break; /* line 15 slow_hit_count: 31622777, fast_hit_count: 10 */
    ans = min(ans, val); /* line 16 slow_hit_count: 31622776, fast_hit_count: 9 */
    c++; /* line 17 slow_hit_count: 31622776, fast_hit_count: 9 */
  } /* line 18 slow_hit_count: 31622776, fast_hit_count: 9 */
  cout << ans; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> arr(n); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 27 slow_hit_count: 4, fast_hit_count: 17 */
    cin >> arr[i]; /* line 28 slow_hit_count: 3, fast_hit_count: 16 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  sort(arr.begin(), arr.end()); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  solve(arr, n); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants, let's go through both phases systematically.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:  
   - The line-level hit counts show a striking difference between the fast and slow inputs, especially within the loop in the `solve` function.
   - Lines 7, 8, and 13 in the `solve` function have an overwhelming number of hits with the slow input, whereas they are hit relatively few times with the fast input.

2. **Pinpoint Lines with Significant Hits**:
   - Line 8 (`for` loop): This line is hit 126,491,107 times with the slow input but only 169 times with the fast input.
   - Line 9 (check `pw >= big`): Hit 94,868,331 times with the slow input, pointing to many iterations before breaking out.
   - Line 13 (calculation `val += abs(pw - a[i])`): Executed 94,868,330 times under the slow input, indicating excessive computation.

3. **Inference of Interaction with Data Structures**:
   - The loop (line 8) iterates over the array `a` for increasing values of `c` and calculates powers of `c`, leading to exponential growth in computational cost.
   - The power (`pw *= c`) grows rapidly, which combined with the condition `pw < big`, causes the high hit count before the loop breaks out due to `pw` exceeding the threshold.

### Phase 2: Derive Performance-Characterizing Invariants

Now, let's generate natural language statements that capture conditions under which the code slows down.

1. **Exponential Growth of Powers**:
   - **Invariant**: "If the value of `c` in the power sequence results in rapid growth such that `pw` remains less than `big` for many iterations, performance may degrade significantly. This is exacerbated when the elements of `a` are large, causing more iterations to adjust each element to its power sequence position."

2. **Excessive Iterations Due to Large Elements**:
   - **Invariant**: "When the elements of the list `a` are large relative to the desired power sequence values, the algorithm may require extensive incrementation or decrementation operations, leading to a high number of iterations before convergence."

3. **High Cost Due to Repeated Adjustments**:
   - **Invariant**: "If the array requires repeated adjustments in a loop (i.e., numerous `val += abs(pw - a[i])` operations) each time `c` is incremented, the performance suffers due to high computational effort."

### Observations and Recommendations

- The main slowdown factor is the loop iterating many times with a rapidly increasing power `pw` due to the nature of exponential growth, coupled with the high initial values of `a`.
- These invariants emphasize the computational intensity when dealing with large numbers and how repeated operations on such numbers lead to performance bottlenecks.
- To optimize, one might consider breaking the loop earlier when it's clear further iterations won’t provide a minimal cost, or use more efficient ways to estimate or converge `c` to minimize costly operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language invariants into C++ runtime checks.

1. **Invariant for Exponential Growth of Powers**: Check if the loop iterating over powers leads to excessive iterations.
   ```cpp
   void check_exponential_growth_invariant(long long c, long long iterations) {
       // Assume a threshold for excessive iterations based on typical behavior; this is an estimated value.
       if (iterations > 1000000) {
           cerr << "Warning: Exponential growth invariant triggered - excessive iterations due to power growth" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Large Elements Leading to Excessive Operations**: Check if elements in `a[i]` are causing excessive computations.
   ```cpp
   void check_large_elements_invariant(std::vector<long long>& a, long long threshold) {
       long long maxElement = *std::max_element(a.begin(), a.end());
       if (maxElement > threshold) {
           cerr << "Warning: Large elements invariant triggered - elements significantly larger than expected powers" << endl;
           abort();
       }
   }
   ```

3. **Invariant for High Cost Due to Repeated Adjustments**: Ensure too many adjustments are not being performed.
   ```cpp
   void check_repeated_adjustments_invariant(long long totalAdjustments) {
       // Considering an arbitrary large number of adjustments as a threshold
       if (totalAdjustments > 1000000) {
           cerr << "Warning: Repeated adjustments invariant triggered - excessive adjustments" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the C++ Program

Now, let's integrate these checkers with the original program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_exponential_growth_invariant(long long c, long long iterations) {
    if (iterations > 1000000) {  // Threshold for excessive iterations
        cerr << "Warning: Exponential growth invariant triggered - excessive iterations due to power growth" << endl;
        abort();
    }
}

void check_large_elements_invariant(vector<long long>& a, long long threshold) {
    long long maxElement = *max_element(a.begin(), a.end());
    if (maxElement > threshold) {
        cerr << "Warning: Large elements invariant triggered - elements significantly larger than expected powers" << endl;
        abort();
    }
}

void check_repeated_adjustments_invariant(long long totalAdjustments) {
    if (totalAdjustments > 1000000) {  // Threshold for excessive adjustments
        cerr << "Warning: Repeated adjustments invariant triggered - excessive adjustments" << endl;
        abort();
    }
}

void solve(vector<long long> a, long long n) {
    long long big = (long long)1e15;
    long long ans = big, c = 1;
    
    // Check for large elements that may cause excessive computations
    check_large_elements_invariant(a, 1000000000);  // Threshold based on input constraints
    
    long long iterations = 0;
    while (1) {
        long long val = 0, pw = 1;
        for (long long i = 0; i < n; i++, pw *= c) {
            if (pw >= big) {
                val = -1;
                break;
            }
            val += abs(pw - a[i]);
        }
        
        // Check for excessive iterations due to exponential power growth
        check_exponential_growth_invariant(c, iterations);
        
        if (val == -1) break;
        ans = min(ans, val);
        c++;
        iterations++;
    }
    
    // Check for high cost due to repeated adjustments
    check_repeated_adjustments_invariant(iterations);
    
    cout << ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n;
    cin >> n;
    vector<long long> arr(n);
    for (long long i = 0; i < n; i++) {
        cin >> arr[i];
    }
    sort(arr.begin(), arr.end());
    solve(arr, n);
    return 0;
}
```

### Comments on the Instrumentation

- **Exponential Growth Checker**: Placed within the loop to monitor iteration count and detect excessive looping due to power growth.
  
- **Large Elements Checker**: Inserted after input reading to check if any element is disproportionately large, which could lead to inefficient processing.

- **Repeated Adjustments Checker**: Used to ensure that the cumulative iteration/adjustment does not exceed a sensible threshold, indicating inefficiency.

These checks help identify when the conditions under which the program slows down are met, thereby facilitating debugging and optimization.

