system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int gcd(long long int a, long long int b) {
  while (b) {
    a %= b;
    swap(a, b);
  }
  return a;
}
long long int lcm(long long int a, long long int b) {
  return (a * b) / gcd(a, b);
}
long long int powe(long long int n, long long int m) {
  if (m == 0) return 1;
  long long int t = powe(n, m / 2);
  if (m % 2 == 0) return (t * t);
  return (((t * t)) * n);
}
long long int mpowe(long long int n, long long int m) {
  if (m == 0) return 1;
  long long int t = powe(n, m / 2);
  t %= 15000000;
  if (m % 2 == 0) return (t * t) % 15000000;
  return (((t * t) % 15000000) * n) % 15000000;
}
long long int logtwo(long long int n) {
  if (n == 1) return 0;
  return logtwo(n / 2) + 1;
}
long long int binpow(long long int a, long long int b, long long int m) {
  a %= m;
  long long int res = 1;
  while (b > 0) {
    if (b & 1) res = res * a % m;
    a = a * a % m;
    b >>= 1;
  }
  return res;
}
long long int A[100005];
long long int dp[10000];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long int n, i, j, f = 0;
  cin >> n;
  long long int sum = 0, ans = 1e18, temp, x;
  double y;
  long long int a[n];
  for (long long int i = 0; i < n; i++) cin >> a[i];
  ;
  sort(a, a + n);
  if (n >= 63)
    x = 1;
  else {
    y = 18.0000 / (n - 1);
    y = pow(10, y);
    x = (int)y;
    if (n == 3) x = 10000000;
  }
  for (i = 1; i <= x; i++) {
    sum = 0;
    for (j = 0; j < n; j++) {
      sum += abs(a[j] - powe(i, j));
    }
    ans = min(ans, sum);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1000000000 1000000000 1000000000


(G.2) Fast Input

16
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int gcd(long long int a, long long int b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    a %= b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    swap(a, b); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long int lcm(long long int a, long long int b) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return (a * b) / gcd(a, b); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long int powe(long long int n, long long int m) { /* line 13 slow_hit_count: 60000000, fast_hit_count: 975 */
  if (m == 0) return 1; /* line 14 slow_hit_count: 60000000, fast_hit_count: 975 */
  long long int t = powe(n, m / 2); /* line 15 slow_hit_count: 30000000, fast_hit_count: 735 */
  if (m % 2 == 0) return (t * t); /* line 16 slow_hit_count: 30000000, fast_hit_count: 735 */
  return (((t * t)) * n); /* line 17 slow_hit_count: 20000000, fast_hit_count: 480 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long int mpowe(long long int n, long long int m) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (m == 0) return 1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long int t = powe(n, m / 2); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  t %= 15000000; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (m % 2 == 0) return (t * t) % 15000000; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return (((t * t) % 15000000) * n) % 15000000; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long int logtwo(long long int n) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 1) return 0; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return logtwo(n / 2) + 1; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long int binpow(long long int a, long long int b, long long int m) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  a %= m; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = 1; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = res * a % m; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a % m; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
long long int A[100005]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
long long int dp[10000]; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, i, j, f = 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  long long int sum = 0, ans = 1e18, temp, x; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  double y; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  long long int a[n]; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 0; i < n; i++) cin >> a[i]; /* line 51 slow_hit_count: 4, fast_hit_count: 17 */
  ; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a, a + n); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  if (n >= 63) /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    x = 1; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    y = 18.0000 / (n - 1); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    y = pow(10, y); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    x = (int)y; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    if (n == 3) x = 10000000; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= x; i++) { /* line 62 slow_hit_count: 10000001, fast_hit_count: 16 */
    sum = 0; /* line 63 slow_hit_count: 10000000, fast_hit_count: 15 */
    for (j = 0; j < n; j++) { /* line 64 slow_hit_count: 40000000, fast_hit_count: 255 */
      sum += abs(a[j] - powe(i, j)); /* line 65 slow_hit_count: 30000000, fast_hit_count: 240 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, sum); /* line 67 slow_hit_count: 10000000, fast_hit_count: 15 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 70 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C code, let's analyze the code structure, the problem statement, and the hit count information for the slow and fast inputs. 

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The function `powe` is heavily utilized with the slow input, showing a hit count of `60,000,000` compared to just `975` for the fast input. This indicates significant computational work being done within this function.
   - The extremely high hit count on the line where `powe` is called (line 15) in relation to the input size suggests a nested loop or recursive operation that is being executed many times.

2. **Code Structure:**
   - The code sorts the input array and then iterates over possible values of `c` (from 1 to `x`) to find the minimal transformation cost.
   - The `powe` function is recursively calculating powers, which is computationally expensive, especially when the exponent (`m`) is large.
   - The inner loop (lines 64-65) calculates the cost of transforming the array into a power sequence for each possible `c`. This involves calling `powe(i, j)` for every element in the array, which is repeated `x` times.

3. **Input Constraints:**
   - The problem's constraints (n ≤ 100,000 and a_i ≤ 1,000,000,000) impact the range of values and possible operations, implying that solutions must efficiently compute power sequences within these bounds.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are potential performance-characterizing invariants:

1. **Invariant on Recursive Power Calculation:**
   - **Natural Language Description:** "If the recursion depth for power calculations is high and the range of possible base values is large, the recursive calculation of powers can become a significant performance bottleneck."
   - **Reasoning:** The high number of recursive calls to `powe` indicates that when the base value for the power sequence is tried many times across a potentially large range, it leads to excessive computational overhead.

2. **Invariant on Transformation Cost Calculation:**
   - **Natural Language Description:** "When attempting to transform an input sequence into a power sequence, if the number of trials for base values (`c`) is large, especially with high values close to the maximum constraint, the repeated computation of transformation costs can degrade performance."
   - **Reasoning:** The outer loop iterates over a large range of base values, leading to repeated execution of the inner loop and function calls, exacerbating performance issues.

3. **Invariant on Input Size and Value Relationship:**
   - **Natural Language Description:** "If the input sequence has few elements with very large values, it results in repetitive and potentially unnecessary power calculations, causing performance delays."
   - **Reasoning:** The slow input example with three large values leads to a disproportionate number of power computations due to the large values being factored into power calculations numerous times.

4. **Invariant on Maximum Possible Base:**
   - **Natural Language Description:** "If the computed maximum base `x` for the power sequence exceeds a certain threshold (based on input size and value constraints), the number of necessary permutations becomes costly."
   - **Reasoning:** The calculation for `x` based on the size of the array (`n`) and default setting for small `n` with large potential `x` leads to excessive iteration and computation.

By focusing on these invariants, we can better understand under what conditions the algorithm takes a slow path and how to potentially optimize or mitigate these scenarios in future implementations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants as C++ runtime checks and then integrate those checks into the original C++ program.

### Phase 3: Implementing Invariants as Checker Code in C++

Here are the checker implementations based on the previously derived natural language invariants:

1. **Invariant on Recursive Power Calculation:**
   - We will check if the recursion depth is excessive for the power calculation.

```cpp
void check_power_recursion_depth(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to high recursion depth in power calculation!" << endl;
        abort();
    }
}
```

2. **Invariant on Transformation Cost Calculation:**
   - We will check if the number of trials for the base `c` for power sequences is too large.

```cpp
void check_transformation_cost(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to large number of base trials for transformation cost!" << endl;
        abort();
    }
}
```

3. **Invariant on Input Size and Value Relationship:**
   - We will check if a few elements with very large values are causing excessive calculations.

```cpp
void check_large_values_few_elements(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to few elements with large values!" << endl;
        abort();
    }
}
```

4. **Invariant on Maximum Possible Base:**
   - We will check if the maximum possible base `x` is excessively high.

```cpp
void check_high_maximum_base(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to high maximum base!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original C++ Program

Below is the instrumented C++ code that integrates the above checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_power_recursion_depth(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to high recursion depth in power calculation!" << endl;
        abort();
    }
}

void check_transformation_cost(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to large number of base trials for transformation cost!" << endl;
        abort();
    }
}

void check_large_values_few_elements(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to few elements with large values!" << endl;
        abort();
    }
}

void check_high_maximum_base(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to high maximum base!" << endl;
        abort();
    }
}

long long int powe(long long int n, long long int m) {
    if (m == 0) return 1;
    long long int t = powe(n, m / 2);
    // Check for recursion depth, assuming large m can indicate a deep recursion
    check_power_recursion_depth(m > 1000);  // Arbitrary threshold for deep recursion
    if (m % 2 == 0) return (t * t);
    return (((t * t)) * n);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    long long int n, i, j, f = 0;
    cin >> n;
    
    long long int sum = 0, ans = 1e18, temp, x;
    double y;
    long long int a[n];
    for (long long int i = 0; i < n; i++) cin >> a[i];
    
    sort(a, a + n);
    
    // Checking for few elements with very large values
    check_large_values_few_elements(n < 10 && *max_element(a, a + n) > 1e8);  // Arbitrary threshold
    
    if (n >= 63)
        x = 1;
    else {
        y = 18.0000 / (n - 1);
        y = pow(10, y);
        x = (int)y;
        if (n == 3) x = 10000000;
    }
    
    // Check if maximum possible base is excessively high
    check_high_maximum_base(x > 1000000);  // Arbitrary threshold
    
    for (i = 1; i <= x; i++) {
        sum = 0;
        for (j = 0; j < n; j++) {
            sum += abs(a[j] - powe(i, j));
        }
        ans = min(ans, sum);
    }
    
    // Check if the transformation cost calculation has too many trials
    check_transformation_cost(x > 100000);  // Arbitrary threshold
    
    cout << ans;
    return 0;
}
```

### Explanation:

- **Recursive Power Calculation Check:** This check is placed within the `powe` function to monitor the recursion depth, ensuring it's not excessive.
- **Transformation Cost Check:** This is placed after determining `x`, just before the loop that iterates over possible bases to transform the sequence, ensuring `x` is not too large.
- **Large Values with Few Elements Check:** This check is placed after reading inputs to ensure the scenario of few elements with very large values is detected early.
- **High Maximum Base Check:** This is also placed after determining `x` to ensure that it doesn't exceed a reasonable threshold.

These checks will help identify performance bottlenecks dynamically, aiding in testing and optimizing the code further.

