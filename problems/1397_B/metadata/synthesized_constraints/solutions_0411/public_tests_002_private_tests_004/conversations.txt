system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const long long N = 300010;
long long arr[N];
using namespace std;
bool binasea(long long arr[], long long n, long long key) {
  long long hi = n - 1, lo = 0, mid;
  while (lo <= hi) {
    mid = lo + (hi - lo) / 2;
    if (arr[mid] == key)
      return true;
    else if (arr[mid] > key)
      hi = mid - 1;
    else
      lo = mid + 1;
  }
  return 0;
}
long long power(long long a, long long b) {
  long long res = 1;
  while (b) {
    if (b % 2) res *= a;
    b /= 2;
    a *= a;
  }
  return res;
}
long long gcd(long long a, long long b) {
  if (b == 0) return a;
  return gcd(b, a % b);
}
signed main() {
  ios_base::sync_with_stdio(NULL);
  cin.tie(0);
  cout.tie(0);
  long long t = 1, n;
  long long check = pow(10, 15);
  while (t--) {
    cin >> n;
    long long sum = 0;
    for (long long i = 0; i < n; i++) {
      cin >> arr[i];
      sum += arr[i];
    }
    sort(arr, arr + n);
    long long mini = abs(sum - n);
    long long upb = 1;
    if (n < 40) {
      while (power(upb, n - 1) <= check) upb++;
    }
    long long k = 0;
    for (long long i = 2; i < upb + 1; i++) {
      sum = 0;
      for (long long j = 0; j < n; j++) {
        sum += abs(power(i, j) - arr[j]);
      }
      mini = min(mini, sum);
    }
    cout << mini << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1000000000 1000000000 1000000000


(G.2) Fast Input

16
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 300010; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long arr[N]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool binasea(long long arr[], long long n, long long key) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long hi = n - 1, lo = 0, mid; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  while (lo <= hi) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    mid = lo + (hi - lo) / 2; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    if (arr[mid] == key) /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      return true; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    else if (arr[mid] > key) /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      hi = mid - 1; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mid + 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long b) { /* line 18 slow_hit_count: 126491105, fast_hit_count: 171 */
  long long res = 1; /* line 19 slow_hit_count: 126491105, fast_hit_count: 171 */
  while (b) { /* line 20 slow_hit_count: 284604987, fast_hit_count: 705 */
    if (b % 2) res *= a; /* line 21 slow_hit_count: 158113882, fast_hit_count: 534 */
    b /= 2; /* line 22 slow_hit_count: 158113882, fast_hit_count: 534 */
    a *= a; /* line 23 slow_hit_count: 158113882, fast_hit_count: 534 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 25 slow_hit_count: 126491105, fast_hit_count: 171 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return a; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(NULL); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1, n; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  long long check = pow(10, 15); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 37 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> n; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    long long sum = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 0; i < n; i++) { /* line 40 slow_hit_count: 4, fast_hit_count: 17 */
      cin >> arr[i]; /* line 41 slow_hit_count: 3, fast_hit_count: 16 */
      sum += arr[i]; /* line 42 slow_hit_count: 3, fast_hit_count: 16 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    sort(arr, arr + n); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    long long mini = abs(sum - n); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    long long upb = 1; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    if (n < 40) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      while (power(upb, n - 1) <= check) upb++; /* line 48 slow_hit_count: 31622777, fast_hit_count: 11 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    long long k = 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 2; i < upb + 1; i++) { /* line 51 slow_hit_count: 31622777, fast_hit_count: 11 */
      sum = 0; /* line 52 slow_hit_count: 31622776, fast_hit_count: 10 */
      for (long long j = 0; j < n; j++) { /* line 53 slow_hit_count: 126491104, fast_hit_count: 170 */
        sum += abs(power(i, j) - arr[j]); /* line 54 slow_hit_count: 94868328, fast_hit_count: 160 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      mini = min(mini, sum); /* line 56 slow_hit_count: 31622776, fast_hit_count: 10 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    cout << mini << "\n"; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we will examine the line-level hit counts for the slow and fast inputs and derive performance-characterizing invariants based on these observations.

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the hit counts of the slow and fast runs, we identify the following key observations:

1. **Power Function Calls**: The `power` function is extensively invoked, with slow input calling it significantly more times than the fast input. This is evident from lines 18 to 25, with hit counts such as 126,491,105 for slow input versus 171 for fast input.
   
2. **Loop Over `i` and `j`**: The nested loops (lines 51 and 53) are heavily executed for the slow input, suggesting a substantial computation burden. The outer loop (line 51) and the inner loop (line 53) are particularly noteworthy, with lines 54 and 56 also showing high hit counts.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants in natural language:

1. **High Computation Due to Range of `upb`**:
   - **Invariant**: "When the upper bound `upb` is large, the code's performance degrades significantly due to excessive iterations over potential base values for power sequences."
   - **Explanation**: The number of iterations in the outer loop (lines 51 and 48) is proportional to `upb`, which is determined by the condition `power(upb, n - 1) <= check`. If `n` is small but the individual values are large, `upb` grows excessively, leading to a high number of iterations and thus slow performance.

2. **Frequent Large Exponentiations**:
   - **Invariant**: "If the `power` function is called with large exponents frequently, the program may slow down significantly due to high computational costs."
   - **Explanation**: The `power` function is called for each combination of base `i` and position `j` to compute potential power sequences (line 54). Large exponents generated by large values of `n` or `upb` contribute to performance degradation.

3. **Repeated Cost Calculations**:
   - **Invariant**: "When multiple cost calculations for transforming elements to power sequences are performed, especially with large numbers, performance can degrade."
   - **Explanation**: Each calculation of `abs(power(i, j) - arr[j])` (line 54) contributes to the overall cost. With large numbers involved, these operations are computationally expensive.

### Conclusion

The primary performance bottlenecks arise from large iterations driven by high values of `upb` and frequent large exponent computations. These conditions are exacerbated by the need to handle large numbers in the transformation cost computation. By managing the growth of `upb` and optimizing power calculations, the program's performance can be improved.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: Let's perform Phase 3, where we'll implement the natural language invariants as runtime checks in C++.

### Phase 3: Implementing Invariants as Checker Functions

We derived two main invariants:

1. **High Computation Due to Range of `upb`**:
   - We need to check if `upb` becomes excessively large.

2. **Frequent Large Exponentiations**:
   - We should check if the `power` function gets called with large exponents frequently.

Here are the checker implementations for these invariants:

```cpp
void check_upb_invariant(long long upb, long long threshold) {
    if (upb > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large `upb` value!" << endl;
        abort();
    }
}

void check_power_invariant(long long base, long long exponent, long long threshold) {
    if (exponent > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large exponent in `power` function!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Now we will integrate these runtime checks at appropriate points in the original C++ code. We'll place these checks outside of tight loops where possible to avoid additional overhead.

```cpp
#include <bits/stdc++.h>
const long long N = 300010;
long long arr[N];
using namespace std;

bool binasea(long long arr[], long long n, long long key) {
    long long hi = n - 1, lo = 0, mid;
    while (lo <= hi) {
        mid = lo + (hi - lo) / 2;
        if (arr[mid] == key)
            return true;
        else if (arr[mid] > key)
            hi = mid - 1;
        else
            lo = mid + 1;
    }
    return 0;
}

long long power(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b % 2) res *= a;
        b /= 2;
        a *= a;
    }
    return res;
}

void check_upb_invariant(long long upb, long long threshold) {
    if (upb > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large `upb` value!" << endl;
        abort();
    }
}

void check_power_invariant(long long base, long long exponent, long long threshold) {
    if (exponent > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large exponent in `power` function!" << endl;
        abort();
    }
}

signed main() {
    ios_base::sync_with_stdio(NULL);
    cin.tie(0);
    cout.tie(0);
    long long t = 1, n;
    long long check = pow(10, 15);
    while (t--) {
        cin >> n;
        long long sum = 0;
        for (long long i = 0; i < n; i++) {
            cin >> arr[i];
            sum += arr[i];
        }
        sort(arr, arr + n);
        long long mini = abs(sum - n);
        long long upb = 1;
        if (n < 40) {
            while (power(upb, n - 1) <= check) {
                upb++;
                // Check for large upb values
                check_upb_invariant(upb, 10000 /* example threshold */);
            }
        }
        long long k = 0;
        for (long long i = 2; i < upb + 1; i++) {
            sum = 0;
            for (long long j = 0; j < n; j++) {
                // Check for large exponents
                check_power_invariant(i, j, 1000 /* example threshold */);
                sum += abs(power(i, j) - arr[j]);
            }
            mini = min(mini, sum);
        }
        cout << mini << "\n";
    }
    return 0;
}
```

### Explanation

- **Check for `upb`**: The check for `upb` is placed within the loop that increments `upb`, outside the main computation loop, to ensure we don't repeatedly trigger checks inside tight loops.
- **Check for Exponents**: The check for large exponent values is placed right before computing powers, which ensures that we capture conditions when large exponents are used.

These checks will help in identifying performance bottlenecks during execution, especially when used with fuzzing tools or during debugging.

