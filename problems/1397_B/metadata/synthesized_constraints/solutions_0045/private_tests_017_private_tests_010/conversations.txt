system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void solve() {
  long long n;
  cin >> n;
  vector<long long> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  sort(arr.begin(), arr.end());
  if (n > 32) {
    unsigned long long ans = 0;
    for (int i = 0; i < n; i++) {
      ans = ans + arr[i] - 1;
    }
    cout << ans << "\n";
  } else {
    unsigned long long ans = 1e16;
    unsigned long long a1 = 0;
    for (int i = 1; i <= sqrt(arr[n - 1]) + 1; i++) {
      a1 = 0;
      for (int j = 0; j < n; j++) {
        a1 = a1 + (long long)abs((long long)pow(i, j) - arr[j]);
        a1 = min((unsigned long long)1e16, a1);
      }
      ans = min(ans, a1);
    }
    cout << ans << "\n";
  }
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  long t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

32
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1000000000 1000000000


(G.2) Fast Input

33
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1000000000 1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> arr(n); /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 33, fast_hit_count: 34 */
    cin >> arr[i]; /* line 8 slow_hit_count: 32, fast_hit_count: 33 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  sort(arr.begin(), arr.end()); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  if (n > 32) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    unsigned long long ans = 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 0, fast_hit_count: 34 */
      ans = ans + arr[i] - 1; /* line 14 slow_hit_count: 0, fast_hit_count: 33 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << "\n"; /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    unsigned long long ans = 1e16; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
    unsigned long long a1 = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i <= sqrt(arr[n - 1]) + 1; i++) { /* line 20 slow_hit_count: 31624, fast_hit_count: 0 */
      a1 = 0; /* line 21 slow_hit_count: 31623, fast_hit_count: 0 */
      for (int j = 0; j < n; j++) { /* line 22 slow_hit_count: 1043559, fast_hit_count: 0 */
        a1 = a1 + (long long)abs((long long)pow(i, j) - arr[j]); /* line 23 slow_hit_count: 1011936, fast_hit_count: 0 */
        a1 = min((unsigned long long)1e16, a1); /* line 24 slow_hit_count: 1011936, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, a1); /* line 26 slow_hit_count: 31623, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << "\n"; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  long t = 1; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance issues in the provided C code, let's go through the tasks in two phases as instructed.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - For the slow input, the following lines have significantly higher hit counts compared to the fast input:
     - Line 20: `for (int i = 1; i <= sqrt(arr[n - 1]) + 1; i++)` gets 31,624 hits.
     - Line 22: `for (int j = 0; j < n; j++)` gets 1,043,559 hits.
     - Line 23: `a1 = a1 + (long long)abs((long long)pow(i, j) - arr[j]);` gets 1,011,936 hits.
     - Line 24: `a1 = min((unsigned long long)1e16, a1);` gets 1,011,936 hits.

2. **Pinpoint Lines or Functions with More Hits for Slow Input**:
   - The nested loops starting at lines 20 and 22 result in an extremely high number of iterations due to a relatively high estimate for `sqrt(arr[n - 1])` when `n <= 32`.
   - The line inside the inner loop, which calculates the power and computes the absolute difference, is called a large number of times, making it costly.

3. **Infer Interaction with Data Structures and Constraints**:
   - The slow input causes the code to evaluate a large range of potential base values `i` to transform the sequence into a power sequence.
   - The operations in these loops become expensive because of the repeated computation of powers and absolute differences, especially because `pow(i, j)` is recalculated each time.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language performance invariants based on the analysis:

1. **High Exponentiation Cost**:
   - Natural Language Description: "If the largest element in the array leads to a high square root value, and the sequence length is less than or equal to 32, the program spends excessive time calculating powers and differences, resulting in slow performance."
   - This describes the situation where a large `arr[n-1]` causes the outer loop to run over a wide range of potential base values, leading to a high number of operations.

2. **High Loop Iterations with Small `n`**:
   - Natural Language Description: "When `n` is less than or equal to 32, and the list is composed of large numbers, the nested loops evaluating power transformations can lead to very high computational cost, significantly slowing down execution."
   - This invariant captures the scenario where the small size constraint (`n <= 32`) paradoxically causes a slow execution due to high iteration counts in the loop body.

3. **Inefficient Power Calculation**:
   - Natural Language Description: "For `n` ≤ 32, if the maximum array element is large, the power calculations inside nested loops are likely to become a performance bottleneck."
   - This reflects the expensive operations entailed by repeatedly calculating `pow(i, j)` across iterations.

These performance invariants abstract the observed behavior without relying on specific input values, focusing instead on patterns and operations that characterize slow performance given the constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 ≤ i ≤ n-1 then a_i = c^i.

Given a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:

  * Reorder the list (i.e. pick a permutation p of \{0,1,...,n - 1\} and change a_i to a_{p_i}), then 
  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. 



Find the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Input

The first line contains an integer n (3 ≤ n ≤ 10^5).

The second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9).

Output

Print the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.

Examples

Input


3
1 3 2


Output


1


Input


3
1000000000 1000000000 1000000000


Output


1999982505

Note

In the first example, we first reorder \{1, 3, 2\} into \{1, 2, 3\}, then increment a_2 to 4 with cost 1 to get a power sequence \{1, 2, 4\}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as C++ Checkers

Let's translate the natural language invariants from Phase 2 into C++ checker code:

1. **High Exponentiation Cost Check**:
   ```cpp
   void check_high_exponentiation(long long maxElement, int n) {
       if (n <= 32 && maxElement > 1e9 / 10) {  // Estimate threshold based on large input value
           cerr << "Warning: Performance bottleneck condition triggered - high exponentiation cost!" << endl;
           abort();
       }
   }
   ```

2. **High Loop Iterations with Small `n` Check**:
   ```cpp
   void check_high_loop_iterations(int n, long long maxElement) {
       if (n <= 32 && maxElement > 1e9 / 10) {  // Same condition for detection
           cerr << "Warning: Performance bottleneck condition triggered - high loop iterations with small n!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Power Calculation Check**:
   ```cpp
   void check_inefficient_power_calculation(int n, long long maxElement) {
       if (n <= 32 && maxElement > 1e9 / 10) {  // Similar detection condition
           cerr << "Warning: Performance bottleneck condition triggered - inefficient power calculation!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into Original C++ Code

Now, we will integrate these checks into the original program at appropriate points in the control flow, ensuring they do not add overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_high_exponentiation(long long maxElement, int n) {
    if (n <= 32 && maxElement > 1e9 / 10) {  // Estimate threshold based on large input value
        cerr << "Warning: Performance bottleneck condition triggered - high exponentiation cost!" << endl;
        abort();
    }
}

void check_high_loop_iterations(int n, long long maxElement) {
    if (n <= 32 && maxElement > 1e9 / 10) {  // Same condition for detection
        cerr << "Warning: Performance bottleneck condition triggered - high loop iterations with small n!" << endl;
        abort();
    }
}

void check_inefficient_power_calculation(int n, long long maxElement) {
    if (n <= 32 && maxElement > 1e9 / 10) {  // Similar detection condition
        cerr << "Warning: Performance bottleneck condition triggered - inefficient power calculation!" << endl;
        abort();
    }
}

void solve() {
    long long n;
    cin >> n;
    vector<long long> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    sort(arr.begin(), arr.end());
    
    // Determine the maximum element to use in checkers
    long long maxElement = arr[n - 1];
    
    // Check conditions for performance bottlenecks
    check_high_exponentiation(maxElement, n);
    check_high_loop_iterations(n, maxElement);
    check_inefficient_power_calculation(n, maxElement);
    
    if (n > 32) {
        unsigned long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = ans + arr[i] - 1;
        }
        cout << ans << "\n";
    } else {
        unsigned long long ans = 1e16;
        unsigned long long a1 = 0;
        for (int i = 1; i <= sqrt(arr[n - 1]) + 1; i++) {
            a1 = 0;
            for (int j = 0; j < n; j++) {
                a1 = a1 + (long long)abs((long long)pow(i, j) - arr[j]);
                a1 = min((unsigned long long)1e16, a1);
            }
            ans = min(ans, a1);
        }
        cout << ans << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long t = 1;
    while (t--) solve();
}
```

### Explanation

- The checkers are added after reading the input and sorting the array, before any heavy computations begin. They use the maximum array element as a proxy for difficulty of computation in the nested loops.
- Each checker is designed to detect the specific performance bottleneck condition described in the natural language invariants. The checks help identify scenarios where computational expenses might be prohibitive given the constraints.

