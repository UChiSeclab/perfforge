system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long a, b, p, d, num, sum;
  cin >> a >> b;
  long long i;
  sum = 0;
  for (i = 1; i < b; i++) {
    long long k = (i * b + i) * 2;
    int flag = 0;
    if (a % 2 == 0) {
      p = a / 2;
      flag = 1;
    } else {
      p = a;
    }
    if (flag == 0) {
      k = k / 2;
      num = (a - 1) / 2;
      flag = 1;
    } else {
      num = (a - 1);
    }
    d = (k + ((((num)*b) % 1000000007) * i) % 1000000007) % 1000000007;
    sum += (p * d) % 1000000007;
    sum = sum % 1000000007;
  }
  cout << sum << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 18270115


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b, p, d, num, sum; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long i; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  sum = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < b; i++) { /* line 8 slow_hit_count: 18270115, fast_hit_count: 1 */
    long long k = (i * b + i) * 2; /* line 9 slow_hit_count: 18270114, fast_hit_count: 0 */
    int flag = 0; /* line 10 slow_hit_count: 18270114, fast_hit_count: 0 */
    if (a % 2 == 0) { /* line 11 slow_hit_count: 18270114, fast_hit_count: 0 */
      p = a / 2; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      flag = 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      p = a; /* line 15 slow_hit_count: 18270114, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag == 0) { /* line 17 slow_hit_count: 18270114, fast_hit_count: 0 */
      k = k / 2; /* line 18 slow_hit_count: 18270114, fast_hit_count: 0 */
      num = (a - 1) / 2; /* line 19 slow_hit_count: 18270114, fast_hit_count: 0 */
      flag = 1; /* line 20 slow_hit_count: 18270114, fast_hit_count: 0 */
    } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      num = (a - 1); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    d = (k + ((((num)*b) % 1000000007) * i) % 1000000007) % 1000000007; /* line 24 slow_hit_count: 18270114, fast_hit_count: 0 */
    sum += (p * d) % 1000000007; /* line 25 slow_hit_count: 18270114, fast_hit_count: 0 */
    sum = sum % 1000000007; /* line 26 slow_hit_count: 18270114, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum << endl; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the provided C program, we need to analyze the code based on the hit count information and derive performance-characterizing invariants. Let's proceed with the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts**:
   - The loop at line 8 is executed 18,270,115 times for the slow input but only once for the fast input. This indicates a major performance bottleneck in this loop.
   - Most of the operations within the loop (lines 9-26) also have a significant number of hits (18,270,114 times), which strongly suggests that the loop is the main contributor to the slowdown.

2. **Pinpointing Lines with More Hits**:
   - The entire loop from line 8 to line 26, especially lines calculating values (`k`, `num`, `d`, and updating `sum`), is heavily executed with the slow input.
   - The loop runs for each value of `i` from 1 to `b-1`. Thus, it will run `(b-1)` times, directly tying the performance to the size of `b`.

3. **Interaction with Data Structures and Loops**:
   - The code involves basic arithmetic operations and modulo operations within a loop. The loop is bounded by `b`, meaning input `b` directly influences how many times these operations are repeated.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can infer the following performance-characterizing invariants:

1. **Invariant on Loop Execution**:
   - **Natural Language Description**: "If the value of `b` is large, the loop will execute a large number of times, causing the program to slow down significantly. The program's performance is directly influenced by the magnitude of `b`, as it determines the loop's iteration count."
   - **Threshold Consideration**: Given the input constraints (`1 ≤ a, b ≤ 10^7`), the loop count is crucial. For performance reasons, avoiding `b` being close to its upper limit may prevent slowdowns.

2. **Invariant on Arithmetic Complexity**:
   - **Natural Language Description**: "When `b` approaches its upper constraint, the repeated arithmetic operations on large numbers within the loop can lead to significant computational overhead, especially due to the modulo operations."
   - **Threshold Consideration**: High values of `b` imply larger iterations, increasing computational load due to repeated calculations and modulus operations.

3. **Invariant on Conditional Logic**:
   - **Natural Language Description**: "The conditional paths within the loop are contingent on the parity of `a`, but regardless of the condition, the loop still performs complex arithmetic operations that scale with `b`."
   - **Threshold Consideration**: With `a` as an odd number, the loop's logic branches to compute `p` and `num`, but the loop iterations themselves are still driven by `b`.

These invariants highlight that the slow performance is inherently tied to the size of `b` and the operations within the loop that scale with it. By understanding these conditions, developers can infer the scenarios causing slow performance, allowing for targeted optimizations or heuristic checks to flag potentially slow inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the derived invariants, we create C++ code snippets to check for performance bottlenecks:

1. **Invariant on Loop Execution**:
   - **Condition**: The loop’s performance is contingent on `b` being large.
   - **Checker Code**:
   ```cpp
   void check_large_b_invariant(long long b) {
       if (b > 1000000) {  // Arbitrary threshold for demonstration purposes
           cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Arithmetic Complexity**:
   - **Condition**: Ensure that repeated arithmetic operations on large numbers don't degrade performance.
   - **Checker Code**:
   ```cpp
   void check_arithmetic_complexity_invariant(long long b) {
       if (b > 1000000) {  // Threshold to ensure we catch potential slowdowns
           cerr << "Warning: Arithmetic complexity bottleneck due to large b!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Conditional Logic**:
   - **Condition**: The conditional calculations inside the loop should not overwhelm the execution.
   - **Checker Code**:
   ```cpp
   void check_conditional_logic_invariant(long long b) {
       if (b > 1000000) {  // This bounds the loop operations
           cerr << "Warning: Conditional logic bottleneck due to large b!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Program

Next, we integrate these checks into the existing C++ program at strategic points to detect potential slowdowns due to large values of `b`.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for large 'b' which might cause performance bottleneck
void check_large_b_invariant(long long b) {
    if (b > 1000000) {  // Arbitrary threshold for demonstration purposes
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

// Function to check for arithmetic complexity
void check_arithmetic_complexity_invariant(long long b) {
    if (b > 1000000) {  // Threshold to ensure we catch potential slowdowns
        cerr << "Warning: Arithmetic complexity bottleneck due to large b!" << endl;
        abort();
    }
}

// Function to check for conditional logic complexity
void check_conditional_logic_invariant(long long b) {
    if (b > 1000000) {  // This bounds the loop operations
        cerr << "Warning: Conditional logic bottleneck due to large b!" << endl;
        abort();
    }
}

int main() {
    long long a, b, p, d, num, sum;
    cin >> a >> b;

    // Check performance-related invariants based on the input
    check_large_b_invariant(b);
    check_arithmetic_complexity_invariant(b);
    check_conditional_logic_invariant(b);

    long long i;
    sum = 0;
    for (i = 1; i < b; i++) {
        long long k = (i * b + i) * 2;
        int flag = 0;
        if (a % 2 == 0) {
            p = a / 2;
            flag = 1;
        } else {
            p = a;
        }
        if (flag == 0) {
            k = k / 2;
            num = (a - 1) / 2;
            flag = 1;
        } else {
            num = (a - 1);
        }
        d = (k + ((((num) * b) % 1000000007) * i) % 1000000007) % 1000000007;
        sum += (p * d) % 1000000007;
        sum = sum % 1000000007;
    }
    cout << sum << endl;
    return 0;
}
```

### Explanation

- **Placement of Checkers**: The checker functions are called immediately after reading the input values. This avoids adding overhead inside tight loops.
- **Threshold Values**: A threshold of `b > 1000000` is chosen. This is an example threshold; in practice, this would be tuned based on actual performance testing and profiling.
- **Abort on Detection**: If any condition is met, a warning is issued, and the program aborts, helping catch performance issues early during testing.

