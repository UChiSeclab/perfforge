system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int add(int a, int b) {
  a += b;
  return a % 1000000007;
}
int mlp(long long a, int b) {
  a *= b;
  return a % 1000000007;
}
int brute(int a, int b) {
  long long res(0);
  for (int i = 0; i <= 100000000; ++i) {
    if (i % b != 0 && (i / b) % (i % b) == 0 && (i / b) / (i % b) >= 1 &&
        (i / b) / (i % b) <= a) {
      res += i;
    }
  }
  return res % 1000000007;
}
void solve() {
  int a, b;
  scanf("%d%d", &a, &b);
  int ans(0);
  for (int i(1), _l(b - 1); i <= _l; ++i) {
    int smth(mlp(add(mlp(b, i) + i, add(mlp(a, mlp(b, i)), i)), a));
    smth = mlp(smth, 500000004);
    ans = add(ans, smth);
  }
  printf("%d\n", ans);
}
int main() {
  clock_t tm = clock();
  solve();
  cerr << setprecision(3);
  cerr << (clock() - tm) / 1000000. << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 18270115


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int add(int a, int b) { /* line 3 slow_hit_count: 54810342, fast_hit_count: 0 */
  a += b; /* line 4 slow_hit_count: 54810342, fast_hit_count: 0 */
  return a % 1000000007; /* line 5 slow_hit_count: 54810342, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int mlp(long long a, int b) { /* line 7 slow_hit_count: 91350570, fast_hit_count: 0 */
  a *= b; /* line 8 slow_hit_count: 91350570, fast_hit_count: 0 */
  return a % 1000000007; /* line 9 slow_hit_count: 91350570, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int brute(int a, int b) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  long long res(0); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 100000000; ++i) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (i % b != 0 && (i / b) % (i % b) == 0 && (i / b) / (i % b) >= 1 && /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
        (i / b) / (i % b) <= a) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      res += i; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return res % 1000000007; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &a, &b); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int ans(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i(1), _l(b - 1); i <= _l; ++i) { /* line 25 slow_hit_count: 18270115, fast_hit_count: 1 */
    int smth(mlp(add(mlp(b, i) + i, add(mlp(a, mlp(b, i)), i)), a)); /* line 26 slow_hit_count: 18270114, fast_hit_count: 0 */
    smth = mlp(smth, 500000004); /* line 27 slow_hit_count: 18270114, fast_hit_count: 0 */
    ans = add(ans, smth); /* line 28 slow_hit_count: 18270114, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  clock_t tm = clock(); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << setprecision(3); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << (clock() - tm) / 1000000. << endl; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance Analysis

**Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Compare Line-Level Hit Counts**: 
   - The `add` and `mlp` functions are hit extensively during the slow input run, with hit counts of 54,810,342 and 91,350,570, respectively.
   - The loop on line 25 is executed 18,270,115 times during the slow run, compared to just once during the fast run.

2. **Pinpoint Lines/Functions with More Hits**:
   - The `mlp` function on line 7 and `add` function on line 3 are hit frequently due to their usage inside the loop on line 25.
   - The loop on line 25 iterates up to `b-1`, which can be significant when `b` is large.

3. **Interaction with Data Structures/Loops**:
   - The loop on line 25 is directly dependent on the value of `b`; it iterates `b-1` times.
   - The core calculations inside this loop involve repeated multiplications and additions, which become significant with large `b`.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Natural Language Statements**:

- **Invariant 1**: "When `b` is large, the number of iterations in the loop increases significantly, leading to excessive calls to mathematical operations. This is particularly problematic since the loop iterates `b-1` times, causing repeated calculations of multiplication and addition operations."

- **Invariant 2**: "If the mathematical operations such as addition and multiplication are repeatedly executed inside a loop that depends linearly on large input values, the cumulative overhead of these operations can lead to performance degradation."

2. **Threshold Values**:
   - The critical factor influencing performance is the size of `b`. The loop's execution time grows linearly with `b`; hence, as `b` approaches its upper limit (e.g., 10 million), the performance impact becomes substantial.

3. **Correlate Conditions to Input Patterns**:
   - The slowdown occurs in scenarios where `b` is close to its maximum limit, potentially leading to millions of iterations and thus millions of function calls for `mlp` and `add`.

4. **Broad Condition Catching**:
   - These conditions are broad enough to capture future scenarios where `b` is large, regardless of the specific numeric value, leading to increased computation time due to repeated operations inside a large loop.

### Conclusion

The main performance bottleneck in the code arises from the loop dependent on the value of `b`. As `b` increases towards its maximum constraint, the number of operations increases significantly, leading to slow execution. These invariants highlight the importance of considering loop bounds and the frequency of expensive operations in performance-critical code sections.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ checkers implementing the performance-characterizing invariants derived previously:

1. **Invariant 1**: Check if `b` is large, which would trigger a large number of iterations.
   
   ```cpp
   void check_large_b_invariant(int b) {
       if (b > 1000000) { // Example threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - large b value!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2**: Check for excessive calls to mathematical operations due to repeated execution inside a loop. This is implicitly covered by checking the size of `b`.

   ```cpp
   void check_excessive_operations_invariant(int b) {
       if (b > 1000000) { // Example threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - excessive operations due to large b!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Program

Here is the instrumented C++ code with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int add(int a, int b) {
    a += b;
    return a % 1000000007;
}

int mlp(long long a, int b) {
    a *= b;
    return a % 1000000007;
}

void check_large_b_invariant(int b) {
    // Check for large value of b triggering performance bottleneck
    if (b > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large b value!" << endl;
        abort();
    }
}

void solve() {
    int a, b;
    scanf("%d%d", &a, &b);

    // Insert check for large b
    check_large_b_invariant(b);

    int ans(0);
    for (int i(1), _l(b - 1); i <= _l; ++i) {
        int smth(mlp(add(mlp(b, i) + i, add(mlp(a, mlp(b, i)), i)), a));
        smth = mlp(smth, 500000004);
        ans = add(ans, smth);
    }
    printf("%d\n", ans);
}

int main() {
    clock_t tm = clock();
    solve();
    cerr << setprecision(3);
    cerr << (clock() - tm) / 1000000. << endl;
    return 0;
}
```

### Explanation

- **`check_large_b_invariant` Function**: This check is inserted immediately after reading `b`. It should abort the program if `b` exceeds a threshold, indicating a potential performance bottleneck due to excessive loop iterations.
  
- **Placement**: The check is placed outside the main processing loop to prevent additional overhead during execution.

This instrumented code should help in identifying performance issues during testing, especially when `b` is large, leading to many iterations in the loop.

