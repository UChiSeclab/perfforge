system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:16777216")
using namespace std;
long long power(long long x, long long y, long long m = 1000000000000000007) {
  if (!y) return 1;
  if (y % 2) return x * power(x, y - 1, m) % m;
  long long k = power(x, y / 2, m);
  return k * k % m;
}
vector<vector<long long> > multy(vector<vector<long long> > x,
                                 vector<vector<long long> > y,
                                 long long m = 1000000000000000007) {
  vector<vector<long long> > z;
  z.resize(x.size());
  for (int i = 0; i < z.size(); ++i) z[i].assign(y[0].size(), 0);
  for (int k = 0; k < y.size(); ++k)
    for (int i = 0; i < x.size(); ++i)
      for (int j = 0; j < y[0].size(); ++j)
        z[i][j] = (z[i][j] + x[i][k] * y[k][j]) % m;
  return z;
}
vector<vector<long long> > power(vector<vector<long long> > x, long long y,
                                 long long m = 1000000000000000007) {
  if (y == 1) return x;
  if (y % 2) return multy(x, power(x, y - 1, m), m);
  vector<vector<long long> > k = power(x, y / 2, m);
  return multy(k, k, m);
}
long double power(long double x, long long y) {
  return exp(log(x) * (long double)y);
}
long long gcd(long long x, long long y) { return y ? gcd(y, x % y) : x; }
long long gcdex(long long a, long long b, long long& x, long long& y) {
  if (a == 0) {
    x = 0;
    y = 1;
    return b;
  }
  long long x1, y1;
  long long d = gcdex(b % a, a, x1, y1);
  x = y1 - (b / a) * x1;
  y = x1;
  return d;
}
long long lcm(long long x, long long y, long long m = 1000000000000000007) {
  return x / gcd(x, y) * y % m;
}
long long phi(long long n) {
  long long result = n;
  for (long long i = 2; i * i <= n; ++i)
    if (n % i == 0) {
      while (n % i == 0) n /= i;
      result -= result / i;
    }
  if (n > 1) result -= result / n;
  return result;
}
long long rev_el(long long a, long long m) {
  long long x, y;
  long long g = gcdex(a, m, x, y);
  if (g != 1)
    return power(x, phi(m) - 1, m);
  else {
    x = (x % m + m) % m;
    return x;
  }
}
bool isPrime(long long x) {
  if (x <= 1) return false;
  for (long long i = 2; i * i <= x; ++i)
    if (x % i == 0) return false;
  return true;
}
int cnt_dig(long long x) {
  if (!x) return 1;
  int ans = 0;
  while (x) {
    x /= 10;
    ans++;
  }
  return ans;
}
int sum_dig(long long x) {
  long long ans = 0;
  while (x) {
    ans += x % 10;
    x /= 10;
  }
  return ans;
}
int cnt_bit(long long x) {
  int res = 0;
  while (x) {
    res += x & 1;
    x >>= 1;
  }
  return res;
}
long long sqr(long long x, long long m = 1000000000000000007) {
  return x * x % m;
}
long long a, b;
int main() {
  ios::sync_with_stdio(0);
  while (cin >> a >> b) {
    long long res = 0;
    long long rev = rev_el(2, 1000000007);
    for (long long g = 1; g < b; ++g) {
      res += (((g * b % 1000000007) * (a + 1) % 1000000007) * a % 1000000007) *
             rev % 1000000007;
      res %= 1000000007;
      res += g * a;
      res %= 1000000007;
    }
    cout << res << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 18270115


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:16777216") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y, long long m = 1000000000000000007) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (!y) return 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (y % 2) return x * power(x, y - 1, m) % m; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long k = power(x, y / 2, m); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return k * k % m; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long> > multy(vector<vector<long long> > x, /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
                                 vector<vector<long long> > y, /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
                                 long long m = 1000000000000000007) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<long long> > z; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  z.resize(x.size()); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < z.size(); ++i) z[i].assign(y[0].size(), 0); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int k = 0; k < y.size(); ++k) /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < x.size(); ++i) /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < y[0].size(); ++j) /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        z[i][j] = (z[i][j] + x[i][k] * y[k][j]) % m; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return z; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long> > power(vector<vector<long long> > x, long long y, /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
                                 long long m = 1000000000000000007) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 1) return x; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (y % 2) return multy(x, power(x, y - 1, m), m); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<long long> > k = power(x, y / 2, m); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return multy(k, k, m); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
long double power(long double x, long long y) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return exp(log(x) * (long double)y); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long x, long long y) { return y ? gcd(y, x % y) : x; } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
long long gcdex(long long a, long long b, long long& x, long long& y) { /* line 33 slow_hit_count: 3, fast_hit_count: 3 */
  if (a == 0) { /* line 34 slow_hit_count: 3, fast_hit_count: 3 */
    x = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    y = 1; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    return b; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  long long x1, y1; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  long long d = gcdex(b % a, a, x1, y1); /* line 40 slow_hit_count: 2, fast_hit_count: 2 */
  x = y1 - (b / a) * x1; /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
  y = x1; /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
  return d; /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long x, long long y, long long m = 1000000000000000007) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  return x / gcd(x, y) * y % m; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
long long phi(long long n) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  long long result = n; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i * i <= n; ++i) /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % i == 0) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      while (n % i == 0) n /= i; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      result -= result / i; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 1) result -= result / n; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return result; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
long long rev_el(long long a, long long m) { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, y; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  long long g = gcdex(a, m, x, y); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  if (g != 1) /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    return power(x, phi(m) - 1, m); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x % m + m) % m; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    return x; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(long long x) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  if (x <= 1) return false; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i * i <= x; ++i) /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    if (x % i == 0) return false; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
int cnt_dig(long long x) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  if (!x) return 1; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  while (x) { /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    x /= 10; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    ans++; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
int sum_dig(long long x) { /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  while (x) { /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    ans += x % 10; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    x /= 10; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
int cnt_bit(long long x) { /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  while (x) { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    res += x & 1; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    x >>= 1; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
long long sqr(long long x, long long m = 1000000000000000007) { /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  return x * x % m; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
long long a, b; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  while (cin >> a >> b) { /* line 105 slow_hit_count: 2, fast_hit_count: 2 */
    long long res = 0; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
    long long rev = rev_el(2, 1000000007); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long g = 1; g < b; ++g) { /* line 108 slow_hit_count: 18270115, fast_hit_count: 1 */
      res += (((g * b % 1000000007) * (a + 1) % 1000000007) * a % 1000000007) * /* line 109 slow_hit_count: 18270114, fast_hit_count: 0 */
             rev % 1000000007; /* line 110 slow_hit_count: 18270114, fast_hit_count: 0 */
      res %= 1000000007; /* line 111 slow_hit_count: 18270114, fast_hit_count: 0 */
      res += g * a; /* line 112 slow_hit_count: 18270114, fast_hit_count: 0 */
      res %= 1000000007; /* line 113 slow_hit_count: 18270114, fast_hit_count: 0 */
    } /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 115 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 117 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, we can observe the following:

1. **Loop Iteration Disparity**:
   - The loop `for (long long g = 1; g < b; ++g)` at line 108 is the primary candidate for inefficiency due to the significant difference in hit counts: `18270115` (slow) vs `1` (fast).
   - This loop body is hit multiple times when `b` is large, suggesting that the loop's performance is directly tied to the value of `b`.

2. **Calculation Inside the Loop**:
   - Within this loop, lines 109 to 113 are executed many times for the slow input. These lines include multiple calculations and modulo operations, which are computationally expensive and repeated potentially up to `b` times.

3. **Data Structure and Function Usage**:
   - Although several functions are defined in the program, only `rev_el` is used in the main computation, called once for both inputs with no significant impact on performance.
   - Therefore, the loop iteration with its arithmetic operations is the main focus for performance bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **Loop Iteration Threshold**:
   - **Invariant**: "If the value of `b` is large, nearing its maximum constraint (e.g., close to 10^7), the program will enter a slow path due to a high number of loop iterations."
   - **Explanation**: The execution time of the loop is directly proportional to the value of `b`, causing the number of calculations within the loop to grow significantly when `b` is large.

2. **Repeated Modulo Calculations**:
   - **Invariant**: "When `b` is large, repeated modulo operations within the loop can lead to performance degradation due to intensive arithmetic calculations."
   - **Explanation**: The use of multiple modulo operations for each iteration of the loop introduces computational overhead, which accumulates as `b` increases.

3. **Arithmetic Operations**:
   - **Invariant**: "If `b` is large, the multiplicative arithmetic operations performed per loop iteration can result in slow performance due to increased computational load."
   - **Explanation**: Each iteration involves several multiplicative operations which can become costly when executed a large number of times.

These invariants help in understanding the conditions that lead to the observed slow performance and can guide optimizations or future test input generation to identify similar slow paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets implementing the checks:

1. **Loop Iteration Threshold Check**:
   ```cpp
   void check_loop_iteration_threshold(long long b) {
       if (b > 1000000) {  // Assuming a threshold value close to the maximum constraint
           cerr << "Warning: Performance bottleneck due to high number of loop iterations!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Modulo Calculations Check**:
   ```cpp
   void check_repeated_modulo_calculations(long long b) {
       if (b > 1000000) {  // Similar threshold due to intensive calculations
           cerr << "Warning: Performance bottleneck due to repeated modulo calculations!" << endl;
           abort();
       }
   }
   ```

3. **Arithmetic Operations Check**:
   ```cpp
   void check_arithmetic_operations(long long b) {
       if (b > 1000000) {  // Same threshold focusing on arithmetic load
           cerr << "Warning: Performance bottleneck due to expensive arithmetic operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Let's integrate these checks into the original C++ code at suitable points:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:16777216")
using namespace std;

// Check functions based on performance-characterizing invariants
void check_loop_iteration_threshold(long long b) {
    if (b > 1000000) {
        cerr << "Warning: Performance bottleneck due to high number of loop iterations!" << endl;
        abort();
    }
}

void check_repeated_modulo_calculations(long long b) {
    if (b > 1000000) {
        cerr << "Warning: Performance bottleneck due to repeated modulo calculations!" << endl;
        abort();
    }
}

void check_arithmetic_operations(long long b) {
    if (b > 1000000) {
        cerr << "Warning: Performance bottleneck due to expensive arithmetic operations!" << endl;
        abort();
    }
}

long long power(long long x, long long y, long long m = 1000000000000000007) {
    if (!y) return 1;
    if (y % 2) return x * power(x, y - 1, m) % m;
    long long k = power(x, y / 2, m);
    return k * k % m;
}

vector<vector<long long>> multy(vector<vector<long long>> x, vector<vector<long long>> y, long long m = 1000000000000000007) {
    vector<vector<long long>> z;
    z.resize(x.size());
    for (int i = 0; i < z.size(); ++i) z[i].assign(y[0].size(), 0);
    for (int k = 0; k < y.size(); ++k)
        for (int i = 0; i < x.size(); ++i)
            for (int j = 0; j < y[0].size(); ++j)
                z[i][j] = (z[i][j] + x[i][k] * y[k][j]) % m;
    return z;
}

vector<vector<long long>> power(vector<vector<long long>> x, long long y, long long m = 1000000000000000007) {
    if (y == 1) return x;
    if (y % 2) return multy(x, power(x, y - 1, m), m);
    vector<vector<long long>> k = power(x, y / 2, m);
    return multy(k, k, m);
}

long double power(long double x, long long y) {
    return exp(log(x) * (long double)y);
}

long long gcd(long long x, long long y) { return y ? gcd(y, x % y) : x; }

long long gcdex(long long a, long long b, long long &x, long long &y) {
    if (a == 0) {
        x = 0;
        y = 1;
        return b;
    }
    long long x1, y1;
    long long d = gcdex(b % a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}

long long lcm(long long x, long long y, long long m = 1000000000000000007) {
    return x / gcd(x, y) * y % m;
}

long long phi(long long n) {
    long long result = n;
    for (long long i = 2; i * i <= n; ++i)
        if (n % i == 0) {
            while (n % i == 0) n /= i;
            result -= result / i;
        }
    if (n > 1) result -= result / n;
    return result;
}

long long rev_el(long long a, long long m) {
    long long x, y;
    long long g = gcdex(a, m, x, y);
    if (g != 1)
        return power(x, phi(m) - 1, m);
    else {
        x = (x % m + m) % m;
        return x;
    }
}

bool isPrime(long long x) {
    if (x <= 1) return false;
    for (long long i = 2; i * i <= x; ++i)
        if (x % i == 0) return false;
    return true;
}

int cnt_dig(long long x) {
    if (!x) return 1;
    int ans = 0;
    while (x) {
        x /= 10;
        ans++;
    }
    return ans;
}

int sum_dig(long long x) {
    long long ans = 0;
    while (x) {
        ans += x % 10;
        x /= 10;
    }
    return ans;
}

int cnt_bit(long long x) {
    int res = 0;
    while (x) {
        res += x & 1;
        x >>= 1;
    }
    return res;
}

long long sqr(long long x, long long m = 1000000000000000007) {
    return x * x % m;
}

long long a, b;

int main() {
    ios::sync_with_stdio(0);
    while (cin >> a >> b) {
        // Check for potential performance bottlenecks
        check_loop_iteration_threshold(b);
        check_repeated_modulo_calculations(b);
        check_arithmetic_operations(b);
        
        long long res = 0;
        long long rev = rev_el(2, 1000000007);
        for (long long g = 1; g < b; ++g) {
            res += (((g * b % 1000000007) * (a + 1) % 1000000007) * a % 1000000007) * rev % 1000000007;
            res %= 1000000007;
            res += g * a;
            res %= 1000000007;
        }
        cout << res << endl;
    }
}
```

**Explanation of Changes:**

- **Inserted Checks**: Each invariant check is implemented as a function and placed immediately after reading input values `a` and `b`, before the main loop begins. This ensures the checks do not interfere with the main loop's performance.
- **Logical Placement**: The checks are placed such that they run once per input, which minimizes their impact on the performance of the main computation.
- **Abort on Violation**: If any check condition is met, the corresponding warning is printed and the program aborts to highlight potential performance issues.

