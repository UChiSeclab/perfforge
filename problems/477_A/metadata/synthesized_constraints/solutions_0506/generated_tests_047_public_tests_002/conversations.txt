system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using i32 = int32_t;
using i64 = int64_t;
using ll = i64;
using uint = uint32_t;
using ull = uint64_t;
template <typename T>
using matrix = vector<vector<T>>;
class range {
 private:
  struct Iter {
    int v;
    int operator*() { return v; }
    bool operator!=(Iter& itr) { return v < itr.v; }
    void operator++() { ++v; }
  };
  Iter i, n;

 public:
  range(int n) : i({0}), n({n}) {}
  range(int i, int n) : i({i}), n({n}) {}
  Iter& begin() { return i; }
  Iter& end() { return n; }
};
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& as) {
  for (int i = (int)(0); i < (int)(as.size()); ++i) {
    if (i != 0) os << " ";
    os << as[i];
  }
  return os;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<vector<T>>& as) {
  for (int i = (int)(0); i < (int)(as.size()); ++i) {
    if (i != 0) os << endl;
    os << as[i];
  }
  return os;
}
template <typename T>
ostream& operator<<(ostream& os, const set<T>& ss) {
  for (auto a : ss) {
    if (a != ss.begin()) os << " ";
    os << a;
  }
  return os;
}
template <typename T1, typename T2>
ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
  os << p.first << " " << p.second;
  return os;
}
template <typename K, typename V>
ostream& operator<<(ostream& os, const map<K, V>& m) {
  bool isF = true;
  for (auto& p : m) {
    if (!isF) os << endl;
    os << p;
    isF = false;
  }
  return os;
}
template <typename T1>
ostream& operator<<(ostream& os, const tuple<T1>& t) {
  os << get<0>(t);
  return os;
}
template <typename T1, typename T2>
ostream& operator<<(ostream& os, const tuple<T1, T2>& t) {
  os << get<0>(t) << " " << get<1>(t);
  return os;
}
template <typename T1, typename T2, typename T3>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3>& t) {
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t);
  return os;
}
template <typename T1, typename T2, typename T3, typename T4>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4>& t) {
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t);
  return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5>& t) {
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
     << " " << get<4>(t);
  return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5,
          typename T6>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6>& t) {
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
     << " " << get<4>(t) << " " << get<5>(t);
  return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5,
          typename T6, typename T7>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6, T7>& t) {
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
     << " " << get<4>(t) << " " << get<5>(t) << " " << get<6>(t);
  return os;
}
char tmp[1000];
template <typename T>
T INF() {
  assert(false);
};
template <>
int INF<int>() {
  return 1 << 28;
};
template <>
ll INF<ll>() {
  return 1LL << 58;
};
template <>
double INF<double>() {
  return 1e16;
};
template <class T>
T EPS() {
  assert(false);
};
template <>
int EPS<int>() {
  return 1;
};
template <>
ll EPS<ll>() {
  return 1LL;
};
template <>
double EPS<double>() {
  return 1e-8;
};
template <>
long double EPS<long double>() {
  return 1e-8;
};
template <typename T, typename U>
T pmod(T v, U M) {
  return (v % M + M) % M;
}
template <ll M = (ll)1e9 + 7>
class modU {
 public:
  ll pmod(ll v) { return (v % M + M) % M; }
  ll ainv(ll a) { return pmod(-a); }
  ll add(ll a, ll b) { return pmod(a + b); }
  ll mul(ll a, ll b) { return pmod(a * b); }
  ll mpow(ll x, ll N) {
    ll res = 1;
    while (N > 0) {
      if (N % 2) res = mul(res, x);
      x = mul(x, x);
      N /= 2;
    }
    return res;
  }
  ll minv(ll a) { return mpow(a, M - 2); }
  vector<ll> minvs() {
    vector<ll> inv(M + 1);
    inv[1] = 1;
    for (int i = 2; i <= M; ++i) inv[i] = mul(inv[M % i], M - M / i);
    return inv;
  }
  ll fact(const int N) { return N >= 0 ? 1 : mul(N, fact(N - 1)); }
  ll nPr(const int N, const int r) { return mul(fact(N), minv(fact(N - r))); }
  ll nCr(const int N, const int r) { return mul(nPr(N, r), minv(fact(r))); }
  matrix<ll> nCrs(const int N) {
    matrix<ll> c(N, vector<ll>(N, 0));
    for (int i : range(0, N)) c[i][0] = 1;
    for (int i : range(1, N))
      for (int j : range(1, N)) c[i][j] = add(c[i - 1][j - 1], c[i - 1][j]);
    return c;
  }
};
class Main {
 public:
  void run() {
    modU<(ll)1e9 + 7> mu;
    ll a, b;
    cin >> a >> b;
    ll res = 0;
    const ll div2 = mu.minv(2);
    for (int md = 1; md < b; md++) {
      ll lv = mu.add(mu.mul(md, b), md),
         rv = mu.add(mu.mul(md, mu.mul(a, b)), md);
      res = mu.add(res, mu.mul(mu.mul(a, mu.add(lv, rv)), div2));
    }
    cout << res << endl;
  }
};
int main() {
  cout << fixed << setprecision(20);
  cin.tie(0);
  ios::sync_with_stdio(false);
  Main().run();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 18270115


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using i32 = int32_t; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using i64 = int64_t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using ll = i64; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using uint = uint32_t; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using ull = uint64_t; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using matrix = vector<vector<T>>; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
class range { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  struct Iter { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    int v; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    int operator*() { return v; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    bool operator!=(Iter& itr) { return v < itr.v; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    void operator++() { ++v; } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  Iter i, n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  range(int n) : i({0}), n({n}) {} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  range(int i, int n) : i({i}), n({n}) {} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  Iter& begin() { return i; } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  Iter& end() { return n; } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const vector<T>& as) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (int)(0); i < (int)(as.size()); ++i) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (i != 0) os << " "; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    os << as[i]; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const vector<vector<T>>& as) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (int)(0); i < (int)(as.size()); ++i) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    if (i != 0) os << endl; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    os << as[i]; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const set<T>& ss) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto a : ss) { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    if (a != ss.begin()) os << " "; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    os << a; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pair<T1, T2>& p) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  os << p.first << " " << p.second; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
template <typename K, typename V> /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const map<K, V>& m) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  bool isF = true; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto& p : m) { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    if (!isF) os << endl; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    os << p; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    isF = false; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1> /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1>& t) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t); /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2>& t) { /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2, typename T3> /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2, T3>& t) { /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t); /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2, typename T3, typename T4> /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4>& t) { /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2, typename T3, typename T4, typename T5> /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5>& t) { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t) /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
     << " " << get<4>(t); /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2, typename T3, typename T4, typename T5, /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
          typename T6> /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6>& t) { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t) /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
     << " " << get<4>(t) << " " << get<5>(t); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2, typename T3, typename T4, typename T5, /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
          typename T6, typename T7> /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6, T7>& t) { /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t) /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
     << " " << get<4>(t) << " " << get<5>(t) << " " << get<6>(t); /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
char tmp[1000]; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
T INF() { /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
  assert(false); /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
int INF<int>() { /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
  return 1 << 28; /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
ll INF<ll>() { /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  return 1LL << 58; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
double INF<double>() { /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
  return 1e16; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
T EPS() { /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
  assert(false); /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
int EPS<int>() { /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
ll EPS<ll>() { /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
  return 1LL; /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
double EPS<double>() { /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
  return 1e-8; /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
template <> /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
long double EPS<long double>() { /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
  return 1e-8; /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename U> /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
T pmod(T v, U M) { /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  return (v % M + M) % M; /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
template <ll M = (ll)1e9 + 7> /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
class modU { /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
  ll pmod(ll v) { return (v % M + M) % M; } /* line 149 slow_hit_count: 164431071, fast_hit_count: 45 */
  ll ainv(ll a) { return pmod(-a); } /* line 150 slow_hit_count: 0, fast_hit_count: 0 */
  ll add(ll a, ll b) { return pmod(a + b); } /* line 151 slow_hit_count: 73080456, fast_hit_count: 0 */
  ll mul(ll a, ll b) { return pmod(a * b); } /* line 152 slow_hit_count: 91350615, fast_hit_count: 45 */
  ll mpow(ll x, ll N) { /* line 153 slow_hit_count: 1, fast_hit_count: 1 */
    ll res = 1; /* line 154 slow_hit_count: 1, fast_hit_count: 1 */
    while (N > 0) { /* line 155 slow_hit_count: 31, fast_hit_count: 31 */
      if (N % 2) res = mul(res, x); /* line 156 slow_hit_count: 30, fast_hit_count: 30 */
      x = mul(x, x); /* line 157 slow_hit_count: 30, fast_hit_count: 30 */
      N /= 2; /* line 158 slow_hit_count: 30, fast_hit_count: 30 */
    } /* line 159 slow_hit_count: 0, fast_hit_count: 0 */
    return res; /* line 160 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
  ll minv(ll a) { return mpow(a, M - 2); } /* line 162 slow_hit_count: 1, fast_hit_count: 1 */
  vector<ll> minvs() { /* line 163 slow_hit_count: 0, fast_hit_count: 0 */
    vector<ll> inv(M + 1); /* line 164 slow_hit_count: 0, fast_hit_count: 0 */
    inv[1] = 1; /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 2; i <= M; ++i) inv[i] = mul(inv[M % i], M - M / i); /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
    return inv; /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
  ll fact(const int N) { return N >= 0 ? 1 : mul(N, fact(N - 1)); } /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
  ll nPr(const int N, const int r) { return mul(fact(N), minv(fact(N - r))); } /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
  ll nCr(const int N, const int r) { return mul(nPr(N, r), minv(fact(r))); } /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
  matrix<ll> nCrs(const int N) { /* line 172 slow_hit_count: 0, fast_hit_count: 0 */
    matrix<ll> c(N, vector<ll>(N, 0)); /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i : range(0, N)) c[i][0] = 1; /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i : range(1, N)) /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j : range(1, N)) c[i][j] = add(c[i - 1][j - 1], c[i - 1][j]); /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
    return c; /* line 177 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 178 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
class Main { /* line 180 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
  void run() { /* line 182 slow_hit_count: 1, fast_hit_count: 1 */
    modU<(ll)1e9 + 7> mu; /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
    ll a, b; /* line 184 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 185 slow_hit_count: 1, fast_hit_count: 1 */
    ll res = 0; /* line 186 slow_hit_count: 1, fast_hit_count: 1 */
    const ll div2 = mu.minv(2); /* line 187 slow_hit_count: 1, fast_hit_count: 1 */
    for (int md = 1; md < b; md++) { /* line 188 slow_hit_count: 18270115, fast_hit_count: 1 */
      ll lv = mu.add(mu.mul(md, b), md), /* line 189 slow_hit_count: 18270114, fast_hit_count: 0 */
         rv = mu.add(mu.mul(md, mu.mul(a, b)), md); /* line 190 slow_hit_count: 18270114, fast_hit_count: 0 */
      res = mu.add(res, mu.mul(mu.mul(a, mu.add(lv, rv)), div2)); /* line 191 slow_hit_count: 18270114, fast_hit_count: 0 */
    } /* line 192 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 193 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 194 slow_hit_count: 1, fast_hit_count: 1 */
}; /* line 195 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 196 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed << setprecision(20); /* line 197 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 198 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 199 slow_hit_count: 1, fast_hit_count: 1 */
  Main().run(); /* line 200 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 201 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 202 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck, we need to compare the execution paths for both the fast and slow inputs and determine the conditions that lead to the observed slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The critical line is `for (int md = 1; md < b; md++)` (line 188), which is executed 18,270,115 times for the slow input compared to just once for the fast input.

2. **Pinpointing Lines with Significant Hit Differences**:
   - Lines 189, 190, and 191 are also hit 18,270,114 times during the slow run, indicating that these lines within the loop heavily contribute to the execution time.

3. **Understanding Interaction with Data Structures and Input Constraints**:
   - The loop runs from `md = 1` to `md < b`, suggesting that the value of `b` has a direct impact on performance. Larger `b` values result in more iterations, hence more computations, leading to slow performance.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Descriptions**:

   **Invariant #1: High Complexity Loop Driven by Input Value**
   - **Natural Language Description**: "When the second input `b` is large, the program may slow down due to the high number of iterations in a critical loop. The loop's execution time is directly proportional to the square of `b`."
   
   - **Explanation**: This captures the essence of the slowdown being tied to the size of `b`. The program's performance is significantly impacted when `b` approaches its upper constraint, especially considering the nested nature of operations in the loop.

2. **Suggested Thresholds and Conditions**:
   - Given the constraints, `1 ≤ a, b ≤ 10^7`, it's reasonable to consider cases where `b` is a substantial fraction of the maximum possible value for the input constraint. While we do not use an explicit numerical threshold in the invariant, it's understood that the condition becomes significant when `b` is large.

3. **Broad Conditions for Future Slow Scenarios**:
   - Future inputs that could trigger slowdowns include those where `b` is considerably larger compared to `a`, leading to a high number of iterations in the critical loop. This invariant is helpful for detecting slow paths in similar scenarios where input size and loop iterations are closely related.

By identifying that the loop's execution time is directly tied to the input value `b`, the performance-characterizing invariant provides a clear understanding of when the program may enter a slow path, helping developers and fuzzers alike to predict and diagnose potential performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as per your instructions.

### Phase 3: Implement Natural Language Invariants in C++

From the natural language invariant we derived earlier: "When the second input `b` is large, the program may slow down due to the high number of iterations in a critical loop. The loop's execution time is directly proportional to the size of `b`."

To translate this into a runtime checker in C++, we can implement a function that checks if `b` exceeds a certain threshold. Since the constraint is 1 ≤ a, b ≤ 10^7, we might consider a significant fraction of this maximum to be a practical threshold for demonstration purposes.

```cpp
void check_b_invariant(ll b) {
    // Set a threshold to trigger the bottleneck warning
    if (b > 5000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker into Original Program

Now, let's integrate this checker into the C++ code provided. We'll place the check right after reading the inputs, as this avoids adding overhead in the critical loop itself.

```cpp
#include <bits/stdc++.h>
using namespace std;
using i32 = int32_t;
using i64 = int64_t;
using ll = i64;
using uint = uint32_t;
using ull = uint64_t;
template <typename T>
using matrix = vector<vector<T>>;

void check_b_invariant(ll b) {
    // Set a threshold to trigger the bottleneck warning
    if (b > 5000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

class range {
private:
    struct Iter {
        int v;
        int operator*() { return v; }
        bool operator!=(Iter& itr) { return v < itr.v; }
        void operator++() { ++v; }
    };
    Iter i, n;

public:
    range(int n) : i({0}), n({n}) {}
    range(int i, int n) : i({i}), n({n}) {}
    Iter& begin() { return i; }
    Iter& end() { return n; }
};
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& as) {
    for (int i = (int)(0); i < (int)(as.size()); ++i) {
        if (i != 0) os << " ";
        os << as[i];
    }
    return os;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<vector<T>>& as) {
    for (int i = (int)(0); i < (int)(as.size()); ++i) {
        if (i != 0) os << endl;
        os << as[i];
    }
    return os;
}
template <typename T>
ostream& operator<<(ostream& os, const set<T>& ss) {
    for (auto a : ss) {
        if (a != ss.begin()) os << " ";
        os << a;
    }
    return os;
}
template <typename T1, typename T2>
ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
    os << p.first << " " << p.second;
    return os;
}
template <typename K, typename V>
ostream& operator<<(ostream& os, const map<K, V>& m) {
    bool isF = true;
    for (auto& p : m) {
        if (!isF) os << endl;
        os << p;
        isF = false;
    }
    return os;
}
template <typename T1>
ostream& operator<<(ostream& os, const tuple<T1>& t) {
    os << get<0>(t);
    return os;
}
template <typename T1, typename T2>
ostream& operator<<(ostream& os, const tuple<T1, T2>& t) {
    os << get<0>(t) << " " << get<1>(t);
    return os;
}
template <typename T1, typename T2, typename T3>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3>& t) {
    os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t);
    return os;
}
template <typename T1, typename T2, typename T3, typename T4>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4>& t) {
    os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t);
    return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5>& t) {
    os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
       << " " << get<4>(t);
    return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6>& t) {
    os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
       << " " << get<4>(t) << " " << get<5>(t);
    return os;
}
template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3, T4, T5, T6, T7>& t) {
    os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t) << " " << get<3>(t)
       << " " << get<4>(t) << " " << get<5>(t) << " " << get<6>(t);
    return os;
}
char tmp[1000];
template <typename T>
T INF() {
    assert(false);
};
template <>
int INF<int>() {
    return 1 << 28;
};
template <>
ll INF<ll>() {
    return 1LL << 58;
};
template <>
double INF<double>() {
    return 1e16;
};
template <class T>
T EPS() {
    assert(false);
};
template <>
int EPS<int>() {
    return 1;
};
template <>
ll EPS<ll>() {
    return 1LL;
};
template <>
double EPS<double>() {
    return 1e-8;
};
template <>
long double EPS<long double>() {
    return 1e-8;
};
template <typename T, typename U>
T pmod(T v, U M) {
    return (v % M + M) % M;
}
template <ll M = (ll)1e9 + 7>
class modU {
public:
    ll pmod(ll v) { return (v % M + M) % M; }
    ll ainv(ll a) { return pmod(-a); }
    ll add(ll a, ll b) { return pmod(a + b); }
    ll mul(ll a, ll b) { return pmod(a * b); }
    ll mpow(ll x, ll N) {
        ll res = 1;
        while (N > 0) {
            if (N % 2) res = mul(res, x);
            x = mul(x, x);
            N /= 2;
        }
        return res;
    }
    ll minv(ll a) { return mpow(a, M - 2); }
    vector<ll> minvs() {
        vector<ll> inv(M + 1);
        inv[1] = 1;
        for (int i = 2; i <= M; ++i) inv[i] = mul(inv[M % i], M - M / i);
        return inv;
    }
    ll fact(const int N) { return N >= 0 ? 1 : mul(N, fact(N - 1)); }
    ll nPr(const int N, const int r) { return mul(fact(N), minv(fact(N - r))); }
    ll nCr(const int N, const int r) { return mul(nPr(N, r), minv(fact(r))); }
    matrix<ll> nCrs(const int N) {
        matrix<ll> c(N, vector<ll>(N, 0));
        for (int i : range(0, N)) c[i][0] = 1;
        for (int i : range(1, N))
            for (int j : range(1, N)) c[i][j] = add(c[i - 1][j - 1], c[i - 1][j]);
        return c;
    }
};
class Main {
public:
    void run() {
        modU<(ll)1e9 + 7> mu;
        ll a, b;
        cin >> a >> b;

        // Check for performance bottleneck condition
        check_b_invariant(b);

        ll res = 0;
        const ll div2 = mu.minv(2);
        for (int md = 1; md < b; md++) {
            ll lv = mu.add(mu.mul(md, b), md),
                rv = mu.add(mu.mul(md, mu.mul(a, b)), md);
            res = mu.add(res, mu.mul(mu.mul(a, mu.add(lv, rv)), div2));
        }
        cout << res << endl;
    }
};
int main() {
    cout << fixed << setprecision(20);
    cin.tie(0);
    ios::sync_with_stdio(false);
    Main().run();
    return 0;
}
```

### Explanation

- **Checker Placement**: The check is placed immediately after reading the inputs `a` and `b`. This ensures that if `b` is excessively large (over 5,000,000 in this example), the program will abort to warn about potential performance issues.
- **Threshold**: The threshold is set at 5,000,000 to demonstrate a safe yet illustrative boundary. Adjust this based on real-world testing constraints and needs.
- **Abort on Trigger**: The function will print a warning and abort if the condition is met, providing immediate feedback during testing and development.

