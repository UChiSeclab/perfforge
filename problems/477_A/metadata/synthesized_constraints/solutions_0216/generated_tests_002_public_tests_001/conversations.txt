system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int P = 1000000007;
int a, b, mo, ans, _2;
int Pow(int a, int b) {
  int res = 1;
  for (; b; b >>= 1, a = 1ll * a * a % P)
    if (b & 1) res = 1ll * res * a % P;
  return res;
}
int calc(int a0, int d, int n) {
  int an = a0 + 1ll * d * (n - 1) % P;
  an %= P;
  int res = (a0 + an) % P * 1ll * n % P * 1ll * _2 % P;
  return res;
}
int main() {
  scanf("%d%d", &a, &b);
  _2 = Pow(2, P - 2);
  for (mo = 1; mo < b; mo++) {
    ans += calc((mo + 1ll * b * mo) % P, (1ll * b * mo) % P, a);
    if (ans >= P) ans -= P;
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 18270115


(G.2) Fast Input

2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int P = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, mo, ans, _2; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int Pow(int a, int b) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int res = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (; b; b >>= 1, a = 1ll * a * a % P) /* line 7 slow_hit_count: 31, fast_hit_count: 31 */
    if (b & 1) res = 1ll * res * a % P; /* line 8 slow_hit_count: 30, fast_hit_count: 30 */
  return res; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int calc(int a0, int d, int n) { /* line 11 slow_hit_count: 18270114, fast_hit_count: 1 */
  int an = a0 + 1ll * d * (n - 1) % P; /* line 12 slow_hit_count: 18270114, fast_hit_count: 1 */
  an %= P; /* line 13 slow_hit_count: 18270114, fast_hit_count: 1 */
  int res = (a0 + an) % P * 1ll * n % P * 1ll * _2 % P; /* line 14 slow_hit_count: 18270114, fast_hit_count: 1 */
  return res; /* line 15 slow_hit_count: 18270114, fast_hit_count: 1 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &a, &b); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  _2 = Pow(2, P - 2); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (mo = 1; mo < b; mo++) { /* line 20 slow_hit_count: 18270115, fast_hit_count: 2 */
    ans += calc((mo + 1ll * b * mo) % P, (1ll * b * mo) % P, a); /* line 21 slow_hit_count: 18270114, fast_hit_count: 1 */
    if (ans >= P) ans -= P; /* line 22 slow_hit_count: 18270114, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C code and derive performance-characterizing invariants, let's go through both phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - Several lines have drastically higher hit counts in the slow input compared to the fast input. Notably, the `calc` function (lines 11-15) and the loop within the `main` function (lines 20-22) have significantly higher hit counts in the slow input scenario.

2. **Pinpointing Suspect Lines/Functions:**
   - **`calc` function (lines 11-15):** This function is called repeatedly, a total of 18,270,114 times for the slow input but only once for the fast input, indicating a potential performance bottleneck.
   - **Loop in `main` (lines 20-22):** The loop iterates `b - 1` times. For the slow input, `b` is 18,270,115, leading to a large number of iterations whereas, for the fast input, it is only 2.

3. **Understanding Interaction with Data Structures:**
   - The performance issue arises from the loop iterating many times (nearly `b` times) and calling the `calc` function each time. This leads to a significant number of expensive arithmetic operations, especially when `b` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language invariants:

1. **Invariant 1: Large `b` Value Leading to Extensive Loop Iterations**
   - Natural Language Description: "When the value of `b` approaches its upper constraint (e.g., close to 10 million), the loop in the program iterates a large number of times, potentially leading to performance degradation due to repeated calls to the `calc` function."
   - This invariant highlights that the performance issue is primarily due to the loop iterating up to `b` times.

2. **Invariant 2: Repeated Arithmetic Operations in `calc`**
   - Natural Language Description: "If the `calc` function is called repeatedly with similar parameters due to a large `b`, the cumulative cost of arithmetic operations becomes significant, slowing down the program."
   - This invariant emphasizes the repeated computational cost within the `calc` function.

3. **Invariant 3: Impact of Arithmetic Complexity**
   - Natural Language Description: "When `b` is large, the arithmetic operations inside the loop (calculating modulo and products) are executed frequently, which could lead to a slowdown due to the overhead of these operations."
   - This invariant captures the computational load due to frequent arithmetic operations in the loop.

These invariants abstract away from specific numeric values and focus on conditions that could lead to similar performance issues for any input adhering to the problem's constraints. They are designed to help developers and fuzzers identify scenarios that might lead to performance degradation without relying on exact input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

For each of the performance-characterizing invariants identified in Phase 2, we will write C++ checker code to detect when these conditions are met during execution.

1. **Invariant 1: Large `b` Value Leading to Extensive Loop Iterations**
   - This invariant checks if `b` is large enough to potentially cause performance issues.

```cpp
void check_large_b_invariant(int b) {
    if (b > 1000000) {  // Choose a threshold lower than the maximum constraint to catch potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered due to large value of b!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Repeated Arithmetic Operations in `calc`**
   - This invariant checks the frequency of calls to `calc`, ensuring it's not excessively called.

```cpp
void check_calc_calls_invariant(int numCalls) {
    if (numCalls > 1000000) {  // Threshold for detecting excessive calls
        cerr << "Warning: Performance bottleneck condition triggered due to excessive calls to calc!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, we'll integrate these checkers into the original C++ program. We will add the checks at appropriate locations in the program to monitor the conditions without adding significant overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int P = 1000000007;
int a, b, mo, ans, _2;

// Checker for large 'b' value
void check_large_b_invariant(int b) {
    if (b > 1000000) {  // Threshold chosen to catch potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered due to large value of b!" << endl;
        abort();
    }
}

// Checker for excessive calls to calc
void check_calc_calls_invariant(int numCalls) {
    if (numCalls > 1000000) {  // Threshold for detecting excessive calls
        cerr << "Warning: Performance bottleneck condition triggered due to excessive calls to calc!" << endl;
        abort();
    }
}

int Pow(int a, int b) {
  int res = 1;
  for (; b; b >>= 1, a = 1ll * a * a % P)
    if (b & 1) res = 1ll * res * a % P;
  return res;
}

int calc(int a0, int d, int n) {
  int an = a0 + 1ll * d * (n - 1) % P;
  an %= P;
  int res = (a0 + an) % P * 1ll * n % P * 1ll * _2 % P;
  return res;
}

int main() {
  scanf("%d%d", &a, &b);

  // Check for large 'b' before executing the loop
  check_large_b_invariant(b);

  _2 = Pow(2, P - 2);
  int calcCalls = 0;  // Counter to track the number of calls to calc

  for (mo = 1; mo < b; mo++) {
    ans += calc((mo + 1ll * b * mo) % P, (1ll * b * mo) % P, a);
    calcCalls++;  // Increment the call count

    if (ans >= P) ans -= P;
  }

  // Check for excessive calls to calc after the loop
  check_calc_calls_invariant(calcCalls);

  printf("%d\n", ans);
}
```

### Explanation:
- **`check_large_b_invariant`** is called right after reading the inputs to ensure that `b` isn't too large, which could make the program slow due to excessive loop iterations.
- **`check_calc_calls_invariant`** is used to check the total number of calls to the `calc` function after completing the loop, ensuring that it doesn't exceed a reasonable threshold.
- These checks are placed outside the tight loop to avoid additional execution overhead that could distort performance further.

