system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 1e8;
void foo() {
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(n), c(m), d(m);
  int mx = 0;
  for (int i = 0; i < n; i++) {
    cin >> a[i] >> b[i];
    mx = max(mx, max(a[i], b[i]));
  }
  for (int i = 0; i < m; i++) {
    cin >> c[i] >> d[i];
    mx = max(mx, max(c[i], d[i]));
  }
  vector<pair<int, int> > p;
  vector<int> v(mx + 3);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      int up = max(0, d[j] - b[i] + 1);
      int right = max(0, c[j] - a[i] + 1);
      v[up] = max(v[up], right);
    }
  }
  vector<int> suff_max(mx + 4);
  for (int i = mx + 2; i >= 0; i--) {
    suff_max[i] = max(suff_max[i + 1], v[i]);
  }
  int best = INF;
  for (int i = 0; i < mx + 2; i++) {
    best = min(i + suff_max[i + 1], best);
  }
  cout << best << endl;
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  foo();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
0 0
1000000 1000000


(G.2) Fast Input

1 1
0 0
0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e8; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void foo() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n), b(n), c(m), d(m); /* line 7 slow_hit_count: 5, fast_hit_count: 5 */
  int mx = 0; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a[i] >> b[i]; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    mx = max(mx, max(a[i], b[i])); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> c[i] >> d[i]; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    mx = max(mx, max(c[i], d[i])); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, int> > p; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> v(mx + 3); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
    for (int j = 0; j < m; j++) { /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
      int up = max(0, d[j] - b[i] + 1); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
      int right = max(0, c[j] - a[i] + 1); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
      v[up] = max(v[up], right); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> suff_max(mx + 4); /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = mx + 2; i >= 0; i--) { /* line 27 slow_hit_count: 1000004, fast_hit_count: 4 */
    suff_max[i] = max(suff_max[i + 1], v[i]); /* line 28 slow_hit_count: 1000003, fast_hit_count: 3 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int best = INF; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < mx + 2; i++) { /* line 31 slow_hit_count: 1000003, fast_hit_count: 3 */
    best = min(i + suff_max[i + 1], best); /* line 32 slow_hit_count: 1000002, fast_hit_count: 2 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << best << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  foo(); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottleneck in this C program, let's break down the analysis into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis:**
   - The hit count for the loop at line 27 (`for (int i = mx + 2; i >= 0; i--)`) is significantly higher in the slow input case (1,000,004 hits) compared to the fast input case (4 hits).
   - Similarly, the loop at line 31 (`for (int i = 0; i < mx + 2; i++)`) has a high hit count for the slow input (1,000,003 hits) compared to the fast input (3 hits).

2. **Interaction with Data Structures:**
   - The variable `mx` is calculated as the maximum coordinate value among all robbers and searchlights. This value determines the size of the vectors `v` and `suff_max`.
   - In the slow input, `mx` is 1,000,000, leading to large vectors and loops iterating over these large ranges.

3. **Input Constraints & Relation to Input:**
   - The program's performance is heavily influenced by the maximum coordinate value (`mx`) rather than the number of robbers or searchlights.
   - The loops running up to `mx + 2` contribute to the high computational cost when `mx` is large, regardless of the number of elements (n or m).

### Phase 2: Derive Performance-Characterizing Invariants

Given the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Maximum Coordinate Impact**
   - **Natural Language Description:** "If the maximum coordinate value among robbers or searchlights is very large, the program may perform slowly due to loops iterating over a range proportional to this maximum value."
   - **Threshold Suggestion:** Since the coordinates can go up to \(10^6\), scenarios where `mx` approaches this upper limit will likely trigger slow performance.

2. **Invariant 2: Large Array Initialization and Iteration**
   - **Natural Language Description:** "If the arrays used for computation, sized based on the maximum coordinate, grow excessively in size, this can cause increased memory usage and lengthy computations in subsequent loops."
   - **Threshold Suggestion:** Consider a threshold where `mx` exceeds a certain large value, indicating potential performance degradation due to large array operations.

3. **Invariant 3: Loop Iteration Limits**
   - **Natural Language Description:** "When the calculated range for loop iteration is very large, the cumulative effect of the operations in these loops can lead to significant slowdown."
   - **Threshold Suggestion:** Monitor for scenarios where the loop indices related to `mx` result in loop iteration counts that are significantly high, even if n and m are small.

### Conclusion

This analysis highlights that the program's slow performance is primarily triggered by high values of `mx`, leading to large data structures and extensive loop iterations. To mitigate these performance issues, it would be beneficial to either optimize the handling of large `mx` values or ensure the problem constraints keep `mx` reasonably low in practical scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

Solution (C++ code):
{solution}


assistant: Let's transform the performance-characterizing invariants into C++ runtime checks (Phase 3) and then integrate those checks into the original program (Phase 4).

### Phase 3: Implementing Invariants as C++ Checkers

Based on the natural language invariants derived previously, we will write C++ code snippets for runtime checks:

1. **Invariant 1: Maximum Coordinate Impact**
   - **Checker Code:**
   ```cpp
   void check_max_coordinate_invariant(int max_coordinate) {
       if (max_coordinate > 500000) {  // Arbitrary large threshold for demonstration
           cerr << "Warning: Performance bottleneck due to large maximum coordinate!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Large Array Initialization and Iteration**
   - **Checker Code:**
   ```cpp
   void check_large_array_invariant(int array_size) {
       if (array_size > 500000) {  // Arbitrary large threshold for demonstration
           cerr << "Warning: Performance bottleneck due to large array size!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Loop Iteration Limits**
   - **Checker Code:**
   ```cpp
   void check_loop_iteration_invariant(int loop_range) {
       if (loop_range > 500000) {  // Arbitrary large threshold for demonstration
           cerr << "Warning: Performance bottleneck due to extensive loop iterations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the existing C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 1e8;

void check_max_coordinate_invariant(int max_coordinate) {
    if (max_coordinate > 500000) {  // Arbitrary large threshold for demonstration
        cerr << "Warning: Performance bottleneck due to large maximum coordinate!" << endl;
        abort();
    }
}

void check_large_array_invariant(int array_size) {
    if (array_size > 500000) {  // Arbitrary large threshold for demonstration
        cerr << "Warning: Performance bottleneck due to large array size!" << endl;
        abort();
    }
}

void check_loop_iteration_invariant(int loop_range) {
    if (loop_range > 500000) {  // Arbitrary large threshold for demonstration
        cerr << "Warning: Performance bottleneck due to extensive loop iterations!" << endl;
        abort();
    }
}

void foo() {
    int n, m;
    cin >> n >> m;

    vector<int> a(n), b(n), c(m), d(m);
    int mx = 0;

    for (int i = 0; i < n; i++) {
        cin >> a[i] >> b[i];
        mx = max(mx, max(a[i], b[i]));
    }

    for (int i = 0; i < m; i++) {
        cin >> c[i] >> d[i];
        mx = max(mx, max(c[i], d[i]));
    }

    // Check maximum coordinate invariant after input processing
    check_max_coordinate_invariant(mx);

    vector<pair<int, int>> p;
    vector<int> v(mx + 3);

    // Check large array invariant for vector "v"
    check_large_array_invariant(v.size());

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int up = max(0, d[j] - b[i] + 1);
            int right = max(0, c[j] - a[i] + 1);
            v[up] = max(v[up], right);
        }
    }

    vector<int> suff_max(mx + 4);

    // Check large array invariant for vector "suff_max"
    check_large_array_invariant(suff_max.size());

    for (int i = mx + 2; i >= 0; i--) {
        suff_max[i] = max(suff_max[i + 1], v[i]);
    }

    int best = INF;
    for (int i = 0; i < mx + 2; i++) {
        best = min(i + suff_max[i + 1], best);
    }

    // Check loop iteration invariant for the range of loop
    check_loop_iteration_invariant(mx + 2);

    cout << best << endl;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    foo();
}
```

### Explanation:
- **Check Placement:** The checks are placed after reading input and before executing potentially expensive loops or operations to avoid adding overhead in tight loops.
- **Thresholds:** Arbitrary large thresholds are chosen to demonstrate detection of performance bottlenecks. These should be adjusted based on real data and requirements.
- **Compile and Run:** Ensure that the program compiles cleanly and the checks effectively capture conditions leading to slow performance.

