system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 1e9 + 7;
const long long longinf = 1LL << 60;
const long long mod = 1e9 + 7;
const long double eps = 1e-10;
template <typename T1, typename T2>
inline void chmin(T1 &a, T2 b) {
  if (a > b) a = b;
}
template <typename T1, typename T2>
inline void chmax(T1 &a, T2 b) {
  if (a < b) a = b;
}
void solve() {
  int n, m;
  cin >> n >> m;
  vector<pair<int, int>> P(n);
  vector<pair<int, int>> Q(m);
  for (int i = (int)(0); i < (int)(n); i++) cin >> P[i].first >> P[i].second;
  for (int i = (int)(0); i < (int)(m); i++) cin >> Q[i].first >> Q[i].second;
  set<pair<int, int>> st;
  for (int i = (int)(0); i < (int)(n); i++)
    for (int j = (int)(0); j < (int)(m); j++) {
      int x = Q[j].first - P[i].first;
      int y = Q[j].second - P[i].second;
      if (x < 0 || y < 0) continue;
      st.insert({x, y});
    }
  multiset<long long> mostR;
  for (auto ele : st) mostR.insert(ele.second);
  int ans = inf;
  for (int i = 0; i <= 1000005; i++) {
    if (mostR.empty()) {
      chmin(ans, i);
      break;
    } else {
      chmin(ans, i + *mostR.rbegin() + 1);
    }
    for (auto itr = st.lower_bound({i, 0}); itr != st.upper_bound({i, inf});
         itr++) {
      mostR.erase(mostR.find(itr->second));
    }
  }
  cout << ans << '\n';
}
int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int T = 1;
  while (T--) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
0 0
1000000 1000000


(G.2) Fast Input

1 1
0 0
0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long longinf = 1LL << 60; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-10; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline void chmin(T1 &a, T2 b) { /* line 8 slow_hit_count: 2000004, fast_hit_count: 4 */
  if (a > b) a = b; /* line 9 slow_hit_count: 2000004, fast_hit_count: 4 */
} /* line 10 slow_hit_count: 2000004, fast_hit_count: 4 */
template <typename T1, typename T2> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
inline void chmax(T1 &a, T2 b) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) a = b; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int>> P(n); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  vector<pair<int, int>> Q(m); /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (int)(0); i < (int)(n); i++) cin >> P[i].first >> P[i].second; /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (int)(0); i < (int)(m); i++) cin >> Q[i].first >> Q[i].second; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
  set<pair<int, int>> st; /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (int)(0); i < (int)(n); i++) /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
    for (int j = (int)(0); j < (int)(m); j++) { /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
      int x = Q[j].first - P[i].first; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      int y = Q[j].second - P[i].second; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
      if (x < 0 || y < 0) continue; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
      st.insert({x, y}); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  multiset<long long> mostR; /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto ele : st) mostR.insert(ele.second); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  int ans = inf; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 1000005; i++) { /* line 33 slow_hit_count: 1000002, fast_hit_count: 2 */
    if (mostR.empty()) { /* line 34 slow_hit_count: 1000002, fast_hit_count: 2 */
      chmin(ans, i); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      chmin(ans, i + *mostR.rbegin() + 1); /* line 38 slow_hit_count: 1000001, fast_hit_count: 1 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto itr = st.lower_bound({i, 0}); itr != st.upper_bound({i, inf}); /* line 40 slow_hit_count: 1000002, fast_hit_count: 2 */
         itr++) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
      mostR.erase(mostR.find(itr->second)); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  int T = 1; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  while (T--) solve(); /* line 51 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data from the slow and fast runs, the following observations can be made:

1. **Loop Execution:**  
   - The loop starting at line 33 (`for (int i = 0; i <= 1000005; i++)`) is executed much more frequently during the slow input. It runs 1,000,002 times for the slow input compared to just 2 times for the fast input.
   - The loop contains a call to `chmin` (line 38) which is executed 1,000,001 times for the slow input compared to 1 time for the fast input.

2. **Set Operations:**
   - The `mostR.erase()` operation within the loop (line 42) is hit significantly more in the slow input, with a hit count of 1 compared to 1 for the fast input. This suggests that the set operations, combined with the loop, may be contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Here are natural language statements that describe conditions under which the program may enter a slow path:

1. **Large Iterative Range:**
   - **Invariant:** "If the difference in coordinates between robbers and searchlights is very large, requiring each robber to potentially move up to 1,000,000 units to become unseen, the program may slow down due to excessive loop iterations."
   - **Reasoning:** When the coordinate difference between a robber and a searchlight is large, the outer loop iterates over a broad range, increasing computational time significantly as observed.

2. **Set Operations on Large Data:**
   - **Invariant:** "When the set `st` contains many elements, resulting in frequent additions and deletions from the `mostR` multiset, performance may degrade due to high overhead in managing these data structures."
   - **Reasoning:** The presence of multiple elements in the set can lead to frequent set operations that are computationally expensive.

3. **High Coordinate Values:**
   - **Invariant:** "If the searchlights have very high coordinate values compared to robbers, requiring many moves to become unseen, the program might slow due to the high number of iterations needed to cover the coordinate range."
   - **Reasoning:** The slow path is triggered when searchlights are positioned such that robbers must be moved extensively to escape visibility, causing extensive computation within the loop.

These invariants aim to capture conditions leading to slow performance without specifying exact input values, while remaining within the problem constraints. They provide guidance on recognizing potential performance bottlenecks in similar future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as C++ code snippets (Phase 3) and then integrate these checks into the given C++ program (Phase 4).

### Phase 3: Implement the Invariants as C++ Checker Code

#### Invariant 1: Large Iterative Range
This invariant states that if there are large coordinate differences requiring many moves, the program may slow down.

```cpp
void check_large_iterative_range(int x_max, int y_max) {
    if (x_max > 1000000 || y_max > 1000000) {
        cerr << "Warning: Large iterative range - excessive potential moves!" << endl;
        abort();
    }
}
```

#### Invariant 2: Set Operations on Large Data
This invariant highlights performance degradation due to high overhead in managing large data sets.

```cpp
void check_large_set_operations(const set<pair<int, int>>& st) {
    if (st.size() > 1000000) {
        cerr << "Warning: Large set operations - excessive elements in the set!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Coordinate Values
This invariant suggests that very high searchlight coordinates could trigger slow performance.

```cpp
void check_high_coordinates(pair<int, int> robber, const vector<pair<int, int>>& searchlights) {
    for (const auto& light : searchlights) {
        if (light.first - robber.first > 1000000 || light.second - robber.second > 1000000) {
            cerr << "Warning: High coordinate values requiring excessive moves!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate Checker Code into the Original C++ Program

Now we integrate the above checkers into the original code. These checks should be placed at strategic points to detect performance bottlenecks without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 1e9 + 7;
const long long longinf = 1LL << 60;
const long long mod = 1e9 + 7;
const long double eps = 1e-10;

template <typename T1, typename T2>
inline void chmin(T1 &a, T2 b) {
  if (a > b) a = b;
}

template <typename T1, typename T2>
inline void chmax(T1 &a, T2 b) {
  if (a < b) a = b;
}

// Check for large iterative range
void check_large_iterative_range(int x_max, int y_max) {
    if (x_max > 1000000 || y_max > 1000000) {
        cerr << "Warning: Large iterative range - excessive potential moves!" << endl;
        abort();
    }
}

// Check for large set operations
void check_large_set_operations(const set<pair<int, int>>& st) {
    if (st.size() > 1000000) {
        cerr << "Warning: Large set operations - excessive elements in the set!" << endl;
        abort();
    }
}

// Check for high coordinate values
void check_high_coordinates(pair<int, int> robber, const vector<pair<int, int>>& searchlights) {
    for (const auto& light : searchlights) {
        if (light.first - robber.first > 1000000 || light.second - robber.second > 1000000) {
            cerr << "Warning: High coordinate values requiring excessive moves!" << endl;
            abort();
        }
    }
}

void solve() {
  int n, m;
  cin >> n >> m;
  
  vector<pair<int, int>> P(n);
  vector<pair<int, int>> Q(m);

  for (int i = 0; i < n; i++) cin >> P[i].first >> P[i].second;
  for (int i = 0; i < m; i++) cin >> Q[i].first >> Q[i].second;

  set<pair<int, int>> st;

  for (int i = 0; i < n; i++) {
    check_high_coordinates(P[i], Q); // Check for high coordinate values

    for (int j = 0; j < m; j++) {
      int x = Q[j].first - P[i].first;
      int y = Q[j].second - P[i].second;
      if (x < 0 || y < 0) continue;
      st.insert({x, y});
    }
  }

  check_large_set_operations(st); // Check for large set operations

  multiset<long long> mostR;
  for (auto ele : st) mostR.insert(ele.second);

  int ans = inf;
  for (int i = 0; i <= 1000005; i++) {
    check_large_iterative_range(i, *mostR.rbegin()); // Check for large iterative range

    if (mostR.empty()) {
      chmin(ans, i);
      break;
    } else {
      chmin(ans, i + *mostR.rbegin() + 1);
    }
    for (auto itr = st.lower_bound({i, 0}); itr != st.upper_bound({i, inf}); itr++) {
      mostR.erase(mostR.find(itr->second));
    }
  }
  cout << ans << '\n';
}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int T = 1;
  while (T--) solve();
  return 0;
}
```

This code includes checks at effective points in the data flow to detect potential performance issues without adding significant overhead. Each checker logs a warning and aborts when a condition is triggered, helping to identify and diagnose slow performance scenarios during testing.

