system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 7;
const int M = 22;
const long long mod = 1e9 + 7;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int n, m;
int a[N];
int b[N];
int c[N];
int d[N];
int lg[N];
int dp[N][M];
vector<pair<int, int> > v;
int get(int l, int r) {
  int x = lg[r - l + 1];
  return max(dp[l][x], dp[r - (1 << x) + 1][x]);
}
int can(int x) {
  int l = 0, r = (int)v.size() - 1;
  while (l < r) {
    int m = (l + r) / 2;
    if (v[m + 1].first > x)
      r = m;
    else
      l = m + 1;
  }
  if (v[l].first > x) {
    return x + get(l, (int)v.size() - 1);
  }
  if (v[(int)v.size() - 1].first <= x) {
    return x;
  } else {
    return x + get(l + 1, (int)v.size() - 1);
  }
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    cin >> a[i] >> b[i];
  }
  for (int i = 1; i <= m; i++) {
    cin >> c[i] >> d[i];
  }
  int ans = 1e9;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      if (a[i] <= c[j] && b[i] <= d[j]) {
        v.push_back({c[j] - a[i] + 1, d[j] - b[i] + 1});
      }
    }
  }
  if (v.empty()) {
    cout << 0;
    return 0;
  }
  sort(v.begin(), v.end());
  for (int i = 0; i < (int)v.size(); i++) {
    dp[i][0] = v[i].second;
  }
  int mn = (int)v.size();
  for (int i = 1; i < M; i++) {
    for (int j = 0; j + (1 << i) - 1 < mn; j++) {
      dp[j][i] = max(dp[j][i - 1], dp[j + (1 << i - 1)][i - 1]);
    }
  }
  for (int i = 2; i < N; i++) {
    lg[i] = lg[i / 2] + 1;
  }
  for (int i = 0; i <= 1e6 + 1; i++) {
    ans = min(ans, can(i));
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 3
0 6
6 1
10 1
1 10
7 7


(G.2) Fast Input

2 3
0 12
6 1
10 0
1 4
7 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 22; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int b[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int c[N]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int d[N]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int lg[N]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N][M]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > v; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int get(int l, int r) { /* line 15 slow_hit_count: 8, fast_hit_count: 2 */
  int x = lg[r - l + 1]; /* line 16 slow_hit_count: 8, fast_hit_count: 2 */
  return max(dp[l][x], dp[r - (1 << x) + 1][x]); /* line 17 slow_hit_count: 8, fast_hit_count: 2 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int can(int x) { /* line 19 slow_hit_count: 1000002, fast_hit_count: 1000002 */
  int l = 0, r = (int)v.size() - 1; /* line 20 slow_hit_count: 1000002, fast_hit_count: 1000002 */
  while (l < r) { /* line 21 slow_hit_count: 3000006, fast_hit_count: 1000002 */
    int m = (l + r) / 2; /* line 22 slow_hit_count: 2000004, fast_hit_count: 0 */
    if (v[m + 1].first > x) /* line 23 slow_hit_count: 2000004, fast_hit_count: 0 */
      r = m; /* line 24 slow_hit_count: 10, fast_hit_count: 0 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      l = m + 1; /* line 26 slow_hit_count: 1999994, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (v[l].first > x) { /* line 28 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    return x + get(l, (int)v.size() - 1); /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (v[(int)v.size() - 1].first <= x) { /* line 31 slow_hit_count: 1000000, fast_hit_count: 1000000 */
    return x; /* line 32 slow_hit_count: 999994, fast_hit_count: 1000000 */
  } else { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    return x + get(l + 1, (int)v.size() - 1); /* line 34 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 42 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> a[i] >> b[i]; /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) { /* line 45 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> c[i] >> d[i]; /* line 46 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 1e9; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 49 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 1; j <= m; j++) { /* line 50 slow_hit_count: 8, fast_hit_count: 8 */
      if (a[i] <= c[j] && b[i] <= d[j]) { /* line 51 slow_hit_count: 6, fast_hit_count: 6 */
        v.push_back({c[j] - a[i] + 1, d[j] - b[i] + 1}); /* line 52 slow_hit_count: 4, fast_hit_count: 1 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  if (v.empty()) { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)v.size(); i++) { /* line 61 slow_hit_count: 5, fast_hit_count: 2 */
    dp[i][0] = v[i].second; /* line 62 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  int mn = (int)v.size(); /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < M; i++) { /* line 65 slow_hit_count: 22, fast_hit_count: 22 */
    for (int j = 0; j + (1 << i) - 1 < mn; j++) { /* line 66 slow_hit_count: 25, fast_hit_count: 21 */
      dp[j][i] = max(dp[j][i - 1], dp[j + (1 << i - 1)][i - 1]); /* line 67 slow_hit_count: 4, fast_hit_count: 0 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < N; i++) { /* line 70 slow_hit_count: 1000006, fast_hit_count: 1000006 */
    lg[i] = lg[i / 2] + 1; /* line 71 slow_hit_count: 1000005, fast_hit_count: 1000005 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 1e6 + 1; i++) { /* line 73 slow_hit_count: 1000003, fast_hit_count: 1000003 */
    ans = min(ans, can(i)); /* line 74 slow_hit_count: 1000002, fast_hit_count: 1000002 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose and address the performance bottlenecks in the provided C program, we need to analyze the hit count information and identify which parts of the code are responsible for the slowdown, particularly under the "slow" input scenario. Let's proceed through the prescribed phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - **Lines 21, 22, 23, 24, 26:** The `while` loop and subsequent operations in the `can(int x)` function have a significantly higher hit count in the slow input compared to the fast input (3,000,006 vs. 1,000,002 hits).
   - **Line 67:** The dynamic programming matrix update has hits only in the slow input.

2. **Pinpoint High Hit Lines:**
   - The loop inside the `can(int x)` function is executed a large number of times, which indicates that the binary search logic might be inefficient under certain conditions.
   - The `dp` matrix filling operation in the nested loop is only significant in the slow input, suggesting it plays a role in the slowdown.

3. **Infer Interaction with Data Structures and Loops:**
   - The high hit count in lines within the `can` function suggests that the binary search and subsequent checks are likely the cause of inefficiencies, especially when certain conditions lead to more iterations.
   - The `dp` matrix update in line 67, which uses a form of sparse table logic, may also contribute if it is recalculated excessively due to how elements are arranged or accessed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the inferred performance-characterizing invariants in natural language:

1. **Binary Search Inefficiency:**
   - **Invariant:** "The program may experience slowdown when the list of critical move coordinate differences (v) is large and contains many entries close together, causing the binary search within the `can` function to iterate excessively."
   - **Explanation:** The binary search logic appears to degrade when the list `v` has many closely packed elements, which leads to excessive iterations in the `while` loop.

2. **Dynamic Programming Table Fill:**
   - **Invariant:** "When the number of potential 'unsafe' configurations (v) grows, particularly when the difference values are large, the initial setup of the dynamic programming table takes significantly longer, contributing to the slowdown."
   - **Explanation:** The dynamic programming array `dp` needs to be filled efficiently. If the list `v` is large or has high values, the nested loop fill operation can become costly.

3. **Looping Over Potential Moves:**
   - **Invariant:** "If the number of potential unsafe configurations (`v.size()`) becomes a large percentage of the range being checked (`x` in the loop from 0 to 1,000,000), the check for minimal safe moves can become a bottleneck."
   - **Explanation:** The outer loop that iterates over potential moves (`x`) in the main function might become inefficient due to the large size of `v`, which increases the complexity of each `can(x)` call.

Overall, these invariants point to situations where the input configuration causes the algorithm to perform excessive checks, recalculations, or iterations, leading to the observed slowdown. By identifying these conditions, future slow scenarios can be more effectively detected and mitigated.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

Solution (C++ code):
{solution}


assistant: Let's begin by translating the performance-characterizing invariants into C++ checker code snippets:

### Phase 3: Implementing Natural Language Invariants in C++

1. **Binary Search Inefficiency Checker:**
   - **Invariant:** "The program may experience slowdown when the list of critical move coordinate differences (v) is large and contains many entries close together, causing the binary search within the `can` function to iterate excessively."
   - **Checker Code:**
   ```cpp
   void check_binary_search_invariant(const vector<pair<int, int>>& v) {
       if (v.size() > 1000) {  // Arbitrary threshold based on the size being relatively large
           cerr << "Warning: binary_search_invariant triggered - large list of critical moves" << endl;
           abort();
       }
   }
   ```

2. **Dynamic Programming Table Fill Checker:**
   - **Invariant:** "When the number of potential 'unsafe' configurations (v) grows, particularly when the difference values are large, the initial setup of the dynamic programming table takes significantly longer, contributing to the slowdown."
   - **Checker Code:**
   ```cpp
   void check_dp_table_fill_invariant(const vector<pair<int, int>>& v) {
       if (!v.empty() && v.size() * log2(v.size()) > 10000) {  // Threshold based on typical computational cost
           cerr << "Warning: dp_table_fill_invariant triggered - potential high cost in DP table fill" << endl;
           abort();
       }
   }
   ```

3. **Looping Over Potential Moves Checker:**
   - **Invariant:** "If the number of potential unsafe configurations (`v.size()`) becomes a large percentage of the range being checked (`x` in the loop from 0 to 1,000,000), the check for minimal safe moves can become a bottleneck."
   - **Checker Code:**
   ```cpp
   void check_loop_invariant(size_t v_size) {
       if (v_size > 50000) {  // Arbitrary threshold based on problem constraints
           cerr << "Warning: loop_invariant triggered - excessive potential unsafe configurations" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checker functions into the original C++ program at strategic points to avoid additional overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 7;
const int M = 22;
const long long mod = 1e9 + 7;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int n, m;
int a[N];
int b[N];
int c[N];
int d[N];
int lg[N];
int dp[N][M];
vector<pair<int, int> > v;

// Checker functions
void check_binary_search_invariant(const vector<pair<int, int>>& v) {
    if (v.size() > 1000) {
        cerr << "Warning: binary_search_invariant triggered - large list of critical moves" << endl;
        abort();
    }
}

void check_dp_table_fill_invariant(const vector<pair<int, int>>& v) {
    if (!v.empty() && v.size() * log2(v.size()) > 10000) {
        cerr << "Warning: dp_table_fill_invariant triggered - potential high cost in DP table fill" << endl;
        abort();
    }
}

void check_loop_invariant(size_t v_size) {
    if (v_size > 50000) {
        cerr << "Warning: loop_invariant triggered - excessive potential unsafe configurations" << endl;
        abort();
    }
}

int get(int l, int r) {
    int x = lg[r - l + 1];
    return max(dp[l][x], dp[r - (1 << x) + 1][x]);
}

int can(int x) {
    int l = 0, r = (int)v.size() - 1;

    check_binary_search_invariant(v);  // Check at the start of the binary search

    while (l < r) {
        int m = (l + r) / 2;
        if (v[m + 1].first > x)
            r = m;
        else
            l = m + 1;
    }
    if (v[l].first > x) {
        return x + get(l, (int)v.size() - 1);
    }
    if (v[(int)v.size() - 1].first <= x) {
        return x;
    } else {
        return x + get(l + 1, (int)v.size() - 1);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        cin >> a[i] >> b[i];
    }
    for (int i = 1; i <= m; i++) {
        cin >> c[i] >> d[i];
    }
    int ans = 1e9;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (a[i] <= c[j] && b[i] <= d[j]) {
                v.push_back({c[j] - a[i] + 1, d[j] - b[i] + 1});
            }
        }
    }

    check_loop_invariant(v.size());  // Check after populating v

    if (v.empty()) {
        cout << 0;
        return 0;
    }
    sort(v.begin(), v.end());

    check_dp_table_fill_invariant(v);  // Check before filling DP table

    for (int i = 0; i < (int)v.size(); i++) {
        dp[i][0] = v[i].second;
    }
    int mn = (int)v.size();
    for (int i = 1; i < M; i++) {
        for (int j = 0; j + (1 << i) - 1 < mn; j++) {
            dp[j][i] = max(dp[j][i - 1], dp[j + (1 << i - 1)][i - 1]);
        }
    }
    for (int i = 2; i < N; i++) {
        lg[i] = lg[i / 2] + 1;
    }
    for (int i = 0; i <= 1e6 + 1; i++) {
        ans = min(ans, can(i));
    }
    cout << ans;
}
```

### Explanation of Integration

- **Binary Search Inefficiency Checker:** Placed at the start of the `can` function to ensure it checks before the while loop begins.
- **Dynamic Programming Table Fill Checker:** Inserted before populating the DP table to catch any oversized configurations that could lead to expensive operations.
- **Looping Over Potential Moves Checker:** Inserted after the population of `v` to prevent excessive configurations from proceeding and triggering expensive operations. 

These checks help identify potential bottlenecks without introducing significant overhead in the critical paths of the program.

