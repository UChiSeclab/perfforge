system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long int inf = (long long int)2e18;
const int mod = 1e9 + 7;
bool overflow(long long int a, long long int b) {
  if (a <= (inf + b - 1) / b) return false;
  return true;
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  int n, m;
  cin >> n >> m;
  vector<pair<int, int> > robber(n), light(m);
  for (int i = 0; i < n; i++) {
    cin >> robber[i].first >> robber[i].second;
  }
  for (int i = 0; i < m; i++) {
    cin >> light[i].first >> light[i].second;
  }
  sort(light.begin(), light.end());
  sort(robber.begin(), robber.end());
  int sufmax[m + 1];
  sufmax[m] = 0;
  for (int i = m - 1; i >= 0; i--)
    sufmax[i] = max(sufmax[i + 1], light[i].second);
  int mini = 1e9;
  for (int i = 0; i < 1e6 + 2; i++) {
    int req = 0, k = 0, j;
    for (j = 0; j < n; j++) {
      while (k < m && light[k].first < robber[j].first + i) k++;
      if (k == m) break;
      req = max(req, sufmax[k] - robber[j].second + 1);
    }
    mini = min(mini, req + i);
    if (j == 0 || i > mini) break;
  }
  cout << mini << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
0 0
1000000 1000000


(G.2) Fast Input

1 1
0 0
0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long int inf = (long long int)2e18; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool overflow(long long int a, long long int b) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (a <= (inf + b - 1) / b) return false; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  int n, m; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > robber(n), light(m); /* line 16 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < n; i++) { /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> robber[i].first >> robber[i].second; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> light[i].first >> light[i].second; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  sort(light.begin(), light.end()); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  sort(robber.begin(), robber.end()); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int sufmax[m + 1]; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  sufmax[m] = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = m - 1; i >= 0; i--) /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
    sufmax[i] = max(sufmax[i + 1], light[i].second); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int mini = 1e9; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 1e6 + 2; i++) { /* line 30 slow_hit_count: 1000002, fast_hit_count: 2 */
    int req = 0, k = 0, j; /* line 31 slow_hit_count: 1000002, fast_hit_count: 2 */
    for (j = 0; j < n; j++) { /* line 32 slow_hit_count: 2000003, fast_hit_count: 3 */
      while (k < m && light[k].first < robber[j].first + i) k++; /* line 33 slow_hit_count: 1000003, fast_hit_count: 3 */
      if (k == m) break; /* line 34 slow_hit_count: 1000002, fast_hit_count: 2 */
      req = max(req, sufmax[k] - robber[j].second + 1); /* line 35 slow_hit_count: 1000001, fast_hit_count: 1 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    mini = min(mini, req + i); /* line 37 slow_hit_count: 1000002, fast_hit_count: 2 */
    if (j == 0 || i > mini) break; /* line 38 slow_hit_count: 1000002, fast_hit_count: 2 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mini << "\n"; /* line 40 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 41 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the problem of slow performance in the provided C program, we need to analyze the line-level hit counts and identify bottlenecks. Based on the hit counts and the program's structure, we can derive performance-characterizing invariants. Here's the analysis broken down into phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

1. **Line 30**: `for (int i = 0; i < 1e6 + 2; i++)` is hit 1,000,002 times for the slow input but only 2 times for the fast input. This indicates that this outer loop runs extensively during the slow input.
   
2. **Line 32**: `for (j = 0; j < n; j++)` is hit 2,000,003 times with the slow input, suggesting a nested loop structure that significantly contributes to the execution time.
   
3. **Line 33**: The `while` loop `while (k < m && light[k].first < robber[j].first + i)` also has a significant number of hits, 1,000,003 times for the slow input, indicating a potential bottleneck when evaluating conditions inside nested loops.

**Inference:**

- The combination of the outer loop iterating up to 1,000,002 times and the nested loops indicates a performance bottleneck. The condition in the `while` loop and the nested structure contribute to the high number of iterations, especially as the number of searchlights and robbers increases.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies and the problem constraints, we can derive the following natural language performance invariants:

1. **Invariant on Outer Loop Iterations:**
   - **Natural Language Description:** "The program may slow down significantly if the number of iterations in the outer loop becomes excessively large, particularly when it approaches the maximum allowed coordinate space."
   - **Reasoning:** This invariant captures the inefficiency when the loop iterates unnecessarily many times due to the search for a safe configuration in a large coordinate space.

2. **Invariant on Nested Loop Structure:**
   - **Natural Language Description:** "When there is a large number of searchlights relative to robbers, the nested loop operations may cause performance degradation, especially as the conditions within loops lead to multiple evaluations across potential positions."
   - **Reasoning:** This invariant highlights the scenario where increasing iterations in the nested loop, possibly combined with condition checks, cause significant slowdowns.

3. **Invariant on Searchlight and Robber Positions:**
   - **Natural Language Description:** "If the searchlights are positioned such that they constantly overlap with the potential positions of robbers, the program may experience a slowdown due to repeated checks and recalculations for safety."
   - **Reasoning:** This captures the slowdown due to unfavorable position configurations which lead to repeated evaluations without finding a safe configuration.

### Conclusion

These performance-characterizing invariants abstract the core reasons behind the slowdown without relying on specific numeric values from the inputs. They provide a general framework to understand and potentially mitigate the performance issues in similar scenarios. The focus is on loop iteration scales, the relative number of entities (robbers and searchlights), and the interaction of their positions, all while adhering to the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Based on the natural language invariants derived previously, I will now write C++ code snippets to implement runtime checks for these conditions.

#### Invariant 1: Outer Loop Iteration Check
- **Invariant Description:** The program may slow down significantly if the number of iterations in the outer loop becomes excessively large, particularly when it approaches the maximum allowed coordinate space.

```cpp
void check_outer_loop_invariant(int i) {
    if (i >= 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive outer loop iterations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Nested Loop Structure Check
- **Invariant Description:** When there is a large number of searchlights relative to robbers, the nested loop operations may cause performance degradation, especially as the conditions within loops lead to multiple evaluations across potential positions.

```cpp
void check_nested_loop_invariant(int n, int m) {
    if (m > n * 10) {  // Arbitrary chosen threshold indicating significant imbalance
        cerr << "Warning: Performance bottleneck condition triggered - inefficient nested loop operations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Searchlight and Robber Positions Check
- **Invariant Description:** If the searchlights are positioned such that they constantly overlap with the potential positions of robbers, the program may experience a slowdown due to repeated checks and recalculations for safety.

```cpp
void check_position_invariant(const vector<pair<int, int>>& robber, const vector<pair<int, int>>& light) {
    for (const auto& r : robber) {
        for (const auto& l : light) {
            if (r.first <= l.first && r.second <= l.second) {
                cerr << "Warning: Performance bottleneck condition triggered - unfavorable position overlap!" << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, I will integrate these checkers into the existing C++ program. The checkers will be placed at strategic points in the code to monitor for potential performance issues without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long int inf = (long long int)2e18;
const int mod = 1e9 + 7;

void check_outer_loop_invariant(int i) {
    if (i >= 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive outer loop iterations!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n, int m) {
    if (m > n * 10) {  // Arbitrary chosen threshold indicating significant imbalance
        cerr << "Warning: Performance bottleneck condition triggered - inefficient nested loop operations!" << endl;
        abort();
    }
}

void check_position_invariant(const vector<pair<int, int>>& robber, const vector<pair<int, int>>& light) {
    for (const auto& r : robber) {
        for (const auto& l : light) {
            if (r.first <= l.first && r.second <= l.second) {
                cerr << "Warning: Performance bottleneck condition triggered - unfavorable position overlap!" << endl;
                abort();
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n, m;
    cin >> n >> m;
    vector<pair<int, int> > robber(n), light(m);
    for (int i = 0; i < n; i++) {
        cin >> robber[i].first >> robber[i].second;
    }
    for (int i = 0; i < m; i++) {
        cin >> light[i].first >> light[i].second;
    }
    
    // Check for nested loop imbalance
    check_nested_loop_invariant(n, m);
    
    sort(light.begin(), light.end());
    sort(robber.begin(), robber.end());
    int sufmax[m + 1];
    sufmax[m] = 0;
    for (int i = m - 1; i >= 0; i--)
        sufmax[i] = max(sufmax[i + 1], light[i].second);
    int mini = 1e9;
    for (int i = 0; i < 1e6 + 2; i++) {
        int req = 0, k = 0, j;
        for (j = 0; j < n; j++) {
            while (k < m && light[k].first < robber[j].first + i) k++;
            if (k == m) break;
            req = max(req, sufmax[k] - robber[j].second + 1);
        }
        mini = min(mini, req + i);
        if (j == 0 || i > mini) break;
        
        // Check for excessive loop iterations
        check_outer_loop_invariant(i);
    }
    
    // Check for unfavorable position overlap
    check_position_invariant(robber, light);
    
    cout << mini << "\n";
}
```

### Explanation

- **Outer Loop Check:** This check is placed within the outer loop to abort if the iteration count becomes too high.
- **Nested Loop Check:** Placed after parsing the inputs to immediately detect potential inefficiencies.
- **Position Overlap Check:** This runs after reading all data to catch configurations where robbers and searchlights might overlap, causing inefficiencies.

These checks are designed to help identify bottlenecks specific to performance-inhibiting scenarios described earlier.

