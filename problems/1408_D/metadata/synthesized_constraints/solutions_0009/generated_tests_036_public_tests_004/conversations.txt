system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct node {
  int x, y;
} a[2005], c[2005], d[4000010];
bool cmp(node a, node b) {
  if (a.x == b.x) {
    return a.y < b.y;
  }
  return a.x > b.x;
}
int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  for (int i = 1; i <= n; ++i) {
    scanf("%d%d", &a[i].x, &a[i].y);
  }
  for (int i = 1; i <= m; ++i) {
    scanf("%d%d", &c[i].x, &c[i].y);
  }
  int tot = 0;
  for (int i = 1; i <= m; ++i) {
    int x = c[i].x, y = c[i].y;
    for (int j = 1; j <= n; ++j) {
      int xx = a[j].x, yy = a[j].y;
      if (xx <= x && yy <= y) {
        d[++tot].x = x - xx + 1;
        d[tot].y = y - yy + 1;
      }
    }
  }
  sort(d + 1, d + tot + 1, cmp);
  int ans, w, k = 2, my = d[1].y;
  while (d[k].x == d[1].x) {
    my = max(d[k].y, my);
    ++k;
  }
  w = d[k - 1].x;
  ans = d[k - 1].x;
  for (int i = k; i <= tot; ++i) {
    if (d[i].x != w) {
      w = d[i].x;
      ans = min(ans, d[i].x + my);
    }
    my = max(d[i].y, my);
  }
  ans = min(ans, my);
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 2
1 0
0 0
0 0


(G.2) Fast Input

1 2
0 0
0 0
0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} a[2005], c[2005], d[4000010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(node a, node b) { /* line 6 slow_hit_count: 0, fast_hit_count: 2 */
  if (a.x == b.x) { /* line 7 slow_hit_count: 0, fast_hit_count: 2 */
    return a.y < b.y; /* line 8 slow_hit_count: 0, fast_hit_count: 2 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return a.x > b.x; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &m); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%d%d", &a[i].x, &a[i].y); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; ++i) { /* line 18 slow_hit_count: 3, fast_hit_count: 3 */
    scanf("%d%d", &c[i].x, &c[i].y); /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int tot = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; ++i) { /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
    int x = c[i].x, y = c[i].y; /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
    for (int j = 1; j <= n; ++j) { /* line 24 slow_hit_count: 4, fast_hit_count: 4 */
      int xx = a[j].x, yy = a[j].y; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
      if (xx <= x && yy <= y) { /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
        d[++tot].x = x - xx + 1; /* line 27 slow_hit_count: 0, fast_hit_count: 2 */
        d[tot].y = y - yy + 1; /* line 28 slow_hit_count: 0, fast_hit_count: 2 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  sort(d + 1, d + tot + 1, cmp); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int ans, w, k = 2, my = d[1].y; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (d[k].x == d[1].x) { /* line 34 slow_hit_count: 4000011, fast_hit_count: 2 */
    my = max(d[k].y, my); /* line 35 slow_hit_count: 4000010, fast_hit_count: 1 */
    ++k; /* line 36 slow_hit_count: 4000010, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  w = d[k - 1].x; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ans = d[k - 1].x; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = k; i <= tot; ++i) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    if (d[i].x != w) { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      w = d[i].x; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, d[i].x + my); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    my = max(d[i].y, my); /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  ans = min(ans, my); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", ans); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C code and derive performance-characterizing invariants, we'll follow the two-phase approach described. Let's start with the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts

1. **High Hit Count Loop:**
   - The loop starting at line 34 (`while (d[k].x == d[1].x)`) has a significantly higher hit count in the slow input compared to the fast input. Specifically, it was hit 4,000,011 times for the slow input and only 2 times for the fast input.
   - This suggests that the loop is a major contributor to the slowdown, likely due to the condition `d[k].x == d[1].x` being true for a large number of iterations.

2. **Data Population and Sorting:**
   - The code reads input data and populates an array `d` with potential move counts to make the configuration safe. Later, it sorts this array.
   - The specific inefficiency seems to arise after this sorting, especially in how we are calculating the minimum moves needed.

3. **Inefficient Condition:**
   - The condition `while (d[k].x == d[1].x)` handles cases where multiple elements in `d` have the same `x` value. This leads to the loop processing a large number of elements, especially if many `d[k]` have the same x value as `d[1]`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from the analysis, we can derive the following invariants:

#### Invariant #1: Large Number of Equal `x` Values
- **Natural Language Description:** "If a large number of elements in the sorted list have the same initial x-value, this can lead to excessive iterations in searching for the minimum moves, slowing down the performance."
- **Rationale:** After sorting the `d` array, if many elements `d[k]` have the same x-value as `d[1]`, it causes the loop to iterate excessively over these elements.

#### Invariant #2: Excessive Movement Calculations
- **Natural Language Description:** "If many robbers are initially visible to searchlights requiring similar move adjustments, the calculations for determining safe configurations will become computationally expensive."
- **Rationale:** When many robbers and searchlights result in similar move requirements, the program processes more elements in `d` that require similar handling, increasing the processing load.

#### Invariant #3: High Density of Close Robber and Searchlight Pairs
- **Natural Language Description:** "When robbers and searchlights are densely packed with many requiring similar moves to reach safety, the overhead of checking all these potential moves increases drastically."
- **Rationale:** High density of robbers and searchlights in close proximity causes the array `d` to be populated with many similar entries, leading to inefficiencies in sorting and subsequent calculations.

### Considerations

These invariants are crafted to help identify cases where the program might run into performance issues due to repeated and redundant calculations based on the initial configuration of robbers and searchlights. They reflect patterns rather than specific input values, making them applicable to a variety of inputs within the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n robbers at coordinates (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) and m searchlight at coordinates (c_1, d_1), (c_2, d_2), ..., (c_m, d_m). 

In one move you can move each robber to the right (increase a_i of each robber by one) or move each robber up (increase b_i of each robber by one). Note that you should either increase all a_i or all b_i, you can't increase a_i for some points and b_i for some other points.

Searchlight j can see a robber i if a_i ≤ c_j and b_i ≤ d_j. 

A configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair i,j such that searchlight j can see a robber i).

What is the minimum number of moves you need to perform to reach a safe configuration?

Input

The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000): the number of robbers and the number of searchlight.

Each of the next n lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^6), coordinates of robbers.

Each of the next m lines contains two integers c_i, d_i (0 ≤ c_i, d_i ≤ 10^6), coordinates of searchlights.

Output

Print one integer: the minimum number of moves you need to perform to reach a safe configuration.

Examples

Input


1 1
0 0
2 3


Output


3


Input


2 3
1 6
6 1
10 1
1 10
7 7


Output


4


Input


1 2
0 0
0 0
0 0


Output


1


Input


7 3
0 8
3 8
2 7
0 10
5 5
7 0
3 5
6 6
3 11
11 5


Output


6

Note

In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates (3, 0).

The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates (2, 3) and 3 > 2.

In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates (3, 8), (8, 3).

It's easy the see that the configuration of the robbers is safe.

It can be proved that you can't reach a safe configuration using no more than 3 moves.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Code

To implement the natural language invariants derived from the analysis, I'll create checker functions that can be used to detect potential performance bottlenecks at runtime. Here are the implementations based on each invariant:

#### Invariant #1: Large Number of Equal `x` Values
```cpp
void check_equal_x_values_invariant(int count) {
    if (count > 1000000) { // Arbitrary threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive equal x-values in array d!" << endl;
        abort();
    }
}
```

#### Invariant #2: Excessive Movement Calculations
```cpp
void check_excessive_movement_invariant(int numberOfMovements) {
    if (numberOfMovements > 1000000) { // Threshold for excessive move calculations
        cerr << "Warning: Performance bottleneck condition triggered - excessive movement calculations for safety!" << endl;
        abort();
    }
}
```

#### Invariant #3: High Density of Close Robber and Searchlight Pairs
```cpp
void check_high_density_pairs_invariant(int pairsCount) {
    if (pairsCount > 1000000) { // Threshold for high density of close pairs
        cerr << "Warning: Performance bottleneck condition triggered - high density of close robber-searchlight pairs!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ program at appropriate points, ensuring they do not introduce overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct node {
    int x, y;
} a[2005], c[2005], d[4000010];

bool cmp(node a, node b) {
    if (a.x == b.x) {
        return a.y < b.y;
    }
    return a.x > b.x;
}

// Checker functions for performance invariants
void check_equal_x_values_invariant(int count) {
    if (count > 1000000) { // Arbitrary threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive equal x-values in array d!" << endl;
        abort();
    }
}

void check_excessive_movement_invariant(int numberOfMovements) {
    if (numberOfMovements > 1000000) { // Threshold for excessive move calculations
        cerr << "Warning: Performance bottleneck condition triggered - excessive movement calculations for safety!" << endl;
        abort();
    }
}

void check_high_density_pairs_invariant(int pairsCount) {
    if (pairsCount > 1000000) { // Threshold for high density of close pairs
        cerr << "Warning: Performance bottleneck condition triggered - high density of close robber-searchlight pairs!" << endl;
        abort();
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) {
        scanf("%d%d", &a[i].x, &a[i].y);
    }
    for (int i = 1; i <= m; ++i) {
        scanf("%d%d", &c[i].x, &c[i].y);
    }

    int tot = 0;
    for (int i = 1; i <= m; ++i) {
        int x = c[i].x, y = c[i].y;
        for (int j = 1; j <= n; ++j) {
            int xx = a[j].x, yy = a[j].y;
            if (xx <= x && yy <= y) {
                d[++tot].x = x - xx + 1;
                d[tot].y = y - yy + 1;
            }
        }
    }

    // Check for high density of close robber-searchlight pairs
    check_high_density_pairs_invariant(tot);

    sort(d + 1, d + tot + 1, cmp);

    int ans, w, k = 2, my = d[1].y;

    // Check for excessive equal x-values
    check_equal_x_values_invariant(tot);

    while (d[k].x == d[1].x) {
        my = max(d[k].y, my);
        ++k;
    }

    w = d[k - 1].x;
    ans = d[k - 1].x;
    for (int i = k; i <= tot; ++i) {
        if (d[i].x != w) {
            w = d[i].x;
            ans = min(ans, d[i].x + my);
        }
        my = max(d[i].y, my);
    }
    ans = min(ans, my);

    // Check for excessive movement calculations
    check_excessive_movement_invariant(ans);

    printf("%d\n", ans);
    return 0;
}
```

### Comments on Integration

- **Invariant #1**: The check for excessive equal x-values is placed after the array `d` is populated and before processing the loop that depends heavily on these values.
- **Invariant #2**: The check for excessive movement calculations is placed before the final output to ensure that calculated moves do not exceed a practical threshold.
- **Invariant #3**: The check for high-density pairs is placed immediately after calculating potential movements to identify situations with many close pairs. 

These checks help detect conditions that could lead to performance bottlenecks, allowing for early warning and debugging during testing or usage in fuzzing scenarios.

