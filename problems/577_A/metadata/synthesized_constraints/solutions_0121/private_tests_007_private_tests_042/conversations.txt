system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's consider a table consisting of n rows and n columns. The cell located at the intersection of i-th row and j-th column contains number i × j. The rows and columns are numbered starting from 1.

You are given a positive integer x. Your task is to count the number of cells in a table that contain number x.

Input

The single line contains numbers n and x (1 ≤ n ≤ 105, 1 ≤ x ≤ 109) — the size of the table and the number that we are looking for in the table.

Output

Print a single number: the number of times x occurs in the table.

Examples

Input

10 5


Output

2


Input

6 12


Output

4


Input

5 13


Output

0

Note

A table for the second sample test is given below. The occurrences of number 12 are marked bold. 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, x, ans = 0;
  cin >> n >> x;
  for (int i = 1; i <= n; ++i) {
    double j = (double)x / i;
    if (j - round(j) == 0 && j <= n) ++ans;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, ans = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> x; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 6 slow_hit_count: 100001, fast_hit_count: 2 */
    double j = (double)x / i; /* line 7 slow_hit_count: 100000, fast_hit_count: 1 */
    if (j - round(j) == 0 && j <= n) ++ans; /* line 8 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information and analysis of the code, we can identify performance bottlenecks and derive performance-characterizing invariants as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The loop starting at line 6 is hit significantly more often in the slow input (100,001 times) compared to the fast input (2 times).
   - Lines 7 and 8 are also frequently executed in the slow input, directly corresponding with the loop iterations.

2. **Inference on Code Interaction:**
   - The loop iterates from 1 to `n`, performing a division and checking conditions for each iteration.
   - The computation `j = (double)x / i;` is a division operation and can be costly when executed many times, especially when `n` is large.
   - The condition `j - round(j) == 0` checks if `x` is divisible by `i` without a remainder, contributing to the computational cost when repeatedly evaluated.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Large `n` with Small `x`**
   - **Natural Language Description:** "The program performance degrades significantly when `n` is large and `x` is small, particularly when `x` is 1. This is because the loop iterates `n` times, and the division is performed repeatedly without early termination."
   - **Contextual Threshold:** When `n` is at its upper constraint (e.g., close to 100,000) and `x` is minimal.

2. **Invariant 2: High Loop Iterations with Extensive Computation**
   - **Natural Language Description:** "If `n` is large, leading to many loop iterations, the repeated division and checking for each divisor result in slow performance."
   - **Contextual Threshold:** When the majority of numbers up to `n` are checked for divisibility, especially in cases where `x` has many divisors.

3. **Invariant 3: Division Operations in Large Range**
   - **Natural Language Description:** "When the division operation `(double)x / i` is executed extensively within the loop due to a large `n`, it becomes a bottleneck."
   - **Contextual Threshold:** When `n` is large, and there are no early exits from the loop due to conditions not being met.

These invariants help to characterize scenarios that lead to slow execution, focusing on the range of `n` and `x` values within the provided constraints. They abstract away specific numeric values and instead generalize the conditions that lead to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's consider a table consisting of n rows and n columns. The cell located at the intersection of i-th row and j-th column contains number i × j. The rows and columns are numbered starting from 1.

You are given a positive integer x. Your task is to count the number of cells in a table that contain number x.

Input

The single line contains numbers n and x (1 ≤ n ≤ 105, 1 ≤ x ≤ 109) — the size of the table and the number that we are looking for in the table.

Output

Print a single number: the number of times x occurs in the table.

Examples

Input

10 5


Output

2


Input

6 12


Output

4


Input

5 13


Output

0

Note

A table for the second sample test is given below. The occurrences of number 12 are marked bold. 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant previously derived, we will create a C++ code snippet that checks the corresponding condition at runtime.

1. **Invariant 1: Large `n` with Small `x`**

   - **Natural Language Description:** "The program performance degrades significantly when `n` is large and `x` is small, particularly when `x` is 1. This is because the loop iterates `n` times, and the division is performed repeatedly without early termination."
   - **Checker Code:**
   ```cpp
    void check_small_x_invariant(int n, int x) {
        if (n > 10000 && x == 1) {
            cerr << "Warning: Performance bottleneck condition triggered for large n and small x!" << endl;
            abort();
        }
    }
   ```

2. **Invariant 2: High Loop Iterations with Extensive Computation**

   - **Natural Language Description:** "If `n` is large, leading to many loop iterations, the repeated division and checking for each divisor result in slow performance."
   - **Checker Code:**
   ```cpp
    void check_large_n_invariant(int n) {
        if (n > 50000) {  // A threshold such as 50000 is used for large n
            cerr << "Warning: Potential performance bottleneck due to large number of iterations!" << endl;
            abort();
        }
    }
   ```

3. **Invariant 3: Division Operations in Large Range**

   - **Natural Language Description:** "When the division operation `(double)x / i` is executed extensively within the loop due to a large `n`, it becomes a bottleneck."
   - **Checker Code:**
   ```cpp
    void check_division_invariant(int n, int x) {
        if (n * x > 1e9) {  // An illustrative condition to check for large computational load
            cerr << "Warning: Heavy division operations detected due to large n and x!" << endl;
            abort();
        }
    }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

We will now integrate the checker code into the original C++ program at appropriate points, avoiding placement inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_small_x_invariant(int n, int x) {
    if (n > 10000 && x == 1) {
        cerr << "Warning: Performance bottleneck condition triggered for large n and small x!" << endl;
        abort();
    }
}

void check_large_n_invariant(int n) {
    if (n > 50000) {  // A threshold such as 50000 is used for large n
        cerr << "Warning: Potential performance bottleneck due to large number of iterations!" << endl;
        abort();
    }
}

void check_division_invariant(int n, int x) {
    if (n * x > 1e9) {  // An illustrative condition to check for large computational load
        cerr << "Warning: Heavy division operations detected due to large n and x!" << endl;
        abort();
    }
}

int main() {
    int n, x, ans = 0;
    cin >> n >> x;

    // Insert checkers after input and before the loop
    check_small_x_invariant(n, x);
    check_large_n_invariant(n);
    check_division_invariant(n, x);

    for (int i = 1; i <= n; ++i) {
        double j = (double)x / i;
        if (j - round(j) == 0 && j <= n) ++ans;
    }
    cout << ans << endl;
    return 0;
}
```

**Explanation:**
- The checker functions are defined at the beginning and called after reading inputs, which ensures that the checks do not add overhead inside the main loop.
- Each checker function addresses a specific bottleneck condition derived from the natural language invariants. They trigger warnings and abort execution if the conditions are met.
- These checks help identify performance issues during execution, providing a utility for debugging and optimizing the program.

