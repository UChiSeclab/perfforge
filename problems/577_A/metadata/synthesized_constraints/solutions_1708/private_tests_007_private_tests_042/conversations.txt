system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's consider a table consisting of n rows and n columns. The cell located at the intersection of i-th row and j-th column contains number i × j. The rows and columns are numbered starting from 1.

You are given a positive integer x. Your task is to count the number of cells in a table that contain number x.

Input

The single line contains numbers n and x (1 ≤ n ≤ 105, 1 ≤ x ≤ 109) — the size of the table and the number that we are looking for in the table.

Output

Print a single number: the number of times x occurs in the table.

Examples

Input

10 5


Output

2


Input

6 12


Output

4


Input

5 13


Output

0

Note

A table for the second sample test is given below. The occurrences of number 12 are marked bold. 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool check(int x, int n, int g) {
  int low = 1, high = n;
  while (low <= high) {
    int mid = (low + high) >> 1;
    long long tmp = (long long)x * mid;
    if (tmp == g) return true;
    if (tmp < g)
      low = mid + 1;
    else
      high = mid - 1;
  }
  return false;
}
int main() {
  int n, x;
  while (scanf("%d%d", &n, &x) == 2) {
    int ans = 0;
    for (int i = 1; i <= n; i++) {
      if (check(i, n, x)) ans++;
    }
    printf("%d\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x, int n, int g) { /* line 3 slow_hit_count: 100000, fast_hit_count: 1 */
  int low = 1, high = n; /* line 4 slow_hit_count: 100000, fast_hit_count: 1 */
  while (low <= high) { /* line 5 slow_hit_count: 1699999, fast_hit_count: 1 */
    int mid = (low + high) >> 1; /* line 6 slow_hit_count: 1600000, fast_hit_count: 1 */
    long long tmp = (long long)x * mid; /* line 7 slow_hit_count: 1600000, fast_hit_count: 1 */
    if (tmp == g) return true; /* line 8 slow_hit_count: 1600000, fast_hit_count: 1 */
    if (tmp < g) /* line 9 slow_hit_count: 1599999, fast_hit_count: 0 */
      low = mid + 1; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      high = mid - 1; /* line 12 slow_hit_count: 1599999, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 14 slow_hit_count: 99999, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
  int n, x; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d%d", &n, &x) == 2) { /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    int ans = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 20 slow_hit_count: 100001, fast_hit_count: 2 */
      if (check(i, n, x)) ans++; /* line 21 slow_hit_count: 100000, fast_hit_count: 1 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", ans); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Analysis

Based on the provided hit count data, we can identify the performance bottlenecks in the given C program. Let's analyze the hit counts and pinpoint the expensive operations:

1. **Line 5 (`while (low <= high)`)**: This line has an inordinate number of hits (1,699,999) for the slow input, indicating that the binary search loop in the `check` function is executed very frequently. This is a key part of the slowdown.

2. **Line 6 and Line 7 (`int mid = ...; long long tmp = ...;`)**: These lines inside the loop match the number of times the `while` loop runs, indicating each iteration calculates `mid` and `tmp`.

3. **Line 9, Line 12 (`if (tmp < g) ... high = mid - 1;`)**: These lines show that in most iterations, the adjustment is made by reducing `high`. This suggests that the binary search is not terminating early, which would happen if the condition `tmp == g` is rarely true.

4. **Line 14 (`return false;`)**: This line shows that the function often returns `false`, indicating that `x * mid` rarely equals `g`.

The program is essentially enumerating all possible row indices `i` and checking if any multiple of `i` equals `x` using a binary search. The slowdown for the slow input is due to the extensive search space and repeated failure to find a match for each value of `i`.

### Performance-Characterizing Invariants

1. **High Binary Search Iterations**:
   - **Natural Language Description**: "The program experiences a slowdown when the binary search within the `check` function iterates many times, particularly when `x` is large relative to `n` and the table contains no exact match for most numbers."
   - **Explanation**: When `x` is significantly larger than any `i * j` value (from 1 to `n`), the `check` function must iterate extensively for each row, leading to wasted computational effort.

2. **Lack of Matches Leading to Repeated Inefficient Searches**:
   - **Natural Language Description**: "If the value `x` is unlikely to be found because it is not a multiple of any integers `i` and `j` within the bounds of `n`, the search becomes inefficient and leads to performance degradation."
   - **Explanation**: Since the check function is designed to return `false` often, the effort spent in the binary search is wasted. The slowdown manifests when `x` is not a common product of smaller numbers within the bounds, causing the loop to exhaustively search without finding matches.

3. **Large Table with Minimal Matches**:
   - **Natural Language Description**: "When processing a large table with `n` at its maximum constraint and `x` rarely appearing as a product of row and column indices, the program will slow significantly due to high iteration counts in nested searching."
   - **Explanation**: The problem is exacerbated when `n` is large (e.g., 100,000) and the number of cells containing `x` is small compared to the table size, leading to inefficiencies as most loops and checks result in no match.

### Considerations

- The presented invariants focus on the interaction between the input values `n` and `x`, and how their relationship affects the execution path and efficiency of the binary search. 
- The checks are broad enough to capture future slow scenarios where similar input characteristics lead to inefficiencies, even if specific numeric values differ.
- These invariants identify potential performance issues without hardcoding specific input values, aligning with the constraints and expected input ranges.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's consider a table consisting of n rows and n columns. The cell located at the intersection of i-th row and j-th column contains number i × j. The rows and columns are numbered starting from 1.

You are given a positive integer x. Your task is to count the number of cells in a table that contain number x.

Input

The single line contains numbers n and x (1 ≤ n ≤ 105, 1 ≤ x ≤ 109) — the size of the table and the number that we are looking for in the table.

Output

Print a single number: the number of times x occurs in the table.

Examples

Input

10 5


Output

2


Input

6 12


Output

4


Input

5 13


Output

0

Note

A table for the second sample test is given below. The occurrences of number 12 are marked bold. 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

For each natural language invariant identified earlier, we will write a checker function or inline check using the provided template.

1. **High Binary Search Iterations**:
   - Since the slowdown occurs when the binary search runs extensively for each row index, we can check if the binary search makes a maximum number of iterations, which is a characteristic of inefficient searching.

2. **Lack of Matches Leading to Repeated Inefficient Searches**:
   - We can check if the value `x` is much larger than typical `i * j` values when `n` is at its upper limit.

3. **Large Table with Minimal Matches**:
   - We can check if the table size is large and the result of matching is small.

Here's how we can implement these checks:

```cpp
void check_binary_search_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search iterations!" << endl;
        abort();
    }
}

void check_large_x_relative_to_n(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large x relative to table size!" << endl;
        abort();
    }
}

void check_large_table_minimal_matches(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large table with few matches!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original C++ Program

Below is the final C++ code with the integrated performance checks.

```cpp
#include <bits/stdc++.h>
using namespace std;

bool check(int x, int n, int g) {
    int low = 1, high = n;
    int iterations = 0; // Counter for iterations

    while (low <= high) {
        int mid = (low + high) >> 1;
        long long tmp = (long long)x * mid;
        if (tmp == g) return true;
        if (tmp < g)
            low = mid + 1;
        else
            high = mid - 1;

        iterations++; // Increment iteration count
    }

    // Check if binary search significantly exceeded expected number of iterations
    check_binary_search_iterations(iterations > 20);

    return false;
}

int main() {
    int n, x;
    while (scanf("%d%d", &n, &x) == 2) {
        int ans = 0;

        // Place checks before the loop to avoid overhead
        check_large_x_relative_to_n(x > n * n);
        check_large_table_minimal_matches(n > 10000 && ans < 10);

        for (int i = 1; i <= n; i++) {
            if (check(i, n, x)) ans++;
        }

        printf("%d\n", ans);
    }
    return 0;
}
```

### Explanation of Inserted Checks

1. **Binary Search Iterations**:
   - `check_binary_search_iterations`: Inside the `check` function, after the while loop, we check if the number of iterations exceeds a threshold (20 in this example). This is a heuristic to catch inefficient searches.

2. **Large `x` Relative to `n`**:
   - `check_large_x_relative_to_n`: Before the loop in `main`, checks if `x` is much larger than what we would expect from product of `n` values. If `x` is extremely large, it might trigger inefficient searches.

3. **Large Table with Minimal Matches**:
   - `check_large_table_minimal_matches`: Before the loop in `main`, checks if `n` is large and very few matches are expected based on early observations (`ans` starts low), indicating inefficiency.

These integrations ensure that the program alerts when performance bottlenecks are likely to occur without adding overhead inside critical loops.

