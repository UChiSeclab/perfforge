system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void SolveA() {
  long long r, a;
  cin >> a;
  r = 1 << a;
  cout << r << endl;
}
void IFIF(bool v, function<void()> f0) {
  v ? f0() : [] {}();
}
void _Eor(int n, int idx, function<void(int i)> f) {
  IFIF(idx < n, [&]() {
    f(idx);
    _Eor(n, idx + 1, f);
  });
}
void Eor(int n, function<void(int i)> f) { _Eor(n, 0, f); }
void SolveE() {
  int N;
  cin >> N;
  vector<vector<int>> dis(N, vector<int>(N));
  Eor(N * N, [&](int i) { cin >> dis[i / N][i % N]; });
  Eor(N, [&](int k) {
    Eor(N, [&](int i) {
      Eor(N, [&](int j) {
        IFIF(dis[i][k] + dis[k][j] < dis[i][j],
             [&]() { dis[i][j] = dis[i][k] + dis[k][j]; });
      });
    });
  });
  int r = 0;
  Eor(N * N, [&](int v) {
    int i = v / N;
    int j = v % N;
    IFIF(dis[i][j] > r, [&]() { r = dis[i][j]; });
  });
  cout << r << endl;
}
int main() {
  SolveE();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
0 1 1 1 1 1 1 1 1 100
1 0 1 1 1 1 1 1 1 1
1 1 0 1 1 1 1 1 1 1
1 1 1 0 1 1 1 1 1 1
1 1 1 1 0 1 1 1 1 1
1 1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 0 1 1 1
1 1 1 1 1 1 1 0 1 1
1 1 1 1 1 1 1 1 0 1
100 1 1 1 1 1 1 1 1 0


(G.2) Fast Input

3
0 1 1
1 0 1
1 1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void SolveA() { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long r, a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  r = 1 << a; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cout << r << endl; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void IFIF(bool v, function<void()> f0) { /* line 9 slow_hit_count: 2523, fast_hit_count: 108 */
  v ? f0() : [] {}(); /* line 10 slow_hit_count: 2523, fast_hit_count: 108 */
} /* line 11 slow_hit_count: 2523, fast_hit_count: 108 */
void _Eor(int n, int idx, function<void(int i)> f) { /* line 12 slow_hit_count: 1423, fast_hit_count: 72 */
  IFIF(idx < n, [&]() { /* line 13 slow_hit_count: 1423, fast_hit_count: 72 */
    f(idx); /* line 14 slow_hit_count: 1310, fast_hit_count: 57 */
    _Eor(n, idx + 1, f); /* line 15 slow_hit_count: 1310, fast_hit_count: 57 */
  }); /* line 16 slow_hit_count: 1310, fast_hit_count: 57 */
} /* line 17 slow_hit_count: 1423, fast_hit_count: 72 */
void Eor(int n, function<void(int i)> f) { _Eor(n, 0, f); } /* line 18 slow_hit_count: 113, fast_hit_count: 15 */
void SolveE() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int N; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<int>> dis(N, vector<int>(N)); /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
  Eor(N * N, [&](int i) { cin >> dis[i / N][i % N]; }); /* line 23 slow_hit_count: 101, fast_hit_count: 10 */
  Eor(N, [&](int k) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    Eor(N, [&](int i) { /* line 25 slow_hit_count: 10, fast_hit_count: 3 */
      Eor(N, [&](int j) { /* line 26 slow_hit_count: 100, fast_hit_count: 9 */
        IFIF(dis[i][k] + dis[k][j] < dis[i][j], /* line 27 slow_hit_count: 1110, fast_hit_count: 39 */
             [&]() { dis[i][j] = dis[i][k] + dis[k][j]; }); /* line 28 slow_hit_count: 2, fast_hit_count: 0 */
      }); /* line 29 slow_hit_count: 1000, fast_hit_count: 27 */
    }); /* line 30 slow_hit_count: 100, fast_hit_count: 9 */
  }); /* line 31 slow_hit_count: 10, fast_hit_count: 3 */
  int r = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  Eor(N * N, [&](int v) { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    int i = v / N; /* line 34 slow_hit_count: 100, fast_hit_count: 9 */
    int j = v % N; /* line 35 slow_hit_count: 100, fast_hit_count: 9 */
    IFIF(dis[i][j] > r, [&]() { r = dis[i][j]; }); /* line 36 slow_hit_count: 102, fast_hit_count: 10 */
  }); /* line 37 slow_hit_count: 100, fast_hit_count: 9 */
  cout << r << endl; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  SolveE(); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C++ code and derive performance-characterizing invariants, let's proceed as specified:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The most significant difference in hit counts between slow and fast runs is observed on lines where nested loops operate:
     - Lines 24-31 represent the triple nested loop implementing the Floyd-Warshall algorithm, which computes the shortest paths between all pairs of vertices. These lines have much higher hit counts for the slow input.
     - Specifically, lines 27 and 28 within the innermost loop show substantial activity, indicative of performing many distance updates.

2. **Pinpointing Expensive Sections**:
   - The nested loops in the `Eor` function calls (lines 24-31) are executed `(N^3)` times, where `N` is the number of vertices.
   - Line 27: The check `IFIF(dis[i][k] + dis[k][j] < dis[i][j], ...)` indicates that path updates are attempted for many combinations, but actual updates (line 28) are few.

3. **Infer Interaction with Data Structures**:
   - The dense connectivity in the slow input graph likely causes frequent evaluations in the innermost loop, contributing to higher hit counts.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance invariants can be derived:

1. **High Connectivity and Long Paths**:
   - **Invariant**: "If the graph has many edges with similar weights, especially with `N` close to its maximum constraint (i.e., 10), the computation for shortest paths may involve many redundant checks and updates, leading to performance degradation."
   - **Explanation**: High connectivity with uniform weights results in repetitive evaluations as the algorithm checks many possible paths.

2. **Dense Graph with Few Updates**:
   - **Invariant**: "When the number of updates in the distance matrix is significantly fewer than the number of evaluations in the nested loops, especially with maximal vertex count, the performance degrades due to excessive conditional checks."
   - **Explanation**: The algorithm's efficiency is hampered when many comparisons are performed within the Floyd-Warshall implementation without corresponding updates.

3. **Sparse Beneficial Updates**:
   - **Invariant**: "If the shortest path updates are relatively rare due to one or two very long edges, the code may spend excessive time in the innermost loop of the Floyd-Warshall implementation."
   - **Explanation**: Presence of few longer paths forces numerous checks without fruitful updates, causing slow execution.

These statements strive to encapsulate general conditions that lead to slow performance in the code without relying on specific input values, while adhering to the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the natural language invariants derived earlier into runtime checks in C++:

1. **High Connectivity and Long Paths**:
   ```cpp
   void check_high_connectivity_invariant(const vector<vector<int>>& dis, int N) {
       int similarWeightCount = 0;
       int maxEdges = N * (N - 1) / 2;  // Max number of edges in undirected graph
       for (int i = 0; i < N; ++i) {
           for (int j = i + 1; j < N; ++j) {
               if (dis[i][j] == dis[0][1] && dis[i][j] != 0) { // Check if similar to the first non-zero weight
                   ++similarWeightCount;
               }
           }
       }
       if (similarWeightCount > maxEdges * 0.8) { // Arbitrary threshold of 80% similarity
           cerr << "Warning: High connectivity invariant triggered!" << endl;
           abort();
       }
   }
   ```

2. **Dense Graph with Few Updates**:
   ```cpp
   void check_few_updates_invariant(int updates, int evaluations, int N) {
       if (updates < evaluations * 0.1 && N == 10) { // Less than 10% updates with max N
           cerr << "Warning: Few updates invariant triggered!" << endl;
           abort();
       }
   }
   ```

3. **Sparse Beneficial Updates**:
   ```cpp
   void check_sparse_updates_invariant(const vector<vector<int>>& dis, int N) {
       int longEdgeCount = 0;
       for (int i = 0; i < N; ++i) {
           for (int j = i + 1; j < N; ++j) {
               if (dis[i][j] > 50) { // Arbitrary threshold for long edges
                   ++longEdgeCount;
               }
           }
       }
       if (longEdgeCount > N && N == 10) { // More long edges than nodes with max N
           cerr << "Warning: Sparse updates invariant triggered!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks into the given C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Inserted checker functions
void check_high_connectivity_invariant(const vector<vector<int>>& dis, int N) {
    int similarWeightCount = 0;
    int maxEdges = N * (N - 1) / 2;
    for (int i = 0; i < N; ++i) {
        for (int j = i + 1; j < N; ++j) {
            if (dis[i][j] == dis[0][1] && dis[i][j] != 0) {
                ++similarWeightCount;
            }
        }
    }
    if (similarWeightCount > maxEdges * 0.8) {
        cerr << "Warning: High connectivity invariant triggered!" << endl;
        abort();
    }
}

void check_few_updates_invariant(int updates, int evaluations, int N) {
    if (updates < evaluations * 0.1 && N == 10) {
        cerr << "Warning: Few updates invariant triggered!" << endl;
        abort();
    }
}

void check_sparse_updates_invariant(const vector<vector<int>>& dis, int N) {
    int longEdgeCount = 0;
    for (int i = 0; i < N; ++i) {
        for (int j = i + 1; j < N; ++j) {
            if (dis[i][j] > 50) {
                ++longEdgeCount;
            }
        }
    }
    if (longEdgeCount > N && N == 10) {
        cerr << "Warning: Sparse updates invariant triggered!" << endl;
        abort();
    }
}

void SolveA() {
    long long r, a;
    cin >> a;
    r = 1 << a;
    cout << r << endl;
}

void IFIF(bool v, function<void()> f0) {
    v ? f0() : [] {}();
}

void _Eor(int n, int idx, function<void(int i)> f) {
    IFIF(idx < n, [&]() {
        f(idx);
        _Eor(n, idx + 1, f);
    });
}

void Eor(int n, function<void(int i)> f) { _Eor(n, 0, f); }

void SolveE() {
    int N;
    cin >> N;
    vector<vector<int>> dis(N, vector<int>(N));
    Eor(N * N, [&](int i) { cin >> dis[i / N][i % N]; });
    
    // Call the high connectivity invariant check after reading input
    check_high_connectivity_invariant(dis, N);
    
    int updates = 0;
    Eor(N, [&](int k) {
        Eor(N, [&](int i) {
            Eor(N, [&](int j) {
                IFIF(dis[i][k] + dis[k][j] < dis[i][j],
                     [&]() { dis[i][j] = dis[i][k] + dis[k][j]; ++updates; });
            });
        });
    });
    
    int evaluations = N * N * N;
    // Call the few updates invariant check after the nested loops
    check_few_updates_invariant(updates, evaluations, N);
    
    // Call the sparse updates invariant check
    check_sparse_updates_invariant(dis, N);
    
    int r = 0;
    Eor(N * N, [&](int v) {
        int i = v / N;
        int j = v % N;
        IFIF(dis[i][j] > r, [&]() { r = dis[i][j]; });
    });
    cout << r << endl;
}

int main() {
    SolveE();
    return 0;
}
```

### Explanation

- **High Connectivity Check**: Placed after reading the input to detect high similarity in edge weights early.
- **Few Updates Check**: Placed after the nested loops to capture the relationship between evaluations and updates.
- **Sparse Updates Check**: Placed before concluding to identify scenarios with disproportionately long edges.

These checks are strategically placed to avoid adding unnecessary overhead in the performance-critical sections of the code.

