system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct ExCont {};
struct ExBrk {};
int d[11][11] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
inline int max(int a) { return a; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
int thrExBrk() {
  throw ExBrk();
  return 0;
}
int thrExCont() {
  throw ExCont();
  return 0;
}
int main(void) {
  int N;
  cin >> N;
  int i, j, k;
  try {
    i = 0;
  loadOuter:
    try {
      throw(i < N ? thrExCont() : thrExBrk());
    } catch (ExCont) {
      try {
        j = 0;
      loadInner:
        try {
          throw(j < N ? thrExCont() : thrExBrk());
        } catch (ExCont) {
          cin >> d[i][j];
          ++j;
        }
        goto loadInner;
      } catch (ExBrk) {
      }
      ++i;
    }
    goto loadOuter;
  } catch (ExBrk) {
  }
  try {
    i = 0;
  loadOuter2:
    try {
      throw(i < N ? thrExCont() : thrExBrk());
    } catch (ExCont) {
      try {
        j = 0;
      loadInner2:
        try {
          throw(j < N ? thrExCont() : thrExBrk());
        } catch (ExCont) {
          try {
            k = 0;
          loadInnerInner:
            try {
              throw(k < N ? thrExCont() : thrExBrk());
            } catch (ExCont) {
              d[j][k] = min(d[j][k], d[j][i] + d[i][k]);
              ++k;
            }
            goto loadInnerInner;
          } catch (ExBrk) {
          }
          ++j;
        }
        goto loadInner2;
      } catch (ExBrk) {
      }
      ++i;
    }
    goto loadOuter2;
  } catch (ExBrk) {
  }
  int m = 0;
  m = max(m,
          max(d[0][0],
              max(d[0][1],
                  max(d[0][2],
                      max(d[0][3],
                          max(d[0][4],
                              max(d[0][5],
                                  max(d[0][6],
                                      max(d[0][7],
                                          max(d[0][8],
                                              max(d[0][9], d[0][10])))))))))));
  m = max(m,
          max(d[1][0],
              max(d[1][1],
                  max(d[1][2],
                      max(d[1][3],
                          max(d[1][4],
                              max(d[1][5],
                                  max(d[1][6],
                                      max(d[1][7],
                                          max(d[1][8],
                                              max(d[1][9], d[1][10])))))))))));
  m = max(m,
          max(d[2][0],
              max(d[2][1],
                  max(d[2][2],
                      max(d[2][3],
                          max(d[2][4],
                              max(d[2][5],
                                  max(d[2][6],
                                      max(d[2][7],
                                          max(d[2][8],
                                              max(d[2][9], d[2][10])))))))))));
  m = max(m,
          max(d[3][0],
              max(d[3][1],
                  max(d[3][2],
                      max(d[3][3],
                          max(d[3][4],
                              max(d[3][5],
                                  max(d[3][6],
                                      max(d[3][7],
                                          max(d[3][8],
                                              max(d[3][9], d[3][10])))))))))));
  m = max(m,
          max(d[4][0],
              max(d[4][1],
                  max(d[4][2],
                      max(d[4][3],
                          max(d[4][4],
                              max(d[4][5],
                                  max(d[4][6],
                                      max(d[4][7],
                                          max(d[4][8],
                                              max(d[4][9], d[4][10])))))))))));
  m = max(m,
          max(d[5][0],
              max(d[5][1],
                  max(d[5][2],
                      max(d[5][3],
                          max(d[5][4],
                              max(d[5][5],
                                  max(d[5][6],
                                      max(d[5][7],
                                          max(d[5][8],
                                              max(d[5][9], d[5][10])))))))))));
  m = max(m,
          max(d[6][0],
              max(d[6][1],
                  max(d[6][2],
                      max(d[6][3],
                          max(d[6][4],
                              max(d[6][5],
                                  max(d[6][6],
                                      max(d[6][7],
                                          max(d[6][8],
                                              max(d[6][9], d[6][10])))))))))));
  m = max(m,
          max(d[7][0],
              max(d[7][1],
                  max(d[7][2],
                      max(d[7][3],
                          max(d[7][4],
                              max(d[7][5],
                                  max(d[7][6],
                                      max(d[7][7],
                                          max(d[7][8],
                                              max(d[7][9], d[7][10])))))))))));
  m = max(m,
          max(d[8][0],
              max(d[8][1],
                  max(d[8][2],
                      max(d[8][3],
                          max(d[8][4],
                              max(d[8][5],
                                  max(d[8][6],
                                      max(d[8][7],
                                          max(d[8][8],
                                              max(d[8][9], d[8][10])))))))))));
  m = max(m,
          max(d[9][0],
              max(d[9][1],
                  max(d[9][2],
                      max(d[9][3],
                          max(d[9][4],
                              max(d[9][5],
                                  max(d[9][6],
                                      max(d[9][7],
                                          max(d[9][8],
                                              max(d[9][9], d[9][10])))))))))));
  m = max(
      m, max(d[10][0],
             max(d[10][1],
                 max(d[10][2],
                     max(d[10][3],
                         max(d[10][4],
                             max(d[10][5],
                                 max(d[10][6],
                                     max(d[10][7],
                                         max(d[10][8],
                                             max(d[10][9], d[10][10])))))))))));
  cout << m << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
0 1 1 1 1 1 1 1 1 100
1 0 1 1 1 1 1 1 1 1
1 1 0 1 1 1 1 1 1 1
1 1 1 0 1 1 1 1 1 1
1 1 1 1 0 1 1 1 1 1
1 1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 0 1 1 1
1 1 1 1 1 1 1 0 1 1
1 1 1 1 1 1 1 1 0 1
100 1 1 1 1 1 1 1 1 0


(G.2) Fast Input

3
0 1 1
1 0 1
1 1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct ExCont {}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct ExBrk {}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int d[11][11] = { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
inline int max(int a) { return a; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
inline int max(int a, int b) { return a > b ? a : b; } /* line 13 slow_hit_count: 121, fast_hit_count: 121 */
inline int min(int a, int b) { return a < b ? a : b; } /* line 14 slow_hit_count: 1000, fast_hit_count: 27 */
int thrExBrk() { /* line 15 slow_hit_count: 122, fast_hit_count: 17 */
  throw ExBrk(); /* line 16 slow_hit_count: 122, fast_hit_count: 17 */
  return 0; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int thrExCont() { /* line 19 slow_hit_count: 1220, fast_hit_count: 51 */
  throw ExCont(); /* line 20 slow_hit_count: 1220, fast_hit_count: 51 */
  return 0; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int N; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  try { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    i = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  loadOuter: /* line 29 slow_hit_count: 11, fast_hit_count: 4 */
    try { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      throw(i < N ? thrExCont() : thrExBrk()); /* line 31 slow_hit_count: 11, fast_hit_count: 4 */
    } catch (ExCont) { /* line 32 slow_hit_count: 10, fast_hit_count: 3 */
      try { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        j = 0; /* line 34 slow_hit_count: 10, fast_hit_count: 3 */
      loadInner: /* line 35 slow_hit_count: 110, fast_hit_count: 12 */
        try { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
          throw(j < N ? thrExCont() : thrExBrk()); /* line 37 slow_hit_count: 110, fast_hit_count: 12 */
        } catch (ExCont) { /* line 38 slow_hit_count: 100, fast_hit_count: 9 */
          cin >> d[i][j]; /* line 39 slow_hit_count: 100, fast_hit_count: 9 */
          ++j; /* line 40 slow_hit_count: 100, fast_hit_count: 9 */
        } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        goto loadInner; /* line 42 slow_hit_count: 100, fast_hit_count: 9 */
      } catch (ExBrk) { /* line 43 slow_hit_count: 10, fast_hit_count: 3 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      ++i; /* line 45 slow_hit_count: 10, fast_hit_count: 3 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    goto loadOuter; /* line 47 slow_hit_count: 10, fast_hit_count: 3 */
  } catch (ExBrk) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  try { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    i = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  loadOuter2: /* line 52 slow_hit_count: 11, fast_hit_count: 4 */
    try { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      throw(i < N ? thrExCont() : thrExBrk()); /* line 54 slow_hit_count: 11, fast_hit_count: 4 */
    } catch (ExCont) { /* line 55 slow_hit_count: 10, fast_hit_count: 3 */
      try { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        j = 0; /* line 57 slow_hit_count: 10, fast_hit_count: 3 */
      loadInner2: /* line 58 slow_hit_count: 110, fast_hit_count: 12 */
        try { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
          throw(j < N ? thrExCont() : thrExBrk()); /* line 60 slow_hit_count: 110, fast_hit_count: 12 */
        } catch (ExCont) { /* line 61 slow_hit_count: 100, fast_hit_count: 9 */
          try { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
            k = 0; /* line 63 slow_hit_count: 100, fast_hit_count: 9 */
          loadInnerInner: /* line 64 slow_hit_count: 1100, fast_hit_count: 36 */
            try { /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
              throw(k < N ? thrExCont() : thrExBrk()); /* line 66 slow_hit_count: 1100, fast_hit_count: 36 */
            } catch (ExCont) { /* line 67 slow_hit_count: 1000, fast_hit_count: 27 */
              d[j][k] = min(d[j][k], d[j][i] + d[i][k]); /* line 68 slow_hit_count: 1000, fast_hit_count: 27 */
              ++k; /* line 69 slow_hit_count: 1000, fast_hit_count: 27 */
            } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
            goto loadInnerInner; /* line 71 slow_hit_count: 1000, fast_hit_count: 27 */
          } catch (ExBrk) { /* line 72 slow_hit_count: 100, fast_hit_count: 9 */
          } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
          ++j; /* line 74 slow_hit_count: 100, fast_hit_count: 9 */
        } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
        goto loadInner2; /* line 76 slow_hit_count: 100, fast_hit_count: 9 */
      } catch (ExBrk) { /* line 77 slow_hit_count: 10, fast_hit_count: 3 */
      } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      ++i; /* line 79 slow_hit_count: 10, fast_hit_count: 3 */
    } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    goto loadOuter2; /* line 81 slow_hit_count: 10, fast_hit_count: 3 */
  } catch (ExBrk) { /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  int m = 0; /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  m = max(m, /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[0][0], /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[0][1], /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[0][2], /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[0][3], /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[0][4], /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[0][5], /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[0][6], /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[0][7], /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[0][8], /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[0][9], d[0][10]))))))))))); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[1][0], /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[1][1], /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[1][2], /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[1][3], /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[1][4], /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[1][5], /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[1][6], /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[1][7], /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[1][8], /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[1][9], d[1][10]))))))))))); /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[2][0], /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[2][1], /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[2][2], /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[2][3], /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[2][4], /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[2][5], /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[2][6], /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[2][7], /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[2][8], /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[2][9], d[2][10]))))))))))); /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 118 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[3][0], /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[3][1], /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[3][2], /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[3][3], /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[3][4], /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[3][5], /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[3][6], /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[3][7], /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[3][8], /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[3][9], d[3][10]))))))))))); /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 129 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[4][0], /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[4][1], /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[4][2], /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[4][3], /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[4][4], /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[4][5], /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[4][6], /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[4][7], /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[4][8], /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[4][9], d[4][10]))))))))))); /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 140 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[5][0], /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[5][1], /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[5][2], /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[5][3], /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[5][4], /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[5][5], /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[5][6], /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[5][7], /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[5][8], /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[5][9], d[5][10]))))))))))); /* line 150 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 151 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[6][0], /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[6][1], /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[6][2], /* line 154 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[6][3], /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[6][4], /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[6][5], /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[6][6], /* line 158 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[6][7], /* line 159 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[6][8], /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[6][9], d[6][10]))))))))))); /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 162 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[7][0], /* line 163 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[7][1], /* line 164 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[7][2], /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[7][3], /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[7][4], /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[7][5], /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[7][6], /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[7][7], /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[7][8], /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[7][9], d[7][10]))))))))))); /* line 172 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 173 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[8][0], /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[8][1], /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[8][2], /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[8][3], /* line 177 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[8][4], /* line 178 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[8][5], /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[8][6], /* line 180 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[8][7], /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[8][8], /* line 182 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[8][9], d[8][10]))))))))))); /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
  m = max(m, /* line 184 slow_hit_count: 1, fast_hit_count: 1 */
          max(d[9][0], /* line 185 slow_hit_count: 0, fast_hit_count: 0 */
              max(d[9][1], /* line 186 slow_hit_count: 0, fast_hit_count: 0 */
                  max(d[9][2], /* line 187 slow_hit_count: 0, fast_hit_count: 0 */
                      max(d[9][3], /* line 188 slow_hit_count: 0, fast_hit_count: 0 */
                          max(d[9][4], /* line 189 slow_hit_count: 0, fast_hit_count: 0 */
                              max(d[9][5], /* line 190 slow_hit_count: 0, fast_hit_count: 0 */
                                  max(d[9][6], /* line 191 slow_hit_count: 0, fast_hit_count: 0 */
                                      max(d[9][7], /* line 192 slow_hit_count: 0, fast_hit_count: 0 */
                                          max(d[9][8], /* line 193 slow_hit_count: 0, fast_hit_count: 0 */
                                              max(d[9][9], d[9][10]))))))))))); /* line 194 slow_hit_count: 0, fast_hit_count: 0 */
  m = max( /* line 195 slow_hit_count: 1, fast_hit_count: 1 */
      m, max(d[10][0], /* line 196 slow_hit_count: 0, fast_hit_count: 0 */
             max(d[10][1], /* line 197 slow_hit_count: 0, fast_hit_count: 0 */
                 max(d[10][2], /* line 198 slow_hit_count: 0, fast_hit_count: 0 */
                     max(d[10][3], /* line 199 slow_hit_count: 0, fast_hit_count: 0 */
                         max(d[10][4], /* line 200 slow_hit_count: 0, fast_hit_count: 0 */
                             max(d[10][5], /* line 201 slow_hit_count: 0, fast_hit_count: 0 */
                                 max(d[10][6], /* line 202 slow_hit_count: 0, fast_hit_count: 0 */
                                     max(d[10][7], /* line 203 slow_hit_count: 0, fast_hit_count: 0 */
                                         max(d[10][8], /* line 204 slow_hit_count: 0, fast_hit_count: 0 */
                                             max(d[10][9], d[10][10]))))))))))); /* line 205 slow_hit_count: 0, fast_hit_count: 0 */
  cout << m << endl; /* line 206 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 207 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 208 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis
The provided C code implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a complete graph. The key operations involve triple nested loops, where the most inner loop (line 68) performs an update on the shortest path matrix using the formula:

```cpp
d[j][k] = min(d[j][k], d[j][i] + d[i][k]);
```

The hit count analysis indicates that the `min` function call (line 68) and associated logic are executed significantly more in the slow input compared to the fast input:

- **Line 68**: The `min` function is called 1000 times for the slow input and only 27 times for the fast input.

Since the constraints allow up to `N = 10`, the code performance is heavily dependent on the input graph's structure, especially the relative edge weights and connectivity.

### Pinpointed Issues
- The innermost loop has a complexity of \(O(N^3)\), which is expected for the Floyd-Warshall algorithm. However, the drastic increase in hit counts in line 68 for the slow input suggests that the graph's structure (specifically edge weights) causes more updates to the shortest path matrix.

## Phase 2: Derive Performance-Characterizing Invariants

### Invariants in Natural Language

1. **Presence of a Large Discrepancy in Edge Weights**:
   - Natural Language Description: "If the input graph contains significant discrepancies between edge weights, particularly with some weights near the maximum (100) and others near the minimum (1), the Floyd-Warshall algorithm may experience a high number of updates in its dynamic programming matrix, leading to slower execution."
   
   - Explanation: This is observed in the slow input, where the presence of a high value (100) causes more recalculations as the algorithm attempts to update paths through different routes.

2. **Graph Size at Maximum Constraint**:
   - Natural Language Description: "When the graph's size is at its maximum limit (N=10), combined with complex edge weight distribution, the algorithm's inherent \(O(N^3)\) complexity can lead to slower performance due to the increased number of iterations over larger matrices."
   
   - Explanation: The complexity is cubic with respect to N, and the algorithm automatically becomes slower at the upper boundary of the allowed graph size.

3. **Dense Connectivity with Varied Weights**:
   - Natural Language Description: "In a fully connected graph (complete graph) with diverse edge weights, the computation cost is elevated as each potential path between vertex pairs needs evaluation and updating, especially when edge weights are not uniform."
   
   - Explanation: The complete nature of the graph leads to maximal use of paths, and if there are many short and long edges mixed, the algorithm performs more updates leading to slower performance.

These invariants highlight the interplay between graph size, edge weight distribution, and algorithm complexity, crucial in understanding the performance characteristics of the code under varying inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants as Checker Code

Let's translate the natural language invariants inferred in Phase 2 into C++ code snippets that can be used to check the conditions at runtime.

### Invariant 1: Large Discrepancy in Edge Weights
This invariant checks for large discrepancies in edge weights, which may cause the algorithm to perform more updates.

```cpp
// Checker for large discrepancy in edge weights
void check_edge_weight_discrepancy(int N, int d[11][11]) {
    int max_weight = 0;
    int min_weight = 101; // since weights are ≤ 100

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (i != j) {
                if (d[i][j] > max_weight) max_weight = d[i][j];
                if (d[i][j] < min_weight) min_weight = d[i][j];
            }
        }
    }

    if (max_weight - min_weight >= 50) { // Arbitrary threshold for discrepancy
        cerr << "Warning: Performance bottleneck condition triggered - large discrepancy in edge weights!" << endl;
        abort();
    }
}
```

### Invariant 2: Maximum Graph Size
This invariant checks if the graph size is at its maximum limit (N = 10).

```cpp
// Checker for maximum graph size
void check_max_graph_size(int N) {
    if (N == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - graph size at maximum!" << endl;
        abort();
    }
}
```

### Invariant 3: Dense Connectivity with Varied Weights
The invariant checks for dense connectivity with varied weights.

```cpp
// Checker for dense connectivity with varied weights
void check_dense_connectivity_varied_weights(int N, int d[11][11]) {
    bool has_varied_weights = false;

    for (int i = 0; i < N; ++i) {
        for (int j = i + 1; j < N; ++j) {
            if (d[i][j] != d[0][1]) {
                has_varied_weights = true;
                break;
            }
        }
        if (has_varied_weights) break;
    }

    if (has_varied_weights && N == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - dense connectivity with varied weights!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Original Program

Here is the instrumented C++ program with the performance checkers integrated at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large discrepancy in edge weights
void check_edge_weight_discrepancy(int N, int d[11][11]) {
    int max_weight = 0;
    int min_weight = 101; // since weights are ≤ 100

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (i != j) {
                if (d[i][j] > max_weight) max_weight = d[i][j];
                if (d[i][j] < min_weight) min_weight = d[i][j];
            }
        }
    }

    if (max_weight - min_weight >= 50) { // Arbitrary threshold for discrepancy
        cerr << "Warning: Performance bottleneck condition triggered - large discrepancy in edge weights!" << endl;
        abort();
    }
}

// Checker for maximum graph size
void check_max_graph_size(int N) {
    if (N == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - graph size at maximum!" << endl;
        abort();
    }
}

// Checker for dense connectivity with varied weights
void check_dense_connectivity_varied_weights(int N, int d[11][11]) {
    bool has_varied_weights = false;

    for (int i = 0; i < N; ++i) {
        for (int j = i + 1; j < N; ++j) {
            if (d[i][j] != d[0][1]) {
                has_varied_weights = true;
                break;
            }
        }
        if (has_varied_weights) break;
    }

    if (has_varied_weights && N == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - dense connectivity with varied weights!" << endl;
        abort();
    }
}

struct ExCont {};
struct ExBrk {};
int d[11][11] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
inline int max(int a) { return a; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
int thrExBrk() {
  throw ExBrk();
  return 0;
}
int thrExCont() {
  throw ExCont();
  return 0;
}
int main(void) {
  int N;
  cin >> N;
  int i, j, k;
  try {
    i = 0;
  loadOuter:
    try {
      throw(i < N ? thrExCont() : thrExBrk());
    } catch (ExCont) {
      try {
        j = 0;
      loadInner:
        try {
          throw(j < N ? thrExCont() : thrExBrk());
        } catch (ExCont) {
          cin >> d[i][j];
          ++j;
        }
        goto loadInner;
      } catch (ExBrk) {
      }
      ++i;
    }
    goto loadOuter;
  } catch (ExBrk) {
  }

  // Insert invariant checks after input is loaded
  check_edge_weight_discrepancy(N, d);
  check_max_graph_size(N);
  check_dense_connectivity_varied_weights(N, d);

  try {
    i = 0;
  loadOuter2:
    try {
      throw(i < N ? thrExCont() : thrExBrk());
    } catch (ExCont) {
      try {
        j = 0;
      loadInner2:
        try {
          throw(j < N ? thrExCont() : thrExBrk());
        } catch (ExCont) {
          try {
            k = 0;
          loadInnerInner:
            try {
              throw(k < N ? thrExCont() : thrExBrk());
            } catch (ExCont) {
              d[j][k] = min(d[j][k], d[j][i] + d[i][k]);
              ++k;
            }
            goto loadInnerInner;
          } catch (ExBrk) {
          }
          ++j;
        }
        goto loadInner2;
      } catch (ExBrk) {
      }
      ++i;
    }
    goto loadOuter2;
  } catch (ExBrk) {
  }
  int m = 0;
  m = max(m,
          max(d[0][0],
              max(d[0][1],
                  max(d[0][2],
                      max(d[0][3],
                          max(d[0][4],
                              max(d[0][5],
                                  max(d[0][6],
                                      max(d[0][7],
                                          max(d[0][8],
                                              max(d[0][9], d[0][10])))))))))));
  m = max(m,
          max(d[1][0],
              max(d[1][1],
                  max(d[1][2],
                      max(d[1][3],
                          max(d[1][4],
                              max(d[1][5],
                                  max(d[1][6],
                                      max(d[1][7],
                                          max(d[1][8],
                                              max(d[1][9], d[1][10])))))))))));
  m = max(m,
          max(d[2][0],
              max(d[2][1],
                  max(d[2][2],
                      max(d[2][3],
                          max(d[2][4],
                              max(d[2][5],
                                  max(d[2][6],
                                      max(d[2][7],
                                          max(d[2][8],
                                              max(d[2][9], d[2][10])))))))))));
  m = max(m,
          max(d[3][0],
              max(d[3][1],
                  max(d[3][2],
                      max(d[3][3],
                          max(d[3][4],
                              max(d[3][5],
                                  max(d[3][6],
                                      max(d[3][7],
                                          max(d[3][8],
                                              max(d[3][9], d[3][10])))))))))));
  m = max(m,
          max(d[4][0],
              max(d[4][1],
                  max(d[4][2],
                      max(d[4][3],
                          max(d[4][4],
                              max(d[4][5],
                                  max(d[4][6],
                                      max(d[4][7],
                                          max(d[4][8],
                                              max(d[4][9], d[4][10])))))))))));
  m = max(m,
          max(d[5][0],
              max(d[5][1],
                  max(d[5][2],
                      max(d[5][3],
                          max(d[5][4],
                              max(d[5][5],
                                  max(d[5][6],
                                      max(d[5][7],
                                          max(d[5][8],
                                              max(d[5][9], d[5][10])))))))))));
  m = max(m,
          max(d[6][0],
              max(d[6][1],
                  max(d[6][2],
                      max(d[6][3],
                          max(d[6][4],
                              max(d[6][5],
                                  max(d[6][6],
                                      max(d[6][7],
                                          max(d[6][8],
                                              max(d[6][9], d[6][10])))))))))));
  m = max(m,
          max(d[7][0],
              max(d[7][1],
                  max(d[7][2],
                      max(d[7][3],
                          max(d[7][4],
                              max(d[7][5],
                                  max(d[7][6],
                                      max(d[7][7],
                                          max(d[7][8],
                                              max(d[7][9], d[7][10])))))))))));
  m = max(m,
          max(d[8][0],
              max(d[8][1],
                  max(d[8][2],
                      max(d[8][3],
                          max(d[8][4],
                              max(d[8][5],
                                  max(d[8][6],
                                      max(d[8][7],
                                          max(d[8][8],
                                              max(d[8][9], d[8][10])))))))))));
  m = max(m,
          max(d[9][0],
              max(d[9][1],
                  max(d[9][2],
                      max(d[9][3],
                          max(d[9][4],
                              max(d[9][5],
                                  max(d[9][6],
                                      max(d[9][7],
                                          max(d[9][8],
                                              max(d[9][9], d[9][10])))))))))));
  m = max(
      m, max(d[10][0],
             max(d[10][1],
                 max(d[10][2],
                     max(d[10][3],
                         max(d[10][4],
                             max(d[10][5],
                                 max(d[10][6],
                                     max(d[10][7],
                                         max(d[10][8],
                                             max(d[10][9], d[10][10])))))))))));
  cout << m << endl;
  return 0;
}
```

### Comments:
- **Checkers**: Three checkers are implemented to capture potential performance bottlenecks.
- **Placement**: The checkers are placed after input reading and before the main computational loop, ensuring they don't add overhead inside tight loops.
- **Thresholds**: The chosen thresholds are based on problem constraints, ensuring correctness without relying on specific input values.

