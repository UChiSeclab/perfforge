system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 10;
const int inf = 1 << 29;
int d[N][N];
int loop(function<bool()> ok, function<void()> increment,
         function<void()> work) {
  return ok() ? work(), increment(), loop(ok, increment, work) : 0;
}
int main() {
  int n;
  scanf("%d", &n);
  {
    int i = 0;
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
         [&i, &n]() {
           int j = 0;
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                [&i, &j]() { scanf("%d", d[i] + j); });
         });
  }
  {
    int k = 0;
    loop([&k, &n]() -> bool { return k < n; }, [&k]() { ++k; },
         [&k, &n]() {
           int i = 0;
           loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
                [&k, &i, &n]() {
                  int j = 0;
                  loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                       [&k, &i, &j]() {
                         d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
                       });
                });
         });
  }
  int ans = 0;
  {
    int i = 0;
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
         [&i, &n, &ans]() {
           int j = 0;
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                [&i, &j, &ans]() { ans = max(ans, d[i][j]); });
         });
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
0 1 1 1 1 1 1 1 1 100
1 0 1 1 1 1 1 1 1 1
1 1 0 1 1 1 1 1 1 1
1 1 1 0 1 1 1 1 1 1
1 1 1 1 0 1 1 1 1 1
1 1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 0 1 1 1
1 1 1 1 1 1 1 0 1 1
1 1 1 1 1 1 1 1 0 1
100 1 1 1 1 1 1 1 1 0


(G.2) Fast Input

3
0 1 1
1 0 1
1 1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1 << 29; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int d[N][N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int loop(function<bool()> ok, function<void()> increment, /* line 6 slow_hit_count: 1463, fast_hit_count: 84 */
         function<void()> work) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return ok() ? work(), increment(), loop(ok, increment, work) : 0; /* line 8 slow_hit_count: 1463, fast_hit_count: 84 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    int i = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; }, /* line 15 slow_hit_count: 43, fast_hit_count: 15 */
         [&i, &n]() { /* line 16 slow_hit_count: 20, fast_hit_count: 6 */
           int j = 0; /* line 17 slow_hit_count: 10, fast_hit_count: 3 */
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; }, /* line 18 slow_hit_count: 430, fast_hit_count: 45 */
                [&i, &j]() { scanf("%d", d[i] + j); }); /* line 19 slow_hit_count: 100, fast_hit_count: 9 */
         }); /* line 20 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    int k = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    loop([&k, &n]() -> bool { return k < n; }, [&k]() { ++k; }, /* line 24 slow_hit_count: 43, fast_hit_count: 15 */
         [&k, &n]() { /* line 25 slow_hit_count: 20, fast_hit_count: 6 */
           int i = 0; /* line 26 slow_hit_count: 10, fast_hit_count: 3 */
           loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; }, /* line 27 slow_hit_count: 430, fast_hit_count: 45 */
                [&k, &i, &n]() { /* line 28 slow_hit_count: 200, fast_hit_count: 18 */
                  int j = 0; /* line 29 slow_hit_count: 100, fast_hit_count: 9 */
                  loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; }, /* line 30 slow_hit_count: 4300, fast_hit_count: 135 */
                       [&k, &i, &j]() { /* line 31 slow_hit_count: 2000, fast_hit_count: 54 */
                         d[i][j] = min(d[i][j], d[i][k] + d[k][j]); /* line 32 slow_hit_count: 1000, fast_hit_count: 27 */
                       }); /* line 33 slow_hit_count: 1000, fast_hit_count: 27 */
                }); /* line 34 slow_hit_count: 100, fast_hit_count: 9 */
         }); /* line 35 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    int i = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; }, /* line 40 slow_hit_count: 43, fast_hit_count: 15 */
         [&i, &n, &ans]() { /* line 41 slow_hit_count: 20, fast_hit_count: 6 */
           int j = 0; /* line 42 slow_hit_count: 10, fast_hit_count: 3 */
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; }, /* line 43 slow_hit_count: 430, fast_hit_count: 45 */
                [&i, &j, &ans]() { ans = max(ans, d[i][j]); }); /* line 44 slow_hit_count: 100, fast_hit_count: 9 */
         }); /* line 45 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the provided hit counts and the C code, we can observe the following:

1. **Nested Loops**:
   - The function `loop` is called multiple times in a nested manner to implement the Floyd-Warshall algorithm for finding shortest paths. This is evident from the hit counts on the lines where `loop` is invoked. Specifically:
     - The line `loop([&k, &n]() -> bool { return k < n; }, [&k]() { ++k; }, ...` (line 24) has 43 hits for the slow input compared to 15 for the fast input.
     - Nested within these loops are further loops on `i` and `j`, each contributing to a high number of hits for the slow input.

2. **Floyd-Warshall Algorithm**:
   - The line `d[i][j] = min(d[i][j], d[i][k] + d[k][j]);` (line 32) inside the deepest nested loops is hit significantly more times for the slow input—1000 times compared to 27 times for the fast input. This directly correlates with the number of iterations the algorithm requires when `n = 10`.

3. **Input Size and Path Lengths**:
   - The disparity between the slow and fast runs can be attributed to the complexity of the Floyd-Warshall algorithm, which is \(O(n^3)\). Since `n` is at its maximum value of 10 for the slow input, the algorithm executes numerous iterations, particularly when updating the shortest paths matrix `d`.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance invariants:

1. **Matrix and Loop Complexity**:
   - **Invariant**: "When the number of vertices `n` is close to its maximum constraint (specifically, 10), the number of iterations in the nested loops increases significantly, leading to a cubic time complexity. This results in slow execution due to the repeated updates of the shortest paths matrix."

2. **Edge Weights and Initial Path Conditions**:
   - **Invariant**: "If a significant disparity exists between edge weights, causing certain paths to be initially set with very high values, the algorithm may take longer in its iterative updates to converge to the shortest paths. This is particularly impactful when `n` is large, and the graph is dense with varied edge weights."

3. **Data Structure Updates**:
   - **Invariant**: "Repeated updates to the shortest path matrix `d` within triple-nested loops, especially when `n` is at its upper limit, can greatly increase computation time. The performance bottleneck arises from the frequent calculation and comparison of path lengths, which is intensified by the constraint \(3 \leq n \leq 10\)."

These invariants capture the conditions under which the code is likely to slow down and help in understanding how the constraints and input patterns contribute to performance degradation. They also provide a broad framework for recognizing similar slow scenarios without relying on specific numeric values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a complete undirected graph. For each pair of vertices you are given the length of the edge that connects them. Find the shortest paths between each pair of vertices in the graph and return the length of the longest of them.

Input

The first line of the input contains a single integer N (3 ≤ N ≤ 10).

The following N lines each contain N space-separated integers. jth integer in ith line aij is the length of the edge that connects vertices i and j. aij = aji, aii = 0, 1 ≤ aij ≤ 100 for i ≠ j.

Output

Output the maximum length of the shortest path between any pair of vertices in the graph.

Examples

Input

3
0 1 1
1 0 4
1 4 0


Output

2


Input

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0


Output

5

Note

You're running short of keywords, so you can't use some of them:
    
    
    define  
    do  
    for  
    foreach  
    while  
    repeat  
    until  
    if  
    then  
    else  
    elif  
    elsif  
    elseif  
    case  
    switch  
    

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Let's translate the natural language invariants into C++ checker code:

### Invariant 1: Matrix and Loop Complexity
- **Condition**: When `n` is close to its maximum constraint, indicating potential cubic complexity.
```cpp
void check_matrix_loop_invariant(int n) {
    if (n == 10) { // n at its maximum constraint of 10
        cerr << "Warning: Performance bottleneck condition triggered - high matrix loop complexity!" << endl;
        abort();
    }
}
```

### Invariant 2: Edge Weights and Initial Path Conditions
- **Condition**: Significant disparity in edge weights affects convergence speed.
```cpp
void check_edge_weight_invariant(const int d[10][10], int n) {
    bool hasLargeDisparity = false;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i != j && d[i][j] >= 100) {
                hasLargeDisparity = true;
                break;
            }
        }
        if (hasLargeDisparity) break;
    }
    if (hasLargeDisparity) {
        cerr << "Warning: Performance bottleneck condition triggered - large disparity in edge weights!" << endl;
        abort();
    }
}
```

### Invariant 3: Data Structure Updates
- **Condition**: Repeated updates in nested loops for maximum `n`.
```cpp
void check_data_structure_updates(int n) {
    if (n == 10) { // maximum allowed n leads to max updates
        cerr << "Warning: Performance bottleneck condition triggered - excessive data structure updates!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate the Checkers into the Original Program

We need to integrate the checkers into the original C++ program carefully, ensuring not to place them inside tight loops to avoid additional overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 10;
const int inf = 1 << 29;
int d[N][N];

// Checkers for performance bottlenecks
void check_matrix_loop_invariant(int n) {
    if (n == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high matrix loop complexity!" << endl;
        abort();
    }
}

void check_edge_weight_invariant(const int d[10][10], int n) {
    bool hasLargeDisparity = false;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i != j && d[i][j] >= 100) {
                hasLargeDisparity = true;
                break;
            }
        }
        if (hasLargeDisparity) break;
    }
    if (hasLargeDisparity) {
        cerr << "Warning: Performance bottleneck condition triggered - large disparity in edge weights!" << endl;
        abort();
    }
}

void check_data_structure_updates(int n) {
    if (n == 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive data structure updates!" << endl;
        abort();
    }
}

int loop(function<bool()> ok, function<void()> increment, function<void()> work) {
  return ok() ? work(), increment(), loop(ok, increment, work) : 0;
}

int main() {
  int n;
  scanf("%d", &n);
  
  // Performance bottleneck checks
  check_matrix_loop_invariant(n);

  {
    int i = 0;
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
         [&i, &n]() {
           int j = 0;
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                [&i, &j]() { scanf("%d", d[i] + j); });
         });
  }
  
  // Check after reading input matrix
  check_edge_weight_invariant(d, n);
  check_data_structure_updates(n);
  
  {
    int k = 0;
    loop([&k, &n]() -> bool { return k < n; }, [&k]() { ++k; },
         [&k, &n]() {
           int i = 0;
           loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
                [&k, &i, &n]() {
                  int j = 0;
                  loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                       [&k, &i, &j]() {
                         d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
                       });
                });
         });
  }
  
  int ans = 0;
  {
    int i = 0;
    loop([&i, &n]() -> bool { return i < n; }, [&i]() { ++i; },
         [&i, &n, &ans]() {
           int j = 0;
           loop([&j, &n]() -> bool { return j < n; }, [&j]() { ++j; },
                [&i, &j, &ans]() { ans = max(ans, d[i][j]); });
         });
  }
  
  printf("%d\n", ans);
  return 0;
}
```

### Explanation

1. **Checker Insertion**: Checkers are placed after the input is read and before the main algorithm runs, ensuring no extra overhead in the nested loops.
2. **Conditions**: Each checker evaluates conditions inferred from the performance invariants and aborts the program if any bottleneck condition is met.
3. **Prevention**: The checkers help detect when the input conditions might lead to a performance bottleneck, facilitating early detection in testing environments.

