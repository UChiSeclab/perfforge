system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(bool x) { cerr << (x ? "true" : "false"); }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
template <typename T, typename V>
void __print(const pair<T, V> &x) {
  cerr << '{';
  __print(x.first);
  cerr << ',';
  __print(x.second);
  cerr << '}';
}
template <typename T>
void __print(const T &x) {
  int f = 0;
  cerr << '{';
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i);
  cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v) {
  __print(t);
  if (sizeof...(v)) cerr << ", ";
  _print(v...);
}
struct _ {
  ios_base::Init i;
  _() { ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL); }
} _;
int dx[] = {-1, 0, 1, 0, -1, -1, 1, 1};
int dy[] = {0, 1, 0, -1, -1, 1, 1, -1};
int main() {
  long long w, m;
  cin >> w >> m;
  if (w == 2) {
    cout << "YES";
    return 0;
  }
  vector<pair<long long, long long>> x;
  long long lim = 1;
  while ((lim <= m) and (lim <= (1e18 / w))) lim *= w;
  if (lim <= (1e18 / w)) lim *= w;
  for (long long mask = 0; mask <= (1ll << 30); mask++) {
    long long val = 0;
    bool flg = true;
    for (long long j = 0; j <= 30; j++) {
      if ((mask & (1ll << j)) != 0) {
        long long ex = pow(w, j);
        if (val > lim - ex) {
          flg = false;
          break;
        }
        val += ex;
      }
    }
    if (flg == false) break;
    x.push_back({val, mask});
  }
  sort(x.begin(), x.end());
  for (long long y = 0; y <= (1ll << 30); y++) {
    long long yval = 0;
    bool flg = true;
    for (long long j = 0; j <= 30; j++) {
      if ((y & (1ll << j)) != 0) {
        long long ex = pow(w, j);
        if (yval > m) {
          flg = false;
          break;
        }
        yval += ex;
      }
    }
    if (flg == false) break;
    auto it = lower_bound(x.begin(), x.end(), make_pair(m + yval, -1ll));
    if (it == x.end()) continue;
    if ((*it).first != m + yval) continue;
    if (((*it).second & y) != 0) continue;
    cout << "YES";
    return 0;
  }
  cout << "NO";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void __print(int x) { cerr << x; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long x) { cerr << x; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void __print(float x) { cerr << x; } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void __print(double x) { cerr << x; } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned x) { cerr << x; } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long long x) { cerr << x; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long double x) { cerr << x; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long x) { cerr << x; } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long long x) { cerr << x; } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void __print(char x) { cerr << '\'' << x << '\''; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void __print(bool x) { cerr << (x ? "true" : "false"); } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const char *x) { cerr << '\"' << x << '\"'; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const string &x) { cerr << '\"' << x << '\"'; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename V> /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const pair<T, V> &x) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.first); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << ','; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.second); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '}'; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const T &x) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int f = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << "}"; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
void _print() { cerr << "]\n"; } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... V> /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
void _print(T t, V... v) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  __print(t); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (sizeof...(v)) cerr << ", "; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  _print(v...); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
struct _ { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  ios_base::Init i; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  _() { ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL); } /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} _; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {-1, 0, 1, 0, -1, -1, 1, 1}; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {0, 1, 0, -1, -1, 1, 1, -1}; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  long long w, m; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> w >> m; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  if (w == 2) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<long long, long long>> x; /* line 51 slow_hit_count: 2, fast_hit_count: 2 */
  long long lim = 1; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  while ((lim <= m) and (lim <= (1e18 / w))) lim *= w; /* line 53 slow_hit_count: 20, fast_hit_count: 3 */
  if (lim <= (1e18 / w)) lim *= w; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long mask = 0; mask <= (1ll << 30); mask++) { /* line 55 slow_hit_count: 1048578, fast_hit_count: 6 */
    long long val = 0; /* line 56 slow_hit_count: 1048578, fast_hit_count: 6 */
    bool flg = true; /* line 57 slow_hit_count: 1048578, fast_hit_count: 6 */
    for (long long j = 0; j <= 30; j++) { /* line 58 slow_hit_count: 33554485, fast_hit_count: 163 */
      if ((mask & (1ll << j)) != 0) { /* line 59 slow_hit_count: 32505908, fast_hit_count: 158 */
        long long ex = pow(w, j); /* line 60 slow_hit_count: 10485763, fast_hit_count: 7 */
        if (val > lim - ex) { /* line 61 slow_hit_count: 10485763, fast_hit_count: 7 */
          flg = false; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
          break; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
        } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
        val += ex; /* line 65 slow_hit_count: 10485762, fast_hit_count: 6 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    if (flg == false) break; /* line 68 slow_hit_count: 1048578, fast_hit_count: 6 */
    x.push_back({val, mask}); /* line 69 slow_hit_count: 1048577, fast_hit_count: 5 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  sort(x.begin(), x.end()); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long y = 0; y <= (1ll << 30); y++) { /* line 72 slow_hit_count: 215169, fast_hit_count: 1 */
    long long yval = 0; /* line 73 slow_hit_count: 215169, fast_hit_count: 1 */
    bool flg = true; /* line 74 slow_hit_count: 215169, fast_hit_count: 1 */
    for (long long j = 0; j <= 30; j++) { /* line 75 slow_hit_count: 6885408, fast_hit_count: 32 */
      if ((y & (1ll << j)) != 0) { /* line 76 slow_hit_count: 6670239, fast_hit_count: 31 */
        long long ex = pow(w, j); /* line 77 slow_hit_count: 1869765, fast_hit_count: 0 */
        if (yval > m) { /* line 78 slow_hit_count: 1869765, fast_hit_count: 0 */
          flg = false; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
        yval += ex; /* line 82 slow_hit_count: 1869765, fast_hit_count: 0 */
      } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    if (flg == false) break; /* line 85 slow_hit_count: 215169, fast_hit_count: 1 */
    auto it = lower_bound(x.begin(), x.end(), make_pair(m + yval, -1ll)); /* line 86 slow_hit_count: 215169, fast_hit_count: 1 */
    if (it == x.end()) continue; /* line 87 slow_hit_count: 430337, fast_hit_count: 1 */
    if ((*it).first != m + yval) continue; /* line 88 slow_hit_count: 215169, fast_hit_count: 1 */
    if (((*it).second & y) != 0) continue; /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
    return 0; /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO"; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 95 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information, let's analyze the code to identify potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Analyze the Code

1. **Compare Line-Level Hit Counts:**
   - Lines with significant difference in hit counts between slow and fast runs are indicators of potential bottlenecks.
   - The loops with high hit counts, particularly lines 55-69 and 72-89, show a large disparity in execution frequency between the slow and fast inputs.

2. **Identify Expensive Code Segments:**
   - **Outer Loop (Line 55)**: Iterates over `mask` from `0` to `(1ll << 30)`. This loop runs a very high number of times for the slow input due to the small base `w = 3`.
   - **Nested Loop (Line 58)**: Runs for each bit in `mask`, iterating up to 30 times. This inner loop contributes significantly to the workload.
   - **Outer Loop (Line 72)**: Another expensive loop with similar range as the first loop, iterating over `y`.
   - **Nested Loop (Line 75)**: Similar nested loop contributing to workload.

3. **Inference on Code Interaction:**
   - The loops are exploring combinations of powers of `w` to form sums that balance the scales.
   - The performance bottleneck arises because for small `w`, there are many combinations to check, resulting in high computational cost.

### Phase 2: Performance-Characterizing Invariants

Based on the analysis, here are the conditions under which the program runs slowly, described in natural language:

1. **Invariant 1: Small Base Exponentiation**
   - When the base `w` is small, the number of combinations of powers of `w` to explore increases exponentially. This results in repeated evaluations of possible sums, leading to significant computational overhead.
   - **Natural Language Description**: "If `w` is small, such as close to its minimum value of 2, the program explores a large number of power combinations, which increases computational complexity."

2. **Invariant 2: Large Search Space**
   - The nested loops involve computing powers of `w` up to 30 times, resulting in a large search space when `m` is large.
   - **Natural Language Description**: "If `m` is large and `w` is small, the search space expands greatly due to the need to evaluate many combinations of powers of `w`, causing the program to slow down."

3. **Invariant 3: High Iteration Count**
   - The loops iterate over a large range `(1ll << 30)` to evaluate possible combinations, which is particularly expensive for smaller values of `w`.
   - **Natural Language Description**: "For small values of `w`, the iteration count in loops becomes very high, leading to increased execution time due to the vast number of evaluations required."

These invariants capture the conditions under which the program enters a slow execution path, focusing on the core issue of handling small `w` with large `m`, resulting in an exponential number of combinations to explore. These statements abstract the core problems without relying on specific numeric values, making them applicable for a wide range of scenarios within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: Let's start by implementing the performance-characterizing invariants as C++ checkers (Phase 3) and then integrate them into the provided solution (Phase 4).

### Phase 3: Implement the C++ Code for the Invariants

#### Invariant 1: Small Base Exponentiation
**Natural Language Description**: "If `w` is small, such as close to its minimum value of 2, the program explores a large number of power combinations, which increases computational complexity."

```cpp
void check_small_base_invariant(long long w) {
    if (w <= 3) {
        cerr << "Warning: Performance bottleneck due to small base w!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Search Space
**Natural Language Description**: "If `m` is large and `w` is small, the search space expands greatly due to the need to evaluate many combinations of powers of `w`, causing the program to slow down."

```cpp
void check_large_search_space(long long w, long long m) {
    if (w <= 3 && m > 1e8) {
        cerr << "Warning: Large search space due to small w and large m!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Iteration Count
**Natural Language Description**: "For small values of `w`, the iteration count in loops becomes very high, leading to increased execution time due to the vast number of evaluations required."

```cpp
void check_high_iteration_count(long long w) {
    if (w <= 3) {
        cerr << "Warning: High iteration count likely due to small base w!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Here is the instrumented C++ code with the integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for small base exponentiation
void check_small_base_invariant(long long w) {
    if (w <= 3) {
        cerr << "Warning: Performance bottleneck due to small base w!" << endl;
        abort();
    }
}

// Checker for large search space
void check_large_search_space(long long w, long long m) {
    if (w <= 3 && m > 1e8) {
        cerr << "Warning: Large search space due to small w and large m!" << endl;
        abort();
    }
}

// Checker for high iteration count
void check_high_iteration_count(long long w) {
    if (w <= 3) {
        cerr << "Warning: High iteration count likely due to small base w!" << endl;
        abort();
    }
}

int main() {
    long long w, m;
    cin >> w >> m;
    
    // Insert checks after reading inputs
    check_small_base_invariant(w);
    check_large_search_space(w, m);
    check_high_iteration_count(w);
    
    if (w == 2) {
        cout << "YES";
        return 0;
    }
    
    vector<pair<long long, long long>> x;
    long long lim = 1;
    while ((lim <= m) and (lim <= (1e18 / w))) lim *= w;
    if (lim <= (1e18 / w)) lim *= w;
    
    for (long long mask = 0; mask <= (1ll << 30); mask++) {
        long long val = 0;
        bool flg = true;
        for (long long j = 0; j <= 30; j++) {
            if ((mask & (1ll << j)) != 0) {
                long long ex = pow(w, j);
                if (val > lim - ex) {
                    flg = false;
                    break;
                }
                val += ex;
            }
        }
        if (flg == false) break;
        x.push_back({val, mask});
    }
    sort(x.begin(), x.end());
    
    for (long long y = 0; y <= (1ll << 30); y++) {
        long long yval = 0;
        bool flg = true;
        for (long long j = 0; j <= 30; j++) {
            if ((y & (1ll << j)) != 0) {
                long long ex = pow(w, j);
                if (yval > m) {
                    flg = false;
                    break;
                }
                yval += ex;
            }
        }
        if (flg == false) break;
        auto it = lower_bound(x.begin(), x.end(), make_pair(m + yval, -1ll));
        if (it == x.end()) continue;
        if ((*it).first != m + yval) continue;
        if (((*it).second & y) != 0) continue;
        
        cout << "YES";
        return 0;
    }
    
    cout << "NO";
    return 0;
}
```

### Comments and Explanation

- **Check Placement**: The checks are placed right after input reading to avoid unnecessary overhead during loop execution. This ensures that the program halts early if a slow condition is detected.
- **Merged Checks**: The checks for "small base" and "high iteration count" are merged into a single condition since both are triggered by a small value of `w`.
- **Detecting Performance Bottlenecks**: These checks help in identifying performance bottlenecks, especially when the input values lead to conditions that may cause slowdown due to small base exponentiation and large search space iterations.

