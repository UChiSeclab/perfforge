system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
const ll OO = 1e18;
int di[8] = {0, 0, 1, -1, -1, 1, -1, 1};
int dj[8] = {1, -1, 0, 0, 1, 1, -1, -1};
string ys = "YES", no = "NO";
const long double dgr = acos(-1) / 180, dg = 180 / acos(-1);
const int mod = 1e8 + 7, N = 1e7, M = 2001;
vector<ll> v;
void solve(ll m, int i = 0) {
  if (!m) exit(puts("YES"));
  if (i == v.size()) return;
  solve(m, i + 1);
  solve(m + v[i], i + 1);
  solve(m - v[i], i + 1);
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  ll w, m;
  cin >> w >> m;
  if (w == 2 || w == 3) return cout << ys << '\n', 0;
  v.push_back(1);
  while (v.back() * w <= 9e9 + 99) v.push_back(v.back() * w);
  solve(m, 0);
  cout << no << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const ll OO = 1e18; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int di[8] = {0, 0, 1, -1, -1, 1, -1, 1}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dj[8] = {1, -1, 0, 0, 1, 1, -1, -1}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string ys = "YES", no = "NO"; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const long double dgr = acos(-1) / 180, dg = 180 / acos(-1); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e8 + 7, N = 1e7, M = 2001; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<ll> v; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void solve(ll m, int i = 0) { /* line 12 slow_hit_count: 193710244, fast_hit_count: 5 */
  if (!m) exit(puts("YES")); /* line 13 slow_hit_count: 193710244, fast_hit_count: 5 */
  if (i == v.size()) return; /* line 14 slow_hit_count: 193710244, fast_hit_count: 4 */
  solve(m, i + 1); /* line 15 slow_hit_count: 64570081, fast_hit_count: 2 */
  solve(m + v[i], i + 1); /* line 16 slow_hit_count: 64570081, fast_hit_count: 1 */
  solve(m - v[i], i + 1); /* line 17 slow_hit_count: 64570081, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  ll w, m; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> w >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  if (w == 2 || w == 3) return cout << ys << '\n', 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  v.push_back(1); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  while (v.back() * w <= 9e9 + 99) v.push_back(v.back() * w); /* line 28 slow_hit_count: 17, fast_hit_count: 2 */
  solve(m, 0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cout << no << '\n'; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Analyzing the hit counts, the primary focus should be on the `solve` function, which is the recursive function responsible for determining if the given mass `m` can be balanced with the available weights.

1. **Hit count differences:**
   - The `solve` function (line 12) has significantly more hits during the slow input (193,710,244 times) compared to the fast input (5 times).
   - Within `solve`, the recursive calls on lines 15, 16, and 17 each exhibit heavy recursion for the slow input (64,570,081 times) and minimal recursion for the fast input.

2. **Recursive Behavior:**
   - The recursive calls on lines 15, 16, and 17 suggest that the function is deeply exploring possible combinations of weights to balance the scales.
   - The high hit counts indicate that the solution space is large and being exhaustively searched.

3. **Data Structures and Input Constraints:**
   - The vector `v` stores weights as powers of `w` (line 28). It implies that for larger `w`, fewer weights need to be considered, which may explain the faster completion for the input `1000000000 1000000000`.
   - For smaller `w`, such as 4 in the slow input, more weights are generated and considered, significantly increasing the complexity and depth of the recursion.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies, we can derive the following performance invariants:

1. **Invariant on Weight Base:**
   - **Natural Language Statement:** "The program tends to slow down significantly when the weight base `w` is small, such as close to 2 or 3, because it increases the number of potential weight combinations and leads to deeper recursion."
   - **Reasoning:** Smaller `w` values result in more variations in weight combinations (more elements in vector `v`), leading to a larger search space.

2. **Invariant on Recursive Function Calls:**
   - **Natural Language Statement:** "If the recursive function `solve` is called excessively, exploring a large combination of weights without finding a solution, the execution time may increase drastically."
   - **Reasoning:** The recursive nature and combinatorial explosion of possibilities are compounded by smaller `w` values, leading to deeper recursive paths.

3. **Invariant on Input Combinations:**
   - **Natural Language Statement:** "When the input mass `m` is near the upper limit of its constraint (close to 1,000,000,000) and `w` is low, the number of ways to balance `m` with available weights increases, which can lead to slower performance."
   - **Reasoning:** Large `m` values with small `w` values expand the number of possible balancing scenarios to explore.

### Recommendations

- **Optimization Considerations:** To improve performance, consider reducing the recursive depth through memoization or dynamic programming approaches. Alternatively, prune the search space by identifying and skipping unnecessary recursive calls earlier.
- **Testing Invariants:** Implement checks that can detect when these conditions are met and log or abort to inform developers about potential performance bottlenecks during runtime.

By focusing on these invariants and understanding the recursive nature and input constraints, the program's performance characteristics can be better managed and optimized.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Here, we translate the natural language invariants into checker code in C++.

1. **Invariant on Weight Base:**
   - **Checker Code:**
   ```cpp
   void check_weight_base_invariant(ll w) {
       if (w <= 4) {  // Choosing 4 as the threshold because smaller values increase the search space significantly
           cerr << "Warning: Performance bottleneck: weight base is small!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Recursive Function Calls:**
   - **Checker Code:**
   ```cpp
   void check_recursive_calls_invariant(ll callCount, ll threshold) {
       if (callCount > threshold) {
           cerr << "Warning: Excessive recursive calls!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Input Combinations:**
   - **Checker Code:**
   ```cpp
   void check_input_combination_invariant(ll m, ll w) {
       if (m > 1e9 && w < 10) {  // Assuming large m with small w causes complexity
           cerr << "Warning: Unfavorable input combination!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
const ll OO = 1e18;
int di[8] = {0, 0, 1, -1, -1, 1, -1, 1};
int dj[8] = {1, -1, 0, 0, 1, 1, -1, -1};
string ys = "YES", no = "NO";
const long double dgr = acos(-1) / 180, dg = 180 / acos(-1);
const int mod = 1e8 + 7, N = 1e7, M = 2001;
vector<ll> v;

// Check for small weight base
void check_weight_base_invariant(ll w) {
    if (w <= 4) {  // Choosing 4 as the threshold because smaller values increase the search space significantly
        cerr << "Warning: Performance bottleneck: weight base is small!" << endl;
        abort();
    }
}

// Check for excessive recursive calls
void check_recursive_calls_invariant(ll callCount, ll threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Excessive recursive calls!" << endl;
        abort();
    }
}

// Check for unfavorable input combinations
void check_input_combination_invariant(ll m, ll w) {
    if (m > 1e9 && w < 10) {  // Assuming large m with small w causes complexity
        cerr << "Warning: Unfavorable input combination!" << endl;
        abort();
    }
}

void solve(ll m, int i = 0, ll& callCount = *(new ll(0))) {
    // Increment call count
    ++callCount;
    
    // Check recursive calls invariant (choose an arbitrary large threshold for demonstration)
    check_recursive_calls_invariant(callCount, 1e7);

    if (!m) exit(puts("YES"));
    if (i == v.size()) return;
    solve(m, i + 1, callCount);
    solve(m + v[i], i + 1, callCount);
    solve(m - v[i], i + 1, callCount);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    ll w, m;
    cin >> w >> m;

    // Check for small weight base
    check_weight_base_invariant(w);

    // Check for unfavorable input combinations
    check_input_combination_invariant(m, w);
    
    if (w == 2 || w == 3) return cout << ys << '\n', 0;
    
    v.push_back(1);
    while (v.back() * w <= 9e9 + 99) v.push_back(v.back() * w);
    
    // Initialize call count
    ll callCount = 0;
    solve(m, 0, callCount);
    
    cout << no << '\n';
}
```

### Explanation

- **Weight Base Check:** Placed immediately after reading the input to ensure a low threshold doesn't cause a bottleneck.
- **Recursive Calls Check:** Integrated within the `solve` function to monitor the depth and frequency of recursion.
- **Input Combination Check:** Placed right after reading inputs to detect potentially problematic combinations early.

By integrating these checks effectively, we help identify and potentially reduce performance bottlenecks in future runs.

