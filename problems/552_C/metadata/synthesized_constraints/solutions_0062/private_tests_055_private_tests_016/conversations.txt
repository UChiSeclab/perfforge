system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, w;
vector<long long> v;
void solve(int i, long long a, long long b) {
  if (a == b || w <= 3) {
    puts("YES");
    exit(0);
  }
  if (i == (int)v.size()) return;
  solve(i + 1, a + v[i], b);
  solve(i + 1, a, b + v[i]);
  solve(i + 1, a, b);
}
int main() {
  scanf("%d%d", &w, &n);
  long long val = 1;
  for (int i = 0; i <= 16 && val <= 1e10; ++i) {
    v.push_back(val);
    val *= w;
  }
  solve(0, 0, n);
  puts("NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, w; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int i, long long a, long long b) { /* line 5 slow_hit_count: 193710244, fast_hit_count: 11 */
  if (a == b || w <= 3) { /* line 6 slow_hit_count: 193710244, fast_hit_count: 11 */
    puts("YES"); /* line 7 slow_hit_count: 0, fast_hit_count: 1 */
    exit(0); /* line 8 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  if (i == (int)v.size()) return; /* line 10 slow_hit_count: 193710244, fast_hit_count: 10 */
  solve(i + 1, a + v[i], b); /* line 11 slow_hit_count: 64570081, fast_hit_count: 4 */
  solve(i + 1, a, b + v[i]); /* line 12 slow_hit_count: 64570081, fast_hit_count: 3 */
  solve(i + 1, a, b); /* line 13 slow_hit_count: 64570081, fast_hit_count: 3 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &w, &n); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long val = 1; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 16 && val <= 1e10; ++i) { /* line 18 slow_hit_count: 18, fast_hit_count: 3 */
    v.push_back(val); /* line 19 slow_hit_count: 17, fast_hit_count: 2 */
    val *= w; /* line 20 slow_hit_count: 17, fast_hit_count: 2 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  solve(0, 0, n); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  puts("NO"); /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the given slow input compared to the fast input, we can analyze the hit counts and the code structure:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The function `solve` (line 5) is called significantly more times for the slow input (193,710,244 times) compared to the fast input (11 times).
   - Recursive calls within `solve` (lines 11, 12, and 13) also have high hit counts with the slow input, each being called 64,570,081 times.

2. **Code Structure and Recursion**:
   - The recursive `solve` function explores different combinations of weights to find a balance.
   - The recursion explores three possible states at each step, leading to a combinatorial explosion, especially with high recursion depth and a large number of potential weights.

3. **Data Structure and Constraints Interaction**:
   - The vector `v` contains powers of `w`. The size of `v` is smaller for the fast input due to constraints leading to fewer powers being calculated.
   - For the slow input (`w = 4`), more recursive explorations occur as the powers grow faster and stay within bounds longer (up to `w^16`).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursive Exploration**:
   - **Invariant**: "If the base number `w` is small, and the item mass `m` allows many possible combinations through recursive exploration, the recursion depth can become significant, leading to a slowdown."
   - **Thresholds**: Small values of `w` lead to a larger number of powers within the limit, increasing recursive calls.

2. **Combinatorial Explosion**:
   - **Invariant**: "When `m` and `w` are such that a large number of combinations of powers of `w` need to be explored to balance the scales, the program may slow down significantly."
   - **Thresholds**: This occurs when `w` is small, as it keeps adding more elements to the exploration set, increasing the search space combinatorially.

3. **Power Growth**:
   - **Invariant**: "If `w` grows slowly, causing more terms to fit within a feasible range (not exceeding the input constraints), the number of recursive combinations increases, slowing the execution."
   - **Thresholds**: Small `w` values result in many powers fitting within constraints, like `w = 4`.

4. **Execution Complexity**:
   - **Invariant**: "Programs with heavy recursive search space, due to a small base and a large mass requiring balance, may trigger deep recursive calls, causing slow execution."
   - **Thresholds**: Recursive depth and branching factor increase with smaller `w`.

By focusing on these invariants, a fuzzer or tester can identify slow scenarios by detecting inputs leading to a combinatorial recursion explosion due to small `w`, thereby slowing down the program significantly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we will write C++ code snippets to check these conditions at runtime.

#### Invariant 1: Recursive Exploration
```cpp
void check_recursive_exploration(int w, int depth) {
    if (w <= 3 && depth > 50) { // Arbitrary depth threshold for illustration
        cerr << "Warning: Performance bottleneck triggered - excessive recursive exploration!" << endl;
        abort();
    }
}
```

#### Invariant 2: Combinatorial Explosion
```cpp
void check_combinatorial_explosion(int w, int numCombinations) {
    if (w <= 3 && numCombinations > 1000000) { // Threshold based on potential large combination space
        cerr << "Warning: Performance bottleneck triggered - large combinatorial explosion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Original Program

We will integrate the checker functions into the original C++ solution. We will place the checks appropriately to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, w;
vector<long long> v;

// Checker functions
void check_recursive_exploration(int w, int depth) {
    if (w <= 3 && depth > 50) { // Arbitrary depth threshold for illustration
        cerr << "Warning: Performance bottleneck triggered - excessive recursive exploration!" << endl;
        abort();
    }
}

void check_combinatorial_explosion(int w, int numCombinations) {
    if (w <= 3 && numCombinations > 1000000) { // Threshold based on potential large combination space
        cerr << "Warning: Performance bottleneck triggered - large combinatorial explosion!" << endl;
        abort();
    }
}

void solve(int i, long long a, long long b, int depth) {
    check_recursive_exploration(w, depth);

    if (a == b || w <= 3) {
        puts("YES");
        exit(0);
    }
    if (i == (int)v.size()) return;
    solve(i + 1, a + v[i], b, depth + 1);
    solve(i + 1, a, b + v[i], depth + 1);
    solve(i + 1, a, b, depth + 1);
}

int main() {
    scanf("%d%d", &w, &n);
    long long val = 1;

    for (int i = 0; i <= 16 && val <= 1e10; ++i) {
        v.push_back(val);
        val *= w;
    }

    // Check for combinatorial explosion based on the number of combinations to explore
    int numCombinations = pow(3, v.size());  // Estimate number of combinations
    check_combinatorial_explosion(w, numCombinations);

    solve(0, 0, n, 0);
    puts("NO");
    return 0;
}
```

### Explanation:
- **Recursive Exploration Check**: This check is placed at the beginning of the recursive `solve` function, where we monitor the recursion depth, especially when `w` is small, as that leads to more recursive paths.
- **Combinatorial Explosion Check**: Before initiating the recursive exploration, estimate the number of combinations using the size of vector `v`. This check is done outside the recursive loop to avoid runtime overhead during recursion. The estimate is based on the size of `v` and the branching factor of 3 (since each recursive call has three options).

