system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gcd(long long a, long long b) {
  if (!b) return a;
  return gcd(b, a % b);
}
long long lcm(long long a, long long b) { return b / gcd(a, b) * a; }
long long w, m;
vector<long long> g;
vector<long long> gen;
bool ok(long long x) {
  if (x < 1) return 0;
  while (x % w == 0) x /= w;
  return x == 1;
}
int main() {
  cin >> w >> m;
  if (w == 2) {
    puts("YES");
    return 0;
  }
  g.push_back(1);
  while (ok(g.back() * w) && g.back() < g.back() * w &&
         (g.back() * w <= 2 * m || g.size() < 22))
    g.push_back(g.back() * w);
  sort(g.begin(), g.end());
  g.resize(unique(g.begin(), g.end()) - g.begin());
  int n = g.size();
  for (int i = 0; i < (1 << n); ++i) {
    long long sum = 0;
    for (int j = 0; j < n; ++j) {
      if ((i >> j) & 1) sum += g[j];
    }
    if (sum >= 0) gen.push_back(sum);
  }
  sort(gen.begin(), gen.end());
  for (int i = 0; i < gen.size(); ++i) {
    if (binary_search(gen.begin() + i + 1, gen.end(), m + gen[i])) {
      puts("YES");
      return 0;
    }
  }
  puts("NO");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (!b) return a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long a, long long b) { return b / gcd(a, b) * a; } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long w, m; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> g; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> gen; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool ok(long long x) { /* line 11 slow_hit_count: 22, fast_hit_count: 3 */
  if (x < 1) return 0; /* line 12 slow_hit_count: 22, fast_hit_count: 3 */
  while (x % w == 0) x /= w; /* line 13 slow_hit_count: 275, fast_hit_count: 5 */
  return x == 1; /* line 14 slow_hit_count: 22, fast_hit_count: 2 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> w >> m; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  if (w == 2) { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    puts("YES"); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  g.push_back(1); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (ok(g.back() * w) && g.back() < g.back() * w && /* line 23 slow_hit_count: 44, fast_hit_count: 5 */
         (g.back() * w <= 2 * m || g.size() < 22)) /* line 24 slow_hit_count: 22, fast_hit_count: 2 */
    g.push_back(g.back() * w); /* line 25 slow_hit_count: 21, fast_hit_count: 2 */
  sort(g.begin(), g.end()); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  g.resize(unique(g.begin(), g.end()) - g.begin()); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int n = g.size(); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (1 << n); ++i) { /* line 29 slow_hit_count: 4194305, fast_hit_count: 9 */
    long long sum = 0; /* line 30 slow_hit_count: 4194304, fast_hit_count: 8 */
    for (int j = 0; j < n; ++j) { /* line 31 slow_hit_count: 96468992, fast_hit_count: 32 */
      if ((i >> j) & 1) sum += g[j]; /* line 32 slow_hit_count: 92274688, fast_hit_count: 24 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum >= 0) gen.push_back(sum); /* line 34 slow_hit_count: 4194304, fast_hit_count: 8 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  sort(gen.begin(), gen.end()); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < gen.size(); ++i) { /* line 37 slow_hit_count: 4194305, fast_hit_count: 1 */
    if (binary_search(gen.begin() + i + 1, gen.end(), m + gen[i])) { /* line 38 slow_hit_count: 4194304, fast_hit_count: 1 */
      puts("YES"); /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  puts("NO"); /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the line-level hit counts, we observe the following:

1. **Line 29**: The outer loop `for (int i = 0; i < (1 << n); ++i)` has a massive number of hits in the slow input (`4194305` hits), compared to a very low number in the fast input (`9` hits). This suggests that this loop is a major contributor to the slowdown.

2. **Line 31**: The inner loop `for (int j = 0; j < n; ++j)` also shows an excessive number of hits (`96468992` hits for slow input), indicating this loop is nested within the outer loop and contributing significantly to the execution time.

3. **Line 32**: The condition `if ((i >> j) & 1) sum += g[j]` is executed a high number of times (`92274688` times for slow input), indicating frequent additions to the sum, which contributes to the workload.

4. **Line 37**: The loop `for (int i = 0; i < gen.size(); ++i)` is executed extensively for the slow input (`4194305` hits), showing a repeated search operation.

5. **Line 38**: The `binary_search` operation is executed many times (`4194304` hits), suggesting that it is a costly operation due to the size of `gen`.

The loops and search operations are repeatedly executed, leading to quadratic or exponential growth in operations for certain inputs.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **Combination Explosion Due to Small Base (w)**:
   - **Invariant**: "When the base `w` is relatively small and close to the lower bound (e.g., `w` = 4), the number of possible combinations of weights increases exponentially, leading to a significant increase in computation time."
   - This is due to the large number of combinations (`(1 << n)`) that must be evaluated when `w` is small, resulting in an exponential growth of the set `g` and its subsets.

2. **Search Space Size in Combination Generation**:
   - **Invariant**: "If the number of valid weights (`n`) becomes large in relation to `m`, the number of subsets generated (`1 << n`) leads to significant overhead in both generating and searching for solutions."
   - This highlights the cost of iterating over all subsets of weights when `w` leads to a large `n`.

3. **Binary Search Performance on Large Sets**:
   - **Invariant**: "If the generated set of sums (`gen`) is large due to a high number of combinations, repeated binary search operations degrade performance."
   - This occurs because each entry in `gen` has to be checked against all subsequent entries, leading to quadratic behavior.

4. **Weight Iteration Overhead**:
   - **Invariant**: "The iterative check of combinations becomes expensive when both `n` is large, and the subsequent sums (`gen[i] + m`) are needed to be searched for all subsets."
   - This reflects the dual cost of iterating over combinations and performing searches, leading to high computational overhead.

These invariants guide future analysis and optimization efforts by pointing out the input scenarios that most significantly degrade performance, while adhering to the constraints of the problem (e.g., relatively small `w` values close to the lower bound).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants as checks in C++ code:

1. **Combination Explosion Due to Small Base (w):**
   - Check if `w` is close to its lower bound (e.g., `w <= 10`), which can cause an exponential increase in combinations.

```cpp
void check_combination_explosion_invariant(long long w) {
    if (w <= 10) {
        cerr << "Warning: combination_explosion_invariant triggered - small base leading to exponential combinations" << endl;
        abort();
    }
}
```

2. **Search Space Size in Combination Generation:**
   - Check if the number of valid weights `n` becomes large (`n > 20`) relative to the problem constraints.

```cpp
void check_search_space_size_invariant(int n) {
    if (n > 20) {
        cerr << "Warning: search_space_size_invariant triggered - large search space size due to many weights" << endl;
        abort();
    }
}
```

3. **Binary Search Performance on Large Sets:**
   - Check if the size of `gen` becomes large (`gen.size() > 100000`), impacting binary search performance.

```cpp
void check_binary_search_performance_invariant(int genSize) {
    if (genSize > 100000) {
        cerr << "Warning: binary_search_performance_invariant triggered - large gen size degrading binary search performance" << endl;
        abort();
    }
}
```

4. **Weight Iteration Overhead:**
   - Check if the iteration over combinations (`1 << n`) becomes excessive (`n > 20`).

```cpp
void check_weight_iteration_overhead_invariant(int n) {
    if (n > 20) {
        cerr << "Warning: weight_iteration_overhead_invariant triggered - excessive iteration over combinations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, let's integrate these performance checks into the original C++ program to detect potential bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_combination_explosion_invariant(long long w) {
    if (w <= 10) {
        cerr << "Warning: combination_explosion_invariant triggered - small base leading to exponential combinations" << endl;
        abort();
    }
}

void check_search_space_size_invariant(int n) {
    if (n > 20) {
        cerr << "Warning: search_space_size_invariant triggered - large search space size due to many weights" << endl;
        abort();
    }
}

void check_binary_search_performance_invariant(int genSize) {
    if (genSize > 100000) {
        cerr << "Warning: binary_search_performance_invariant triggered - large gen size degrading binary search performance" << endl;
        abort();
    }
}

void check_weight_iteration_overhead_invariant(int n) {
    if (n > 20) {
        cerr << "Warning: weight_iteration_overhead_invariant triggered - excessive iteration over combinations" << endl;
        abort();
    }
}

long long gcd(long long a, long long b) {
    if (!b) return a;
    return gcd(b, a % b);
}

long long lcm(long long a, long long b) { return b / gcd(a, b) * a; }
long long w, m;
vector<long long> g;
vector<long long> gen;

bool ok(long long x) {
    if (x < 1) return 0;
    while (x % w == 0) x /= w;
    return x == 1;
}

int main() {
    cin >> w >> m;
    check_combination_explosion_invariant(w);  // Check for small base causing exponential combinations
    if (w == 2) {
        puts("YES");
        return 0;
    }
    g.push_back(1);
    while (ok(g.back() * w) && g.back() < g.back() * w &&
           (g.back() * w <= 2 * m || g.size() < 22))
        g.push_back(g.back() * w);
    sort(g.begin(), g.end());
    g.resize(unique(g.begin(), g.end()) - g.begin());
    
    int n = g.size();
    check_search_space_size_invariant(n);  // Check for large search space size
    
    for (int i = 0; i < (1 << n); ++i) {
        long long sum = 0;
        for (int j = 0; j < n; ++j) {
            if ((i >> j) & 1) sum += g[j];
        }
        if (sum >= 0) gen.push_back(sum);
    }
    check_binary_search_performance_invariant(gen.size());  // Check for large gen size
    
    sort(gen.begin(), gen.end());
    for (int i = 0; i < gen.size(); ++i) {
        if (binary_search(gen.begin() + i + 1, gen.end(), m + gen[i])) {
            puts("YES");
            return 0;
        }
    }
    puts("NO");
}
```

### Explanation

- **Combination Explosion Invariant**: Checked right after reading inputs to detect potential exponential growth in combinations early.
- **Search Space Size Invariant**: Checked after determining the size of `g` to ensure it doesn't grow too large.
- **Binary Search Performance Invariant**: Checked after populating `gen` to ensure its size isn't excessive.
- **Weight Iteration Overhead Invariant**: Checked after determining `n`, before iterating through combinations, to detect excessive iteration workloads.

These checks help identify potential performance bottlenecks and are placed strategically to minimize overhead, avoiding tight loops where possible.

