system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
const ll OO = 1e18;
int di[8] = {0, 0, 1, -1, -1, 1, -1, 1};
int dj[8] = {1, -1, 0, 0, 1, 1, -1, -1};
string ys = "YES", no = "NO";
const long double dgr = acos(-1) / 180, dg = 180 / acos(-1);
const int mod = 1e8 + 7, N = 1e7, M = 2001;
vector<ll> v;
void solve(ll m, int i = 0) {
  if (!m) exit(puts("YES"));
  if (i == v.size()) return;
  solve(m, i + 1);
  solve(m + v[i], i + 1);
  solve(m - v[i], i + 1);
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  ll w, m;
  cin >> w >> m;
  if (w == 2 || w == 3) return cout << ys << '\n', 0;
  v.push_back(1);
  while (v.back() * w <= 9e9) v.push_back(v.back() * w);
  solve(m, 0);
  cout << no << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const ll OO = 1e18; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int di[8] = {0, 0, 1, -1, -1, 1, -1, 1}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dj[8] = {1, -1, 0, 0, 1, 1, -1, -1}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string ys = "YES", no = "NO"; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const long double dgr = acos(-1) / 180, dg = 180 / acos(-1); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e8 + 7, N = 1e7, M = 2001; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<ll> v; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void solve(ll m, int i = 0) { /* line 12 slow_hit_count: 193710244, fast_hit_count: 5 */
  if (!m) exit(puts("YES")); /* line 13 slow_hit_count: 193710244, fast_hit_count: 5 */
  if (i == v.size()) return; /* line 14 slow_hit_count: 193710244, fast_hit_count: 4 */
  solve(m, i + 1); /* line 15 slow_hit_count: 64570081, fast_hit_count: 2 */
  solve(m + v[i], i + 1); /* line 16 slow_hit_count: 64570081, fast_hit_count: 1 */
  solve(m - v[i], i + 1); /* line 17 slow_hit_count: 64570081, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  ll w, m; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> w >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  if (w == 2 || w == 3) return cout << ys << '\n', 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  v.push_back(1); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  while (v.back() * w <= 9e9) v.push_back(v.back() * w); /* line 28 slow_hit_count: 17, fast_hit_count: 2 */
  solve(m, 0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cout << no << '\n'; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the provided C++ program and deduce the performance characteristics, we focus on the `solve` function, which is a recursive function that appears to be a major source of inefficiency, as indicated by the line-level hit counts. Here is the analysis and the performance-characterizing invariants based on the given data:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Recursive Function Calls:**
   - The `solve` function is highly recursive and explores different combinations of adding or subtracting weights to reach a balance.
   - The line hit counts for `solve` (lines 12-17) show a drastic difference between the slow and fast inputs:
     - Line 13 (`exit(puts("YES"))`) is hit 193,710,244 times for the slow input, while only 5 times for the fast input.
     - Each of the recursive calls (lines 15-17) is hit 64,570,081 times for the slow input, compared to only a handful of times for the fast input.

2. **Recursive Tree Depth:**
   - The recursive calls happen thrice per invocation (`solve(m, i + 1)`, `solve(m + v[i], i + 1)`, `solve(m - v[i], i + 1)`), leading to a rapid growth in the function call stack, especially for larger values of `m` and smaller values of `w`.

3. **Vector `v` Growth:**
   - The vector `v` grows exponentially as powers of `w` (limited by the loop on line 28), and its size significantly influences the number of recursive calls.
   - For smaller `w`, the vector `v` grows larger, leading to more recursive calls, which could explain the slowdown in the slow input scenario.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following natural language invariants that describe performance bottlenecks:

1. **Recursive Combinatorial Explosion:**
   - Natural Language: "When the weight factor `w` is small, the vector of weights grows large and the recursive function explores a vast number of combinations, leading to a significant slowdown."

   This invariant captures the combinatorial nature of the problem, where smaller `w` values allow a larger number of terms in the vector `v`, thus increasing the recursive tree depth.

2. **Depth of Recursion:**
   - Natural Language: "If the recursive depth increases significantly due to a large number of weight combinations (potentially reaching the size of the vector `v`), the program may exhibit degraded performance."

   This invariant emphasizes the cost of deep recursion, which is exacerbated by the large size of the vector `v` when `w` is small.

3. **Inefficient Exploration of Combinations:**
   - Natural Language: "When the target mass `m` requires exploring a large number of permutations and combinations of the weights, the recursive approach becomes inefficient, especially if `w` leads to many possible terms."

   This invariant highlights the inefficiency that arises when the recursive function has to test numerous configurations to find a solution.

These invariants collectively describe scenarios where the algorithm's recursive nature, combined with the structure of the weights, leads to performance inefficiencies. They suggest that the inefficiency primarily arises from the exponential growth of possibilities as the function explores all combinations of adding and subtracting weights to balance the scales.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 to implement and integrate the performance-characterizing invariants into the original C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

For each identified invariant, we will create a C++ checker function. These checkers will be used to detect when the program might hit a performance bottleneck:

1. **Recursive Combinatorial Explosion Checker:**

```cpp
void check_recursive_combinatorial_explosion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive combinatorial explosion!" << endl;
        abort();
    }
}
```

2. **Depth of Recursion Checker:**

```cpp
void check_depth_of_recursion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}
```

3. **Inefficient Exploration of Combinations Checker:**

```cpp
void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient exploration of combinations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Program

Here's the final instrumented C++ code, incorporating the checker functions at strategic points to avoid overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

// Performance checkers
void check_recursive_combinatorial_explosion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive combinatorial explosion!" << endl;
        abort();
    }
}

void check_depth_of_recursion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient exploration of combinations!" << endl;
        abort();
    }
}

const ll OO = 1e18;
vector<ll> v;

void solve(ll m, int i = 0) {
    static int recursion_counter = 0;
    
    // Check for excessive recursion depth
    check_depth_of_recursion(recursion_counter > 100000); // Arbitrary threshold for recursion depth

    recursion_counter++;
    if (!m) exit(puts("YES"));
    if (i == v.size()) return;
    solve(m, i + 1);
    solve(m + v[i], i + 1);
    solve(m - v[i], i + 1);
    recursion_counter--;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    ll w, m;
    cin >> w >> m;

    // Check for recursive combinatorial explosion scenario
    check_recursive_combinatorial_explosion(w < 10); // Smaller w leads to larger v

    if (w == 2 || w == 3) return cout << "YES\n", 0;

    v.push_back(1);
    while (v.back() * w <= 9e9) v.push_back(v.back() * w);

    // Check for inefficient exploration of combinations
    check_inefficient_exploration(v.size() > 20); // More elements in v lead to more combinations

    solve(m, 0);
    cout << "NO\n";
}
```

### Explanation

- **Recursive Combinatorial Explosion Checker:** Placed in `main` after reading `w` to ensure that when `w` is small (e.g., less than 10), the potential for combinatorial explosion is checked.
  
- **Depth of Recursion Checker:** Integrated into the `solve` function with a static counter to track recursion depth and abort if it goes beyond a reasonable threshold.

- **Inefficient Exploration Checker:** Placed in `main` to verify that the size of vector `v` doesn't lead to a large number of combinations. The threshold of 20 is arbitrary but reasonable given the constraints.

These additions will help identify potential slow paths in the execution when using various inputs.

