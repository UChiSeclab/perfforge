system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 1e9;
int n, w, m;
int a[20] = {1};
int _b[20], *const b = _b + 1;
void init() {
  long long p = 1;
  for (n = 1; (p *= w) <= N; ++n) a[n] = p;
}
bool check4() {
  if (w <= 3) return true;
  init();
  while (true) {
    long long x = 0;
    for (int i = 0; i < n; ++i)
      if (b[i] == 1)
        x += a[i];
      else if (b[i] == 2)
        x -= a[i];
    if (x == m || 1073741824ll - x == m) return true;
    int p = n - 1;
    while (b[p] == 2) --p;
    if (p == -1) break;
    for (++b[p++]; p < n; ++p) b[p] = 0;
  }
  return false;
}
bool check() {
  if (w <= 3) return true;
  init();
  if (w == 4) return check4();
  while (true) {
    long long x = 0;
    for (int i = 0; i < n; ++i)
      if (b[i] == 1)
        x += a[i];
      else if (b[i] == 2)
        x -= a[i];
    if (x == m) return true;
    int p = n - 1;
    while (b[p] == 2) --p;
    if (p == -1) break;
    for (++b[p++]; p < n; ++p) b[p] = 0;
  }
  return false;
}
int main() {
  scanf("%d%d", &w, &m);
  puts(check() ? "YES" : "NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, w, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[20] = {1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int _b[20], *const b = _b + 1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 7 slow_hit_count: 2, fast_hit_count: 1 */
  long long p = 1; /* line 8 slow_hit_count: 2, fast_hit_count: 1 */
  for (n = 1; (p *= w) <= N; ++n) a[n] = p; /* line 9 slow_hit_count: 30, fast_hit_count: 2 */
} /* line 10 slow_hit_count: 2, fast_hit_count: 1 */
bool check4() { /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
  if (w <= 3) return true; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
  init(); /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
  while (true) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = 0; /* line 15 slow_hit_count: 14348907, fast_hit_count: 0 */
    for (int i = 0; i < n; ++i) /* line 16 slow_hit_count: 229582512, fast_hit_count: 0 */
      if (b[i] == 1) /* line 17 slow_hit_count: 215233605, fast_hit_count: 0 */
        x += a[i]; /* line 18 slow_hit_count: 71744535, fast_hit_count: 0 */
      else if (b[i] == 2) /* line 19 slow_hit_count: 143489070, fast_hit_count: 0 */
        x -= a[i]; /* line 20 slow_hit_count: 71744535, fast_hit_count: 0 */
    if (x == m || 1073741824ll - x == m) return true; /* line 21 slow_hit_count: 14348907, fast_hit_count: 0 */
    int p = n - 1; /* line 22 slow_hit_count: 14348907, fast_hit_count: 0 */
    while (b[p] == 2) --p; /* line 23 slow_hit_count: 21523360, fast_hit_count: 0 */
    if (p == -1) break; /* line 24 slow_hit_count: 14348907, fast_hit_count: 0 */
    for (++b[p++]; p < n; ++p) b[p] = 0; /* line 25 slow_hit_count: 21523344, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 14348906, fast_hit_count: 0 */
  return false; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
bool check() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  if (w <= 3) return true; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  init(); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  if (w == 4) return check4(); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  while (true) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = 0; /* line 34 slow_hit_count: 0, fast_hit_count: 2 */
    for (int i = 0; i < n; ++i) /* line 35 slow_hit_count: 0, fast_hit_count: 6 */
      if (b[i] == 1) /* line 36 slow_hit_count: 0, fast_hit_count: 4 */
        x += a[i]; /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
      else if (b[i] == 2) /* line 38 slow_hit_count: 0, fast_hit_count: 3 */
        x -= a[i]; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (x == m) return true; /* line 40 slow_hit_count: 0, fast_hit_count: 2 */
    int p = n - 1; /* line 41 slow_hit_count: 0, fast_hit_count: 1 */
    while (b[p] == 2) --p; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
    if (p == -1) break; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    for (++b[p++]; p < n; ++p) b[p] = 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
  return false; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &w, &m); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  puts(check() ? "YES" : "NO"); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the C program provided and derive performance-characterizing invariants, let's go through the tasks as defined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `check4()` function is heavily hit during execution with the slow input, especially lines involved in the while loop (lines 15 to 25).
   - Line 9 in the `init()` function is also hit significantly more times with the slow input.

2. **Pinpointing Lines:**
   - The initialization of powers of `w` in the `init()` function (line 9) is executed more times in the slow input, which suggests that a larger number of powers are being generated.
   - The nested loop and the surrounding logic in `check4()` (lines 15 to 25) experience an extreme number of hits, indicating it is a significant contributor to the slowdown.

3. **Inference on Line Interaction:**
   - The function `check4()` is responsible for iterating over possible weight combinations using permutations of `b`, which leads to its high hit count.
   - The slowdown is likely due to the large search space generated by the number of possible weight combinations for `w = 4`, which is exacerbated when `m` is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**
   - "When the base weight `w` is small (e.g., around 4), and the item mass `m` is large, the program may enter an extensive search space of weight combinations, resulting in significant slowdowns."
   - "The program exhibits slow performance when a small base, such as `w = 4`, causes deep exploration of permutations in a loop, especially when many powers need to be considered to balance the scales."

2. **Avoid Specific Numeric Values:**
   - The invariants are framed to emphasize the relationship between `w` being small and large values of `m`, without mentioning specific values from the input.

3. **Correlate Conditions to Input Patterns:**
   - The patterns suggest that small `w` values lead to a combinatorial explosion in possibilities, while large `m` demands more iterations to meet the condition `x == m`.

4. **Broad Statements Reflecting Triggers:**
   - The statements above are framed to capture the essence of what leads to slow performance, making them applicable beyond the provided input, yet adhering to the constraints.

### Final Output: Performance-Characterizing Invariants

1. **Invariant #1:**
   - "When the base weight `w` is small (e.g., around 4), and the item mass `m` is significantly high, the algorithm may need to explore a vast number of permutations, leading to potential slowdowns."

2. **Invariant #2:**
   - "The program becomes slow if small base values like `w = 4` require excessive computational resources to balance a large mass `m` due to the exponential increase in possible combinations through permutations."

These invariants reflect the core performance challenges observed in the program, emphasizing the combinatorial explosion due to small values of `w` in relation to large `m`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived in natural language, here are the C++ checks:

1. **Invariant #1 Checker:**
   - "When the base weight `w` is small (e.g., around 4), and the item mass `m` is significantly high, the algorithm may need to explore a vast number of permutations, leading to potential slowdowns."

   ```cpp
   void check_small_base_large_mass(int w, long long m) {
       if (w <= 4 && m > 1e8) {
           cerr << "Warning: Performance bottleneck condition triggered - small base with large mass!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2 Checker:**
   - "The program becomes slow if small base values like `w = 4` require excessive computational resources to balance a large mass `m` due to the exponential increase in possible combinations through permutations."

   ```cpp
   void check_exponential_permutations(int w, long long m) {
       if (w == 4 && m > 1e8) {
           cerr << "Warning: Performance bottleneck condition triggered - exponential permutations with base 4!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Program

Now, integrate the checker functions into the original C++ code at appropriate locations to ensure they do not degrade performance unnecessarily.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 1e9;
int n, w, m;
int a[20] = {1};
int _b[20], *const b = _b + 1;

void check_small_base_large_mass(int w, long long m) {
    if (w <= 4 && m > 1e8) {
        cerr << "Warning: Performance bottleneck condition triggered - small base with large mass!" << endl;
        abort();
    }
}

void check_exponential_permutations(int w, long long m) {
    if (w == 4 && m > 1e8) {
        cerr << "Warning: Performance bottleneck condition triggered - exponential permutations with base 4!" << endl;
        abort();
    }
}

void init() {
    long long p = 1;
    for (n = 1; (p *= w) <= N; ++n) a[n] = p;
}

bool check4() {
    if (w <= 3) return true;
    init();
    while (true) {
        long long x = 0;
        for (int i = 0; i < n; ++i)
            if (b[i] == 1)
                x += a[i];
            else if (b[i] == 2)
                x -= a[i];
        if (x == m || 1073741824ll - x == m) return true;
        int p = n - 1;
        while (b[p] == 2) --p;
        if (p == -1) break;
        for (++b[p++]; p < n; ++p) b[p] = 0;
    }
    return false;
}

bool check() {
    if (w <= 3) return true;
    init();
    if (w == 4) return check4();
    while (true) {
        long long x = 0;
        for (int i = 0; i < n; ++i)
            if (b[i] == 1)
                x += a[i];
            else if (b[i] == 2)
                x -= a[i];
        if (x == m) return true;
        int p = n - 1;
        while (b[p] == 2) --p;
        if (p == -1) break;
        for (++b[p++]; p < n; ++p) b[p] = 0;
    }
    return false;
}

int main() {
    scanf("%d%d", &w, &m);

    // Check for performance bottlenecks after reading inputs
    check_small_base_large_mass(w, m);
    check_exponential_permutations(w, m);

    puts(check() ? "YES" : "NO");
    return 0;
}
```

### Explanation

- **Checker Integration:** The checker functions are called immediately after reading the inputs. This ensures that the performance bottleneck conditions are checked before the potentially expensive calculations begin, without adding overhead inside the computation loops.
- **Condition Checks:** The conditions are carefully designed to capture scenarios that match the derived invariants and prevent the execution of code paths that are computationally expensive under certain inputs.

This integration approach maintains the original program's logic while adding safeguards against performance degradation.

