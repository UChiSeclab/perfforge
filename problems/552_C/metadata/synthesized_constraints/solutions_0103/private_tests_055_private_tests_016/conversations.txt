system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const long long int infLL = 90000000000000000;
int MOD1 = 1000000007;
int MOD2 = 1000000009;
inline bool checkBit(long long int n, long long int i) {
  return n & (1LL << i);
}
inline long long int setBit(long long int n, long long int i) {
  return n | (1LL << i);
  ;
}
inline long long int resetBit(long long int n, long long int i) {
  return n & (~(1LL << i));
}
int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
inline bool EQ(double a, double b) { return fabs(a - b) < 1e-9; }
inline bool isLeapYear(long long int year) {
  return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
}
inline void normal(long long int &a) {
  a %= 1000000000007LL;
  (a < 0) && (a += 1000000000007LL);
}
inline long long int modMul(long long int a, long long int b) {
  a %= 1000000000007LL, b %= 1000000000007LL;
  normal(a), normal(b);
  return (a * b) % 1000000000007LL;
}
inline long long int modAdd(long long int a, long long int b) {
  a %= 1000000000007LL, b %= 1000000000007LL;
  normal(a), normal(b);
  return (a + b) % 1000000000007LL;
}
inline long long int modSub(long long int a, long long int b) {
  a %= 1000000000007LL, b %= 1000000000007LL;
  normal(a), normal(b);
  a -= b;
  normal(a);
  return a;
}
inline long long int modPow(long long int b, long long int p) {
  long long int r = 1LL;
  while (p) {
    if (p & 1) r = modMul(r, b);
    b = modMul(b, b);
    p >>= 1LL;
  }
  return r;
}
inline long long int modDiv(long long int a, long long int b) {
  return modMul(a, modPow(b, 1000000000007LL - 2));
}
bool comp(const pair<int, int> &p1, const pair<int, int> &p2) {
  return p1.second < p2.second;
}
long long int converter(string a) {
  long long int i, mul = 1, r, t, ans = 0LL;
  if (a.length() == 0) return 0;
  for (i = a.length() - 1; i >= 0; i--) {
    t = a[i] - '0';
    r = t % 10;
    ans += (mul * r);
    mul = mul * 10;
  }
  return ans;
}
vector<long long int> w;
long long int n, m;
bool flag;
void recur(long long int scale, long long int mass, long long int idx) {
  if (scale > 3000000000 || mass > 3000000000 || idx == w.size()) return;
  if (scale == mass) {
    flag = true;
    return;
  }
  recur(scale + w[idx], mass, idx + 1);
  recur(scale, mass + w[idx], idx + 1);
  recur(scale, mass, idx + 1);
}
int main() {
  scanf("%lld %lld", &n, &m);
  if (n == 2 || n == 3) {
    cout << "YES";
    return 0;
  }
  w.push_back(1);
  long long int i = 1LL;
  while (i <= 3000000000) {
    i = i * n;
    w.push_back(i);
    ;
  }
  flag = false;
  recur(0, m, 0);
  if (flag) {
    cout << "YES";
  } else {
    cout << "NO";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1000000000


(G.2) Fast Input

1000000000 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 2000000000; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long int infLL = 90000000000000000; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int MOD1 = 1000000007; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int MOD2 = 1000000009; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline bool checkBit(long long int n, long long int i) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return n & (1LL << i); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int setBit(long long int n, long long int i) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return n | (1LL << i); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  ; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int resetBit(long long int n, long long int i) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return n & (~(1LL << i)); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {0, 0, +1, -1}; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {+1, -1, 0, 0}; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
inline bool EQ(double a, double b) { return fabs(a - b) < 1e-9; } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
inline bool isLeapYear(long long int year) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
inline void normal(long long int &a) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  a %= 1000000000007LL; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  (a < 0) && (a += 1000000000007LL); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int modMul(long long int a, long long int b) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  a %= 1000000000007LL, b %= 1000000000007LL; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  normal(a), normal(b); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return (a * b) % 1000000000007LL; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int modAdd(long long int a, long long int b) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  a %= 1000000000007LL, b %= 1000000000007LL; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  normal(a), normal(b); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return (a + b) % 1000000000007LL; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int modSub(long long int a, long long int b) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  a %= 1000000000007LL, b %= 1000000000007LL; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  normal(a), normal(b); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  a -= b; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  normal(a); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int modPow(long long int b, long long int p) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long int r = 1LL; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  while (p) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    if (p & 1) r = modMul(r, b); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    b = modMul(b, b); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    p >>= 1LL; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
inline long long int modDiv(long long int a, long long int b) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return modMul(a, modPow(b, 1000000000007LL - 2)); /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
bool comp(const pair<int, int> &p1, const pair<int, int> &p2) { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  return p1.second < p2.second; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
long long int converter(string a) { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  long long int i, mul = 1, r, t, ans = 0LL; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  if (a.length() == 0) return 0; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = a.length() - 1; i >= 0; i--) { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    t = a[i] - '0'; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    r = t % 10; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    ans += (mul * r); /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    mul = mul * 10; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> w; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, m; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
bool flag; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
void recur(long long int scale, long long int mass, long long int idx) { /* line 75 slow_hit_count: 193710244, fast_hit_count: 37 */
  if (scale > 3000000000 || mass > 3000000000 || idx == w.size()) return; /* line 76 slow_hit_count: 193710244, fast_hit_count: 37 */
  if (scale == mass) { /* line 77 slow_hit_count: 64570081, fast_hit_count: 13 */
    flag = true; /* line 78 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 79 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  recur(scale + w[idx], mass, idx + 1); /* line 81 slow_hit_count: 64570081, fast_hit_count: 12 */
  recur(scale, mass + w[idx], idx + 1); /* line 82 slow_hit_count: 64570081, fast_hit_count: 12 */
  recur(scale, mass, idx + 1); /* line 83 slow_hit_count: 64570081, fast_hit_count: 12 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld", &n, &m); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 2 || n == 3) { /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  w.push_back(1); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  long long int i = 1LL; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  while (i <= 3000000000) { /* line 93 slow_hit_count: 17, fast_hit_count: 3 */
    i = i * n; /* line 94 slow_hit_count: 16, fast_hit_count: 2 */
    w.push_back(i); /* line 95 slow_hit_count: 16, fast_hit_count: 2 */
    ; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  flag = false; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  recur(0, m, 0); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  if (flag) { /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 101 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO"; /* line 103 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 106 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program for performance bottlenecks, let's follow the specified phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `recur` function (lines 75-83) has a significantly higher hit count during the slow input run compared to the fast input run.
   - Specifically, lines related to recursive calls (`line 75, 81, 82, 83`) have extraordinarily high hit counts in the slow input.

2. **Pinpoint Lines with More Hits:**
   - The recursive function `recur` is the primary source of performance degradation. It is called multiple times due to its recursive nature.
   - The difference in hit counts suggests that the recursive exploration is much deeper and broader with the slow input.

3. **Inference on Data Structure and Recursion:**
   - The slower input likely causes extensive exploration of the recursive search space. This is probably because the multiplication and addition of weights (powers of n) create numerous possibilities to balance the scales, especially when n is small, causing a high branching factor at each level of recursion.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Generate Natural Language Statements:**

   - **Invariant 1: High Branching Factor and Deep Recursion**
     - Natural language description: "When the base of the weights (`w`) is small, the recursive search space explodes due to a high branching factor and deep recursion, potentially causing a slowdown."
     - Explanation: For smaller `w`, the powers of `w` grow slowly, leading to more potential combinations to explore recursively to balance the scales.

   - **Invariant 2: Exponential Growth of Search Space**
     - Natural language description: "If the recursive function has to explore an exponentially large set of combinations due to many small power increments (especially when `w` is small), the program may slow down significantly."
     - Explanation: Smaller `w` results in a larger sequence of powers to check for balancing, which increases the recursion depth and branching.

2. **Correlate Conditions to Input Patterns:**
   - These conditions strongly apply when `w` is at its minimum threshold (e.g., `w = 2 or 3`) as seen in the early exit of the main program which handles these cases directly for optimization.
   - Additionally, slow performance may occur when `m` is large relative to `w`, requiring more recursive exploration to find a solution.

3. **Ensure Broadness Yet Realistic Triggers:**
   - While the specific instance of slow input (e.g., `w = 4`) is not mentioned, the invariant should apply broadly to similar small values of `w` within the allowed range `[2, 10^9]`.

### Summary of Performance-Characterizing Invariants

1. **High Branching Factor and Deep Recursion:**
   - "When the base of the weights (`w`) is small, the recursive search space explodes due to a high branching factor and deep recursion, potentially causing a slowdown."

2. **Exponential Growth of Search Space:**
   - "If the recursive function has to explore an exponentially large set of combinations due to many small power increments (especially when `w` is small), the program may slow down significantly."

These invariants capture the potential slowdown scenarios in terms of recursion depth and branching factors, especially relevant to small values of `w`, under the constraints provided.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vanya has a scales for weighing loads and weights of masses w0, w1, w2, ..., w100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.

Input

The first line contains two integers w, m (2 ≤ w ≤ 109, 1 ≤ m ≤ 109) — the number defining the masses of the weights and the mass of the item.

Output

Print word 'YES' if the item can be weighted and 'NO' if it cannot.

Examples

Input

3 7


Output

YES


Input

100 99


Output

YES


Input

100 50


Output

NO

Note

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input. 

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants inferred earlier into the C++ program. We'll break this down into two phases as specified.

### Phase 3: Implement the Natural Language Invariants in C++

For the natural language invariants identified, we'll create runtime checks:

1. **High Branching Factor and Deep Recursion**
   - This check will confirm if the base of the weights (`w`) is small, indicating the possibility of high branching and deep recursion.

```cpp
void check_branching_factor_and_depth(long long int w) {
    if (w <= 10) { // Arbitrary threshold chosen based on problem domain
        cerr << "Warning: Potential high branching factor and deep recursion due to small base w!" << endl;
        abort();
    }
}
```

2. **Exponential Growth of Search Space**
   - This check will verify if the recursive search space becomes too large due to small power increments.

```cpp
void check_exponential_growth(long long int w, long long int m) {
    if (w <= 10 && m > 100000000) { // Arbitrary threshold to identify large search space
        cerr << "Warning: Potential exponential growth of search space!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now, let's integrate these checks into the original C++ program. We'll place the checks after reading inputs but before the recursive function is called to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check potential high branching factor and deep recursion
void check_branching_factor_and_depth(long long int w) {
    if (w <= 10) {
        cerr << "Warning: Potential high branching factor and deep recursion due to small base w!" << endl;
        abort();
    }
}

// Function to check potential exponential growth of search space
void check_exponential_growth(long long int w, long long int m) {
    if (w <= 10 && m > 100000000) {
        cerr << "Warning: Potential exponential growth of search space!" << endl;
        abort();
    }
}

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const long long int infLL = 90000000000000000;
int MOD1 = 1000000007;
int MOD2 = 1000000009;

inline bool checkBit(long long int n, long long int i) {
    return n & (1LL << i);
}

inline long long int setBit(long long int n, long long int i) {
    return n | (1LL << i);
}

inline long long int resetBit(long long int n, long long int i) {
    return n & (~(1LL << i));
}

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};

inline bool EQ(double a, double b) { return fabs(a - b) < 1e-9; }

inline bool isLeapYear(long long int year) {
    return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
}

inline void normal(long long int &a) {
    a %= 1000000000007LL;
    (a < 0) && (a += 1000000000007LL);
}

inline long long int modMul(long long int a, long long int b) {
    a %= 1000000000007LL, b %= 1000000000007LL;
    normal(a), normal(b);
    return (a * b) % 1000000000007LL;
}

inline long long int modAdd(long long int a, long long int b) {
    a %= 1000000000007LL, b %= 1000000000007LL;
    normal(a), normal(b);
    return (a + b) % 1000000000007LL;
}

inline long long int modSub(long long int a, long long int b) {
    a %= 1000000000007LL, b %= 1000000000007LL;
    normal(a), normal(b);
    a -= b;
    normal(a);
    return a;
}

inline long long int modPow(long long int b, long long int p) {
    long long int r = 1LL;
    while (p) {
        if (p & 1) r = modMul(r, b);
        b = modMul(b, b);
        p >>= 1LL;
    }
    return r;
}

inline long long int modDiv(long long int a, long long int b) {
    return modMul(a, modPow(b, 1000000000007LL - 2));
}

bool comp(const pair<int, int> &p1, const pair<int, int> &p2) {
    return p1.second < p2.second;
}

long long int converter(string a) {
    long long int i, mul = 1, r, t, ans = 0LL;
    if (a.length() == 0) return 0;
    for (i = a.length() - 1; i >= 0; i--) {
        t = a[i] - '0';
        r = t % 10;
        ans += (mul * r);
        mul = mul * 10;
    }
    return ans;
}

vector<long long int> w;
long long int n, m;
bool flag;

void recur(long long int scale, long long int mass, long long int idx) {
    if (scale > 3000000000 || mass > 3000000000 || idx == w.size()) return;
    if (scale == mass) {
        flag = true;
        return;
    }
    recur(scale + w[idx], mass, idx + 1);
    recur(scale, mass + w[idx], idx + 1);
    recur(scale, mass, idx + 1);
}

int main() {
    scanf("%lld %lld", &n, &m);

    // Check potential performance bottlenecks
    check_branching_factor_and_depth(n);
    check_exponential_growth(n, m);

    if (n == 2 || n == 3) {
        cout << "YES";
        return 0;
    }
    w.push_back(1);
    long long int i = 1LL;
    while (i <= 3000000000) {
        i = i * n;
        w.push_back(i);
    }
    flag = false;
    recur(0, m, 0);
    if (flag) {
        cout << "YES";
    } else {
        cout << "NO";
    }
    return 0;
}
```

### Explanation

- **`check_branching_factor_and_depth`**: Checks if `w` is small, which might cause high branching and recursion depth.
- **`check_exponential_growth`**: Checks for conditions that might lead to an exponentially large search space.

These checks are placed after reading input and before the computation begins. This allows us to detect problematic inputs without impacting the performance during the recursive search.

