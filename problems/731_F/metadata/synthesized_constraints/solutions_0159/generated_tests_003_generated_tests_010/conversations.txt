system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Vlad is fond of popular computer game Bota-2. Recently, the developers announced the new add-on named Bota-3. Of course, Vlad immediately bought only to find out his computer is too old for the new game and needs to be updated.

There are n video cards in the shop, the power of the i-th video card is equal to integer value ai. As Vlad wants to be sure the new game will work he wants to buy not one, but several video cards and unite their powers using the cutting-edge technology. To use this technology one of the cards is chosen as the leading one and other video cards are attached to it as secondary. For this new technology to work it's required that the power of each of the secondary video cards is divisible by the power of the leading video card. In order to achieve that the power of any secondary video card can be reduced to any integer value less or equal than the current power. However, the power of the leading video card should remain unchanged, i.e. it can't be reduced.

Vlad has an infinite amount of money so he can buy any set of video cards. Help him determine which video cards he should buy such that after picking the leading video card and may be reducing some powers of others to make them work together he will get the maximum total value of video power.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of video cards in the shop.

The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 200 000) — powers of video cards.

Output

The only line of the output should contain one integer value — the maximum possible total power of video cards working together.

Examples

Input

4
3 2 15 9


Output

27


Input

4
8 2 2 7


Output

18

Note

In the first sample, it would be optimal to buy video cards with powers 3, 15 and 9. The video card with power 3 should be chosen as the leading one and all other video cards will be compatible with it. Thus, the total power would be 3 + 15 + 9 = 27. If he buys all the video cards and pick the one with the power 2 as the leading, the powers of all other video cards should be reduced by 1, thus the total power would be 2 + 2 + 14 + 8 = 26, that is less than 27. Please note, that it's not allowed to reduce the power of the leading video card, i.e. one can't get the total power 3 + 1 + 15 + 9 = 28.

In the second sample, the optimal answer is to buy all video cards and pick the one with the power 2 as the leading. The video card with the power 7 needs it power to be reduced down to 6. The total power would be 8 + 2 + 2 + 6 = 18.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 200005;
int n;
int a[N];
int f[N];
int sumf[N];
long long sum;
long long best;
vector<int> freq;
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d", a + i);
    f[a[i]]++;
    sum += a[i];
  }
  if (f[1]) {
    printf("%lld\n", sum);
    return 0;
  }
  for (int i = 2; i < N; i++) {
    if (f[i]) freq.push_back(i);
    sumf[i] = f[i] + sumf[i - 1];
  }
  for (int i = 0; i < freq.size(); i++) {
    int leading = freq[i];
    long long total = 0;
    for (int j = leading; j < N; j += leading) {
      total += 1ll * (sumf[min(j + leading - 1, N - 1)] - sumf[j - 1]) * j;
    }
    best = max(best, total);
  }
  printf("%lld\n", best);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
2 3 5 5 5 5 5 7 5 5 5 5


(G.2) Fast Input

12
2 3 5 5 5 5 5 7 5 5 1 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 200005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int f[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int sumf[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long sum; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long best; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> freq; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 13, fast_hit_count: 13 */
    scanf("%d", a + i); /* line 14 slow_hit_count: 12, fast_hit_count: 12 */
    f[a[i]]++; /* line 15 slow_hit_count: 12, fast_hit_count: 12 */
    sum += a[i]; /* line 16 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (f[1]) { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%lld\n", sum); /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < N; i++) { /* line 22 slow_hit_count: 200004, fast_hit_count: 0 */
    if (f[i]) freq.push_back(i); /* line 23 slow_hit_count: 200003, fast_hit_count: 0 */
    sumf[i] = f[i] + sumf[i - 1]; /* line 24 slow_hit_count: 200003, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < freq.size(); i++) { /* line 26 slow_hit_count: 5, fast_hit_count: 0 */
    int leading = freq[i]; /* line 27 slow_hit_count: 4, fast_hit_count: 0 */
    long long total = 0; /* line 28 slow_hit_count: 4, fast_hit_count: 0 */
    for (int j = leading; j < N; j += leading) { /* line 29 slow_hit_count: 235246, fast_hit_count: 0 */
      total += 1ll * (sumf[min(j + leading - 1, N - 1)] - sumf[j - 1]) * j; /* line 30 slow_hit_count: 235242, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    best = max(best, total); /* line 32 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", best); /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we'll analyze the line-level hit counts and derive performance-characterizing invariants based on the differences observed between the fast and slow runs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - Lines 22-24: These lines are executed significantly more times in the slow input compared to the fast input. This loop iterates over all possible power values up to \( N \), which can be up to 200,000. The high hit count indicates that this loop runs many times, indicating it’s likely a contributor to the slowdown.
   - Lines 29-30: This nested loop inside the outer loop (lines 26-32) also shows a high hit count in the slow input. The loop iterates over multiples of each power value in `freq`, calculating the total power.

2. **Pinpointing Lines or Functions with More Hits:**
   - The loops on lines 22 and 29 are the primary candidates for inefficiency. The outer loop (lines 22-24) processes every possible power value, and the nested loop (lines 29-30) accumulates total power by iterating over multiples of each frequency list value.

3. **Inference on Data Structure Interaction:**
   - The program uses an array `sumf` to store cumulative frequencies, which is updated in the loop on line 24. The use of this array in a nested loop suggests potential inefficiencies when processing large numbers of power values. The nested loops process combinations of power values repeatedly, potentially leading to a quadratic-like performance characteristic.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficient code segments, we can derive the following natural language performance invariants:

1. **Invariant 1:**
   - "When there is a high frequency of video card powers that are close to each other, the outer loop that iterates over all possible power values can be triggered extensively, slowing down performance."
   - This is because the loop at line 22 processes every power value, and with high frequency, it leads to more iterations and processing time.

2. **Invariant 2:**
   - "If the data structure `freq` contains many elements, particularly those with common divisors, the nested loop will perform excessive computations by iterating over multiples of these powers, leading to a slowdown."
   - The nested loop at line 29 calculates sums over a potentially large range, especially when common divisors are present among the powers, causing high hit counts.

3. **Invariant 3:**
   - "The performance degrades when there is an absence of a power value of 1 among the video cards, as the early exit condition is not met, causing the program to process all possible power values up to the maximum."
   - The condition at line 18 exploits the presence of a power value of 1 to exit early—when absent, all power values are processed.

### Summary

The slow input scenario most likely occurs when:
- Multiple video cards have closely grouped powers without a power of 1,
- The leading card value results in processing many multiples,
- There are frequent divisors among the power values, leading to high computation from the nested loops.

These scenarios highlight the importance of input pattern characteristics, such as frequency and divisibility, which directly impact the performance of the solution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Vlad is fond of popular computer game Bota-2. Recently, the developers announced the new add-on named Bota-3. Of course, Vlad immediately bought only to find out his computer is too old for the new game and needs to be updated.

There are n video cards in the shop, the power of the i-th video card is equal to integer value ai. As Vlad wants to be sure the new game will work he wants to buy not one, but several video cards and unite their powers using the cutting-edge technology. To use this technology one of the cards is chosen as the leading one and other video cards are attached to it as secondary. For this new technology to work it's required that the power of each of the secondary video cards is divisible by the power of the leading video card. In order to achieve that the power of any secondary video card can be reduced to any integer value less or equal than the current power. However, the power of the leading video card should remain unchanged, i.e. it can't be reduced.

Vlad has an infinite amount of money so he can buy any set of video cards. Help him determine which video cards he should buy such that after picking the leading video card and may be reducing some powers of others to make them work together he will get the maximum total value of video power.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of video cards in the shop.

The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 200 000) — powers of video cards.

Output

The only line of the output should contain one integer value — the maximum possible total power of video cards working together.

Examples

Input

4
3 2 15 9


Output

27


Input

4
8 2 2 7


Output

18

Note

In the first sample, it would be optimal to buy video cards with powers 3, 15 and 9. The video card with power 3 should be chosen as the leading one and all other video cards will be compatible with it. Thus, the total power would be 3 + 15 + 9 = 27. If he buys all the video cards and pick the one with the power 2 as the leading, the powers of all other video cards should be reduced by 1, thus the total power would be 2 + 2 + 14 + 8 = 26, that is less than 27. Please note, that it's not allowed to reduce the power of the leading video card, i.e. one can't get the total power 3 + 1 + 15 + 9 = 28.

In the second sample, the optimal answer is to buy all video cards and pick the one with the power 2 as the leading. The video card with the power 7 needs it power to be reduced down to 6. The total power would be 8 + 2 + 2 + 6 = 18.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

Below, I'll translate the performance-characterizing invariants we previously defined into C++ code snippets. Each snippet includes a runtime check that should be inserted into the original program.

#### Invariant 1: High frequency of closely grouped powers
```cpp
void check_high_frequency_invariant(const vector<int>& freq) {
    int threshold = 1000; // Assume a threshold for a high frequency of nearly grouped powers
    for (int i = 0; i < freq.size() - 1; ++i) {
        if (freq[i + 1] - freq[i] < threshold) {
            cerr << "Warning: Performance bottleneck condition triggered due to high frequency of closely grouped powers!" << endl;
            abort();
        }
    }
}
```

#### Invariant 2: Large `freq` size causing excessive computations
```cpp
void check_large_freq_invariant(const vector<int>& freq) {
    if (freq.size() > 50000) { // Assume a reasonable threshold for large size
        cerr << "Warning: Performance bottleneck condition triggered due to large frequency list size!" << endl;
        abort();
    }
}
```

#### Invariant 3: Absence of power value 1
```cpp
void check_no_power_one_invariant(const int* f) {
    if (f[1] == 0) { // Check if there's no power value of 1
        cerr << "Warning: Performance bottleneck condition triggered due to absence of power value 1!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program where they are most effective. The checkers will be placed before major loops and computations to prevent unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 200005;
int n;
int a[N];
int f[N];
int sumf[N];
long long sum;
long long best;
vector<int> freq;

// Checkers for performance invariants
void check_high_frequency_invariant(const vector<int>& freq) {
    int threshold = 1000; 
    for (int i = 0; i < freq.size() - 1; ++i) {
        if (freq[i + 1] - freq[i] < threshold) {
            cerr << "Warning: Performance bottleneck condition triggered due to high frequency of closely grouped powers!" << endl;
            abort();
        }
    }
}

void check_large_freq_invariant(const vector<int>& freq) {
    if (freq.size() > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large frequency list size!" << endl;
        abort();
    }
}

void check_no_power_one_invariant(const int* f) {
    if (f[1] == 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to absence of power value 1!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", a + i);
        f[a[i]]++;
        sum += a[i];
    }

    // Invariant check for absence of power value 1
    check_no_power_one_invariant(f);

    if (f[1]) {
        printf("%lld\n", sum);
        return 0;
    }
    
    for (int i = 2; i < N; i++) {
        if (f[i]) freq.push_back(i);
        sumf[i] = f[i] + sumf[i - 1];
    }

    // Invariant check for large freq size
    check_large_freq_invariant(freq);

    for (int i = 0; i < freq.size(); i++) {
        int leading = freq[i];
        long long total = 0;
        for (int j = leading; j < N; j += leading) {
            total += 1ll * (sumf[min(j + leading - 1, N - 1)] - sumf[j - 1]) * j;
        }
        best = max(best, total);
    }

    // Invariant check for high frequency of closely grouped powers
    check_high_frequency_invariant(freq);

    printf("%lld\n", best);
    return 0;
}
```

### Summary

The checkers are placed:
- **`check_no_power_one_invariant`**: After input reading to catch early exits.
- **`check_large_freq_invariant`**: Before the nested loop to avoid redundant computations.
- **`check_high_frequency_invariant`**: After the `freq` vector is prepared, assesses closeness of power values.
  
These checks help identify performance bottlenecks by ensuring the program does not enter inefficient execution paths, useful for testing and fuzzing.

