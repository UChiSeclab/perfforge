system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  cin >> n;
  map<int, int> cnt;
  int a;
  for (int i = 0; i < n; i++) {
    cin >> a;
    ++cnt[a];
  }
  int ones = cnt[1], twos = cnt[2], threes = cnt[3], fours = cnt[4];
  int ans = 0;
  if (ones >= twos) {
    ans += twos;
    threes += twos;
    ones -= twos;
    twos = 0;
  } else {
    ans += ones;
    threes += ones;
    twos -= ones;
    ones = 0;
  }
  if (ones) {
    ans += ones / 3 * 2;
    threes += ones / 3;
    ones = ones % 3;
    if (ones <= threes) {
      ans += ones;
      ones = 0;
    } else if (ones == 2 && fours >= 1) {
      ans += 2;
    } else if (ones == 1 && fours >= 2) {
      ans += 2;
    } else {
      ans = -1;
    }
  } else if (twos) {
    ans += twos / 3 * 2;
    threes += twos / 3 * 2;
    twos %= 3;
    if (twos == 1) {
      if (fours) {
        ans += 1;
        twos = 0;
      } else if (threes >= 2) {
        ans += 2;
        twos = 0;
      } else {
        ans = -1;
      }
    } else if (twos == 2) {
      ans += 2;
      twos = 0;
    }
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200
4 1 1 4 3 1 1 3 1 1 1 4 3 3 3 2 3 3 1 3 3 4 4 2 2 2 3 1 2 2 2 3 1 1 3 2 2 4 1 3 4 3 2 4 2 2 4 2 2 3 4 2 3 2 2 1 2 4 4 2 4 4 2 3 2 4 1 4 2 1 3 4 1 3 1 1 2 1 4 1 3 3 3 4 1 4 4 1 4 4 2 3 1 3 3 2 2 1 4 2 4 4 3 3 3 1 3 4 3 1 1 1 1 4 2 1 2 3 2 2 2 3 2 1 2 1 1 1 2 4 1 3 3 3 2 3 3 2 3 4 4 3 3 4 3 2 1 4 1 4 2 1 3 2 4 4 1 4 1 1 1 3 2 3 4 2 2 4 1 4 4 4 4 3 1 3 1 4 3 2 1 2 1 1 2 4 1 3 3 4 4 2 2 4 4 3 2 1 2 4


(G.2) Fast Input

3
4 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, int> cnt; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  int a; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 201, fast_hit_count: 4 */
    cin >> a; /* line 9 slow_hit_count: 200, fast_hit_count: 3 */
    ++cnt[a]; /* line 10 slow_hit_count: 200, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int ones = cnt[1], twos = cnt[2], threes = cnt[3], fours = cnt[4]; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  if (ones >= twos) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    ans += twos; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    threes += twos; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    ones -= twos; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    twos = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    ans += ones; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    threes += ones; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    twos -= ones; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    ones = 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (ones) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    ans += ones / 3 * 2; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
    threes += ones / 3; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    ones = ones % 3; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    if (ones <= threes) { /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
      ans += ones; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      ones = 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (ones == 2 && fours >= 1) { /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
      ans += 2; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
    } else if (ones == 1 && fours >= 2) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      ans += 2; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      ans = -1; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (twos) { /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
    ans += twos / 3 * 2; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    threes += twos / 3 * 2; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    twos %= 3; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (twos == 1) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      if (fours) { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        ans += 1; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
        twos = 0; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (threes >= 2) { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        ans += 2; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        twos = 0; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        ans = -1; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (twos == 2) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      ans += 2; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      twos = 0; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided program and hit count information, let's proceed with the analysis for performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop and Input Reading:**
   - Lines 8-10 are executed `n` times, where `n` is the number of compartments. For the slow input, `n` is 200, indicating that the loop's execution time scales linearly with the input size due to reading and counting operations.

2. **Condition Logic:**
   - Lines 14-18: This block is executed once since `ones >= twos` condition is true for both inputs.
   - Lines 25-38: Executed only once in the fast input, but conditions inside this block are more complex. The slow execution might happen when this entire block has to execute additional logic due to more complex combinations of `ones`, `twos`, `threes`, and `fours`.

3. **Complex Logic:**
   - Lines 39-56: This block is not hit during the fast input but is executed in the slow input. This suggests that when `twos` is non-zero after the first block, additional complexity arises.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are some natural language invariants indicating potential slow paths:

1. **High Count of Ones and Twos:**
   - Natural Language: "When the count of compartments with one student (`ones`) and two students (`twos`) is high relative to `threes` and `fours`, the complex reallocation logic may cause slow execution."
   - Reason: The logic for redistributing students involves multiple checks and operations that are triggered when `ones` and `twos` require complex swaps.

2. **Inefficient Redistribution Logic:**
   - Natural Language: "If after initial redistribution of ones and twos, either ones or twos remain such that additional checks are needed to balance them with threes and fours, the program may slow down."
   - Reason: Additional logic is required to handle remaining `ones` and `twos`, especially if they cannot be immediately resolved into groups of threes or fours.

3. **Complex Redistribution of Twos:**
   - Natural Language: "When there is a remainder of twos after balancing with ones, and additional threes or fours are insufficient to immediately resolve them, further logic is required, potentially leading to slow execution."
   - Reason: Twos are difficult to balance without additional available threes or fours, requiring complex decision-making logic.

These invariants abstractly capture the circumstances under which the program execution path becomes more complex, leading to longer running times without relying on specific numeric values from the inputs. They focus on how input patterns affect branching and condition checking within the program's logic, given the constraints of n ≤ 10^6.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

Solution (C++ code):
{solution}


assistant: To transform the performance-characterizing invariants into runtime checks and integrate them into the given C++ program, let's proceed through the two phases:

### Phase 3: Implement the Natural Language Invariants in C++

For each invariant, we will create a runtime check as described in the task:

#### Invariant 1: High Count of Ones and Twos

```cpp
void check_high_ones_twos(int ones, int twos, int threes, int fours) {
    if (ones > 2 * threes && twos > 2 * fours) {
        cerr << "Warning: High count of ones and twos relative to threes and fours!" << endl;
        abort();
    }
}
```

#### Invariant 2: Inefficient Redistribution Logic

```cpp
void check_remainder_ones_twos(int ones, int twos, int threes, int fours) {
    if (ones % 3 != 0 && threes + fours <= ones / 3) {
        cerr << "Warning: Remainder ones after distribution could cause inefficiency!" << endl;
        abort();
    }
}
```

#### Invariant 3: Complex Redistribution of Twos

```cpp
void check_remainder_twos(int twos, int threes, int fours) {
    if (twos % 3 != 0 && threes + fours < 2 * twos / 3) {
        cerr << "Warning: Remainder twos after distribution could cause inefficiency!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the original C++ program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for the performance-characterizing invariants
void check_high_ones_twos(int ones, int twos, int threes, int fours) {
    if (ones > 2 * threes && twos > 2 * fours) {
        cerr << "Warning: High count of ones and twos relative to threes and fours!" << endl;
        abort();
    }
}

void check_remainder_ones_twos(int ones, int twos, int threes, int fours) {
    if (ones % 3 != 0 && threes + fours <= ones / 3) {
        cerr << "Warning: Remainder ones after distribution could cause inefficiency!" << endl;
        abort();
    }
}

void check_remainder_twos(int twos, int threes, int fours) {
    if (twos % 3 != 0 && threes + fours < 2 * twos / 3) {
        cerr << "Warning: Remainder twos after distribution could cause inefficiency!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    map<int, int> cnt;
    int a;
    for (int i = 0; i < n; i++) {
        cin >> a;
        ++cnt[a];
    }
    int ones = cnt[1], twos = cnt[2], threes = cnt[3], fours = cnt[4];
    int ans = 0;

    // Insert invariant checks after reading inputs
    check_high_ones_twos(ones, twos, threes, fours);

    if (ones >= twos) {
        ans += twos;
        threes += twos;
        ones -= twos;
        twos = 0;
    } else {
        ans += ones;
        threes += ones;
        twos -= ones;
        ones = 0;
    }

    // Insert invariant checks after redistribution logic
    check_remainder_ones_twos(ones, twos, threes, fours);

    if (ones) {
        ans += ones / 3 * 2;
        threes += ones / 3;
        ones = ones % 3;
        if (ones <= threes) {
            ans += ones;
            ones = 0;
        } else if (ones == 2 && fours >= 1) {
            ans += 2;
        } else if (ones == 1 && fours >= 2) {
            ans += 2;
        } else {
            ans = -1;
        }
    } else if (twos) {
        ans += twos / 3 * 2;
        threes += twos / 3 * 2;
        twos %= 3;
        
        // Insert invariant check for twos after potential remainder
        check_remainder_twos(twos, threes, fours);
        
        if (twos == 1) {
            if (fours) {
                ans += 1;
                twos = 0;
            } else if (threes >= 2) {
                ans += 2;
                twos = 0;
            } else {
                ans = -1;
            }
        } else if (twos == 2) {
            ans += 2;
            twos = 0;
        }
    }
    printf("%d\n", ans);
}
```

### Explanation

- **Placement of Checks:** The checks are placed logically after input reading where the conditions of `ones`, `twos`, `threes`, and `fours` are determined, and after key decision blocks to catch inefficiencies.
- **Coverage:** Each invariant is designed to trigger a warning and terminate execution if a potential performance bottleneck is detected.
- **Effectiveness:** These checks help identify when the program enters complex paths due to remaining `ones` and `twos`, helping prevent needless computation and guiding optimizations.

