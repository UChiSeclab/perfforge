system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main(void) {
  int n;
  cin >> n;
  vector<int> v(n);
  map<int, int> c, cc;
  map<int, set<int> > q;
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    cin >> v[i];
    ++c[v[i]];
    q[v[i]].insert(i);
  }
  int t;
  t = min(c[1], c[2]);
  c[1] -= t, c[2] -= t;
  c[3] += t;
  ans += t;
  if (c[2] == 0 && c[1] == 0) {
    cout << ans;
    return 0;
  }
  if (c[2] == 0) {
    t = c[1] / 3;
    c[3] += t;
    c[1] %= 3;
    ans += 2 * t;
    if (c[1] != 0) {
      t = min(c[1] / 2, c[4]);
      c[3] += t;
      c[4] -= t;
      c[1] -= t * 2;
      ans += t * 2;
      t = min(c[1], c[3]);
      c[1] -= t;
      c[3] += t;
      ans += t;
    }
    if (c[1] != 0) {
      t = min(c[4] / 2, c[1]);
      c[1] -= t;
      c[4] -= 2 * t;
      c[3] += t;
      ans += t * 2;
    }
  } else {
    t = c[2] / 3;
    c[3] += 2 * t;
    c[2] %= 3;
    ans += 2 * t;
    if (c[2] != 0) {
      t = c[2] / 2;
      c[4] += t;
      c[2] -= t * 2;
      ans += t * 2;
      t = min(c[2], c[4]);
      ans += t;
      c[4] -= t, c[2] -= t;
      c[3] += t;
      t = min(c[2], c[3] / 2);
      ans += 2 * t;
      c[4] += 2 * t;
      c[3] -= 2 * t;
      c[2] -= t;
    }
  }
  if (c[1] != 0 || c[2] != 0) {
    ans = -1;
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200
4 1 1 4 3 1 1 3 1 1 1 4 3 3 3 2 3 3 1 3 3 4 4 2 2 2 3 1 2 2 2 3 1 1 3 2 2 4 1 3 4 3 2 4 2 2 4 2 2 3 4 2 3 2 2 1 2 4 4 2 4 4 2 3 2 4 1 4 2 1 3 4 1 3 1 1 2 1 4 1 3 3 3 4 1 4 4 1 4 4 2 3 1 3 3 2 2 1 4 2 4 4 3 3 3 1 3 4 3 1 1 1 1 4 2 1 2 3 2 2 2 3 2 1 2 1 1 1 2 4 1 3 3 3 2 3 3 2 3 4 4 3 3 4 3 2 1 4 1 4 2 1 3 2 4 4 1 4 1 1 1 3 2 3 4 2 2 4 1 4 4 4 4 3 1 3 1 4 3 2 1 2 1 1 2 4 1 3 3 4 4 2 2 4 4 3 2 1 2 4


(G.2) Fast Input

3
4 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, int> c, cc; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, set<int> > q; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 10 slow_hit_count: 201, fast_hit_count: 4 */
    cin >> v[i]; /* line 11 slow_hit_count: 200, fast_hit_count: 3 */
    ++c[v[i]]; /* line 12 slow_hit_count: 200, fast_hit_count: 3 */
    q[v[i]].insert(i); /* line 13 slow_hit_count: 200, fast_hit_count: 3 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  t = min(c[1], c[2]); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  c[1] -= t, c[2] -= t; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  c[3] += t; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  ans += t; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  if (c[2] == 0 && c[1] == 0) { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (c[2] == 0) { /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
    t = c[1] / 3; /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
    c[3] += t; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
    c[1] %= 3; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    ans += 2 * t; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    if (c[1] != 0) { /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
      t = min(c[1] / 2, c[4]); /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
      c[3] += t; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
      c[4] -= t; /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
      c[1] -= t * 2; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
      ans += t * 2; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
      t = min(c[1], c[3]); /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
      c[1] -= t; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
      c[3] += t; /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
      ans += t; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (c[1] != 0) { /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
      t = min(c[4] / 2, c[1]); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      c[1] -= t; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      c[4] -= 2 * t; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      c[3] += t; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      ans += t * 2; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    t = c[2] / 3; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    c[3] += 2 * t; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    c[2] %= 3; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    ans += 2 * t; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    if (c[2] != 0) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      t = c[2] / 2; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      c[4] += t; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      c[2] -= t * 2; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      ans += t * 2; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      t = min(c[2], c[4]); /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      ans += t; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      c[4] -= t, c[2] -= t; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      c[3] += t; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      t = min(c[2], c[3] / 2); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      ans += 2 * t; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      c[4] += 2 * t; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      c[3] -= 2 * t; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      c[2] -= t; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  if (c[1] != 0 || c[2] != 0) { /* line 68 slow_hit_count: 0, fast_hit_count: 1 */
    ans = -1; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 71 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After analyzing the given code, here are some observations regarding the expensive or inefficient code segments:

1. **Line 10 (For Loop Initialization):** 
   - Slow Input Hit Count: 201
   - Fast Input Hit Count: 4

2. **Line 11 to Line 13 (Input Reading and Data Structure Updates):** 
   - Slow Input Hit Count for Line 11: 200
   - Fast Input Hit Count for Line 11: 3
   - Slow Input Hit Count for Line 12: 200
   - Fast Input Hit Count for Line 12: 3
   - Slow Input Hit Count for Line 13: 200
   - Fast Input Hit Count for Line 13: 3

3. **Conditional Branches and Computation (Lines 20-71):**
   - The flow of the program is heavily dependent on the values in the input compartments, particularly the counts of `c[1]` and `c[2]`.
   - Specifically, the condition `if (c[2] == 0 && c[1] == 0)` at line 20 is critical, as it leads to an early return for cases that are already balanced.
   - The next critical condition is `if (c[2] == 0)` at line 24, which handles compartments with no `2` students.

### Phase 2: Derive Performance-Characterizing Invariants

Here are natural language performance invariants that describe conditions under which the program likely enters a slow path:

1. **Invariant: High Frequency of Students in Singleton Compartments**
   - Natural Language Description: "If there are a large number of compartments containing exactly one student, the program tends to run slower due to the increased complexity in redistributing students."
   - Reasoning: The presence of many singleton compartments (`c[1]`) leads to increased operations for redistributing and merging to achieve valid compartments, as evident by multiple conditions and loops handling these cases.

2. **Invariant: Uneven Distribution of Students Across Compartments**
   - Natural Language Description: "When the input configuration has a high number of compartments with either one or two students (i.e., heavily skewed distribution), the solution process becomes complex and time-consuming."
   - Reasoning: The program needs to handle numerous scenarios for merging one or two student compartments to achieve the desired fun configuration, which is especially costly when the inputs are not already close to balanced.

3. **Invariant: Handling of High Initial Counts of Two-Student Compartments**
   - Natural Language Description: "If there is an excess of compartments with exactly two students, additional computational steps are required to re-balance these to three or four-student setups, leading to increased execution time."
   - Reasoning: The logic dealing with compartments having two students requires multiple adjustments and involves extensive checking and redistribution logic.

These performance-characterizing invariants are based on patterns and thresholds observed in the slow input scenario, where the distribution of student counts across compartments led to more complex processing compared to the fast input. These insights aim to capture potential future slow scenarios within the input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language invariants, I will now implement them as runtime checks in C++. Here is the checker code implementing the performance-characterizing invariants:

```cpp
#include <iostream>
#include <map>

using namespace std;

// Check for a high number of singleton compartments
void check_singleton_compartments(const map<int, int>& c) {
    if (c.at(1) > 100) { // Arbitrary threshold for "high frequency"
        cerr << "Warning: Performance bottleneck condition triggered - High frequency of singleton compartments!" << endl;
        abort();
    }
}

// Check for uneven distribution leading to complex redistributions
void check_uneven_distribution(const map<int, int>& c, int n) {
    if ((c.at(1) + c.at(2)) > n / 2) { // If more than half of the compartments are problematic
        cerr << "Warning: Performance bottleneck condition triggered - Uneven distribution of students!" << endl;
        abort();
    }
}

// Check for a high initial count of two-student compartments
void check_two_student_compartments(const map<int, int>& c) {
    if (c.at(2) > 80) { // Arbitrary threshold for excess two-student compartments
        cerr << "Warning: Performance bottleneck condition triggered - Excess two-student compartments!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, I will integrate these checker functions into the original C++ program to ensure that they run without adding overhead in tight loops, placing them after input processing and before heavy computations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for a high number of singleton compartments
void check_singleton_compartments(const map<int, int>& c) {
    if (c.at(1) > 100) { // Arbitrary threshold for "high frequency"
        cerr << "Warning: Performance bottleneck condition triggered - High frequency of singleton compartments!" << endl;
        abort();
    }
}

// Check for uneven distribution leading to complex redistributions
void check_uneven_distribution(const map<int, int>& c, int n) {
    if ((c.at(1) + c.at(2)) > n / 2) { // If more than half of the compartments are problematic
        cerr << "Warning: Performance bottleneck condition triggered - Uneven distribution of students!" << endl;
        abort();
    }
}

// Check for a high initial count of two-student compartments
void check_two_student_compartments(const map<int, int>& c) {
    if (c.at(2) > 80) { // Arbitrary threshold for excess two-student compartments
        cerr << "Warning: Performance bottleneck condition triggered - Excess two-student compartments!" << endl;
        abort();
    }
}

int main(void) {
    int n;
    cin >> n;
    vector<int> v(n);
    map<int, int> c, cc;
    map<int, set<int> > q;
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        cin >> v[i];
        ++c[v[i]];
        q[v[i]].insert(i);
    }

    // Insert checks after data is collected
    check_singleton_compartments(c);
    check_uneven_distribution(c, n);
    check_two_student_compartments(c);

    int t;
    t = min(c[1], c[2]);
    c[1] -= t, c[2] -= t;
    c[3] += t;
    ans += t;
    if (c[2] == 0 && c[1] == 0) {
        cout << ans;
        return 0;
    }
    if (c[2] == 0) {
        t = c[1] / 3;
        c[3] += t;
        c[1] %= 3;
        ans += 2 * t;
        if (c[1] != 0) {
            t = min(c[1] / 2, c[4]);
            c[3] += t;
            c[4] -= t;
            c[1] -= t * 2;
            ans += t * 2;
            t = min(c[1], c[3]);
            c[1] -= t;
            c[3] += t;
            ans += t;
        }
        if (c[1] != 0) {
            t = min(c[4] / 2, c[1]);
            c[1] -= t;
            c[4] -= 2 * t;
            c[3] += t;
            ans += t * 2;
        }
    } else {
        t = c[2] / 3;
        c[3] += 2 * t;
        c[2] %= 3;
        ans += 2 * t;
        if (c[2] != 0) {
            t = c[2] / 2;
            c[4] += t;
            c[2] -= t * 2;
            ans += t * 2;
            t = min(c[2], c[4]);
            ans += t;
            c[4] -= t, c[2] -= t;
            c[3] += t;
            t = min(c[2], c[3] / 2);
            ans += 2 * t;
            c[4] += 2 * t;
            c[3] -= 2 * t;
            c[2] -= t;
        }
    }
    if (c[1] != 0 || c[2] != 0) {
        ans = -1;
    }
    cout << ans;
}
```

### Explanation

- The checker functions `check_singleton_compartments`, `check_uneven_distribution`, and `check_two_student_compartments` are added to detect bottleneck conditions and abort the program if they are triggered.
- These checks are placed after reading the input data and before any major computation begins, ensuring that they do not add significant overhead to the program's execution. 

These modifications help identify potential slowdowns based on the identified performance characteristics, aiding in optimization and testing efforts.

