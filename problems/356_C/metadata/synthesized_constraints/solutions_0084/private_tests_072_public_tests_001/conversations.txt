system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
const int maxn = 4000000 + 10;
int ans, sum;
int a[4];
int b[4];
void solve() {
  ans = 0;
  if (sum == 0) {
    cout << 0 << endl;
    return;
  }
  if (sum == 1 || sum == 2 || sum == 5) {
    cout << -1 << endl;
    return;
  }
  int x;
  int res = 0x3f3f3f3f;
  int last = 0;
  bool ok = 1;
  while (ok) {
    for (int i = last;; i++) {
      if (3 * i > sum) {
        ok = 0;
        break;
      }
      if ((sum - 3 * i) % 4 == 0) {
        x = i;
        last = x + 1;
        break;
      }
    }
    if (!ok) break;
    for (int i = 1; i <= 4; i++) a[i] = b[i];
    ans = 0;
    int y = (sum - 3 * x) / 4;
    int xx = min(a[3], x);
    x -= xx;
    a[3] -= xx;
    int yy = min(a[4], y);
    y -= yy;
    a[4] -= yy;
    if (x) {
      if (y) {
        int tmp = min(a[2], a[1] / 2);
        tmp = min(tmp, y);
        y -= tmp;
        ans += 2 * tmp;
        a[2] -= tmp;
        a[1] -= 2 * tmp;
        tmp = min(x, a[2]);
        tmp = min(tmp, a[1]);
        x -= tmp;
        ans += tmp;
        a[1] -= tmp;
        a[2] -= tmp;
        tmp = min(y, a[2] / 2);
        ans += tmp * 2;
        a[2] -= tmp * 2;
        y -= tmp;
        tmp = a[2] / 3;
        ans += tmp * 2;
        x -= tmp * 2;
        ans += y * 3;
        ans += x * 2;
      } else {
        ans += a[4];
        int free = a[4];
        x -= a[4];
        a[4] = 0;
        int tmp = min(a[2], free);
        a[2] -= tmp;
        free -= tmp;
        x -= tmp;
        tmp = min(a[2], a[1]);
        ans += tmp;
        a[2] -= tmp;
        a[1] -= tmp;
        x -= tmp;
        if (a[2]) {
          x -= a[2] / 3 * 2;
          ans += a[2] / 3 * 2;
          a[2] = 0;
        }
        ans += 2 * x - free;
      }
    } else if (y) {
      if (a[3] < a[1]) {
        a[1] -= a[3];
        y -= a[3];
        ans += a[3];
        a[3] = 0;
        int tmp = a[1] / 2;
        int can = min(tmp, a[2]);
        a[2] -= can;
        a[1] -= can * 2;
        ans += can * 2;
        y -= can;
        if (a[2]) {
          ans += a[2];
        } else if (a[1]) {
          ans += a[1] / 4 * 3;
        }
      } else {
        a[3] -= a[1];
        ans += a[1];
        a[1] = 0;
        if (a[2] >= a[3] / 2) {
          ans += a[3];
          a[2] -= a[3] / 2;
          a[3] = 0;
          ans += a[2];
        } else {
          ans += a[2] * 2;
          a[3] -= a[2] * 2;
          a[2] = 0;
          ans += a[3];
        }
      }
    }
    res = min(res, ans);
  }
  cout << res << endl;
}
int main() {
  ans = 0;
  cin >> n;
  sum = 0;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    b[x]++;
    sum += x;
  }
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200
4 1 1 4 3 1 1 3 1 1 1 4 3 3 3 2 3 3 1 3 3 4 4 2 2 2 3 1 2 2 2 3 1 1 3 2 2 4 1 3 4 3 2 4 2 2 4 2 2 3 4 2 3 2 2 1 2 4 4 2 4 4 2 3 2 4 1 4 2 1 3 4 1 3 1 1 2 1 4 1 3 3 3 4 1 4 4 1 4 4 2 3 1 3 3 2 2 1 4 2 4 4 3 3 3 1 3 4 3 1 1 1 1 4 2 1 2 3 2 2 2 3 2 1 2 1 1 1 2 4 1 3 3 3 2 3 3 2 3 4 4 3 3 4 3 2 1 4 1 4 2 1 3 2 4 4 1 4 1 1 1 3 2 3 4 2 2 4 1 4 4 4 4 3 1 3 1 4 3 2 1 2 1 1 2 4 1 3 3 4 4 2 2 4 4 3 2 1 2 4


(G.2) Fast Input

3
4 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 4000000 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int ans, sum; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int a[4]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int b[4]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ans = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  if (sum == 0) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum == 1 || sum == 2 || sum == 5) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << endl; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int x; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0x3f3f3f3f; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int last = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  bool ok = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  while (ok) { /* line 22 slow_hit_count: 43, fast_hit_count: 2 */
    for (int i = last;; i++) { /* line 23 slow_hit_count: 168, fast_hit_count: 4 */
      if (3 * i > sum) { /* line 24 slow_hit_count: 168, fast_hit_count: 4 */
        ok = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      if ((sum - 3 * i) % 4 == 0) { /* line 28 slow_hit_count: 167, fast_hit_count: 3 */
        x = i; /* line 29 slow_hit_count: 42, fast_hit_count: 1 */
        last = x + 1; /* line 30 slow_hit_count: 42, fast_hit_count: 1 */
        break; /* line 31 slow_hit_count: 42, fast_hit_count: 1 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ok) break; /* line 34 slow_hit_count: 43, fast_hit_count: 2 */
    for (int i = 1; i <= 4; i++) a[i] = b[i]; /* line 35 slow_hit_count: 210, fast_hit_count: 5 */
    ans = 0; /* line 36 slow_hit_count: 42, fast_hit_count: 1 */
    int y = (sum - 3 * x) / 4; /* line 37 slow_hit_count: 42, fast_hit_count: 1 */
    int xx = min(a[3], x); /* line 38 slow_hit_count: 42, fast_hit_count: 1 */
    x -= xx; /* line 39 slow_hit_count: 42, fast_hit_count: 1 */
    a[3] -= xx; /* line 40 slow_hit_count: 42, fast_hit_count: 1 */
    int yy = min(a[4], y); /* line 41 slow_hit_count: 42, fast_hit_count: 1 */
    y -= yy; /* line 42 slow_hit_count: 42, fast_hit_count: 1 */
    a[4] -= yy; /* line 43 slow_hit_count: 42, fast_hit_count: 1 */
    if (x) { /* line 44 slow_hit_count: 42, fast_hit_count: 1 */
      if (y) { /* line 45 slow_hit_count: 29, fast_hit_count: 1 */
        int tmp = min(a[2], a[1] / 2); /* line 46 slow_hit_count: 12, fast_hit_count: 0 */
        tmp = min(tmp, y); /* line 47 slow_hit_count: 12, fast_hit_count: 0 */
        y -= tmp; /* line 48 slow_hit_count: 12, fast_hit_count: 0 */
        ans += 2 * tmp; /* line 49 slow_hit_count: 12, fast_hit_count: 0 */
        a[2] -= tmp; /* line 50 slow_hit_count: 12, fast_hit_count: 0 */
        a[1] -= 2 * tmp; /* line 51 slow_hit_count: 12, fast_hit_count: 0 */
        tmp = min(x, a[2]); /* line 52 slow_hit_count: 12, fast_hit_count: 0 */
        tmp = min(tmp, a[1]); /* line 53 slow_hit_count: 12, fast_hit_count: 0 */
        x -= tmp; /* line 54 slow_hit_count: 12, fast_hit_count: 0 */
        ans += tmp; /* line 55 slow_hit_count: 12, fast_hit_count: 0 */
        a[1] -= tmp; /* line 56 slow_hit_count: 12, fast_hit_count: 0 */
        a[2] -= tmp; /* line 57 slow_hit_count: 12, fast_hit_count: 0 */
        tmp = min(y, a[2] / 2); /* line 58 slow_hit_count: 12, fast_hit_count: 0 */
        ans += tmp * 2; /* line 59 slow_hit_count: 12, fast_hit_count: 0 */
        a[2] -= tmp * 2; /* line 60 slow_hit_count: 12, fast_hit_count: 0 */
        y -= tmp; /* line 61 slow_hit_count: 12, fast_hit_count: 0 */
        tmp = a[2] / 3; /* line 62 slow_hit_count: 12, fast_hit_count: 0 */
        ans += tmp * 2; /* line 63 slow_hit_count: 12, fast_hit_count: 0 */
        x -= tmp * 2; /* line 64 slow_hit_count: 12, fast_hit_count: 0 */
        ans += y * 3; /* line 65 slow_hit_count: 12, fast_hit_count: 0 */
        ans += x * 2; /* line 66 slow_hit_count: 12, fast_hit_count: 0 */
      } else { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        ans += a[4]; /* line 68 slow_hit_count: 17, fast_hit_count: 1 */
        int free = a[4]; /* line 69 slow_hit_count: 17, fast_hit_count: 1 */
        x -= a[4]; /* line 70 slow_hit_count: 17, fast_hit_count: 1 */
        a[4] = 0; /* line 71 slow_hit_count: 17, fast_hit_count: 1 */
        int tmp = min(a[2], free); /* line 72 slow_hit_count: 17, fast_hit_count: 1 */
        a[2] -= tmp; /* line 73 slow_hit_count: 17, fast_hit_count: 1 */
        free -= tmp; /* line 74 slow_hit_count: 17, fast_hit_count: 1 */
        x -= tmp; /* line 75 slow_hit_count: 17, fast_hit_count: 1 */
        tmp = min(a[2], a[1]); /* line 76 slow_hit_count: 17, fast_hit_count: 1 */
        ans += tmp; /* line 77 slow_hit_count: 17, fast_hit_count: 1 */
        a[2] -= tmp; /* line 78 slow_hit_count: 17, fast_hit_count: 1 */
        a[1] -= tmp; /* line 79 slow_hit_count: 17, fast_hit_count: 1 */
        x -= tmp; /* line 80 slow_hit_count: 17, fast_hit_count: 1 */
        if (a[2]) { /* line 81 slow_hit_count: 17, fast_hit_count: 1 */
          x -= a[2] / 3 * 2; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
          ans += a[2] / 3 * 2; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
          a[2] = 0; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
        ans += 2 * x - free; /* line 86 slow_hit_count: 17, fast_hit_count: 1 */
      } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (y) { /* line 88 slow_hit_count: 13, fast_hit_count: 0 */
      if (a[3] < a[1]) { /* line 89 slow_hit_count: 13, fast_hit_count: 0 */
        a[1] -= a[3]; /* line 90 slow_hit_count: 12, fast_hit_count: 0 */
        y -= a[3]; /* line 91 slow_hit_count: 12, fast_hit_count: 0 */
        ans += a[3]; /* line 92 slow_hit_count: 12, fast_hit_count: 0 */
        a[3] = 0; /* line 93 slow_hit_count: 12, fast_hit_count: 0 */
        int tmp = a[1] / 2; /* line 94 slow_hit_count: 12, fast_hit_count: 0 */
        int can = min(tmp, a[2]); /* line 95 slow_hit_count: 12, fast_hit_count: 0 */
        a[2] -= can; /* line 96 slow_hit_count: 12, fast_hit_count: 0 */
        a[1] -= can * 2; /* line 97 slow_hit_count: 12, fast_hit_count: 0 */
        ans += can * 2; /* line 98 slow_hit_count: 12, fast_hit_count: 0 */
        y -= can; /* line 99 slow_hit_count: 12, fast_hit_count: 0 */
        if (a[2]) { /* line 100 slow_hit_count: 12, fast_hit_count: 0 */
          ans += a[2]; /* line 101 slow_hit_count: 12, fast_hit_count: 0 */
        } else if (a[1]) { /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
          ans += a[1] / 4 * 3; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
        a[3] -= a[1]; /* line 106 slow_hit_count: 1, fast_hit_count: 0 */
        ans += a[1]; /* line 107 slow_hit_count: 1, fast_hit_count: 0 */
        a[1] = 0; /* line 108 slow_hit_count: 1, fast_hit_count: 0 */
        if (a[2] >= a[3] / 2) { /* line 109 slow_hit_count: 1, fast_hit_count: 0 */
          ans += a[3]; /* line 110 slow_hit_count: 1, fast_hit_count: 0 */
          a[2] -= a[3] / 2; /* line 111 slow_hit_count: 1, fast_hit_count: 0 */
          a[3] = 0; /* line 112 slow_hit_count: 1, fast_hit_count: 0 */
          ans += a[2]; /* line 113 slow_hit_count: 1, fast_hit_count: 0 */
        } else { /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
          ans += a[2] * 2; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
          a[3] -= a[2] * 2; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
          a[2] = 0; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
          ans += a[3]; /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
    res = min(res, ans); /* line 122 slow_hit_count: 42, fast_hit_count: 1 */
  } /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 124 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 126 slow_hit_count: 1, fast_hit_count: 1 */
  ans = 0; /* line 127 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 128 slow_hit_count: 1, fast_hit_count: 1 */
  sum = 0; /* line 129 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 130 slow_hit_count: 201, fast_hit_count: 4 */
    int x; /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 132 slow_hit_count: 200, fast_hit_count: 3 */
    b[x]++; /* line 133 slow_hit_count: 200, fast_hit_count: 3 */
    sum += x; /* line 134 slow_hit_count: 200, fast_hit_count: 3 */
  } /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
  solve(); /* line 136 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 137 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 138 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottleneck in the provided C code, let's conduct a detailed analysis and derive performance-characterizing invariants based on the aggregated hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `while (ok)` loop starting at line 22 is hit significantly more often in the slow input (43 times) compared to the fast input (2 times).
   - The nested `for (int i = last;; i++)` loop starting at line 23 is executed 168 times for the slow input compared to only 4 times for the fast input.

2. **Pinpoint Lines with More Hits:**
   - The condition `if ((sum - 3 * i) % 4 == 0)` at line 28 breaks the loop when a valid solution is found, and it is hit 167 times for the slow input, indicating the loop iterates many more times before finding such a solution.
   - Lines 35 (`for (int i = 1; i <= 4; i++) a[i] = b[i];`) and 44 (`if (x) {`) are hit 210 and 42 times respectively for the slow input, indicating repeated execution of these sections.

3. **Data Structure and Loop Interactions:**
   - The repeated iteration of the loop indicates that finding a valid distribution of students that requires the minimum number of swaps is computationally expensive, particularly when many compartments have one or two students.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Loop Iteration Count**
   - **Natural Language Description:** "If the sum of students in compartments leads to numerous iterations before finding a valid configuration of groups with three or four students, the computation may become expensive."
   - **Explanation:** The repeated execution of lines within the `while` and `for` loops suggests that configurations with certain sums of students might cause increased iterations, especially when the sum requires many trials to balance across compartments.

2. **Invariant 2: Compartment Configuration**
   - **Natural Language Description:** "When many compartments contain one or two students, the reconfiguration process might need excessive iterations, contributing to slower execution."
   - **Explanation:** The necessity to reassign such compartments to reach groups of three or four students may increase the computational burden, as evident from lines being executed multiple times in the slow input.

3. **Invariant 3: Distribution Complexity**
   - **Natural Language Description:** "If the initial distribution has a significant imbalance that requires many swaps to achieve the desired configuration, the program may enter a slow execution path."
   - **Explanation:** The high number of iterations and variable updates indicate computation complexity increases with imbalance, particularly when few compartments are already at the ideal configuration of three or four students.

### Conclusion

The primary performance bottleneck arises from the repeated attempts to find a valid configuration of students across compartments, especially when initial configurations include many compartments with non-ideal student counts. The program's performance is sensitive to configurations requiring extensive iterations to find an optimal or valid arrangement, which is triggered by specific sums and distributions of students within compartments.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.

The students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.

However, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. 

After all the swaps each compartment should either have no student left, or have a company of three or four students. 

Input

The first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train.

Output

If no sequence of swapping seats with other people leads to the desired result, print number "-1" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.

Examples

Input

5
1 2 2 4 3


Output

2


Input

3
4 1 1


Output

2


Input

4
0 3 0 4


Output

0

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 to implement the performance-checking invariants in C++ code, based on the natural language descriptions from Phase 2.

### Phase 3: Implementing Performance-Characterizing Invariants

#### Invariant 1: High Loop Iteration Count
**Natural Language Description:** "If the sum of students in compartments leads to numerous iterations before finding a valid configuration of groups with three or four students, the computation may become expensive."

**C++ Code:**
```cpp
void check_high_iteration_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Compartment Configuration
**Natural Language Description:** "When many compartments contain one or two students, the reconfiguration process might need excessive iterations, contributing to slower execution."

**C++ Code:**
```cpp
void check_compartment_configuration_invariant(int oneOrTwoCount, int n) {
    if (oneOrTwoCount > n / 2) {  // Assuming more than half leads to complexity
        cerr << "Warning: Performance bottleneck condition triggered - many compartments with 1 or 2 students!" << endl;
        abort();
    }
}
```

#### Invariant 3: Distribution Complexity
**Natural Language Description:** "If the initial distribution has a significant imbalance that requires many swaps to achieve the desired configuration, the program may enter a slow execution path."

**C++ Code:**
```cpp
void check_distribution_complexity_invariant(int imbalanceScore, int threshold) {
    if (imbalanceScore > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - significant imbalance in distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, let's integrate these checks into the existing C++ code provided for the problem statement.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
const int maxn = 4000000 + 10;
int ans, sum;
int a[5];  // Adjusted index to match 1-based access, hence size 5
int b[5];

// Phase 3 Checkers
void check_high_iteration_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations!" << endl;
        abort();
    }
}

void check_compartment_configuration_invariant(int oneOrTwoCount, int n) {
    if (oneOrTwoCount > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - many compartments with 1 or 2 students!" << endl;
        abort();
    }
}

void check_distribution_complexity_invariant(int imbalanceScore, int threshold) {
    if (imbalanceScore > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - significant imbalance in distribution!" << endl;
        abort();
    }
}

void solve() {
    ans = 0;
    
    if (sum == 0) {
        cout << 0 << endl;
        return;
    }
    
    if (sum == 1 || sum == 2 || sum == 5) {
        cout << -1 << endl;
        return;
    }
    
    int x;
    int res = 0x3f3f3f3f;
    int last = 0;
    bool ok = 1;
    int iterationCount = 0;
    
    while (ok) {
        for (int i = last;; i++) {
            iterationCount++;
            if (3 * i > sum) {
                ok = 0;
                break;
            }
            if ((sum - 3 * i) % 4 == 0) {
                x = i;
                last = x + 1;
                break;
            }
        }
        
        check_high_iteration_invariant(iterationCount, 1000);  // Example threshold
        
        if (!ok) break;
        
        for (int i = 1; i <= 4; i++) a[i] = b[i];
        
        ans = 0;
        int y = (sum - 3 * x) / 4;
        int xx = min(a[3], x);
        x -= xx;
        a[3] -= xx;
        int yy = min(a[4], y);
        y -= yy;
        a[4] -= yy;
        
        if (x) {
            if (y) {
                int tmp = min(a[2], a[1] / 2);
                tmp = min(tmp, y);
                y -= tmp;
                ans += 2 * tmp;
                a[2] -= tmp;
                a[1] -= 2 * tmp;
                tmp = min(x, a[2]);
                tmp = min(tmp, a[1]);
                x -= tmp;
                ans += tmp;
                a[1] -= tmp;
                a[2] -= tmp;
                tmp = min(y, a[2] / 2);
                ans += tmp * 2;
                a[2] -= tmp * 2;
                y -= tmp;
                tmp = a[2] / 3;
                ans += tmp * 2;
                x -= tmp * 2;
                ans += y * 3;
                ans += x * 2;
            } else {
                ans += a[4];
                int free = a[4];
                x -= a[4];
                a[4] = 0;
                int tmp = min(a[2], free);
                a[2] -= tmp;
                free -= tmp;
                x -= tmp;
                tmp = min(a[2], a[1]);
                ans += tmp;
                a[2] -= tmp;
                a[1] -= tmp;
                x -= tmp;
                if (a[2]) {
                    x -= a[2] / 3 * 2;
                    ans += a[2] / 3 * 2;
                    a[2] = 0;
                }
                ans += 2 * x - free;
            }
        } else if (y) {
            if (a[3] < a[1]) {
                a[1] -= a[3];
                y -= a[3];
                ans += a[3];
                a[3] = 0;
                int tmp = a[1] / 2;
                int can = min(tmp, a[2]);
                a[2] -= can;
                a[1] -= can * 2;
                ans += can * 2;
                y -= can;
                if (a[2]) {
                    ans += a[2];
                } else if (a[1]) {
                    ans += a[1] / 4 * 3;
                }
            } else {
                a[3] -= a[1];
                ans += a[1];
                a[1] = 0;
                if (a[2] >= a[3] / 2) {
                    ans += a[3];
                    a[2] -= a[3] / 2;
                    a[3] = 0;
                    ans += a[2];
                } else {
                    ans += a[2] * 2;
                    a[3] -= a[2] * 2;
                    a[2] = 0;
                    ans += a[3];
                }
            }
        }
        
        res = min(res, ans);
    }
    cout << res << endl;
}

int main() {
    ans = 0;
    cin >> n;
    sum = 0;
    int oneOrTwoCount = 0;
    
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        b[x]++;
        sum += x;
        
        if (x == 1 || x == 2) {
            oneOrTwoCount++;
        }
    }
    
    check_compartment_configuration_invariant(oneOrTwoCount, n);
    
    int imbalanceScore = abs(b[1] - b[3]) + abs(b[2] - b[4]);
    check_distribution_complexity_invariant(imbalanceScore, 50);  // Example threshold
    
    solve();
    return 0;
}
```

### Explanation of Check Integration

- The `check_high_iteration_invariant` is placed within the main iteration loop to ensure it catches excessive iterations early.
- The `check_compartment_configuration_invariant` is applied after reading the input to determine if there are too many compartments with one or two students.
- The `check_distribution_complexity_invariant` calculates an imbalance score to estimate configuration complexity and checks it after input processing.

These checks help identify and halt execution when entering a potentially slow path due to unfavourable input configurations, aligning with the previously derived performance-characterizing invariants.

