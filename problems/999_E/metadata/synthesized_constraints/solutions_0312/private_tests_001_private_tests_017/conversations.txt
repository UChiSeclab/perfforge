system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MAXN = 5010;
vector<long long> L[MAXN];
bool ok[MAXN];
bool mk[MAXN];
long long arr[MAXN];
long long contg;
void precal(long long nodo) {
  mk[nodo] = true;
  contg++;
  for (auto v : L[nodo]) {
    if (!mk[v]) {
      precal(v);
    }
  }
}
void DFS(long long nodo) {
  ok[nodo] = true;
  mk[nodo] = true;
  for (auto v : L[nodo]) {
    if (!mk[v]) {
      DFS(v);
    }
  }
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  long long N, M, S;
  cin >> N >> M >> S;
  for (long long i = 0; i < M; i++) {
    long long a, b;
    cin >> a >> b;
    L[a].push_back(b);
  }
  vector<pair<long long, long long>> vect;
  for (long long i = 1; i <= N; i++) {
    for (long long j = 0; j < MAXN; j++) mk[j] = false;
    contg = 0;
    precal(i);
    arr[i] = contg;
    vect.push_back({arr[i], i});
  }
  sort(vect.rbegin(), vect.rend());
  for (long long j = 0; j < MAXN; j++) mk[j] = false;
  DFS(S);
  long long res = 0;
  for (auto x : vect) {
    if (ok[x.second] == true) continue;
    bool flag = true;
    for (long long i = 1; i <= N; i++) {
      flag = flag & ok[i];
    }
    if (flag) break;
    res++;
    for (long long i = 0; i < MAXN; i++) {
      mk[i] = false;
    }
    DFS(x.second);
  }
  cout << res << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
1 2


(G.2) Fast Input

2 1 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAXN = 5010; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> L[MAXN]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool ok[MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool mk[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long arr[MAXN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long contg; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void precal(long long nodo) { /* line 9 slow_hit_count: 2334, fast_hit_count: 3 */
  mk[nodo] = true; /* line 10 slow_hit_count: 2334, fast_hit_count: 3 */
  contg++; /* line 11 slow_hit_count: 2334, fast_hit_count: 3 */
  for (auto v : L[nodo]) { /* line 12 slow_hit_count: 2335, fast_hit_count: 4 */
    if (!mk[v]) { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
      precal(v); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 2334, fast_hit_count: 3 */
void DFS(long long nodo) { /* line 18 slow_hit_count: 2333, fast_hit_count: 2 */
  ok[nodo] = true; /* line 19 slow_hit_count: 2333, fast_hit_count: 2 */
  mk[nodo] = true; /* line 20 slow_hit_count: 2333, fast_hit_count: 2 */
  for (auto v : L[nodo]) { /* line 21 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!mk[v]) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
      DFS(v); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 2333, fast_hit_count: 2 */
int32_t main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  long long N, M, S; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> M >> S; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < M; i++) { /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
    long long a, b; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    L[a].push_back(b); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<long long, long long>> vect; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= N; i++) { /* line 38 slow_hit_count: 2334, fast_hit_count: 3 */
    for (long long j = 0; j < MAXN; j++) mk[j] = false; /* line 39 slow_hit_count: 11690663, fast_hit_count: 10022 */
    contg = 0; /* line 40 slow_hit_count: 2333, fast_hit_count: 2 */
    precal(i); /* line 41 slow_hit_count: 2333, fast_hit_count: 2 */
    arr[i] = contg; /* line 42 slow_hit_count: 2333, fast_hit_count: 2 */
    vect.push_back({arr[i], i}); /* line 43 slow_hit_count: 2333, fast_hit_count: 2 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  sort(vect.rbegin(), vect.rend()); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long j = 0; j < MAXN; j++) mk[j] = false; /* line 46 slow_hit_count: 5011, fast_hit_count: 5011 */
  DFS(S); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto x : vect) { /* line 49 slow_hit_count: 2334, fast_hit_count: 3 */
    if (ok[x.second] == true) continue; /* line 50 slow_hit_count: 2333, fast_hit_count: 2 */
    bool flag = true; /* line 51 slow_hit_count: 2331, fast_hit_count: 0 */
    for (long long i = 1; i <= N; i++) { /* line 52 slow_hit_count: 5440554, fast_hit_count: 0 */
      flag = flag & ok[i]; /* line 53 slow_hit_count: 5438223, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) break; /* line 55 slow_hit_count: 2331, fast_hit_count: 0 */
    res++; /* line 56 slow_hit_count: 2331, fast_hit_count: 0 */
    for (long long i = 0; i < MAXN; i++) { /* line 57 slow_hit_count: 11680641, fast_hit_count: 0 */
      mk[i] = false; /* line 58 slow_hit_count: 11678310, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    DFS(x.second); /* line 60 slow_hit_count: 2331, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << '\n'; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

1. **Hit Count Discrepancy:**
   - The `precal` function (lines 9-17) is invoked significantly more times in the slow input (2334 times) versus the fast input (3 times). This function explores nodes in the graph and seems to be called for each city.

2. **Depth-First Search (DFS) Execution:**
   - The `DFS` function (lines 18-26) also shows a vast difference: 2333 hits with the slow input compared to 2 with the fast input.

3. **Loop and Reset Operations:**
   - Line 39 involves resetting the `mk` array 2334 times for the slow input, indicating frequent clearing of arrays, and line 57 exhibits a similar pattern.
   - Lines 52-53 execute a nested loop across nodes, with 5440554 hits in slow input, but none in fast input.

4. **Inefficient Conditions:**
   - The condition `flag = flag & ok[i]` in a nested loop (lines 52-53) checks reachability for each node, which is computationally expensive with 2331 executions leading to frequent loop iterations.

**Inference:**

- The code involves repeated depth-first searches for each city to determine connectivity, creating significant overhead when the number of nodes increases.
  
- The nested loop to determine if all nodes are reachable (lines 52-53) is a potential bottleneck, indicating an O(n^2) complexity due to frequent graph traversals and checks.

### Phase 2: Derive Performance-Characterizing Invariants

**Natural Language Invariants:**

1. **Frequent DFS Traversals:**
   - "When the number of cities (`n`) is large and most cities are unreachable from the capital due to a sparsely connected graph, the repeated depth-first searches for each city may lead to increased computational overhead."

2. **Inefficient Reachability Checking:**
   - "If the graph is sparse and many cities are initially disconnected, checking reachability for every city repeatedly can result in quadratic time complexity, especially when `n` approaches its upper constraint."

3. **Array Reset Overhead:**
   - "When `n` is large, frequent resetting of large arrays (`mk` array of size MAXN) contributes significantly to the execution time, particularly in loops designed to traverse each city node."

4. **Graph Connectivity Related Slowdown:**
   - "In cases where the graph is initially sparse, and additional roads are needed to connect many components, the algorithm spends excessive time recalculating connectivity after each potential new road addition."

By understanding these patterns, one can focus optimization efforts on reducing redundant traversals and improving the efficiency of connectivity checks, particularly in sparsely connected graphs with many nodes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as Conditional Checks in C++

Here are the C++ runtime checks for the performance-characterizing invariants derived in Phase 2:

#### 1. Frequent DFS Traversals
- **Invariant**: "When the number of cities (`n`) is large and most cities are unreachable from the capital due to a sparsely connected graph, the repeated depth-first searches for each city may lead to increased computational overhead."

```cpp
void check_dfs_traversal(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent DFS traversals due to sparse connectivity!" << endl;
        abort();
    }
}
```

#### 2. Inefficient Reachability Checking

- **Invariant**: "If the graph is sparse and many cities are initially disconnected, checking reachability for every city repeatedly can result in quadratic time complexity, especially when `n` approaches its upper constraint."

```cpp
void check_reachability(bool condition) {
    if (condition) {
        cerr << "Warning: Inefficient reachability checks due to sparse graph!" << endl;
        abort();
    }
}
```

#### 3. Array Reset Overhead

- **Invariant**: "When `n` is large, frequent resetting of large arrays (`mk` array of size MAXN) contributes significantly to the execution time, particularly in loops designed to traverse each city node."

```cpp
void check_array_reset(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent array resets causing overhead!" << endl;
        abort();
    }
}
```

#### 4. Graph Connectivity Related Slowdown

- **Invariant**: "In cases where the graph is initially sparse, and additional roads are needed to connect many components, the algorithm spends excessive time recalculating connectivity after each potential new road addition."

```cpp
void check_graph_connectivity(bool condition) {
    if (condition) {
        cerr << "Warning: Excessive time spent on recalculating graph connectivity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Conditional Checks into the Original C++ Code

Here is the instrumented C++ code with the above checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MAXN = 5010;
vector<long long> L[MAXN];
bool ok[MAXN];
bool mk[MAXN];
long long arr[MAXN];
long long contg;

// Checker functions
void check_dfs_traversal(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent DFS traversals due to sparse connectivity!" << endl;
        abort();
    }
}

void check_reachability(bool condition) {
    if (condition) {
        cerr << "Warning: Inefficient reachability checks due to sparse graph!" << endl;
        abort();
    }
}

void check_array_reset(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent array resets causing overhead!" << endl;
        abort();
    }
}

void check_graph_connectivity(bool condition) {
    if (condition) {
        cerr << "Warning: Excessive time spent on recalculating graph connectivity!" << endl;
        abort();
    }
}

void precal(long long nodo) {
    mk[nodo] = true;
    contg++;
    for (auto v : L[nodo]) {
        if (!mk[v]) {
            precal(v);
        }
    }
}

void DFS(long long nodo) {
    ok[nodo] = true;
    mk[nodo] = true;
    for (auto v : L[nodo]) {
        if (!mk[v]) {
            DFS(v);
        }
    }
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long long N, M, S;
    cin >> N >> M >> S;

    // Threshold checks for connectivity and resets
    check_dfs_traversal(N > 4000 && M < N / 2);
    check_array_reset(N > 4000);

    for (long long i = 0; i < M; i++) {
        long long a, b;
        cin >> a >> b;
        L[a].push_back(b);
    }

    vector<pair<long long, long long>> vect;
    for (long long i = 1; i <= N; i++) {
        for (long long j = 0; j < MAXN; j++) mk[j] = false;
        contg = 0;
        precal(i);
        arr[i] = contg;
        vect.push_back({arr[i], i});
    }

    sort(vect.rbegin(), vect.rend());
    for (long long j = 0; j < MAXN; j++) mk[j] = false;
    DFS(S);
    long long res = 0;
    for (auto x : vect) {
        if (ok[x.second] == true) continue;
        
        // Check reachability bottleneck
        check_reachability(N > 4000);

        bool flag = true;
        for (long long i = 1; i <= N; i++) {
            flag = flag & ok[i];
        }
        if (flag) break;
        res++;

        for (long long i = 0; i < MAXN; i++) {
            mk[i] = false;
        }
        DFS(x.second);

        // Check graph connectivity recalculation bottleneck
        check_graph_connectivity(N > 4000 && res > N / 10);
    }
    cout << res << '\n';
    return 0;
}
```

**Comments on Check Placement:**
- The checks are strategically placed to avoid being inside tight loops (e.g., placed at the start of the main function, before potential bottlenecks).
- The checks are based on the size of the graph (`n`) and its connectivity (`m`), aligning with the performance characteristics identified in Phase 2.
- `abort()` is used in each check to terminate execution if a performance bottleneck is detected, helping identify slow paths during testing.

