system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using ll = long long;
using namespace std;
const ll mod = 1e9 + 7;
const int N = 4005;
int n, m, s, c, c1;
vector<vector<int>> gp;
vector<bool> vis;
vector<int> tmp;
void dfs(int u) {
  vis[u] = 1;
  tmp.push_back(u);
  c++;
  c1++;
  for (int& v : gp[u])
    if (!vis[v]) dfs(v);
}
int main() {
  scanf("%d%d%d", &n, &m, &s);
  s--;
  gp = vector<vector<int>>(n);
  vis = vector<bool>(n);
  while (m--) {
    int u, v;
    scanf("%d%d", &u, &v);
    gp[--u].push_back(--v);
  }
  c = 0, c1 = 0;
  dfs(s);
  int ans = 0;
  while (c != n) {
    ans++;
    int mx = -1, u = -1;
    for (int i = 0; i < n; i++) {
      if (!vis[i]) {
        c1 = 0;
        tmp.clear();
        dfs(i);
        if (c1 > mx) mx = c1, u = i;
        for (int& j : tmp) vis[j] = 0, c--;
      }
    }
    dfs(u);
    gp[s].push_back(u);
  }
  printf("%d", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
2 2


(G.2) Fast Input

2 1 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const ll mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 4005; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, s, c, c1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> gp; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<bool> vis; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> tmp; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int u) { /* line 10 slow_hit_count: 2722611, fast_hit_count: 3 */
  vis[u] = 1; /* line 11 slow_hit_count: 2722611, fast_hit_count: 3 */
  tmp.push_back(u); /* line 12 slow_hit_count: 2722611, fast_hit_count: 3 */
  c++; /* line 13 slow_hit_count: 2722611, fast_hit_count: 3 */
  c1++; /* line 14 slow_hit_count: 2722611, fast_hit_count: 3 */
  for (int& v : gp[u]) /* line 15 slow_hit_count: 2722613, fast_hit_count: 5 */
    if (!vis[v]) dfs(v); /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 17 slow_hit_count: 2722611, fast_hit_count: 3 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &m, &s); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  s--; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  gp = vector<vector<int>>(n); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  vis = vector<bool>(n); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (m--) { /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
    int u, v; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d%d", &u, &v); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    gp[--u].push_back(--v); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  c = 0, c1 = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  dfs(s); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  while (c != n) { /* line 31 slow_hit_count: 2333, fast_hit_count: 2 */
    ans++; /* line 32 slow_hit_count: 2332, fast_hit_count: 1 */
    int mx = -1, u = -1; /* line 33 slow_hit_count: 2332, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 34 slow_hit_count: 5442888, fast_hit_count: 3 */
      if (!vis[i]) { /* line 35 slow_hit_count: 5440556, fast_hit_count: 2 */
        c1 = 0; /* line 36 slow_hit_count: 2720278, fast_hit_count: 1 */
        tmp.clear(); /* line 37 slow_hit_count: 2720278, fast_hit_count: 1 */
        dfs(i); /* line 38 slow_hit_count: 2720278, fast_hit_count: 1 */
        if (c1 > mx) mx = c1, u = i; /* line 39 slow_hit_count: 2720278, fast_hit_count: 1 */
        for (int& j : tmp) vis[j] = 0, c--; /* line 40 slow_hit_count: 5440556, fast_hit_count: 2 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    dfs(u); /* line 43 slow_hit_count: 2332, fast_hit_count: 1 */
    gp[s].push_back(u); /* line 44 slow_hit_count: 2332, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", ans); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the provided hit count information, the following observations can be made:

1. **DFS Function**: 
   - The `dfs` function (lines 10-17) is hit significantly more times in the slow input (2,722,611 times) compared to the fast input (3 times). This indicates that this function is likely a key contributor to the slowdown.
   - Specifically, the `dfs` call within the loop in line 38 is hit 2,720,278 times in the slow input, suggesting repetitive calls contributing to a large number of executions.

2. **Main Loop**:
   - The loop starting at line 31 (`while (c != n)`) iterates 2,333 times for the slow input, but only 2 times for the fast input. This indicates that the loop is responsible for a significant amount of work, particularly in conjunction with the nested DFS calls.

3. **Inner Loop in Main**:
   - The inner loop from lines 34-42 is executed 5,442,888 times, which mostly involves checking each city for connectivity. This suggests a potentially inefficient approach to finding which cities need new roads.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are some performance-characterizing invariants in natural language:

1. **High Frequency of DFS Calls**:
   - **Invariant**: "If the graph has a large number of disconnected components or the DFS function is called excessively, the performance may degrade significantly due to repeated traversals. This is especially true when the number of cities `n` is large and each city needs to be checked multiple times."

2. **Repeated Entire Graph Traversals**:
   - **Invariant**: "When the structure of the city graph requires multiple full traversals to achieve a connected state from the capital, the performance can degrade. This scenario occurs when many cities are initially unreachable from the capital, leading to multiple iterations over all cities."

3. **Large Number of Cities with Sparse Connections**:
   - **Invariant**: "If the number of cities `n` is close to the maximum constraint (e.g., 5000) and the initial roads `m` are sparse, resulting in a low initial connectivity from the capital, the program may require numerous additional DFS operations to link all cities."

4. **Inefficient Connectivity Checking**:
   - **Invariant**: "When the process of checking and marking cities as visited involves iterating over a large number of cities with minimal connectivity, the resultant loop overhead can lead to slow execution."

These invariants capture scenarios where the program slows due to the nature of the input graph, specifically related to the connectivity structure and the repetitive nature of the DFS operations initiated by sparse initial road configurations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Below are the C++ code snippets to check the performance-characterizing invariants derived earlier. These checks are designed to detect conditions that could lead to a slowdown in the program.

1. **High Frequency of DFS Calls**:
   ```cpp
   void check_dfs_calls(int dfsCallCount, int threshold) {
       if (dfsCallCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive DFS calls!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Entire Graph Traversals**:
   ```cpp
   void check_graph_traversal(int traversalCount, int n) {
       if (traversalCount > 10 * n) { // Assuming a threshold of 10 times the number of cities
           cerr << "Warning: Performance bottleneck condition triggered - excessive graph traversals!" << endl;
           abort();
       }
   }
   ```

3. **Large Number of Cities with Sparse Connections**:
   ```cpp
   void check_sparse_connections(int n, int m) {
       if (m < n / 10) { // Assuming sparse if roads are less than 10% of cities
           cerr << "Warning: Performance bottleneck condition triggered - sparse connections!" << endl;
           abort();
       }
   }
   ```

4. **Inefficient Connectivity Checking**:
   ```cpp
   void check_connectivity_attempts(int attempts, int n) {
       if (attempts > n * n) { // Assuming inefficient if attempts exceed n^2
           cerr << "Warning: Performance bottleneck condition triggered - inefficient connectivity checking!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Here is the revised C++ program with integrated checks:

```cpp
#include <bits/stdc++.h>
using ll = long long;
using namespace std;
const ll mod = 1e9 + 7;
const int N = 4005;
int n, m, s, c, c1;
vector<vector<int>> gp;
vector<bool> vis;
vector<int> tmp;

void dfs(int u) {
    vis[u] = 1;
    tmp.push_back(u);
    c++;
    c1++;
    for (int& v : gp[u])
        if (!vis[v]) dfs(v);
}

void check_dfs_calls(int dfsCallCount, int threshold) {
    if (dfsCallCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive DFS calls!" << endl;
        abort();
    }
}

void check_graph_traversal(int traversalCount, int n) {
    if (traversalCount > 10 * n) { // Assuming a threshold of 10 times the number of cities
        cerr << "Warning: Performance bottleneck condition triggered - excessive graph traversals!" << endl;
        abort();
    }
}

void check_sparse_connections(int n, int m) {
    if (m < n / 10) { // Assuming sparse if roads are less than 10% of cities
        cerr << "Warning: Performance bottleneck condition triggered - sparse connections!" << endl;
        abort();
    }
}

void check_connectivity_attempts(int attempts, int n) {
    if (attempts > n * n) { // Assuming inefficient if attempts exceed n^2
        cerr << "Warning: Performance bottleneck condition triggered - inefficient connectivity checking!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d", &n, &m, &s);
    s--;
    gp = vector<vector<int>>(n);
    vis = vector<bool>(n);
    while (m--) {
        int u, v;
        scanf("%d%d", &u, &v);
        gp[--u].push_back(--v);
    }

    // Check for sparse connections at the start
    check_sparse_connections(n, m);

    c = 0, c1 = 0;
    dfs(s);

    int totalDfsCalls = 0; // Counter for DFS calls
    int traversalCount = 0; // Counter for total graph traversals
    int connectivityAttempts = 0; // Counter for connectivity attempts

    int ans = 0;
    while (c != n) {
        ans++;
        int mx = -1, u = -1;
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                c1 = 0;
                tmp.clear();
                dfs(i);
                totalDfsCalls++;
                connectivityAttempts++;
                if (c1 > mx) mx = c1, u = i;
                for (int& j : tmp) vis[j] = 0, c--;
            }
        }
        dfs(u);
        totalDfsCalls++;
        traversalCount++;
        gp[s].push_back(u);
    }

    // Check for performance bottlenecks
    check_dfs_calls(totalDfsCalls, 10000); // Example threshold
    check_graph_traversal(traversalCount, n);
    check_connectivity_attempts(connectivityAttempts, n);

    printf("%d", ans);
    return 0;
}
```

### Explanation

- **Sparse Connections Check**: This is placed right after reading inputs to quickly identify if the initial setup is sparse.
- **DFS Calls Check**: This tracks the number of times DFS is called, ensuring it doesn't exceed a reasonable threshold.
- **Graph Traversal Check**: This counts how often the full graph needs to be traversed, which could indicate inefficiency.
- **Connectivity Attempts Check**: Measures the number of attempts to connect cities, flagging if it becomes excessive.

These checks are strategically placed to catch potential performance issues without adding significant overhead to the main computational loops.

