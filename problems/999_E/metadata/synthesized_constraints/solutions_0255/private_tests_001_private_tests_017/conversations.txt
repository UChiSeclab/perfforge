system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 5000 + 5;
vector<int> g[maxn], r[maxn], tp;
vector<int> z[maxn];
int sz, scc[maxn];
bool v[maxn];
void dfs(int x) {
  v[x] = true;
  for (int u : g[x])
    if (!v[u]) dfs(u);
  tp.push_back(x);
}
void rdfs(int x) {
  scc[x] = sz;
  for (int u : r[x])
    if (!scc[u]) rdfs(u);
}
bool reach(int x, int t) {
  if (x == t) return true;
  bool f = false;
  v[x] = true;
  for (int u : z[x])
    if (!v[u]) f |= reach(u, t);
  return f;
}
int main() {
  int n, m, s;
  cin >> n >> m >> s;
  --s;
  for (int i = 0; i < m; ++i) {
    int a, b;
    cin >> a >> b;
    --a, --b;
    g[a].push_back(b);
    r[b].push_back(a);
  }
  for (int i = 0; i < n; ++i)
    if (!v[i]) dfs(i);
  reverse(tp.begin(), tp.end());
  for (int i : tp)
    if (!scc[i]) ++sz, rdfs(i);
  for (int i = 0; i < n; ++i) {
    for (int j : g[i])
      if (scc[i] != scc[j]) z[scc[i]].push_back(scc[j]);
  }
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    memset(v, false, sizeof(v));
    if (!reach(scc[s], scc[tp[i]])) z[scc[s]].push_back(scc[tp[i]]), ++ans;
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
1 2


(G.2) Fast Input

2 1 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 5000 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[maxn], r[maxn], tp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> z[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int sz, scc[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool v[maxn]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int x) { /* line 8 slow_hit_count: 2333, fast_hit_count: 2 */
  v[x] = true; /* line 9 slow_hit_count: 2333, fast_hit_count: 2 */
  for (int u : g[x]) /* line 10 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!v[u]) dfs(u); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  tp.push_back(x); /* line 12 slow_hit_count: 2333, fast_hit_count: 2 */
} /* line 13 slow_hit_count: 2333, fast_hit_count: 2 */
void rdfs(int x) { /* line 14 slow_hit_count: 2333, fast_hit_count: 2 */
  scc[x] = sz; /* line 15 slow_hit_count: 2333, fast_hit_count: 2 */
  for (int u : r[x]) /* line 16 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!scc[u]) rdfs(u); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 2333, fast_hit_count: 2 */
bool reach(int x, int t) { /* line 19 slow_hit_count: 2722611, fast_hit_count: 3 */
  if (x == t) return true; /* line 20 slow_hit_count: 2722611, fast_hit_count: 3 */
  bool f = false; /* line 21 slow_hit_count: 2722609, fast_hit_count: 1 */
  v[x] = true; /* line 22 slow_hit_count: 2722609, fast_hit_count: 1 */
  for (int u : z[x]) /* line 23 slow_hit_count: 5442887, fast_hit_count: 2 */
    if (!v[u]) f |= reach(u, t); /* line 24 slow_hit_count: 2720278, fast_hit_count: 1 */
  return f; /* line 25 slow_hit_count: 2722609, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, s; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> s; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  --s; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; ++i) { /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    int a, b; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    --a, --b; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    g[a].push_back(b); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    r[b].push_back(a); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) /* line 38 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!v[i]) dfs(i); /* line 39 slow_hit_count: 2333, fast_hit_count: 2 */
  reverse(tp.begin(), tp.end()); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i : tp) /* line 41 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!scc[i]) ++sz, rdfs(i); /* line 42 slow_hit_count: 2333, fast_hit_count: 2 */
  for (int i = 0; i < n; ++i) { /* line 43 slow_hit_count: 2334, fast_hit_count: 3 */
    for (int j : g[i]) /* line 44 slow_hit_count: 2334, fast_hit_count: 3 */
      if (scc[i] != scc[j]) z[scc[i]].push_back(scc[j]); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 48 slow_hit_count: 2334, fast_hit_count: 3 */
    memset(v, false, sizeof(v)); /* line 49 slow_hit_count: 2333, fast_hit_count: 2 */
    if (!reach(scc[s], scc[tp[i]])) z[scc[s]].push_back(scc[tp[i]]), ++ans; /* line 50 slow_hit_count: 2333, fast_hit_count: 2 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance of the given C program and understand why it performs poorly on the slow input, we must first examine the line-level hit counts. Here's a breakdown of the steps to derive performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - **High Hit Lines**:
     - `reach` function (lines 19-25): This function is executed over 2.7 million times in the slow input compared to only 3 times in the fast input.
     - `dfs` and `rdfs` functions (lines 8-18): These lines are hit over 2300 times in the slow input.
   - **Loops & Recursion**: 
     - The `reach` function involves a recursive call, which might be causing significant slow down, particularly due to depth or breadth of recursion.

2. **Inference on Data Structure Interactions**:
   - The high hit count in `reach` suggests that it might be frequently invoked due to numerous cities and roads being checked for reachability.
   - Functions `dfs` and `rdfs` are likely exploring large components, especially since the graph is mostly disconnected with many isolated nodes.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following natural language performance-characterizing invariants:

1. **Disconnected Components**:
   - **Invariant**: “When the graph has many disconnected components or isolated nodes, the algorithm may slow down as it repeatedly checks for reachability.”
   - **Explanation**: The `reach` function is heavily recursive and causes significant slowdowns when there are many SCCs (strongly connected components) or disconnected nodes that need to be checked against the starting node.

2. **Sparse Graph with Large `n`**:
   - **Invariant**: “In cases where `n` is large but `m` is small, the program may slow down due to extensive DFS explorations over isolated nodes.”
   - **Explanation**: With few roads and many cities, the DFS functions (`dfs` and `rdfs`) operate over numerous isolated nodes, leading to high hit counts and inefficiency.

3. **High Recursion Depth**:
   - **Invariant**: “If the reachability check (`reach` function) explores deep or broad recursive paths, performance may degrade significantly.”
   - **Explanation**: This invariant highlights the impact of recursion depth when the graph's structure forces prolonged exploration of nodes.

### Summary

In summary, the slow performance is triggered by the graph's structure, specifically when it has many isolated components or a large number of vertices with few edges. This leads to extensive and repeated recursive operations, particularly in reachability checks. The problem constraints (like `n <= 5000`) set the stage for these inefficiencies, especially at upper bounds or when the graph is highly sparse.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived earlier:

1. **Invariant for Disconnected Components**:
   - To check if there are many disconnected components or isolated nodes, we can track the number of strongly connected components (SCCs) and issue a warning if this number is large.

```cpp
void check_disconnected_components(int sccCount, int threshold) {
    if (sccCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - many disconnected components!" << endl;
        abort();
    }
}
```

2. **Invariant for Sparse Graph with Large `n`**:
   - We can check if `n` is large relative to `m`, indicating a sparse graph with many isolated nodes.

```cpp
void check_sparse_graph(int n, int m, double sparsityThreshold) {
    if (n > m * sparsityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse graph with large n!" << endl;
        abort();
    }
}
```

3. **Invariant for High Recursion Depth**:
   - Monitor the depth of the recursive calls in the `reach` function.

```cpp
int recursionDepth = 0;

void check_recursion_depth(int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
        abort();
    }
}
```

### Phase 4: Instrument the Original Code with Checkers

Below is the instrumented C++ code, including the checkers for performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 5000 + 5;
vector<int> g[maxn], r[maxn], tp;
vector<int> z[maxn];
int sz, scc[maxn];
bool v[maxn];
int recursionDepth = 0; // Track recursion depth

void dfs(int x) {
    v[x] = true;
    for (int u : g[x])
        if (!v[u]) dfs(u);
    tp.push_back(x);
}

void rdfs(int x) {
    scc[x] = sz;
    for (int u : r[x])
        if (!scc[u]) rdfs(u);
}

bool reach(int x, int t) {
    recursionDepth++; // Increment recursion depth
    check_recursion_depth(100); // Check high recursion depth
    if (x == t) {
        recursionDepth--; // Decrement recursion depth before returning
        return true;
    }
    bool f = false;
    v[x] = true;
    for (int u : z[x])
        if (!v[u]) f |= reach(u, t);
    recursionDepth--; // Decrement recursion depth after recursive calls
    return f;
}

void check_disconnected_components(int sccCount, int threshold) {
    if (sccCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - many disconnected components!" << endl;
        abort();
    }
}

void check_sparse_graph(int n, int m, double sparsityThreshold) {
    if (n > m * sparsityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse graph with large n!" << endl;
        abort();
    }
}

void check_recursion_depth(int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
        abort();
    }
}

int main() {
    int n, m, s;
    cin >> n >> m >> s;
    --s;
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        --a, --b;
        g[a].push_back(b);
        r[b].push_back(a);
    }
    for (int i = 0; i < n; ++i)
        if (!v[i]) dfs(i);
    reverse(tp.begin(), tp.end());
    for (int i : tp)
        if (!scc[i]) ++sz, rdfs(i);

    check_disconnected_components(sz, 1000); // Check for many disconnected components
    check_sparse_graph(n, m, 2.0); // Check for sparse graph with large n

    for (int i = 0; i < n; ++i) {
        for (int j : g[i])
            if (scc[i] != scc[j]) z[scc[i]].push_back(scc[j]);
    }
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        memset(v, false, sizeof(v));
        if (!reach(scc[s], scc[tp[i]])) z[scc[s]].push_back(scc[tp[i]]), ++ans;
    }
    printf("%d\n", ans);
}
```

### Comments on Inserted Checkers
- **Disconnected Components**: Check is added after SCCs are calculated to warn if too many components exist.
- **Sparse Graph with Large `n`**: Check is placed after input parsing to assess graph sparsity.
- **High Recursion Depth**: Check is incorporated in the `reach` function to monitor depth during execution. 

These checks will help trigger warnings during testing if the conditions leading to performance bottlenecks are met.

