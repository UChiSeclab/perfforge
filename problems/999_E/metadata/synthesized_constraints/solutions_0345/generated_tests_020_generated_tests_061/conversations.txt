system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int V, E, g[5003][5003];
int cnt, Stack[5003], top;
char vis[5003], ins[5003], ans[5003];
int dfn[5003], low[5003];
int uf[5003];
int used[5003];
struct Edge {
  int u, v;
  Edge(void) {}
  Edge(int uu, int vv) : u(uu), v(vv) {}
} Es[5003];
int find(int x) {
  if (uf[x] >= 0) return uf[x] = find(uf[x]);
  return x;
}
void merge(int x, int y) {
  int r1 = find(x);
  int r2 = find(y);
  if (r1 < r2) {
    uf[r1] += uf[r2];
    uf[r2] = r1;
  } else if (r2 < r1) {
    uf[r2] += uf[r1];
    uf[r1] = r2;
  }
}
void Tarjian(int u) {
  vis[u] = ins[u] = 1;
  dfn[u] = low[u] = ++cnt;
  Stack[top++] = u;
  for (int v = 1; v <= V; ++v) {
    if (g[u][v]) {
      if (!vis[v]) {
        Tarjian(v);
        if (low[u] > low[v]) low[u] = low[v];
      } else if (ins[v]) {
        if (low[u] > dfn[v]) low[u] = dfn[v];
      }
    }
  }
  if (dfn[u] == low[u]) {
    int now, sum = 0;
    while (1) {
      now = Stack[--top];
      ins[now] = 0;
      if (now == u) break;
      merge(now, u);
    }
  }
}
int main() {
  int u, v, e, ccnt = 0, tp, src;
  memset(uf, -1, sizeof(uf));
  scanf("%d %d %d", &V, &E, &src);
  for (e = 0; e < E; ++e) {
    scanf("%d %d", &u, &v);
    g[u][v] = 1;
    Es[e] = Edge(u, v);
  }
  for (u = 1; u <= V; ++u)
    if (!vis[u]) Tarjian(u);
  for (u = 1; u <= V; ++u) tp = find(u), used[tp] = tp;
  for (e = 0; e < E; ++e) {
    tp = find(Es[e].v);
    if (find(Es[e].u) != tp) ans[tp] = 1;
  }
  ans[0] = 1;
  for (u = 1; u <= V; ++u)
    if (!ans[used[u]]) ccnt++;
  if (!ans[find(src)]) ccnt--;
  printf("%d\n", ccnt);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
2 2


(G.2) Fast Input

2 1 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int V, E, g[5003][5003]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int cnt, Stack[5003], top; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char vis[5003], ins[5003], ans[5003]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dfn[5003], low[5003]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int uf[5003]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int used[5003]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
struct Edge { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int u, v; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  Edge(void) {} /* line 11 slow_hit_count: 5003, fast_hit_count: 5003 */
  Edge(int uu, int vv) : u(uu), v(vv) {} /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
} Es[5003]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int find(int x) { /* line 14 slow_hit_count: 2336, fast_hit_count: 5 */
  if (uf[x] >= 0) return uf[x] = find(uf[x]); /* line 15 slow_hit_count: 2336, fast_hit_count: 5 */
  return x; /* line 16 slow_hit_count: 2336, fast_hit_count: 5 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void merge(int x, int y) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int r1 = find(x); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  int r2 = find(y); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if (r1 < r2) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    uf[r1] += uf[r2]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    uf[r2] = r1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (r2 < r1) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    uf[r2] += uf[r1]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    uf[r1] = r2; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
void Tarjian(int u) { /* line 29 slow_hit_count: 2333, fast_hit_count: 2 */
  vis[u] = ins[u] = 1; /* line 30 slow_hit_count: 2333, fast_hit_count: 2 */
  dfn[u] = low[u] = ++cnt; /* line 31 slow_hit_count: 2333, fast_hit_count: 2 */
  Stack[top++] = u; /* line 32 slow_hit_count: 2333, fast_hit_count: 2 */
  for (int v = 1; v <= V; ++v) { /* line 33 slow_hit_count: 5445222, fast_hit_count: 6 */
    if (g[u][v]) { /* line 34 slow_hit_count: 5442889, fast_hit_count: 4 */
      if (!vis[v]) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
        Tarjian(v); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        if (low[u] > low[v]) low[u] = low[v]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (ins[v]) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
        if (low[u] > dfn[v]) low[u] = dfn[v]; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (dfn[u] == low[u]) { /* line 43 slow_hit_count: 2333, fast_hit_count: 2 */
    int now, sum = 0; /* line 44 slow_hit_count: 2333, fast_hit_count: 2 */
    while (1) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      now = Stack[--top]; /* line 46 slow_hit_count: 2333, fast_hit_count: 2 */
      ins[now] = 0; /* line 47 slow_hit_count: 2333, fast_hit_count: 2 */
      if (now == u) break; /* line 48 slow_hit_count: 2333, fast_hit_count: 2 */
      merge(now, u); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 2333, fast_hit_count: 2 */
int main() { /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  int u, v, e, ccnt = 0, tp, src; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  memset(uf, -1, sizeof(uf)); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &V, &E, &src); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (e = 0; e < E; ++e) { /* line 57 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%d %d", &u, &v); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    g[u][v] = 1; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    Es[e] = Edge(u, v); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (u = 1; u <= V; ++u) /* line 62 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!vis[u]) Tarjian(u); /* line 63 slow_hit_count: 2333, fast_hit_count: 2 */
  for (u = 1; u <= V; ++u) tp = find(u), used[tp] = tp; /* line 64 slow_hit_count: 2334, fast_hit_count: 3 */
  for (e = 0; e < E; ++e) { /* line 65 slow_hit_count: 2, fast_hit_count: 2 */
    tp = find(Es[e].v); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    if (find(Es[e].u) != tp) ans[tp] = 1; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  ans[0] = 1; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  for (u = 1; u <= V; ++u) /* line 70 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!ans[used[u]]) ccnt++; /* line 71 slow_hit_count: 2333, fast_hit_count: 2 */
  if (!ans[find(src)]) ccnt--; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", ccnt); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 74 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program, we need to analyze the code and line-level hit counts for both fast and slow inputs. We'll identify the expensive code segments and derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon reviewing the hit counts:

1. **Function `Tarjian`:** This function is called 2333 times for the slow input compared to just 2 times for the fast input. This discrepancy indicates that the `Tarjian` function is a significant contributor to the slowdown.

2. **Loop in `Tarjian`:** The loop that iterates over all vertices (`for (int v = 1; v <= V; ++v)`) gets hit significantly more for the slow input (5,445,222 times) compared to the fast input (6 times). This suggests an inefficient traversal or recursion related to the graph's connectivity.

3. **`find` Function:** The `find` function, which is part of a union-find (disjoint set) structure, is called 2336 times for the slow input and only 5 times for the fast input, indicating potential inefficiencies in handling disjoint sets.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following natural language invariants that characterize conditions under which the code slows down:

1. **Invariant on Graph Connectivity:**
   - **Description:** "If the graph has many disconnected components or isolated nodes, especially when the number of cities (n) is large, the program may perform extensive and repetitive searches to determine connectivity, particularly in Tarjan's algorithm."
   - **Reasoning:** The repeated calls to `Tarjian` and the loop over vertices suggest the program struggles with disconnected graphs. Ensuring all nodes are reachable from the capital is likely causing excessive computation.

2. **Invariant on Union-Find Operations:**
   - **Description:** "When the graph contains many nodes that belong to small or singleton sets, the union-find operations, particularly the `find` function, are called excessively, leading to performance degradation."
   - **Reasoning:** The high hit counts for the `find` function indicate numerous attempts to determine component membership, which can be inefficient if the graph is fragmented.

3. **Invariant on Dense Graph Traversal:**
   - **Description:** "If the graph is sparse but contains a large number of nodes relative to the number of roads (m), the algorithm may inefficiently traverse and check multiple unnecessary paths, leading to slow performance."
   - **Reasoning:** The dense traversal over non-existent edges (as evidenced by the loop iterating over all vertices) suggests inefficiencies when the graph is much larger than the connectivity data implies.

These invariants reflect conditions under which the program's performance is likely to degrade, such as when the problem of ensuring reachability becomes computationally intensive due to sparse or fragmented graph structures. By recognizing these patterns, future inputs that could potentially slow down the program can be identified.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: Let's first implement the checkers for the performance-characterizing invariants we derived in Phase 2. These checkers will be implemented as functions or conditional statements to detect the conditions that may lead to performance bottlenecks. 

### Phase 3: Implementing Checkers in C++

1. **Checker for Graph Connectivity:**
   - We need to check if there are many disconnected components or isolated nodes. This can be done by verifying if unvisited nodes exist after the initial DFS from the capital.
   
   ```cpp
   void check_graph_connectivity(int V, int visCount) {
       if (visCount < V / 2) { // Arbitrary threshold, assuming if more than half are unvisited
           cerr << "Warning: Performance bottleneck condition triggered - many disconnected components or isolated nodes!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Union-Find Operations:**
   - We need to check the inefficiency caused by many small or singleton sets, indicated by excessive `find` operations.
   
   ```cpp
   void check_union_find_efficiency(int findCount, int V) {
       if (findCount > V * 10) { // Assuming 10 times V is a high threshold for inefficiency
           cerr << "Warning: Performance bottleneck condition triggered - excessive union-find operations!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Dense Graph Traversal:**
   - This involves checking if the graph is sparse, yet the program performs extensive checks.
   
   ```cpp
   void check_dense_graph_traversal(int edgeChecks, int V, int E) {
       if (edgeChecks > V * V && E < V / 10) { // If edge checks are high and graph is sparse
           cerr << "Warning: Performance bottleneck condition triggered - inefficient dense graph traversal!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now we'll integrate these checkers into the original C++ program, ensuring the checks are placed at effective points to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

int V, E, g[5003][5003];
int cnt, Stack[5003], top;
char vis[5003], ins[5003], ans[5003];
int dfn[5003], low[5003];
int uf[5003];
int used[5003];
int findCount = 0;  // Counter for find operations
struct Edge {
  int u, v;
  Edge(void) {}
  Edge(int uu, int vv) : u(uu), v(vv) {}
} Es[5003];

// Checker functions
void check_graph_connectivity(int V, int visCount) {
    if (visCount < V / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - many disconnected components or isolated nodes!" << endl;
        abort();
    }
}

void check_union_find_efficiency(int findCount, int V) {
    if (findCount > V * 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive union-find operations!" << endl;
        abort();
    }
}

void check_dense_graph_traversal(int edgeChecks, int V, int E) {
    if (edgeChecks > V * V && E < V / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient dense graph traversal!" << endl;
        abort();
    }
}

// Union-find function with counter
int find(int x) {
    findCount++;
    if (uf[x] >= 0) return uf[x] = find(uf[x]);
    return x;
}

void merge(int x, int y) {
    int r1 = find(x);
    int r2 = find(y);
    if (r1 < r2) {
        uf[r1] += uf[r2];
        uf[r2] = r1;
    } else if (r2 < r1) {
        uf[r2] += uf[r1];
        uf[r1] = r2;
    }
}

void Tarjian(int u) {
    vis[u] = ins[u] = 1;
    dfn[u] = low[u] = ++cnt;
    Stack[top++] = u;
    for (int v = 1; v <= V; ++v) {
        if (g[u][v]) {
            if (!vis[v]) {
                Tarjian(v);
                if (low[u] > low[v]) low[u] = low[v];
            } else if (ins[v]) {
                if (low[u] > dfn[v]) low[u] = dfn[v];
            }
        }
    }
    if (dfn[u] == low[u]) {
        int now, sum = 0;
        while (1) {
            now = Stack[--top];
            ins[now] = 0;
            if (now == u) break;
            merge(now, u);
        }
    }
}

int main() {
    int u, v, e, ccnt = 0, tp, src;
    memset(uf, -1, sizeof(uf));
    scanf("%d %d %d", &V, &E, &src);
    for (e = 0; e < E; ++e) {
        scanf("%d %d", &u, &v);
        g[u][v] = 1;
        Es[e] = Edge(u, v);
    }

    int visCount = 0;
    for (u = 1; u <= V; ++u)
        if (!vis[u]) {
            Tarjian(u);
            visCount++;
        }

    // Perform checker for graph connectivity after DFS
    check_graph_connectivity(V, visCount);

    for (u = 1; u <= V; ++u) tp = find(u), used[tp] = tp;

    int edgeChecks = 0;
    for (e = 0; e < E; ++e) {
        tp = find(Es[e].v);
        if (find(Es[e].u) != tp) {
            ans[tp] = 1;
        }
        edgeChecks++;
    }

    // Perform checker for dense graph traversal
    check_dense_graph_traversal(edgeChecks, V, E);

    // Perform checker for union-find efficiency
    check_union_find_efficiency(findCount, V);

    ans[0] = 1;
    for (u = 1; u <= V; ++u)
        if (!ans[used[u]]) ccnt++;
    if (!ans[find(src)]) ccnt--;
    printf("%d\n", ccnt);
}
```

### Explanation of the Integration
1. **Graph Connectivity Checker:** This is placed after DFS traversal in `main` where we count unvisited nodes, to check if a substantial portion of the graph is disconnected.

2. **Union-Find Efficiency Checker:** This is evaluated at the end of the program where we have tracked `find` operation calls, assessing if they're excessive relative to the number of cities.

3. **Dense Graph Traversal Checker:** This is checked after processing all edges to determine if too many edge checks are performed relative to the sparsity of the graph.

These checkers aim to catch performance issues during runtime, providing invaluable insights for debugging and optimization.

