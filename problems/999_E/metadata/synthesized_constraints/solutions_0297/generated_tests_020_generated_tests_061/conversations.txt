system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int inf = 1000000007;
using namespace std;
long long read() {
  long long x = 0, f = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();
  return f * x;
}
struct edge {
  int t;
  edge *next;
} e[20005], *h[400005], *o = e;
void add(int x, int y) {
  o->t = y;
  o->next = h[x];
  h[x] = o++;
}
int n, m, _x, _y, S, ans, _v[400005];
bool v[400005];
queue<int> q;
void bfs(int S) {
  q.push(S);
  v[S]++;
  while (!q.empty()) {
    int t = q.front();
    q.pop();
    for (edge *j = h[t]; j; j = j->next)
      if (!v[j->t]) v[j->t]++, q.push(j->t);
  }
}
int bfs1(int S) {
  int s = 0;
  q.push(S);
  _v[S] = _x;
  while (!q.empty()) {
    int t = q.front();
    q.pop();
    s++;
    for (edge *j = h[t]; j; j = j->next)
      if (!v[j->t] && _v[j->t] != _x) _v[j->t] = _x, q.push(j->t);
  }
  return s;
}
int main() {
  n = read();
  m = read();
  S = read();
  for (int i = 1; i <= m; i++) {
    _x = read();
    _y = read();
    add(_x, _y);
  }
  bfs(S);
  _x = 0;
  while (1) {
    int cnt = 0;
    for (int i = 1; i <= n; i++)
      if (!v[i]) {
        _x++;
        int t = bfs1(i);
        if (t > cnt) S = i, cnt = t;
      }
    if (!cnt) break;
    bfs(S);
    ans++;
  }
  return 0 * printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
2 2


(G.2) Fast Input

2 1 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1000000007; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long read() { /* line 4 slow_hit_count: 5, fast_hit_count: 5 */
  long long x = 0, f = 1; /* line 5 slow_hit_count: 5, fast_hit_count: 5 */
  char ch = getchar(); /* line 6 slow_hit_count: 5, fast_hit_count: 5 */
  while (!isdigit(ch)) { /* line 7 slow_hit_count: 5, fast_hit_count: 5 */
    if (ch == '-') f = -1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar(); /* line 11 slow_hit_count: 13, fast_hit_count: 10 */
  return f * x; /* line 12 slow_hit_count: 5, fast_hit_count: 5 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
struct edge { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  edge *next; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} e[20005], *h[400005], *o = e; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void add(int x, int y) { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  o->t = y; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  o->next = h[x]; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  h[x] = o++; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
int n, m, _x, _y, S, ans, _v[400005]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
bool v[400005]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
queue<int> q; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void bfs(int S) { /* line 26 slow_hit_count: 2333, fast_hit_count: 2 */
  q.push(S); /* line 27 slow_hit_count: 2333, fast_hit_count: 2 */
  v[S]++; /* line 28 slow_hit_count: 2333, fast_hit_count: 2 */
  while (!q.empty()) { /* line 29 slow_hit_count: 4666, fast_hit_count: 4 */
    int t = q.front(); /* line 30 slow_hit_count: 2333, fast_hit_count: 2 */
    q.pop(); /* line 31 slow_hit_count: 2333, fast_hit_count: 2 */
    for (edge *j = h[t]; j; j = j->next) /* line 32 slow_hit_count: 2334, fast_hit_count: 3 */
      if (!v[j->t]) v[j->t]++, q.push(j->t); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 2333, fast_hit_count: 2 */
int bfs1(int S) { /* line 36 slow_hit_count: 2720278, fast_hit_count: 1 */
  int s = 0; /* line 37 slow_hit_count: 2720278, fast_hit_count: 1 */
  q.push(S); /* line 38 slow_hit_count: 2720278, fast_hit_count: 1 */
  _v[S] = _x; /* line 39 slow_hit_count: 2720278, fast_hit_count: 1 */
  while (!q.empty()) { /* line 40 slow_hit_count: 5440556, fast_hit_count: 2 */
    int t = q.front(); /* line 41 slow_hit_count: 2720278, fast_hit_count: 1 */
    q.pop(); /* line 42 slow_hit_count: 2720278, fast_hit_count: 1 */
    s++; /* line 43 slow_hit_count: 2720278, fast_hit_count: 1 */
    for (edge *j = h[t]; j; j = j->next) /* line 44 slow_hit_count: 2720279, fast_hit_count: 2 */
      if (!v[j->t] && _v[j->t] != _x) _v[j->t] = _x, q.push(j->t); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return s; /* line 47 slow_hit_count: 2720278, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  m = read(); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  S = read(); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
    _x = read(); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    _y = read(); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    add(_x, _y); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  bfs(S); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  _x = 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  while (1) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    int cnt = 0; /* line 61 slow_hit_count: 2333, fast_hit_count: 2 */
    for (int i = 1; i <= n; i++) /* line 62 slow_hit_count: 5445222, fast_hit_count: 6 */
      if (!v[i]) { /* line 63 slow_hit_count: 5442889, fast_hit_count: 4 */
        _x++; /* line 64 slow_hit_count: 2720278, fast_hit_count: 1 */
        int t = bfs1(i); /* line 65 slow_hit_count: 2720278, fast_hit_count: 1 */
        if (t > cnt) S = i, cnt = t; /* line 66 slow_hit_count: 2720278, fast_hit_count: 1 */
      } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    if (!cnt) break; /* line 68 slow_hit_count: 2333, fast_hit_count: 2 */
    bfs(S); /* line 69 slow_hit_count: 2332, fast_hit_count: 1 */
    ans++; /* line 70 slow_hit_count: 2332, fast_hit_count: 1 */
  } /* line 71 slow_hit_count: 2332, fast_hit_count: 1 */
  return 0 * printf("%d\n", ans); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the C program for performance bottlenecks, we will go through the provided information and follow the structured approach.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - The `bfs1` function (starting at line 36) is extremely expensive in the slow input compared to the fast input. It has been hit over 2.7 million times in the slow run but only once in the fast run.
   - The `bfs` function (starting at line 26) is also significantly hit in the slow input (2333 times) compared to the fast input (2 times).
   - The loop beginning at line 60, which is around the main functional logic, also shows significant hit increases, especially in the loop and conditional statements inside it.

2. **Interactions with Data Structures:**
   - The slow input results in the program repeatedly running BFS search operations (`bfs1` and `bfs`), which is indicative of inefficient exploration or revisiting of nodes.
   - The program seems to iterate over potentially disconnected components or nodes that are not reachable easily, leading to numerous iterations and function calls.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations and the problem's constraints, we can derive several performance invariants in natural language.

1. **Invariant on Graph Connectivity:**
   - **Description:** "If the graph of cities has many disconnected components or isolated nodes, repeated BFS searches are performed, leading to increased computational time."
   - **Rationale:** The `bfs1` function is called many times, suggesting it is used to explore new components. A large number of disconnected components increases the workload.

2. **Invariant on Number of Roads:**
   - **Description:** "When the number of roads `m` is significantly smaller than the number of cities `n`, especially near the upper limit of `n`, the BFS functions may execute excessively due to sparse connectivity."
   - **Rationale:** Sparse graphs with fewer roads compared to cities require more effort to find paths that connect all cities with the capital.

3. **Invariant on Starting Node Accessibility:**
   - **Description:** "If the capital city is initially not well-connected to other cities, the process of finding the minimum number of roads becomes computationally expensive."
   - **Rationale:** The BFS functions are heavily reliant on starting from the capital, and if it’s poorly connected, more iterations are needed to ensure all nodes are visited.

### Additional Considerations

- The program's current structure does not efficiently handle graphs with low connectivity, causing repeated traversals and explorations.
- Ensuring that checks or pre-computations limit the number of unnecessary function calls could improve performance.
- Introducing optimizations like memoization or early exits when conditions suggest minimal roads needed could mitigate slowdowns for larger inputs.

These invariants can guide the improvement of the program to better handle inputs that traditionally cause slow execution times.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Below are the C++ code snippets to implement the performance-characterizing invariants identified in the previous phase as runtime checks.

#### Invariant 1: Graph Connectivity

This invariant addresses the potential slowdown caused by the presence of many disconnected components or isolated nodes.

```cpp
void check_graph_connectivity(int disconnectedComponents, int totalCities) {
    if (disconnectedComponents > totalCities / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - too many disconnected components!" << endl;
        abort();
    }
}
```

#### Invariant 2: Number of Roads

This invariant captures the condition where the number of roads is significantly smaller compared to the number of cities, especially when `n` is large.

```cpp
void check_road_density(int numCities, int numRoads) {
    if (numRoads < numCities / 10 && numCities > 1000) { // Assuming large cities should have more roads
        cerr << "Warning: Performance bottleneck condition triggered - sparse road network!" << endl;
        abort();
    }
}
```

#### Invariant 3: Starting Node Accessibility

This invariant checks if the capital city is poorly connected, leading to expensive computations to find the minimum number of roads.

```cpp
void check_capital_connectivity(bool isCapitalWellConnected) {
    if (!isCapitalWellConnected) {
        cerr << "Warning: Performance bottleneck condition triggered - capital city not well connected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers Into the Program

Now, let's integrate these checker functions into the original C++ code, placing them at strategic points to detect potential slowdowns effectively.

```cpp
#include <bits/stdc++.h>
const int inf = 1000000007;
using namespace std;

long long read() {
    long long x = 0, f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();
    return f * x;
}

struct edge {
    int t;
    edge *next;
} e[20005], *h[400005], *o = e;

void add(int x, int y) {
    o->t = y;
    o->next = h[x];
    h[x] = o++;
}

int n, m, _x, _y, S, ans, _v[400005];
bool v[400005];
queue<int> q;

// Function to check graph connectivity invariant
void check_graph_connectivity(int disconnectedComponents, int totalCities) {
    if (disconnectedComponents > totalCities / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - too many disconnected components!" << endl;
        abort();
    }
}

// Function to check road density invariant
void check_road_density(int numCities, int numRoads) {
    if (numRoads < numCities / 10 && numCities > 1000) { // Assuming large cities should have more roads
        cerr << "Warning: Performance bottleneck condition triggered - sparse road network!" << endl;
        abort();
    }
}

// Function to check capital connectivity invariant
void check_capital_connectivity(bool isCapitalWellConnected) {
    if (!isCapitalWellConnected) {
        cerr << "Warning: Performance bottleneck condition triggered - capital city not well connected!" << endl;
        abort();
    }
}

void bfs(int S) {
    q.push(S);
    v[S]++;
    while (!q.empty()) {
        int t = q.front();
        q.pop();
        for (edge *j = h[t]; j; j = j->next)
            if (!v[j->t]) v[j->t]++, q.push(j->t);
    }
}

int bfs1(int S) {
    int s = 0;
    q.push(S);
    _v[S] = _x;
    while (!q.empty()) {
        int t = q.front();
        q.pop();
        s++;
        for (edge *j = h[t]; j; j = j->next)
            if (!v[j->t] && _v[j->t] != _x) _v[j->t] = _x, q.push(j->t);
    }
    return s;
}

int main() {
    n = read();
    m = read();
    S = read();
    
    // Check invariant for road density
    check_road_density(n, m);
    
    for (int i = 1; i <= m; i++) {
        _x = read();
        _y = read();
        add(_x, _y);
    }
    
    bfs(S);
    
    // Check if the capital city is well connected
    // Assuming that if at least one connection exists initially, it's considered well-connected
    bool isCapitalWellConnected = (h[S] != nullptr);
    check_capital_connectivity(isCapitalWellConnected);

    _x = 0;
    int disconnectedComponents = 0;
    while (1) {
        int cnt = 0;
        for (int i = 1; i <= n; i++)
            if (!v[i]) {
                _x++;
                int t = bfs1(i);
                if (t > cnt) S = i, cnt = t;
                disconnectedComponents++;
            }
        if (!cnt) break;
        bfs(S);
        ans++;
    }
    
    // Check invariant for graph connectivity after processing
    check_graph_connectivity(disconnectedComponents, n);
    
    return 0 * printf("%d\n", ans);
}
```

### Explanation

- **Checker Functions:** Each checker function is placed before or after critical operations where their conditions can be realistically evaluated, such as after reading inputs or after processing nodes.
- **Strategic Checks:** The checks for road density and capital connectivity are performed right after input reading and initial BFS processing to avoid unnecessary computations.
- **Avoiding Overhead:** These checks are placed outside of tight loops to minimize performance overhead while still detecting inefficiencies.

