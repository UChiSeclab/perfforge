system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long fpow(long long n, long long k, long long p = 1000000007) {
  long long r = 1;
  for (; k; k >>= 1) {
    if (k & 1) r = r * n % p;
    n = n * n % p;
  }
  return r;
}
long long inv(long long a, long long p = 1000000007) {
  return fpow(a, p - 2, p);
}
vector<long long> v[5001];
set<long long> s;
long long n, m, cap;
vector<bool> vis;
void dfs(long long cur) {
  vis[cur] = true;
  for (long long adj : v[cur]) {
    if (!vis[adj]) {
      dfs(adj);
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
  cin >> n >> m >> cap;
  long long x, y;
  for (int i = 0; i < m; i++) {
    cin >> x >> y;
    v[x].push_back(y);
  }
  vis = vector<bool>(n + 1, false);
  dfs(cap);
  long long count = 0;
  long long flag = 0;
  set<long long>::iterator it;
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      s.insert(i);
    }
  }
  for (int i = 1; i <= n; i++) {
    if (s.find(i) != s.end()) {
      vis = vector<bool>(n + 1, false);
      dfs(i);
      for (int j = 1; j <= n; j++) {
        if (vis[j] == 1 && i != j && s.find(j) != s.end()) {
          s.erase(j);
        }
      }
    }
  }
  cout << s.size() << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
1 2


(G.2) Fast Input

2 1 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long fpow(long long n, long long k, long long p = 1000000007) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  for (; k; k >>= 1) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    if (k & 1) r = r * n % p; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    n = n * n % p; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long inv(long long a, long long p = 1000000007) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return fpow(a, p - 2, p); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v[5001]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
set<long long> s; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, cap; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
vector<bool> vis; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(long long cur) { /* line 18 slow_hit_count: 2333, fast_hit_count: 2 */
  vis[cur] = true; /* line 19 slow_hit_count: 2333, fast_hit_count: 2 */
  for (long long adj : v[cur]) { /* line 20 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!vis[adj]) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
      dfs(adj); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 2333, fast_hit_count: 2 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> cap; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, y; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> x >> y; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    v[x].push_back(y); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  vis = vector<bool>(n + 1, false); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  dfs(cap); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  long long count = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  long long flag = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  set<long long>::iterator it; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 39 slow_hit_count: 2334, fast_hit_count: 3 */
    if (!vis[i]) { /* line 40 slow_hit_count: 2333, fast_hit_count: 2 */
      s.insert(i); /* line 41 slow_hit_count: 2331, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 44 slow_hit_count: 2334, fast_hit_count: 3 */
    if (s.find(i) != s.end()) { /* line 45 slow_hit_count: 2333, fast_hit_count: 2 */
      vis = vector<bool>(n + 1, false); /* line 46 slow_hit_count: 2331, fast_hit_count: 0 */
      dfs(i); /* line 47 slow_hit_count: 2331, fast_hit_count: 0 */
      for (int j = 1; j <= n; j++) { /* line 48 slow_hit_count: 5440554, fast_hit_count: 0 */
        if (vis[j] == 1 && i != j && s.find(j) != s.end()) { /* line 49 slow_hit_count: 5438223, fast_hit_count: 0 */
          s.erase(j); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  cout << s.size() << endl; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C++ code, let's follow the two phases outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts for the fast and slow inputs, we observe the following:

1. **DFS Function:**
   - Line 18 (`void dfs(long long cur)`) has 2333 hits in the slow input and only 2 hits in the fast input.
   - Lines 19 and 25 within the DFS function are also hit 2333 times during the slow run, indicating a significant amount of time spent in this function for the slow input.

2. **Looping Over Cities:**
   - Lines 39 and 44 are hit 2334 times in the slow input compared to just 3 times for the fast input. This indicates a potentially expensive loop when `n` is large.

3. **Nested Loop and Set Operations:**
   - Line 48 and line 49 show extremely high hit counts (5,440,554 for line 48 and 5,438,223 for line 49) in the slow run, which suggests that the nested loop and set operations are particularly costly.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **High City Count with Sparse Roads:**
   - Natural Language Description: "When the number of cities `n` is large and the number of roads `m` is very small, causing many cities to be unreachable from the capital, the program tends to slow down significantly. This leads to repeated DFS calls and large nested loops processing."
   - Explanation: With `n` large and `m` small, the initial DFS from the capital will not mark many cities as visited. This leads to many additional DFS calls in subsequent loops, significantly increasing execution time.

2. **Repeated DFS on Unreachable Cities:**
   - Natural Language Description: "If a substantial portion of cities cannot be reached from the capital, and there are numerous DFS re-evaluations to mark cities as visited, the execution becomes expensive."
   - Explanation: For each unvisited city, the program resets the `vis` array and re-runs DFS on each unvisited city. This repeats for possibly every city, which is computationally intensive.

3. **Large Nested Loops with Set Operations:**
   - Natural Language Description: "Excessive nested loops over city indices combined with frequent set operations can degrade performance when few roads are available to connect cities."
   - Explanation: The nested loop checks every city pair for reachability using DFS and set operations, which incurs significant overhead with increased city count and limited road connectivity.

### Conclusion

These invariants indicate that the primary performance bottlenecks arise from inefficient handling of large graphs with sparse connectivity. The program struggles when there are many cities but few roads, leading to repeated DFS traversals and costly nested operations. Addressing these inefficiencies would involve optimizing the DFS calls and potentially restructuring the graph traversal logic to better handle sparse graphs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language invariants derived previously into C++ checker code.

1. **Invariant: High City Count with Sparse Roads**
   - Condition: Large `n` with very small `m` leading to sparse connectivity.
   
   ```cpp
   void check_sparse_road_invariant(long long n, long long m) {
       if (n > 1000 && m < n / 10) {  // Thresholds are set based on sparse connectivity concerns
           cerr << "Warning: Performance bottleneck condition triggered - high city count with sparse roads!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Repeated DFS on Unreachable Cities**
   - Condition: Many cities remain unvisited after initial DFS from the capital.
   
   ```cpp
   void check_unreachable_cities_invariant(const vector<bool>& vis) {
       long long unvisited_count = count(vis.begin() + 1, vis.end(), false);
       if (unvisited_count > vis.size() / 2) {  // More than half of the cities remain unvisited
           cerr << "Warning: Performance bottleneck condition triggered - multiple unreachable cities!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Large Nested Loops with Set Operations**
   - Condition: The nested loops with set operations are triggered repeatedly for a large number of cities.
   
   ```cpp
   void check_nested_loops_invariant(long long n, const set<long long>& s) {
       if (s.size() > n / 5) {  // If the set contains a significant portion of the cities
           cerr << "Warning: Performance bottleneck condition triggered - excessive nested loops with set operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Let's integrate these checkers into the provided C++ code at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_sparse_road_invariant(long long n, long long m) {
    if (n > 1000 && m < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high city count with sparse roads!" << endl;
        abort();
    }
}

void check_unreachable_cities_invariant(const vector<bool>& vis) {
    long long unvisited_count = count(vis.begin() + 1, vis.end(), false);
    if (unvisited_count > vis.size() / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - multiple unreachable cities!" << endl;
        abort();
    }
}

void check_nested_loops_invariant(long long n, const set<long long>& s) {
    if (s.size() > n / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loops with set operations!" << endl;
        abort();
    }
}

vector<long long> v[5001];
set<long long> s;
long long n, m, cap;
vector<bool> vis;

void dfs(long long cur) {
    vis[cur] = true;
    for (long long adj : v[cur]) {
        if (!vis[adj]) {
            dfs(adj);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
    cin >> n >> m >> cap;
    
    // Checking for sparse road invariant immediately after reading inputs
    check_sparse_road_invariant(n, m);
    
    long long x, y;
    for (int i = 0; i < m; i++) {
        cin >> x >> y;
        v[x].push_back(y);
    }
    vis = vector<bool>(n + 1, false);
    dfs(cap);
    
    // Check for unreachable cities after initial DFS
    check_unreachable_cities_invariant(vis);
    
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            s.insert(i);
        }
    }
    
    for (int i = 1; i <= n; i++) {
        if (s.find(i) != s.end()) {
            vis = vector<bool>(n + 1, false);
            dfs(i);
            for (int j = 1; j <= n; j++) {
                if (vis[j] == 1 && i != j && s.find(j) != s.end()) {
                    s.erase(j);
                }
            }
        }
    }
    
    // Check nested loops invariant right before the final output
    check_nested_loops_invariant(n, s);
    
    cout << s.size() << endl;
}
```

### Explanation

- **Sparse Road Invariant:** Placed right after the input is read to catch immediate issues with sparse connectivity.
- **Unreachable Cities Invariant:** Placed after the initial DFS to determine if a significant portion remains unvisited.
- **Nested Loops Invariant:** Placed before the final output to assess the load due to nested loops and set operations. 

These checks ensure that the program immediately aborts if it detects a condition likely to lead to performance degradation as per the previous analysis.

