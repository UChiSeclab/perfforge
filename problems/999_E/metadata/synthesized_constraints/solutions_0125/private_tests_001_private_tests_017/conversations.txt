system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool pos[5001];
vector<int> susedi[5001];
vector<int> novi[5001];
queue<int> ent;
vector<pair<int, int> > iztr;
int howmany(int s) {
  while (ent.empty() == false) {
    ent.pop();
  }
  int br = 1, a = 0, b = 0, otg = 0;
  bool moipos[5001];
  for (int i = 0; i < 5001; i++) {
    moipos[i] = false;
  }
  ent.push(s);
  moipos[s] = true;
  while (br > 0) {
    a = ent.front();
    ent.pop();
    br--;
    for (int i = 0; i < susedi[a].size(); i++) {
      b = susedi[a][i];
      if (moipos[b] == false) {
        moipos[b] = true;
        if (pos[b] == false) {
          otg++;
          novi[s].push_back(b);
        }
        ent.push(b);
        br++;
      }
    }
  }
  return otg;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m, s, a = 0, b = 0, br = 1, otg = 0;
  cin >> n >> m >> s;
  for (int i = 0; i < m; i++) {
    cin >> a >> b;
    susedi[a].push_back(b);
  }
  ent.push(s);
  pos[s] = true;
  while (br > 0) {
    a = ent.front();
    ent.pop();
    br--;
    for (int i = 0; i < susedi[a].size(); i++) {
      b = susedi[a][i];
      if (pos[b] == false) {
        pos[b] = true;
        ent.push(b);
        br++;
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    if (pos[i] == false) {
      while (ent.empty() == false) {
        ent.pop();
      }
      a = howmany(i);
      iztr.push_back({a, i});
    }
  }
  sort(iztr.begin(), iztr.end());
  for (int i = iztr.size() - 1; i >= 0; i--) {
    a = iztr[i].second;
    if (pos[a] == false) {
      pos[a] = true;
      otg++;
      for (int j = 0; j < novi[a].size(); j++) {
        b = novi[a][j];
        if (pos[b] == false) {
          pos[b] = true;
        }
      }
    }
  }
  cout << otg << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2333 1 1
1 2


(G.2) Fast Input

2 1 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool pos[5001]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> susedi[5001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> novi[5001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
queue<int> ent; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > iztr; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int howmany(int s) { /* line 8 slow_hit_count: 2331, fast_hit_count: 0 */
  while (ent.empty() == false) { /* line 9 slow_hit_count: 2331, fast_hit_count: 0 */
    ent.pop(); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int br = 1, a = 0, b = 0, otg = 0; /* line 12 slow_hit_count: 2331, fast_hit_count: 0 */
  bool moipos[5001]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 5001; i++) { /* line 14 slow_hit_count: 11659662, fast_hit_count: 0 */
    moipos[i] = false; /* line 15 slow_hit_count: 11657331, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  ent.push(s); /* line 17 slow_hit_count: 2331, fast_hit_count: 0 */
  moipos[s] = true; /* line 18 slow_hit_count: 2331, fast_hit_count: 0 */
  while (br > 0) { /* line 19 slow_hit_count: 4662, fast_hit_count: 0 */
    a = ent.front(); /* line 20 slow_hit_count: 2331, fast_hit_count: 0 */
    ent.pop(); /* line 21 slow_hit_count: 2331, fast_hit_count: 0 */
    br--; /* line 22 slow_hit_count: 2331, fast_hit_count: 0 */
    for (int i = 0; i < susedi[a].size(); i++) { /* line 23 slow_hit_count: 2331, fast_hit_count: 0 */
      b = susedi[a][i]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      if (moipos[b] == false) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        moipos[b] = true; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        if (pos[b] == false) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
          otg++; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
          novi[s].push_back(b); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        ent.push(b); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        br++; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return otg; /* line 36 slow_hit_count: 2331, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, s, a = 0, b = 0, br = 1, otg = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> s; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a >> b; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    susedi[a].push_back(b); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  ent.push(s); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  pos[s] = true; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  while (br > 0) { /* line 49 slow_hit_count: 3, fast_hit_count: 3 */
    a = ent.front(); /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
    ent.pop(); /* line 51 slow_hit_count: 2, fast_hit_count: 2 */
    br--; /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
    for (int i = 0; i < susedi[a].size(); i++) { /* line 53 slow_hit_count: 3, fast_hit_count: 3 */
      b = susedi[a][i]; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
      if (pos[b] == false) { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
        pos[b] = true; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
        ent.push(b); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
        br++; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 62 slow_hit_count: 2334, fast_hit_count: 3 */
    if (pos[i] == false) { /* line 63 slow_hit_count: 2333, fast_hit_count: 2 */
      while (ent.empty() == false) { /* line 64 slow_hit_count: 2331, fast_hit_count: 0 */
        ent.pop(); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      a = howmany(i); /* line 67 slow_hit_count: 2331, fast_hit_count: 0 */
      iztr.push_back({a, i}); /* line 68 slow_hit_count: 2331, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  sort(iztr.begin(), iztr.end()); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = iztr.size() - 1; i >= 0; i--) { /* line 72 slow_hit_count: 2332, fast_hit_count: 1 */
    a = iztr[i].second; /* line 73 slow_hit_count: 2331, fast_hit_count: 0 */
    if (pos[a] == false) { /* line 74 slow_hit_count: 2331, fast_hit_count: 0 */
      pos[a] = true; /* line 75 slow_hit_count: 2331, fast_hit_count: 0 */
      otg++; /* line 76 slow_hit_count: 2331, fast_hit_count: 0 */
      for (int j = 0; j < novi[a].size(); j++) { /* line 77 slow_hit_count: 2331, fast_hit_count: 0 */
        b = novi[a][j]; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        if (pos[b] == false) { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
          pos[b] = true; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  cout << otg << "\n"; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 87 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data provided, the lines corresponding to the `howmany` function (`int howmany(int s)`) are hit significantly more during the slow input processing than the fast input. The main contributors to the slowdown are:

1. **Line 14-15 (Loop initializing `moipos` array):**
   - This loop runs 5001 iterations each time `howmany` is called, which is notably excessive.

2. **Line 19-23 (While loop processing the queue):**
   - This loop is dependent on the size of the queue, which seems to grow significantly larger with the slow input.

3. **Line 67 (Function Call: `a = howmany(i)`):**
   - The `howmany` function is called multiple times (2331 times), each contributing to the excessive loop operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies, here are the performance-characterizing invariants for the program:

1. **Large Number of Disconnected Nodes:**
   - When there is a large number of nodes that are not initially reachable from the capital, the `howmany` function is called multiple times, leading to repetitive and excessive initialization of arrays and queue operations.
   - **Invariant:** "If the graph contains a high number of nodes not initially reachable from the capital, performance may degrade due to repeated function calls and large initialization loops."

2. **Inefficient Initialization:**
   - The repeated initialization of the `moipos` array in every call to `howmany` becomes time-consuming, particularly when the function is invoked many times.
   - **Invariant:** "Reinitializing large arrays repeatedly in a function call can lead to performance bottlenecks, especially when the function is invoked numerous times for disconnected graph components."

3. **Excessive Queue Operations:**
   - The BFS-like loop inside `howmany` can become costly when processing a large set of nodes, especially when the queue's size grows significantly.
   - **Invariant:** "When numerous nodes are added to the BFS queue due to many disconnected components, the program may experience slowdowns due to extensive queue operations."

These invariants help describe the conditions under which the program experiences performance bottlenecks, focusing on the structure and connectivity of the graph rather than specific numerical values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.

What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?

New roads will also be one-way.

Input

The first line of input consists of three integers n, m and s (1 ≤ n ≤ 5000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n.

The following m lines contain roads: road i is given as a pair of cities u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i). For each pair of cities (u, v), there can be at most one road from u to v. Roads in opposite directions between a pair of cities are allowed (i.e. from u to v and from v to u).

Output

Print one integer — the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, print 0.

Examples

Input

9 9 1
1 2
1 3
2 3
1 5
5 6
6 1
1 8
9 8
7 1


Output

3


Input

5 4 5
1 2
2 3
3 4
4 1


Output

1

Note

The first example is illustrated by the following:

<image>

For example, you can add roads (6, 4), (7, 9), (1, 7) to make all the cities reachable from s = 1.

The second example is illustrated by the following:

<image>

In this example, you can add any one of the roads (5, 1), (5, 2), (5, 3), (5, 4) to make all the cities reachable from s = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Here are the runtime checkers for the previously derived performance-characterizing invariants:

1. **Checker for Large Number of Disconnected Nodes:**
   - This checks if a large number of nodes are not initially reachable from the capital.
   ```cpp
   void check_disconnected_nodes(int unreachableCount, int totalNodes) {
       if (unreachableCount > totalNodes / 2) { // Arbitrary threshold: more than half the nodes are unreachable
           cerr << "Warning: Potential performance bottleneck due to many unreachable nodes!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Inefficient Initialization:**
   - This checks for repeated initialization of large arrays.
   ```cpp
   void check_repeated_initialization(int callCount) {
       if (callCount > 1000) { // Arbitrarily chosen threshold based on performance insight
           cerr << "Warning: Performance bottleneck due to repeated large array initialization!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Excessive Queue Operations:**
   - This checks if the BFS queue processes a very large number of elements.
   ```cpp
   void check_excessive_queue_operations(int totalQueueOps) {
       if (totalQueueOps > 10000) { // Arbitrarily chosen threshold for excessive operations
           cerr << "Warning: Excessive queue operations detected, potential slowdown!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Below is the instrumented version of the original C++ code that includes performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

bool pos[5001];
vector<int> susedi[5001];
vector<int> novi[5001];
queue<int> ent;
vector<pair<int, int>> iztr;

void check_disconnected_nodes(int unreachableCount, int totalNodes) {
    if (unreachableCount > totalNodes / 2) { // Arbitrary threshold: more than half the nodes are unreachable
        cerr << "Warning: Potential performance bottleneck due to many unreachable nodes!" << endl;
        abort();
    }
}

void check_repeated_initialization(int callCount) {
    if (callCount > 1000) { // Arbitrarily chosen threshold based on performance insight
        cerr << "Warning: Performance bottleneck due to repeated large array initialization!" << endl;
        abort();
    }
}

void check_excessive_queue_operations(int totalQueueOps) {
    if (totalQueueOps > 10000) { // Arbitrarily chosen threshold for excessive operations
        cerr << "Warning: Excessive queue operations detected, potential slowdown!" << endl;
        abort();
    }
}

int howmany(int s) {
    while (ent.empty() == false) {
        ent.pop();
    }
    int br = 1, a = 0, b = 0, otg = 0;
    bool moipos[5001];
    for (int i = 0; i < 5001; i++) {
        moipos[i] = false;
    }
    ent.push(s);
    moipos[s] = true;
    int queueOperations = 0;
    while (br > 0) {
        a = ent.front();
        ent.pop();
        br--;
        for (int i = 0; i < susedi[a].size(); i++) {
            b = susedi[a][i];
            if (moipos[b] == false) {
                moipos[b] = true;
                if (pos[b] == false) {
                    otg++;
                    novi[s].push_back(b);
                }
                ent.push(b);
                br++;
                queueOperations++;
            }
        }
    }
    check_excessive_queue_operations(queueOperations);
    return otg;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, m, s, a = 0, b = 0, br = 1, otg = 0;
    cin >> n >> m >> s;

    for (int i = 0; i < m; i++) {
        cin >> a >> b;
        susedi[a].push_back(b);
    }

    ent.push(s);
    pos[s] = true;

    while (br > 0) {
        a = ent.front();
        ent.pop();
        br--;
        for (int i = 0; i < susedi[a].size(); i++) {
            b = susedi[a][i];
            if (pos[b] == false) {
                pos[b] = true;
                ent.push(b);
                br++;
            }
        }
    }

    int unreachableCount = 0;
    int howmanyCalls = 0;

    for (int i = 1; i <= n; i++) {
        if (pos[i] == false) {
            unreachableCount++;
            while (ent.empty() == false) {
                ent.pop();
            }
            a = howmany(i);
            iztr.push_back({a, i});
            howmanyCalls++;
            check_repeated_initialization(howmanyCalls);
        }
    }

    check_disconnected_nodes(unreachableCount, n);

    sort(iztr.begin(), iztr.end());

    for (int i = iztr.size() - 1; i >= 0; i--) {
        a = iztr[i].second;
        if (pos[a] == false) {
            pos[a] = true;
            otg++;
            for (int j = 0; j < novi[a].size(); j++) {
                b = novi[a][j];
                if (pos[b] == false) {
                    pos[b] = true;
                }
            }
        }
    }

    cout << otg << "\n";

    return 0;
}
```

### Comments on the Integrated Checkers:

- **`check_disconnected_nodes`:** This is placed after counting the unreachable nodes to detect if a significant number of nodes are unreachable.
- **`check_repeated_initialization`:** This is inserted within the loop that calls `howmany` to ensure it’s not called excessively.
- **`check_excessive_queue_operations`:** This is used within `howmany` to detect when queue operation counts become too high.

These checkers help detect when the program enters inefficient execution phases, aiding in debugging and performance testing.

