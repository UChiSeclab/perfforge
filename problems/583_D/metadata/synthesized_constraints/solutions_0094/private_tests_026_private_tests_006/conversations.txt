system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = 1e9 + 7;
long long n, m, i, j, k, l, r, a[1001], dp1[100001], dp2[100001], d[100001];
long long t[301];
void solve() {
  vector<long long> dp;
  dp.push_back(0);
  for (int i = 0; i < n * m; i++) {
    long long l = 0, r = dp.size() - 1;
    while (l < r) {
      long long w = (l + r) / 2 + (l + r) % 2;
      if (dp[w] <= a[i % n])
        l = w;
      else
        r = w - 1;
    }
    if (l == dp.size() - 1)
      dp.push_back(a[i % n]);
    else
      dp[l + 1] = min(dp[l + 1], a[i % n]);
  }
  cout << dp.size() - 1 << "\n";
  exit(0);
}
void build(long long h, long long l, long long r) {
  if (l == r) {
    d[h] = l;
    return;
  }
  long long w = (l + r) / 2;
  build(h * 2, l, w);
  build(h * 2 + 1, w + 1, r);
  if (t[d[h * 2]] < t[d[h * 2 + 1]])
    d[h] = d[h * 2 + 1];
  else
    d[h] = d[h * 2];
}
long long get(long long h, long long l, long long r, long long x, long long y) {
  if (x > y) return 0;
  if (l == x && y == r) return d[h];
  long long w = (l + r) / 2;
  long long o1 = get(h * 2, l, w, x, min(y, w)),
            o2 = get(h * 2 + 1, w + 1, r, max(x, w + 1), y);
  if (t[o1] > t[o2])
    return o1;
  else
    return o2;
}
int main() {
  long long ans = 0;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    t[a[i]]++;
    ans = max(ans, t[a[i]] * m);
  }
  if (m < n * 2) solve();
  build(1, 1, 300);
  if (m == 1) solve();
  vector<long long> v1, v2;
  v1.push_back(0);
  v2.push_back(0);
  for (int j = 0; j < n; j++)
    for (int i = 0; i < n; i++) v1.push_back(a[i]);
  for (int j = 0; j < n; j++)
    for (int i = 0; i < n; i++) v2.push_back(a[i]);
  m -= n * 2;
  m = max(m, 0ll);
  for (int i = 1; i <= n * n; i++) {
    dp1[i] = 1;
    for (int j = i - 1; j > 0; j--)
      if (v1[j] <= v1[i]) {
        dp1[i] = max(dp1[i], dp1[j] + 1);
      }
  }
  for (int i = n * n; i > 0; i--) {
    dp2[i] = 1;
    for (int j = i + 1; j <= n * n; j++)
      if (v2[j] >= v2[i]) dp2[i] = max(dp2[i], dp2[j] + 1);
  }
  for (int i = n * (n - 1); i <= n * n; i++)
    for (int j = 1; j <= n; j++)
      if (v1[i] <= v2[j]) {
        long long p = 0;
        for (int u = v1[i]; u <= v2[j]; u++)
          if (t[p] < t[u]) p = u;
        ans = max(dp1[i] + dp2[j] + t[p] * m, ans);
      }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 200
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 100
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, i, j, k, l, r, a[1001], dp1[100001], dp2[100001], d[100001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long t[301]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 6 slow_hit_count: 0, fast_hit_count: 1 */
  vector<long long> dp; /* line 7 slow_hit_count: 0, fast_hit_count: 1 */
  dp.push_back(0); /* line 8 slow_hit_count: 0, fast_hit_count: 1 */
  for (int i = 0; i < n * m; i++) { /* line 9 slow_hit_count: 0, fast_hit_count: 10001 */
    long long l = 0, r = dp.size() - 1; /* line 10 slow_hit_count: 0, fast_hit_count: 10000 */
    while (l < r) { /* line 11 slow_hit_count: 0, fast_hit_count: 72539 */
      long long w = (l + r) / 2 + (l + r) % 2; /* line 12 slow_hit_count: 0, fast_hit_count: 62539 */
      if (dp[w] <= a[i % n]) /* line 13 slow_hit_count: 0, fast_hit_count: 62539 */
        l = w; /* line 14 slow_hit_count: 0, fast_hit_count: 40725 */
      else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
        r = w - 1; /* line 16 slow_hit_count: 0, fast_hit_count: 21814 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (l == dp.size() - 1) /* line 18 slow_hit_count: 0, fast_hit_count: 10000 */
      dp.push_back(a[i % n]); /* line 19 slow_hit_count: 0, fast_hit_count: 150 */
    else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      dp[l + 1] = min(dp[l + 1], a[i % n]); /* line 21 slow_hit_count: 0, fast_hit_count: 9850 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp.size() - 1 << "\n"; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
  exit(0); /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void build(long long h, long long l, long long r) { /* line 26 slow_hit_count: 599, fast_hit_count: 0 */
  if (l == r) { /* line 27 slow_hit_count: 599, fast_hit_count: 0 */
    d[h] = l; /* line 28 slow_hit_count: 300, fast_hit_count: 0 */
    return; /* line 29 slow_hit_count: 300, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  long long w = (l + r) / 2; /* line 31 slow_hit_count: 299, fast_hit_count: 0 */
  build(h * 2, l, w); /* line 32 slow_hit_count: 299, fast_hit_count: 0 */
  build(h * 2 + 1, w + 1, r); /* line 33 slow_hit_count: 299, fast_hit_count: 0 */
  if (t[d[h * 2]] < t[d[h * 2 + 1]]) /* line 34 slow_hit_count: 299, fast_hit_count: 0 */
    d[h] = d[h * 2 + 1]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    d[h] = d[h * 2]; /* line 37 slow_hit_count: 299, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long get(long long h, long long l, long long r, long long x, long long y) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (l == x && y == r) return d[h]; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  long long w = (l + r) / 2; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  long long o1 = get(h * 2, l, w, x, min(y, w)), /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
            o2 = get(h * 2 + 1, w + 1, r, max(x, w + 1), y); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  if (t[o1] > t[o2]) /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return o1; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    return o2; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 53 slow_hit_count: 101, fast_hit_count: 101 */
    cin >> a[i]; /* line 54 slow_hit_count: 100, fast_hit_count: 100 */
    t[a[i]]++; /* line 55 slow_hit_count: 100, fast_hit_count: 100 */
    ans = max(ans, t[a[i]] * m); /* line 56 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  if (m < n * 2) solve(); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  build(1, 1, 300); /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
  if (m == 1) solve(); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  vector<long long> v1, v2; /* line 61 slow_hit_count: 2, fast_hit_count: 0 */
  v1.push_back(0); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  v2.push_back(0); /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
  for (int j = 0; j < n; j++) /* line 64 slow_hit_count: 101, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) v1.push_back(a[i]); /* line 65 slow_hit_count: 10100, fast_hit_count: 0 */
  for (int j = 0; j < n; j++) /* line 66 slow_hit_count: 101, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) v2.push_back(a[i]); /* line 67 slow_hit_count: 10100, fast_hit_count: 0 */
  m -= n * 2; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
  m = max(m, 0ll); /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n * n; i++) { /* line 70 slow_hit_count: 10001, fast_hit_count: 0 */
    dp1[i] = 1; /* line 71 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = i - 1; j > 0; j--) /* line 72 slow_hit_count: 50005000, fast_hit_count: 0 */
      if (v1[j] <= v1[i]) { /* line 73 slow_hit_count: 49995000, fast_hit_count: 0 */
        dp1[i] = max(dp1[i], dp1[j] + 1); /* line 74 slow_hit_count: 25002500, fast_hit_count: 0 */
      } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n * n; i > 0; i--) { /* line 77 slow_hit_count: 10001, fast_hit_count: 0 */
    dp2[i] = 1; /* line 78 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = i + 1; j <= n * n; j++) /* line 79 slow_hit_count: 50005000, fast_hit_count: 0 */
      if (v2[j] >= v2[i]) dp2[i] = max(dp2[i], dp2[j] + 1); /* line 80 slow_hit_count: 49995000, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n * (n - 1); i <= n * n; i++) /* line 82 slow_hit_count: 102, fast_hit_count: 0 */
    for (int j = 1; j <= n; j++) /* line 83 slow_hit_count: 10201, fast_hit_count: 0 */
      if (v1[i] <= v2[j]) { /* line 84 slow_hit_count: 10100, fast_hit_count: 0 */
        long long p = 0; /* line 85 slow_hit_count: 5149, fast_hit_count: 0 */
        for (int u = v1[i]; u <= v2[j]; u++) /* line 86 slow_hit_count: 181799, fast_hit_count: 0 */
          if (t[p] < t[u]) p = u; /* line 87 slow_hit_count: 176650, fast_hit_count: 0 */
        ans = max(dp1[i] + dp2[j] + t[p] * m, ans); /* line 88 slow_hit_count: 5149, fast_hit_count: 0 */
      } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 90 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 91 slow_hit_count: 1, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Comparison of Line-Level Hit Counts:**
   - The key difference between the slow and fast runs is the execution of the code after the `build()` function when `m >= n * 2`, indicating that the slow path is triggered in this scenario.
   - The slow input triggers the computation of `dp1` and `dp2` arrays, as well as the nested loops from line 70 to line 88, which have significantly higher hit counts compared to those in the fast run.

2. **Pinpoint Lines with High Hit Counts:**
   - Lines 70-74 and lines 77-80 have extremely high hit counts due to nested loops, suggesting inefficiencies in these segments.
   - Line 86, inside a nested loop, has a high hit count, indicating a potential performance bottleneck.

3. **Inference on Code Interaction:**
   - The nested loops and the repeated computations in the `dp1` and `dp2` arrays suggest the presence of dynamic programming or a similar strategy, leading to increased time complexity when n is large.
   - The logic involving `v1` and `v2` repeated appending and processing when `m` is large leads to computational overhead.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant Statements:**

   - **Invariant #1:** "When T is significantly larger than n, the program executes a large number of nested loop iterations, leading to a slowdown. Specifically, if T is such that m (equivalent to T in the input) is at least twice the size of n, it triggers additional computations that degrade performance."
     - This reflects how the condition `m >= n * 2` leads to further processing that is absent in the fast execution path.

   - **Invariant #2:** "The performance degrades notably when the program repeatedly processes large vectors through nested loops, especially when n is at its maximum constraint (100), causing each loop to iterate n^2 times, with additional time complexity induced by inner conditions."
     - This addresses the high-cost operations when `n` is large, particularly due to the operations on `v1` and `v2`.

   - **Invariant #3:** "If the length of the sequence to be constructed (`n * T`) is large enough to require multiple full passes through the array, the increased computational overhead can lead to slow performance, particularly when multiple nested loops are involved in calculating dynamic programming states."
     - This covers the repeated operations over `n * T` elements that significantly contribute to slow execution.
  
2. **Threshold Values and Input Patterns:**
   - The thresholds and conditions mentioned (such as `m >= n * 2`) are derived from problem constraints (`n <= 100`) and do not rely on specific input values but rather on their structural implications.
   - These invariants are aimed at guiding a fuzzer to identify potential slow paths by simulating scenarios where `T` is large relative to `n`.

By analyzing the performance characteristics, these conditions sufficiently capture the scenarios leading to performance degradation while adhering to problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets to implement the performance-characterizing invariants derived from the analysis.

1. **Invariant #1: When T is significantly larger than n.**
   ```cpp
   void check_large_T_vs_n(long long n, long long T) {
       if (T >= 2 * n) {
           cerr << "Warning: Performance bottleneck condition triggered - T is significantly larger than n!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Repeatedly processing large vectors through nested loops.**
   ```cpp
   void check_large_n(long long n) {
       if (n == 100) {
           cerr << "Warning: Performance bottleneck condition triggered - large n with nested loops!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Length of sequence involving multiple passes through the array.**
   ```cpp
   void check_large_sequence_computation(long long n, long long T) {
       if (n * T > 10000) { // This threshold is chosen based on complexity considerations
           cerr << "Warning: Performance bottleneck condition triggered - large sequence computation!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ code with the above checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = 1e9 + 7;
long long n, m, i, j, k, l, r, a[1001], dp1[100001], dp2[100001], d[100001];
long long t[301];

// Checker functions for performance invariants
void check_large_T_vs_n(long long n, long long T) {
    if (T >= 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - T is significantly larger than n!" << endl;
        abort();
    }
}

void check_large_n(long long n) {
    if (n == 100) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with nested loops!" << endl;
        abort();
    }
}

void check_large_sequence_computation(long long n, long long T) {
    if (n * T > 10000) { // This threshold is chosen based on complexity considerations
        cerr << "Warning: Performance bottleneck condition triggered - large sequence computation!" << endl;
        abort();
    }
}

void solve() {
    vector<long long> dp;
    dp.push_back(0);
    for (int i = 0; i < n * m; i++) {
        long long l = 0, r = dp.size() - 1;
        while (l < r) {
            long long w = (l + r) / 2 + (l + r) % 2;
            if (dp[w] <= a[i % n])
                l = w;
            else
                r = w - 1;
        }
        if (l == dp.size() - 1)
            dp.push_back(a[i % n]);
        else
            dp[l + 1] = min(dp[l + 1], a[i % n]);
    }
    cout << dp.size() - 1 << "\n";
    exit(0);
}

void build(long long h, long long l, long long r) {
    if (l == r) {
        d[h] = l;
        return;
    }
    long long w = (l + r) / 2;
    build(h * 2, l, w);
    build(h * 2 + 1, w + 1, r);
    if (t[d[h * 2]] < t[d[h * 2 + 1]])
        d[h] = d[h * 2 + 1];
    else
        d[h] = d[h * 2];
}

long long get(long long h, long long l, long long r, long long x, long long y) {
    if (x > y) return 0;
    if (l == x && y == r) return d[h];
    long long w = (l + r) / 2;
    long long o1 = get(h * 2, l, w, x, min(y, w)),
              o2 = get(h * 2 + 1, w + 1, r, max(x, w + 1), y);
    if (t[o1] > t[o2])
        return o1;
    else
        return o2;
}

int main() {
    long long ans = 0;
    cin >> n >> m;

    // Insert performance checks after reading input
    check_large_T_vs_n(n, m);
    check_large_n(n);
    check_large_sequence_computation(n, m); 

    for (int i = 0; i < n; i++) {
        cin >> a[i];
        t[a[i]]++;
        ans = max(ans, t[a[i]] * m);
    }
    if (m < n * 2) solve();
    build(1, 1, 300);
    if (m == 1) solve();
    vector<long long> v1, v2;
    v1.push_back(0);
    v2.push_back(0);
    for (int j = 0; j < n; j++)
        for (int i = 0; i < n; i++) v1.push_back(a[i]);
    for (int j = 0; j < n; j++)
        for (int i = 0; i < n; i++) v2.push_back(a[i]);
    m -= n * 2;
    m = max(m, 0ll);
    for (int i = 1; i <= n * n; i++) {
        dp1[i] = 1;
        for (int j = i - 1; j > 0; j--)
            if (v1[j] <= v1[i]) {
                dp1[i] = max(dp1[i], dp1[j] + 1);
            }
    }
    for (int i = n * n; i > 0; i--) {
        dp2[i] = 1;
        for (int j = i + 1; j <= n * n; j++)
            if (v2[j] >= v2[i]) dp2[i] = max(dp2[i], dp2[j] + 1);
    }
    for (int i = n * (n - 1); i <= n * n; i++)
        for (int j = 1; j <= n; j++)
            if (v1[i] <= v2[j]) {
                long long p = 0;
                for (int u = v1[i]; u <= v2[j]; u++)
                    if (t[p] < t[u]) p = u;
                ans = max(dp1[i] + dp2[j] + t[p] * m, ans);
            }
    cout << ans;
}
```

### Explanation of Integration

- **Check Placement:** The checks are placed after reading inputs (n, T) in `main()` since they relate to the conditions derived from these values and do not need to be inside the computationally heavy loops.
- **Comments:** Each check has a comment explaining its purpose, targeting specific bottleneck conditions identified during the analysis.

This integration ensures that the program warns the user about potential performance bottlenecks under the specified conditions, leveraging the structure and constraints of the problem.

