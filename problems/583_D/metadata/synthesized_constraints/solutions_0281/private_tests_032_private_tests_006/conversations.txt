system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gcd(long long a, long long b) {
  long long r;
  while (b != 0) {
    r = a % b;
    a = b;
    b = r;
  }
  return a;
}
long long lcm(long long a, long long b) { return a / gcd(a, b) * b; }
const int maxn = 110;
int n, t;
int a[maxn];
int cnt[3 * maxn];
int f[2 * maxn * maxn];
int d[2 * maxn * maxn];
int g[3 * maxn];
int calc(int h) {
  if (g[h] != -1) return g[h];
  int res = 0;
  memset(d, 0x3f, sizeof(d));
  for (int i = (0); i < (n * n); i++)
    if (a[i % n] >= h) {
      int k = upper_bound(d, d + n * n, a[i % n]) - d;
      d[k] = a[i % n];
      res = max(res, k + 1);
    }
  return g[h] = res;
}
void solve() {
  memset(cnt, 0, sizeof(cnt));
  memset(f, 0, sizeof(f));
  memset(g, -1, sizeof(g));
  scanf("%d%d", &n, &t);
  for (int i = (0); i < (n); i++) {
    scanf("%d", a + i);
    cnt[a[i]]++;
  }
  if (t <= 2 * n) {
    int ans = 0;
    memset(d, 0x3f, sizeof(d));
    for (int i = (0); i < (t * n); i++) {
      int k = upper_bound(d, d + n * n, a[i % n]) - d;
      d[k] = a[i % n];
      ans = max(ans, k + 1);
    }
    printf("%d", ans);
    return;
  }
  memset(d, 0x3f, sizeof(d));
  for (int i = (0); i < (n * n); i++) {
    int k = upper_bound(d, d + n * n, a[i % n]) - d;
    d[k] = a[i % n];
    f[i] = k + 1;
  }
  int ans = 0;
  for (int i = (n * n - n); i < (n * n); i++) {
    ans = max(ans, f[i] + (t - 2 * n) * cnt[a[i % n]] + calc(a[i % n]));
  }
  printf("%d", ans);
}
int main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 201
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 100
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long r; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (b != 0) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    r = a % b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    b = r; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long a, long long b) { return a / gcd(a, b) * b; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 110; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int n, t; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[3 * maxn]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int f[2 * maxn * maxn]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int d[2 * maxn * maxn]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int g[3 * maxn]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int calc(int h) { /* line 20 slow_hit_count: 100, fast_hit_count: 0 */
  if (g[h] != -1) return g[h]; /* line 21 slow_hit_count: 100, fast_hit_count: 0 */
  int res = 0; /* line 22 slow_hit_count: 100, fast_hit_count: 0 */
  memset(d, 0x3f, sizeof(d)); /* line 23 slow_hit_count: 100, fast_hit_count: 0 */
  for (int i = (0); i < (n * n); i++) /* line 24 slow_hit_count: 1000100, fast_hit_count: 0 */
    if (a[i % n] >= h) { /* line 25 slow_hit_count: 1000000, fast_hit_count: 0 */
      int k = upper_bound(d, d + n * n, a[i % n]) - d; /* line 26 slow_hit_count: 505000, fast_hit_count: 0 */
      d[k] = a[i % n]; /* line 27 slow_hit_count: 505000, fast_hit_count: 0 */
      res = max(res, k + 1); /* line 28 slow_hit_count: 505000, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return g[h] = res; /* line 30 slow_hit_count: 100, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  memset(cnt, 0, sizeof(cnt)); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  memset(f, 0, sizeof(f)); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  memset(g, -1, sizeof(g)); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &t); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (n); i++) { /* line 37 slow_hit_count: 101, fast_hit_count: 101 */
    scanf("%d", a + i); /* line 38 slow_hit_count: 100, fast_hit_count: 100 */
    cnt[a[i]]++; /* line 39 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (t <= 2 * n) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    int ans = 0; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
    memset(d, 0x3f, sizeof(d)); /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = (0); i < (t * n); i++) { /* line 44 slow_hit_count: 0, fast_hit_count: 10001 */
      int k = upper_bound(d, d + n * n, a[i % n]) - d; /* line 45 slow_hit_count: 0, fast_hit_count: 10000 */
      d[k] = a[i % n]; /* line 46 slow_hit_count: 0, fast_hit_count: 10000 */
      ans = max(ans, k + 1); /* line 47 slow_hit_count: 0, fast_hit_count: 10000 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d", ans); /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  memset(d, 0x3f, sizeof(d)); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (0); i < (n * n); i++) { /* line 53 slow_hit_count: 10001, fast_hit_count: 0 */
    int k = upper_bound(d, d + n * n, a[i % n]) - d; /* line 54 slow_hit_count: 10000, fast_hit_count: 0 */
    d[k] = a[i % n]; /* line 55 slow_hit_count: 10000, fast_hit_count: 0 */
    f[i] = k + 1; /* line 56 slow_hit_count: 10000, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (n * n - n); i < (n * n); i++) { /* line 59 slow_hit_count: 101, fast_hit_count: 0 */
    ans = max(ans, f[i] + (t - 2 * n) * cnt[a[i % n]] + calc(a[i % n])); /* line 60 slow_hit_count: 100, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", ans); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose and understand the performance bottlenecks in the provided C program, let's go through the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the fast and slow runs, we can pinpoint the lines that get significantly more hits under the slow input:

1. **Function `calc` (Lines 20-31)**:
   - This function is heavily involved during the slow run. It is called repeatedly (100 times) only in the slow input, especially due to the loop iterating `n * n` times (`10000` times for `n=100`).
   - Within `calc`, lines 24-28 show increased activity: the loop and conditions inside that loop perform a lot of calculations.

2. **Main Loop in `solve` Function (Lines 52-61)**:
   - For the slow input, line 53 executes `10000` times, and lines 54-56 are also hit `10000` times.
   - The use of `upper_bound` and updates to `d` suggest operations typical of dynamic programming or sequence management, which is computationally intensive.

3. **Line 60**:
   - This line is part of a loop running 100 times and is particularly expensive because it combines array operations with a call to `calc`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above findings and input structure, we can derive natural language statements explaining the conditions under which the program slows down:

1. **Increased Iteration due to High `n` and Moderate `t`**:
   - *Invariant*: "When `n` is close to its maximum (100) and `t` is moderately large but not enough to trigger the shortcut condition (where `t <= 2*n`), the program enters a slow path. This is because it performs `n*n` iterations for sequence calculations repeatedly."
   - **Reasoning**: The slow input case (`n=100`, `t=201`) does not satisfy the fast path condition (`t <= 2*n`), thus triggering the expensive computation paths.

2. **Repeated Calls to `calc`**:
   - *Invariant*: "If the count of unique elements in the sequence is high, resulting in `calc` being called frequently with different parameters, this can significantly slow down the process."
   - **Reasoning**: The `calc` function incurs a high number of iterations and operations when called often with varied values. The structure of the input array influences this call frequency.

3. **Extensive Use of `upper_bound`**:
   - *Invariant*: "The use of `upper_bound` over large arrays intensifies the slow path, especially when the sequence length (`n*n`) involves multiple checks using binary search logic across large segments."
   - **Reasoning**: Binary search (`upper_bound`) inside a loop iterating many times can compound the computational cost.

### Output Summary

- The program's performance degrades when `n` approaches the maximum limit and `t` is large enough not to take the optimized path (`t <= 2*n`).
- The repeated invocation of `calc` signifies potential inefficiencies, particularly due to the high number of unique elements that need individual assessments.
- The heavy use of binary search methods like `upper_bound` within loops iterating over large portions of the data structure contributes to slow execution.

These invariants help to highlight the circumstances under which the algorithm enters its computationally expensive paths, allowing for targeted optimizations or checks to avoid such scenarios in future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants in C++ and integrating them into the original code.

### Phase 3: Implementing the Invariants in C++

**Invariant 1: Increased Iteration due to High `n` and Moderate `t`**
```cpp
void check_iteration_invariant(int n, int t) {
    if (n == 100 && t > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered! High n and t causing excessive iterations." << endl;
        abort();
    }
}
```

**Invariant 2: Repeated Calls to `calc`**
```cpp
void check_calc_calls_invariant(int uniqueElementCount) {
    if (uniqueElementCount > 50) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered! Frequent calc calls due to high unique elements." << endl;
        abort();
    }
}
```

**Invariant 3: Extensive Use of `upper_bound`**
```cpp
void check_upper_bound_invariant(int n) {
    if (n == 100) {
        cerr << "Warning: Performance bottleneck condition triggered! Extensive use of upper_bound across large data segments." << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Code

We'll now integrate these checks into the original C++ program to ensure they trigger when the conditions for performance bottlenecks are met.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker implementations
void check_iteration_invariant(int n, int t) {
    if (n == 100 && t > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered! High n and t causing excessive iterations." << endl;
        abort();
    }
}

void check_calc_calls_invariant(int uniqueElementCount) {
    if (uniqueElementCount > 50) {
        cerr << "Warning: Performance bottleneck condition triggered! Frequent calc calls due to high unique elements." << endl;
        abort();
    }
}

void check_upper_bound_invariant(int n) {
    if (n == 100) {
        cerr << "Warning: Performance bottleneck condition triggered! Extensive use of upper_bound across large data segments." << endl;
        abort();
    }
}

// Original code
long long gcd(long long a, long long b) {
    long long r;
    while (b != 0) {
        r = a % b;
        a = b;
        b = r;
    }
    return a;
}

long long lcm(long long a, long long b) { return a / gcd(a, b) * b; }

const int maxn = 110;
int n, t;
int a[maxn];
int cnt[3 * maxn];
int f[2 * maxn * maxn];
int d[2 * maxn * maxn];
int g[3 * maxn];

int calc(int h) {
    if (g[h] != -1) return g[h];
    int res = 0;
    memset(d, 0x3f, sizeof(d));
    for (int i = 0; i < (n * n); i++)
        if (a[i % n] >= h) {
            int k = upper_bound(d, d + n * n, a[i % n]) - d;
            d[k] = a[i % n];
            res = max(res, k + 1);
        }
    return g[h] = res;
}

void solve() {
    memset(cnt, 0, sizeof(cnt));
    memset(f, 0, sizeof(f));
    memset(g, -1, sizeof(g));
    scanf("%d%d", &n, &t);
    for (int i = 0; i < n; i++) {
        scanf("%d", a + i);
        cnt[a[i]]++;
    }

    // Invoke the checkers after reading the input
    check_iteration_invariant(n, t);
    check_upper_bound_invariant(n);

    if (t <= 2 * n) {
        int ans = 0;
        memset(d, 0x3f, sizeof(d));
        for (int i = 0; i < (t * n); i++) {
            int k = upper_bound(d, d + n * n, a[i % n]) - d;
            d[k] = a[i % n];
            ans = max(ans, k + 1);
        }
        printf("%d", ans);
        return;
    }

    memset(d, 0x3f, sizeof(d));
    for (int i = 0; i < (n * n); i++) {
        int k = upper_bound(d, d + n * n, a[i % n]) - d;
        d[k] = a[i % n];
        f[i] = k + 1;
    }

    int ans = 0;
    int uniqueElementCount = 0; // To track unique elements
    for (int i = (n * n - n); i < (n * n); i++) {
        ans = max(ans, f[i] + (t - 2 * n) * cnt[a[i % n]] + calc(a[i % n]));
        uniqueElementCount++;
    }
    
    // Invoke the check for calc call frequency
    check_calc_calls_invariant(uniqueElementCount);

    printf("%d", ans);
}

int main() {
    solve();
    return 0;
}
```

**Explanation of Integration:**

- The checkers are added at strategic points:
  - After reading `n` and `t` to detect potential iteration issues with high `n` and moderate `t`.
  - Before computing results in loops to ensure frequent calls to `calc` with high unique element counts are checked.
  - Before operations using `upper_bound` to ensure excessive data manipulations are controlled.
  
These checks will help detect bottlenecks and abort execution when limits are exceeded, providing a warning message to help debugging and performance tuning.

