system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 105;
const int maxm = 305;
int c[maxm];
int a[maxn], b[maxn * maxn * 2];
int dp[maxm];
int suf[maxn * maxn], pre[maxn * maxn];
int main() {
  ios::sync_with_stdio(false);
  int n, t;
  int mx;
  int ans = 0;
  scanf("%d %d", &n, &t);
  for (int i = 1; i < n + 1; ++i) {
    scanf("%d", &a[i]);
    ++c[a[i]];
  }
  if (t <= n * 2) {
    for (int i = 1; i < n + 1; ++i) {
      int k = i;
      for (int j = 1; j < t + 1; ++j) {
        b[k] = a[i];
        k += n;
      }
    }
    int n_ = n * t;
    memset(dp, 0, sizeof(dp));
    for (int i = 1; i < n_ + 1; ++i) {
      mx = 0;
      for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]);
      pre[i] = ++mx;
      dp[b[i]] = mx;
    }
    for (int i = 1; i < n_ + 1; ++i) ans = max(ans, pre[i]);
    printf("%d\n", ans);
    return 0;
  }
  for (int i = 1; i < n + 1; ++i) {
    int k = i;
    for (int j = 1; j < n + 1; ++j) {
      b[k] = a[i];
      k += n;
    }
  }
  int n_ = n * n;
  memset(dp, 0, sizeof(dp));
  for (int i = 1; i < n_ + 1; ++i) {
    mx = 0;
    for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]);
    pre[i] = ++mx;
    dp[b[i]] = mx;
  }
  memset(dp, 0, sizeof(dp));
  for (int i = n_ + 1 - 1; i >= 1; --i) {
    mx = 0;
    for (int j = b[i]; j < maxm; ++j) mx = max(mx, dp[j]);
    suf[i] = ++mx;
    dp[b[i]] = mx;
  }
  int tmp, n2 = n + n;
  for (int i = 1; i < n + 1; ++i) {
    for (int j = 1; j < n + 1; ++j) {
      if (a[j] < a[i]) continue;
      tmp = pre[i + n_ - n] + suf[j] + c[a[i]] * (t - n2);
      ans = max(ans, tmp);
    }
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 201
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 100
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 105; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxm = 305; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int c[maxm]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn], b[maxn * maxn * 2]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dp[maxm]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int suf[maxn * maxn], pre[maxn * maxn]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n, t; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int mx; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &t); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n + 1; ++i) { /* line 15 slow_hit_count: 101, fast_hit_count: 101 */
    scanf("%d", &a[i]); /* line 16 slow_hit_count: 100, fast_hit_count: 100 */
    ++c[a[i]]; /* line 17 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (t <= n * 2) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i < n + 1; ++i) { /* line 20 slow_hit_count: 0, fast_hit_count: 101 */
      int k = i; /* line 21 slow_hit_count: 0, fast_hit_count: 100 */
      for (int j = 1; j < t + 1; ++j) { /* line 22 slow_hit_count: 0, fast_hit_count: 10100 */
        b[k] = a[i]; /* line 23 slow_hit_count: 0, fast_hit_count: 10000 */
        k += n; /* line 24 slow_hit_count: 0, fast_hit_count: 10000 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    int n_ = n * t; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    memset(dp, 0, sizeof(dp)); /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 1; i < n_ + 1; ++i) { /* line 29 slow_hit_count: 0, fast_hit_count: 10001 */
      mx = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 10000 */
      for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]); /* line 31 slow_hit_count: 0, fast_hit_count: 515000 */
      pre[i] = ++mx; /* line 32 slow_hit_count: 0, fast_hit_count: 10000 */
      dp[b[i]] = mx; /* line 33 slow_hit_count: 0, fast_hit_count: 10000 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i < n_ + 1; ++i) ans = max(ans, pre[i]); /* line 35 slow_hit_count: 0, fast_hit_count: 10001 */
    printf("%d\n", ans); /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < n + 1; ++i) { /* line 39 slow_hit_count: 101, fast_hit_count: 0 */
    int k = i; /* line 40 slow_hit_count: 100, fast_hit_count: 0 */
    for (int j = 1; j < n + 1; ++j) { /* line 41 slow_hit_count: 10100, fast_hit_count: 0 */
      b[k] = a[i]; /* line 42 slow_hit_count: 10000, fast_hit_count: 0 */
      k += n; /* line 43 slow_hit_count: 10000, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  int n_ = n * n; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  memset(dp, 0, sizeof(dp)); /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < n_ + 1; ++i) { /* line 48 slow_hit_count: 10001, fast_hit_count: 0 */
    mx = 0; /* line 49 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]); /* line 50 slow_hit_count: 515000, fast_hit_count: 0 */
    pre[i] = ++mx; /* line 51 slow_hit_count: 10000, fast_hit_count: 0 */
    dp[b[i]] = mx; /* line 52 slow_hit_count: 10000, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, 0, sizeof(dp)); /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = n_ + 1 - 1; i >= 1; --i) { /* line 55 slow_hit_count: 10001, fast_hit_count: 0 */
    mx = 0; /* line 56 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = b[i]; j < maxm; ++j) mx = max(mx, dp[j]); /* line 57 slow_hit_count: 2555000, fast_hit_count: 0 */
    suf[i] = ++mx; /* line 58 slow_hit_count: 10000, fast_hit_count: 0 */
    dp[b[i]] = mx; /* line 59 slow_hit_count: 10000, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  int tmp, n2 = n + n; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < n + 1; ++i) { /* line 62 slow_hit_count: 101, fast_hit_count: 0 */
    for (int j = 1; j < n + 1; ++j) { /* line 63 slow_hit_count: 10100, fast_hit_count: 0 */
      if (a[j] < a[i]) continue; /* line 64 slow_hit_count: 10000, fast_hit_count: 0 */
      tmp = pre[i + n_ - n] + suf[j] + c[a[i]] * (t - n2); /* line 65 slow_hit_count: 5050, fast_hit_count: 0 */
      ans = max(ans, tmp); /* line 66 slow_hit_count: 5050, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, let's proceed with the analysis in two phases as described.

### Phase 1: Identify Expensive or Inefficient Code Segments

By examining the hit count data, we observe the following:

1. **Line 19 to 38:** The conditional branch `if (t <= n * 2)` is only executed for the fast input, as `t` in the slow input is greater than `n * 2`. This branch avoids executing the complex logic that follows, leading to a faster execution.

2. **Lines 39 to 69:** These lines execute for the slow input and not for the fast input. This segment of code is responsible for the performance difference. Notably, two nested loops (lines 62 and 63) and the loops iterating over indices (lines 41 and 48) have high hit counts in the slow input. 

3. **Expensive Operations:**
   - **Lines 50 and 57:** These lines perform a loop through `b[i]` elements, which is costly when `b[i]` takes a large range of values. The inner loop in these lines contributes significantly to the execution time.
   - **Lines 62-66:** This double loop iterates over `n^2` elements, contributing to an elevated hit count for the slow input, where `t` significantly exceeds `n * 2`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants that explain the conditions under which the code slows down:

1. **Invariant 1: High `T` Value Increases Repetition**
   - Natural Language: "When the value of `T` significantly exceeds `2n`, the program enters a path where operations are repeated many times across larger constructed arrays, leading to increased execution time."

2. **Invariant 2: Nested Loop Complexity**
   - Natural Language: "If the array `a` is expanded into a much larger array `b` (size `n^2` or greater), and `b` is processed in nested loops, the computational complexity increases, causing slowdowns."

3. **Invariant 3: Costly Inner Loop Execution**
   - Natural Language: "When elements of the array `b` cover a wide range, the inner loop operations over this range become costly, exacerbating performance issues for larger `T` values."

4. **Invariant 4: Sequential Processing Over Large Data**
   - Natural Language: "If `t` is much larger than `2n`, creating a large dataset and then processing it sequentially with nested loops can cause the program to execute slowly due to excessive redundant computations."

These invariants help capture the principal conditions contributing to the slowdown, adhering to the constraints that `n` is relatively small but `T` can be very large, highlighting the inefficiencies when handling large repetitive data.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker functions based on the previously derived performance-characterizing invariants:

1. **Invariant 1: High `T` Value Increases Repetition**
   - This invariant is to check if `T` significantly exceeds `2n`. If true, it indicates a potential performance bottleneck.

   ```cpp
   void check_t_invariance(int t, int n) {
       if (t > 2 * n) {
           cerr << "Warning: Performance bottleneck condition triggered - T is significantly larger than 2n!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Nested Loop Complexity**
   - This invariant checks if array `b` is constructed with a size that might cause inefficiency in nested loops due to large size.

   ```cpp
   void check_nested_loop_complexity(int n, int t) {
       int b_size = n * n; // Size of b in the worst case path
       if (b_size > 10000) { // Arbitrary threshold considering constraints
           cerr << "Warning: Performance bottleneck condition triggered - potential complexity due to large constructed array!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Costly Inner Loop Execution**
   - We check for operations over a wide range of elements that can be costly, based on the operations in the loop.

   ```cpp
   void check_inner_loop_cost(int max_elem) {
       if (max_elem >= 300) { // Based on max possible ai value considering constraints
           cerr << "Warning: Performance bottleneck condition triggered - costly operations over wide range in loop!" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Sequential Processing Over Large Data**
   - Checks if there are signs of excessive computation due to large data processing.

   ```cpp
   void check_sequential_processing(int t, int n) {
       if (t > 5 * n) { // Arbitrary threshold to detect excessive processing
           cerr << "Warning: Performance bottleneck condition triggered - excessive sequential processing for large T!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Functions into the Original Program

Now, we integrate these checks into the original C++ code. Here is the instrumented C++ program with checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 105;
const int maxm = 305;
int c[maxm];
int a[maxn], b[maxn * maxn * 2];
int dp[maxm];
int suf[maxn * maxn], pre[maxn * maxn];

void check_t_invariance(int t, int n) {
    if (t > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - T is significantly larger than 2n!" << endl;
        abort();
    }
}

void check_nested_loop_complexity(int n, int t) {
    int b_size = n * n; // Size of b in the worst case path
    if (b_size > 10000) { // Arbitrary threshold considering constraints
        cerr << "Warning: Performance bottleneck condition triggered - potential complexity due to large constructed array!" << endl;
        abort();
    }
}

void check_inner_loop_cost(int max_elem) {
    if (max_elem >= 300) {
        cerr << "Warning: Performance bottleneck condition triggered - costly operations over wide range in loop!" << endl;
        abort();
    }
}

void check_sequential_processing(int t, int n) {
    if (t > 5 * n) { // Arbitrary threshold to detect excessive processing
        cerr << "Warning: Performance bottleneck condition triggered - excessive sequential processing for large T!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    int n, t;
    int mx;
    int ans = 0;
    scanf("%d %d", &n, &t);

    // Insert check for invariants
    check_t_invariance(t, n);
    check_nested_loop_complexity(n, t);
    check_sequential_processing(t, n);

    for (int i = 1; i < n + 1; ++i) {
        scanf("%d", &a[i]);
        ++c[a[i]];
    }

    int max_element = *max_element(a + 1, a + n + 1);
    check_inner_loop_cost(max_element);

    if (t <= n * 2) {
        for (int i = 1; i < n + 1; ++i) {
            int k = i;
            for (int j = 1; j < t + 1; ++j) {
                b[k] = a[i];
                k += n;
            }
        }
        int n_ = n * t;
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i < n_ + 1; ++i) {
            mx = 0;
            for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]);
            pre[i] = ++mx;
            dp[b[i]] = mx;
        }
        for (int i = 1; i < n_ + 1; ++i) ans = max(ans, pre[i]);
        printf("%d\n", ans);
        return 0;
    }

    for (int i = 1; i < n + 1; ++i) {
        int k = i;
        for (int j = 1; j < n + 1; ++j) {
            b[k] = a[i];
            k += n;
        }
    }
    int n_ = n * n;
    memset(dp, 0, sizeof(dp));
    for (int i = 1; i < n_ + 1; ++i) {
        mx = 0;
        for (int j = 1; j < b[i] + 1; ++j) mx = max(mx, dp[j]);
        pre[i] = ++mx;
        dp[b[i]] = mx;
    }
    memset(dp, 0, sizeof(dp));
    for (int i = n_ + 1 - 1; i >= 1; --i) {
        mx = 0;
        for (int j = b[i]; j < maxm; ++j) mx = max(mx, dp[j]);
        suf[i] = ++mx;
        dp[b[i]] = mx;
    }
    int tmp, n2 = n + n;
    for (int i = 1; i < n + 1; ++i) {
        for (int j = 1; j < n + 1; ++j) {
            if (a[j] < a[i]) continue;
            tmp = pre[i + n_ - n] + suf[j] + c[a[i]] * (t - n2);
            ans = max(ans, tmp);
        }
    }
    printf("%d\n", ans);
    return 0;
}
```

### Explanation of Code Insertions

- **`check_t_invariance(t, n);`**: This is placed early after reading the inputs to catch cases where `T` is excessively large relative to `n`.
- **`check_nested_loop_complexity(n, t);`**: Ensures that `b` is not too large, thus avoiding excessive nested loop complexities.
- **`check_inner_loop_cost(max_element);`**: Checks if any costly operations are required based on the range of values. After reading the input array, it determines if the elements are causing excessive looping.
- **`check_sequential_processing(t, n);`**: Verifies that the processing size does not become excessive before proceeding with execution.

These checks should help identify runtime conditions that could lead to performance bottlenecks.

