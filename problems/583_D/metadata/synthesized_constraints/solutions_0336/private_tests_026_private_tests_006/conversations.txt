system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, T;
int a[100005];
int b[100005];
int cnt[1000];
int dp[400];
int dp2[400];
int ans[400];
int main() {
  scanf("%d%d", &n, &T);
  for (int i = 0; i < n; i++) scanf("%d", &a[i]), b[i] = a[i], cnt[a[i]]++;
  int id = n;
  int sz = n * min(n, T);
  for (int i = n; i < sz; i++) a[id] = a[id - n], id++;
  int sz2 = n * min(n, max(0, T - n));
  id = n;
  for (int i = n; i < sz2; i++) b[id] = b[id - n], id++;
  int last = max(0, T - 2 * n);
  for (int i = 0; i < sz; i++) {
    int ma = 0;
    for (int j = 0; j <= a[i]; j++) ma = max(ma, dp[j]);
    dp[a[i]] = max(dp[a[i]], ma + 1);
  }
  for (int i = sz2 - 1; i >= 0; i--) {
    int ma = 0;
    for (int j = b[i]; j <= 300; j++) ma = max(ma, dp2[j]);
    dp2[b[i]] = max(dp2[b[i]], ma + 1);
  }
  int ma = 0;
  for (int i = 0; i <= 300; i++) {
    ma = max(ma, dp[i]);
    ans[i] = ma + cnt[i] * last;
  }
  ma = 0;
  int res = 0;
  for (int i = 300; i >= 0; i--) {
    ma = max(ma, dp2[i]);
    res = max(res, ans[i] + ma);
  }
  cout << res << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 200
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 100
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, T; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[100005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int b[100005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[1000]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dp[400]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int dp2[400]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int ans[400]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &T); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d", &a[i]), b[i] = a[i], cnt[a[i]]++; /* line 12 slow_hit_count: 101, fast_hit_count: 101 */
  int id = n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int sz = n * min(n, T); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i < sz; i++) a[id] = a[id - n], id++; /* line 15 slow_hit_count: 9901, fast_hit_count: 9901 */
  int sz2 = n * min(n, max(0, T - n)); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  id = n; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i < sz2; i++) b[id] = b[id - n], id++; /* line 18 slow_hit_count: 9901, fast_hit_count: 1 */
  int last = max(0, T - 2 * n); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < sz; i++) { /* line 20 slow_hit_count: 10001, fast_hit_count: 10001 */
    int ma = 0; /* line 21 slow_hit_count: 10000, fast_hit_count: 10000 */
    for (int j = 0; j <= a[i]; j++) ma = max(ma, dp[j]); /* line 22 slow_hit_count: 525000, fast_hit_count: 525000 */
    dp[a[i]] = max(dp[a[i]], ma + 1); /* line 23 slow_hit_count: 10000, fast_hit_count: 10000 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = sz2 - 1; i >= 0; i--) { /* line 25 slow_hit_count: 10001, fast_hit_count: 1 */
    int ma = 0; /* line 26 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = b[i]; j <= 300; j++) ma = max(ma, dp2[j]); /* line 27 slow_hit_count: 2515000, fast_hit_count: 0 */
    dp2[b[i]] = max(dp2[b[i]], ma + 1); /* line 28 slow_hit_count: 10000, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int ma = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 300; i++) { /* line 31 slow_hit_count: 302, fast_hit_count: 302 */
    ma = max(ma, dp[i]); /* line 32 slow_hit_count: 301, fast_hit_count: 301 */
    ans[i] = ma + cnt[i] * last; /* line 33 slow_hit_count: 301, fast_hit_count: 301 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  ma = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  int res = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 300; i >= 0; i--) { /* line 37 slow_hit_count: 302, fast_hit_count: 302 */
    ma = max(ma, dp2[i]); /* line 38 slow_hit_count: 301, fast_hit_count: 301 */
    res = max(res, ans[i] + ma); /* line 39 slow_hit_count: 301, fast_hit_count: 301 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The main difference in hit counts between the slow and fast input occurs in two main places:
     - **Line 18**: `for (int i = n; i < sz2; i++) b[id] = b[id - n], id++;` shows a significant difference with 9901 hits for slow input versus 1 hit for fast input.
     - **Lines 25-28**: The loop starting at line 25 has 10001 hits for the slow input versus 1 hit for the fast input.
     - **Line 27**: `for (int j = b[i]; j <= 300; j++) ma = max(ma, dp2[j]);` has 2,515,000 hits for slow input versus 0 for fast.

2. **Inferred Interactions**:
   - The slow input case causes an additional copying loop (line 18), which duplicates the input array `b` based on `sz2 = n * min(n, max(0, T - n))`. This is effectively a workaround for ensuring `b` is large enough to handle the later backward loop.
   - The nested loop in line 27 runs significantly more times in the slow case due to a larger `sz2` implying a more substantial search over values `j`, leading to a high number of iterations inside this nested loop.

3. **Data Structure and Loop Interaction**:
   - The size of `b` and later operations on `dp2` depend heavily on the `T` parameter when `T` is significantly larger than `n`, which amplifies the nested loop's cost on line 27.
   - The condition `T - n > 0` leads to further complexity added by backward propagation in line 25 onwards, resulting in a more extensive examination of potential sequences in descending order.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Condition about `T` and Redundant Array Construction**:
   - **Natural Language Description**: "If `T` is significantly greater than `n`, the program may generate redundant copies of the input array that increase memory usage, leading to extensive backward processing."
   - **Threshold Suggestion**: The critical condition appears when `T - n` is a large positive value, leading to the `for` loop on line 18 being extensively executed.

2. **Inefficient Nested Loop on `dp2` Array**:
   - **Natural Language Description**: "If the nested backward loop (due to larger `T`) processes a large number of elements, especially when `T` significantly exceeds `n`, the program can slow down due to numerous redundant iterations."
   - **Threshold Suggestion**: This occurs notably with `sz2` becoming large, suggesting careful monitoring of `T - n` values and the ensuing loop size.

3. **Memory and Computation Cost from Backward Looping**:
   - **Natural Language Description**: "When `T` is much larger than `n`, the cost of maintaining backward dynamic programming states (`dp2`) becomes high, especially with non-decreasing sequence conditions leading to repeated maximum value calculations."
   - **Threshold Suggestion**: This is closely tied to the `T` parameter; it becomes costly where `T` is considerably larger than `2n`, prompting unnecessary iterations over extended memory allocations.

By abstracting these conditions and preparing for potential slow scenarios, developers and fuzzers can better identify and mitigate areas in the code that need optimization relative to their input size constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's implement the conditions derived from the performance-characterizing invariants in C++ using the provided template.

1. **Check for Large `T` Leading to Redundant Array Operations**:
   - **Invariant**: "If `T` is significantly greater than `n`, the program may generate redundant copies of the input array that increase memory usage, leading to extensive backward processing."

```cpp
void check_redundant_array_operations(int n, int T) {
    if (T > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - Redundant array operations due to large T." << endl;
        abort();
    }
}
```

2. **Inefficient Nested Loop on `dp2` Array**:
   - **Invariant**: "If the nested backward loop (due to larger `T`) processes a large number of elements, especially when `T` significantly exceeds `n`, the program can slow down due to numerous redundant iterations."

```cpp
void check_inefficient_nested_loop(int n, int T, int sz2) {
    if (sz2 > n * n) {
        cerr << "Warning: Performance bottleneck condition triggered - Inefficient nested loop due to large sz2." << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original C++ Program

Now, we will integrate these checker functions into the original C++ program, placing them at appropriate points in the code.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, T;
int a[100005];
int b[100005];
int cnt[1000];
int dp[400];
int dp2[400];
int ans[400];

// Checker functions to identify performance bottlenecks
void check_redundant_array_operations(int n, int T) {
    if (T > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - Redundant array operations due to large T." << endl;
        abort();
    }
}

void check_inefficient_nested_loop(int n, int T, int sz2) {
    if (sz2 > n * n) {
        cerr << "Warning: Performance bottleneck condition triggered - Inefficient nested loop due to large sz2." << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &T);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]), b[i] = a[i], cnt[a[i]]++;

    // Checking for redundant array operations
    check_redundant_array_operations(n, T);

    int id = n;
    int sz = n * min(n, T);
    for (int i = n; i < sz; i++) a[id] = a[id - n], id++;
    
    int sz2 = n * min(n, max(0, T - n));
    
    // Checking for inefficient nested loop
    check_inefficient_nested_loop(n, T, sz2);

    id = n;
    for (int i = n; i < sz2; i++) b[id] = b[id - n], id++;
    
    int last = max(0, T - 2 * n);
    for (int i = 0; i < sz; i++) {
        int ma = 0;
        for (int j = 0; j <= a[i]; j++) ma = max(ma, dp[j]);
        dp[a[i]] = max(dp[a[i]], ma + 1);
    }
    for (int i = sz2 - 1; i >= 0; i--) {
        int ma = 0;
        for (int j = b[i]; j <= 300; j++) ma = max(ma, dp2[j]);
        dp2[b[i]] = max(dp2[b[i]], ma + 1);
    }
    int ma = 0;
    for (int i = 0; i <= 300; i++) {
        ma = max(ma, dp[i]);
        ans[i] = ma + cnt[i] * last;
    }
    ma = 0;
    int res = 0;
    for (int i = 300; i >= 0; i--) {
        ma = max(ma, dp2[i]);
        res = max(res, ans[i] + ma);
    }
    cout << res << endl;
    return 0;
}
```

### Explanation of Integration

- **Placement of Checks**: The checks are placed immediately after reading inputs and before executing the main loops responsible for potential slow performance. This ensures we can detect issues early without adding overhead inside tight loops.
- **Checker Functions**: These functions encapsulate the logic for detecting when performance may degrade based on our earlier analysis. They print a warning and abort execution if a condition is met, facilitating debugging and testing.

