system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void smain();
int main() {
  ios_base::sync_with_stdio(0);
  smain();
  return 0;
}
long long n, t;
long long a[1001], d[1001];
long long pd[1001];
long long naive() {
  vector<long long> dp(n, 1);
  for (long long i = 0; i < n; i++)
    for (long long j = 0; j < i; j++)
      if (a[j] <= a[i]) dp[i] = max(dp[i], dp[j] + 1);
  for (long long k = 0; k < t - 1; k++) {
    for (long long i = 0; i < n; i++) {
      long long cur = 0;
      for (long long j = 0; j < n; j++)
        if (a[j] <= a[i]) cur = max(cur, dp[j] + 1);
      dp[i] = cur;
    }
  }
  return *max_element(dp.begin(), dp.end());
}
long long solve() {
  for (long long i = 0; i < n; i++) d[i] = 1;
  for (long long i = 0; i < n; i++)
    for (long long j = 0; j < i; j++)
      if (a[j] <= a[i]) d[i] = max(d[j] + 1, d[i]);
  for (long long i = 0; i < n; i++) pd[i] = d[i];
  vector<long long> p(n), np(n);
  long long k = t - 1;
  for (; k > 0; --k) {
    for (long long i = 0; i < n; i++) {
      long long cur = 0;
      for (long long j = 0; j < n; j++)
        if (a[j] <= a[i]) cur = max(cur, d[j] + 1);
      np[i] = cur - d[i];
      pd[i] = d[i];
      d[i] = cur;
    }
    bool ok = true;
    for (long long i = 0; i < n; i++)
      if (p[i] != np[i]) {
        ok = false;
        break;
      }
    swap(p, np);
    if (ok) break;
  }
  if (k == 0) return *max_element(d, d + n);
  long long res = 0;
  for (long long i = 0; i < n; i++) res = max(res, pd[i] + p[i] * k);
  return res;
}
void smain() {
  for (; cin >> n >> t;) {
    for (long long i = 0; i < n; i++) cin >> a[i];
    cout << solve() << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 200
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 200
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 3 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void smain(); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  smain(); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long n, t; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long a[1001], d[1001]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long pd[1001]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long naive() { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> dp(n, 1); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long j = 0; j < i; j++) /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      if (a[j] <= a[i]) dp[i] = max(dp[i], dp[j] + 1); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long k = 0; k < t - 1; k++) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < n; i++) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      long long cur = 0; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long j = 0; j < n; j++) /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        if (a[j] <= a[i]) cur = max(cur, dp[j] + 1); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i] = cur; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return *max_element(dp.begin(), dp.end()); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long solve() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) d[i] = 1; /* line 28 slow_hit_count: 101, fast_hit_count: 101 */
  for (long long i = 0; i < n; i++) /* line 29 slow_hit_count: 101, fast_hit_count: 101 */
    for (long long j = 0; j < i; j++) /* line 30 slow_hit_count: 5050, fast_hit_count: 5050 */
      if (a[j] <= a[i]) d[i] = max(d[j] + 1, d[i]); /* line 31 slow_hit_count: 4950, fast_hit_count: 4950 */
  for (long long i = 0; i < n; i++) pd[i] = d[i]; /* line 32 slow_hit_count: 101, fast_hit_count: 101 */
  vector<long long> p(n), np(n); /* line 33 slow_hit_count: 3, fast_hit_count: 3 */
  long long k = t - 1; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (; k > 0; --k) { /* line 35 slow_hit_count: 51, fast_hit_count: 3 */
    for (long long i = 0; i < n; i++) { /* line 36 slow_hit_count: 5151, fast_hit_count: 303 */
      long long cur = 0; /* line 37 slow_hit_count: 5100, fast_hit_count: 300 */
      for (long long j = 0; j < n; j++) /* line 38 slow_hit_count: 515100, fast_hit_count: 30300 */
        if (a[j] <= a[i]) cur = max(cur, d[j] + 1); /* line 39 slow_hit_count: 510000, fast_hit_count: 30000 */
      np[i] = cur - d[i]; /* line 40 slow_hit_count: 5100, fast_hit_count: 300 */
      pd[i] = d[i]; /* line 41 slow_hit_count: 5100, fast_hit_count: 300 */
      d[i] = cur; /* line 42 slow_hit_count: 5100, fast_hit_count: 300 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    bool ok = true; /* line 44 slow_hit_count: 51, fast_hit_count: 3 */
    for (long long i = 0; i < n; i++) /* line 45 slow_hit_count: 2503, fast_hit_count: 103 */
      if (p[i] != np[i]) { /* line 46 slow_hit_count: 2502, fast_hit_count: 102 */
        ok = false; /* line 47 slow_hit_count: 50, fast_hit_count: 2 */
        break; /* line 48 slow_hit_count: 50, fast_hit_count: 2 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    swap(p, np); /* line 50 slow_hit_count: 51, fast_hit_count: 3 */
    if (ok) break; /* line 51 slow_hit_count: 51, fast_hit_count: 3 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) return *max_element(d, d + n); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) res = max(res, pd[i] + p[i] * k); /* line 55 slow_hit_count: 101, fast_hit_count: 101 */
  return res; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
void smain() { /* line 58 slow_hit_count: 2, fast_hit_count: 2 */
  for (; cin >> n >> t;) { /* line 59 slow_hit_count: 2, fast_hit_count: 2 */
    for (long long i = 0; i < n; i++) cin >> a[i]; /* line 60 slow_hit_count: 101, fast_hit_count: 101 */
    cout << solve() << endl; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `solve()` function is called once in both the slow and fast runs. However, within this function, certain lines have significantly different hit counts.
   - **Lines with Significant Hit Count Differences:**
     - **Line 35 (`for (; k > 0; --k)`)**: Iterates 51 times in the slow input, but only 3 times in the fast input.
     - **Line 38 (`for (long long j = 0; j < n; j++)`)**: Iterated 515,100 times in the slow input, as opposed to only 30,300 times in the fast input.
     - **Line 39 (`if (a[j] <= a[i]) cur = max(cur, d[j] + 1);`)**: Evaluated 510,000 times for the slow input versus 30,000 for the fast input.
     - **Line 45 (`for (long long i = 0; i < n; i++)`)**: This loop is executed 2,503 times in the slow input and 103 times in the fast input.

2. **Inference on Inefficiencies:**
   - The nested loops within the `solve()` function are major contributors to the difference in performance. In particular, the outer loop (Line 35) which decrements `k` is heavily influenced by whether certain conditions allow for early termination (Line 51).
   - The input pattern or order significantly impacts the `if (a[j] <= a[i])` condition, affecting how often the inner operations are executed.
   - Repeated computation for `cur` and the subsequent updates for `d[i]` and `np[i]` add to the inefficiency when there are no changes to break early.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Iteration Count Dependence on Input Order**
   - **Natural Language Description:** The program may experience slow execution if the sequence elements are arranged such that the non-decreasing condition, `a[j] <= a[i]`, holds true for a large number of comparisons in the nested loops. This leads to extensive iteration without early termination.
   - **Suggested Threshold:** When n approaches its upper limit (close to 100), and T is large, this condition heavily influences performance.

2. **Invariant 2: Lack of Changes in Incremental Arrays (p and np)**
   - **Natural Language Description:** If the vectors `p` and `np` do not quickly converge to the same values, the program will continue iterating longer than necessary, contributing to slow performance.
   - **Suggested Threshold:** Monitor if after a few full passes over the data (e.g., after n iterations), there are no changes indicating convergence. If not, performance may degrade significantly.

3. **Invariant 3: Extensive Nested Iterations**
   - **Natural Language Description:** The program's performance degrades when the nested loops over n iterations for each `k` iteration fail to terminate early due to the absence of a consistent `ok` condition.
   - **Suggested Thresholds:** 
     - When `t` is particularly large, ensure that each `k` iteration reduces possibilities, or performance may slow.
     - Early termination should occur after a certain number of iterations without improvement, especially since `n` is fixed.

4. **Invariant 4: Non-Reducing Dynamic Array Update**
   - **Natural Language Description:** When `cur` does not stabilize across iterations or repeatedly gets updated indicating non-convergence, the repeated calculations become a bottleneck.
   - **Suggested Threshold:** If the attempt to update `cur` results in repetitive similar values over multiple passes, the inefficiency becomes apparent.

These invariants abstract the program's slow path conditions based on input patterns and structural code execution, helping avoid future slow scenarios by detecting specific runtime behaviors early.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Checker Code

Here are the C++ code snippets implementing the performance-characterizing invariants derived previously:

```cpp
// Check invariant 1: Iteration Count Dependence on Input Order
void check_iteration_invariant(long long hitCount, long long threshold) {
    if (hitCount > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive iterations triggered!" << endl;
        abort();
    }
}

// Check invariant 2: Lack of Changes in Incremental Arrays
void check_convergence_invariant(const vector<long long>& p, const vector<long long>& np) {
    if (p == np) {
        cerr << "Warning: Performance bottleneck due to lack of convergence triggered!" << endl;
        abort();
    }
}

// Check invariant 3: Extensive Nested Iterations
void check_nested_iterations_invariant(long long k, long long n, long long threshold) {
    if (k * n > threshold) {
        cerr << "Warning: Performance bottleneck due to extensive nested iterations triggered!" << endl;
        abort();
    }
}

// Check invariant 4: Non-Reducing Dynamic Array Update
void check_dynamic_array_update_invariant(long long cur, long long prevCur, long long stabilityThreshold) {
    if (abs(cur - prevCur) < stabilityThreshold) {
        cerr << "Warning: Performance bottleneck due to unstable dynamic array updates triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Below is the original C++ program with the checker code integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

void smain();
int main() {
    ios_base::sync_with_stdio(0);
    smain();
    return 0;
}

long long n, t;
long long a[1001], d[1001];
long long pd[1001];

// Checker function definitions
void check_iteration_invariant(long long hitCount, long long threshold) {
    if (hitCount > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive iterations triggered!" << endl;
        abort();
    }
}

void check_convergence_invariant(const vector<long long>& p, const vector<long long>& np) {
    if (p == np) {
        cerr << "Warning: Performance bottleneck due to lack of convergence triggered!" << endl;
        abort();
    }
}

void check_nested_iterations_invariant(long long k, long long n, long long threshold) {
    if (k * n > threshold) {
        cerr << "Warning: Performance bottleneck due to extensive nested iterations triggered!" << endl;
        abort();
    }
}

void check_dynamic_array_update_invariant(long long cur, long long prevCur, long long stabilityThreshold) {
    if (abs(cur - prevCur) < stabilityThreshold) {
        cerr << "Warning: Performance bottleneck due to unstable dynamic array updates triggered!" << endl;
        abort();
    }
}

// Main solver function
long long solve() {
    for (long long i = 0; i < n; i++) d[i] = 1;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < i; j++)
            if (a[j] <= a[i]) d[i] = max(d[j] + 1, d[i]);
    for (long long i = 0; i < n; i++) pd[i] = d[i];
    
    vector<long long> p(n), np(n);
    long long k = t - 1;
    long long iterationCounter = 0;  // Counter to measure iteration depth
    
    for (; k > 0; --k) {
        for (long long i = 0; i < n; i++) {
            long long cur = 0;
            for (long long j = 0; j < n; j++)
                if (a[j] <= a[i]) cur = max(cur, d[j] + 1);

            np[i] = cur - d[i];
            pd[i] = d[i];
            d[i] = cur;

            // Check for non-reducing dynamic updates
            if (i > 0) {
                check_dynamic_array_update_invariant(cur, pd[i], 1);
            }
        }
        
        iterationCounter += n;
        check_iteration_invariant(iterationCounter, 10000);  // Example threshold

        bool ok = true;
        for (long long i = 0; i < n; i++)
            if (p[i] != np[i]) {
                ok = false;
                break;
            }

        // Check lack of convergence 
        check_convergence_invariant(p, np);

        swap(p, np);
        if (ok) break;
    }
    
    // Check extensive nested iterations
    check_nested_iterations_invariant(k, n, 5000);  // Example threshold

    if (k == 0) return *max_element(d, d + n);

    long long res = 0;
    for (long long i = 0; i < n; i++) res = max(res, pd[i] + p[i] * k);
    
    return res;
}

void smain() {
    for (; cin >> n >> t;) {
        for (long long i = 0; i < n; i++) cin >> a[i];
        cout << solve() << endl;
    }
}
```

### Comments:
- **Iteration Invariant:** Checks if the number of iterations exceeds a certain threshold, potentially indicating excessive looping.
- **Convergence Invariant:** Ensures that the arrays `p` and `np` don't remain static too early, potentially leading to unnecessary looping.
- **Nested Iteration Invariant:** Monitors the product of loop variables `k` and `n` to prevent extensive nested iterations.
- **Dynamic Array Update Invariant:** Checks that changes in `cur` are significant enough to avoid redundant recalculations.

These checks should help detect early signs of performance bottlenecks.

