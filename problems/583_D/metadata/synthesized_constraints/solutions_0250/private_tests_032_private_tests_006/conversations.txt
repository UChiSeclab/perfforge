system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 201;
const int MAXQ = 305;
int a[2 * MAXN * MAXN];
int dp[2 * MAXN * MAXN];
int cnt_ma[MAXQ], cnt_ma_rev[MAXQ];
int cnt[MAXQ];
void solve(int *a, int len, int *cnt_ma) {
  for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0;
  for (int i = 0; i < len; i++) {
    dp[i] = 0;
    for (int j = 0; j <= a[i]; j++) {
      dp[i] = max(dp[i], cnt_ma[j]);
    }
    dp[i]++;
    cnt_ma[a[i]] = dp[i];
  }
}
void solve_rev(int *a, int len, int *cnt_ma) {
  for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0;
  for (int i = 0; i < len; i++) {
    dp[i] = 0;
    for (int j = a[i]; j < MAXQ; j++) {
      dp[i] = max(dp[i], cnt_ma[j]);
    }
    dp[i]++;
    cnt_ma[a[i]] = dp[i];
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, t;
  cin >> n >> t;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    for (int j = 1; j < 2 * n; j++) a[i + n * j] = a[i];
    cnt[a[i]]++;
  }
  if (t < 2 * n) {
    solve(a, t * n, cnt_ma);
    int ans = 0;
    for (int i = 0; i < n; i++) {
      ans = max(ans, cnt_ma[a[i]]);
    }
    cout << ans << endl;
    return 0;
  }
  solve(a, n * n, cnt_ma);
  reverse(a, a + n * n);
  solve_rev(a, n * n, cnt_ma_rev);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    ans = max(ans, cnt_ma[a[i]] + cnt_ma_rev[a[i]] + (t - 2 * n) * cnt[a[i]]);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 201
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(G.2) Fast Input

100 100
99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 201; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXQ = 305; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[2 * MAXN * MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dp[2 * MAXN * MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int cnt_ma[MAXQ], cnt_ma_rev[MAXQ]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[MAXQ]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int *a, int len, int *cnt_ma) { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0; /* line 10 slow_hit_count: 306, fast_hit_count: 306 */
  for (int i = 0; i < len; i++) { /* line 11 slow_hit_count: 10001, fast_hit_count: 10001 */
    dp[i] = 0; /* line 12 slow_hit_count: 10000, fast_hit_count: 10000 */
    for (int j = 0; j <= a[i]; j++) { /* line 13 slow_hit_count: 525000, fast_hit_count: 525000 */
      dp[i] = max(dp[i], cnt_ma[j]); /* line 14 slow_hit_count: 515000, fast_hit_count: 515000 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    dp[i]++; /* line 16 slow_hit_count: 10000, fast_hit_count: 10000 */
    cnt_ma[a[i]] = dp[i]; /* line 17 slow_hit_count: 10000, fast_hit_count: 10000 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
void solve_rev(int *a, int len, int *cnt_ma) { /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0; /* line 21 slow_hit_count: 306, fast_hit_count: 0 */
  for (int i = 0; i < len; i++) { /* line 22 slow_hit_count: 10001, fast_hit_count: 0 */
    dp[i] = 0; /* line 23 slow_hit_count: 10000, fast_hit_count: 0 */
    for (int j = a[i]; j < MAXQ; j++) { /* line 24 slow_hit_count: 2555000, fast_hit_count: 0 */
      dp[i] = max(dp[i], cnt_ma[j]); /* line 25 slow_hit_count: 2545000, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    dp[i]++; /* line 27 slow_hit_count: 10000, fast_hit_count: 0 */
    cnt_ma[a[i]] = dp[i]; /* line 28 slow_hit_count: 10000, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  int n, t; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> t; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 36 slow_hit_count: 101, fast_hit_count: 101 */
    cin >> a[i]; /* line 37 slow_hit_count: 100, fast_hit_count: 100 */
    for (int j = 1; j < 2 * n; j++) a[i + n * j] = a[i]; /* line 38 slow_hit_count: 20000, fast_hit_count: 20000 */
    cnt[a[i]]++; /* line 39 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (t < 2 * n) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    solve(a, t * n, cnt_ma); /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
    int ans = 0; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 44 slow_hit_count: 0, fast_hit_count: 101 */
      ans = max(ans, cnt_ma[a[i]]); /* line 45 slow_hit_count: 0, fast_hit_count: 100 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  solve(a, n * n, cnt_ma); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  reverse(a, a + n * n); /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
  solve_rev(a, n * n, cnt_ma_rev); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  int ans = 0; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 54 slow_hit_count: 101, fast_hit_count: 0 */
    ans = max(ans, cnt_ma[a[i]] + cnt_ma_rev[a[i]] + (t - 2 * n) * cnt[a[i]]); /* line 55 slow_hit_count: 100, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Hit Count Comparison**: 
   - From the hit counts, we observe that the `solve_rev` function has significant hits during the slow run but none during the fast run. This implies that the program branches into a different path when `t >= 2 * n`.
   - Particularly, line 24 in `solve_rev` has a very high hit count (2,555,000) in the slow run, demonstrating that the inner loop is a bottleneck.

2. **Analysis of the Bottleneck**:
   - The line in question involves a nested loop: `for (int j = a[i]; j < MAXQ; j++)`, which suggests that for larger values of `a[i]`, this loop iterates more extensively.
   - The high hit count in `solve_rev` implies extensive computation when `n*n` elements are processed in reverse and suggests that the computation of the `dp` values in `solve_rev` is costly.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant 1: Large `t` Combined with Large Input Values**:
   - Natural language: "When `t` is large enough to exceed `2 * n`, and the input values are towards the higher limit of their range, the program may execute a large number of operations, leading to a slowdown. This is particularly due to repeated evaluations in reverse order."
   - Explanation: This invariant captures the situation where the program operates on much larger datasets (`n*n` elements) and does complex operations due to large values in the array that trigger long loops in `solve_rev`.

2. **Invariant 2: Back-and-Forth Processing with High Repetition**:
   - Natural language: "If `t` is significantly larger than `2 * n`, causing repeated processing of elements both in regular and reverse order, this may lead to increased computational complexity."
   - Explanation: The slowdown results from processing the whole array multiple times in both forward and reverse order, effectively increasing the time complexity, especially for larger `t`.

3. **Invariant 3: Non-decreasing Sequence Construction with Large Arrays**:
   - Natural language: "Finding the longest non-decreasing sequence becomes computationally intensive when the initial array length `n` is large, and `t` results in the complete array being processed in reverse order."
   - Explanation: As the size `n` approaches its upper bound and `t` is large, the dynamic programming solution's complexity increases, particularly in reverse computation, leading to delays.

These performance-characterizing invariants help identify scenarios where the computation becomes disproportionately large relative to the input size constraints, providing a guideline for potential optimization or alerting when these circumstances arise.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an array of positive integers a1, a2, ..., an × T of length n × T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.

Input

The first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300).

Output

Print a single number — the length of a sought sequence.

Examples

Input

4 3
3 1 4 2


Output

5

Note

The array given in the sample looks like that: 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2. The elements in bold form the largest non-decreasing subsequence. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, below are the C++ code snippets implementing those checks:

```cpp
// Checker for Invariant 1: Large `t` Combined with Large Input Values
void check_large_t_and_values_invariant(int t, int n, const int* a, int len) {
    bool largeValueFound = false;
    for (int i = 0; i < len; i++) {
        if (a[i] > 250) { // Arbitrary threshold for large value
            largeValueFound = true;
            break;
        }
    }
    if (t >= 2 * n && largeValueFound) {
        cerr << "Warning: Performance bottleneck condition triggered due to large t and large input values!" << endl;
        abort();
    }
}

// Checker for Invariant 2: Back-and-Forth Processing with High Repetition
void check_back_and_forth_processing_invariant(int t, int n) {
    if (t > 2 * n) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive back-and-forth processing!" << endl;
        abort();
    }
}

// Checker for Invariant 3: Non-decreasing Sequence Construction with Large Arrays
void check_large_array_invariant(int n, int t) {
    if (n >= 80 && t >= 2 * n) { // These are threshold values based on experience
        cerr << "Warning: Performance bottleneck condition triggered due to large non-decreasing sequence computations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Below is the original C++ program instrumented with the above checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 201;
const int MAXQ = 305;

int a[2 * MAXN * MAXN];
int dp[2 * MAXN * MAXN];
int cnt_ma[MAXQ], cnt_ma_rev[MAXQ];
int cnt[MAXQ];

void solve(int *a, int len, int *cnt_ma) {
    for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0;
    for (int i = 0; i < len; i++) {
        dp[i] = 0;
        for (int j = 0; j <= a[i]; j++) {
            dp[i] = max(dp[i], cnt_ma[j]);
        }
        dp[i]++;
        cnt_ma[a[i]] = dp[i];
    }
}

void solve_rev(int *a, int len, int *cnt_ma) {
    for (int i = 0; i < MAXQ; i++) cnt_ma[i] = 0;
    for (int i = 0; i < len; i++) {
        dp[i] = 0;
        for (int j = a[i]; j < MAXQ; j++) {
            dp[i] = max(dp[i], cnt_ma[j]);
        }
        dp[i]++;
        cnt_ma[a[i]] = dp[i];
    }
}

// Checker functions
void check_large_t_and_values_invariant(int t, int n, const int* a, int len);
void check_back_and_forth_processing_invariant(int t, int n);
void check_large_array_invariant(int n, int t);

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    int n, t;
    cin >> n >> t;
    
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        for (int j = 1; j < 2 * n; j++) a[i + n * j] = a[i];
        cnt[a[i]]++;
    }

    // Insert invariant checks after reading inputs
    check_large_t_and_values_invariant(t, n, a, n);
    check_back_and_forth_processing_invariant(t, n);
    check_large_array_invariant(n, t);

    if (t < 2 * n) {
        solve(a, t * n, cnt_ma);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, cnt_ma[a[i]]);
        }
        cout << ans << endl;
        return 0;
    }
    
    solve(a, n * n, cnt_ma);
    reverse(a, a + n * n);
    solve_rev(a, n * n, cnt_ma_rev);
    
    int ans = 0;
    for (int i = 0; i < n; i++) {
        ans = max(ans, cnt_ma[a[i]] + cnt_ma_rev[a[i]] + (t - 2 * n) * cnt[a[i]]);
    }
    
    cout << ans << endl;
    return 0;
}
```

### Explanation

- The checkers are invoked right after reading the input values (`n`, `t`, and `a`), which ensures that potential performance issues are flagged before the heavy computation begins.
- Each checker targets specific conditions that were identified as potential performance bottlenecks, helping with early detection of problematic input scenarios.

