system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
int n, k;
int dp[300][300];
int A[300], B[300];
int cc[300][300];
int ex(int a, int x) {
  if (a == k - 1) return A[x];
  return B[x];
}
int C(int n, int k) {
  if (k > n || k < 0 || n < 0) return 0;
  if (k == 0 || n == k) return 1;
  int &res = cc[n][k];
  if (res != -1) return res;
  return res = (C(n - 1, k - 1) + C(n - 1, k)) % mod;
}
int calc(int i, int x, int y) {
  if (i == n) {
    if (x == n) return 1;
    return 0;
  }
  int &res = dp[i][x];
  if (res != -1) return res;
  res = 0;
  for (int c = 1; c <= y; c++) {
    res += ex(k, x) * 1ll * C(y, c) % mod * 1ll * ex(k - 1, y - c) % mod * 1ll *
           calc(i + 1, x + c, y - c) % mod;
    if (res >= mod) res -= mod;
  }
  res += ((ex(k, x) - ex(k - 1, x) + mod) % mod) * 1ll * ex(k - 1, y) % mod *
         1ll * calc(i + 1, x, y) % mod;
  if (res >= mod) res -= mod;
  return res;
}
int main() {
  cin >> n >> k;
  if (k == 1 || n == 1) {
    cout << 1 << endl;
    return 0;
  }
  memset(dp, -1, sizeof dp);
  memset(cc, -1, sizeof cc);
  A[0] = 1;
  for (int i = 1; i < 300; i++) A[i] = (k - 1) * 1ll * A[i - 1] % mod;
  B[0] = 1;
  for (int i = 1; i < 300; i++) B[i] = k * 1ll * B[i - 1] % mod;
  cout << calc(0, 0, n) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = (int)1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = inf + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1.0); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int dp[300][300]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int A[300], B[300]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int cc[300][300]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int ex(int a, int x) { /* line 11 slow_hit_count: 15812750, fast_hit_count: 0 */
  if (a == k - 1) return A[x]; /* line 12 slow_hit_count: 15812750, fast_hit_count: 0 */
  return B[x]; /* line 13 slow_hit_count: 7875125, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int C(int n, int k) { /* line 15 slow_hit_count: 7874875, fast_hit_count: 0 */
  if (k > n || k < 0 || n < 0) return 0; /* line 16 slow_hit_count: 7874875, fast_hit_count: 0 */
  if (k == 0 || n == k) return 1; /* line 17 slow_hit_count: 7874875, fast_hit_count: 0 */
  int &res = cc[n][k]; /* line 18 slow_hit_count: 7812126, fast_hit_count: 0 */
  if (res != -1) return res; /* line 19 slow_hit_count: 7812126, fast_hit_count: 0 */
  return res = (C(n - 1, k - 1) + C(n - 1, k)) % mod; /* line 20 slow_hit_count: 31125, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int calc(int i, int x, int y) { /* line 22 slow_hit_count: 7875126, fast_hit_count: 0 */
  if (i == n) { /* line 23 slow_hit_count: 7875126, fast_hit_count: 0 */
    if (x == n) return 1; /* line 24 slow_hit_count: 31626, fast_hit_count: 0 */
    return 0; /* line 25 slow_hit_count: 31375, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  int &res = dp[i][x]; /* line 27 slow_hit_count: 7843500, fast_hit_count: 0 */
  if (res != -1) return res; /* line 28 slow_hit_count: 7843500, fast_hit_count: 0 */
  res = 0; /* line 29 slow_hit_count: 62500, fast_hit_count: 0 */
  for (int c = 1; c <= y; c++) { /* line 30 slow_hit_count: 7875125, fast_hit_count: 0 */
    res += ex(k, x) * 1ll * C(y, c) % mod * 1ll * ex(k - 1, y - c) % mod * 1ll * /* line 31 slow_hit_count: 7812625, fast_hit_count: 0 */
           calc(i + 1, x + c, y - c) % mod; /* line 32 slow_hit_count: 7812625, fast_hit_count: 0 */
    if (res >= mod) res -= mod; /* line 33 slow_hit_count: 7812625, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  res += ((ex(k, x) - ex(k - 1, x) + mod) % mod) * 1ll * ex(k - 1, y) % mod * /* line 35 slow_hit_count: 62500, fast_hit_count: 0 */
         1ll * calc(i + 1, x, y) % mod; /* line 36 slow_hit_count: 62500, fast_hit_count: 0 */
  if (res >= mod) res -= mod; /* line 37 slow_hit_count: 62500, fast_hit_count: 0 */
  return res; /* line 38 slow_hit_count: 62500, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1 || n == 1) { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 << endl; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof dp); /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  memset(cc, -1, sizeof cc); /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  A[0] = 1; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < 300; i++) A[i] = (k - 1) * 1ll * A[i - 1] % mod; /* line 49 slow_hit_count: 300, fast_hit_count: 0 */
  B[0] = 1; /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < 300; i++) B[i] = k * 1ll * B[i - 1] % mod; /* line 51 slow_hit_count: 300, fast_hit_count: 0 */
  cout << calc(0, 0, n) << endl; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks and derive performance-characterizing invariants, we will analyze the code provided and its interaction with the input constraints, focusing on the differences between the hit counts for the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count information and the provided code, we can observe the following:

1. **Function `calc`**:
   - The function `calc` has a significant number of hits (over 7 million) for the slow input. This suggests it is deeply recursive and contributing heavily to the runtime.
   - The loop inside `calc` running from `1` to `y` (which is equal to `n`) suggests that it potentially iterates up to `n` times, making it a nested recursive loop.

2. **Function `C`**:
   - The function `C` is a recursive implementation of the binomial coefficient, which is being called heavily from `calc`, contributing to the recursion depth and thus the slow execution.

3. **Function `ex`**:
   - The function `ex` is also being called multiple times but its impact is less compared to `calc` and `C`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the performance slowdown is mainly due to the recursive nature of the `calc` function combined with the combinatorial calculations done by the `C` function. The conditions under which the program slows down are related to the input parameters `n` and `k`.

1. **Invariant 1: Deep Recursion with High `n` and `k`**:
   - **Natural Language Description**: "When `n` is large (close to the upper constraint) and `k` is significantly greater than `1`, the recursion depth in the `calc` function increases significantly, leading to a slowdown."
   - **Rationale**: The recursion depth and the number of recursive calls increase with larger `n` and `k`. This is because of the nested nature of the `calc` function and the combinatorial calculations needed for different grid configurations.

2. **Invariant 2: Combinatorial Explosion in `C`**:
   - **Natural Language Description**: "When both `n` is close to 250 and `k` approaches its maximum possible values, the combination calculations in `C` become extensive, increasing the computational load."
   - **Rationale**: High `k` values result in larger combinations being calculated, which results in a combinatorial explosion, slowing down the computation.

3. **Invariant 3: Excessive Iterations Due to High `k`**:
   - **Natural Language Description**: "If `k` is much larger than `n`, the iterations in the inner loop of `calc` expand, leading to performance degradation."
   - **Rationale**: The loop in `calc` iterates `y` times (which is `n`), but the combinatorial nature with high `k` values means more configurations are evaluated.

Overall, these invariants capture the essential scenarios under which the performance degrades without relying on specific numeric values from the slow input, aligning with the constraints of `n` and `k`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants in C++ as runtime checks. We'll integrate these checks into the original program to help identify performance bottlenecks.

### Phase 3: Implement the Natural Language Invariants in C++

1. **Invariant 1: Deep Recursion with High `n` and `k`**:
   - Natural Language Description: "When `n` is large (close to the upper constraint) and `k` is significantly greater than `1`, the recursion depth in the `calc` function increases significantly, leading to a slowdown."

   ```cpp
   void check_deep_recursion_invariant(int n, int k) {
       if (n > 200 && k > 1000000) { // Thresholds based on problem constraints
           cerr << "Warning: Deep recursion invariant triggered - large n and k may cause slowdown" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Combinatorial Explosion in `C`**:
   - Natural Language Description: "When both `n` is close to 250 and `k` approaches its maximum possible values, the combination calculations in `C` become extensive, increasing the computational load."

   ```cpp
   void check_combinatorial_explosion_invariant(int n, int k) {
       if (n > 200 && k > 1000000) { // Similar threshold as this relates to the recursive calls
           cerr << "Warning: Combinatorial explosion invariant triggered - large n and k leading to extensive computations" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Excessive Iterations Due to High `k`**:
   - Natural Language Description: "If `k` is much larger than `n`, the iterations in the inner loop of `calc` expand, leading to performance degradation."

   ```cpp
   void check_excessive_iterations_invariant(int n, int k) {
       if (k > 1000000) { // Keeping k threshold high due to its large range
           cerr << "Warning: Excessive iterations invariant triggered - high k value leading to more iterations" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now, we'll integrate these checks into the C++ program at appropriate points in the control flow to avoid adding unnecessary overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, k;
int dp[300][300];
int A[300], B[300];
int cc[300][300];

void check_deep_recursion_invariant(int n, int k) {
    if (n > 200 && k > 1000000) { // Thresholds based on problem constraints
        cerr << "Warning: Deep recursion invariant triggered - large n and k may cause slowdown" << endl;
        abort();
    }
}

void check_combinatorial_explosion_invariant(int n, int k) {
    if (n > 200 && k > 1000000) { // Similar threshold as this relates to the recursive calls
        cerr << "Warning: Combinatorial explosion invariant triggered - large n and k leading to extensive computations" << endl;
        abort();
    }
}

void check_excessive_iterations_invariant(int n, int k) {
    if (k > 1000000) { // Keeping k threshold high due to its large range
        cerr << "Warning: Excessive iterations invariant triggered - high k value leading to more iterations" << endl;
        abort();
    }
}

int ex(int a, int x) {
    if (a == k - 1) return A[x];
    return B[x];
}

int C(int n, int k) {
    if (k > n || k < 0 || n < 0) return 0;
    if (k == 0 || n == k) return 1;
    int &res = cc[n][k];
    if (res != -1) return res;
    return res = (C(n - 1, k - 1) + C(n - 1, k)) % mod;
}

int calc(int i, int x, int y) {
    if (i == n) {
        if (x == n) return 1;
        return 0;
    }
    int &res = dp[i][x];
    if (res != -1) return res;
    res = 0;
    for (int c = 1; c <= y; c++) {
        res += ex(k, x) * 1ll * C(y, c) % mod * 1ll * ex(k - 1, y - c) % mod * 1ll *
               calc(i + 1, x + c, y - c) % mod;
        if (res >= mod) res -= mod;
    }
    res += ((ex(k, x) - ex(k - 1, x) + mod) % mod) * 1ll * ex(k - 1, y) % mod *
           1ll * calc(i + 1, x, y) % mod;
    if (res >= mod) res -= mod;
    return res;
}

int main() {
    cin >> n >> k;

    // Check performance invariants after reading inputs
    check_deep_recursion_invariant(n, k);
    check_combinatorial_explosion_invariant(n, k);
    check_excessive_iterations_invariant(n, k);

    if (k == 1 || n == 1) {
        cout << 1 << endl;
        return 0;
    }
    memset(dp, -1, sizeof dp);
    memset(cc, -1, sizeof cc);
    A[0] = 1;
    for (int i = 1; i < 300; i++) A[i] = (k - 1) * 1ll * A[i - 1] % mod;
    B[0] = 1;
    for (int i = 1; i < 300; i++) B[i] = k * 1ll * B[i - 1] % mod;
    cout << calc(0, 0, n) << endl;
    return 0;
}
```

### Explanation

- **Integration**: The checkers are placed immediately after reading the input values for `n` and `k`. This ensures they run once and do not affect the performance of recursive and loop operations.
- **Thresholds**: The values used in the checkers (e.g., `n > 200` and `k > 1000000`) are based on problem constraints, ensuring they catch edge cases where the program might slow down without capturing every input combination.

