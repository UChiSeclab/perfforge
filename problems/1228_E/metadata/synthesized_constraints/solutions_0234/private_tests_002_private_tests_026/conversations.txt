system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
long long int dp[260][260];
long long int cached[260][260];
long long int cc[260][260];
int n, k1;
long long int modExpo1(long long int a, long long int b) {
  long long int res = 1;
  for (long long int i = b; i; i = i >> 1, a = (a * a) % 1000000007)
    if (i & 1) res = (res * a) % 1000000007;
  return res;
}
long long int values[260], values1[260];
long long int modExpo(long long int a, long long int b) {
  if (a == k1 - 1)
    return values1[b];
  else
    return values[b];
}
long long int nCr(int n, int r) {
  if (n < 0 || r < 0) return 0;
  if (r == 0) return 1;
  if (n == r) return 1;
  if (r > n) return 0;
  if (n == 0) return 0;
  if (cached[n][r]) return cc[n][r];
  cached[n][r] = true;
  return cc[n][r] = (nCr(n - 1, r - 1) + nCr(n - 1, r)) % 1000000007;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  clock_t clk = clock();
  cin >> n >> k1;
  nCr(260 - 1, 260 - 1);
  for (int i = 0; i < 260; i++)
    values1[i] = modExpo1(k1 - 1, i), values[i] = modExpo1(k1, i);
  if (k1 == 1) {
    cout << 1 << endl;
    return 0;
  }
  dp[0][0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < n + 1; j++) {
      dp[i][j] +=
          (((((modExpo(k1, j) + 1000000007 - modExpo(k1 - 1, j)) % 1000000007) *
             dp[i - 1][j]) %
            1000000007) *
           modExpo(k1 - 1, n - j)) %
          1000000007;
      dp[i][j] %= 1000000007;
      for (int k = 1; k <= n; k++) {
        if (j + k > n) continue;
        long long int temp = modExpo(k1, j) * nCr(n - j, k);
        temp %= 1000000007;
        temp *= dp[i - 1][j];
        temp %= 1000000007;
        temp *= modExpo(k1 - 1, n - j - k);
        temp %= 1000000007;
        dp[i][j + k] += temp;
        dp[i][j + k] %= 1000000007;
      }
    }
  }
  cout << dp[n][n] % 1000000007 << endl;
  cerr << endl
       << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int dp[260][260]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int cached[260][260]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long int cc[260][260]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, k1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long int modExpo1(long long int a, long long int b) { /* line 8 slow_hit_count: 520, fast_hit_count: 520 */
  long long int res = 1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int i = b; i; i = i >> 1, a = (a * a) % 1000000007) /* line 10 slow_hit_count: 4178, fast_hit_count: 4178 */
    if (i & 1) res = (res * a) % 1000000007; /* line 11 slow_hit_count: 3658, fast_hit_count: 3658 */
  return res; /* line 12 slow_hit_count: 520, fast_hit_count: 520 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long int values[260], values1[260]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long int modExpo(long long int a, long long int b) { /* line 15 slow_hit_count: 15875750, fast_hit_count: 0 */
  if (a == k1 - 1) /* line 16 slow_hit_count: 15875750, fast_hit_count: 0 */
    return values1[b]; /* line 17 slow_hit_count: 7969250, fast_hit_count: 0 */
  else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return values[b]; /* line 19 slow_hit_count: 7906500, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long int nCr(int n, int r) { /* line 21 slow_hit_count: 7906001, fast_hit_count: 1 */
  if (n < 0 || r < 0) return 0; /* line 22 slow_hit_count: 7906001, fast_hit_count: 1 */
  if (r == 0) return 1; /* line 23 slow_hit_count: 7906001, fast_hit_count: 1 */
  if (n == r) return 1; /* line 24 slow_hit_count: 7905752, fast_hit_count: 1 */
  if (r > n) return 0; /* line 25 slow_hit_count: 7843002, fast_hit_count: 0 */
  if (n == 0) return 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (cached[n][r]) return cc[n][r]; /* line 27 slow_hit_count: 7843002, fast_hit_count: 0 */
  cached[n][r] = true; /* line 28 slow_hit_count: 31125, fast_hit_count: 0 */
  return cc[n][r] = (nCr(n - 1, r - 1) + nCr(n - 1, r)) % 1000000007; /* line 29 slow_hit_count: 31125, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  clock_t clk = clock(); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k1; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  nCr(260 - 1, 260 - 1); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 260; i++) /* line 38 slow_hit_count: 261, fast_hit_count: 261 */
    values1[i] = modExpo1(k1 - 1, i), values[i] = modExpo1(k1, i); /* line 39 slow_hit_count: 260, fast_hit_count: 260 */
  if (k1 == 1) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 << endl; /* line 41 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][0] = 1; /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 45 slow_hit_count: 251, fast_hit_count: 0 */
    for (int j = 0; j < n + 1; j++) { /* line 46 slow_hit_count: 63000, fast_hit_count: 0 */
      dp[i][j] += /* line 47 slow_hit_count: 62750, fast_hit_count: 0 */
          (((((modExpo(k1, j) + 1000000007 - modExpo(k1 - 1, j)) % 1000000007) * /* line 48 slow_hit_count: 62750, fast_hit_count: 0 */
             dp[i - 1][j]) % /* line 49 slow_hit_count: 62750, fast_hit_count: 0 */
            1000000007) * /* line 50 slow_hit_count: 62750, fast_hit_count: 0 */
           modExpo(k1 - 1, n - j)) % /* line 51 slow_hit_count: 62750, fast_hit_count: 0 */
          1000000007; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i][j] %= 1000000007; /* line 53 slow_hit_count: 62750, fast_hit_count: 0 */
      for (int k = 1; k <= n; k++) { /* line 54 slow_hit_count: 15750250, fast_hit_count: 0 */
        if (j + k > n) continue; /* line 55 slow_hit_count: 15687500, fast_hit_count: 0 */
        long long int temp = modExpo(k1, j) * nCr(n - j, k); /* line 56 slow_hit_count: 7843750, fast_hit_count: 0 */
        temp %= 1000000007; /* line 57 slow_hit_count: 7843750, fast_hit_count: 0 */
        temp *= dp[i - 1][j]; /* line 58 slow_hit_count: 7843750, fast_hit_count: 0 */
        temp %= 1000000007; /* line 59 slow_hit_count: 7843750, fast_hit_count: 0 */
        temp *= modExpo(k1 - 1, n - j - k); /* line 60 slow_hit_count: 7843750, fast_hit_count: 0 */
        temp %= 1000000007; /* line 61 slow_hit_count: 7843750, fast_hit_count: 0 */
        dp[i][j + k] += temp; /* line 62 slow_hit_count: 7843750, fast_hit_count: 0 */
        dp[i][j + k] %= 1000000007; /* line 63 slow_hit_count: 7843750, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[n][n] % 1000000007 << endl; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
  cerr << endl /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
       << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC; /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we need to focus on the line-level hit counts and the operations performed in the code. The code involves dynamic programming and combinatorial computations which are crucial for determining the number of valid grids. Let's break down the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

**Hit Count Analysis:**

1. **Function `modExpo`:** 
   - Line 15 has a significantly higher hit count for the slow input compared to the fast input, indicating that this function is frequently called when `k` is large.
   - This is an exponential function used for computing powers under modulo, indicating heavy computational requirements.

2. **Function `nCr`:**
   - Lines 21 to 29 show extremely high hit counts for the slow input, almost non-existent for the fast input. This suggests that combinations are computed repeatedly.
   - Recursive calls within the function (especially line 29) imply a deep call stack, potentially causing performance issues.

3. **Nested Loops:**
   - Lines 45 to 63 indicate nested loops, with the inner loops being hit excessively for the slow input. Particularly, the loop on line 54 seems to iterate many times, heavily interacting with the combinatorial and modular exponentiation functions.
   - The slow input results in deeper and more frequent iterations due to high values of `k`, making the nested operations more computationally intensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified patterns and code analysis, here are the performance-characterizing invariants:

1. **Exponential Growth with `k`:**
   - The program's performance degrades when `k` is large because it leads to frequent calls to the modular exponentiation function. This results in exponential growth in computational time.
   - **Invariant:** "When `k` is close to its upper limit, the number of modular exponentiation operations increases dramatically, causing a significant slowdown."

2. **Combinatorial Explosion:**
   - The use of combinations (`nCr`) becomes costly with higher `n` values as it results in deep recursive calls and cache misses.
   - **Invariant:** "As `n` approaches its maximum, the depth and frequency of recursive combinatorial computations increase, leading to potential performance bottlenecks."

3. **Nested Loop Complexity:**
   - High `k` values combined with maximum `n` result in nested loop iterations that grow quadratically, which interact heavily with expensive functions.
   - **Invariant:** "When both `n` and `k` are large, nested loops may lead to excessive iterations with costly computations, significantly degrading performance."

4. **Memory and Cache Utilization:**
   - The caching mechanism (`cached`) and large arrays (`dp`, `cc`) imply potential memory access delays, especially when `k` induces frequent updates.
   - **Invariant:** "High memory consumption for large `n` values can lead to frequent cache accesses, slowing down memory-bound computations."

These invariants capture the conditions that lead to slowdowns in the program and can help in optimizing or restructuring the code to handle large inputs more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Checker Code

Here are the C++ code snippets implementing the performance-characterizing invariants derived in Phase 2:

### Invariant 1: Exponential Growth with `k`

```cpp
void check_exponential_growth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to large k triggering excessive modular exponentiation!" << endl;
        abort();
    }
}
```

### Invariant 2: Combinatorial Explosion

```cpp
void check_combinatorial_explosion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to deep recursive combinatorial computations!" << endl;
        abort();
    }
}
```

### Invariant 3: Nested Loop Complexity

```cpp
void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to excessive nested loop iterations!" << endl;
        abort();
    }
}
```

### Invariant 4: Memory and Cache Utilization

```cpp
void check_memory_utilization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to high memory consumption affecting cache utilization!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code with the Original Program

Below is the instrumented C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
long long int dp[260][260];
long long int cached[260][260];
long long int cc[260][260];
int n, k1;

// Function to check exponential growth invariant
void check_exponential_growth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to large k triggering excessive modular exponentiation!" << endl;
        abort();
    }
}

// Function to check combinatorial explosion invariant
void check_combinatorial_explosion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to deep recursive combinatorial computations!" << endl;
        abort();
    }
}

// Function to check nested loop invariant
void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to excessive nested loop iterations!" << endl;
        abort();
    }
}

// Function to check memory utilization invariant
void check_memory_utilization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to high memory consumption affecting cache utilization!" << endl;
        abort();
    }
}

long long int modExpo1(long long int a, long long int b) {
  long long int res = 1;
  for (long long int i = b; i; i = i >> 1, a = (a * a) % 1000000007)
    if (i & 1) res = (res * a) % 1000000007;
  return res;
}

long long int values[260], values1[260];

long long int modExpo(long long int a, long long int b) {
  if (a == k1 - 1)
    return values1[b];
  else
    return values[b];
}

long long int nCr(int n, int r) {
  if (n < 0 || r < 0) return 0;
  if (r == 0) return 1;
  if (n == r) return 1;
  if (r > n) return 0;
  if (n == 0) return 0;
  if (cached[n][r]) return cc[n][r];
  cached[n][r] = true;
  return cc[n][r] = (nCr(n - 1, r - 1) + nCr(n - 1, r)) % 1000000007;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  clock_t clk = clock();
  cin >> n >> k1;

  // Inserted checks after input reading
  check_exponential_growth_invariant(k1 > 10000); // Large k triggers exponential growth
  check_combinatorial_explosion_invariant(n > 200); // High n can cause combinatorial explosions
  check_memory_utilization_invariant(n > 200); // High n impacts memory/cache

  nCr(260 - 1, 260 - 1);
  for (int i = 0; i < 260; i++)
    values1[i] = modExpo1(k1 - 1, i), values[i] = modExpo1(k1, i);
  if (k1 == 1) {
    cout << 1 << endl;
    return 0;
  }
  dp[0][0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < n + 1; j++) {
      dp[i][j] +=
          (((((modExpo(k1, j) + 1000000007 - modExpo(k1 - 1, j)) % 1000000007) *
             dp[i - 1][j]) %
            1000000007) *
           modExpo(k1 - 1, n - j)) %
          1000000007;
      dp[i][j] %= 1000000007;

      // Nested loop check
      check_nested_loop_invariant(i > 200 && j > 200); // Excessive iterations

      for (int k = 1; k <= n; k++) {
        if (j + k > n) continue;
        long long int temp = modExpo(k1, j) * nCr(n - j, k);
        temp %= 1000000007;
        temp *= dp[i - 1][j];
        temp %= 1000000007;
        temp *= modExpo(k1 - 1, n - j - k);
        temp %= 1000000007;
        dp[i][j + k] += temp;
        dp[i][j + k] %= 1000000007;
      }
    }
  }
  cout << dp[n][n] % 1000000007 << endl;
  cerr << endl
       << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
  return 0;
}
```

### Explanation:

- **Exponential Growth Check:** This check is placed right after reading inputs as it depends on the value of `k`.
- **Combinatorial Explosion Check:** Placed at the beginning of `main()` after reading inputs.
- **Nested Loop Check:** Placed inside the loop, but outside the innermost loop, to avoid adding overhead in a tight loop.
- **Memory Utilization Check:** Also placed right after input since it relates to `n`'s value.

These checks help identify performance bottlenecks dynamically, alerting if the code enters a known slow path.

