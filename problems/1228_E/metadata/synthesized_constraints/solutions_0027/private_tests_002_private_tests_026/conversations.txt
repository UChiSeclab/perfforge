system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
long long k;
long long ans;
long long dp[266][266];
long long cdp[266][266];
long long tt[266];
long long ttt[266];
long long f(long long x, int y) {
  if (x == k)
    return tt[y];
  else if (x == k - 1LL)
    return ttt[y];
  else {
    long long val = x;
    long long output = 1LL;
    while (y > 0) {
      if (y % 2 == 1) {
        output *= val;
        output %= 1000000007LL;
      }
      val *= val;
      val %= 1000000007LL;
      y /= 2;
    }
    return output;
  }
}
long long getcdp(int x, int y) {
  if (cdp[x][y] != -1LL) return cdp[x][y];
  if (y > x - y) return cdp[x][y] = getcdp(x, x - y);
  if (y == 0) return cdp[x][y] = 1LL;
  return cdp[x][y] = (getcdp(x - 1, y - 1) + getcdp(x - 1, y)) % 1000000007LL;
}
long long getdp(int x, int a) {
  if (dp[x][a] != -1LL) return dp[x][a];
  if (a == 0LL) {
    long long val = f(k, n) - f(k - 1LL, n) + 1000000007LL;
    val %= 1000000007LL;
    return dp[x][a] = f(val, x);
  }
  if (x == 1LL) {
    return dp[x][a] = f(k, n - a);
  }
  dp[x][a] = f(k, n - a) - f(k - 1LL, n - a) + 1000000007LL;
  dp[x][a] %= 1000000007LL;
  dp[x][a] *= f(k - 1LL, a);
  dp[x][a] %= 1000000007LL;
  dp[x][a] *= getdp(x - 1LL, a);
  dp[x][a] %= 1000000007LL;
  for (int i = 1; i <= a; i++) {
    long long val = getcdp(a, i);
    val *= f(k - 1LL, a - i);
    val %= 1000000007LL;
    val *= getdp(x - 1LL, a - i);
    val %= 1000000007LL;
    val *= f(k, n - a);
    val %= 1000000007LL;
    dp[x][a] += val;
    dp[x][a] %= 1000000007LL;
  }
  return dp[x][a];
}
int main() {
  scanf("%d %lld", &n, &k);
  if (n == 1LL || k == 1LL) {
    printf("1");
    return 0;
  }
  tt[0] = 1LL;
  ttt[0] = 1LL;
  for (int i = 1; i <= n; i++) {
    tt[i] = tt[i - 1] * k;
    ttt[i] = ttt[i - 1] * (k - 1LL);
    tt[i] %= 1000000007LL;
    ttt[i] %= 1000000007LL;
  }
  memset(dp, -1, sizeof(dp));
  memset(cdp, -1, sizeof(cdp));
  printf("%lld\n", getdp(n, n));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long ans; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[266][266]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long cdp[266][266]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long tt[266]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long ttt[266]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long x, int y) { /* line 10 slow_hit_count: 15749500, fast_hit_count: 0 */
  if (x == k) /* line 11 slow_hit_count: 15749500, fast_hit_count: 0 */
    return tt[y]; /* line 12 slow_hit_count: 7843750, fast_hit_count: 0 */
  else if (x == k - 1LL) /* line 13 slow_hit_count: 7905750, fast_hit_count: 0 */
    return ttt[y]; /* line 14 slow_hit_count: 7905501, fast_hit_count: 0 */
  else { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    long long val = x; /* line 16 slow_hit_count: 249, fast_hit_count: 0 */
    long long output = 1LL; /* line 17 slow_hit_count: 249, fast_hit_count: 0 */
    while (y > 0) { /* line 18 slow_hit_count: 1994, fast_hit_count: 0 */
      if (y % 2 == 1) { /* line 19 slow_hit_count: 1745, fast_hit_count: 0 */
        output *= val; /* line 20 slow_hit_count: 983, fast_hit_count: 0 */
        output %= 1000000007LL; /* line 21 slow_hit_count: 983, fast_hit_count: 0 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      val *= val; /* line 23 slow_hit_count: 1745, fast_hit_count: 0 */
      val %= 1000000007LL; /* line 24 slow_hit_count: 1745, fast_hit_count: 0 */
      y /= 2; /* line 25 slow_hit_count: 1745, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    return output; /* line 27 slow_hit_count: 249, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long getcdp(int x, int y) { /* line 30 slow_hit_count: 7828250, fast_hit_count: 0 */
  if (cdp[x][y] != -1LL) return cdp[x][y]; /* line 31 slow_hit_count: 7828250, fast_hit_count: 0 */
  if (y > x - y) return cdp[x][y] = getcdp(x, x - y); /* line 32 slow_hit_count: 31625, fast_hit_count: 0 */
  if (y == 0) return cdp[x][y] = 1LL; /* line 33 slow_hit_count: 15875, fast_hit_count: 0 */
  return cdp[x][y] = (getcdp(x - 1, y - 1) + getcdp(x - 1, y)) % 1000000007LL; /* line 34 slow_hit_count: 15625, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long getdp(int x, int a) { /* line 36 slow_hit_count: 7843252, fast_hit_count: 0 */
  if (dp[x][a] != -1LL) return dp[x][a]; /* line 37 slow_hit_count: 7843252, fast_hit_count: 0 */
  if (a == 0LL) { /* line 38 slow_hit_count: 62500, fast_hit_count: 0 */
    long long val = f(k, n) - f(k - 1LL, n) + 1000000007LL; /* line 39 slow_hit_count: 249, fast_hit_count: 0 */
    val %= 1000000007LL; /* line 40 slow_hit_count: 249, fast_hit_count: 0 */
    return dp[x][a] = f(val, x); /* line 41 slow_hit_count: 249, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 1LL) { /* line 43 slow_hit_count: 62251, fast_hit_count: 0 */
    return dp[x][a] = f(k, n - a); /* line 44 slow_hit_count: 250, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  dp[x][a] = f(k, n - a) - f(k - 1LL, n - a) + 1000000007LL; /* line 46 slow_hit_count: 62001, fast_hit_count: 0 */
  dp[x][a] %= 1000000007LL; /* line 47 slow_hit_count: 62001, fast_hit_count: 0 */
  dp[x][a] *= f(k - 1LL, a); /* line 48 slow_hit_count: 62001, fast_hit_count: 0 */
  dp[x][a] %= 1000000007LL; /* line 49 slow_hit_count: 62001, fast_hit_count: 0 */
  dp[x][a] *= getdp(x - 1LL, a); /* line 50 slow_hit_count: 62001, fast_hit_count: 0 */
  dp[x][a] %= 1000000007LL; /* line 51 slow_hit_count: 62001, fast_hit_count: 0 */
  for (int i = 1; i <= a; i++) { /* line 52 slow_hit_count: 7843251, fast_hit_count: 0 */
    long long val = getcdp(a, i); /* line 53 slow_hit_count: 7781250, fast_hit_count: 0 */
    val *= f(k - 1LL, a - i); /* line 54 slow_hit_count: 7781250, fast_hit_count: 0 */
    val %= 1000000007LL; /* line 55 slow_hit_count: 7781250, fast_hit_count: 0 */
    val *= getdp(x - 1LL, a - i); /* line 56 slow_hit_count: 7781250, fast_hit_count: 0 */
    val %= 1000000007LL; /* line 57 slow_hit_count: 7781250, fast_hit_count: 0 */
    val *= f(k, n - a); /* line 58 slow_hit_count: 7781250, fast_hit_count: 0 */
    val %= 1000000007LL; /* line 59 slow_hit_count: 7781250, fast_hit_count: 0 */
    dp[x][a] += val; /* line 60 slow_hit_count: 7781250, fast_hit_count: 0 */
    dp[x][a] %= 1000000007LL; /* line 61 slow_hit_count: 7781250, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[x][a]; /* line 63 slow_hit_count: 62001, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %lld", &n, &k); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1LL || k == 1LL) { /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
    printf("1"); /* line 68 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 69 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  tt[0] = 1LL; /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  ttt[0] = 1LL; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 73 slow_hit_count: 251, fast_hit_count: 0 */
    tt[i] = tt[i - 1] * k; /* line 74 slow_hit_count: 250, fast_hit_count: 0 */
    ttt[i] = ttt[i - 1] * (k - 1LL); /* line 75 slow_hit_count: 250, fast_hit_count: 0 */
    tt[i] %= 1000000007LL; /* line 76 slow_hit_count: 250, fast_hit_count: 0 */
    ttt[i] %= 1000000007LL; /* line 77 slow_hit_count: 250, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
  memset(cdp, -1, sizeof(cdp)); /* line 80 slow_hit_count: 1, fast_hit_count: 0 */
  printf("%lld\n", getdp(n, n)); /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 83 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts provided for the slow and fast inputs, the following observations can be made:

1. **Function `f(long long x, int y)`**: This function is heavily invoked in the slow input scenario, with particularly high hit counts at lines 11-14. The function handles modular exponentiation, which can be computationally expensive when invoked repeatedly with large values of `x` or `y`.

2. **Function `getcdp(int x, int y)`**: This function is responsible for calculating binomial coefficients, and is called frequently in the slow input, specifically lines 30-34. Although it benefits from memoization, the recursive nature and potentially high number of calls can contribute to the slowdown when `n` is large.

3. **Function `getdp(int x, int a)`**: This function has significant hit counts, especially from line 36 onward, indicating it is a major contributor to the computational load. The nested loops and recursive calls within this function, particularly from line 52 onward, result in repeated calculations that are exacerbated by large input sizes.

4. **Combinatorial Calculations and Nested Loops**: Line 52 introduces a for-loop that iterates over potential combinations, which can be expensive when `a` is large. Associated lines, particularly 53-61, indicate the loop is a hotspot for the high hit count, contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis from Phase 1, the following natural language performance invariants are derived:

1. **Invariant on Large `k` Values**:
   - **Description**: "When `k` is very large, especially near the upper constraint limit, computations involving modular exponentiation become expensive due to repeated multiplications in the function `f`. This can significantly slow down the program, particularly when combined with the constraints on `n`."
   - **Threshold Consideration**: This occurs when `k` approaches its maximum constraint value (close to \(10^9\)).

2. **Invariant on High Recursion and Combinatorial Depth**:
   - **Description**: "When `n` is large and close to the constraint limit, the recursive and combinatorial calculations in the functions `getdp` and `getcdp` lead to a high number of recursive calls, particularly when handling large combinations. This results in increased computational overhead."
   - **Threshold Consideration**: This becomes prominent when `n` is a significant fraction of its maximum constraint (close to 250).

3. **Invariant on Nested Loop Execution**:
   - **Description**: "If the grid size `n` is large and a significant number of grid configurations are possible, the nested loops in the computation can lead to an increase in execution time, especially when iterating over combinations in `getdp` for large `a`."
   - **Threshold Consideration**: This is particularly the case when `n` is large, and the nested loops iterate over multiple potential configurations.

4. **Invariant on Memorization Impact**:
   - **Description**: "The effectiveness of memoization in `getcdp` and `getdp` becomes less pronounced if the problem size expands, leading to increased function call overheads that cannot be efficiently cached."
   - **Threshold Consideration**: This is a concern when there is a high degree of variation in combinations being calculated, reducing the cache hit rate.

These invariants provide a framework to understand potential performance bottlenecks without referring to specific input values, offering a generalized view of how input characteristics influence execution time.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived in Phase 2, I will now implement C++ checker code for each invariant.

1. **Invariant on Large `k` Values**:
   - **C++ Code**:
   ```cpp
   void check_large_k_invariant(long long k) {
       if (k > 100000000) { // Arbitrary threshold for large k near its upper limit
           cerr << "Warning: Performance bottleneck condition triggered - large k value!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on High Recursion and Combinatorial Depth**:
   - **C++ Code**:
   ```cpp
   void check_recursion_invariant(int n) {
       if (n > 200) { // Threshold close to maximum constraint for n
           cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Nested Loop Execution**:
   - **C++ Code**:
   ```cpp
   void check_nested_loop_invariant(int n) {
       if (n > 200) { // Threshold close to maximum constraint for n
           cerr << "Warning: Performance bottleneck condition triggered - large nested loop execution!" << endl;
           abort();
       }
   }
   ```

4. **Invariant on Memorization Impact**:
   - **C++ Code**:
   ```cpp
   void check_memoization_invariant(int n) {
       if (n > 200) { // High degree of variation leading to reduced cache effectiveness
           cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code with the Original Program

Now, I will integrate the checker code into the original C++ program, ensuring that each check is placed at an effective point in the code.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
long long k;
long long ans;
long long dp[266][266];
long long cdp[266][266];
long long tt[266];
long long ttt[266];

void check_large_k_invariant(long long k) {
    if (k > 100000000) { // Arbitrary threshold for large k near its upper limit
        cerr << "Warning: Performance bottleneck condition triggered - large k value!" << endl;
        abort();
    }
}

void check_recursion_invariant(int n) {
    if (n > 200) { // Threshold close to maximum constraint for n
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n) {
    if (n > 200) { // Threshold close to maximum constraint for n
        cerr << "Warning: Performance bottleneck condition triggered - large nested loop execution!" << endl;
        abort();
    }
}

void check_memoization_invariant(int n) {
    if (n > 200) { // High degree of variation leading to reduced cache effectiveness
        cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
        abort();
    }
}

long long f(long long x, int y) {
    if (x == k)
        return tt[y];
    else if (x == k - 1LL)
        return ttt[y];
    else {
        long long val = x;
        long long output = 1LL;
        while (y > 0) {
            if (y % 2 == 1) {
                output *= val;
                output %= 1000000007LL;
            }
            val *= val;
            val %= 1000000007LL;
            y /= 2;
        }
        return output;
    }
}

long long getcdp(int x, int y) {
    if (cdp[x][y] != -1LL) return cdp[x][y];
    if (y > x - y) return cdp[x][y] = getcdp(x, x - y);
    if (y == 0) return cdp[x][y] = 1LL;
    return cdp[x][y] = (getcdp(x - 1, y - 1) + getcdp(x - 1, y)) % 1000000007LL;
}

long long getdp(int x, int a) {
    if (dp[x][a] != -1LL) return dp[x][a];
    if (a == 0LL) {
        long long val = f(k, n) - f(k - 1LL, n) + 1000000007LL;
        val %= 1000000007LL;
        return dp[x][a] = f(val, x);
    }
    if (x == 1LL) {
        return dp[x][a] = f(k, n - a);
    }
    dp[x][a] = f(k, n - a) - f(k - 1LL, n - a) + 1000000007LL;
    dp[x][a] %= 1000000007LL;
    dp[x][a] *= f(k - 1LL, a);
    dp[x][a] %= 1000000007LL;
    dp[x][a] *= getdp(x - 1LL, a);
    dp[x][a] %= 1000000007LL;
    for (int i = 1; i <= a; i++) {
        long long val = getcdp(a, i);
        val *= f(k - 1LL, a - i);
        val %= 1000000007LL;
        val *= getdp(x - 1LL, a - i);
        val %= 1000000007LL;
        val *= f(k, n - a);
        val %= 1000000007LL;
        dp[x][a] += val;
        dp[x][a] %= 1000000007LL;
    }
    return dp[x][a];
}

int main() {
    scanf("%d %lld", &n, &k);

    // Check potential performance bottlenecks
    check_large_k_invariant(k);
    check_recursion_invariant(n);
    check_nested_loop_invariant(n);
    check_memoization_invariant(n);

    if (n == 1LL || k == 1LL) {
        printf("1");
        return 0;
    }
    tt[0] = 1LL;
    ttt[0] = 1LL;
    for (int i = 1; i <= n; i++) {
        tt[i] = tt[i - 1] * k;
        ttt[i] = ttt[i - 1] * (k - 1LL);
        tt[i] %= 1000000007LL;
        ttt[i] %= 1000000007LL;
    }
    memset(dp, -1, sizeof(dp));
    memset(cdp, -1, sizeof(cdp));
    printf("%lld\n", getdp(n, n));
    return 0;
}
```

### Explanation

1. **Invariant Check for Large `k` Values**: This check is placed after reading the input values, ensuring that the program terminates early if `k` is excessively large.

2. **Invariant Checks for Recursion, Nested Loops, and Memoization**: These checks are also placed after input reading but before any heavy computation begins, to prevent unnecessary execution if the conditions for potential slowdowns are met. Each of these checks uses an arbitrary but reasonable threshold to determine when to trigger the warning and abort the program execution.

