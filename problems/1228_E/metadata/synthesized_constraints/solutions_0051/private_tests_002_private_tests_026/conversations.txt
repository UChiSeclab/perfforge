system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int N, K;
using ll = long long;
const ll MOD = 1000000007;
const int MAXN = 250;
ll fact[MAXN + 1], invfact[MAXN + 1];
ll madd(ll a, ll b) { return ((a + b) % MOD + MOD) % MOD; }
ll mmult(ll a, ll b) { return (a * b) % MOD; }
ll modpow(ll x, ll y, ll p) {
  ll res = 1;
  x = x % p;
  if (x == 0) return 0;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
ll modinv(ll x) { return modpow(x, MOD - 2, MOD); }
void calcFact() {
  fact[0] = invfact[0] = 1;
  for (int i = 1; i <= MAXN; i++) {
    fact[i] = (i * fact[i - 1]) % MOD;
    invfact[i] = modinv(fact[i]);
  }
}
ll choose(ll n, ll r) {
  return mmult(fact[n], mmult(invfact[r], invfact[n - r]));
}
ll T[259][259];
int main(void) {
  std::cin >> N >> K;
  if (K == 1) {
    std::cout << "1\n";
    return 0;
  }
  calcFact();
  ll mp1[251];
  ll mp2[251];
  for (int i = 0; i <= N; i++) {
    mp1[i] = modpow(K, i, MOD);
    mp2[i] = modpow(K - 1, i, MOD);
  }
  T[0][0] = 1;
  for (int i = 1; i <= N; i++) {
    T[i][0] =
        mmult(madd(modpow(K, N, MOD), -modpow(K - 1, N, MOD)), T[i - 1][0]);
  }
  for (int j = 1; j <= N; j++) {
    T[1][j] = modpow(K, N - j, MOD);
  }
  for (int i = 2; i <= N; i++) {
    for (int j = 1; j <= N; j++) {
      T[i][j] =
          mmult(T[i - 1][j], mmult(madd(mp1[N - j], -mp2[N - j]), mp2[j]));
      ll tmp = 0;
      for (int k = 1; k <= j; k++) {
        tmp =
            madd(tmp, mmult(mmult(choose(j, k), mp2[j - k]), T[i - 1][j - k]));
      }
      tmp = mmult(tmp, mp1[N - j]);
      T[i][j] = madd(T[i][j], tmp);
    }
  }
  std::cout << T[N][N] << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int N, K; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const ll MOD = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 250; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
ll fact[MAXN + 1], invfact[MAXN + 1]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
ll madd(ll a, ll b) { return ((a + b) % MOD + MOD) % MOD; } /* line 7 slow_hit_count: 7937125, fast_hit_count: 0 */
ll mmult(ll a, ll b) { return (a * b) % MOD; } /* line 8 slow_hit_count: 31436500, fast_hit_count: 0 */
ll modpow(ll x, ll y, ll p) { /* line 9 slow_hit_count: 1502, fast_hit_count: 0 */
  ll res = 1; /* line 10 slow_hit_count: 1502, fast_hit_count: 0 */
  x = x % p; /* line 11 slow_hit_count: 1502, fast_hit_count: 0 */
  if (x == 0) return 0; /* line 12 slow_hit_count: 1502, fast_hit_count: 0 */
  while (y > 0) { /* line 13 slow_hit_count: 18253, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % p; /* line 14 slow_hit_count: 16751, fast_hit_count: 0 */
    y = y >> 1; /* line 15 slow_hit_count: 16751, fast_hit_count: 0 */
    x = (x * x) % p; /* line 16 slow_hit_count: 16751, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 18 slow_hit_count: 1502, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
ll modinv(ll x) { return modpow(x, MOD - 2, MOD); } /* line 20 slow_hit_count: 250, fast_hit_count: 0 */
void calcFact() { /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
  fact[0] = invfact[0] = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= MAXN; i++) { /* line 23 slow_hit_count: 251, fast_hit_count: 0 */
    fact[i] = (i * fact[i - 1]) % MOD; /* line 24 slow_hit_count: 250, fast_hit_count: 0 */
    invfact[i] = modinv(fact[i]); /* line 25 slow_hit_count: 250, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
ll choose(ll n, ll r) { /* line 28 slow_hit_count: 7812375, fast_hit_count: 0 */
  return mmult(fact[n], mmult(invfact[r], invfact[n - r])); /* line 29 slow_hit_count: 7812375, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
ll T[259][259]; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  std::cin >> N >> K; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  if (K == 1) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    std::cout << "1\n"; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  calcFact(); /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  ll mp1[251]; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  ll mp2[251]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= N; i++) { /* line 41 slow_hit_count: 252, fast_hit_count: 0 */
    mp1[i] = modpow(K, i, MOD); /* line 42 slow_hit_count: 251, fast_hit_count: 0 */
    mp2[i] = modpow(K - 1, i, MOD); /* line 43 slow_hit_count: 251, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  T[0][0] = 1; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= N; i++) { /* line 46 slow_hit_count: 251, fast_hit_count: 0 */
    T[i][0] = /* line 47 slow_hit_count: 250, fast_hit_count: 0 */
        mmult(madd(modpow(K, N, MOD), -modpow(K - 1, N, MOD)), T[i - 1][0]); /* line 48 slow_hit_count: 250, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 1; j <= N; j++) { /* line 50 slow_hit_count: 251, fast_hit_count: 0 */
    T[1][j] = modpow(K, N - j, MOD); /* line 51 slow_hit_count: 250, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i <= N; i++) { /* line 53 slow_hit_count: 250, fast_hit_count: 0 */
    for (int j = 1; j <= N; j++) { /* line 54 slow_hit_count: 62499, fast_hit_count: 0 */
      T[i][j] = /* line 55 slow_hit_count: 62250, fast_hit_count: 0 */
          mmult(T[i - 1][j], mmult(madd(mp1[N - j], -mp2[N - j]), mp2[j])); /* line 56 slow_hit_count: 62250, fast_hit_count: 0 */
      ll tmp = 0; /* line 57 slow_hit_count: 62250, fast_hit_count: 0 */
      for (int k = 1; k <= j; k++) { /* line 58 slow_hit_count: 7874625, fast_hit_count: 0 */
        tmp = /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
            madd(tmp, mmult(mmult(choose(j, k), mp2[j - k]), T[i - 1][j - k])); /* line 60 slow_hit_count: 7812375, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      tmp = mmult(tmp, mp1[N - j]); /* line 62 slow_hit_count: 62250, fast_hit_count: 0 */
      T[i][j] = madd(T[i][j], tmp); /* line 63 slow_hit_count: 62250, fast_hit_count: 0 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << T[N][N] << '\n'; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 1, fast_hit_count: 0 */


assistant: Based on the provided hit count information and the problem statement, let's analyze the slow and fast inputs and determine the potential causes of slowdown in the code. Here are the steps and observations for each phase:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Function `modpow`:** This function is called frequently (1502 times) on the slow input but not at all on the fast input. The lines within the `while` loop of `modpow` are also executed many times, indicating that exponentiation with large numbers is a contributor to the slowdown.
   - **Function `choose`:** This line has a substantial number of hits (7812375), indicating frequent combination calculations, which suggests that the nested loop around `choose` is a hotspot.
   - **Nested Loops (lines 53-64):** The nested loops for `i` and `j` (lines 53-64) are executed extensively, especially the inner loop over `k` and associated operations, suggesting that these loops are processing data inefficiently or repetitively for the slow input.

2. **Data Interaction:**
   - The code uses dynamic programming to fill a table `T` which is `n x n` sized, and with `n = 250`, this results in large computations.
   - Operations involving large powers due to high `K` values (`K = 10^9` for the slow input) are computationally expensive, as seen in the calls to `modpow` and `choose`.

3. **Constraints & Problem Size:**
   - The constraints (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^9) allow a significant range of input size and values, but with `K` being extremely large, operations that depend on powers of `K` become bottlenecks due to their complexity.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Based on the observations, here are potential performance-characterizing invariants:

1. **Exponentiation and Large `K`:**
   - **Invariant:** "When the value of `K` is extremely large, operations involving exponentiation (such as computing powers or modular powers) can significantly slow down the program. This is particularly true when these operations are repeated in nested loops, leading to excessive computation time."

2. **Combination Calculations:**
   - **Invariant:** "The program may experience slowdowns when combination (`choose`) operations are performed frequently within nested loops, especially when the loops iterate over a large range (`n` close to 250). This is exacerbated when combined with large powers due to high `K` values."

3. **Nested Loop Complexity:**
   - **Invariant:** "If the grid size `n` is large (close to 250), the nested loop processing for filling the dynamic programming table becomes computationally expensive, especially when combined with operations dependent on large powers of `K`."

4. **Dynamic Programming Table:**
   - **Invariant:** "The program's performance degrades when the dynamic programming table `T` requires extensive updates due to nested iterations, particularly for large grid sizes and high values of `K`, which increase the number of arithmetic operations."

These invariants describe conditions under which the program's performance may degrade, helping to identify future scenarios that could cause similar slowdowns. The focus is on understanding the interaction of input size and operations, particularly those involving large exponentiations and combinations, within nested structures.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: Below is the transformed code based on the performance-characterizing invariants identified earlier. These invariants have been implemented as runtime checks. Let's go through Phase 3 first, where we implement these checks:

### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants:

1. **Exponentiation and Large `K`:**
   - **Checker Code:**
   ```cpp
   void check_large_k_invariant(bool condition) {
       if (condition) {
           std::cerr << "Warning: Performance bottleneck due to large K values!" << std::endl;
           abort();
       }
   }
   ```

2. **Combination Calculations:**
   - **Checker Code:**
   ```cpp
   void check_combination_invariant(bool condition) {
       if (condition) {
           std::cerr << "Warning: Performance bottleneck due to frequent combination calculations!" << std::endl;
           abort();
       }
   }
   ```

3. **Nested Loop Complexity:**
   - **Checker Code:**
   ```cpp
   void check_nested_loops_invariant(bool condition) {
       if (condition) {
           std::cerr << "Warning: Performance bottleneck due to complex nested loops!" << std::endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original program at effective points to catch slow performance triggers:

```cpp
#include <bits/stdc++.h>
int N, K;
using ll = long long;
const ll MOD = 1000000007;
const int MAXN = 250;
ll fact[MAXN + 1], invfact[MAXN + 1];
ll madd(ll a, ll b) { return ((a + b) % MOD + MOD) % MOD; }
ll mmult(ll a, ll b) { return (a * b) % MOD; }
ll modpow(ll x, ll y, ll p) {
  ll res = 1;
  x = x % p;
  if (x == 0) return 0;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
ll modinv(ll x) { return modpow(x, MOD - 2, MOD); }
void calcFact() {
  fact[0] = invfact[0] = 1;
  for (int i = 1; i <= MAXN; i++) {
    fact[i] = (i * fact[i - 1]) % MOD;
    invfact[i] = modinv(fact[i]);
  }
}
ll choose(ll n, ll r) {
  return mmult(fact[n], mmult(invfact[r], invfact[n - r]));
}
ll T[259][259];

// Checker functions
void check_large_k_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck due to large K values!" << std::endl;
        abort();
    }
}

void check_combination_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck due to frequent combination calculations!" << std::endl;
        abort();
    }
}

void check_nested_loops_invariant(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck due to complex nested loops!" << std::endl;
        abort();
    }
}

int main(void) {
  std::cin >> N >> K;
  
  // Check if K is large and might cause slowdowns with modpow
  check_large_k_invariant(K > 1e8); // Example threshold for K

  if (K == 1) {
    std::cout << "1\n";
    return 0;
  }
  
  calcFact();

  ll mp1[251];
  ll mp2[251];
  for (int i = 0; i <= N; i++) {
    mp1[i] = modpow(K, i, MOD);
    mp2[i] = modpow(K - 1, i, MOD);
  }

  // Check nested loops complexity before processing
  check_nested_loops_invariant(N > 200); // Example threshold for N

  T[0][0] = 1;
  for (int i = 1; i <= N; i++) {
    T[i][0] =
        mmult(madd(modpow(K, N, MOD), -modpow(K - 1, N, MOD)), T[i - 1][0]);
  }
  for (int j = 1; j <= N; j++) {
    T[1][j] = modpow(K, N - j, MOD);
  }
  for (int i = 2; i <= N; i++) {
    for (int j = 1; j <= N; j++) {
      T[i][j] =
          mmult(T[i - 1][j], mmult(madd(mp1[N - j], -mp2[N - j]), mp2[j]));
      ll tmp = 0;
      for (int k = 1; k <= j; k++) {
        tmp =
            madd(tmp, mmult(mmult(choose(j, k), mp2[j - k]), T[i - 1][j - k]));
      }
      tmp = mmult(tmp, mp1[N - j]);
      T[i][j] = madd(T[i][j], tmp);
    }
  }

  // Check combination calculations frequency
  check_combination_invariant(T[N][N] > 1e5); // Example threshold for results size

  std::cout << T[N][N] << '\n';
}
```

### Notes:
- **Placement of Checks:** The checks are placed outside the inner loops to avoid adding overhead within tight loops. They are positioned before critical loops or calculations that could lead to performance issues.
- **Threshold Values:** The thresholds chosen for `K` and `N` in the checks are illustrative, based on possible computational expense. These should be adjusted based on further profiling or understanding of the most common bottlenecks.
- **Aborting on Bottlenecks:** Each check warns and aborts the program when a potential bottleneck is detected, which is useful for fuzz-testing and ensuring performance stays optimal.

