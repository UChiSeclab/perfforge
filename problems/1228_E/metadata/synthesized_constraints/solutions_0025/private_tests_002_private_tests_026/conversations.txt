system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 312;
const long long MOD = 1e9 + 7;
long long fexp(long long b, long long e) {
  if (e == 0) return 1;
  if (e & 1LL) return (b * fexp(b, e - 1LL)) % MOD;
  long long a = fexp(b, e >> 1LL);
  return (a * a) % MOD;
}
long long fat[MAXN];
long long inv[MAXN];
long long comb(long long a, long long b) {
  long long ans = (fat[a] * inv[b]) % MOD;
  ans = (ans * inv[a - b]) % MOD;
  return ans;
}
long long n;
long long kpow[MAXN][2];
long long memo[MAXN][MAXN];
long long solve(int col, int row) {
  if (col == 0) return (row == 0);
  long long& p = memo[col][row];
  if (p + 1) return p;
  p = (kpow[n - row][0] * kpow[row][1]) % MOD;
  p *= solve(col - 1, row);
  p %= MOD;
  p -= kpow[n][1] * solve(col - 1, row);
  p %= MOD;
  p += MOD;
  p %= MOD;
  for (long long nxtRow = 0; nxtRow < row; ++nxtRow) {
    long long diff = row - nxtRow;
    long long curr = (kpow[n - row][0] * comb(row, nxtRow)) % MOD;
    curr = (curr * kpow[row - diff][1]) % MOD;
    curr = (curr * solve(col - 1, nxtRow)) % MOD;
    p += curr;
    p %= MOD;
  }
  return p %= MOD;
}
int main() {
  memset(memo, -1, sizeof memo);
  long long k;
  cin >> n >> k;
  if (k == 1) {
    cout << 1 << endl;
    return 0;
  }
  kpow[0][0] = kpow[0][1] = 1;
  for (long long i = 1; i < MAXN; ++i) {
    kpow[i][0] = (k * kpow[i - 1][0]) % MOD;
    kpow[i][1] = ((k - 1LL) * kpow[i - 1][1]) % MOD;
  }
  fat[0] = inv[0] = 1;
  for (long long i = 1; i < MAXN; ++i) {
    fat[i] = (i * fat[i - 1]) % MOD;
    inv[i] = fexp(fat[i], MOD - 2);
  }
  cout << solve(n, n) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 312; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long fexp(long long b, long long e) { /* line 5 slow_hit_count: 13995, fast_hit_count: 0 */
  if (e == 0) return 1; /* line 6 slow_hit_count: 13995, fast_hit_count: 0 */
  if (e & 1LL) return (b * fexp(b, e - 1LL)) % MOD; /* line 7 slow_hit_count: 13684, fast_hit_count: 0 */
  long long a = fexp(b, e >> 1LL); /* line 8 slow_hit_count: 9019, fast_hit_count: 0 */
  return (a * a) % MOD; /* line 9 slow_hit_count: 9019, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long fat[MAXN]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long inv[MAXN]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(long long a, long long b) { /* line 13 slow_hit_count: 7812625, fast_hit_count: 0 */
  long long ans = (fat[a] * inv[b]) % MOD; /* line 14 slow_hit_count: 7812625, fast_hit_count: 0 */
  ans = (ans * inv[a - b]) % MOD; /* line 15 slow_hit_count: 7812625, fast_hit_count: 0 */
  return ans; /* line 16 slow_hit_count: 7812625, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long kpow[MAXN][2]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long memo[MAXN][MAXN]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(int col, int row) { /* line 21 slow_hit_count: 7937626, fast_hit_count: 0 */
  if (col == 0) return (row == 0); /* line 22 slow_hit_count: 7937626, fast_hit_count: 0 */
  long long& p = memo[col][row]; /* line 23 slow_hit_count: 7905749, fast_hit_count: 0 */
  if (p + 1) return p; /* line 24 slow_hit_count: 7905749, fast_hit_count: 0 */
  p = (kpow[n - row][0] * kpow[row][1]) % MOD; /* line 25 slow_hit_count: 62500, fast_hit_count: 0 */
  p *= solve(col - 1, row); /* line 26 slow_hit_count: 62500, fast_hit_count: 0 */
  p %= MOD; /* line 27 slow_hit_count: 62500, fast_hit_count: 0 */
  p -= kpow[n][1] * solve(col - 1, row); /* line 28 slow_hit_count: 62500, fast_hit_count: 0 */
  p %= MOD; /* line 29 slow_hit_count: 62500, fast_hit_count: 0 */
  p += MOD; /* line 30 slow_hit_count: 62500, fast_hit_count: 0 */
  p %= MOD; /* line 31 slow_hit_count: 62500, fast_hit_count: 0 */
  for (long long nxtRow = 0; nxtRow < row; ++nxtRow) { /* line 32 slow_hit_count: 7875125, fast_hit_count: 0 */
    long long diff = row - nxtRow; /* line 33 slow_hit_count: 7812625, fast_hit_count: 0 */
    long long curr = (kpow[n - row][0] * comb(row, nxtRow)) % MOD; /* line 34 slow_hit_count: 7812625, fast_hit_count: 0 */
    curr = (curr * kpow[row - diff][1]) % MOD; /* line 35 slow_hit_count: 7812625, fast_hit_count: 0 */
    curr = (curr * solve(col - 1, nxtRow)) % MOD; /* line 36 slow_hit_count: 7812625, fast_hit_count: 0 */
    p += curr; /* line 37 slow_hit_count: 7812625, fast_hit_count: 0 */
    p %= MOD; /* line 38 slow_hit_count: 7812625, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return p %= MOD; /* line 40 slow_hit_count: 62500, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  memset(memo, -1, sizeof memo); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  long long k; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1) { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 << endl; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  kpow[0][0] = kpow[0][1] = 1; /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i < MAXN; ++i) { /* line 51 slow_hit_count: 312, fast_hit_count: 0 */
    kpow[i][0] = (k * kpow[i - 1][0]) % MOD; /* line 52 slow_hit_count: 311, fast_hit_count: 0 */
    kpow[i][1] = ((k - 1LL) * kpow[i - 1][1]) % MOD; /* line 53 slow_hit_count: 311, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  fat[0] = inv[0] = 1; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i < MAXN; ++i) { /* line 56 slow_hit_count: 312, fast_hit_count: 0 */
    fat[i] = (i * fat[i - 1]) % MOD; /* line 57 slow_hit_count: 311, fast_hit_count: 0 */
    inv[i] = fexp(fat[i], MOD - 2); /* line 58 slow_hit_count: 311, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  cout << solve(n, n) << endl; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the given C program, we can follow the instructions and derive the performance-characterizing invariants based on the hit count information provided for the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - The function `fexp` is heavily used in the slow input, with significant hit counts on lines 5-9. The fast input does not call this function at all.
   - The `solve` function exhibits extremely high hit counts for the slow input, especially lines 21-40. This function is not executed at all for the fast input.
   - The `comb` function is also called frequently in the slow input, contributing to the high calls within the `solve` function.

2. **Pinpoint Problematic Lines**:
   - The `solve` function is recursive and calls itself multiple times, particularly within a loop (lines 32-38).
   - The `comb` function (line 13) is called within the nested loop in `solve`, indicating that combinatorial calculations are a major source of computation.
   - The `fexp` function is frequently invoked to calculate modular inverses in the factorial precomputation (lines 56-59).

3. **Interaction with Data Structures and Loops**:
   - The problem is exacerbated by the recursive nature of the `solve` function, which interacts with combinatorial calculations and modular exponentiations.
   - Recursive calls in `solve` suggest a potential deep recursion path, especially when `n` and `row` are large.
   - The grid size `n` and value range `k` play crucial roles in determining the recursion depth and branching factors.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Descriptions**:
   - **Deep Recursion Path**: "When `n` is large, the recursion in `solve` function can explore a vast search space, leading to high computation costs. The depth and branching factor of recursion grow significantly with larger `n`."
   - **Intensive Combinatorial Calculations**: "If the grid size `n` approaches its upper limit, the combinatorial calculations become intensive, as they are repeatedly calculated for different state combinations within the recursive `solve` function."
   - **Frequent Modular Exponentiation**: "A large value of `k` leads to frequent calls to the `fexp` function, especially during the precomputation of factorial inverses, which can slow down the execution when `k` is maximized."

2. **Considerations & Thresholds**:
   - The grid size `n` can go up to 250, which significantly impacts recursion and loop iterations.
   - The maximum possible value of `k` is very large (`10^9`), affecting the frequency and cost of modular exponentiation operations.
   - The code may slow down when both `n` and `k` are at or near their maximum, due to compounded computational demands from nested loops and recursive function calls.

3. **Broad Conditions for Slow Paths**:
   - "When `n` is close to its maximum value of 250, and the code involves deep recursion combined with heavy combinatorial and modular arithmetic, performance may degrade."
   - "For a large `k`, the frequent recalculations of modular powers can introduce overhead, particularly if the program repeatedly performs these calculations within performance-critical paths."

By understanding these invariants, developers and testers can focus on identifying test cases and configurations that might lead to potential performance bottlenecks, allowing them to optimize or adjust the code accordingly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we will implement checks in C++ to detect potential performance bottlenecks.

#### Invariant 1: Deep Recursion Path
- **Description**: When `n` is large, the recursion in the `solve` function explores a vast search space, leading to high computation costs.
- **Checker Code**:
```cpp
void check_recursion_invariant(int recursionDepth, int n) {
    if (recursionDepth > n * 2) { // Arbitrary threshold based on n
        cerr << "Warning: Recursion invariant triggered - potential deep recursion path!" << endl;
        abort();
    }
}
```

#### Invariant 2: Intensive Combinatorial Calculations
- **Description**: If the grid size `n` approaches its upper limit, the combinatorial calculations become intensive.
- **Checker Code**:
```cpp
void check_combination_invariant(int row, int n) {
    if (row > n * 0.8) { // Arbitrary threshold based on a high percentage of n
        cerr << "Warning: Combination invariant triggered - intensive combinatorial calculations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Frequent Modular Exponentiation
- **Description**: A large value of `k` leads to frequent calls to the `fexp` function, especially during factorial inverses precomputation.
- **Checker Code**:
```cpp
void check_modular_exponentiation_invariant(long long k) {
    if (k > 1e8) { // Threshold indicating complexity due to large k
        cerr << "Warning: Modular exponentiation invariant triggered - large k value!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ code to monitor for performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 312;
const long long MOD = 1e9 + 7;

long long fexp(long long b, long long e) {
  if (e == 0) return 1;
  if (e & 1LL) return (b * fexp(b, e - 1LL)) % MOD;
  long long a = fexp(b, e >> 1LL);
  return (a * a) % MOD;
}

long long fat[MAXN];
long long inv[MAXN];

long long comb(long long a, long long b) {
  long long ans = (fat[a] * inv[b]) % MOD;
  ans = (ans * inv[a - b]) % MOD;
  return ans;
}

long long n;
long long kpow[MAXN][2];
long long memo[MAXN][MAXN];

// Checker functions for performance invariants
void check_recursion_invariant(int recursionDepth, int n) {
    if (recursionDepth > n * 2) {
        cerr << "Warning: Recursion invariant triggered - potential deep recursion path!" << endl;
        abort();
    }
}

void check_combination_invariant(int row, int n) {
    if (row > n * 0.8) {
        cerr << "Warning: Combination invariant triggered - intensive combinatorial calculations!" << endl;
        abort();
    }
}

void check_modular_exponentiation_invariant(long long k) {
    if (k > 1e8) {
        cerr << "Warning: Modular exponentiation invariant triggered - large k value!" << endl;
        abort();
    }
}

long long solve(int col, int row) {
  // Add a recursion depth check
  static int recursionDepth = 0;
  recursionDepth++;
  check_recursion_invariant(recursionDepth, n);

  if (col == 0) return (row == 0);
  long long& p = memo[col][row];
  if (p + 1) return p;

  // Check combination invariant before combinatorial calculations
  check_combination_invariant(row, n);

  p = (kpow[n - row][0] * kpow[row][1]) % MOD;
  p *= solve(col - 1, row);
  p %= MOD;
  p -= kpow[n][1] * solve(col - 1, row);
  p %= MOD;
  p += MOD;
  p %= MOD;
  for (long long nxtRow = 0; nxtRow < row; ++nxtRow) {
    long long diff = row - nxtRow;
    long long curr = (kpow[n - row][0] * comb(row, nxtRow)) % MOD;
    curr = (curr * kpow[row - diff][1]) % MOD;
    curr = (curr * solve(col - 1, nxtRow)) % MOD;
    p += curr;
    p %= MOD;
  }

  recursionDepth--;
  return p %= MOD;
}

int main() {
  memset(memo, -1, sizeof memo);
  long long k;
  cin >> n >> k;

  // Check the modular exponentiation invariant after reading input
  check_modular_exponentiation_invariant(k);

  if (k == 1) {
    cout << 1 << endl;
    return 0;
  }
  
  kpow[0][0] = kpow[0][1] = 1;
  for (long long i = 1; i < MAXN; ++i) {
    kpow[i][0] = (k * kpow[i - 1][0]) % MOD;
    kpow[i][1] = ((k - 1LL) * kpow[i - 1][1]) % MOD;
  }
  
  fat[0] = inv[0] = 1;
  for (long long i = 1; i < MAXN; ++i) {
    fat[i] = (i * fat[i - 1]) % MOD;
    inv[i] = fexp(fat[i], MOD - 2);
  }
  
  cout << solve(n, n) << endl;
  return 0;
}
```

### Explanation:
- **Recursion Invariant**: Added a static recursion depth counter within the `solve` function to track and check depth.
- **Combination Invariant**: Placed before intensive combinatorial calculations within the `solve` function.
- **Modular Exponentiation Invariant**: Checked right after reading input values to capture the potential overhead from large `k`.

