system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 5;
const int mod = 1e9 + 7;
long long qpow(long long a, long long b) {
  long long ans = 1;
  a %= mod;
  assert(b >= 0);
  for (; b; b >>= 1) {
    if (b & 1) ans = ans * a % mod;
    a = a * a % mod;
  }
  return ans;
}
long long gcd(long long a, long long b) { return b > 0 ? gcd(b, a % b) : a; }
int n, m, T;
int a[maxn];
long long dp[300][300];
int fac[maxn], inv[maxn];
int p[maxn], P;
long long C(int x, int y) {
  if (x == y || y == 0) return 1;
  return 1ll * fac[x] * inv[y] % mod * inv[x - y] % mod;
}
long long f[305], g[305];
void init() {
  fac[0] = p[0] = 1;
  for (int i = 1; i < maxn; i++) fac[i] = 1ll * fac[i - 1] * i % mod;
  inv[maxn - 1] = qpow(fac[maxn - 1], mod - 2);
  for (int i = maxn - 2; i >= 0; i--) inv[i] = 1ll * inv[i + 1] * (i + 1) % mod;
  g[0] = inv[0];
  for (int i = 1; i <= 300; i++)
    p[i] = 1ll * p[i - 1] * P % mod, g[i] = qpow(p[i], mod - 2);
  for (int i = 1; i <= 300; i++) {
    for (int j = 0; j <= i; j++) {
      f[i] = (1ll * f[i] + 1ll * C(i, j) * qpow(p[j], mod - 2) % mod) % mod;
    }
  }
}
int main() {
  cin >> n >> P;
  if (P == 1) {
    cout << 1 << endl;
    return 0;
  }
  P -= 1;
  init();
  dp[0][0] = 1;
  for (int i = 1; i <= n; i++) dp[1][i] = 1ll * C(n, i) * g[i] % mod;
  for (int i = 1; i <= n; i++) {
    for (int x = 1; x <= n; x++) {
      dp[i][x] = 1ll * dp[i][x] * p[n] % mod;
      for (int k = 0; k <= n - x; k++) {
        dp[i + 1][x + k] =
            (dp[i + 1][x + k] +
             dp[i][x] * g[k] % mod * C(n - x, k) % mod * f[x] % mod) %
            mod;
        if (k == 0) {
          dp[i + 1][x + k] =
              ((dp[i + 1][x + k] - dp[i][x] % mod) % mod + mod) % mod;
        }
      }
    }
  }
  cout << dp[n][n] % mod << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

250 1000000000


(G.2) Fast Input

250 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 3e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long qpow(long long a, long long b) { /* line 5 slow_hit_count: 45751, fast_hit_count: 0 */
  long long ans = 1; /* line 6 slow_hit_count: 45751, fast_hit_count: 0 */
  a %= mod; /* line 7 slow_hit_count: 45751, fast_hit_count: 0 */
  assert(b >= 0); /* line 8 slow_hit_count: 45751, fast_hit_count: 0 */
  for (; b; b >>= 1) { /* line 9 slow_hit_count: 1418281, fast_hit_count: 0 */
    if (b & 1) ans = ans * a % mod; /* line 10 slow_hit_count: 1372530, fast_hit_count: 0 */
    a = a * a % mod; /* line 11 slow_hit_count: 1372530, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 13 slow_hit_count: 45751, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { return b > 0 ? gcd(b, a % b) : a; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, T; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[300][300]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int fac[maxn], inv[maxn]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int p[maxn], P; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long C(int x, int y) { /* line 21 slow_hit_count: 7889450, fast_hit_count: 0 */
  if (x == y || y == 0) return 1; /* line 22 slow_hit_count: 7889450, fast_hit_count: 0 */
  return 1ll * fac[x] * inv[y] % mod * inv[x - y] % mod; /* line 23 slow_hit_count: 7764099, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
long long f[305], g[305]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  fac[0] = p[0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < maxn; i++) fac[i] = 1ll * fac[i - 1] * i % mod; /* line 28 slow_hit_count: 300005, fast_hit_count: 0 */
  inv[maxn - 1] = qpow(fac[maxn - 1], mod - 2); /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = maxn - 2; i >= 0; i--) inv[i] = 1ll * inv[i + 1] * (i + 1) % mod; /* line 30 slow_hit_count: 300005, fast_hit_count: 0 */
  g[0] = inv[0]; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= 300; i++) /* line 32 slow_hit_count: 301, fast_hit_count: 0 */
    p[i] = 1ll * p[i - 1] * P % mod, g[i] = qpow(p[i], mod - 2); /* line 33 slow_hit_count: 300, fast_hit_count: 0 */
  for (int i = 1; i <= 300; i++) { /* line 34 slow_hit_count: 301, fast_hit_count: 0 */
    for (int j = 0; j <= i; j++) { /* line 35 slow_hit_count: 45750, fast_hit_count: 0 */
      f[i] = (1ll * f[i] + 1ll * C(i, j) * qpow(p[j], mod - 2) % mod) % mod; /* line 36 slow_hit_count: 45450, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
int main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> P; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  if (P == 1) { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 << endl; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  P -= 1; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  init(); /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  dp[0][0] = 1; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) dp[1][i] = 1ll * C(n, i) * g[i] % mod; /* line 49 slow_hit_count: 251, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 50 slow_hit_count: 251, fast_hit_count: 0 */
    for (int x = 1; x <= n; x++) { /* line 51 slow_hit_count: 62750, fast_hit_count: 0 */
      dp[i][x] = 1ll * dp[i][x] * p[n] % mod; /* line 52 slow_hit_count: 62500, fast_hit_count: 0 */
      for (int k = 0; k <= n - x; k++) { /* line 53 slow_hit_count: 7906250, fast_hit_count: 0 */
        dp[i + 1][x + k] = /* line 54 slow_hit_count: 7843750, fast_hit_count: 0 */
            (dp[i + 1][x + k] + /* line 55 slow_hit_count: 15687500, fast_hit_count: 0 */
             dp[i][x] * g[k] % mod * C(n - x, k) % mod * f[x] % mod) % /* line 56 slow_hit_count: 7843750, fast_hit_count: 0 */
            mod; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        if (k == 0) { /* line 58 slow_hit_count: 7843750, fast_hit_count: 0 */
          dp[i + 1][x + k] = /* line 59 slow_hit_count: 62500, fast_hit_count: 0 */
              ((dp[i + 1][x + k] - dp[i][x] % mod) % mod + mod) % mod; /* line 60 slow_hit_count: 62500, fast_hit_count: 0 */
        } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[n][n] % mod << endl; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottleneck in the provided C program, we need to analyze the slow input scenario, figure out where the program slows down, and derive natural language invariants that describe these conditions.

### Phase 1: Identifying Expensive Code Segments

1. **Hit Count Analysis**: 
   - The function `qpow` (lines 5-13) is heavily utilized in the slow input, with significant hit counts on its loop (lines 9-11), suggesting that exponentiation by squaring is a bottleneck.
   - The loop in line 28 for factorial computation and its inverse in lines 29-30 is also heavily hit.
   - The core DP computation (lines 50-60) experiences extremely high hit counts, particularly on nested loops and combinatorial calculations with `C(x, y)` in line 23 and line 56.

2. **Interactions with Data Structures**:
   - The `dp` matrix is heavily involved in nested loop calculations, causing significant overhead due to repeated operations over potentially large indices.
   - Combinatorial calculations (`C`) and power calculations (`qpow`) are frequent in these loops, both contributing to the increased complexity.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis above, here are some performance-characterizing invariants that describe the conditions under which the program is likely to slow down:

1. **Invariant on Large `k` Values**:
   - **Natural Language**: "If the integer `k` is extremely large relative to the constraints, particularly when close to its maximum limit (10^9), the program may face a slowdown due to the increased complexity of power operations and large factor combinations, which are frequently computed in nested loops."
   - **Explanation**: The power calculation function `qpow` becomes a bottleneck due to its logarithmic dependency on `b`, the exponent. A large `k` inflates these computations significantly.

2. **Invariant on Combinatorial Explosion**:
   - **Natural Language**: "When the grid size `n` approaches its upper limit and is combined with large values of `k`, the number of combinations to compute increases substantially, stressing the memory and computation limits."
   - **Explanation**: The nested loops iterate over many combinations of grid placements, which, when coupled with large factorial computations and inversions, severely strain performance.

3. **Invariant on Nested Loop Complexity**:
   - **Natural Language**: "For large grid sizes `n`, the nested dynamic programming loops calculating multiple states can lead to significant slowdowns as they have to handle a vast number of potential configurations."
   - **Explanation**: The repeated updates and recalculations of the `dp` matrix, especially with combinations and power calculations, contribute to high execution times.

These invariants capture the key conditions that lead to the program's inefficiency, focusing on input values like `k` and `n` that hit computational limits. Adjusting these conditions in a fuzzer can help detect similar slow performance scenarios in future tests.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have n × n square grid and an integer k. Put an integer in each cell while satisfying the conditions below.

  * All numbers in the grid should be between 1 and k inclusive. 
  * Minimum number of the i-th row is 1 (1 ≤ i ≤ n). 
  * Minimum number of the j-th column is 1 (1 ≤ j ≤ n). 



Find the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (10^{9} + 7).

<image> These are the examples of valid and invalid grid when n=k=2. 

Input

The only line contains two integers n and k (1 ≤ n ≤ 250, 1 ≤ k ≤ 10^{9}).

Output

Print the answer modulo (10^{9} + 7).

Examples

Input


2 2


Output


7


Input


123 456789


Output


689974806

Note

In the first example, following 7 cases are possible.

<image>

In the second example, make sure you print the answer modulo (10^{9} + 7).

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the checker code based on the performance-characterizing invariants identified earlier and then integrate them into the C++ program.

### Phase 3: Implementing Checker Code in C++

Below are the C++ code snippets that implement the performance-characterizing invariants for the bottlenecks identified:

```cpp
// Checker for large `k` values
void check_large_k_invariant(long long k) {
    if (k > (long long)1e6) { // Arbitrary chosen threshold; `k` can be large but this is indicative for potential performance issues
        cerr << "Warning: Performance bottleneck condition triggered due to large k!" << endl;
        abort();
    }
}

// Checker for nested loop complexity with large `n`
void check_large_n_invariant(int n) {
    if (n > 200) { // Based on n's upper limit in the problem
        cerr << "Warning: Performance bottleneck condition triggered due to large n in nested loops!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original C++ Program

Now, we'll integrate these checkers into the provided C++ program. We'll place the checks after reading input values to minimize performance overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 5;
const int mod = 1e9 + 7;

// Checker for large `k` values
void check_large_k_invariant(long long k) {
    if (k > (long long)1e6) { // Arbitrary chosen threshold; `k` can be large but this is indicative for potential performance issues
        cerr << "Warning: Performance bottleneck condition triggered due to large k!" << endl;
        abort();
    }
}

// Checker for nested loop complexity with large `n`
void check_large_n_invariant(int n) {
    if (n > 200) { // Based on n's upper limit in the problem
        cerr << "Warning: Performance bottleneck condition triggered due to large n in nested loops!" << endl;
        abort();
    }
}

long long qpow(long long a, long long b) {
    long long ans = 1;
    a %= mod;
    assert(b >= 0);
    for (; b; b >>= 1) {
        if (b & 1) ans = ans * a % mod;
        a = a * a % mod;
    }
    return ans;
}

long long gcd(long long a, long long b) { return b > 0 ? gcd(b, a % b) : a; }

int n, m, T;
int a[maxn];
long long dp[300][300];
int fac[maxn], inv[maxn];
int p[maxn], P;

long long C(int x, int y) {
    if (x == y || y == 0) return 1;
    return 1ll * fac[x] * inv[y] % mod * inv[x - y] % mod;
}

long long f[305], g[305];

void init() {
    fac[0] = p[0] = 1;
    for (int i = 1; i < maxn; i++) fac[i] = 1ll * fac[i - 1] * i % mod;
    inv[maxn - 1] = qpow(fac[maxn - 1], mod - 2);
    for (int i = maxn - 2; i >= 0; i--) inv[i] = 1ll * inv[i + 1] * (i + 1) % mod;
    g[0] = inv[0];
    for (int i = 1; i <= 300; i++)
        p[i] = 1ll * p[i - 1] * P % mod, g[i] = qpow(p[i], mod - 2);
    for (int i = 1; i <= 300; i++) {
        for (int j = 0; j <= i; j++) {
            f[i] = (1ll * f[i] + 1ll * C(i, j) * qpow(p[j], mod - 2) % mod) % mod;
        }
    }
}

int main() {
    cin >> n >> P;
    
    // Insert checker for large k value
    check_large_k_invariant(P);
    
    // Insert checker for large n value in nested loops
    check_large_n_invariant(n);
    
    if (P == 1) {
        cout << 1 << endl;
        return 0;
    }
    P -= 1;
    init();
    dp[0][0] = 1;
    for (int i = 1; i <= n; i++) dp[1][i] = 1ll * C(n, i) * g[i] % mod;
    for (int i = 1; i <= n; i++) {
        for (int x = 1; x <= n; x++) {
            dp[i][x] = 1ll * dp[i][x] * p[n] % mod;
            for (int k = 0; k <= n - x; k++) {
                dp[i + 1][x + k] =
                    (dp[i + 1][x + k] +
                     dp[i][x] * g[k] % mod * C(n - x, k) % mod * f[x] % mod) %
                    mod;
                if (k == 0) {
                    dp[i + 1][x + k] =
                        ((dp[i + 1][x + k] - dp[i][x] % mod) % mod + mod) % mod;
                }
            }
        }
    }
    cout << dp[n][n] % mod << endl;
    return 0;
}
```

### Explanation

- **check_large_k_invariant**: This function checks the value of `k` and triggers a warning if it exceeds a large threshold, indicating potential performance issues due to power operations.
- **check_large_n_invariant**: This function checks if `n` is large, potentially triggering a bottleneck due to extensive nested loop computations.

These checks are integrated immediately after reading the input to ensure they do not interfere with the main computational loops, hence maintaining performance without adding significant overhead.

