system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2000;
const long long MOD = 998244353;
long long dp[MAXN][MAXN], a[MAXN][MAXN], dpp, xp, xpp, yp, ypp;
int n, m, cnt;
pair<long long, long long> id[MAXN * MAXN];
long long pw(long long a, long long b) {
  if (b == 0) return 1LL;
  return pw(a * a % MOD, b / 2) * (b % 2 ? a : 1LL) % MOD;
}
bool cmp(pair<int, int> x, pair<int, int> y) {
  return a[x.first][x.second] < a[y.first][y.second];
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++) cin >> a[i][j], id[cnt++] = make_pair(i, j);
  sort(id, id + cnt, cmp);
  int pt = 0;
  for (int i = 0, pt = 0; i < cnt; i = pt = pt + 1) {
    while (a[id[i].first][id[i].second] ==
           a[id[pt + 1].first][id[pt + 1].second])
      pt++;
    for (int j = i; j <= pt; j++) {
      long long x = id[j].first, y = id[j].second;
      dp[x][y] = ((x * x * i % MOD + y * y * i % MOD + dpp - 2 * x * xp % MOD -
                   2 * y * yp + xpp + ypp) %
                      MOD +
                  MOD) %
                 MOD;
      dp[x][y] = dp[x][y] * pw(i, MOD - 2) % MOD;
    }
    for (int j = i; j <= pt; j++) {
      long long x = id[j].first, y = id[j].second;
      dpp = (dpp + dp[x][y]) % MOD;
      xp = (xp + x) % MOD;
      yp = (yp + y) % MOD;
      xpp = (xpp + x * x) % MOD;
      ypp = (ypp + y * y) % MOD;
    }
  }
  long long r, c;
  cin >> r >> c;
  cout << dp[r][c] << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13 8
5 7 7 7 3 1 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 0
7 10 9 8 6 7 5 8
1 6 4 2 4 9 3 10
10 4 4 6 5 6 6 4
7 5 3 9 8 5 1 3
13 6 1 9 10 5 3 7
6 3 7 6 9 9 1 6
8 6 5 9 1 9 2 1
1 8 2 8 9 7 3 3
7 2 2 4 4 6 7 10
7 8 6 10 2 6 10 9
1 6


(G.2) Fast Input

2 3
1 5 7
2 3 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 2000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MAXN][MAXN], a[MAXN][MAXN], dpp, xp, xpp, yp, ypp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, cnt; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> id[MAXN * MAXN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long pw(long long a, long long b) { /* line 8 slow_hit_count: 3224, fast_hit_count: 186 */
  if (b == 0) return 1LL; /* line 9 slow_hit_count: 3224, fast_hit_count: 186 */
  return pw(a * a % MOD, b / 2) * (b % 2 ? a : 1LL) % MOD; /* line 10 slow_hit_count: 3120, fast_hit_count: 180 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(pair<int, int> x, pair<int, int> y) { /* line 12 slow_hit_count: 663, fast_hit_count: 18 */
  return a[x.first][x.second] < a[y.first][y.second]; /* line 13 slow_hit_count: 663, fast_hit_count: 18 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 20 slow_hit_count: 14, fast_hit_count: 3 */
    for (int j = 1; j <= m; j++) cin >> a[i][j], id[cnt++] = make_pair(i, j); /* line 21 slow_hit_count: 117, fast_hit_count: 8 */
  sort(id, id + cnt, cmp); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int pt = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0, pt = 0; i < cnt; i = pt = pt + 1) { /* line 24 slow_hit_count: 13, fast_hit_count: 6 */
    while (a[id[i].first][id[i].second] == /* line 25 slow_hit_count: 196, fast_hit_count: 7 */
           a[id[pt + 1].first][id[pt + 1].second]) /* line 26 slow_hit_count: 104, fast_hit_count: 6 */
      pt++; /* line 27 slow_hit_count: 92, fast_hit_count: 1 */
    for (int j = i; j <= pt; j++) { /* line 28 slow_hit_count: 116, fast_hit_count: 11 */
      long long x = id[j].first, y = id[j].second; /* line 29 slow_hit_count: 104, fast_hit_count: 6 */
      dp[x][y] = ((x * x * i % MOD + y * y * i % MOD + dpp - 2 * x * xp % MOD - /* line 30 slow_hit_count: 104, fast_hit_count: 6 */
                   2 * y * yp + xpp + ypp) % /* line 31 slow_hit_count: 104, fast_hit_count: 6 */
                      MOD + /* line 32 slow_hit_count: 104, fast_hit_count: 6 */
                  MOD) % /* line 33 slow_hit_count: 104, fast_hit_count: 6 */
                 MOD; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      dp[x][y] = dp[x][y] * pw(i, MOD - 2) % MOD; /* line 35 slow_hit_count: 104, fast_hit_count: 6 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = i; j <= pt; j++) { /* line 37 slow_hit_count: 116, fast_hit_count: 11 */
      long long x = id[j].first, y = id[j].second; /* line 38 slow_hit_count: 104, fast_hit_count: 6 */
      dpp = (dpp + dp[x][y]) % MOD; /* line 39 slow_hit_count: 104, fast_hit_count: 6 */
      xp = (xp + x) % MOD; /* line 40 slow_hit_count: 104, fast_hit_count: 6 */
      yp = (yp + y) % MOD; /* line 41 slow_hit_count: 104, fast_hit_count: 6 */
      xpp = (xpp + x * x) % MOD; /* line 42 slow_hit_count: 104, fast_hit_count: 6 */
      ypp = (ypp + y * y) % MOD; /* line 43 slow_hit_count: 104, fast_hit_count: 6 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  long long r, c; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> r >> c; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dp[r][c] << '\n'; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly with the slow input and to derive performance-characterizing invariants, we need to analyze the code and the hit count data. Here's how we can go about it:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `pw`:** This recursive function calculates a power with modulo. It has a significantly higher hit count (3224) for the slow input compared to the fast input (186). It is called within a loop in line 35, suggesting that repeated calls to `pw` with large exponents may contribute to the slowdown.

2. **Sorting and Processing Elements:**
   - **Line 22 (`sort` function):** Sorting is called once for both inputs, but slow input has higher element counts. Sorting complexity is O(n log n) where n is the number of elements.
   - **Lines 25-27 (`while` loop):** This loop increments `pt`, counting elements with the same value. For slow input, this loop is hit 196 times versus 7 times for the fast input, indicating many elements with the same value.
   - **Nested `for` loops (lines 28-43):** The first loop adjusts for elements with equal values, while the second one accumulates values. These are linearly dependent on the number of elements. The high hit counts (104 for each line versus 6 for fast input) indicate that the algorithm processes many elements with similar values.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are potential natural language invariants that describe conditions under which slowdown occurs:

1. **Repeated Power Calculations:**
   - **Invariant:** "If the algorithm frequently recalculates powers with large exponents during matrix processing, especially in nested loops, it may lead to performance degradation."
   - **Explanation:** The `pw` function is called repeatedly with potentially large values, increasing computational cost significantly.

2. **Sorting and Handling of Duplicate Values:**
   - **Invariant:** "If the matrix contains many elements of the same value, resulting in frequent sorting and grouping operations, the performance may degrade due to increased processing time."
   - **Explanation:** The `sort` operation and subsequent handling of elements with identical values are intensive, contributing to slow execution.

3. **Loop Complexity with Element Grouping:**
   - **Invariant:** "When large groups of matrix elements have identical values, leading to extensive iteration over these groups, the algorithm may experience a slowdown due to repeated calculations within nested loops."
   - **Explanation:** The nested loops in lines 28-43 perform several calculations for elements with the same value, significantly increasing processing time when many such groups exist.

These invariants highlight the potential triggers for slow performance in the given C code. They focus on abstract patterns and conditions rather than specific input values, making them useful for identifying other potential slow scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants identified earlier into C++ checker code.

#### Invariant 1: Repeated Power Calculations
- **Invariant:** "If the algorithm frequently recalculates powers with large exponents during matrix processing, especially in nested loops, it may lead to performance degradation."

```cpp
void check_power_calculation_invariant(int exponent) {
    if (exponent > 1000) {  // Arbitrary threshold for large exponents
        cerr << "Warning: Performance bottleneck condition triggered - large power calculations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Sorting and Handling of Duplicate Values
- **Invariant:** "If the matrix contains many elements of the same value, resulting in frequent sorting and grouping operations, the performance may degrade due to increased processing time."

```cpp
void check_sorting_invariant(int elementCount, int duplicateCount) {
    if (elementCount > 500 && duplicateCount > elementCount / 2) {  // Arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting and handling of duplicates!" << endl;
        abort();
    }
}
```

#### Invariant 3: Loop Complexity with Element Grouping
- **Invariant:** "When large groups of matrix elements have identical values, leading to extensive iteration over these groups, the algorithm may experience a slowdown due to repeated calculations within nested loops."

```cpp
void check_grouping_invariant(int groupSize) {
    if (groupSize > 50) {  // Arbitrary threshold for large groups
        cerr << "Warning: Performance bottleneck condition triggered - large element groups in nested loops!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, let's integrate these checks into the provided C++ program. We will place the checks at strategic points to detect potential performance bottlenecks without adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2000;
const long long MOD = 998244353;
long long dp[MAXN][MAXN], a[MAXN][MAXN], dpp, xp, xpp, yp, ypp;
int n, m, cnt;
pair<long long, long long> id[MAXN * MAXN];

long long pw(long long a, long long b) {
    check_power_calculation_invariant(b);  // Check for large exponent in power calculation
    if (b == 0) return 1LL;
    return pw(a * a % MOD, b / 2) * (b % 2 ? a : 1LL) % MOD;
}

bool cmp(pair<int, int> x, pair<int, int> y) {
    return a[x.first][x.second] < a[y.first][y.second];
}

void check_power_calculation_invariant(int exponent) {
    if (exponent > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - large power calculations!" << endl;
        abort();
    }
}

void check_sorting_invariant(int elementCount, int duplicateCount) {
    if (elementCount > 500 && duplicateCount > elementCount / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting and handling of duplicates!" << endl;
        abort();
    }
}

void check_grouping_invariant(int groupSize) {
    if (groupSize > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - large element groups in nested loops!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++) cin >> a[i][j], id[cnt++] = make_pair(i, j);
    
    sort(id, id + cnt, cmp);
    check_sorting_invariant(cnt, cnt);  // Assume potential duplicates for simplicity

    int pt = 0;
    for (int i = 0, pt = 0; i < cnt; i = pt = pt + 1) {
        while (a[id[i].first][id[i].second] == a[id[pt + 1].first][id[pt + 1].second])
            pt++;
        check_grouping_invariant(pt - i + 1);  // Check size of current group of elements

        for (int j = i; j <= pt; j++) {
            long long x = id[j].first, y = id[j].second;
            dp[x][y] = ((x * x * i % MOD + y * y * i % MOD + dpp - 2 * x * xp % MOD -
                         2 * y * yp + xpp + ypp) % MOD + MOD) % MOD;
            dp[x][y] = dp[x][y] * pw(i, MOD - 2) % MOD;
        }
        for (int j = i; j <= pt; j++) {
            long long x = id[j].first, y = id[j].second;
            dpp = (dpp + dp[x][y]) % MOD;
            xp = (xp + x) % MOD;
            yp = (yp + y) % MOD;
            xpp = (xpp + x * x) % MOD;
            ypp = (ypp + y * y) % MOD;
        }
    }
    long long r, c;
    cin >> r >> c;
    cout << dp[r][c] << '\n';
    return 0;
}
```

**Note:** The inserted checks use arbitrary thresholds to detect potential performance bottlenecks. These thresholds are adjustable based on further performance analysis and testing. Each check is placed strategically to avoid significant overhead, usually before potential heavy operations or calculations.

