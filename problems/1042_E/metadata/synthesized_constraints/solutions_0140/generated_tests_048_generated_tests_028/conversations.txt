system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m;
long long arr[1005][1005];
long long dp[1005][1005];
long long fastpow(long long base, long long power) {
  if (!power) return 1;
  long long ret = fastpow(base, power / 2);
  ret = (ret * ret) % 998244353;
  if (power & 1) ret = (ret * ((base) % 998244353)) % 998244353;
  return ret;
}
long long mul(long long a, long long b) {
  long long ret = (a % 998244353) * (b % 998244353);
  while (ret < 0) ret += 998244353;
  ret %= 998244353;
  return ret;
}
long long add(long long a, long long b) {
  while (a < 0) a += 998244353;
  while (b < 0) b += 998244353;
  long long ret = ((a % 998244353) + (b % 998244353));
  while (ret < 0) ret += 998244353;
  ret %= 998244353;
  return ret;
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  vector<pair<int, pair<int, int>>> vec;
  vector<int> i2, j2, i, j, ans;
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      cin >> arr[i][j];
      vec.push_back({arr[i][j], {i, j}});
    }
  }
  int r, c;
  cin >> r >> c;
  sort(vec.begin(), vec.end());
  for (int z = 0; z < n * m; z++) {
    i.push_back(vec[z].second.first);
    j.push_back(vec[z].second.second);
    i2.push_back(mul(vec[z].second.first, vec[z].second.first));
    j2.push_back(mul(vec[z].second.second, vec[z].second.second));
    ans.push_back(0);
    if (z)
      i[z] = add(i[z], i[z - 1]), j[z] = add(j[z], j[z - 1]),
      i2[z] = add(i2[z], i2[z - 1]), j2[z] = add(j2[z], j2[z - 1]);
  }
  for (int z = 0; z < n * m; z++) {
    int curx = vec[z].second.first, cury = vec[z].second.second;
    int have = -1, x2 = 0, y2 = 0, x = 0, y = 0, sol = 0, have2 = 0;
    int st = 0, en = z - 1;
    while (st <= en) {
      int mid = (st + en) / 2;
      if (vec[mid].first == vec[z].first)
        en = mid - 1;
      else
        st = mid + 1, have = mid;
    }
    have++;
    if (!have) continue;
    x = i[have - 1], y = j[have - 1], x2 = i2[have - 1], y2 = j2[have - 1],
    sol = ans[have - 1];
    have2 = fastpow(have, 998244353 - 2);
    int newHave = add(mul(-2, mul(x, curx)), mul(-2, mul(y, cury)));
    newHave = add(newHave, x2);
    newHave = add(newHave, y2);
    newHave = add(newHave, mul(have, mul(curx, curx)));
    newHave = add(newHave, mul(have, mul(cury, cury)));
    newHave = add(newHave, sol);
    newHave = mul(newHave, have2);
    ans[z] = newHave;
    if (ans[z]) ans[z] = add(ans[z], ans[z - 1]);
    if (curx == r && cury == c) {
      cout << newHave;
      return 0;
    }
  }
  cout << 0;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13 8
5 8 7 7 9 0 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 5
7 10 9 8 6 7 5 8
1 6 4 2 4 5 3 10
10 4 4 0 5 6 6 4
7 5 5 9 8 5 1 3
9 6 1 9 10 4 3 7
3 3 7 6 9 9 1 7
8 6 5 9 1 9 2 1
1 8 2 8 9 7 6 3
7 2 2 4 4 6 12 10
7 8 6 10 2 6 10 9
1 6


(G.2) Fast Input

13 8
5 7 7 7 9 1 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 5
7 10 9 8 6 7 5 8
1 6 4 2 4 5 3 10
10 4 4 0 5 6 6 4
7 5 5 9 8 5 1 3
9 6 1 9 10 4 3 7
3 3 7 6 9 9 1 7
8 6 5 9 1 9 2 1
1 8 2 8 9 7 6 3
7 2 2 4 4 6 12 10
7 8 6 10 2 6 10 9
1 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long arr[1005][1005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[1005][1005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long fastpow(long long base, long long power) { /* line 6 slow_hit_count: 3162, fast_hit_count: 31 */
  if (!power) return 1; /* line 7 slow_hit_count: 3162, fast_hit_count: 31 */
  long long ret = fastpow(base, power / 2); /* line 8 slow_hit_count: 3060, fast_hit_count: 30 */
  ret = (ret * ret) % 998244353; /* line 9 slow_hit_count: 3060, fast_hit_count: 30 */
  if (power & 1) ret = (ret * ((base) % 998244353)) % 998244353; /* line 10 slow_hit_count: 3060, fast_hit_count: 30 */
  return ret; /* line 11 slow_hit_count: 3060, fast_hit_count: 30 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long mul(long long a, long long b) { /* line 13 slow_hit_count: 1126, fast_hit_count: 217 */
  long long ret = (a % 998244353) * (b % 998244353); /* line 14 slow_hit_count: 1126, fast_hit_count: 217 */
  while (ret < 0) ret += 998244353; /* line 15 slow_hit_count: 1330, fast_hit_count: 219 */
  ret %= 998244353; /* line 16 slow_hit_count: 1126, fast_hit_count: 217 */
  return ret; /* line 17 slow_hit_count: 1126, fast_hit_count: 217 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long add(long long a, long long b) { /* line 19 slow_hit_count: 1126, fast_hit_count: 419 */
  while (a < 0) a += 998244353; /* line 20 slow_hit_count: 1126, fast_hit_count: 419 */
  while (b < 0) b += 998244353; /* line 21 slow_hit_count: 1126, fast_hit_count: 419 */
  long long ret = ((a % 998244353) + (b % 998244353)); /* line 22 slow_hit_count: 1126, fast_hit_count: 419 */
  while (ret < 0) ret += 998244353; /* line 23 slow_hit_count: 1126, fast_hit_count: 419 */
  ret %= 998244353; /* line 24 slow_hit_count: 1126, fast_hit_count: 419 */
  return ret; /* line 25 slow_hit_count: 1126, fast_hit_count: 419 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, pair<int, int>>> vec; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> i2, j2, i, j, ans; /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n >> m; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 14, fast_hit_count: 14 */
    for (int j = 1; j <= m; j++) { /* line 33 slow_hit_count: 117, fast_hit_count: 117 */
      cin >> arr[i][j]; /* line 34 slow_hit_count: 104, fast_hit_count: 104 */
      vec.push_back({arr[i][j], {i, j}}); /* line 35 slow_hit_count: 104, fast_hit_count: 104 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  int r, c; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> r >> c; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  sort(vec.begin(), vec.end()); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int z = 0; z < n * m; z++) { /* line 41 slow_hit_count: 105, fast_hit_count: 105 */
    i.push_back(vec[z].second.first); /* line 42 slow_hit_count: 104, fast_hit_count: 104 */
    j.push_back(vec[z].second.second); /* line 43 slow_hit_count: 104, fast_hit_count: 104 */
    i2.push_back(mul(vec[z].second.first, vec[z].second.first)); /* line 44 slow_hit_count: 104, fast_hit_count: 104 */
    j2.push_back(mul(vec[z].second.second, vec[z].second.second)); /* line 45 slow_hit_count: 104, fast_hit_count: 104 */
    ans.push_back(0); /* line 46 slow_hit_count: 104, fast_hit_count: 104 */
    if (z) /* line 47 slow_hit_count: 104, fast_hit_count: 104 */
      i[z] = add(i[z], i[z - 1]), j[z] = add(j[z], j[z - 1]), /* line 48 slow_hit_count: 206, fast_hit_count: 206 */
      i2[z] = add(i2[z], i2[z - 1]), j2[z] = add(j2[z], j2[z - 1]); /* line 49 slow_hit_count: 206, fast_hit_count: 206 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (int z = 0; z < n * m; z++) { /* line 51 slow_hit_count: 105, fast_hit_count: 2 */
    int curx = vec[z].second.first, cury = vec[z].second.second; /* line 52 slow_hit_count: 104, fast_hit_count: 2 */
    int have = -1, x2 = 0, y2 = 0, x = 0, y = 0, sol = 0, have2 = 0; /* line 53 slow_hit_count: 104, fast_hit_count: 2 */
    int st = 0, en = z - 1; /* line 54 slow_hit_count: 104, fast_hit_count: 2 */
    while (st <= en) { /* line 55 slow_hit_count: 672, fast_hit_count: 3 */
      int mid = (st + en) / 2; /* line 56 slow_hit_count: 568, fast_hit_count: 1 */
      if (vec[mid].first == vec[z].first) /* line 57 slow_hit_count: 568, fast_hit_count: 1 */
        en = mid - 1; /* line 58 slow_hit_count: 149, fast_hit_count: 0 */
      else /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        st = mid + 1, have = mid; /* line 60 slow_hit_count: 419, fast_hit_count: 1 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    have++; /* line 62 slow_hit_count: 104, fast_hit_count: 2 */
    if (!have) continue; /* line 63 slow_hit_count: 104, fast_hit_count: 2 */
    x = i[have - 1], y = j[have - 1], x2 = i2[have - 1], y2 = j2[have - 1], /* line 64 slow_hit_count: 102, fast_hit_count: 1 */
    sol = ans[have - 1]; /* line 65 slow_hit_count: 102, fast_hit_count: 1 */
    have2 = fastpow(have, 998244353 - 2); /* line 66 slow_hit_count: 102, fast_hit_count: 1 */
    int newHave = add(mul(-2, mul(x, curx)), mul(-2, mul(y, cury))); /* line 67 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = add(newHave, x2); /* line 68 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = add(newHave, y2); /* line 69 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = add(newHave, mul(have, mul(curx, curx))); /* line 70 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = add(newHave, mul(have, mul(cury, cury))); /* line 71 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = add(newHave, sol); /* line 72 slow_hit_count: 102, fast_hit_count: 1 */
    newHave = mul(newHave, have2); /* line 73 slow_hit_count: 102, fast_hit_count: 1 */
    ans[z] = newHave; /* line 74 slow_hit_count: 102, fast_hit_count: 1 */
    if (ans[z]) ans[z] = add(ans[z], ans[z - 1]); /* line 75 slow_hit_count: 102, fast_hit_count: 1 */
    if (curx == r && cury == c) { /* line 76 slow_hit_count: 102, fast_hit_count: 1 */
      cout << newHave; /* line 77 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 78 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  cout << 0; /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 83 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks and propose performance-characterizing invariants, let's analyze the provided C code and hit count information for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Differences**:
   - The `fastpow` function is called significantly more often in the slow input (3162 times) compared to the fast input (31 times). This suggests it's a potential bottleneck.
   - The loop starting on line 51 is executed 105 times for the slow input, but it is effectively bypassed (executed 2 times) for the fast input. This indicates that the slow input causes the main loop to iterate more extensively.

2. **Binary Search Within the Loop**:
   - The binary search portion (lines 55-60) executes 672 times for the slow input, but only 3 times for the fast input. This suggests that the binary search process is a pivotal part of the slowdown.

3. **Matrix Processing**:
   - The operations involving `mul` and `add` are executed more frequently in the slow input. Specifically, these operations are heavily involved in updating partial sums and scores within the main loop, indicating them as hotspots.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants that could explain the slow performance:

1. **Repetitive Power Calculations**:
   - **Invariant**: "If a computationally intensive function like `fastpow` is called frequently within the main loop, particularly with large exponents, the program may experience significant slowdowns."
   - **Reasoning**: The `fastpow` function is used to compute modular inverses repeatedly. If many elements need to be processed (e.g., large segments of similar values), this function's overhead accumulates, leading to slowdown.

2. **Inefficient Search and Sorting**:
   - **Invariant**: "When the matrix data necessitates sorting or searching over a large number of elements with similar values, resulting in extensive iterative comparisons, the performance could degrade."
   - **Reasoning**: The binary search logic, combined with the existing sorting operation, leads to numerous comparisons when values are similar, causing increased processing time.

3. **Extensive Matrix Operations**:
   - **Invariant**: "If the matrix contains many elements with values less than the starting chip position, resulting in repeated updates and calculations of partial sums, the program may slow significantly."
   - **Reasoning**: The code repeatedly calculates positions and distances which add computational overhead, especially if many potentially lower-value elements are present.

4. **High Frequency of Value Comparisons and Updates**:
   - **Invariant**: "When the process requires frequent updates to cumulative sums for indices and their squares due to many qualifying elements, the cumulative cost of these operations can lead to slowdowns."
   - **Reasoning**: The loops updating the vectors `i`, `j`, `i2`, `j2` and calculating `ans` involve repeated arithmetic, which becomes costly in scenarios with many qualifying elements.

These invariants abstractly describe the conditions leading to slower performance, without relying on specific values from the slow input. They help identify the critical operations that, when triggered by certain input patterns, result in noticeable slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checkers in C++

Below are the C++ code snippets implementing checkers for the performance-characterizing invariants derived previously:

1. **Repetitive Power Calculations**:
   - Checker for frequent calls to `fastpow` within a loop:
   ```cpp
   void check_fastpow_invariant(int callCount, int threshold) {
       if (callCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive fastpow calls!" << endl;
           abort();
       }
   }
   ```

2. **Inefficient Search and Sorting**:
   - Checker for extensive binary search operations:
   ```cpp
   void check_search_invariant(int searchCount, int threshold) {
       if (searchCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive binary search operations!" << endl;
           abort();
       }
   }
   ```

3. **Extensive Matrix Operations**:
   - Checker for large number of elements processed:
   ```cpp
   void check_matrix_operations_invariant(int elementCount, int threshold) {
       if (elementCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to extensive matrix operations!" << endl;
           abort();
       }
   }
   ```

4. **High Frequency of Value Comparisons and Updates**:
   - Checker for frequent updates to cumulative sums:
   ```cpp
   void check_update_invariant(int updateCount, int threshold) {
       if (updateCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to frequent updates!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the checker functions integrated to monitor performance bottlenecks effectively:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m;
long long arr[1005][1005];
long long dp[1005][1005];

// Checker Function Definitions
void check_fastpow_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive fastpow calls!" << endl;
        abort();
    }
}

void check_search_invariant(int searchCount, int threshold) {
    if (searchCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive binary search operations!" << endl;
        abort();
    }
}

void check_matrix_operations_invariant(int elementCount, int threshold) {
    if (elementCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive matrix operations!" << endl;
        abort();
    }
}

void check_update_invariant(int updateCount, int threshold) {
    if (updateCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to frequent updates!" << endl;
        abort();
    }
}

long long fastpow(long long base, long long power) {
    static int fastpow_calls = 0;
    fastpow_calls++;
    check_fastpow_invariant(fastpow_calls, 1000); // Arbitrary threshold for excessive calls

    if (!power) return 1;
    long long ret = fastpow(base, power / 2);
    ret = (ret * ret) % 998244353;
    if (power & 1) ret = (ret * ((base) % 998244353)) % 998244353;
    return ret;
}

long long mul(long long a, long long b) {
    long long ret = (a % 998244353) * (b % 998244353);
    while (ret < 0) ret += 998244353;
    ret %= 998244353;
    return ret;
}

long long add(long long a, long long b) {
    while (a < 0) a += 998244353;
    while (b < 0) b += 998244353;
    long long ret = ((a % 998244353) + (b % 998244353));
    while (ret < 0) ret += 998244353;
    ret %= 998244353;
    return ret;
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    vector<pair<int, pair<int, int>>> vec;
    vector<int> i2, j2, i, j, ans;
    cin >> n >> m;

    check_matrix_operations_invariant(n * m, 1000000); // Threshold for extensive matrix operations

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> arr[i][j];
            vec.push_back({arr[i][j], {i, j}});
        }
    }

    int r, c;
    cin >> r >> c;
    sort(vec.begin(), vec.end());

    for (int z = 0; z < n * m; z++) {
        i.push_back(vec[z].second.first);
        j.push_back(vec[z].second.second);
        i2.push_back(mul(vec[z].second.first, vec[z].second.first));
        j2.push_back(mul(vec[z].second.second, vec[z].second.second));
        ans.push_back(0);
        if (z)
            i[z] = add(i[z], i[z - 1]), j[z] = add(j[z], j[z - 1]),
            i2[z] = add(i2[z], i2[z - 1]), j2[z] = add(j2[z], j2[z - 1]);
    }

    int binary_search_operations = 0;

    for (int z = 0; z < n * m; z++) {
        int curx = vec[z].second.first, cury = vec[z].second.second;
        int have = -1, x2 = 0, y2 = 0, x = 0, y = 0, sol = 0, have2 = 0;
        int st = 0, en = z - 1;
        while (st <= en) {
            binary_search_operations++;
            int mid = (st + en) / 2;
            if (vec[mid].first == vec[z].first)
                en = mid - 1;
            else
                st = mid + 1, have = mid;
        }

        check_search_invariant(binary_search_operations, 10000); // Arbitrary threshold for search operations

        have++;
        if (!have) continue;
        x = i[have - 1], y = j[have - 1], x2 = i2[have - 1], y2 = j2[have - 1],
        sol = ans[have - 1];
        have2 = fastpow(have, 998244353 - 2);
        int newHave = add(mul(-2, mul(x, curx)), mul(-2, mul(y, cury)));
        newHave = add(newHave, x2);
        newHave = add(newHave, y2);
        newHave = add(newHave, mul(have, mul(curx, curx)));
        newHave = add(newHave, mul(have, mul(cury, cury)));
        newHave = add(newHave, sol);
        newHave = mul(newHave, have2);
        ans[z] = newHave;
        if (ans[z]) ans[z] = add(ans[z], ans[z - 1]);
        if (curx == r && cury == c) {
            cout << newHave;
            return 0;
        }
    }
    cout << 0;
    return 0;
}
```

### Explanation

- **Checker Functions**: Define checker functions that trigger warnings and abort execution if specific conditions, indicating potential bottlenecks, are met.
- **Placement**: The checkers are strategically placed in the code:
  - The `fastpow` checker is called within the `fastpow` function.
  - The binary search operations checker is updated within the loop that performs the search.
  - The matrix operations checker is placed after reading `n` and `m`.
  - The updates checker could be added within the main processing loop if specific conditions are necessary.
- **Thresholds**: The thresholds in the checkers are arbitrary and should be adapted based on empirical testing or specific requirements.

