system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 998244353;
inline int read() {
  char ch = getchar();
  int w = 1, s = 0;
  while (!isdigit(ch)) {
    if (ch == '-') w = -1;
    ch = getchar();
  };
  while (isdigit(ch)) {
    s = s * 10 + ch - '0';
    ch = getchar();
  }
  return w * s;
}
inline long long ksm(long long x, long long y) {
  long long res = 1;
  while (y) {
    if (y & 1) res = res * x % mod;
    x = x * x % mod;
    y >>= 1;
  }
  return res;
}
inline long long rev(long long x) { return ksm(x, mod - 2); }
inline long long sqr(long long x) { return x * x % mod; }
inline long long add(long long a, long long b) {
  a += b;
  if (a >= mod) a -= mod;
  return a;
}
struct node {
  long long x, y, w;
} Ma[1000010];
int n, m;
long long p[1000010], mat[1010][1010], F[1000010];
inline bool cmp(node p, node q) { return p.w < q.w; }
int main() {
  n = read(), m = read();
  int cnt = 0;
  for (register int i = 1; i <= n; ++i) {
    for (register int j = 1; j <= m; ++j) {
      mat[i][j] = read();
    }
  }
  long long r = read(), c = read();
  int tmp = mat[r][c];
  Ma[++cnt].w = tmp;
  Ma[cnt].x = r, Ma[cnt].y = c;
  for (register int i = 1; i <= n; ++i) {
    for (register int j = 1; j <= m; ++j) {
      if (tmp > mat[i][j]) {
        Ma[++cnt].w = mat[i][j];
        Ma[cnt].x = i, Ma[cnt].y = j;
      }
    }
  }
  sort(Ma + 1, Ma + cnt + 1, cmp);
  Ma[0].w = -1e9 - 10;
  Ma[cnt + 1].w = -1e9 - 10;
  long long Sum1 = 0, Sum2 = 0, Sum3 = 0, Sum4 = 0, res = 0;
  int j = 0;
  for (register int i = 1; i <= cnt; i = j + 1) {
    j = i;
    while (Ma[j + 1].w == Ma[j].w) j++;
    if (i == 1) {
      for (register int k = i; k <= j; ++k) {
        F[k] = 0;
        Sum1 = add(Sum1, sqr(Ma[k].x));
        Sum2 = add(Sum2, sqr(Ma[k].y));
        Sum3 = add(Sum3, Ma[k].x);
        Sum4 = add(Sum4, Ma[k].y);
      }
      continue;
    }
    for (register int k = i; k <= j; ++k) {
      F[k] = (1ll *
                  (sqr(Ma[k].x) + sqr(Ma[k].y) + 1ll * Sum1 * rev(i - 1) % mod +
                   1ll * Sum2 * rev(i - 1) % mod -
                   2ll * Sum3 * rev(i - 1) % mod * Ma[k].x % mod -
                   2ll * Sum4 * rev(i - 1) % mod * Ma[k].y % mod) %
                  mod +
              mod + res * rev(i - 1) % mod) %
             mod;
    }
    for (register int k = i; k <= j; ++k) {
      Sum1 = add(Sum1, sqr(Ma[k].x));
      Sum2 = add(Sum2, sqr(Ma[k].y));
      Sum3 = add(Sum3, Ma[k].x);
      Sum4 = add(Sum4, Ma[k].y);
      res = add(F[k], res);
    }
  }
  cout << F[cnt] << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13 8
5 7 7 7 9 1 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 5
7 10 9 8 6 7 5 8
1 6 4 2 4 5 3 10
10 4 4 0 5 6 6 4
7 5 5 9 8 5 1 3
9 6 1 9 10 4 3 7
3 3 7 6 9 4 1 7
8 6 5 9 1 9 2 1
1 8 2 8 9 7 6 3
7 4 2 4 4 6 12 10
7 8 6 10 2 6 10 9
1 7


(G.2) Fast Input

13 8
5 8 7 7 9 0 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 5
7 10 9 8 6 7 5 8
1 6 4 2 4 5 3 10
10 4 4 0 5 6 6 4
7 5 5 9 8 5 1 3
9 6 1 9 10 4 3 7
3 3 7 6 9 9 1 7
8 6 5 9 1 9 2 1
1 8 2 8 9 7 6 3
7 2 2 4 4 6 12 10
7 8 6 10 2 6 10 9
1 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline int read() { /* line 4 slow_hit_count: 108, fast_hit_count: 108 */
  char ch = getchar(); /* line 5 slow_hit_count: 108, fast_hit_count: 108 */
  int w = 1, s = 0; /* line 6 slow_hit_count: 108, fast_hit_count: 108 */
  while (!isdigit(ch)) { /* line 7 slow_hit_count: 108, fast_hit_count: 108 */
    if (ch == '-') w = -1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) { /* line 11 slow_hit_count: 229, fast_hit_count: 229 */
    s = s * 10 + ch - '0'; /* line 12 slow_hit_count: 121, fast_hit_count: 121 */
    ch = getchar(); /* line 13 slow_hit_count: 121, fast_hit_count: 121 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return w * s; /* line 15 slow_hit_count: 108, fast_hit_count: 108 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
inline long long ksm(long long x, long long y) { /* line 17 slow_hit_count: 460, fast_hit_count: 0 */
  long long res = 1; /* line 18 slow_hit_count: 460, fast_hit_count: 0 */
  while (y) { /* line 19 slow_hit_count: 14260, fast_hit_count: 0 */
    if (y & 1) res = res * x % mod; /* line 20 slow_hit_count: 13800, fast_hit_count: 0 */
    x = x * x % mod; /* line 21 slow_hit_count: 13800, fast_hit_count: 0 */
    y >>= 1; /* line 22 slow_hit_count: 13800, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 24 slow_hit_count: 460, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
inline long long rev(long long x) { return ksm(x, mod - 2); } /* line 26 slow_hit_count: 460, fast_hit_count: 0 */
inline long long sqr(long long x) { return x * x % mod; } /* line 27 slow_hit_count: 370, fast_hit_count: 2 */
inline long long add(long long a, long long b) { /* line 28 slow_hit_count: 464, fast_hit_count: 4 */
  a += b; /* line 29 slow_hit_count: 464, fast_hit_count: 4 */
  if (a >= mod) a -= mod; /* line 30 slow_hit_count: 464, fast_hit_count: 4 */
  return a; /* line 31 slow_hit_count: 464, fast_hit_count: 4 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, y, w; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} Ma[1000010]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long p[1000010], mat[1010][1010], F[1000010]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
inline bool cmp(node p, node q) { return p.w < q.w; } /* line 38 slow_hit_count: 614, fast_hit_count: 0 */
int main() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(), m = read(); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int cnt = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= n; ++i) { /* line 42 slow_hit_count: 14, fast_hit_count: 14 */
    for (register int j = 1; j <= m; ++j) { /* line 43 slow_hit_count: 117, fast_hit_count: 117 */
      mat[i][j] = read(); /* line 44 slow_hit_count: 104, fast_hit_count: 104 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = read(), c = read(); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  int tmp = mat[r][c]; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  Ma[++cnt].w = tmp; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  Ma[cnt].x = r, Ma[cnt].y = c; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= n; ++i) { /* line 51 slow_hit_count: 14, fast_hit_count: 14 */
    for (register int j = 1; j <= m; ++j) { /* line 52 slow_hit_count: 117, fast_hit_count: 117 */
      if (tmp > mat[i][j]) { /* line 53 slow_hit_count: 104, fast_hit_count: 104 */
        Ma[++cnt].w = mat[i][j]; /* line 54 slow_hit_count: 92, fast_hit_count: 0 */
        Ma[cnt].x = i, Ma[cnt].y = j; /* line 55 slow_hit_count: 92, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  sort(Ma + 1, Ma + cnt + 1, cmp); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  Ma[0].w = -1e9 - 10; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  Ma[cnt + 1].w = -1e9 - 10; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  long long Sum1 = 0, Sum2 = 0, Sum3 = 0, Sum4 = 0, res = 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  int j = 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= cnt; i = j + 1) { /* line 64 slow_hit_count: 12, fast_hit_count: 2 */
    j = i; /* line 65 slow_hit_count: 11, fast_hit_count: 1 */
    while (Ma[j + 1].w == Ma[j].w) j++; /* line 66 slow_hit_count: 93, fast_hit_count: 1 */
    if (i == 1) { /* line 67 slow_hit_count: 11, fast_hit_count: 1 */
      for (register int k = i; k <= j; ++k) { /* line 68 slow_hit_count: 2, fast_hit_count: 2 */
        F[k] = 0; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
        Sum1 = add(Sum1, sqr(Ma[k].x)); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
        Sum2 = add(Sum2, sqr(Ma[k].y)); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
        Sum3 = add(Sum3, Ma[k].x); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
        Sum4 = add(Sum4, Ma[k].y); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    for (register int k = i; k <= j; ++k) { /* line 77 slow_hit_count: 102, fast_hit_count: 0 */
      F[k] = (1ll * /* line 78 slow_hit_count: 92, fast_hit_count: 0 */
                  (sqr(Ma[k].x) + sqr(Ma[k].y) + 1ll * Sum1 * rev(i - 1) % mod + /* line 79 slow_hit_count: 92, fast_hit_count: 0 */
                   1ll * Sum2 * rev(i - 1) % mod - /* line 80 slow_hit_count: 92, fast_hit_count: 0 */
                   2ll * Sum3 * rev(i - 1) % mod * Ma[k].x % mod - /* line 81 slow_hit_count: 92, fast_hit_count: 0 */
                   2ll * Sum4 * rev(i - 1) % mod * Ma[k].y % mod) % /* line 82 slow_hit_count: 92, fast_hit_count: 0 */
                  mod + /* line 83 slow_hit_count: 92, fast_hit_count: 0 */
              mod + res * rev(i - 1) % mod) % /* line 84 slow_hit_count: 92, fast_hit_count: 0 */
             mod; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    for (register int k = i; k <= j; ++k) { /* line 87 slow_hit_count: 102, fast_hit_count: 0 */
      Sum1 = add(Sum1, sqr(Ma[k].x)); /* line 88 slow_hit_count: 92, fast_hit_count: 0 */
      Sum2 = add(Sum2, sqr(Ma[k].y)); /* line 89 slow_hit_count: 92, fast_hit_count: 0 */
      Sum3 = add(Sum3, Ma[k].x); /* line 90 slow_hit_count: 92, fast_hit_count: 0 */
      Sum4 = add(Sum4, Ma[k].y); /* line 91 slow_hit_count: 92, fast_hit_count: 0 */
      res = add(F[k], res); /* line 92 slow_hit_count: 92, fast_hit_count: 0 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  cout << F[cnt] << "\n"; /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 97 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

1. **High Hit Counts in Slow Input:**
   - The function `ksm` (lines 17-24) is called 460 times in the slow input but not at all in the fast input, primarily due to `rev` usage (line 26).
   - Lines 66-85 are significantly more active for the slow input, indicating that the `while` loop on line 66 is a major contributor to the slowdown.
   - Nested loops (lines 51-58, and lines 64-93) exhibit more iterations due to more elements meeting certain conditions (such as `tmp > mat[i][j]` on line 53).

2. **Key Observations:**
   - The nested loop for processing matrix elements and conditions that increase the number of elements to be sorted and processed heavily impact performance.
   - The repeated computation of modular inverses with `rev` can be computationally expensive and is magnified by the number of elements processed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **Matrix with Many Lesser Elements than Starting Position:**
   - Natural Language Description: "If the starting element in the matrix has a value significantly larger than many other elements, creating numerous valid moves, the program may slow down due to increased computation of paths and sorting processes."
   - This is observed as the line checking `tmp > mat[i][j]` has high activity, suggesting more elements are less than `tmp`.

2. **High Frequency of Modular Inverse Computation:**
   - Natural Language Description: "If the computation involves frequent calculations of modular inverses, particularly within a loop processing a large number of elements, performance degradation is likely due to the computational overhead of such operations."

3. **Sorting of Large Arrays:**
   - Natural Language Description: "If the list of potential moves (elements less than the current element) grows large and requires sorting, the computation time may increase significantly. This is especially true if the initial position has a value that is high relative to many other matrix elements."

4. **Repeated Iteration over Similar Values:**
   - Natural Language Description: "If the matrix contains many elements of similar value to the initial starting value, leading to repeated iterations over these values, the performance can be slowed as the logic attempts to handle these ties."

These invariants help identify conditions under which the algorithm might experience slowdowns without directly relying on specific input values, thus generalizing potential performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the performance-checking conditions implemented as C++ functions:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

void check_lesser_elements_invariant(int lesserElementsCount, int threshold) {
    if (lesserElementsCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many elements less than starting position!" << endl;
        abort();
    }
}

void check_modular_inverse_invariant(int modularInverseCount, int threshold) {
    if (modularInverseCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular inverse calculations!" << endl;
        abort();
    }
}

void check_sort_invariant(int elementCount, int threshold) {
    if (elementCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - sorting large array of potential moves!" << endl;
        abort();
    }
}

void check_equal_value_invariant(int equalValueCount, int threshold) {
    if (equalValueCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many equal value iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Program

Here is the instrumented C++ program with the performance-checking conditions integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 998244353;

// Instrumentation check functions
void check_lesser_elements_invariant(int lesserElementsCount, int threshold) {
    if (lesserElementsCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many elements less than starting position!" << endl;
        abort();
    }
}

void check_modular_inverse_invariant(int modularInverseCount, int threshold) {
    if (modularInverseCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular inverse calculations!" << endl;
        abort();
    }
}

void check_sort_invariant(int elementCount, int threshold) {
    if (elementCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - sorting large array of potential moves!" << endl;
        abort();
    }
}

void check_equal_value_invariant(int equalValueCount, int threshold) {
    if (equalValueCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many equal value iterations!" << endl;
        abort();
    }
}

inline int read() {
    char ch = getchar();
    int w = 1, s = 0;
    while (!isdigit(ch)) {
        if (ch == '-') w = -1;
        ch = getchar();
    };
    while (isdigit(ch)) {
        s = s * 10 + ch - '0';
        ch = getchar();
    }
    return w * s;
}

inline long long ksm(long long x, long long y) {
    long long res = 1;
    while (y) {
        if (y & 1) res = res * x % mod;
        x = x * x % mod;
        y >>= 1;
    }
    return res;
}

inline long long rev(long long x) { return ksm(x, mod - 2); }
inline long long sqr(long long x) { return x * x % mod; }
inline long long add(long long a, long long b) {
    a += b;
    if (a >= mod) a -= mod;
    return a;
}

struct node {
    long long x, y, w;
} Ma[1000010];

int n, m;
long long p[1000010], mat[1010][1010], F[1000010];
inline bool cmp(node p, node q) { return p.w < q.w; }

int main() {
    n = read(), m = read();
    int cnt = 0;
    for (register int i = 1; i <= n; ++i) {
        for (register int j = 1; j <= m; ++j) {
            mat[i][j] = read();
        }
    }
    long long r = read(), c = read();
    int tmp = mat[r][c];

    // Count lesser elements for invariant checking
    int lesserElementsCount = 0;

    Ma[++cnt].w = tmp;
    Ma[cnt].x = r, Ma[cnt].y = c;
    for (register int i = 1; i <= n; ++i) {
        for (register int j = 1; j <= m; ++j) {
            if (tmp > mat[i][j]) {
                Ma[++cnt].w = mat[i][j];
                Ma[cnt].x = i, Ma[cnt].y = j;
                lesserElementsCount++;
            }
        }
    }

    // Check invariant for too many lesser elements
    check_lesser_elements_invariant(lesserElementsCount, n * m / 2);

    sort(Ma + 1, Ma + cnt + 1, cmp);

    // Check invariant for sorting large data
    check_sort_invariant(cnt, n * m / 2);

    Ma[0].w = -1e9 - 10;
    Ma[cnt + 1].w = -1e9 - 10;
    long long Sum1 = 0, Sum2 = 0, Sum3 = 0, Sum4 = 0, res = 0;
    int j = 0;

    // Count modular inverse calculations
    int modularInverseCount = 0;

    for (register int i = 1; i <= cnt; i = j + 1) {
        j = i;
        while (Ma[j + 1].w == Ma[j].w) j++;

        // Check invariant for equal values
        check_equal_value_invariant(j - i + 1, n * m / 10);

        if (i == 1) {
            for (register int k = i; k <= j; ++k) {
                F[k] = 0;
                Sum1 = add(Sum1, sqr(Ma[k].x));
                Sum2 = add(Sum2, sqr(Ma[k].y));
                Sum3 = add(Sum3, Ma[k].x);
                Sum4 = add(Sum4, Ma[k].y);
            }
            continue;
        }
        for (register int k = i; k <= j; ++k) {
            F[k] = (1ll * 
                    (sqr(Ma[k].x) + sqr(Ma[k].y) + 1ll * Sum1 * rev(i - 1) % mod +
                     1ll * Sum2 * rev(i - 1) % mod -
                     2ll * Sum3 * rev(i - 1) % mod * Ma[k].x % mod -
                     2ll * Sum4 * rev(i - 1) % mod * Ma[k].y % mod) %
                    mod +
                    mod + res * rev(i - 1) % mod) %
                   mod;

            modularInverseCount += 4; // Each term rev(i - 1) calls ksm
        }

        // Check invariant for excessive modular inverses
        check_modular_inverse_invariant(modularInverseCount, n * m);

        for (register int k = i; k <= j; ++k) {
            Sum1 = add(Sum1, sqr(Ma[k].x));
            Sum2 = add(Sum2, sqr(Ma[k].y));
            Sum3 = add(Sum3, Ma[k].x);
            Sum4 = add(Sum4, Ma[k].y);
            res = add(F[k], res);
        }
    }
    cout << F[cnt] << "\n";
    return 0;
}
```

**Explanation of Instrumentation:**

- **Lesser Elements Check:** Ensures that the number of elements less than the starting chip position doesn't exceed a threshold. Placed after constructing the list of lesser elements.
- **Modular Inverse Check:** Ensures excessive use of modular inverses doesn't occur, monitored inside the loop performing modular operations.
- **Sorting Check:** Validates sorting isn't done on an excessively large list, checked after the list is populated.
- **Equal Value Check:** Monitors for excessive iterations over equal value elements, placed inside the loop processing elements of equal value.

