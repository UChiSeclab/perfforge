system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
int a[1007][1007];
long long f[1007][1007], sumx = 0, sumsq = 0, cur = 0, sumdp = 0, sumy = 0;
vector<pair<int, pair<int, int> > > st;
long long ans = 0;
const long long mod = 998244353;
long long pw(long long x, long long y) {
  if (y == 0) return 1LL;
  if (y == 1) return x;
  long long ret = pw(x, y / 2);
  if (y % 2 == 0)
    return ret * ret % mod;
  else
    return ret * ret % mod * x % mod;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      cin >> a[i][j];
      st.push_back(make_pair(a[i][j], make_pair(i, j)));
    }
  }
  sort(st.begin(), st.end());
  for (int i = 0; i < (int)st.size(); i++) {
    long long val = st[i].first, x = st[i].second.first,
              y = st[i].second.second;
    while (cur < i && st[cur].first < val) {
      sumdp = (sumdp + f[st[cur].second.first][st[cur].second.second]) % mod;
      sumsq = ((sumsq + st[cur].second.second * st[cur].second.second) % mod +
               st[cur].second.first * st[cur].second.first) %
              mod;
      sumx = (sumx + st[cur].second.first) % mod;
      sumy = (sumy + st[cur].second.second) % mod;
      cur++;
    }
    if (cur == 0) {
      f[x][y] = 0;
      continue;
    }
    f[x][y] =
        ((((((sumdp + sumsq) % mod + cur * x * x) % mod) + cur * y * y) % mod -
          (2LL * x * sumx % mod) + mod) %
             mod -
         (2LL * y * sumy % mod) + mod) %
        mod;
    f[x][y] = (f[x][y] * pw(cur, mod - 2)) % mod;
  }
  int px = 0, py = 0;
  cin >> px >> py;
  cout << f[px][py];
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13 8
5 7 7 7 3 1 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 0
7 10 9 8 6 7 5 8
1 6 4 2 4 9 3 10
10 4 4 6 5 6 6 4
7 5 3 9 8 5 1 3
13 6 1 9 10 5 3 7
6 3 7 6 9 9 1 6
8 6 5 9 1 9 2 1
1 8 2 8 9 7 3 3
7 2 2 4 4 6 7 10
7 8 6 10 2 6 10 9
1 6


(G.2) Fast Input

2 3
1 5 7
2 3 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[1007][1007]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long f[1007][1007], sumx = 0, sumsq = 0, cur = 0, sumdp = 0, sumy = 0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, pair<int, int> > > st; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long ans = 0; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 998244353; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long pw(long long x, long long y) { /* line 9 slow_hit_count: 3090, fast_hit_count: 120 */
  if (y == 0) return 1LL; /* line 10 slow_hit_count: 3090, fast_hit_count: 120 */
  if (y == 1) return x; /* line 11 slow_hit_count: 3090, fast_hit_count: 120 */
  long long ret = pw(x, y / 2); /* line 12 slow_hit_count: 2987, fast_hit_count: 116 */
  if (y % 2 == 0) /* line 13 slow_hit_count: 2987, fast_hit_count: 116 */
    return ret * ret % mod; /* line 14 slow_hit_count: 206, fast_hit_count: 8 */
  else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return ret * ret % mod * x % mod; /* line 16 slow_hit_count: 2781, fast_hit_count: 108 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 21 slow_hit_count: 14, fast_hit_count: 3 */
    for (int j = 1; j <= m; j++) { /* line 22 slow_hit_count: 117, fast_hit_count: 8 */
      cin >> a[i][j]; /* line 23 slow_hit_count: 104, fast_hit_count: 6 */
      st.push_back(make_pair(a[i][j], make_pair(i, j))); /* line 24 slow_hit_count: 104, fast_hit_count: 6 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  sort(st.begin(), st.end()); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)st.size(); i++) { /* line 28 slow_hit_count: 105, fast_hit_count: 7 */
    long long val = st[i].first, x = st[i].second.first, /* line 29 slow_hit_count: 104, fast_hit_count: 6 */
              y = st[i].second.second; /* line 30 slow_hit_count: 104, fast_hit_count: 6 */
    while (cur < i && st[cur].first < val) { /* line 31 slow_hit_count: 207, fast_hit_count: 11 */
      sumdp = (sumdp + f[st[cur].second.first][st[cur].second.second]) % mod; /* line 32 slow_hit_count: 103, fast_hit_count: 5 */
      sumsq = ((sumsq + st[cur].second.second * st[cur].second.second) % mod + /* line 33 slow_hit_count: 103, fast_hit_count: 5 */
               st[cur].second.first * st[cur].second.first) % /* line 34 slow_hit_count: 103, fast_hit_count: 5 */
              mod; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      sumx = (sumx + st[cur].second.first) % mod; /* line 36 slow_hit_count: 103, fast_hit_count: 5 */
      sumy = (sumy + st[cur].second.second) % mod; /* line 37 slow_hit_count: 103, fast_hit_count: 5 */
      cur++; /* line 38 slow_hit_count: 103, fast_hit_count: 5 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (cur == 0) { /* line 40 slow_hit_count: 104, fast_hit_count: 6 */
      f[x][y] = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 2 */
      continue; /* line 42 slow_hit_count: 1, fast_hit_count: 2 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    f[x][y] = /* line 44 slow_hit_count: 103, fast_hit_count: 4 */
        ((((((sumdp + sumsq) % mod + cur * x * x) % mod) + cur * y * y) % mod - /* line 45 slow_hit_count: 103, fast_hit_count: 4 */
          (2LL * x * sumx % mod) + mod) % /* line 46 slow_hit_count: 103, fast_hit_count: 4 */
             mod - /* line 47 slow_hit_count: 103, fast_hit_count: 4 */
         (2LL * y * sumy % mod) + mod) % /* line 48 slow_hit_count: 103, fast_hit_count: 4 */
        mod; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    f[x][y] = (f[x][y] * pw(cur, mod - 2)) % mod; /* line 50 slow_hit_count: 103, fast_hit_count: 4 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  int px = 0, py = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> px >> py; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cout << f[px][py]; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the analysis of the provided code and the hit count data, let's identify potential performance bottlenecks and derive natural language performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Hit Count Analysis**:
   - The recursive function `pw(x, y)` (lines 9-17) is heavily hit more in the slow input run. Specifically, lines 12, 14, and 16 have significantly higher hit counts in the slow input compared to the fast input.
   - The `while` loop (lines 31-38) is also hit significantly more often in the slow input, indicating that this loop runs more times for the slow input.

2. **Potential Causes of Slowdown**:
   - **Exponentiation Function (`pw`)**: The function `pw` is used for exponentiation by squaring, which is efficient with respect to the number of operations needed but can still become a bottleneck if called excessively.
   - **While Loop**: The loop on line 31 iterates over elements of the matrix under certain conditions. Its repeated execution suggests that for the slow input, there are many more elements with values less than the current matrix value during execution.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants**:

   - **Invariant #1: Excessive Power Calculations**:
     - "If the function `pw` is repeatedly called with large values of y, it may slow down the program significantly. This is likely to happen when the matrix has many distinct values close to the initial value at the chip's starting position."
     - **Rationale**: The multitude of recursive calls in `pw` suggests a high number of distinct matrix elements being processed, especially when `y` is large, causing repeated exponentiation.

   - **Invariant #2: Heavy Iteration in While Loop**:
     - "The program may slow significantly when there are many lower-valued elements in the matrix that are processed before the current element. This is indicated by the while loop running many times, which is more likely when the matrix values are densely packed below the initial chip position."
     - **Rationale**: The loop's repeated execution suggests that many elements satisfy the while loop condition, leading to longer execution time as more elements are processed.

2. **Threshold Considerations**:
   - Since `n` and `m` are constrained to a maximum of 1000, any conditions or loops that iterate close to the order of `n*m` could become inefficient.
   - The threshold for the number of recursive calls or iterations in loops that significantly impact performance should ideally be below a certain fraction of `n*m`, considering that it multiplies up the computational overhead.

By understanding these conditions, we can better predict scenarios where the program might slow down and work towards optimizing or redesigning the algorithm to handle these cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Based on the invariants derived in Phase 2, we will implement checks for the potential performance bottlenecks.

1. **Invariant #1: Excessive Power Calculations**

   - *Description*: "If the function `pw` is repeatedly called with large values of `y`, it may slow down the program significantly. This is likely to happen when the matrix has many distinct values close to the initial value at the chip's starting position."
   
   ```cpp
   void check_exponentiation_invariant(int y) {
       if (y > 10) {  // Threshold for "large y" is chosen based on possible inefficiency
           cerr << "Warning: Performance bottleneck due to excessive exponentiation!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Heavy Iteration in While Loop**

   - *Description*: "The program may slow significantly when there are many lower-valued elements in the matrix that are processed before the current element."
   
   ```cpp
   void check_heavy_iteration_invariant(int iterations) {
       if (iterations > (n * m) / 2) {  // Assume inefficient if iterating over half or more of the elements
           cerr << "Warning: Performance bottleneck due to heavy iteration in while loop!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Now, we will integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
int a[1007][1007];
long long f[1007][1007], sumx = 0, sumsq = 0, cur = 0, sumdp = 0, sumy = 0;
vector<pair<int, pair<int, int>>> st;
long long ans = 0;
const long long mod = 998244353;

// Check if the power calculation might be a bottleneck
void check_exponentiation_invariant(int y) {
    if (y > 10) {  // Threshold for "large y"
        cerr << "Warning: Performance bottleneck due to excessive exponentiation!" << endl;
        abort();
    }
}

// Check if the while loop might be iterating too many times
void check_heavy_iteration_invariant(int iterations) {
    if (iterations > (n * m) / 2) {  // Threshold for heavy iteration
        cerr << "Warning: Performance bottleneck due to heavy iteration in while loop!" << endl;
        abort();
    }
}

long long pw(long long x, long long y) {
    check_exponentiation_invariant(y);  // Insert check here
    if (y == 0) return 1LL;
    if (y == 1) return x;
    long long ret = pw(x, y / 2);
    if (y % 2 == 0)
        return ret * ret % mod;
    else
        return ret * ret % mod * x % mod;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> a[i][j];
            st.push_back(make_pair(a[i][j], make_pair(i, j)));
        }
    }
    sort(st.begin(), st.end());
    for (int i = 0; i < (int)st.size(); i++) {
        long long val = st[i].first, x = st[i].second.first,
                  y = st[i].second.second;
        int iteration_count = 0;  // Count iterations
        while (cur < i && st[cur].first < val) {
            iteration_count++;  // Increment iteration count
            sumdp = (sumdp + f[st[cur].second.first][st[cur].second.second]) % mod;
            sumsq = ((sumsq + st[cur].second.second * st[cur].second.second) % mod +
                     st[cur].second.first * st[cur].second.first) %
                    mod;
            sumx = (sumx + st[cur].second.first) % mod;
            sumy = (sumy + st[cur].second.second) % mod;
            cur++;
        }
        check_heavy_iteration_invariant(iteration_count);  // Insert check here

        if (cur == 0) {
            f[x][y] = 0;
            continue;
        }
        f[x][y] =
            ((((((sumdp + sumsq) % mod + cur * x * x) % mod) + cur * y * y) % mod -
              (2LL * x * sumx % mod) + mod) %
                 mod -
             (2LL * y * sumy % mod) + mod) %
            mod;
        f[x][y] = (f[x][y] * pw(cur, mod - 2)) % mod;
    }
    int px = 0, py = 0;
    cin >> px >> py;
    cout << f[px][py];
}
```

### Explanation of Integration

- The `check_exponentiation_invariant()` function is called within the `pw()` function to monitor the values of `y` and ensure they don't grow unmanageably large, potentially causing performance issues.
- The `check_heavy_iteration_invariant()` function is added within the loop to monitor the number of iterations each while loop executes before settling on the current matrix element. This check ensures the loop does not iterate over a significant portion of the matrix without a reason, indicating a potential performance bottleneck.

