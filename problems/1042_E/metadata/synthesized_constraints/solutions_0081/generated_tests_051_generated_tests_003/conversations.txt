system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double EPS = 1e-8;
const int INFI = 1000 * 1000 * 1000;
const long long INFL = 1000LL * 1000LL * 1000LL * 1000LL * 1000LL;
const int MX_N = 1002;
const long long MOD = 998244353;
int N, M;
long long board[MX_N][MX_N];
long long dp[MX_N][MX_N];
long long fexp(long long a, long long x, long long mod) {
  if (x == 0LL) return 1ll;
  if (x % 2LL == 0) {
    long long y = fexp(a, x / 2, mod);
    return (y * y) % mod;
  }
  return (a * fexp(a, x - 1, mod)) % mod;
}
long long divv(long long a, long long b, long long mod) {
  return (a * fexp(b, mod - 2, mod)) % mod;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> N >> M;
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < M; ++j) cin >> board[i][j];
  vector<pair<int, int> > prs;
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < M; ++j) prs.push_back({i, j});
  sort(prs.begin(), prs.end(),
       [](const pair<int, int>& a, const pair<int, int>& b) {
         return board[a.first][a.second] < board[b.first][b.second];
       });
  long long sz = 0;
  long long nsz = 0;
  long long xsm, x2sm, ysm, y2sm;
  xsm = x2sm = ysm = y2sm = 0;
  long long nxsm, nx2sm, nysm, ny2sm;
  nxsm = nx2sm = nysm = ny2sm = 0;
  long long prv = -1;
  long long dpsm, ndpsm;
  dpsm = ndpsm = 0;
  long long x, y;
  for (const auto& i : prs) {
    x = i.first, y = i.second;
    if (board[x][y] != prv) {
      sz = nsz;
      xsm = nxsm;
      x2sm = nx2sm;
      ysm = nysm;
      y2sm = ny2sm;
      dpsm = ndpsm;
      prv = board[x][y];
    }
    dp[x][y] = (((dp[x][y] + dpsm) % MOD + MOD) % MOD);
    dp[x][y] =
        (((dp[x][y] +
           ((((((sz * (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) +
              (((-(((2LL * (((y * ysm) % MOD + MOD) % MOD)) % MOD + MOD) %
                   MOD) +
                 y2sm) %
                    MOD +
                MOD) %
               MOD)) %
                 MOD +
             MOD) %
            MOD)) %
              MOD +
          MOD) %
         MOD);
    dp[x][y] =
        (((dp[x][y] +
           ((((((sz * (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) +
              (((-(((2LL * (((x * xsm) % MOD + MOD) % MOD)) % MOD + MOD) %
                   MOD) +
                 x2sm) %
                    MOD +
                MOD) %
               MOD)) %
                 MOD +
             MOD) %
            MOD)) %
              MOD +
          MOD) %
         MOD);
    if (sz) dp[x][y] = divv(dp[x][y], sz, MOD);
    ndpsm = (((ndpsm + dp[x][y]) % MOD + MOD) % MOD);
    nxsm = (((nxsm + x) % MOD + MOD) % MOD);
    nx2sm = (((nx2sm + (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD);
    nysm = (((nysm + y) % MOD + MOD) % MOD);
    ny2sm = (((ny2sm + (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD);
    nsz = (((nsz + 1) % MOD + MOD) % MOD);
  }
  int r, c;
  cin >> r >> c;
  --r, --c;
  cout << dp[r][c] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13 8
5 7 7 7 3 1 10 7
2 10 5 4 5 4 9 1
8 6 10 8 10 9 9 0
7 10 9 8 6 7 5 8
1 6 4 2 4 9 3 10
10 4 4 6 5 6 6 4
7 5 3 9 8 5 1 3
13 6 1 9 10 5 3 7
6 3 7 6 9 9 1 6
8 6 5 9 1 9 2 1
1 8 2 8 9 7 3 3
7 2 2 4 4 6 7 10
7 8 6 10 2 6 10 9
1 6


(G.2) Fast Input

2 3
1 5 7
2 3 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-8; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INFI = 1000 * 1000 * 1000; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFL = 1000LL * 1000LL * 1000LL * 1000LL * 1000LL; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int MX_N = 1002; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int N, M; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long board[MX_N][MX_N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MX_N][MX_N]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long fexp(long long a, long long x, long long mod) { /* line 11 slow_hit_count: 5974, fast_hit_count: 232 */
  if (x == 0LL) return 1ll; /* line 12 slow_hit_count: 5974, fast_hit_count: 232 */
  if (x % 2LL == 0) { /* line 13 slow_hit_count: 5871, fast_hit_count: 228 */
    long long y = fexp(a, x / 2, mod); /* line 14 slow_hit_count: 2987, fast_hit_count: 116 */
    return (y * y) % mod; /* line 15 slow_hit_count: 2987, fast_hit_count: 116 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return (a * fexp(a, x - 1, mod)) % mod; /* line 17 slow_hit_count: 2884, fast_hit_count: 112 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long divv(long long a, long long b, long long mod) { /* line 19 slow_hit_count: 103, fast_hit_count: 4 */
  return (a * fexp(b, mod - 2, mod)) % mod; /* line 20 slow_hit_count: 103, fast_hit_count: 4 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> M; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; ++i) /* line 27 slow_hit_count: 14, fast_hit_count: 3 */
    for (int j = 0; j < M; ++j) cin >> board[i][j]; /* line 28 slow_hit_count: 117, fast_hit_count: 8 */
  vector<pair<int, int> > prs; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; ++i) /* line 30 slow_hit_count: 14, fast_hit_count: 3 */
    for (int j = 0; j < M; ++j) prs.push_back({i, j}); /* line 31 slow_hit_count: 117, fast_hit_count: 8 */
  sort(prs.begin(), prs.end(), /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
       [](const pair<int, int>& a, const pair<int, int>& b) { /* line 33 slow_hit_count: 663, fast_hit_count: 18 */
         return board[a.first][a.second] < board[b.first][b.second]; /* line 34 slow_hit_count: 663, fast_hit_count: 18 */
       }); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  long long sz = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  long long nsz = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  long long xsm, x2sm, ysm, y2sm; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  xsm = x2sm = ysm = y2sm = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  long long nxsm, nx2sm, nysm, ny2sm; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  nxsm = nx2sm = nysm = ny2sm = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  long long prv = -1; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  long long dpsm, ndpsm; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  dpsm = ndpsm = 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, y; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (const auto& i : prs) { /* line 46 slow_hit_count: 105, fast_hit_count: 7 */
    x = i.first, y = i.second; /* line 47 slow_hit_count: 104, fast_hit_count: 6 */
    if (board[x][y] != prv) { /* line 48 slow_hit_count: 104, fast_hit_count: 6 */
      sz = nsz; /* line 49 slow_hit_count: 12, fast_hit_count: 5 */
      xsm = nxsm; /* line 50 slow_hit_count: 12, fast_hit_count: 5 */
      x2sm = nx2sm; /* line 51 slow_hit_count: 12, fast_hit_count: 5 */
      ysm = nysm; /* line 52 slow_hit_count: 12, fast_hit_count: 5 */
      y2sm = ny2sm; /* line 53 slow_hit_count: 12, fast_hit_count: 5 */
      dpsm = ndpsm; /* line 54 slow_hit_count: 12, fast_hit_count: 5 */
      prv = board[x][y]; /* line 55 slow_hit_count: 12, fast_hit_count: 5 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    dp[x][y] = (((dp[x][y] + dpsm) % MOD + MOD) % MOD); /* line 57 slow_hit_count: 104, fast_hit_count: 6 */
    dp[x][y] = /* line 58 slow_hit_count: 104, fast_hit_count: 6 */
        (((dp[x][y] + /* line 59 slow_hit_count: 104, fast_hit_count: 6 */
           ((((((sz * (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) + /* line 60 slow_hit_count: 104, fast_hit_count: 6 */
              (((-(((2LL * (((y * ysm) % MOD + MOD) % MOD)) % MOD + MOD) % /* line 61 slow_hit_count: 104, fast_hit_count: 6 */
                   MOD) + /* line 62 slow_hit_count: 104, fast_hit_count: 6 */
                 y2sm) % /* line 63 slow_hit_count: 104, fast_hit_count: 6 */
                    MOD + /* line 64 slow_hit_count: 104, fast_hit_count: 6 */
                MOD) % /* line 65 slow_hit_count: 104, fast_hit_count: 6 */
               MOD)) % /* line 66 slow_hit_count: 104, fast_hit_count: 6 */
                 MOD + /* line 67 slow_hit_count: 104, fast_hit_count: 6 */
             MOD) % /* line 68 slow_hit_count: 104, fast_hit_count: 6 */
            MOD)) % /* line 69 slow_hit_count: 104, fast_hit_count: 6 */
              MOD + /* line 70 slow_hit_count: 104, fast_hit_count: 6 */
          MOD) % /* line 71 slow_hit_count: 104, fast_hit_count: 6 */
         MOD); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    dp[x][y] = /* line 73 slow_hit_count: 104, fast_hit_count: 6 */
        (((dp[x][y] + /* line 74 slow_hit_count: 104, fast_hit_count: 6 */
           ((((((sz * (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) + /* line 75 slow_hit_count: 104, fast_hit_count: 6 */
              (((-(((2LL * (((x * xsm) % MOD + MOD) % MOD)) % MOD + MOD) % /* line 76 slow_hit_count: 104, fast_hit_count: 6 */
                   MOD) + /* line 77 slow_hit_count: 104, fast_hit_count: 6 */
                 x2sm) % /* line 78 slow_hit_count: 104, fast_hit_count: 6 */
                    MOD + /* line 79 slow_hit_count: 104, fast_hit_count: 6 */
                MOD) % /* line 80 slow_hit_count: 104, fast_hit_count: 6 */
               MOD)) % /* line 81 slow_hit_count: 104, fast_hit_count: 6 */
                 MOD + /* line 82 slow_hit_count: 104, fast_hit_count: 6 */
             MOD) % /* line 83 slow_hit_count: 104, fast_hit_count: 6 */
            MOD)) % /* line 84 slow_hit_count: 104, fast_hit_count: 6 */
              MOD + /* line 85 slow_hit_count: 104, fast_hit_count: 6 */
          MOD) % /* line 86 slow_hit_count: 104, fast_hit_count: 6 */
         MOD); /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    if (sz) dp[x][y] = divv(dp[x][y], sz, MOD); /* line 88 slow_hit_count: 104, fast_hit_count: 6 */
    ndpsm = (((ndpsm + dp[x][y]) % MOD + MOD) % MOD); /* line 89 slow_hit_count: 104, fast_hit_count: 6 */
    nxsm = (((nxsm + x) % MOD + MOD) % MOD); /* line 90 slow_hit_count: 104, fast_hit_count: 6 */
    nx2sm = (((nx2sm + (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD); /* line 91 slow_hit_count: 104, fast_hit_count: 6 */
    nysm = (((nysm + y) % MOD + MOD) % MOD); /* line 92 slow_hit_count: 104, fast_hit_count: 6 */
    ny2sm = (((ny2sm + (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD); /* line 93 slow_hit_count: 104, fast_hit_count: 6 */
    nsz = (((nsz + 1) % MOD + MOD) % MOD); /* line 94 slow_hit_count: 104, fast_hit_count: 6 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  int r, c; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> r >> c; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  --r, --c; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dp[r][c] << endl; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 101 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we will follow a two-phase process to identify expensive or inefficient code segments, and then derive performance-characterizing invariants in natural language.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Function `fexp`:**
   - The function `fexp` is a recursive function used for modular exponentiation. It is called significantly more often in the slow input (5974 times) compared to the fast input (232 times). This suggests that the use of this function, potentially due to repeated division operations, contributes to the slowdown.

2. **Division Function `divv`:**
   - The `divv` function, which relies on `fexp`, is called 103 times with the slow input but only 4 times with the fast input. This indicates that divisions are more frequent under the slow input, involving the expensive calculation of modular inverses.

3. **Main Loop Processing Sorted Pairs:**
   - The loop iterating over `prs` (lines 46-94) is hit 105 times for the slow input compared to 7 times for the fast input. Within this loop, several operations (such as updating `dp[x][y]` and computing Euclidean distances) are performed more extensively.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Increased Recursion in Modular Exponentiation:**
   - **Natural Language Invariant:** "If the program frequently performs divisions that require computing modular inverses, which in turn cause numerous recursive calls for exponentiation, the execution time may increase significantly."
   - **Explanation:** The function `fexp` is heavily used due to repeated divisions (line 88), indicating that operations requiring modular inverses are a bottleneck.

2. **Frequent State Updates within the Loop:**
   - **Natural Language Invariant:** "When the number of elements in the sorted list `prs` results in frequent updates to the dynamic programming table `dp`, the computational overhead may lead to performance degradation."
   - **Explanation:** The dynamic programming updates (lines 57-94) are hit more often with slow input, suggesting that the updates are computationally intensive.

3. **High Processing Volume of Matrix Elements:**
   - **Natural Language Invariant:** "If the matrix dimensions (n × m) approach their maximum constraint and the elements result in numerous value comparisons and state updates, performance may decrease due to increased computational load."
   - **Explanation:** The slow input involves more extensive matrix processing and sorting operations.

### Summary of Conditions Leading to Slowdown

- Recursion depth and frequency in the `fexp` function due to multiple division operations.
- Excessive iterations and updates in the main loop processing all matrix elements.
- Large matrices with complex intra-element dependencies causing increased computational effort.

These observations about the program's performance characteristics provide insight into the conditions that trigger slow execution paths, helping to guide future optimizations and testing scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has got a magic matrix a of size n × m. The rows of the matrix are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right. Let a_{ij} be the element in the intersection of the i-th row and the j-th column.

Vasya has also got a chip. Initially, the chip is in the intersection of the r-th row and the c-th column (that is, in the element a_{rc}). Vasya performs the following process as long as possible: among all elements of the matrix having their value less than the value of the element with the chip in it, Vasya randomly and equiprobably chooses one element and moves his chip to this element.

After moving the chip, he adds to his score the square of the Euclidean distance between these elements (that is, between the element in which the chip is now and the element the chip was moved from). The process ends when there are no elements having their values less than the value of the element with the chip in it.

Euclidean distance between matrix elements with coordinates (i_1, j_1) and (i_2, j_2) is equal to √{(i_1-i_2)^2 + (j_1-j_2)^2}.

Calculate the expected value of the Vasya's final score.

It can be shown that the answer can be represented as P/Q, where P and Q are coprime integer numbers, and Q not≡ 0~(mod ~ 998244353). Print the value P ⋅ Q^{-1} modulo 998244353.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000) — the number of rows and the number of columns in the matrix a.

The following n lines contain description of the matrix a. The i-th line contains m integers a_{i1}, a_{i2}, ..., a_{im} ~ (0 ≤ a_{ij} ≤ 10^9).

The following line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the index of row and the index of column where the chip is now.

Output

Print the expected value of Vasya's final score in the format described in the problem statement.

Examples

Input

1 4
1 1 2 1
1 3


Output

2


Input

2 3
1 5 7
2 3 1
1 2


Output

665496238

Note

In the first example, Vasya will move his chip exactly once. The expected value of the final score is equal to (1^2 + 2^2+ 1^2)/(3) = 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ checkers implementing the natural language invariants derived earlier.

#### Invariant 1: Increased Recursion in Modular Exponentiation

```cpp
// Check for excessive recursive calls to the `fexp` function potentially causing slowdowns.
void check_fexp_invariant(int callCount) {
    if (callCount > 1000) { // arbitrary threshold for recursive calls
        cerr << "Warning: Excessive recursive calls to fexp detected!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent State Updates within the Loop

```cpp
// Check for frequent updates to the dynamic programming table `dp`.
void check_dp_updates_invariant(int updateCount) {
    if (updateCount > 10000) { // arbitrary threshold for updates
        cerr << "Warning: Excessive updates to the dp table detected!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Processing Volume of Matrix Elements

```cpp
// Check for large processing volumes in the main loop influenced by matrix size.
void check_matrix_size_invariant(int n, int m) {
    if (n * m > 500000) { // threshold based on likely intensive computation
        cerr << "Warning: Large matrix computation volume detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, integrate these checks into the original program at suitable points.

```cpp
#include <bits/stdc++.h>
using namespace std;
const double EPS = 1e-8;
const int INFI = 1000 * 1000 * 1000;
const long long INFL = 1000LL * 1000LL * 1000LL * 1000LL * 1000LL;
const int MX_N = 1002;
const long long MOD = 998244353;
int N, M;
long long board[MX_N][MX_N];
long long dp[MX_N][MX_N];
int fexp_call_count = 0; // To track recursive calls

// Performance checkers implementation
void check_fexp_invariant(int callCount) {
    if (callCount > 1000) {
        cerr << "Warning: Excessive recursive calls to fexp detected!" << endl;
        abort();
    }
}

void check_dp_updates_invariant(int updateCount) {
    if (updateCount > 10000) {
        cerr << "Warning: Excessive updates to the dp table detected!" << endl;
        abort();
    }
}

void check_matrix_size_invariant(int n, int m) {
    if (n * m > 500000) {
        cerr << "Warning: Large matrix computation volume detected!" << endl;
        abort();
    }
}

long long fexp(long long a, long long x, long long mod) {
    fexp_call_count++;
    check_fexp_invariant(fexp_call_count); // Checker for fexp recursion
    if (x == 0LL) return 1ll;
    if (x % 2LL == 0) {
        long long y = fexp(a, x / 2, mod);
        return (y * y) % mod;
    }
    return (a * fexp(a, x - 1, mod)) % mod;
}

long long divv(long long a, long long b, long long mod) {
    return (a * fexp(b, mod - 2, mod)) % mod;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> N >> M;
    
    check_matrix_size_invariant(N, M); // Checker for matrix size

    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j) cin >> board[i][j];
    
    vector<pair<int, int> > prs;
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j) prs.push_back({i, j});

    sort(prs.begin(), prs.end(),
         [](const pair<int, int>& a, const pair<int, int>& b) {
             return board[a.first][a.second] < board[b.first][b.second];
         });

    long long sz = 0;
    long long nsz = 0;
    long long xsm, x2sm, ysm, y2sm;
    xsm = x2sm = ysm = y2sm = 0;
    long long nxsm, nx2sm, nysm, ny2sm;
    nxsm = nx2sm = nysm = ny2sm = 0;
    long long prv = -1;
    long long dpsm, ndpsm;
    dpsm = ndpsm = 0;
    long long x, y;
    int dp_update_count = 0; // To track updates to dp

    for (const auto& i : prs) {
        x = i.first, y = i.second;
        if (board[x][y] != prv) {
            sz = nsz;
            xsm = nxsm;
            x2sm = nx2sm;
            ysm = nysm;
            y2sm = ny2sm;
            dpsm = ndpsm;
            prv = board[x][y];
        }
        
        dp[x][y] = (((dp[x][y] + dpsm) % MOD + MOD) % MOD);
        dp[x][y] =
            (((dp[x][y] +
               ((((((sz * (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) +
                  (((-(((2LL * (((y * ysm) % MOD + MOD) % MOD)) % MOD + MOD) %
                       MOD) +
                     y2sm) %
                        MOD +
                    MOD) %
                   MOD)) %
                     MOD +
                 MOD) %
                MOD)) %
                  MOD +
              MOD) %
             MOD);
        dp[x][y] =
            (((dp[x][y] +
               ((((((sz * (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD) +
                  (((-(((2LL * (((x * xsm) % MOD + MOD) % MOD)) % MOD + MOD) %
                       MOD) +
                     x2sm) %
                        MOD +
                    MOD) %
                   MOD)) %
                     MOD +
                 MOD) %
                MOD)) %
                  MOD +
              MOD) %
             MOD);
        if (sz) dp[x][y] = divv(dp[x][y], sz, MOD);
        ndpsm = (((ndpsm + dp[x][y]) % MOD + MOD) % MOD);
        nxsm = (((nxsm + x) % MOD + MOD) % MOD);
        nx2sm = (((nx2sm + (((x * x) % MOD + MOD) % MOD)) % MOD + MOD) % MOD);
        nysm = (((nysm + y) % MOD + MOD) % MOD);
        ny2sm = (((ny2sm + (((y * y) % MOD + MOD) % MOD)) % MOD + MOD) % MOD);
        nsz = (((nsz + 1) % MOD + MOD) % MOD);
        
        dp_update_count++; // Increment update count
    }
    
    check_dp_updates_invariant(dp_update_count); // Checker for dp updates

    int r, c;
    cin >> r >> c;
    --r, --c;
    cout << dp[r][c] << endl;
    return 0;
}
```

### Key Points

- The `check_fexp_invariant` function is used within the `fexp` function to track and limit recursive call depth.
- The `check_matrix_size_invariant` function is used immediately after reading matrix dimensions to ensure the computations are manageable.
- The `check_dp_updates_invariant` function tracks how many times the dynamic programming table `dp` is updated, detecting excessive computational overhead.
- All checks use `cerr` for warnings and `abort()` to terminate execution when an invariant is breached, suitable for debugging and performance testing.

