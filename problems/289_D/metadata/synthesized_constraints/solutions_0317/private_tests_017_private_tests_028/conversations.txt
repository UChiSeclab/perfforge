system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const long long mod = (long long)1e9 + 7;
const bool debug = 0;
long long solve(int n, int k) {
  long long mul = 1;
  for (int i = k; i < n; ++i) {
    (mul *= (n - k)) %= mod;
  }
  int limit = 1;
  for (int i = 0; i < k; ++i) {
    limit *= k;
  }
  std::vector<int> next(k), prev(k), color(k), can(k);
  static int stack[16], size = 0;
  int answ = 0;
  for (int mask = 0; mask < limit; ++mask) {
    size = 0;
    for (int i = 0, temp = mask; i < k; ++i) {
      int div = temp / k;
      int rem = temp - div * k;
      next[i] = rem;
      prev[rem] = i;
      temp = div;
    }
    for (int i = 0; i < k; ++i) {
      color[i] = 0;
      can[i] = false;
    }
    bool flag = true;
    if (debug) {
      std::cout << std::string(40, '-') << std::endl;
      for (int i = 0; i < k; ++i) {
        printf("next[u=%d]=%d\n", i, next[i]);
      }
    }
    for (int i = 0; i < k; ++i) {
      if (color[i] == 0) {
        stack[size++] = i;
        color[i] = 1;
        while (size > 0) {
          int u = stack[size - 1];
          int v = next[u];
          if (v == 0) {
            can[u] = true;
            --size;
            color[u] = 2;
          } else if (color[v] == 1) {
            assert(can[v] == false);
            can[u] = false;
            can[v] = false;
            color[u] = 2;
            color[v] = 2;
            --size;
          } else if (color[v] == 2) {
            can[u] = can[v];
            color[u] = 2;
            --size;
          } else {
            color[v] = 1;
            stack[size++] = v;
          }
          if (debug) {
            printf("\tvisit %d, next = %d, color = %d, can = %d\n", u, v,
                   color[u], can[u]);
          }
        }
      }
      if (debug) {
        printf("can[i=%d]=%d, size = %d\n", i, can[i], size);
      }
      if (!can[i]) {
        flag = false;
        break;
      }
    }
    answ += flag;
  }
  return answ * mul % mod;
}
int main() {
  int n, k;
  while (std::cin >> n >> k) {
    std::cout << solve(n, k) << std::endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = (long long)1e9 + 7; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const bool debug = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(int n, int k) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long mul = 1; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = k; i < n; ++i) { /* line 6 slow_hit_count: 1, fast_hit_count: 8 */
    (mul *= (n - k)) %= mod; /* line 7 slow_hit_count: 0, fast_hit_count: 7 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int limit = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < k; ++i) { /* line 10 slow_hit_count: 9, fast_hit_count: 2 */
    limit *= k; /* line 11 slow_hit_count: 8, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<int> next(k), prev(k), color(k), can(k); /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
  static int stack[16], size = 0; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int answ = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int mask = 0; mask < limit; ++mask) { /* line 16 slow_hit_count: 16777217, fast_hit_count: 2 */
    size = 0; /* line 17 slow_hit_count: 16777216, fast_hit_count: 1 */
    for (int i = 0, temp = mask; i < k; ++i) { /* line 18 slow_hit_count: 150994944, fast_hit_count: 2 */
      int div = temp / k; /* line 19 slow_hit_count: 134217728, fast_hit_count: 1 */
      int rem = temp - div * k; /* line 20 slow_hit_count: 134217728, fast_hit_count: 1 */
      next[i] = rem; /* line 21 slow_hit_count: 134217728, fast_hit_count: 1 */
      prev[rem] = i; /* line 22 slow_hit_count: 134217728, fast_hit_count: 1 */
      temp = div; /* line 23 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < k; ++i) { /* line 25 slow_hit_count: 150994944, fast_hit_count: 2 */
      color[i] = 0; /* line 26 slow_hit_count: 134217728, fast_hit_count: 1 */
      can[i] = false; /* line 27 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    bool flag = true; /* line 29 slow_hit_count: 16777216, fast_hit_count: 1 */
    if (debug) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << std::string(40, '-') << std::endl; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 0; i < k; ++i) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        printf("next[u=%d]=%d\n", i, next[i]); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < k; ++i) { /* line 36 slow_hit_count: 43046721, fast_hit_count: 2 */
      if (color[i] == 0) { /* line 37 slow_hit_count: 40949569, fast_hit_count: 1 */
        stack[size++] = i; /* line 38 slow_hit_count: 31457280, fast_hit_count: 1 */
        color[i] = 1; /* line 39 slow_hit_count: 31457280, fast_hit_count: 1 */
        while (size > 0) { /* line 40 slow_hit_count: 156197888, fast_hit_count: 2 */
          int u = stack[size - 1]; /* line 41 slow_hit_count: 124740608, fast_hit_count: 1 */
          int v = next[u]; /* line 42 slow_hit_count: 124740608, fast_hit_count: 1 */
          if (v == 0) { /* line 43 slow_hit_count: 124740608, fast_hit_count: 1 */
            can[u] = true; /* line 44 slow_hit_count: 9762368, fast_hit_count: 1 */
            --size; /* line 45 slow_hit_count: 9762368, fast_hit_count: 1 */
            color[u] = 2; /* line 46 slow_hit_count: 9762368, fast_hit_count: 1 */
          } else if (color[v] == 1) { /* line 47 slow_hit_count: 114978240, fast_hit_count: 0 */
            assert(can[v] == false); /* line 48 slow_hit_count: 14680064, fast_hit_count: 0 */
            can[u] = false; /* line 49 slow_hit_count: 14680064, fast_hit_count: 0 */
            can[v] = false; /* line 50 slow_hit_count: 14680064, fast_hit_count: 0 */
            color[u] = 2; /* line 51 slow_hit_count: 14680064, fast_hit_count: 0 */
            color[v] = 2; /* line 52 slow_hit_count: 14680064, fast_hit_count: 0 */
            --size; /* line 53 slow_hit_count: 14680064, fast_hit_count: 0 */
          } else if (color[v] == 2) { /* line 54 slow_hit_count: 100298176, fast_hit_count: 0 */
            can[u] = can[v]; /* line 55 slow_hit_count: 53656512, fast_hit_count: 0 */
            color[u] = 2; /* line 56 slow_hit_count: 53656512, fast_hit_count: 0 */
            --size; /* line 57 slow_hit_count: 53656512, fast_hit_count: 0 */
          } else { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
            color[v] = 1; /* line 59 slow_hit_count: 46641664, fast_hit_count: 0 */
            stack[size++] = v; /* line 60 slow_hit_count: 46641664, fast_hit_count: 0 */
          } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
          if (debug) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
            printf("\tvisit %d, next = %d, color = %d, can = %d\n", u, v, /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
                   color[u], can[u]); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
      if (debug) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
        printf("can[i=%d]=%d, size = %d\n", i, can[i], size); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      if (!can[i]) { /* line 71 slow_hit_count: 40949569, fast_hit_count: 1 */
        flag = false; /* line 72 slow_hit_count: 14680064, fast_hit_count: 0 */
        break; /* line 73 slow_hit_count: 14680064, fast_hit_count: 0 */
      } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    answ += flag; /* line 76 slow_hit_count: 16777216, fast_hit_count: 1 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  return answ * mul % mod; /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 80 slow_hit_count: 2, fast_hit_count: 2 */
  int n, k; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  while (std::cin >> n >> k) { /* line 82 slow_hit_count: 2, fast_hit_count: 2 */
    std::cout << solve(n, k) << std::endl; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 86 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C code, we need to analyze the differences in line hit counts between the fast and slow runs. This analysis will help us determine which parts of the code are contributing to the slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 16 (`for (int mask = 0; mask < limit; ++mask)`)**:
   - **Slow Hit Count**: 16,777,217
   - **Fast Hit Count**: 2
   - This line is executed significantly more often in the slow run compared to the fast run. This suggests that the loop is a major contributor to the slowdown.

2. **Lines 18-23 (inner loop filling `next` and `prev` arrays)**:
   - **Slow Hit Count**: Approximately 134,217,728 for each line
   - **Fast Hit Count**: 1 for each line
   - These lines are executed a massive number of times in the slow input, indicating that they are part of the performance bottleneck.

3. **Lines 25-28 (initializing `color` and `can` arrays)**:
   - **Slow Hit Count**: Approximately 134,217,728 for each initialization line (26-27)
   - **Fast Hit Count**: 1 for each line
   - The initialization of these arrays is repeated many times, contributing to the slow execution.

4. **Lines 36-73 (DFS traversal and checking)**:
   - **Significant hit counts** are observed across these lines, indicating that the DFS-like traversal is a considerable factor in the slow input case.

The differences in execution counts indicate that the slowdown is primarily due to the inner loops and DFS traversals, which explore many combinations of house plaque assignments when `k = n`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the hit counts and the logic of the code, we can derive natural language performance-characterizing invariants:

1. **Combination Explosion Due to Larger Values of `k`**:
   - **Invariant**: "When `k` is close to `n`, the number of combinations of starting positions and plaque values grows exponentially, causing many iterations over potential configurations. This leads to significant slowdowns due to the exhaustive search."
   
2. **DFS Exploration with High `k`**:
   - **Invariant**: "If `k` is large, the depth-first search used to validate the reachability of house 1 explores a vast number of paths, especially when all possible connections need to be considered. The number of checks increases dramatically, slowing down the program."

3. **Repeated Initialization**:
   - **Invariant**: "Frequent resets of data structures (`next`, `prev`, `color`, `can`) become costly when combined with high iteration counts, particularly when `k` approaches the upper limit of the input constraint."

These invariants are broad and focus on conditions that potentially lead to increased computation time due to the explosion of possibilities and checks, especially when `k` is large. They help in understanding how the algorithm might perform under different input configurations, particularly those close to the upper constraint limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived earlier:

1. **Combination Explosion Due to Larger Values of `k`**:
   ```cpp
   void check_combination_explosion_invariant(int k, int n) {
       if (k == n) {
           cerr << "Warning: Performance bottleneck condition triggered - Combination explosion due to k being equal to n!" << endl;
           abort();
       }
   }
   ```

2. **DFS Exploration with High `k`**:
   ```cpp
   void check_dfs_exploration_invariant(int k) {
       if (k > 7) { // 7 is close to the maximum limit of k (k <= 8), indicating a large DFS exploration space
           cerr << "Warning: Performance bottleneck condition triggered - High DFS exploration due to large k!" << endl;
           abort();
       }
   }
   ```

3. **Repeated Initialization**:
   ```cpp
   void check_repeated_initialization_invariant(int k) {
       if (k > 7) { // Threshold set to 7, close to the maximum limit for k
           cerr << "Warning: Performance bottleneck condition triggered - Repeated initialization due to large k!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

We will integrate the checker functions into the provided program, ensuring that each check is performed at an appropriate point in the flow of execution.

```cpp
#include <bits/stdc++.h>
const long long mod = (long long)1e9 + 7;
const bool debug = 0;

// Checker functions
void check_combination_explosion_invariant(int k, int n) {
    if (k == n) {
        cerr << "Warning: Performance bottleneck condition triggered - Combination explosion due to k being equal to n!" << endl;
        abort();
    }
}

void check_dfs_exploration_invariant(int k) {
    if (k > 7) {
        cerr << "Warning: Performance bottleneck condition triggered - High DFS exploration due to large k!" << endl;
        abort();
    }
}

void check_repeated_initialization_invariant(int k) {
    if (k > 7) {
        cerr << "Warning: Performance bottleneck condition triggered - Repeated initialization due to large k!" << endl;
        abort();
    }
}

long long solve(int n, int k) {
    // Check invariants related to performance bottlenecks
    check_combination_explosion_invariant(k, n);
    check_dfs_exploration_invariant(k);
    check_repeated_initialization_invariant(k);

    long long mul = 1;
    for (int i = k; i < n; ++i) {
        (mul *= (n - k)) %= mod;
    }
    int limit = 1;
    for (int i = 0; i < k; ++i) {
        limit *= k;
    }
    std::vector<int> next(k), prev(k), color(k), can(k);
    static int stack[16], size = 0;
    int answ = 0;
    for (int mask = 0; mask < limit; ++mask) {
        size = 0;
        for (int i = 0, temp = mask; i < k; ++i) {
            int div = temp / k;
            int rem = temp - div * k;
            next[i] = rem;
            prev[rem] = i;
            temp = div;
        }
        for (int i = 0; i < k; ++i) {
            color[i] = 0;
            can[i] = false;
        }
        bool flag = true;
        if (debug) {
            std::cout << std::string(40, '-') << std::endl;
            for (int i = 0; i < k; ++i) {
                printf("next[u=%d]=%d\n", i, next[i]);
            }
        }
        for (int i = 0; i < k; ++i) {
            if (color[i] == 0) {
                stack[size++] = i;
                color[i] = 1;
                while (size > 0) {
                    int u = stack[size - 1];
                    int v = next[u];
                    if (v == 0) {
                        can[u] = true;
                        --size;
                        color[u] = 2;
                    } else if (color[v] == 1) {
                        assert(can[v] == false);
                        can[u] = false;
                        can[v] = false;
                        color[u] = 2;
                        color[v] = 2;
                        --size;
                    } else if (color[v] == 2) {
                        can[u] = can[v];
                        color[u] = 2;
                        --size;
                    } else {
                        color[v] = 1;
                        stack[size++] = v;
                    }
                    if (debug) {
                        printf("\tvisit %d, next = %d, color = %d, can = %d\n", u, v, color[u], can[u]);
                    }
                }
            }
            if (debug) {
                printf("can[i=%d]=%d, size = %d\n", i, can[i], size);
            }
            if (!can[i]) {
                flag = false;
                break;
            }
        }
        answ += flag;
    }
    return answ * mul % mod;
}

int main() {
    int n, k;
    while (std::cin >> n >> k) {
        std::cout << solve(n, k) << std::endl;
    }
    return 0;
}
```

### Explanation
- Each checker function is used to detect potential performance bottlenecks based on the derived invariants.
- The checkers are integrated into the `solve` function before the main computation begins to avoid placing them inside performance-critical loops.
- Warnings and `abort()` calls are triggered when the conditions for the slow paths are detected, aiding in debugging and optimization efforts.

