system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/STACK:64000000")
const int maxn = 1 << 17;
const int inf = 1000000007;
const int mod = 1000000007;
int n, k;
int ans;
vector<int> p;
int fct(int x) {
  if (!x) return 1;
  return x * fct(x - 1);
}
int main() {
  while (cin >> n >> k) {
    ans = 0;
    p.clear();
    for (int i = 0; i <= k; i++) p.push_back(1);
    p[0] = 0;
    int o = fct(k);
    while (1) {
      bool f = 1;
      for (int i = 1; i <= k; i++) {
        bool f1 = 0;
        int x = i;
        for (int j = 0; j < 10; j++) {
          x = p[x];
          f1 |= x == 1;
        }
        f &= f1;
      }
      ans += f;
      int cur = k;
      p[cur]++;
      while (p[cur] == k + 1) {
        p[cur] = 1;
        cur--;
        p[cur]++;
      }
      if (!cur) break;
    }
    for (int i = k + 1; i <= n; i++) ans = 1LL * ans * (n - k) % mod;
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:64000000") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1 << 17; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000000007; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int ans; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> p; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int fct(int x) { /* line 10 slow_hit_count: 9, fast_hit_count: 2 */
  if (!x) return 1; /* line 11 slow_hit_count: 9, fast_hit_count: 2 */
  return x * fct(x - 1); /* line 12 slow_hit_count: 8, fast_hit_count: 1 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  while (cin >> n >> k) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    ans = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    p.clear(); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i <= k; i++) p.push_back(1); /* line 18 slow_hit_count: 10, fast_hit_count: 3 */
    p[0] = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int o = fct(k); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    while (1) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      bool f = 1; /* line 22 slow_hit_count: 16777216, fast_hit_count: 1 */
      for (int i = 1; i <= k; i++) { /* line 23 slow_hit_count: 150994944, fast_hit_count: 2 */
        bool f1 = 0; /* line 24 slow_hit_count: 134217728, fast_hit_count: 1 */
        int x = i; /* line 25 slow_hit_count: 134217728, fast_hit_count: 1 */
        for (int j = 0; j < 10; j++) { /* line 26 slow_hit_count: 1476395008, fast_hit_count: 11 */
          x = p[x]; /* line 27 slow_hit_count: 1342177280, fast_hit_count: 10 */
          f1 |= x == 1; /* line 28 slow_hit_count: 1342177280, fast_hit_count: 10 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        f &= f1; /* line 30 slow_hit_count: 134217728, fast_hit_count: 1 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      ans += f; /* line 32 slow_hit_count: 16777216, fast_hit_count: 1 */
      int cur = k; /* line 33 slow_hit_count: 16777216, fast_hit_count: 1 */
      p[cur]++; /* line 34 slow_hit_count: 16777216, fast_hit_count: 1 */
      while (p[cur] == k + 1) { /* line 35 slow_hit_count: 19173961, fast_hit_count: 2 */
        p[cur] = 1; /* line 36 slow_hit_count: 2396745, fast_hit_count: 1 */
        cur--; /* line 37 slow_hit_count: 2396745, fast_hit_count: 1 */
        p[cur]++; /* line 38 slow_hit_count: 2396745, fast_hit_count: 1 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      if (!cur) break; /* line 40 slow_hit_count: 16777216, fast_hit_count: 1 */
    } /* line 41 slow_hit_count: 16777215, fast_hit_count: 0 */
    for (int i = k + 1; i <= n; i++) ans = 1LL * ans * (n - k) % mod; /* line 42 slow_hit_count: 1, fast_hit_count: 8 */
    cout << ans << endl; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's go through both phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count**: The lines with significantly higher hit counts for the slow input compared to the fast input are:
   - Line 22: `bool f = 1;` is hit 16,777,216 times.
   - Line 23: `for (int i = 1; i <= k; i++)` is hit 150,994,944 times.
   - Line 24-28: Inside the nested loop, these lines are hit over a billion times, especially line 27 and 28 where `x = p[x];` and `f1 |= x == 1;`.

2. **Nested Loops**: The significant difference in hit counts occurs due to nested loops in lines 23 and 26. These loops heavily depend on the value of `k`.

3. **Factorial Calculation**: Line 12 is hit 8 times for the slow input compared to 1 for the fast input, indicating that the factorial computation is called more frequently when `k` is high.

4. **Permutation Logic**: The permutation generation logic (lines 33-40) iteratively tries different configurations, resulting in millions of iterations due to the larger value of `k`.

5. **Key Issue**: The critical performance bottleneck arises from the exponential growth of operations related to the nested loops and permutation generation when `k` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are some natural language performance invariants:

1. **High Permutation Complexity**:
   - **Invariant**: "When `k` is close to its maximum allowed value (8), the nested loops iterate over a factorial number of permutations, leading to exponential growth in computation time."
   - **Explanation**: The complexity mainly arises from the need to iterate over factorial permutations of `k` elements, which becomes significant as `k` approaches its upper constraint.

2. **Nested Loop Overhead**:
   - **Invariant**: "If `k` triggers the maximum nesting depth in loops, each permutation generates a high number of recursive checks, making the execution path exponentially longer."
   - **Explanation**: The inner loop runs 10 iterations for each permutation of `k`, compounding the performance overhead when `k` is large.

3. **Recursive Factorial Calls**:
   - **Invariant**: "If the program frequently calculates factorial values for larger `k`, this can introduce additional recursive call overhead."
   - **Explanation**: Recursive factorial computations are invoked multiple times as part of determining valid permutations and configurations, adding to the computation load.

These invariants are designed to catch scenarios where the program is likely to slow down due to the combinatorial explosion of possibilities and checks when `k` is high relative to its constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 by implementing the performance-characterizing invariants in C++ code snippets.

### Phase 3: Implementing Natural Language Invariants in C++ Code

1. **High Permutation Complexity**:
   ```cpp
   void check_permutation_complexity(int k) {
       if (k > 7) {  // Since k <= 8, check for the highest value that leads to complexity
           cerr << "Warning: Performance bottleneck condition triggered - high permutation complexity!" << endl;
           abort();
       }
   }
   ```

2. **Nested Loop Overhead**:
   ```cpp
   void check_nested_loop_overhead(int k) {
       if (k > 7) {  // This check ensures the nested loop does not iterate unnecessarily
           cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop overhead!" << endl;
           abort();
       }
   }
   ```

3. **Recursive Factorial Calls**:
   ```cpp
   void check_recursive_factorial_calls(int k) {
       if (k > 7) {  // Recursion depth for factorial is problematic when k is high
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursive factorial calls!" << endl;
           abort();
       }
   }
   ```

Now, we proceed to Phase 4, where we'll integrate these checks into the original program.

### Phase 4: Integrating Checks into the Original Program

Here is the instrumented C++ code with the performance checks incorporated:

```cpp
#include <bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/STACK:64000000")

const int maxn = 1 << 17;
const int inf = 1000000007;
const int mod = 1000000007;

int n, k;
int ans;
vector<int> p;

int fct(int x) {
    if (!x) return 1;
    return x * fct(x - 1);
}

void check_permutation_complexity(int k) {
    if (k > 7) {
        cerr << "Warning: Performance bottleneck condition triggered - high permutation complexity!" << endl;
        abort();
    }
}

void check_nested_loop_overhead(int k) {
    if (k > 7) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop overhead!" << endl;
        abort();
    }
}

void check_recursive_factorial_calls(int k) {
    if (k > 7) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive factorial calls!" << endl;
        abort();
    }
}

int main() {
    while (cin >> n >> k) {
        // Check for performance bottlenecks before starting computation
        check_permutation_complexity(k);
        check_nested_loop_overhead(k);
        check_recursive_factorial_calls(k);

        ans = 0;
        p.clear();
        for (int i = 0; i <= k; i++) p.push_back(1);
        p[0] = 0;
        int o = fct(k);
        while (1) {
            bool f = 1;
            for (int i = 1; i <= k; i++) {
                bool f1 = 0;
                int x = i;
                for (int j = 0; j < 10; j++) {
                    x = p[x];
                    f1 |= x == 1;
                }
                f &= f1;
            }
            ans += f;
            int cur = k;
            p[cur]++;
            while (p[cur] == k + 1) {
                p[cur] = 1;
                cur--;
                p[cur]++;
            }
            if (!cur) break;
        }
        for (int i = k + 1; i <= n; i++) ans = 1LL * ans * (n - k) % mod;
        cout << ans << endl;
    }
    return 0;
}
```

**Explanation of Changes**:
- **Insertion of Check Functions**: Each invariant check is implemented as a function and called before the main computation starts. This ensures that the program will terminate if conditions likely to cause slowdowns are detected.
- **Checking `k`**: The checks are specifically looking for high values of `k` (greater than 7), as this is the point where permutation complexity, nested loops, and recursive factorial calls can become performance bottlenecks.

These checks have been carefully inserted to avoid adding overhead within tight loops, focusing on execution paths where high computational complexity is expected.

