system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:16777216")
using namespace std;
const int mod = 1000000007;
int Pow(int a, int b, int c) {
  int res = 1;
  while (b) {
    if (b & 1) res = (res * 1ll * a) % mod;
    a = (a * 1ll * a) % mod;
    b >>= 1;
  }
  return res;
}
int p[10];
int ans = 0;
void Solve(int n, int pos) {
  if (pos == n) {
    int cnt = 0, v = 0, ok = 1;
    for (int(i) = 0; (i) < (n); ++(i)) {
      v = i;
      cnt = 0;
      while (v && cnt <= n) {
        cnt++;
        v = p[v];
      }
      if (v) ok = false;
    }
    ans += ok;
  } else {
    for (int(i) = 0; (i) < (n); ++(i)) {
      p[pos] = i;
      Solve(n, pos + 1);
    }
  }
}
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  Solve(k, 0);
  printf("%d\n", int((ans * 1ll * Pow(n - k, n - k, mod)) % mod));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:16777216") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int Pow(int a, int b, int c) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int res = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (b) { /* line 7 slow_hit_count: 1, fast_hit_count: 4 */
    if (b & 1) res = (res * 1ll * a) % mod; /* line 8 slow_hit_count: 0, fast_hit_count: 3 */
    a = (a * 1ll * a) % mod; /* line 9 slow_hit_count: 0, fast_hit_count: 3 */
    b >>= 1; /* line 10 slow_hit_count: 0, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int p[10]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int ans = 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void Solve(int n, int pos) { /* line 16 slow_hit_count: 19173961, fast_hit_count: 2 */
  if (pos == n) { /* line 17 slow_hit_count: 19173961, fast_hit_count: 2 */
    int cnt = 0, v = 0, ok = 1; /* line 18 slow_hit_count: 16777216, fast_hit_count: 1 */
    for (int(i) = 0; (i) < (n); ++(i)) { /* line 19 slow_hit_count: 150994944, fast_hit_count: 2 */
      v = i; /* line 20 slow_hit_count: 134217728, fast_hit_count: 1 */
      cnt = 0; /* line 21 slow_hit_count: 134217728, fast_hit_count: 1 */
      while (v && cnt <= n) { /* line 22 slow_hit_count: 931971328, fast_hit_count: 1 */
        cnt++; /* line 23 slow_hit_count: 797753600, fast_hit_count: 0 */
        v = p[v]; /* line 24 slow_hit_count: 797753600, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      if (v) ok = false; /* line 26 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    ans += ok; /* line 28 slow_hit_count: 16777216, fast_hit_count: 1 */
  } else { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    for (int(i) = 0; (i) < (n); ++(i)) { /* line 30 slow_hit_count: 21570705, fast_hit_count: 2 */
      p[pos] = i; /* line 31 slow_hit_count: 19173960, fast_hit_count: 1 */
      Solve(n, pos + 1); /* line 32 slow_hit_count: 19173960, fast_hit_count: 1 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 19173961, fast_hit_count: 2 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  Solve(k, 0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", int((ans * 1ll * Pow(n - k, n - k, mod)) % mod)); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts, the following observations can be made:

1. **Recursive Function Calls**: The function `Solve(int n, int pos)` is called significantly more often with the slow input (19,173,961 times) than with the fast input (2 times). This implies a substantial increase in recursive calls when `k` equals `n`, which in this test case is 8.
   
2. **Loop Overhead**: Inside `Solve`, the loop `for (int(i) = 0; (i) < (n); ++(i))` executes a massive number of times for the slow input (21,570,705 times), compared to only 2 times for the fast input. This is due to the recursive nature of the function, and the extensive branching caused by the loop.

3. **Inner Loop Operations**: Another loop inside the `Solve` function, `while (v && cnt <= n)`, is hit particularly hard (931,971,328 times for the slow input vs 1 time for the fast input). This loop continues as long as `v` is non-zero and `cnt` is less than or equal to `n`, suggesting deep nested iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language statements:

1. **Recursive Calls and Permutations**:
   - **Invariant**: "When `k` is close to `n`, especially when `k = n`, the number of permutations of house plaques greatly increases, causing a substantial rise in recursive calls."
   - **Explanation**: The function `Solve` is designed to generate permutations, and when `k` approaches `n`, the number of permutations becomes `k!`, leading to an exponential growth in the number of recursive calls.

2. **Nested Iterations Over House Plaques**:
   - **Invariant**: "If the number of plaques `k` equals `n`, and each plaque is visited multiple times through nested iterations, the program will experience significant slowdown."
   - **Explanation**: The program deeply iterates through possible configurations of plaques when `k = n`, leading to many nested iterations that result in performance bottlenecks.

3. **Potential for Deep Recursion**:
   - **Invariant**: "Recursive depth can become significantly high when exploring permutations of house plaques, especially when the number of plaques to permute (`k`) approaches `n`."
   - **Explanation**: The recursion depth is directly influenced by the depth of permutation exploration, and with `k` approaching `n`, the recursion tree is fully traversed, leading to increased computation time.

These performance-characterizing invariants abstractly describe the conditions under which the program experiences slow performance, aligning with the problem's constraints of `n <= 1000` and `k <= 8`. They are based on the observation of the hit counts and the nature of the recursion and permutation generation in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived in Phase 2, here are the C++ code snippets that check each condition:

1. **Checker for Recursive Calls and Permutations**:
   - This checker will verify if `k` is close to or equal to `n`, which leads to an increased number of recursive calls.

```cpp
void check_permutation_invariant(int n, int k) {
    if (k == n) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive calls due to full permutations!" << endl;
        abort();
    }
}
```

2. **Checker for Nested Iterations Over House Plaques**:
   - This checker will confirm if each plaque is visited multiple times through nested iterations when `k = n`.

```cpp
void check_nested_iteration_invariant(int n, int k) {
    int maxIterations = 1000000;  // arbitrary threshold for complexity estimation
    if (k == n && n! > maxIterations) {  // n! can be a proxy for the complexity of the permutations
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested iterations!" << endl;
        abort();
    }
}
```
(Note: The factorial check here is conceptual; in code, a practical threshold should be used as computing factorial directly can be inefficient for large `n`.)

3. **Checker for Deep Recursion**:
   - This checker will monitor recursion depth and branching factor when exploring permutations of house plaques.

```cpp
void check_deep_recursion_invariant(int currentDepth, int maxDepth, int branchFactor) {
    if (currentDepth > maxDepth && branchFactor > 10) { // Example threshold for depth and branching factor
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the original C++ code with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:16777216")
using namespace std;
const int mod = 1000000007;

// Checker functions
void check_permutation_invariant(int n, int k) {
    if (k == n) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive calls due to full permutations!" << endl;
        abort();
    }
}

void check_nested_iteration_invariant(int n, int k) {
    int maxIterations = 1000000;  // an arbitrary threshold for complexity estimation
    // Conceptually checking n! > maxIterations, but a practical threshold should be used
    if (k == n && n > 8) {  // factorial grows fast, we use a simpler check
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested iterations!" << endl;
        abort();
    }
}

int Pow(int a, int b, int c) {
    int res = 1;
    while (b) {
        if (b & 1) res = (res * 1ll * a) % mod;
        a = (a * 1ll * a) % mod;
        b >>= 1;
    }
    return res;
}

int p[10];
int ans = 0;

void Solve(int n, int pos) {
    if (pos == n) {
        int cnt = 0, v = 0, ok = 1;
        for (int(i) = 0; (i) < (n); ++(i)) {
            v = i;
            cnt = 0;
            while (v && cnt <= n) {
                cnt++;
                v = p[v];
            }
            if (v) ok = false;
        }
        ans += ok;
    } else {
        for (int(i) = 0; (i) < (n); ++(i)) {
            p[pos] = i;
            Solve(n, pos + 1);
        }
    }
}

int main() {
    int n, k;
    scanf("%d%d", &n, &k);

    // Place checks after input reading
    check_permutation_invariant(n, k);  // Check for permutation-induced recursion
    check_nested_iteration_invariant(n, k);  // Check for nested iterations

    Solve(k, 0);
    printf("%d\n", int((ans * 1ll * Pow(n - k, n - k, mod)) % mod));
    return 0;
}
```

### Explanation of Integrated Checkers:

- **`check_permutation_invariant`**: Placed right after input reading to catch the condition where `k` approaches `n` directly leading to a performance bottleneck due to full permutations.
  
- **`check_nested_iteration_invariant`**: Also positioned after input reading to prevent unnecessary execution when `k == n` and the potential iteration complexity is too high.

These checks are strategically placed to avoid adding significant overhead to performance-critical loops and ensure that any problematic scenarios are detected early in the execution.

