system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void fastStream() {
  cin.tie(0);
  std::ios_base::sync_with_stdio(0);
}
const int mod = 1000000000 + 7;
int K;
int C[1010];
int dp[1010][1010];
int tot;
const int MAX_ARG = 2200;
long long dp2[MAX_ARG][MAX_ARG];
long long comb(int a, int b) {
  if (a < 0 || b < 0) return 0;
  if (a < b)
    return 0;
  else if (b == 0)
    return 1;
  else if (dp2[a][b] >= 0)
    return dp2[a][b];
  return dp2[a][b] = (comb(a - 1, b) + comb(a - 1, b - 1)) % mod;
}
int dfs(int kind, int pos, int sum) {
  if (dp[kind][pos] >= 0) return dp[kind][pos];
  long long res = 0;
  if (kind == K) {
    res = 1;
  } else if (pos == tot) {
    res = 0;
  } else {
    if (pos + 1 >= C[kind] + sum) {
      const int A = pos + 1 - (C[kind] + sum) + C[kind] - 1;
      const int B = C[kind] - 1;
      res = (res + (comb(A, B) * dfs(kind + 1, pos + 1, sum + C[kind]))) % mod;
    }
    res = (res + dfs(kind, pos + 1, sum)) % mod;
  }
  return dp[kind][pos] = res;
}
int main() {
  memset(dp, -1, sizeof(dp));
  fastStream();
  cin >> K;
  for (int i = 0; i < K; i++) {
    cin >> C[i];
    tot += C[i];
  }
  memset(dp2, -1, sizeof(dp2));
  cout << dfs(0, 0, 0) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
35
75
38
33
27
44
40
36
41
42
33
30
49
42
62
39
40
35
43
31
19
46
42
34
33


(G.2) Fast Input

25
35
43
38
33
27
44
40
36
41
42
33
30
49
42
62
39
40
35
43
31
19
46
42
34
33


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void fastStream() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios_base::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
const int mod = 1000000000 + 7; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int K; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int C[1010]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1010][1010]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int tot; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX_ARG = 2200; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long dp2[MAX_ARG][MAX_ARG]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(int a, int b) { /* line 14 slow_hit_count: 146830, fast_hit_count: 103886 */
  if (a < 0 || b < 0) return 0; /* line 15 slow_hit_count: 146830, fast_hit_count: 103886 */
  if (a < b) /* line 16 slow_hit_count: 146830, fast_hit_count: 103886 */
    return 0; /* line 17 slow_hit_count: 74, fast_hit_count: 61 */
  else if (b == 0) /* line 18 slow_hit_count: 146756, fast_hit_count: 103825 */
    return 1; /* line 19 slow_hit_count: 955, fast_hit_count: 923 */
  else if (dp2[a][b] >= 0) /* line 20 slow_hit_count: 145801, fast_hit_count: 102902 */
    return dp2[a][b]; /* line 21 slow_hit_count: 78131, fast_hit_count: 56688 */
  return dp2[a][b] = (comb(a - 1, b) + comb(a - 1, b - 1)) % mod; /* line 22 slow_hit_count: 67670, fast_hit_count: 46214 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int dfs(int kind, int pos, int sum) { /* line 24 slow_hit_count: 23945, fast_hit_count: 23849 */
  if (dp[kind][pos] >= 0) return dp[kind][pos]; /* line 25 slow_hit_count: 23945, fast_hit_count: 23849 */
  long long res = 0; /* line 26 slow_hit_count: 12480, fast_hit_count: 12416 */
  if (kind == K) { /* line 27 slow_hit_count: 12480, fast_hit_count: 12416 */
    res = 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  } else if (pos == tot) { /* line 29 slow_hit_count: 12479, fast_hit_count: 12415 */
    res = 0; /* line 30 slow_hit_count: 25, fast_hit_count: 25 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    if (pos + 1 >= C[kind] + sum) { /* line 32 slow_hit_count: 12454, fast_hit_count: 12390 */
      const int A = pos + 1 - (C[kind] + sum) + C[kind] - 1; /* line 33 slow_hit_count: 11490, fast_hit_count: 11458 */
      const int B = C[kind] - 1; /* line 34 slow_hit_count: 11490, fast_hit_count: 11458 */
      res = (res + (comb(A, B) * dfs(kind + 1, pos + 1, sum + C[kind]))) % mod; /* line 35 slow_hit_count: 11490, fast_hit_count: 11458 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    res = (res + dfs(kind, pos + 1, sum)) % mod; /* line 37 slow_hit_count: 12454, fast_hit_count: 12390 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[kind][pos] = res; /* line 39 slow_hit_count: 12480, fast_hit_count: 12416 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  fastStream(); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> K; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < K; i++) { /* line 45 slow_hit_count: 26, fast_hit_count: 26 */
    cin >> C[i]; /* line 46 slow_hit_count: 25, fast_hit_count: 25 */
    tot += C[i]; /* line 47 slow_hit_count: 25, fast_hit_count: 25 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp2, -1, sizeof(dp2)); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dfs(0, 0, 0) << endl; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks within the provided C program, we first need to understand the structure and logic of the code. The program is designed to solve a problem involving the drawing of colored balls, keeping track of the order in which the last ball of each color is drawn. The main computational work is performed by the recursive `dfs` function and the `comb` function, which computes combinations.

**Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Line 22 (`comb` function recursion):** This line is a critical bottleneck because it involves recursive calls to compute combinations, which can be computationally expensive, especially when `a` and `b` are large. The hit count difference between slow and fast inputs is substantial (67,670 vs. 46,214), indicating heavier usage for the slow input.

2. **Line 35 (`dfs` recursion with `comb`):** This involves a call to both the `dfs` function again and the `comb` function. The hit count here is significant (11,490 for slow vs. 11,458 for fast) but not drastically different, yet it highlights potential inefficiency related to recursion depth and state space exploration.

3. **Line 24 (`dfs` function):** The hit count here is quite high and similar for both inputs (23,945 vs. 23,849). It suggests that although the recursive calls are numerous, the difference in performance might be more related to the state space size handled within these calls.

Overall, the primary inefficiency seems to stem from the recursive computation of combinations, which are recomputed multiple times, potentially with overlapping subproblems.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant on Combination Computation:**
   - **Natural Language:** "If the ranges for which combinations are computed become large, especially repetitively within recursive calls, the program's performance may degrade. This happens when the sum of the balls for each color and the current position allows for large values of `a` (in `comb(a, b)`), leading to deep recursion."
   - **Explanation:** The `comb` function's recursion can become particularly expensive if `a` and `b` are large, leading to many overlapping subproblems. This is exacerbated if there's not enough memoization or if the memoized table (`dp2`) doesn't cover the entire range efficiently.

2. **Invariant on Recursive State Space:**
   - **Natural Language:** "When the recursion in the `dfs` function explores a large state space due to high variation in the number of balls between colors, the performance can degrade. Specifically, large differences in `C[i]` values may cause the `dfs` function to explore more permutations."
   - **Explanation:** The depth and breadth of the recursive state space heavily depend on the configuration of ball colors (i.e., `C[i]` values). If there's significant variation, it results in more extensive exploration and computation.

3. **Invariant on Color Transition Complexity:**
   - **Natural Language:** "If the transition between colors (from last ball of one color to the next) requires complex computation due to many possible interpositions, performance may degrade. This typically occurs when there are many balls of adjacent colors, leading to a complex arrangement of drawing orders."
   - **Explanation:** The constraint of drawing the last ball of color `i` before `i+1` means the program must handle numerous possible transitions. If these transitions are intricate due to large numbers of balls in neighboring colors, it increases computational complexity.

These performance-characterizing invariants highlight potential inefficiencies tied to recursive depth, combination calculations, and the state space of the problem, especially tied to the distribution and number of colored balls. Addressing these areas can lead to significant performance improvements.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Runtime Checks

Based on the performance-characterizing invariants derived in Phase 2, here are the C++ code snippets to check these conditions at runtime:

1. **Invariant on Combination Computation:**

   ```cpp
   void check_combination_computation(int a, int b) {
       if (a > 1000 || b > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered - combination computation with large values!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Recursive State Space:**

   ```cpp
   void check_recursive_state_space(int kind, int tot, int K) {
       if (kind < K && tot > 900) {
           cerr << "Warning: Performance bottleneck condition triggered - large recursive state space exploration!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Color Transition Complexity:**

   ```cpp
   void check_color_transition_complexity(int currentColorCount, int nextColorCount) {
       if (currentColorCount > 800 && nextColorCount > 800) {
           cerr << "Warning: Performance bottleneck condition triggered - complex color transitions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks into the Program

Below is the modified C++ code, with the checker functions integrated at the appropriate points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

void fastStream() {
    cin.tie(0);
    std::ios_base::sync_with_stdio(0);
}

const int mod = 1000000000 + 7;
int K;
int C[1010];
int dp[1010][1010];
int tot;
const int MAX_ARG = 2200;
long long dp2[MAX_ARG][MAX_ARG];

void check_combination_computation(int a, int b) {
    if (a > 1000 || b > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - combination computation with large values!" << endl;
        abort();
    }
}

void check_recursive_state_space(int kind, int tot, int K) {
    if (kind < K && tot > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - large recursive state space exploration!" << endl;
        abort();
    }
}

void check_color_transition_complexity(int currentColorCount, int nextColorCount) {
    if (currentColorCount > 800 && nextColorCount > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - complex color transitions!" << endl;
        abort();
    }
}

long long comb(int a, int b) {
    check_combination_computation(a, b); // Check for large combination computation
    if (a < 0 || b < 0) return 0;
    if (a < b)
        return 0;
    else if (b == 0)
        return 1;
    else if (dp2[a][b] >= 0)
        return dp2[a][b];
    return dp2[a][b] = (comb(a - 1, b) + comb(a - 1, b - 1)) % mod;
}

int dfs(int kind, int pos, int sum) {
    if (dp[kind][pos] >= 0) return dp[kind][pos];
    long long res = 0;
    if (kind == K) {
        res = 1;
    } else if (pos == tot) {
        res = 0;
    } else {
        check_recursive_state_space(kind, tot, K); // Check for recursive state space
        if (pos + 1 >= C[kind] + sum) {
            const int A = pos + 1 - (C[kind] + sum) + C[kind] - 1;
            const int B = C[kind] - 1;
            res = (res + (comb(A, B) * dfs(kind + 1, pos + 1, sum + C[kind]))) % mod;
        }
        res = (res + dfs(kind, pos + 1, sum)) % mod;
    }
    return dp[kind][pos] = res;
}

int main() {
    memset(dp, -1, sizeof(dp));
    fastStream();
    cin >> K;
    for (int i = 0; i < K; i++) {
        cin >> C[i];
        tot += C[i];
    }
    
    for (int i = 0; i < K - 1; i++) {
        check_color_transition_complexity(C[i], C[i + 1]); // Check for complex color transition
    }
    
    memset(dp2, -1, sizeof(dp2));
    cout << dfs(0, 0, 0) << endl;
    return 0;
}
```

### Explanation of Integration:

- **Combination Computation Check:** Placed inside the `comb` function to check for large values that might indicate an expensive operation.
  
- **Recursive State Space Check:** Added to `dfs` to check if the recursion is exploring a large state space, particularly when the total number of balls (`tot`) becomes large.

- **Color Transition Complexity Check:** Added after reading input to ensure that any complex transitions between large numbers of balls of consecutive colors are flagged early on.

These checks help identify potential performance bottlenecks during execution and are strategically placed to avoid introducing additional overhead in the program's critical paths.

