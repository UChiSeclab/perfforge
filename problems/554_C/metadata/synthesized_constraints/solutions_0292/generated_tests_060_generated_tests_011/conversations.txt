system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int N;
int arr[1010];
int sum[1010];
long long c[1010][1010], dp[1010][1010];
long long C(int n, int r) {
  if (n == r || r == 0) return 1;
  if (c[n][r] != -1) return c[n][r];
  return c[n][r] = (C(n - 1, r - 1) % 1000000007 + C(n - 1, r) % 1000000007) %
                   1000000007;
}
long long solve(int ind, int pos) {
  if (pos == sum[N - 1] + 1) {
    if (ind == N) return 1;
    return 0;
  }
  if (dp[ind][pos] != -1) return dp[ind][pos];
  long long p1 = 0, p2 = 0;
  if (pos - sum[ind] < 0)
    p1 = solve(ind, pos + 1);
  else {
    p1 = solve(ind, pos + 1);
    p2 = (solve(ind + 1, pos + 1) % 1000000007 *
          C(pos - sum[ind] + arr[ind] - 1, arr[ind] - 1) % 1000000007) %
         1000000007;
  }
  return dp[ind][pos] = (p1 % 1000000007 + p2 % 1000000007) % 1000000007;
}
int main() {
  memset(c, -1, sizeof(c));
  memset(dp, -1, sizeof(dp));
  cin >> N;
  for (int i = 0; i < N; i++) {
    cin >> arr[i];
    if (i == 0)
      sum[i] = arr[i];
    else
      sum[i] = sum[i - 1] + arr[i];
  }
  cout << solve(0, 1) << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
35
75
38
33
27
44
40
36
41
42
33
30
49
42
62
39
40
35
43
31
19
46
42
34
33


(G.2) Fast Input

25
35
43
38
33
27
44
40
36
41
42
33
30
49
42
62
39
40
35
43
31
19
46
42
34
33


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int N; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int arr[1010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int sum[1010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long c[1010][1010], dp[1010][1010]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long C(int n, int r) { /* line 7 slow_hit_count: 146682, fast_hit_count: 103764 */
  if (n == r || r == 0) return 1; /* line 8 slow_hit_count: 146682, fast_hit_count: 103764 */
  if (c[n][r] != -1) return c[n][r]; /* line 9 slow_hit_count: 145629, fast_hit_count: 102756 */
  return c[n][r] = (C(n - 1, r - 1) % 1000000007 + C(n - 1, r) % 1000000007) % /* line 10 slow_hit_count: 67596, fast_hit_count: 46153 */
                   1000000007; /* line 11 slow_hit_count: 67596, fast_hit_count: 46153 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(int ind, int pos) { /* line 13 slow_hit_count: 23945, fast_hit_count: 23849 */
  if (pos == sum[N - 1] + 1) { /* line 14 slow_hit_count: 23945, fast_hit_count: 23849 */
    if (ind == N) return 1; /* line 15 slow_hit_count: 50, fast_hit_count: 50 */
    return 0; /* line 16 slow_hit_count: 49, fast_hit_count: 49 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[ind][pos] != -1) return dp[ind][pos]; /* line 18 slow_hit_count: 23895, fast_hit_count: 23799 */
  long long p1 = 0, p2 = 0; /* line 19 slow_hit_count: 12454, fast_hit_count: 12390 */
  if (pos - sum[ind] < 0) /* line 20 slow_hit_count: 12454, fast_hit_count: 12390 */
    p1 = solve(ind, pos + 1); /* line 21 slow_hit_count: 964, fast_hit_count: 932 */
  else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    p1 = solve(ind, pos + 1); /* line 23 slow_hit_count: 11490, fast_hit_count: 11458 */
    p2 = (solve(ind + 1, pos + 1) % 1000000007 * /* line 24 slow_hit_count: 11490, fast_hit_count: 11458 */
          C(pos - sum[ind] + arr[ind] - 1, arr[ind] - 1) % 1000000007) % /* line 25 slow_hit_count: 11490, fast_hit_count: 11458 */
         1000000007; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[ind][pos] = (p1 % 1000000007 + p2 % 1000000007) % 1000000007; /* line 28 slow_hit_count: 12454, fast_hit_count: 12390 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  memset(c, -1, sizeof(c)); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; i++) { /* line 34 slow_hit_count: 26, fast_hit_count: 26 */
    cin >> arr[i]; /* line 35 slow_hit_count: 25, fast_hit_count: 25 */
    if (i == 0) /* line 36 slow_hit_count: 25, fast_hit_count: 25 */
      sum[i] = arr[i]; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      sum[i] = sum[i - 1] + arr[i]; /* line 39 slow_hit_count: 24, fast_hit_count: 24 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << solve(0, 1) << endl; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issue in the given C program, we need to analyze the line-level hit counts and identify which parts of the code are executed significantly more often in the slow input compared to the fast input. After examining the provided information, we can derive performance-characterizing invariants that describe the conditions under which the program may slow down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Recursive Function `C`:**
   - The function `C(n, r)` is heavily hit in both slow and fast runs, but hit counts are notably higher for the slow input (`146,682` vs. `103,764`).
   - This function calculates combinations and uses memoization to avoid redundant calculations. However, it still incurs a high overhead due to the large number of recursive calls.

2. **Recursive Function `solve`:**
   - This function also has a high hit count, with `23,945` hits for the slow input and `23,849` for the fast input.
   - Within this function, the line `p2 = (solve(ind + 1, pos + 1) % 1000000007 * C(...) % 1000000007) % 1000000007` is executed significantly more on the slow input.

3. **Combination of `solve` and `C` Calls:**
   - The combination of calls to `solve` and `C` appears to be a bottleneck, especially when `solve` calls `C` within each recursive invocation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **High Recursive Depth:**
   - "If the depth of recursive calls in `solve` increases significantly due to a large number of colors or specific distributions of balls per color, the computation may slow down. This is exacerbated by frequent calls to the combination function `C` within these recursive calls."

2. **Complexity of Combination Calculations:**
   - "When the calculation of combinations using `C(n, r)` becomes intensive due to large values of `n` and `r`, and these calculations happen repeatedly within the recursive structure, performance may degrade."

3. **Distribution of Balls Influencing Recursive Paths:**
   - "If certain configurations of ball counts lead to prolonged recursive paths in the `solve` function, the program may experience slowdowns. This is particularly true if the number of balls for each color is such that intermediate states frequently reach boundaries that trigger deeper recursion."

These invariants help in identifying patterns or configurations that may lead to performance issues, without relying on specific numeric values from the slow input. The focus is on the recursive nature and combination calculations, which are crucial to the program's performance under varying inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we will implement them as runtime checks in C++.

#### Invariant 1: High Recursive Depth
- **Condition:** If the depth of recursive calls in `solve` increases significantly due to a large number of colors or specific distributions of balls per color.

```cpp
void check_recursive_depth_invariant(int currentDepth, int maxDepth, int k) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck triggered - excessive recursion depth!" << endl;
        abort();
    }
}
```

#### Invariant 2: Complexity of Combination Calculations
- **Condition:** When the calculation of combinations using `C(n, r)` becomes intensive due to large values of `n` and `r`.

```cpp
void check_combination_invariant(int n, int r, int threshold) {
    if (n > threshold || r > threshold) {
        cerr << "Warning: Performance bottleneck triggered - combination calculation too intensive!" << endl;
        abort();
    }
}
```

#### Invariant 3: Distribution of Balls Influencing Recursive Paths
- **Condition:** If certain configurations of ball counts lead to prolonged recursive paths in the `solve` function.

```cpp
void check_distribution_invariant(int totalBalls, int threshold) {
    if (totalBalls > threshold) {
        cerr << "Warning: Performance bottleneck triggered - unfavorable ball distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, we integrate these checks into the provided C++ program. We must place these checks strategically to minimize overhead and maximize detection of potential slowdowns.

```cpp
#include <bits/stdc++.h>
using namespace std;
int N;
int arr[1010];
int sum[1010];
long long c[1010][1010], dp[1010][1010];

// Function to check for deep recursion
void check_recursive_depth_invariant(int currentDepth, int maxDepth, int k) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck triggered - excessive recursion depth!" << endl;
        abort();
    }
}

// Function to check intensive combination calculations
void check_combination_invariant(int n, int r, int threshold) {
    if (n > threshold || r > threshold) {
        cerr << "Warning: Performance bottleneck triggered - combination calculation too intensive!" << endl;
        abort();
    }
}

// Function to check unfavorable ball distribution
void check_distribution_invariant(int totalBalls, int threshold) {
    if (totalBalls > threshold) {
        cerr << "Warning: Performance bottleneck triggered - unfavorable ball distribution!" << endl;
        abort();
    }
}

long long C(int n, int r) {
    // Check for complexity in combination calculations
    check_combination_invariant(n, r, 500);

    if (n == r || r == 0) return 1;
    if (c[n][r] != -1) return c[n][r];
    return c[n][r] = (C(n - 1, r - 1) % 1000000007 + C(n - 1, r) % 1000000007) %
                     1000000007;
}

long long solve(int ind, int pos, int currentDepth) {
    // Check recursive depth
    check_recursive_depth_invariant(currentDepth, 50, N);

    if (pos == sum[N - 1] + 1) {
        if (ind == N) return 1;
        return 0;
    }
    if (dp[ind][pos] != -1) return dp[ind][pos];
    long long p1 = 0, p2 = 0;
    if (pos - sum[ind] < 0)
        p1 = solve(ind, pos + 1, currentDepth + 1);
    else {
        p1 = solve(ind, pos + 1, currentDepth + 1);
        p2 = (solve(ind + 1, pos + 1, currentDepth + 1) % 1000000007 *
              C(pos - sum[ind] + arr[ind] - 1, arr[ind] - 1) % 1000000007) %
             1000000007;
    }
    return dp[ind][pos] = (p1 % 1000000007 + p2 % 1000000007) % 1000000007;
}

int main() {
    memset(c, -1, sizeof(c));
    memset(dp, -1, sizeof(dp));
    cin >> N;
    int totalBalls = 0; // Variable to keep track of total balls
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
        totalBalls += arr[i]; // Accumulate the total number of balls
        if (i == 0)
            sum[i] = arr[i];
        else
            sum[i] = sum[i - 1] + arr[i];
    }
    
    // Check for unfavorable ball distribution
    check_distribution_invariant(totalBalls, 1000);

    cout << solve(0, 1, 0) << endl;
}
```

### Explanation of Checks:
- **Recursive Depth Check:** Triggered if the depth of the recursion exceeds a reasonable limit, indicating potential inefficiency.
- **Combination Calculation Check:** Triggered if the parameters for combination calculations are too large, indicating intensive computation.
- **Ball Distribution Check:** Triggered if the total number of balls exceeds a threshold, which might lead to unfavorable recursive paths.

These checks are designed to catch potential performance bottlenecks during runtime, providing valuable feedback for optimizing the code.

