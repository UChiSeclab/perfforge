system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxk = 1e3 + 7;
const int p = 1000000007;
int k;
int c[maxk];
long long dp[maxk];
int cnt;
long long n, m;
long long quick_mod(long long a, long long b) {
  long long ans = 1;
  a %= p;
  while (b) {
    if (b & 1) {
      ans = ans * a % p;
      b--;
    }
    b >>= 1;
    a = a * a % p;
  }
  return ans;
}
long long C(long long n, long long m) {
  if (m > n) return 0;
  long long ans = 1;
  for (int i = 1; i <= m; i++) {
    long long a = (n + i - m) % p;
    long long b = i % p;
    ans = ans * (a * quick_mod(b, p - 2) % p) % p;
  }
  return ans;
}
long long Lucas(long long n, long long m) {
  if (m == 0) return 1;
  return C(n % p, m % p) * Lucas(n / p, m / p) % p;
}
long long fun(long long x) {
  long long ans = 0;
  for (int i = 0; i < x - 1; i++) {
    long long t = Lucas(x - 2, i);
    long long y = Lucas(cnt + 1, i + 1);
    ans = (ans % p + (t % p * y % p) % p) % p;
  }
  if (!ans) return 1ll;
  return ans;
}
void solve() {
  dp[0] = 1;
  cnt = c[0];
  for (int i = 1; i < k; i++) {
    dp[i] = dp[i - 1] * fun(c[i]) % p;
    cnt += c[i];
  }
  cout << dp[k - 1] << endl;
}
int main() {
  cin >> k;
  for (int i = 0; i < k; i++) {
    cin >> c[i];
  }
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11
291
394
52
42
19
26
3
3
31
68
3


(G.2) Fast Input

11
291
82
52
42
19
26
3
3
31
68
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxk = 1e3 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int p = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int k; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int c[maxk]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[maxk]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int cnt; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long quick_mod(long long a, long long b) { /* line 10 slow_hit_count: 130438, fast_hit_count: 17193 */
  long long ans = 1; /* line 11 slow_hit_count: 130438, fast_hit_count: 17193 */
  a %= p; /* line 12 slow_hit_count: 130438, fast_hit_count: 17193 */
  while (b) { /* line 13 slow_hit_count: 4043578, fast_hit_count: 532983 */
    if (b & 1) { /* line 14 slow_hit_count: 3913140, fast_hit_count: 515790 */
      ans = ans * a % p; /* line 15 slow_hit_count: 1956570, fast_hit_count: 257895 */
      b--; /* line 16 slow_hit_count: 1956570, fast_hit_count: 257895 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 18 slow_hit_count: 3913140, fast_hit_count: 515790 */
    a = a * a % p; /* line 19 slow_hit_count: 3913140, fast_hit_count: 515790 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 21 slow_hit_count: 130438, fast_hit_count: 17193 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long C(long long n, long long m) { /* line 23 slow_hit_count: 1252, fast_hit_count: 628 */
  if (m > n) return 0; /* line 24 slow_hit_count: 1252, fast_hit_count: 628 */
  long long ans = 1; /* line 25 slow_hit_count: 1151, fast_hit_count: 628 */
  for (int i = 1; i <= m; i++) { /* line 26 slow_hit_count: 131589, fast_hit_count: 17821 */
    long long a = (n + i - m) % p; /* line 27 slow_hit_count: 130438, fast_hit_count: 17193 */
    long long b = i % p; /* line 28 slow_hit_count: 130438, fast_hit_count: 17193 */
    ans = ans * (a * quick_mod(b, p - 2) % p) % p; /* line 29 slow_hit_count: 130438, fast_hit_count: 17193 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 31 slow_hit_count: 1151, fast_hit_count: 628 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
long long Lucas(long long n, long long m) { /* line 33 slow_hit_count: 2514, fast_hit_count: 1266 */
  if (m == 0) return 1; /* line 34 slow_hit_count: 2514, fast_hit_count: 1266 */
  return C(n % p, m % p) * Lucas(n / p, m / p) % p; /* line 35 slow_hit_count: 1252, fast_hit_count: 628 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long fun(long long x) { /* line 37 slow_hit_count: 10, fast_hit_count: 10 */
  long long ans = 0; /* line 38 slow_hit_count: 10, fast_hit_count: 10 */
  for (int i = 0; i < x - 1; i++) { /* line 39 slow_hit_count: 641, fast_hit_count: 329 */
    long long t = Lucas(x - 2, i); /* line 40 slow_hit_count: 631, fast_hit_count: 319 */
    long long y = Lucas(cnt + 1, i + 1); /* line 41 slow_hit_count: 631, fast_hit_count: 319 */
    ans = (ans % p + (t % p * y % p) % p) % p; /* line 42 slow_hit_count: 631, fast_hit_count: 319 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  if (!ans) return 1ll; /* line 44 slow_hit_count: 10, fast_hit_count: 10 */
  return ans; /* line 45 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0] = 1; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  cnt = c[0]; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < k; i++) { /* line 50 slow_hit_count: 11, fast_hit_count: 11 */
    dp[i] = dp[i - 1] * fun(c[i]) % p; /* line 51 slow_hit_count: 10, fast_hit_count: 10 */
    cnt += c[i]; /* line 52 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[k - 1] << endl; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < k; i++) { /* line 58 slow_hit_count: 12, fast_hit_count: 12 */
    cin >> c[i]; /* line 59 slow_hit_count: 11, fast_hit_count: 11 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  solve(); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Line-Level Hit Counts

1. **Function `quick_mod`:**
   - **Lines 10-21** are heavily hit, especially in the slow input. 
   - **Line 13:** Hit 4,043,578 times for slow input vs. 532,983 times for fast input.
   - **Line 15 and 16 (inside the if condition):** Hit significantly more in the slow input.
   - The `quick_mod` function involves modular exponentiation, which can be computationally expensive if called frequently.

2. **Function `C`:**
   - **Lines 23-31**: The loop on line 26 is critical, with 131,589 hits for slow input compared to 17,821 for fast input.
   - This function computes binomial coefficients, which can be expensive if `quick_mod` is called multiple times within this loop.

3. **Function `Lucas`:**
   - **Line 35** shows heavy usage, indicating recursion or iteration over a large range.
   - Calls to `C` are embedded here, linking the computational expense back to recursive binomial coefficient calculations.

4. **Function `fun`:**
   - **Line 39** shows more loop iterations for the slow input, indicating that `x` (or `c[i]`) can influence performance significantly.
   - This function combines results from `Lucas`, suggesting a compounded effect when `Lucas` is expensive.

### Major Contributors to Slowdown

- The **modular arithmetic in `quick_mod`** appears frequently, especially in the context of `C` and `Lucas`, suggesting these as hotspots.
- The **nested loops** and recursive-style calls in `Lucas` and `C` multiply the hit counts when `quick_mod` is used, indicating a compounding effect in computational effort.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Invariant on Ball Counts with High Recursion:**
   - "When the number of balls of any color is large relative to other colors, the recursion depth in computing combinations increases, leading to more expensive recursive calls."

2. **Invariant on Nested Loops and Large Color Sets:**
   - "If the number of colors `k` is high and certain loops perform operations proportional to these colors, the nested loop calculations, especially those involving modular arithmetic, can slow execution significantly."

3. **Invariant on Modulo Calculations in Recursion:**
   - "Frequent execution of modular exponentiation in deeply nested or recursive functions can lead to performance degradation, especially when iteratively calculating binomial coefficients for many combinations."

4. **Invariant on Computational Complexity of Combinations:**
   - "The computational complexity rises steeply when the calculations of combinations (`C(n, m)`) are performed repeatedly for large numbers of balls, especially when `quick_mod` is called within these loops."

### Summary

These invariants suggest that to avoid slow execution, effort should be made to minimize recursive and nested loop operations, particularly those involving large ball counts or many colors, which amplify the cost of modular arithmetic and combinatorial calculations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants from natural language into C++ code.

#### Invariant 1: Recursive Depth and Ball Count

For each color, if the number of balls is high, the recursive calculation of combinations (`Lucas` and `C`) can be expensive.

```cpp
void check_recursive_depth_invariant(int ball_count) {
    if (ball_count > 600) { // Arbitrary threshold based on performance testing
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth due to large ball count!" << endl;
        abort();
    }
}
```

#### Invariant 2: Nested Loop with Large Color Sets

If `k` is high, the nested loops in `fun` can become computationally expensive due to the repetitive calculations.

```cpp
void check_nested_loop_invariant(int color_count) {
    if (color_count > 800) { // Assume a high number of colors can trigger slowdowns due to loop nesting
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Modular Operations in Recursion

Frequent modular operations in a recursive context can be costly if compounded by many such calls.

```cpp
void check_modular_operations_invariant(int calls) {
    if (calls > 100000) { // Threshold for considering modular operations to be excessive
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular operations in recursion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Existing Program

Now, let's integrate these checkers into the existing program. We will place checks before potential bottlenecks to prevent excessive execution without causing overhead in the main computation.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxk = 1e3 + 7;
const int p = 1000000007;
int k;
int c[maxk];
long long dp[maxk];
int cnt;
long long n, m;

void check_recursive_depth_invariant(int ball_count) {
    if (ball_count > 600) { // Arbitrary threshold based on performance testing
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth due to large ball count!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int color_count) {
    if (color_count > 800) { // Assume a high number of colors can trigger slowdowns due to loop nesting
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations!" << endl;
        abort();
    }
}

void check_modular_operations_invariant(int calls) {
    if (calls > 100000) { // Threshold for considering modular operations to be excessive
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular operations in recursion!" << endl;
        abort();
    }
}

long long quick_mod(long long a, long long b) {
    long long ans = 1;
    a %= p;
    int calls = 0; // Track number of modular operations
    while (b) {
        if (b & 1) {
            ans = ans * a % p;
            b--;
        }
        b >>= 1;
        a = a * a % p;
        calls++;
    }
    check_modular_operations_invariant(calls);
    return ans;
}

long long C(long long n, long long m) {
    if (m > n) return 0;
    long long ans = 1;
    for (int i = 1; i <= m; i++) {
        long long a = (n + i - m) % p;
        long long b = i % p;
        ans = ans * (a * quick_mod(b, p - 2) % p) % p;
    }
    return ans;
}

long long Lucas(long long n, long long m) {
    if (m == 0) return 1;
    return C(n % p, m % p) * Lucas(n / p, m / p) % p;
}

long long fun(long long x) {
    long long ans = 0;
    // Check for potential performance issues with ball count
    check_recursive_depth_invariant(x);
    for (int i = 0; i < x - 1; i++) {
        long long t = Lucas(x - 2, i);
        long long y = Lucas(cnt + 1, i + 1);
        ans = (ans % p + (t % p * y % p) % p) % p;
    }
    if (!ans) return 1ll;
    return ans;
}

void solve() {
    dp[0] = 1;
    cnt = c[0];
    check_nested_loop_invariant(k); // Check color count before entering main loop
    for (int i = 1; i < k; i++) {
        dp[i] = dp[i - 1] * fun(c[i]) % p;
        cnt += c[i];
    }
    cout << dp[k - 1] << endl;
}

int main() {
    cin >> k;
    for (int i = 0; i < k; i++) {
        cin >> c[i];
    }
    solve();
}
```

### Explanation

- **Recursive Depth Check:** Ensures that if a color has too many balls, it triggers a warning before causing expensive recursive calculations.
- **Nested Loop Check:** Evaluates if `k` is too high, potentially leading to performance degradation due to nested loop computations.
- **Modular Operations Check:** Counts and checks if the number of modular operations exceeds a reasonable threshold, triggering an alert to prevent excessive calculations. 

These checks help identify and avert potential performance bottlenecks during runtime, facilitating debugging and optimization efforts.

