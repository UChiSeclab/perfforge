system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long mod_minus(long long a, long long b) {
  return (a - b + 1000000007) % 1000000007;
}
int ara[1005];
long long dp[1005], fake_place[1005][1005];
long long func(int seat, int ball) {
  if (!ball) return 1;
  if (seat == 1) return 1;
  if (fake_place[seat][ball] != -1) return fake_place[seat][ball];
  int i;
  long long ans = 0;
  for (i = 0; i <= ball; i++) {
    ans += func(seat - 1, i);
    ans %= 1000000007;
  }
  return fake_place[seat][ball] = ans;
}
int main() {
  int k, i, j;
  for (i = 0; i < 1005; i++)
    for (j = 0; j < 1005; j++) fake_place[i][j] = -1;
  scanf("%d", &k);
  for (i = 0; i < k; i++) scanf("%d", &ara[i]);
  dp[0] = 1;
  int total = ara[0];
  for (i = 1; i < k; i++) {
    dp[i] =
        dp[i - 1] * (mod_minus(func(total + 1, ara[i]), func(total, ara[i])));
    dp[i] %= 1000000007;
    total += ara[i];
  }
  printf("%I64d\n", dp[k - 1]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
35
43
38
33
27
44
40
37
41
42
33
30
49
42
62
39
40
35
43
31
19
6
64
34
33


(G.2) Fast Input

25
35
43
38
33
27
44
40
37
41
42
33
30
49
42
62
39
40
35
43
31
19
6
42
34
33


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_minus(long long a, long long b) { /* line 3 slow_hit_count: 24, fast_hit_count: 24 */
  return (a - b + 1000000007) % 1000000007; /* line 4 slow_hit_count: 24, fast_hit_count: 24 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int ara[1005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[1005], fake_place[1005][1005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long func(int seat, int ball) { /* line 8 slow_hit_count: 1792986, fast_hit_count: 1388495 */
  if (!ball) return 1; /* line 9 slow_hit_count: 1792986, fast_hit_count: 1388495 */
  if (seat == 1) return 1; /* line 10 slow_hit_count: 1737973, fast_hit_count: 1341168 */
  if (fake_place[seat][ball] != -1) return fake_place[seat][ball]; /* line 11 slow_hit_count: 1735893, fast_hit_count: 1339215 */
  int i; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 13 slow_hit_count: 55013, fast_hit_count: 47327 */
  for (i = 0; i <= ball; i++) { /* line 14 slow_hit_count: 1847951, fast_hit_count: 1435774 */
    ans += func(seat - 1, i); /* line 15 slow_hit_count: 1792938, fast_hit_count: 1388447 */
    ans %= 1000000007; /* line 16 slow_hit_count: 1792938, fast_hit_count: 1388447 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return fake_place[seat][ball] = ans; /* line 18 slow_hit_count: 55013, fast_hit_count: 47327 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int k, i, j; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < 1005; i++) /* line 22 slow_hit_count: 1006, fast_hit_count: 1006 */
    for (j = 0; j < 1005; j++) fake_place[i][j] = -1; /* line 23 slow_hit_count: 1011030, fast_hit_count: 1011030 */
  scanf("%d", &k); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < k; i++) scanf("%d", &ara[i]); /* line 25 slow_hit_count: 26, fast_hit_count: 26 */
  dp[0] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  int total = ara[0]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < k; i++) { /* line 28 slow_hit_count: 25, fast_hit_count: 25 */
    dp[i] = /* line 29 slow_hit_count: 24, fast_hit_count: 24 */
        dp[i - 1] * (mod_minus(func(total + 1, ara[i]), func(total, ara[i]))); /* line 30 slow_hit_count: 24, fast_hit_count: 24 */
    dp[i] %= 1000000007; /* line 31 slow_hit_count: 24, fast_hit_count: 24 */
    total += ara[i]; /* line 32 slow_hit_count: 24, fast_hit_count: 24 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", dp[k - 1]); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, we can analyze the code for bottlenecks:

1. **Function `func` and Recursion:** 
   - The function `func` is called with significantly high frequency in both the slow and fast runs, but notably more in the slow run (`slow_hit_count: 1792986` vs. `fast_hit_count: 1388495`).
   - Within `func`, the line with the recursive call (`ans += func(seat - 1, i);`) is similarly hit more in the slow run (`slow_hit_count: 1792938` vs. `fast_hit_count: 1388447`).

2. **Loop in `func`:** 
   - The loop (`for (i = 0; i <= ball; i++)`) is executed a substantial amount of times with a higher count on the slow input (`slow_hit_count: 1847951` vs. `fast_hit_count: 1435774`).

3. **Memoization Check:** 
   - The memoization condition (`if (fake_place[seat][ball] != -1)`) is being evaluated frequently, suggesting the memoization might not be as effective for the slow input as for the fast input.

### Phase 2: Derive Performance-Characterizing Invariants

We derive conditions under which the program likely enters a slow path, considering input constraints and avoiding direct references to specific values:

1. **High Number of Recursive Calls:**
   - **Invariant:** "When the number of balls (particularly large totals across colors) leads to deep recursion with insufficient memoization, the computation slows down significantly."
   - **Explanation:** Given that the total number of balls and the arrangement of colors affect the recursion depth, an insufficient memoization hit rate can lead to a large number of recalculations.

2. **Large Loop Iterations in Recursive Function:**
   - **Invariant:** "If the count of the current color's balls (`ball`) is large, leading to many loop iterations and recursive calls in `func`, performance may degrade significantly."
   - **Explanation:** The recursive function calls `func(seat - 1, i)` for each `i` from 0 to `ball`, causing a large number of calls when `ball` is large.

3. **Inefficient Memoization Usage:**
   - **Invariant:** "If the memoization table frequently fails to retrieve precomputed values, indicating unique states in recursive calls, the program becomes slower."
   - **Explanation:** Effective memoization reduces computation, but if the same states are not often reached (perhaps due to variability in ball counts), this benefit is reduced.

4. **Intersection of Color Combinations:**
   - **Invariant:** "When particular combinations of ball counts across colors lead to a high number of permutations that must be individually verified, slowdowns can occur."
   - **Explanation:** The permutations are computed by applying constraints to drawing sequences, and an increase in their number affects the function's recursion depth.

These invariants focus on the interplay between the recursion depth, loop iterations, and memoization effectiveness, leading to performance issues in the given C program. The hit count data indicates these areas as key contributors to the slowdown observed with the "slow" input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the runtime checker implementations for the performance-characterizing invariants derived earlier:

1. **High Number of Recursive Calls:**

```cpp
void check_recursion_depth(int total_calls, int threshold) {
    if (total_calls > threshold) {
        cerr << "Warning: Recursion depth or number of calls too high!" << endl;
        abort();
    }
}
```

2. **Large Loop Iterations in Recursive Function:**

```cpp
void check_large_loop_iterations(int ball_count, int threshold) {
    if (ball_count > threshold) {
        cerr << "Warning: Large number of loop iterations in recursion!" << endl;
        abort();
    }
}
```

3. **Inefficient Memoization Usage:**

```cpp
void check_memoization_efficiency(long long failed_memoization, long long total_calls, double inefficiency_ratio) {
    if ((double)failed_memoization / total_calls > inefficiency_ratio) {
        cerr << "Warning: Memoization inefficiency detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Program

Now, let's integrate these checker functions into the original C++ program. The checkers will be placed at strategic points to monitor potential slowdowns without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for recursion depth
void check_recursion_depth(int total_calls, int threshold) {
    if (total_calls > threshold) {
        cerr << "Warning: Recursion depth or number of calls too high!" << endl;
        abort();
    }
}

// Checker function for large loop iterations
void check_large_loop_iterations(int ball_count, int threshold) {
    if (ball_count > threshold) {
        cerr << "Warning: Large number of loop iterations in recursion!" << endl;
        abort();
    }
}

// Checker function for inefficient memoization
void check_memoization_efficiency(long long failed_memoization, long long total_calls, double inefficiency_ratio) {
    if ((double)failed_memoization / total_calls > inefficiency_ratio) {
        cerr << "Warning: Memoization inefficiency detected!" << endl;
        abort();
    }
}

long long mod_minus(long long a, long long b) {
    return (a - b + 1000000007) % 1000000007;
}

int ara[1005];
long long dp[1005], fake_place[1005][1005];
long long func(int seat, int ball, int &call_count) {
    call_count++; // Count each recursive call
    if (!ball) return 1;
    if (seat == 1) return 1;
    if (fake_place[seat][ball] != -1) return fake_place[seat][ball];
    int i;
    long long ans = 0;

    // Check large loop iterations
    check_large_loop_iterations(ball, 500); // Example threshold

    for (i = 0; i <= ball; i++) {
        ans += func(seat - 1, i, call_count);
        ans %= 1000000007;
    }
    return fake_place[seat][ball] = ans;
}

int main() {
    int k, i, j;
    for (i = 0; i < 1005; i++)
        for (j = 0; j < 1005; j++) fake_place[i][j] = -1;

    scanf("%d", &k);
    for (i = 0; i < k; i++) scanf("%d", &ara[i]);

    dp[0] = 1;
    int total = ara[0];
    int call_count = 0; // Initialize call counter

    for (i = 1; i < k; i++) {
        call_count = 0; // Reset call count for each i

        dp[i] =
            dp[i - 1] * (mod_minus(func(total + 1, ara[i], call_count), func(total, ara[i], call_count)));
        dp[i] %= 1000000007;
        total += ara[i];

        // Check recursion depth and memoization efficiency after processing each color
        check_recursion_depth(call_count, 100000); // Example threshold
        check_memoization_efficiency(call_count - fake_place[total + 1][ara[i]], call_count, 0.1); // Example inefficiency ratio
    }

    printf("%I64d\n", dp[k - 1]);
    return 0;
}
```

### Explanation
- **Function `func`**: Now accepts an additional reference parameter `call_count` to track the number of recursive calls made. This helps in checking the recursion depth.
  
- **Checker Functions**: 
  - `check_recursion_depth` ensures that the recursion doesn't exceed a specific threshold.
  - `check_large_loop_iterations` guards against excessively large iterations within recursive calls.
  - `check_memoization_efficiency` monitors the ratio of failed memoization attempts to total calls, indicating potential inefficiency.

These checks aim to detect and abort under conditions likely to cause performance bottlenecks, based on the behavior observed with the provided slow input.

