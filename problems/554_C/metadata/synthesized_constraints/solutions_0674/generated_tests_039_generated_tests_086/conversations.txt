system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long dp[2005][2005];
long long comb(long long n, long long k) {
  if ((k == 0) || k == n) return 1;
  if (dp[n][k] != 0) return dp[n][k];
  long long x = comb(n - 1, k - 1) % 1000000007 + comb(n - 1, k) % 1000000007;
  dp[n][k] = x % 1000000007;
  x %= 1000000007;
  return x;
}
void solve() {
  long long n;
  cin >> n;
  long long a[n];
  for (long long i = 0; i < n; i++) cin >> a[i];
  long long ans = 1;
  long long cnt = a[0];
  for (long long i = 1; i < n; i++) {
    ans *= comb(cnt + 1 + a[i] - 2, a[i] - 1);
    cnt += a[i];
    ans %= 1000000007;
  }
  cout << ans << "\n";
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
}
long long modPow(long long a, long long b) {
  if (b == 0) return 1;
  if (b % 2 == 0) {
    long long x = a * a;
    x %= 1000000007;
    return modPow(x, b / 2);
  }
  return (a * modPow(a, b - 1)) % 1000000007;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11
291
394
52
42
19
26
3
3
31
68
3


(G.2) Fast Input

11
291
82
52
42
19
26
3
3
31
68
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2005][2005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(long long n, long long k) { /* line 4 slow_hit_count: 305388, fast_hit_count: 81996 */
  if ((k == 0) || k == n) return 1; /* line 5 slow_hit_count: 305388, fast_hit_count: 81996 */
  if (dp[n][k] != 0) return dp[n][k]; /* line 6 slow_hit_count: 304066, fast_hit_count: 81298 */
  long long x = comb(n - 1, k - 1) % 1000000007 + comb(n - 1, k) % 1000000007; /* line 7 slow_hit_count: 152689, fast_hit_count: 40993 */
  dp[n][k] = x % 1000000007; /* line 8 slow_hit_count: 152689, fast_hit_count: 40993 */
  x %= 1000000007; /* line 9 slow_hit_count: 152689, fast_hit_count: 40993 */
  return x; /* line 10 slow_hit_count: 152689, fast_hit_count: 40993 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  long long a[n]; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) cin >> a[i]; /* line 16 slow_hit_count: 12, fast_hit_count: 12 */
  long long ans = 1; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  long long cnt = a[0]; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < n; i++) { /* line 19 slow_hit_count: 11, fast_hit_count: 11 */
    ans *= comb(cnt + 1 + a[i] - 2, a[i] - 1); /* line 20 slow_hit_count: 10, fast_hit_count: 10 */
    cnt += a[i]; /* line 21 slow_hit_count: 10, fast_hit_count: 10 */
    ans %= 1000000007; /* line 22 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
long long modPow(long long a, long long b) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return 1; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (b % 2 == 0) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = a * a; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    x %= 1000000007; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    return modPow(x, b / 2); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return (a * modPow(a, b - 1)) % 1000000007; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we need to examine the line-level hit counts and the code logic. Let's walk through the steps outlined in the task:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The function `comb(long long n, long long k)` has significantly higher hit counts for the slow input compared to the fast input. Particularly, line 4 (function call), line 5 (base case checks), and line 6 (memoization check) indicate that `comb` is being called recursively many more times for the slow input.
   - The recursive call on line 7 further confirms the expensive nature of this function due to its recursive invocation.

2. **Interaction with Data Structures and Control Flow:**
   - The recursive function `comb` calculates combinations using Pascal's triangle and utilizes memoization.
   - The line `ans *= comb(cnt + 1 + a[i] - 2, a[i] - 1);` (line 20) in the `solve` function suggests the `comb` function is invoked for each color. The problem seems to arise from how `cnt` and `a[i]` values drive the `comb` calculations.

3. **Input Constraints and Effects:**
   - The constraints on input size (e.g., the total number of balls not exceeding 1000) and recursive calls suggest that large values for `n` and `k` in `comb` can lead to deep recursion and increased computation due to the exponential growth of combination calculations.

### Phase 2: Derive Performance-Characterizing Invariants

Below are natural language statements describing conditions that may lead to performance slowdowns:

1. **Invariant 1: Large Total Ball Count with Lower Memoization Benefit**
   - **Description:** When the total number of balls is high and the distribution of balls among colors leads to deep recursive calls with insufficient memoization repetition, the program slows down. This is especially true when calculating combinations for large `n` and `k`, where `n` is the cumulative count so far and `k` pertains to the balls of the next color.
   - **Threshold:** High cumulative ball count (`cnt`) that maximizes `n` in combination calculations beyond viable memoization.
  
2. **Invariant 2: Uneven Distribution of Balls**
   - **Description:** If the number of balls per color is unevenly distributed, such that early colors have significantly more balls than later ones, this can lead to larger `n` in combination calculations, increasing recursion depth and computation.
   - **Threshold:** A large disparity between `a[i]` values where early indices have high values compared to later ones, maximizing recursive computation.
  
3. **Invariant 3: High Recursion Depth Driven by Color Sequence**
   - **Description:** A performance bottleneck occurs when the sequence of colors requires calculating combinations with frequent high values for `n` and relatively small `k`, leading to deep recursive paths with limited caching opportunities.
   - **Threshold:** Sequences that frequently result in combinations where `n` is large and `k` is small, especially when iterating through different color sequences.

These performance-characterizing invariants focus on understanding how the recursive combination calculation (`comb`) interacts with input patterns and how these interactions may lead to slow execution under certain input conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, we'll create checker functions to identify potential performance bottlenecks during runtime.

#### Invariant 1: Large Total Ball Count with Lower Memoization Benefit

```cpp
void check_large_ball_count(long long totalBalls, long long currentCombination) {
    if (totalBalls > 800 && currentCombination > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - large total ball count with low memoization benefit!" << endl;
        abort();
    }
}
```

#### Invariant 2: Uneven Distribution of Balls

```cpp
void check_uneven_distribution(long long *a, long long n) {
    long long maxBalls = 0, minBalls = LONG_MAX;
    for (long long i = 0; i < n; ++i) {
        maxBalls = max(maxBalls, a[i]);
        minBalls = min(minBalls, a[i]);
    }
    if (maxBalls > 500 && (maxBalls > 2 * minBalls)) {
        cerr << "Warning: Performance bottleneck condition triggered - uneven distribution of balls!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Recursion Depth Driven by Color Sequence

```cpp
void check_high_recursion_depth(long long n, long long k) {
    if (n > 800 && k < 100) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth due to color sequence!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, we'll integrate these checker functions into the provided C++ program at strategic points to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long dp[2005][2005];

long long comb(long long n, long long k) {
    if ((k == 0) || k == n) return 1;
    if (dp[n][k] != 0) return dp[n][k];
    long long x = comb(n - 1, k - 1) % 1000000007 + comb(n - 1, k) % 1000000007;
    dp[n][k] = x % 1000000007;
    x %= 1000000007;
    return x;
}

// Checker functions
void check_large_ball_count(long long totalBalls, long long currentCombination) {
    if (totalBalls > 800 && currentCombination > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - large total ball count with low memoization benefit!" << endl;
        abort();
    }
}

void check_uneven_distribution(long long *a, long long n) {
    long long maxBalls = 0, minBalls = LONG_MAX;
    for (long long i = 0; i < n; ++i) {
        maxBalls = max(maxBalls, a[i]);
        minBalls = min(minBalls, a[i]);
    }
    if (maxBalls > 500 && (maxBalls > 2 * minBalls)) {
        cerr << "Warning: Performance bottleneck condition triggered - uneven distribution of balls!" << endl;
        abort();
    }
}

void check_high_recursion_depth(long long n, long long k) {
    if (n > 800 && k < 100) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth due to color sequence!" << endl;
        abort();
    }
}

void solve() {
    long long n;
    cin >> n;
    long long a[n];
    for (long long i = 0; i < n; i++) cin >> a[i];

    // Insert checker for uneven distribution after reading input
    check_uneven_distribution(a, n);

    long long ans = 1;
    long long cnt = a[0];
    for (long long i = 1; i < n; i++) {
        ans *= comb(cnt + 1 + a[i] - 2, a[i] - 1);
        
        // Insert checker for large ball count within loop
        check_large_ball_count(cnt + a[i], a[i] - 1);
        
        cnt += a[i];
        ans %= 1000000007;
    }

    // Check high recursion depth before output
    check_high_recursion_depth(cnt, n);
    
    cout << ans << "\n";
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
}
```

This final code integrates the performance checks at appropriate locations to ensure they execute without significantly affecting the program's performance while still capturing potential bottlenecks.

