system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, len;
long long MOD = 1000000007ll;
long long a[1111], d[1111], cache[1111][1111];
long long C(long long x, long long y) {
  if (x == y) return 1;
  if (y == 1) return x;
  if (y <= 0) return 1;
  long long &ret = cache[x][y];
  if (~ret) return ret;
  return ret = (C(x - 1, y) + C(x - 1, y - 1)) % MOD;
}
int main() {
  memset(cache, -1, sizeof(cache));
  ios::sync_with_stdio(0);
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  d[1] = 1;
  len = a[1];
  for (int i = 2; i <= n; i++) {
    d[i] = (d[i - 1] * C(len + a[i] - 1ll, a[i] - 1ll)) % MOD;
    len += a[i];
  }
  cout << d[n];
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11
291
394
52
42
19
26
3
3
31
68
3


(G.2) Fast Input

11
291
82
52
42
19
26
3
3
31
68
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, len; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long MOD = 1000000007ll; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long a[1111], d[1111], cache[1111][1111]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long C(long long x, long long y) { /* line 6 slow_hit_count: 303530, fast_hit_count: 80762 */
  if (x == y) return 1; /* line 7 slow_hit_count: 303530, fast_hit_count: 80762 */
  if (y == 1) return x; /* line 8 slow_hit_count: 303138, fast_hit_count: 80682 */
  if (y <= 0) return 1; /* line 9 slow_hit_count: 302209, fast_hit_count: 80065 */
  long long &ret = cache[x][y]; /* line 10 slow_hit_count: 302209, fast_hit_count: 80065 */
  if (~ret) return ret; /* line 11 slow_hit_count: 302209, fast_hit_count: 80065 */
  return ret = (C(x - 1, y) + C(x - 1, y - 1)) % MOD; /* line 12 slow_hit_count: 151760, fast_hit_count: 40376 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  memset(cache, -1, sizeof(cache)); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 12, fast_hit_count: 12 */
    cin >> a[i]; /* line 19 slow_hit_count: 11, fast_hit_count: 11 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  d[1] = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  len = a[1]; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= n; i++) { /* line 23 slow_hit_count: 11, fast_hit_count: 11 */
    d[i] = (d[i - 1] * C(len + a[i] - 1ll, a[i] - 1ll)) % MOD; /* line 24 slow_hit_count: 10, fast_hit_count: 10 */
    len += a[i]; /* line 25 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cout << d[n]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose performance bottlenecks in the given C program, we need to analyze the line-level hit counts comparing the fast and slow inputs, and then identify the expensive or inefficient code segments. Here’s a breakdown of the analysis and derivation of performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Analysis:**
   - The `C` function (lines 6-12) is called significantly more times for the slow input compared to the fast input, especially on line 12 where recursion happens: 
     - Slow: 151,760 times
     - Fast: 40,376 times

2. **Key Observations:**
   - The `C` function calculates combinations, and it uses a recursive approach with memoization (`cache` array). 
   - Line 12 is where recursion happens, indicating that for the slow input, the recursive depth or the number of recursive calls is much higher.
   - The memoization (`cache`) is not effectively utilized for the slow input since the cache hits (lines 10-11) are high, suggesting cache misses lead to more recursive calls.
   - The call to `C(len + a[i] - 1, a[i] - 1)` in line 24 suggests that larger values of `len + a[i]` and `a[i]` significantly increase the number of recursive calls in `C`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and the problem constraints (\(n \leq 1000\), \(c_i \leq 1000\), and total balls \(\leq 1000\)), here are the performance-characterizing invariants formulated in natural language:

1. **Combinatorial Explosion:**
   - **Invariant:** "The program exhibits slow performance when `len + a[i] - 1` becomes large, leading to a large number of recursive calls to compute combinations. This is exacerbated when the cache misses are high due to unique combination parameters."
   - **Explanation:** The combination calculation becomes expensive when the parameters of the combination function increase, causing the recursion to deepen significantly.

2. **Inefficient Memoization:**
   - **Invariant:** "If the parameters passed to the combination function are such that cache misses are frequent (i.e., unique combination parameters are continually generated), performance degradation occurs due to excessive recursive computations."
   - **Explanation:** The inefficiency arises from the inability of the memoization strategy to leverage previously cached results, resulting in numerous redundant calculations.

3. **Highly Imbalanced Color Distribution:**
   - **Invariant:** "When there is a highly imbalanced distribution of balls among colors (e.g., one color has significantly more balls than others), the sequence generation becomes compute-intensive due to increased combinations to be calculated for specific partitions."
   - **Explanation:** This imbalance creates situations where specific color combinations are more complex to resolve, especially when such imbalances occur in the middle of the sequence of colors.

### Conclusion

The above performance-characterizing invariants help highlight the conditions under which the algorithm is likely to slow down. These insights allow for future modifications or optimizations to target the recursive calls and improve memoization effectiveness. Additionally, these invariants can guide fuzzers to detect other potential slow scenarios without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that implement the runtime checks for the performance-characterizing invariants identified in Phase 2. Each invariant is represented by a checker function or condition.

```cpp
void check_combinatorial_explosion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - combinatorial explosion!" << endl;
        abort();
    }
}

void check_inefficient_memoization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization!" << endl;
        abort();
    }
}

void check_imbalanced_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - imbalanced color distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Runtime Checks into the Original Program

Next, we integrate these checks into the original C++ program. The checks are placed strategically to avoid excessive overhead in tight loops and to effectively capture the performance bottleneck conditions.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, len;
long long MOD = 1000000007ll;
long long a[1111], d[1111], cache[1111][1111];

long long C(long long x, long long y) {
    if (x == y) return 1;
    if (y == 1) return x;
    if (y <= 0) return 1;
    long long &ret = cache[x][y];
    if (~ret) return ret;
    return ret = (C(x - 1, y) + C(x - 1, y - 1)) % MOD;
}

void check_combinatorial_explosion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - combinatorial explosion!" << endl;
        abort();
    }
}

void check_inefficient_memoization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization!" << endl;
        abort();
    }
}

void check_imbalanced_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - imbalanced color distribution!" << endl;
        abort();
    }
}

int main() {
    memset(cache, -1, sizeof(cache));
    ios::sync_with_stdio(0);
    cin >> n;
    
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    
    // Check for imbalanced color distribution
    for (int i = 1; i <= n; i++) {
        check_imbalanced_distribution(a[i] > 900); // Example threshold that might indicate imbalance
    }
    
    d[1] = 1;
    len = a[1];
    
    for (int i = 2; i <= n; i++) {
        // Check for combinatorial explosion before calculating
        check_combinatorial_explosion(len + a[i] - 1 > 950); // Example threshold for len + a[i]
        
        d[i] = (d[i - 1] * C(len + a[i] - 1ll, a[i] - 1ll)) % MOD;
        
        // Check for inefficient memoization
        check_inefficient_memoization(cache[len + a[i] - 1][a[i] - 1] == -1); // Example condition for cache miss
        
        len += a[i];
    }
    
    cout << d[n];
}
```

### Explanation of Inserted Checks

1. **Combinatorial Explosion Check:**
   - This check is placed before the combination calculation in the loop to ensure that the parameters are within a reasonable range. It checks if `len + a[i] - 1` exceeds a threshold that would indicate potential combinatorial explosion.

2. **Inefficient Memoization Check:**
   - This check is used to detect if the memoization cache is frequently missing, leading to expensive recomputation. It checks the cache status for specific parameters used in the combination function.

3. **Imbalanced Distribution Check:**
   - This check is added after reading the input to determine if any color has a significantly higher number of balls, which could lead to imbalanced distribution and performance issues.

These checks help in detecting specific conditions under which the program's performance might degrade, enabling easier debugging and potential optimization.

