system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long nck[1005][1005];
long long m(long long a) {
  return ((a % 1000000007) + 1000000007) % 1000000007;
}
long long ncr(long long n, long long r) {
  if (r > n) return 0ll;
  if (n == r || r == 0) return 1ll;
  if (nck[n][r] != 0) return nck[n][r];
  return nck[n][r] = m(ncr(n - 1, r) + ncr(n - 1, r - 1));
}
int main() {
  int k;
  scanf("%d", &k);
  vector<int> a(k);
  for (int &i : a) scanf("%d", &i);
  vector<long long> dp(1005);
  dp[1] = 1;
  long long sm = a[0];
  for (int i = 2; i <= k; i++) {
    sm += a[i - 1];
    dp[i] = m(dp[i - 1] * ncr(sm - 1, a[i - 1] - 1));
  }
  printf("%lld\n", dp[k]);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11
291
394
52
42
19
26
3
3
31
68
3


(G.2) Fast Input

11
291
82
52
42
19
26
3
3
31
68
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long nck[1005][1005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long m(long long a) { /* line 4 slow_hit_count: 152699, fast_hit_count: 41003 */
  return ((a % 1000000007) + 1000000007) % 1000000007; /* line 5 slow_hit_count: 152699, fast_hit_count: 41003 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long ncr(long long n, long long r) { /* line 7 slow_hit_count: 305388, fast_hit_count: 81996 */
  if (r > n) return 0ll; /* line 8 slow_hit_count: 305388, fast_hit_count: 81996 */
  if (n == r || r == 0) return 1ll; /* line 9 slow_hit_count: 305388, fast_hit_count: 81996 */
  if (nck[n][r] != 0) return nck[n][r]; /* line 10 slow_hit_count: 304066, fast_hit_count: 81298 */
  return nck[n][r] = m(ncr(n - 1, r) + ncr(n - 1, r - 1)); /* line 11 slow_hit_count: 152689, fast_hit_count: 40993 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int k; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &k); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(k); /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
  for (int &i : a) scanf("%d", &i); /* line 17 slow_hit_count: 12, fast_hit_count: 12 */
  vector<long long> dp(1005); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  dp[1] = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  long long sm = a[0]; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= k; i++) { /* line 21 slow_hit_count: 11, fast_hit_count: 11 */
    sm += a[i - 1]; /* line 22 slow_hit_count: 10, fast_hit_count: 10 */
    dp[i] = m(dp[i - 1] * ncr(sm - 1, a[i - 1] - 1)); /* line 23 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", dp[k]); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the performance bottlenecks in the given C program, let's analyze the hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis:
1. **Line with the Highest Discrepancy in Hit Counts:**  
   - Function `ncr(long long n, long long r)` has significantly higher hit counts for the slow input compared to the fast input. Specifically, lines 7, 8, 9, 10, and 11 have much higher hit counts, indicating that recursive calls are a major contributor to the slowdown.

2. **Recursive Function Calls:**  
   - The recursive nature of the `ncr` function (particularly line 11) with large hit counts suggests that it's being executed excessively for the slow input.

3. **Interaction with Data Structures:**  
   - The combination function (`ncr`) is used to calculate binomial coefficients, which rely on previous computations. The memoization array `nck` does not seem to be effectively reducing redundant calculations, as indicated by high hits on lines 10 and 11.

### Phase 2: Derive Performance-Characterizing Invariants

#### Invariants:

1. **Recursive Depth Invariant:**
   - "If the recursive depth in the combination function becomes large, the computation may slow down significantly, particularly when many elements require combination calculations."

   - **Explanation:** The `ncr` function is called recursively, and if the parameters lead to deep recursion due to high values of `n` and `r`, it will exacerbate the slowdown.

2. **Ineffective Memoization Invariant:**
   - "If memoization is ineffective due to varying parameters, leading to repeated recomputation of combination values, performance may degrade."

   - **Explanation:** The hit counts suggest that many values are recomputed, possibly because memoization hits (line 10) are not effectively preventing redundant calculations.

3. **Combination Computations Invariant:**
   - "When the sum of balls drawn so far (`sm`) and the number of balls of the current color are large relative to previous steps, the number of combinations to compute increases, slowing down the program as recursion expands."

   - **Explanation:** The increase in `sm` along with `a[i-1]` leads to larger parameters for `ncr`, which increases the computational workload exponentially.

### Suggested Thresholds:
- The recursive depth should be minimized when the sum of balls (`sm`) is large, or the range of values `n` and `r` in `ncr` recursion is broad. Given constraints (total balls ≤ 1000), ensuring recursive parameters do not widely exceed typical midpoint values can help maintain efficiency.

By identifying these conditions, we can suggest optimizations, such as enhancing memoization or adopting iterative approaches where possible, to prevent entering these slow paths during execution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. 

Input

The first line of input will have one integer k (1 ≤ k ≤ 1000) the number of colors.

Then, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 ≤ ci ≤ 1000).

The total number of balls doesn't exceed 1000.

Output

A single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. 

Examples

Input

3
2
2
1


Output

3


Input

4
1
2
3
4


Output

1680

Note

In the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: 
    
    
      
    1 2 1 2 3  
    1 1 2 2 3  
    2 1 1 2 3  
    

Solution (C++ code):
{solution}


assistant: To address Phase 3, we need to translate the identified performance-characterizing invariants into C++ code for runtime checks. Let's implement these checks:

### Phase 3: Implementing Invariants as Runtime Checks

Here are C++ snippets implementing each invariant as a runtime check:

1. **Recursive Depth Invariant:**
   ```cpp
   void check_recursive_depth(int n, int r) {
       if (n > 50 && r > 25) { // Adjust these thresholds based on reasonable depth constraints
           cerr << "Warning: Performance bottleneck condition triggered - large recursive depth!" << endl;
           abort();
       }
   }
   ```

2. **Ineffective Memoization Invariant:**
   ```cpp
   void check_memoization_effectiveness(int n, int r, long long nckValue) {
       if (nckValue == 0 && n > 50) { // If memoization is not effective at larger n values
           cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
           abort();
       }
   }
   ```

3. **Combination Computations Invariant:**
   ```cpp
   void check_combination_computations(int sm, int currentColorBalls) {
       if (sm > 500 && currentColorBalls > 50) { // If parameters are excessively large
           cerr << "Warning: Performance bottleneck condition triggered - heavy combination computations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long nck[1005][1005];

long long m(long long a) {
  return ((a % 1000000007) + 1000000007) % 1000000007;
}

// Recursive Depth Checker
void check_recursive_depth(int n, int r) {
    if (n > 50 && r > 25) {
        cerr << "Warning: Performance bottleneck condition triggered - large recursive depth!" << endl;
        abort();
    }
}

// Memoization Effectiveness Checker
void check_memoization_effectiveness(int n, int r, long long nckValue) {
    if (nckValue == 0 && n > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
        abort();
    }
}

long long ncr(long long n, long long r) {
    check_recursive_depth(n, r); // Check before recursion depth increases
    if (r > n) return 0ll;
    if (n == r || r == 0) return 1ll;
    if (nck[n][r] != 0) return nck[n][r];
    long long result = m(ncr(n - 1, r) + ncr(n - 1, r - 1));
    nck[n][r] = result;
    check_memoization_effectiveness(n, r, nck[n][r]); // Check memoization effectiveness
    return nck[n][r];
}

// Combination Computations Checker
void check_combination_computations(int sm, int currentColorBalls) {
    if (sm > 500 && currentColorBalls > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy combination computations!" << endl;
        abort();
    }
}

int main() {
  int k;
  scanf("%d", &k);
  vector<int> a(k);
  for (int &i : a) scanf("%d", &i);
  vector<long long> dp(1005);
  dp[1] = 1;
  long long sm = a[0];
  for (int i = 2; i <= k; i++) {
    sm += a[i - 1];
    check_combination_computations(sm, a[i - 1]); // Check before performing heavy computations
    dp[i] = m(dp[i - 1] * ncr(sm - 1, a[i - 1] - 1));
  }
  printf("%lld\n", dp[k]);
}
```

### Explanation:

- **Recursive Depth Checker:** Inserted in the `ncr` function to monitor recursion depth based on `n` and `r`.
- **Memoization Effectiveness Checker:** Placed after memoization checks in `ncr` to ensure that memoization is effectively reducing computation.
- **Combination Computations Checker:** Added before the calculation in the main loop to detect when large computation could slow the program.

These integrations serve as diagnostic checks to detect potential performance bottlenecks during execution.

