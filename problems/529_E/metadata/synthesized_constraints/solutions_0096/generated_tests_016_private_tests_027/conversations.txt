system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
ifstream fin("in.in");
ofstream fout("out.out");
const int N = 5000 + 10, A = 1e5 + 10;
int n, k, q, a[N];
int solve(int x) {
  int res = k + 1;
  vector<int> v;
  int mn[A], cnt[A];
  fill(mn, mn + A, k);
  memset(cnt, 0, sizeof cnt);
  for (int i = 0; i < n; i++)
    for (int j = 1; j <= k; j++) {
      if (a[i] * j == x) res = min(res, j);
      v.push_back(a[i] * j);
    }
  sort(v.begin(), v.end());
  v.resize(unique(v.begin(), v.end()) - v.begin());
  for (int i = 0; i < n; i++)
    for (int j = 1; j <= k; j++) {
      int ind = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin());
      if (mn[ind] > j) {
        mn[ind] = j;
        cnt[ind]++;
      } else if (mn[ind] == j)
        cnt[ind]++;
    }
  for (int i = 0; i < n; i++)
    for (int j = 1; j <= k; j++) {
      int ind1 = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin());
      int rem = x - a[i] * j;
      int ind2 = (lower_bound(v.begin(), v.end(), rem) - v.begin());
      if (ind2 == v.size() || v[ind2] != rem) continue;
      if (mn[ind2] <= k - j) {
        if (ind1 != ind2 || cnt[ind2] > 1) res = min(res, mn[ind2] + j);
      }
    }
  return (res == k + 1 ? -1 : res);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> k;
  for (int i = 0; i < n; i++) cin >> a[i];
  cin >> q;
  for (; q; q--) {
    int x;
    cin >> x;
    cout << solve(x) << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 2
31 42
17
1
22
23
24
41
42
43
45
46
47
66
67
68
83
84
85
987


(G.2) Fast Input

2 1
23 42
11
1
22
23
24
41
42
43
66
67
68
987


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
ifstream fin("in.in"); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
ofstream fout("out.out"); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5000 + 10, A = 1e5 + 10; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, q, a[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int x) { /* line 7 slow_hit_count: 17, fast_hit_count: 11 */
  int res = k + 1; /* line 8 slow_hit_count: 17, fast_hit_count: 11 */
  vector<int> v; /* line 9 slow_hit_count: 17, fast_hit_count: 11 */
  int mn[A], cnt[A]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  fill(mn, mn + A, k); /* line 11 slow_hit_count: 17, fast_hit_count: 11 */
  memset(cnt, 0, sizeof cnt); /* line 12 slow_hit_count: 17, fast_hit_count: 11 */
  for (int i = 0; i < n; i++) /* line 13 slow_hit_count: 51, fast_hit_count: 33 */
    for (int j = 1; j <= k; j++) { /* line 14 slow_hit_count: 102, fast_hit_count: 44 */
      if (a[i] * j == x) res = min(res, j); /* line 15 slow_hit_count: 68, fast_hit_count: 22 */
      v.push_back(a[i] * j); /* line 16 slow_hit_count: 68, fast_hit_count: 22 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 18 slow_hit_count: 17, fast_hit_count: 11 */
  v.resize(unique(v.begin(), v.end()) - v.begin()); /* line 19 slow_hit_count: 17, fast_hit_count: 11 */
  for (int i = 0; i < n; i++) /* line 20 slow_hit_count: 51, fast_hit_count: 33 */
    for (int j = 1; j <= k; j++) { /* line 21 slow_hit_count: 102, fast_hit_count: 44 */
      int ind = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin()); /* line 22 slow_hit_count: 68, fast_hit_count: 22 */
      if (mn[ind] > j) { /* line 23 slow_hit_count: 68, fast_hit_count: 22 */
        mn[ind] = j; /* line 24 slow_hit_count: 34, fast_hit_count: 0 */
        cnt[ind]++; /* line 25 slow_hit_count: 34, fast_hit_count: 0 */
      } else if (mn[ind] == j) /* line 26 slow_hit_count: 34, fast_hit_count: 22 */
        cnt[ind]++; /* line 27 slow_hit_count: 34, fast_hit_count: 22 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) /* line 29 slow_hit_count: 51, fast_hit_count: 33 */
    for (int j = 1; j <= k; j++) { /* line 30 slow_hit_count: 102, fast_hit_count: 44 */
      int ind1 = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin()); /* line 31 slow_hit_count: 68, fast_hit_count: 22 */
      int rem = x - a[i] * j; /* line 32 slow_hit_count: 68, fast_hit_count: 22 */
      int ind2 = (lower_bound(v.begin(), v.end(), rem) - v.begin()); /* line 33 slow_hit_count: 68, fast_hit_count: 22 */
      if (ind2 == v.size() || v[ind2] != rem) continue; /* line 34 slow_hit_count: 68, fast_hit_count: 22 */
      if (mn[ind2] <= k - j) { /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
        if (ind1 != ind2 || cnt[ind2] > 1) res = min(res, mn[ind2] + j); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return (res == k + 1 ? -1 : res); /* line 39 slow_hit_count: 34, fast_hit_count: 22 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> a[i]; /* line 46 slow_hit_count: 3, fast_hit_count: 3 */
  cin >> q; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (; q; q--) { /* line 48 slow_hit_count: 18, fast_hit_count: 12 */
    int x; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 50 slow_hit_count: 17, fast_hit_count: 11 */
    cout << solve(x) << endl; /* line 51 slow_hit_count: 17, fast_hit_count: 11 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the task of diagnosing the performance bottlenecks in the provided C program, we need to analyze the code and identify the potential causes of slowdown for the "slow input" compared to the "fast input". Based on the hit count information, we will then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Over Bill Combinations:**
   The loops at lines 13-16, 20-27, and 29-36 have significantly higher hit counts for the slow input compared to the fast input. These loops are iterating over possible bill combinations and are critical areas where the slow performance might be arising.

2. **Vector `v` Operations:**
   The vector `v` is used to store possible bill combinations and is sorted and deduplicated at lines 18-19. The repeated operations on this vector could be inefficient, especially if the number of combinations becomes large.

3. **Checking Combinations:**
   The logic at lines 29-36 seeks pairs of combinations that satisfy the withdrawal requirement. The hit counts suggest that these lines are executed significantly more for the slow input, indicating potential inefficiencies in combination checking.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, we can derive the following performance-characterizing invariants:

1. **High Combination Count:**
   When the number of possible bill combinations grows significantly, especially due to higher values of `k` or closely valued denominations, the nested loops iterate over many possibilities, leading to longer execution times.
   
   - **Invariant Description:** "If the number of bill combinations becomes large due to a high `k` or closely valued denominations, the program may slow down as it attempts to evaluate each combination."

2. **Vector Operations Overhead:**
   The operations performed on the vector `v` (sorting and deduplication) become costly if the vector grows large, which is likely when the denominations and `k` produce many distinct values.
   
   - **Invariant Description:** "If the number of distinct bill combinations stored in the vector increases significantly, the overhead of sorting and deduplication can slow down the execution."

3. **Combination Pair Checking:**
   If the logic that checks for valid combinations (lines 29-36) has to explore many possibilities, especially when denominations are close or when `k` is large, performance degrades due to frequent and complex checks.
   
   - **Invariant Description:** "When there are numerous close-valued denominations and a large `k`, the program might spend excessive time checking combinations, leading to slower performance."

### Summary

The slow execution observed in the program for the given slow input can be attributed to the increased complexity of possible bill combinations arising from the higher value of `k` and the characteristics of the denominations. The vector operations and combination checks further contribute to the inefficiency. By understanding these performance-characterizing invariants, we can better anticipate scenarios that may lead to similar slowdowns and optimize accordingly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Let's implement checkers for each of the performance-characterizing invariants described in the previous steps.

1. **High Combination Count:**
   We can check if the potential number of combinations generated exceeds a certain threshold. A simple way to estimate this is by considering `n * k`, which represents the maximum number of multiplications done in the loops.

   ```cpp
   void check_combination_count(int n, int k) {
       if (n * k > 10000) {  // A threshold chosen to represent a high number of combinations
           cerr << "Warning: High combination count may lead to slow performance!" << endl;
           abort();
       }
   }
   ```

2. **Vector Operations Overhead:**
   We can check if the size of the vector `v` after deduplication exceeds a certain limit, indicating potential inefficiency due to sorting and deduplication.

   ```cpp
   void check_vector_operations(const vector<int>& v) {
       if (v.size() > 5000) {  // A threshold indicating large vector size
           cerr << "Warning: Large vector operations may degrade performance!" << endl;
           abort();
       }
   }
   ```

3. **Combination Pair Checking:**
   We can check the number of iterations in the nested loops that check combinations, although indirectly, by analyzing the values of `n` and `k`.

   ```cpp
   void check_combination_pair_checking(int n, int k) {
       if (n * k > 10000) {  // Similar threshold as above
           cerr << "Warning: Extensive combination pair checking may slow down execution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Let's insert these checkers at appropriate locations in the original C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 5000 + 10, A = 1e5 + 10;
int n, k, q, a[N];

// Checker functions
void check_combination_count(int n, int k) {
    if (n * k > 10000) {
        cerr << "Warning: High combination count may lead to slow performance!" << endl;
        abort();
    }
}

void check_vector_operations(const vector<int>& v) {
    if (v.size() > 5000) {
        cerr << "Warning: Large vector operations may degrade performance!" << endl;
        abort();
    }
}

void check_combination_pair_checking(int n, int k) {
    if (n * k > 10000) {
        cerr << "Warning: Extensive combination pair checking may slow down execution!" << endl;
        abort();
    }
}

int solve(int x) {
    int res = k + 1;
    vector<int> v;
    int mn[A], cnt[A];
    fill(mn, mn + A, k);
    memset(cnt, 0, sizeof cnt);
    
    // Check combination count
    check_combination_count(n, k);

    for (int i = 0; i < n; i++)
        for (int j = 1; j <= k; j++) {
            if (a[i] * j == x) res = min(res, j);
            v.push_back(a[i] * j);
        }
    
    // Check vector operations before sorting and deduplication
    check_vector_operations(v);

    sort(v.begin(), v.end());
    v.resize(unique(v.begin(), v.end()) - v.begin());
    
    for (int i = 0; i < n; i++)
        for (int j = 1; j <= k; j++) {
            int ind = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin());
            if (mn[ind] > j) {
                mn[ind] = j;
                cnt[ind]++;
            } else if (mn[ind] == j)
                cnt[ind]++;
        }
    
    // Check combination pair checking
    check_combination_pair_checking(n, k);

    for (int i = 0; i < n; i++)
        for (int j = 1; j <= k; j++) {
            int ind1 = (lower_bound(v.begin(), v.end(), a[i] * j) - v.begin());
            int rem = x - a[i] * j;
            int ind2 = (lower_bound(v.begin(), v.end(), rem) - v.begin());
            if (ind2 == v.size() || v[ind2] != rem) continue;
            if (mn[ind2] <= k - j) {
                if (ind1 != ind2 || cnt[ind2] > 1) res = min(res, mn[ind2] + j);
            }
        }
    return (res == k + 1 ? -1 : res);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> k;
    for (int i = 0; i < n; i++) cin >> a[i];
    cin >> q;
    for (; q; q--) {
        int x;
        cin >> x;
        cout << solve(x) << endl;
    }
    return 0;
}
```

### Summary

The above code introduces runtime checks that help identify performance bottlenecks by evaluating the conditions inferred from the performance-characterizing invariants. These checks are strategically placed to avoid additional overhead during execution and help in detecting potential slow paths in a fuzzing scenario.

