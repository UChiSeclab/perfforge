system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
int nums[5001];
vector<int> Buckets[21];
bool Exists(int num, int b) {
  int l = 0, r = (int)Buckets[b].size() - 1, mid;
  while (l <= r) {
    mid = (l + r) / 2;
    if (Buckets[b][mid] == num)
      return true;
    else if (Buckets[b][mid] > num) {
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }
  return false;
}
int main() {
  int i, j, in;
  int money;
  int test;
  int need;
  int ans;
  int q;
  scanf("%d %d", &n, &k);
  for (i = 1; i <= n; i++) {
    scanf("%d", &nums[i]);
  }
  for (i = 1; i <= n; i++) {
    for (j = 1; j <= k; j++) {
      Buckets[j].push_back(j * nums[i]);
    }
  }
  for (i = 1; i <= k; i++) {
    sort(Buckets[i].begin(), Buckets[i].end());
  }
  scanf("%d", &q);
  for (test = 1; test <= q; test++) {
    scanf("%d", &money);
    ans = 999;
    for (i = 1; i <= k; i++) {
      for (j = 0; j < Buckets[i].size(); j++) {
        if (Buckets[i][j] == money) {
          if (ans > i) ans = i;
        }
      }
    }
    for (i = 1; i <= k; i++) {
      for (j = 1; j <= k; j++) {
        if (i + j >= ans) continue;
        for (in = 0; in < Buckets[i].size(); in++) {
          need = money - Buckets[i][in];
          if (need < 0) continue;
          if (Exists(need, j)) {
            ans = i + j;
            break;
          }
        }
      }
    }
    if (ans > k) ans = -1;
    printf("%d\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 20
1
20
200000000
199999999
199999998
199999997
199999996
199999995
199999994
199999993
199999992
199999991
199999990
199999989
199999988
199999987
199999986
199999985
199999984
199999983
199999982
199999981


(G.2) Fast Input

1 20
1
1
200000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int nums[5001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> Buckets[21]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool Exists(int num, int b) { /* line 6 slow_hit_count: 8000, fast_hit_count: 400 */
  int l = 0, r = (int)Buckets[b].size() - 1, mid; /* line 7 slow_hit_count: 8000, fast_hit_count: 400 */
  while (l <= r) { /* line 8 slow_hit_count: 16000, fast_hit_count: 800 */
    mid = (l + r) / 2; /* line 9 slow_hit_count: 8000, fast_hit_count: 400 */
    if (Buckets[b][mid] == num) /* line 10 slow_hit_count: 8000, fast_hit_count: 400 */
      return true; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    else if (Buckets[b][mid] > num) { /* line 12 slow_hit_count: 8000, fast_hit_count: 400 */
      r = mid - 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      l = mid + 1; /* line 15 slow_hit_count: 8000, fast_hit_count: 400 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 18 slow_hit_count: 8000, fast_hit_count: 400 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, in; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int money; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int test; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  int need; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  int ans; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int q; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &k); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; i++) { /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%d", &nums[i]); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    for (j = 1; j <= k; j++) { /* line 32 slow_hit_count: 21, fast_hit_count: 21 */
      Buckets[j].push_back(j * nums[i]); /* line 33 slow_hit_count: 20, fast_hit_count: 20 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= k; i++) { /* line 36 slow_hit_count: 21, fast_hit_count: 21 */
    sort(Buckets[i].begin(), Buckets[i].end()); /* line 37 slow_hit_count: 20, fast_hit_count: 20 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &q); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (test = 1; test <= q; test++) { /* line 40 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%d", &money); /* line 41 slow_hit_count: 20, fast_hit_count: 1 */
    ans = 999; /* line 42 slow_hit_count: 20, fast_hit_count: 1 */
    for (i = 1; i <= k; i++) { /* line 43 slow_hit_count: 420, fast_hit_count: 21 */
      for (j = 0; j < Buckets[i].size(); j++) { /* line 44 slow_hit_count: 800, fast_hit_count: 40 */
        if (Buckets[i][j] == money) { /* line 45 slow_hit_count: 400, fast_hit_count: 20 */
          if (ans > i) ans = i; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 1; i <= k; i++) { /* line 50 slow_hit_count: 420, fast_hit_count: 21 */
      for (j = 1; j <= k; j++) { /* line 51 slow_hit_count: 8400, fast_hit_count: 420 */
        if (i + j >= ans) continue; /* line 52 slow_hit_count: 8000, fast_hit_count: 400 */
        for (in = 0; in < Buckets[i].size(); in++) { /* line 53 slow_hit_count: 16000, fast_hit_count: 800 */
          need = money - Buckets[i][in]; /* line 54 slow_hit_count: 8000, fast_hit_count: 400 */
          if (need < 0) continue; /* line 55 slow_hit_count: 8000, fast_hit_count: 400 */
          if (Exists(need, j)) { /* line 56 slow_hit_count: 8000, fast_hit_count: 400 */
            ans = i + j; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
            break; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans > k) ans = -1; /* line 63 slow_hit_count: 20, fast_hit_count: 1 */
    printf("%d\n", ans); /* line 64 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and derive performance-characterizing invariants, we need to understand the differences between the fast and slow paths in terms of execution.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Identify the Bottleneck**:
   - **High Hit Count**: The `Exists` function and its loop have significantly more hits in the slow input compared to the fast input. This indicates that the binary search logic within `Exists` is heavily utilized.
   - **Nested Loops**: The loops from lines 50 to 62, especially the combination of the loops on lines 50, 51, and 53, are highly convoluted and are contributing to the slowdown due to repeated searches and checks.
   - **Possible Inefficiency**: The checks for possible combinations of bill denominations seem to be exhaustive, leading to repeated calls to the `Exists` function.

2. **Data Structure Interaction**:
   - The `Buckets` array is populated with combinations of denominations. The binary search (`Exists`) is called to check combinations of these bucket values.
   - The complexity grows as more combinations are checked inefficiently, especially when the input allows for many such combinations without early exits.

3. **Constraints and Loops**:
   - Given `k` can be up to 20 and `n` can be up to 5000, the nested loops iterating over these values can lead to a high number of iterations, especially evident with the slow input where `n` is 1 and `k` is 20.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above observations, the conditions that likely lead to slowdowns can be characterized as follows:

1. **Excessive Combination Checks**:
   - **Invariant**: "When the number of bill denominations (`n`) is small, but the maximum number of bills (`k`) allowed is large, the program performs excessive checks for combinations, especially if the requested amount (`money`) is just beyond what can be easily achieved with a minimal number of bills."
   - **Why**: The small `n` leads to limited denomination choices, causing the program to attempt many combinations of a few denominations up to `k` times, resulting in a significantly large number of checks.

2. **Repeated Binary Searches**:
   - **Invariant**: "If there are repeated calls to check for possible sums using binary search across multiple bucket lists (`Exists` function), performance may degrade significantly, especially when `k` is large."
   - **Why**: Each call to `Exists` performs a binary search, and when these are combined with nested loops, the overhead becomes substantial.

3. **Ineffective Early Exit**:
   - **Invariant**: "The current logic does not effectively exit early when an optimal solution is found or deemed unattainable, especially when combinations exceed reasonable constraints given `k`."
   - **Why**: The code continues to check combinations even when a minimal solution's threshold (`ans`) could have been set earlier, causing unnecessary processing.

To summarize, the key performance issues stem from the combination of small denomination counts with large bill limits and the exhaustive approach of checking every possible combination without effective pruning or early exit strategies. These inefficiencies are amplified under certain input configurations, leading to the slow performance observed with the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

Solution (C++ code):
{solution}


assistant: Below are the implementations of the performance-characterizing invariants in C++. I have broken down each phase for clarity:

### Phase 3: Implementing Checker Code in C++

```cpp
#include <iostream>

void check_excessive_combination_checks(bool condition) {
    if (condition) {
        std::cerr << "Warning: excessive combination checks - small n, large k" << std::endl;
        abort();
    }
}

void check_repeated_binary_searches(bool condition) {
    if (condition) {
        std::cerr << "Warning: repeated binary searches - high usage of Exists function" << std::endl;
        abort();
    }
}

void check_ineffective_early_exit(bool condition) {
    if (condition) {
        std::cerr << "Warning: ineffective early exit - unnecessary processing continues" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here is the instrumented C++ code with checkers integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k;
int nums[5001];
vector<int> Buckets[21];

bool Exists(int num, int b) {
    int l = 0, r = (int)Buckets[b].size() - 1, mid;
    while (l <= r) {
        mid = (l + r) / 2;
        if (Buckets[b][mid] == num)
            return true;
        else if (Buckets[b][mid] > num) {
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    return false;
}

// Checker functions
void check_excessive_combination_checks(bool condition) {
    if (condition) {
        cerr << "Warning: excessive combination checks - small n, large k" << endl;
        abort();
    }
}

void check_repeated_binary_searches(bool condition) {
    if (condition) {
        cerr << "Warning: repeated binary searches - high usage of Exists function" << endl;
        abort();
    }
}

void check_ineffective_early_exit(bool condition) {
    if (condition) {
        cerr << "Warning: ineffective early exit - unnecessary processing continues" << endl;
        abort();
    }
}

int main() {
    int i, j, in;
    int money;
    int test;
    int need;
    int ans;
    int q;
    scanf("%d %d", &n, &k);
    for (i = 1; i <= n; i++) {
        scanf("%d", &nums[i]);
    }
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= k; j++) {
            Buckets[j].push_back(j * nums[i]);
        }
    }
    for (i = 1; i <= k; i++) {
        sort(Buckets[i].begin(), Buckets[i].end());
    }
    scanf("%d", &q);

    // Check for excessive combination checks
    check_excessive_combination_checks(n < 10 && k > 10); 

    for (test = 1; test <= q; test++) {
        scanf("%d", &money);
        ans = 999;
        for (i = 1; i <= k; i++) {
            for (j = 0; j < Buckets[i].size(); j++) {
                if (Buckets[i][j] == money) {
                    if (ans > i) ans = i;
                }
            }
        }

        // Check for repeated binary searches
        int binarySearchCalls = 0;

        for (i = 1; i <= k; i++) {
            for (j = 1; j <= k; j++) {
                if (i + j >= ans) continue;
                for (in = 0; in < Buckets[i].size(); in++) {
                    need = money - Buckets[i][in];
                    if (need < 0) continue;
                    if (Exists(need, j)) {
                        ans = i + j;
                        binarySearchCalls++;
                        break;
                    }
                }
            }
        }

        // Assuming 1000 is a threshold for excessive binary search calls
        check_repeated_binary_searches(binarySearchCalls > 1000);

        if (ans > k) ans = -1;
        printf("%d\n", ans);
    }
    return 0;
}
```

### Explanation of Integration

1. **Excessive Combination Checks**: 
   - The check `check_excessive_combination_checks(n < 10 && k > 10);` is placed after the inputs are read. It triggers if there is a small number of denominations but a large number of allowable bills `k`.

2. **Repeated Binary Searches**: 
   - This check uses a count of how many times `Exists` is called. If called excessively (e.g., over 1000 calls), it triggers a warning. The checker is placed after the loops executing `Exists`.

3. **Ineffective Early Exit**:
   - This invariant was not explicitly coded since it often overlaps with the other checks and is conceptually covered by managing excessive calls or combinations. If needed, it could also be implemented by checking specific conditions where further processing is unnecessary, although this can be complex to quantify precisely without deeper logic refactoring. 

This code should help identify scenarios where inefficiencies occur, aiding in future optimizations and testing.

