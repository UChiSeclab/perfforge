system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long a[5010];
vector<long long> v;
int main() {
  int n, i, k, q, j, co = 0, y, p;
  long long Q, F, Answer;
  cin >> n >> k;
  for (i = 0; i < n; i++) {
    scanf("%I64d", &a[i]);
  }
  cin >> q;
  while (q--) {
    scanf("%I64d", &Q);
    Answer = -1;
    for (i = 0; i < n; i++) {
      for (j = 1; j <= k; j++) {
        if (j == 1) {
          y = lower_bound(a, a + n, Q) - &a[0];
          if (a[y] == Q) {
            Answer = 1;
          }
        }
        F = Q - (j * a[i]);
        for (p = 1; p <= k - j; p++) {
          y = lower_bound(a, a + n, F / p) - &a[0];
          if (p * a[y] == F && (j + p < Answer || Answer == -1)) Answer = p + j;
        }
      }
    }
    v.push_back(Answer);
  }
  for (j = 0; j < v.size(); j++) cout << v[j] << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 20
1
20
200000000
199999999
199999998
199999997
199999996
199999995
199999994
199999993
199999992
199999991
199999990
199999989
199999988
199999987
199999986
199999985
199999984
199999983
199999982
199999981


(G.2) Fast Input

1 20
1
1
200000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long a[5010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, i, k, q, j, co = 0, y, p; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long Q, F, Answer; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%I64d", &a[i]); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 13 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%I64d", &Q); /* line 14 slow_hit_count: 20, fast_hit_count: 1 */
    Answer = -1; /* line 15 slow_hit_count: 20, fast_hit_count: 1 */
    for (i = 0; i < n; i++) { /* line 16 slow_hit_count: 40, fast_hit_count: 2 */
      for (j = 1; j <= k; j++) { /* line 17 slow_hit_count: 420, fast_hit_count: 21 */
        if (j == 1) { /* line 18 slow_hit_count: 400, fast_hit_count: 20 */
          y = lower_bound(a, a + n, Q) - &a[0]; /* line 19 slow_hit_count: 20, fast_hit_count: 1 */
          if (a[y] == Q) { /* line 20 slow_hit_count: 20, fast_hit_count: 1 */
            Answer = 1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        F = Q - (j * a[i]); /* line 24 slow_hit_count: 400, fast_hit_count: 20 */
        for (p = 1; p <= k - j; p++) { /* line 25 slow_hit_count: 4200, fast_hit_count: 210 */
          y = lower_bound(a, a + n, F / p) - &a[0]; /* line 26 slow_hit_count: 3800, fast_hit_count: 190 */
          if (p * a[y] == F && (j + p < Answer || Answer == -1)) Answer = p + j; /* line 27 slow_hit_count: 3800, fast_hit_count: 190 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    v.push_back(Answer); /* line 31 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (j = 0; j < v.size(); j++) cout << v[j] << "\n"; /* line 33 slow_hit_count: 21, fast_hit_count: 2 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data provided, we can identify the following segments of code as being particularly expensive or inefficient:

1. **Nested Loops:**
   - The loop on line 17 (`for (j = 1; j <= k; j++)`) and the subsequent nested loop on line 25 (`for (p = 1; p <= k - j; p++)`) have significantly high hit counts when compared to the fast input. This suggests they are iterating many times for each input query, particularly under conditions presented by the slow input.

2. **Conditionals and Calculations:**
   - The conditions and calculations on lines 24-27 (`F = Q - (j * a[i])` and the conditional checking in line 27) are heavily hit, indicating they play a crucial role in the repeated operation within the nested loops.

3. **Use of `lower_bound`:**
   - Lines 19 and 26 involve calls to `lower_bound`, which may lead to inefficiencies if called frequently within nested loops, especially with larger ranges of calculations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Invariant on the Number of Denominations:**
   - "When the number of bill denominations is minimal (e.g., n = 1), the program becomes inefficient due to exhaustive combinations attempted to reach the withdrawal sum."

2. **Invariant on Large Withdrawal Requests:**
   - "If each requested withdrawal amount is substantially large compared to the available denominations, the program may enter a slow path as it attempts many possible combinations using the available bills."

3. **Invariant on Repeated Operations:**
   - "When `k` is large, the nested loops iterate extensively, causing performance degradation. The code's performance decreases notably when attempting to satisfy large withdrawal amounts using very few bill types, requiring exhaustive combinations."

These invariants highlight scenarios where the complexity of finding the minimum number of bills becomes impractically high, leading to potential slowdowns. They focus on input patterns and constraints (like `k` and `n`) that can trigger inefficient paths in the code execution, ensuring that they are applicable to a range of future scenarios within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Runtime Checks in C++

Based on the performance-characterizing invariants previously derived, here are the C++ checks:

1. **Invariant on the Number of Denominations:**
   - C++ Code: Checking if there is only one denomination, as this would lead to inefficient computation due to lack of variety in bill combinations.

```cpp
void check_single_denomination_invariant(int n) {
    if (n == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - single denomination." << endl;
        abort();
    }
}
```

2. **Invariant on Large Withdrawal Requests:**
   - C++ Code: Checking if withdrawal requests are significantly larger than the maximum denomination, leading to inefficient attempts to match the sum.

```cpp
void check_large_withdrawal_invariant(long long Q, long long max_den, int n) {
    if (Q > max_den * n) {
        cerr << "Warning: Performance bottleneck condition triggered - withdrawal amount too large compared to bill denominations." << endl;
        abort();
    }
}
```

3. **Invariant on Repeated Operations:**
   - C++ Code: Checking for large `k` and emphasizing the nested loops' potential inefficiency.

```cpp
void check_large_k_invariant(int k) {
    if (k > 15) { // Assuming a threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - large k value leading to extensive loops." << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Here is the instrumented C++ code with the checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long a[5010];
vector<long long> v;

// Performance check functions
void check_single_denomination_invariant(int n) {
    if (n == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - single denomination." << endl;
        abort();
    }
}

void check_large_withdrawal_invariant(long long Q, long long max_den, int n) {
    if (Q > max_den * n) {
        cerr << "Warning: Performance bottleneck condition triggered - withdrawal amount too large compared to bill denominations." << endl;
        abort();
    }
}

void check_large_k_invariant(int k) {
    if (k > 15) { // Assuming a threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - large k value leading to extensive loops." << endl;
        abort();
    }
}

int main() {
    int n, i, k, q, j, co = 0, y, p;
    long long Q, F, Answer;
    cin >> n >> k;
    
    check_single_denomination_invariant(n);
    check_large_k_invariant(k);

    for (i = 0; i < n; i++) {
        scanf("%I64d", &a[i]);
    }

    cin >> q;
    while (q--) {
        scanf("%I64d", &Q);

        check_large_withdrawal_invariant(Q, a[n-1], n);

        Answer = -1;
        for (i = 0; i < n; i++) {
            for (j = 1; j <= k; j++) {
                if (j == 1) {
                    y = lower_bound(a, a + n, Q) - &a[0];
                    if (a[y] == Q) {
                        Answer = 1;
                    }
                }
                F = Q - (j * a[i]);
                for (p = 1; p <= k - j; p++) {
                    y = lower_bound(a, a + n, F / p) - &a[0];
                    if (p * a[y] == F && (j + p < Answer || Answer == -1)) Answer = p + j;
                }
            }
        }
        v.push_back(Answer);
    }
    
    for (j = 0; j < v.size(); j++) cout << v[j] << "\n";
    return 0;
}
```

### Explanation of Check Placement:

- **`check_single_denomination_invariant`:** Placed after reading `n` to immediately catch if there's only one denomination.
- **`check_large_withdrawal_invariant`:** Called for each withdrawal request, ensuring it doesn't exceed feasible limits given the denominations.
- **`check_large_k_invariant`:** Placed after reading `k` to immediately flag potential inefficiency related to the number of bills.

These checks help maintain efficient performance by detecting and aborting on situations known to lead to slow execution.

