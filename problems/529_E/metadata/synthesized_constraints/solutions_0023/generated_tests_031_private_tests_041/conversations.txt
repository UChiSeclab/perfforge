system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 2100000000;
int n, k, q, x, ans, i, t, L, a[100005];
map<int, int> M;
int main() {
  scanf("%d%d", &n, &L);
  for (i = 1; i <= n; i++) scanf("%d", &a[i]);
  scanf("%d", &q);
  while (q--) {
    scanf("%d", &x);
    ans = INF;
    M.clear();
    for (i = 1; i <= n; i++) {
      for (k = 1; k <= L; k++) {
        if (k * a[i] > x) continue;
        if (k * a[i] == x) {
          ans = k;
          continue;
        }
        t = M[x - k * a[i]];
        if (t && t + k <= L) ans = min(ans, M[x - k * a[i]] + k);
      }
      for (k = 1; k <= L; k++) {
        t = M[k * a[i]];
        if (!t || t > k) M[k * a[i]] = k;
      }
    }
    if (ans == INF)
      puts("-1");
    else
      printf("%d\n", ans);
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 20
1
20
200000000
199999999
199999998
199999997
199999996
199999995
199999994
199999993
199999992
199999991
199999990
199999989
199999988
12648364
199999986
199999985
199999984
199999983
199999982
199999981


(G.2) Fast Input

1 20
1
1
200000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 2100000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, q, x, ans, i, t, L, a[100005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> M; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &L); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; i++) scanf("%d", &a[i]); /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  scanf("%d", &q); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 10 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%d", &x); /* line 11 slow_hit_count: 20, fast_hit_count: 1 */
    ans = INF; /* line 12 slow_hit_count: 20, fast_hit_count: 1 */
    M.clear(); /* line 13 slow_hit_count: 20, fast_hit_count: 1 */
    for (i = 1; i <= n; i++) { /* line 14 slow_hit_count: 40, fast_hit_count: 2 */
      for (k = 1; k <= L; k++) { /* line 15 slow_hit_count: 420, fast_hit_count: 21 */
        if (k * a[i] > x) continue; /* line 16 slow_hit_count: 400, fast_hit_count: 20 */
        if (k * a[i] == x) { /* line 17 slow_hit_count: 400, fast_hit_count: 20 */
          ans = k; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
          continue; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        t = M[x - k * a[i]]; /* line 21 slow_hit_count: 400, fast_hit_count: 20 */
        if (t && t + k <= L) ans = min(ans, M[x - k * a[i]] + k); /* line 22 slow_hit_count: 400, fast_hit_count: 20 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      for (k = 1; k <= L; k++) { /* line 24 slow_hit_count: 420, fast_hit_count: 21 */
        t = M[k * a[i]]; /* line 25 slow_hit_count: 400, fast_hit_count: 20 */
        if (!t || t > k) M[k * a[i]] = k; /* line 26 slow_hit_count: 400, fast_hit_count: 20 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans == INF) /* line 29 slow_hit_count: 20, fast_hit_count: 1 */
      puts("-1"); /* line 30 slow_hit_count: 20, fast_hit_count: 1 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      printf("%d\n", ans); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the provided C program, let's proceed with the analysis phase and then derive performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - From the hit count information, lines 15, 21, 22, 24, 25, and 26 have significantly more hits in the slow input compared to the fast input. This indicates that the nested loops are hit more often during the slow input.

2. **Pinpointing Critical Lines**:
   - **Line 15** (`for (k = 1; k <= L; k++)`): This loop within another loop is executed very frequently. Since `L` is at most 20, a combination of large query values or a single denomination might be causing this loop to repeat too many times.
   - **Lines 21 and 22** involve looking up and updating a map `M`. If `M` grows large or the conditions are frequently satisfied, it can significantly slow down the execution.
   - **Lines 24-26** involve another loop that updates the map `M`. Repeated updates and lookups in every iteration could be inefficient when `n` is large or when `x` is large relative to `a[i]`.

3. **Interaction with Data Structures**:
   - The map `M` is being used extensively with potential multiple updates and lookups. If the values within the map are frequently large or numerous, this can significantly slow down the execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are some natural language performance-characterizing invariants:

1. **High Value of `x` Relative to Denominations**:
   - "The program slows down when the requested sum of money `x` is large compared to available denominations, causing the inner loops to execute many times as it tries combinations to meet the target sum."

2. **Efficiency of Denomination Coverage**:
   - "If the available denominations are not efficiently covering the range up to the requested sum `x`, the program may perform excessive iterations trying to match `x` with limited k bills."

3. **Impact of Single Denomination**:
   - "When there is only one denomination available, the program can enter a slow path since it attempts to meet the sum `x` using only multiples of this denomination, resulting in high loop counts."

4. **Map Usage and Loop Interactions**:
   - "If the map `M` used for tracking intermediate sums grows large or requires frequent updates during nested loops, the performance can degrade significantly, especially for high values of `x`."

These invariants abstractly describe conditions that could lead to slow execution without relying on specific input values, focusing on how the program's logic and constraints might interact with large or inefficient input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
ATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.

For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.

Let's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.

Input

The first line contains two integers n, k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 20).

The next line contains n space-separated integers ai (1 ≤ ai ≤ 107) — the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order.

The next line contains integer q (1 ≤ q ≤ 20) — the number of requests for cash withdrawal that you will make.

The next q lines contain numbers xi (1 ≤ xi ≤ 2·108) — the sums of money in burles that you are going to withdraw from the ATM.

Output

For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.

Examples

Input

6 20
10 50 100 500 1000 5000
8
4200
100000
95000
96000
99000
10100
2015
9950


Output

6
20
19
20
-1
3
-1
-1


Input

5 2
1 2 3 5 8
8
1
3
5
7
9
11
13
15


Output

1
1
1
2
2
2
2
-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker functions that will verify the performance-characterizing invariants identified earlier:

1. **High Value of `x` Relative to Denominations**:
   ```cpp
   void check_high_value_x(int x, int largest_denomination) {
       if (x > 10 * largest_denomination) {
           cerr << "Warning: Performance bottleneck condition triggered: x is too large relative to available denominations!" << endl;
           abort();
       }
   }
   ```

2. **Efficiency of Denomination Coverage**:
   ```cpp
   void check_inefficient_coverage(int n, int x) {
       if (n == 1 && x > 1e6) {
           cerr << "Warning: Performance bottleneck condition triggered: Inefficient coverage with single denomination for large x!" << endl;
           abort();
       }
   }
   ```

3. **Impact of Single Denomination**:
   ```cpp
   void check_single_denom_large_x(int n, int x) {
       if (n == 1 && x > 1e6) {
           cerr << "Warning: Performance bottleneck condition triggered: Single denomination used for large x!" << endl;
           abort();
       }
   }
   ```

4. **Map Usage and Loop Interactions**:
   ```cpp
   void check_map_operations(int loop_iterations) {
       if (loop_iterations > 10000) {
           cerr << "Warning: Performance bottleneck condition triggered: Excessive map operations in loops!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented version of the original C++ program, with the checks integrated at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 2100000000;
int n, k, q, x, ans, i, t, L, a[100005];
map<int, int> M;

// Checker functions for performance bottlenecks
void check_high_value_x(int x, int largest_denomination) {
    if (x > 10 * largest_denomination) {  // Assuming large threshold for illustrative purposes
        cerr << "Warning: Performance bottleneck condition triggered: x is too large relative to available denominations!" << endl;
        abort();
    }
}

void check_inefficient_coverage(int n, int x) {
    if (n == 1 && x > 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered: Inefficient coverage with single denomination for large x!" << endl;
        abort();
    }
}

void check_single_denom_large_x(int n, int x) {
    if (n == 1 && x > 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered: Single denomination used for large x!" << endl;
        abort();
    }
}

void check_map_operations(int loop_iterations) {
    if (loop_iterations > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered: Excessive map operations in loops!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &L);
    for (i = 1; i <= n; i++) scanf("%d", &a[i]);
    scanf("%d", &q);
    while (q--) {
        scanf("%d", &x);
        
        // Checkers before processing each request
        check_high_value_x(x, a[n]);  // Check if x is disproportionally large
        check_inefficient_coverage(n, x);  // Check inefficient denomination coverage
        check_single_denom_large_x(n, x);  // Check single denomination effectiveness

        ans = INF;
        M.clear();
        int loop_iterations = 0;
        for (i = 1; i <= n; i++) {
            for (k = 1; k <= L; k++) {
                loop_iterations++;
                if (k * a[i] > x) continue;
                if (k * a[i] == x) {
                    ans = k;
                    continue;
                }
                t = M[x - k * a[i]];
                if (t && t + k <= L) ans = min(ans, M[x - k * a[i]] + k);
            }
            for (k = 1; k <= L; k++) {
                loop_iterations++;
                t = M[k * a[i]];
                if (!t || t > k) M[k * a[i]] = k;
            }
        }
        
        // Check map operations after key loop processing
        check_map_operations(loop_iterations);

        if (ans == INF)
            puts("-1");
        else
            printf("%d\n", ans);
    }
}
```

This instrumented code ensures that the conditions which can lead to performance bottlenecks are monitored. If any condition is met, it triggers a warning and aborts execution, helping identify the scenarios where the performance degrades significantly.

