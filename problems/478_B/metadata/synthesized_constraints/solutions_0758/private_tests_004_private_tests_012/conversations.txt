system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

n participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.

Your task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.

Input

The only line of input contains two integers n and m, separated by a single space (1 ≤ m ≤ n ≤ 109) — the number of participants and the number of teams respectively. 

Output

The only line of the output should contain two integers kmin and kmax — the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.

Examples

Input

5 1


Output

10 10


Input

3 2


Output

1 1


Input

6 3


Output

3 6

Note

In the first sample all the participants get into one team, so there will be exactly ten pairs of friends.

In the second sample at any possible arrangement one team will always have two participants and the other team will always have one participant. Thus, the number of pairs of friends will always be equal to one.

In the third sample minimum number of newly formed friendships can be achieved if participants were split on teams consisting of 2 people, maximum number can be achieved if participants were split on teams of 1, 1 and 4 people.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long int n, m, c = 1;
  cin >> n >> m;
  long long int n1, m1;
  n1 = n;
  m1 = m;
  n = n - m;
  while (n >= m) {
    n = n - m;
    c++;
  }
  if (n <= 0) n = 0;
  int same_mem = m - n;
  if (c == 1)
    cout << (n * ((c * (c + 1)) / 2)) << " " << ((n1 - m1 + 1) * (n1 - m1)) / 2;
  else {
    cout << ((m - n) * ((c * (c - 1)) / 2)) + (n * ((c * (c + 1)) / 2)) << " "
         << ((n1 - m1 + 1) * (n1 - m1)) / 2;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, m, c = 1; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n1, m1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  n1 = n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  m1 = m; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  n = n - m; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (n >= m) { /* line 10 slow_hit_count: 1000000000, fast_hit_count: 1 */
    n = n - m; /* line 11 slow_hit_count: 999999999, fast_hit_count: 0 */
    c++; /* line 12 slow_hit_count: 999999999, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (n <= 0) n = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int same_mem = m - n; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  if (c == 1) /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    cout << (n * ((c * (c + 1)) / 2)) << " " << ((n1 - m1 + 1) * (n1 - m1)) / 2; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  else { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ((m - n) * ((c * (c - 1)) / 2)) + (n * ((c * (c + 1)) / 2)) << " " /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
         << ((n1 - m1 + 1) * (n1 - m1)) / 2; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C code and identify performance-characterizing invariants, let's break down the tasks into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The `while` loop starting at line 10 receives a significantly higher hit count in the slow input scenario (`1,000,000,000` times) compared to the fast input (`1` time).

2. **Pinpoint Lines or Functions with More Hits on Slow Input:**
   - **Line 10 (`while (n >= m)`)**: This loop is the main contributor to the slow performance because it iterates `n` times when `m` is `1`.
   - **Lines 11 and 12** are repeatedly executed within this loop, contributing to the high number of iterations.

3. **Interaction with Data Structures and Input Constraints:**
   - The loop condition `n >= m` causes the high iteration count when `m` is small, especially when `m = 1`. Given the constraint `1 ≤ m ≤ n ≤ 10^9`, this results in the worst-case scenario where the loop iterates close to `n` times.

### Phase 2: Derive Performance-Characterizing Invariants in Natural Language

1. **Natural Language Statements:**
   - "When the number of teams `m` is set to 1, the program enters a slow path, as it attempts to repeatedly subtract `m` from `n`, iterating close to `n` times."
   - "The performance degrades significantly when `n` is very large and `m` is at its minimum possible value, leading to a large number of loop iterations."

2. **Abstracting Input Patterns and Thresholds:**
   - The slowdown is primarily seen when `m` is minimal (close to 1) and `n` is very large, approaching its constraint limit (up to `10^9`).
   - The condition `m = 1` triggers the maximum number of iterations in the loop, making it a critical threshold for detecting slow performance.

### Concise Set of Performance Trigger Statements

- **Invariant 1**: "The program experiences significant slowdown when the number of participants `n` is large and the number of teams `m` is minimized (i.e., `m = 1`), leading to excessive loop iterations."
  
- **Invariant 2**: "If `m` is small, especially when it equals 1, and `n` is large, the while loop condition `n >= m` will cause a large number of iterations, slowing down the program substantially."

These performance-characterizing invariants describe the conditions under which the code path leads to slow execution, particularly when `m` is minimized and `n` is maximized within the provided constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
n participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.

Your task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.

Input

The only line of input contains two integers n and m, separated by a single space (1 ≤ m ≤ n ≤ 109) — the number of participants and the number of teams respectively. 

Output

The only line of the output should contain two integers kmin and kmax — the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.

Examples

Input

5 1


Output

10 10


Input

3 2


Output

1 1


Input

6 3


Output

3 6

Note

In the first sample all the participants get into one team, so there will be exactly ten pairs of friends.

In the second sample at any possible arrangement one team will always have two participants and the other team will always have one participant. Thus, the number of pairs of friends will always be equal to one.

In the third sample minimum number of newly formed friendships can be achieved if participants were split on teams consisting of 2 people, maximum number can be achieved if participants were split on teams of 1, 1 and 4 people.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we'll translate the performance-characterizing invariants into C++ code snippets for runtime checks.

### Phase 3: Implement Checker Code in C++

1. **Invariant 1**: "The program experiences significant slowdown when the number of participants `n` is large and the number of teams `m` is minimized (`m = 1`), leading to excessive loop iterations."
   - We'll write a checker to detect when `m` is equal to 1, which triggers the high number of loop iterations.

```cpp
void check_minimum_teams_invariant(long long n, long long m) {
    if (m == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - m is 1, leading to excessive loop iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2**: "If `m` is small, especially when it equals 1, and `n` is large, the while loop condition `n >= m` will cause a large number of iterations, slowing down the program substantially."
   - We can consolidate this with the first invariant, focusing on checking when `m` equals 1 as the main trigger.

### Phase 4: Integrate Checker Code into Original Program

Now we'll integrate the checker code within the original C++ program, ensuring we place it effectively to prevent overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for performance bottleneck
void check_minimum_teams_invariant(long long n, long long m) {
    if (m == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - m is 1, leading to excessive loop iterations!" << endl;
        abort();
    }
}

int main() {
    long long int n, m, c = 1;
    cin >> n >> m;

    // Check for the performance bottleneck condition
    check_minimum_teams_invariant(n, m);

    long long int n1, m1;
    n1 = n;
    m1 = m;
    n = n - m;
    while (n >= m) {
        n = n - m;
        c++;
    }
    if (n <= 0) n = 0;
    int same_mem = m - n;
    if (c == 1)
        cout << (n * ((c * (c + 1)) / 2)) << " " << ((n1 - m1 + 1) * (n1 - m1)) / 2;
    else {
        cout << ((m - n) * ((c * (c - 1)) / 2)) + (n * ((c * (c + 1)) / 2)) << " "
             << ((n1 - m1 + 1) * (n1 - m1)) / 2;
    }
}
```

### Explanation of Integration

- **Placement of Checks**: The checker function `check_minimum_teams_invariant` is called right after reading the input values for `n` and `m`. This placement ensures that the condition is checked early on and outside of any tight loops, preventing additional overhead during execution.
- **Consolidation**: Since both invariants focus on `m` being equal to 1, the checker function is designed to capture this critical condition effectively.

