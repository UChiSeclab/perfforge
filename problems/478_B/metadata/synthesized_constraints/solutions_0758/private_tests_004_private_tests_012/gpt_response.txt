=== Invariants Response ===
To analyze the given C code and identify performance-characterizing invariants, let's break down the tasks into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The `while` loop starting at line 10 receives a significantly higher hit count in the slow input scenario (`1,000,000,000` times) compared to the fast input (`1` time).

2. **Pinpoint Lines or Functions with More Hits on Slow Input:**
   - **Line 10 (`while (n >= m)`)**: This loop is the main contributor to the slow performance because it iterates `n` times when `m` is `1`.
   - **Lines 11 and 12** are repeatedly executed within this loop, contributing to the high number of iterations.

3. **Interaction with Data Structures and Input Constraints:**
   - The loop condition `n >= m` causes the high iteration count when `m` is small, especially when `m = 1`. Given the constraint `1 ≤ m ≤ n ≤ 10^9`, this results in the worst-case scenario where the loop iterates close to `n` times.

### Phase 2: Derive Performance-Characterizing Invariants in Natural Language

1. **Natural Language Statements:**
   - "When the number of teams `m` is set to 1, the program enters a slow path, as it attempts to repeatedly subtract `m` from `n`, iterating close to `n` times."
   - "The performance degrades significantly when `n` is very large and `m` is at its minimum possible value, leading to a large number of loop iterations."

2. **Abstracting Input Patterns and Thresholds:**
   - The slowdown is primarily seen when `m` is minimal (close to 1) and `n` is very large, approaching its constraint limit (up to `10^9`).
   - The condition `m = 1` triggers the maximum number of iterations in the loop, making it a critical threshold for detecting slow performance.

### Concise Set of Performance Trigger Statements

- **Invariant 1**: "The program experiences significant slowdown when the number of participants `n` is large and the number of teams `m` is minimized (i.e., `m = 1`), leading to excessive loop iterations."
  
- **Invariant 2**: "If `m` is small, especially when it equals 1, and `n` is large, the while loop condition `n >= m` will cause a large number of iterations, slowing down the program substantially."

These performance-characterizing invariants describe the conditions under which the code path leads to slow execution, particularly when `m` is minimized and `n` is maximized within the provided constraints.

=== Checker Response ===
Let's proceed with Phase 3, where we'll translate the performance-characterizing invariants into C++ code snippets for runtime checks.

### Phase 3: Implement Checker Code in C++

1. **Invariant 1**: "The program experiences significant slowdown when the number of participants `n` is large and the number of teams `m` is minimized (`m = 1`), leading to excessive loop iterations."
   - We'll write a checker to detect when `m` is equal to 1, which triggers the high number of loop iterations.

```cpp
void check_minimum_teams_invariant(long long n, long long m) {
    if (m == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - m is 1, leading to excessive loop iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2**: "If `m` is small, especially when it equals 1, and `n` is large, the while loop condition `n >= m` will cause a large number of iterations, slowing down the program substantially."
   - We can consolidate this with the first invariant, focusing on checking when `m` equals 1 as the main trigger.

### Phase 4: Integrate Checker Code into Original Program

Now we'll integrate the checker code within the original C++ program, ensuring we place it effectively to prevent overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for performance bottleneck
void check_minimum_teams_invariant(long long n, long long m) {
    if (m == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - m is 1, leading to excessive loop iterations!" << endl;
        abort();
    }
}

int main() {
    long long int n, m, c = 1;
    cin >> n >> m;

    // Check for the performance bottleneck condition
    check_minimum_teams_invariant(n, m);

    long long int n1, m1;
    n1 = n;
    m1 = m;
    n = n - m;
    while (n >= m) {
        n = n - m;
        c++;
    }
    if (n <= 0) n = 0;
    int same_mem = m - n;
    if (c == 1)
        cout << (n * ((c * (c + 1)) / 2)) << " " << ((n1 - m1 + 1) * (n1 - m1)) / 2;
    else {
        cout << ((m - n) * ((c * (c - 1)) / 2)) + (n * ((c * (c + 1)) / 2)) << " "
             << ((n1 - m1 + 1) * (n1 - m1)) / 2;
    }
}
```

### Explanation of Integration

- **Placement of Checks**: The checker function `check_minimum_teams_invariant` is called right after reading the input values for `n` and `m`. This placement ensures that the condition is checked early on and outside of any tight loops, preventing additional overhead during execution.
- **Consolidation**: Since both invariants focus on `m` being equal to 1, the checker function is designed to capture this critical condition effectively.
