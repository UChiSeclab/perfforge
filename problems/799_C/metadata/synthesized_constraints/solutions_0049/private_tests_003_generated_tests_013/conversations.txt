system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
typedef struct fountain {
  int b;
  int p;
  char type;
} fountain;
fountain f[100002];
vector<fountain> c_all, d_all;
int maxbc[100002] = {0};
int maxbd[100002] = {0};
int bin_search(vector<fountain>& a, int l, int r, int val) {
  while (l <= r) {
    int mid = (l + r) / 2;
    if (val < a[mid].p)
      r = mid - 1;
    else
      l = mid + 1;
  }
  return l;
}
int sort(const void* x, const void* y) {
  if (((fountain*)x)->p == ((fountain*)y)->p)
    return ((fountain*)y)->b - ((fountain*)x)->b;
  return ((fountain*)x)->p - ((fountain*)y)->p;
}
int main() {
  int n, c, d, ans = 0, length, left_pos, left;
  cin >> n >> c >> d;
  for (int i = 1; i <= n; i++) cin >> f[i].b >> f[i].p >> f[i].type;
  qsort(f + 1, n, sizeof(fountain), sort);
  for (int i = 1; i <= n; i++) {
    if (f[i].type == 'C' && f[i].p <= c) {
      c_all.push_back(f[i]);
      if (maxbc[f[i].p] < f[i].b) maxbc[f[i].p] = f[i].b;
    } else if (f[i].type == 'D' && f[i].p <= d) {
      d_all.push_back(f[i]);
      if (maxbd[f[i].p] < f[i].b) maxbd[f[i].p] = f[i].b;
    }
  }
  for (int i = 1; i <= c; i++)
    if (maxbc[i] < maxbc[i - 1]) maxbc[i] = maxbc[i - 1];
  for (int i = 1; i <= d; i++)
    if (maxbd[i] < maxbd[i - 1]) maxbd[i] = maxbd[i - 1];
  if (maxbd[d] != 0 && maxbc[c] != 0) ans = maxbd[d] + maxbc[c];
  length = c_all.size();
  for (int i = length - 1; i > 0; i--) {
    left = c - c_all[i].p;
    left_pos = bin_search(c_all, 0, i - 1, left);
    if (left_pos) {
      ans = max(ans, c_all[i].b + maxbc[c_all[left_pos - 1].p]);
    }
  }
  length = d_all.size();
  for (int i = length - 1; i > 0; i--) {
    left = d - d_all[i].p;
    left_pos = bin_search(d_all, 0, i - 1, left);
    if (left_pos) ans = max(ans, d_all[i].b + maxbd[d_all[left_pos - 1].p]);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 100000 100000
100000 100000 C
100000 100000 D


(G.2) Fast Input

2 2 1
1 1 C
1 1 D


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
typedef struct fountain { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int b; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int p; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  char type; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} fountain; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
fountain f[100002]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<fountain> c_all, d_all; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int maxbc[100002] = {0}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int maxbd[100002] = {0}; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int bin_search(vector<fountain>& a, int l, int r, int val) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  while (l <= r) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    int mid = (l + r) / 2; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    if (val < a[mid].p) /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      r = mid - 1; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      l = mid + 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return l; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int sort(const void* x, const void* y) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  if (((fountain*)x)->p == ((fountain*)y)->p) /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    return ((fountain*)y)->b - ((fountain*)x)->b; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  return ((fountain*)x)->p - ((fountain*)y)->p; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int n, c, d, ans = 0, length, left_pos, left; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> c >> d; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> f[i].b >> f[i].p >> f[i].type; /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
  qsort(f + 1, n, sizeof(fountain), sort); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 3, fast_hit_count: 3 */
    if (f[i].type == 'C' && f[i].p <= c) { /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
      c_all.push_back(f[i]); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      if (maxbc[f[i].p] < f[i].b) maxbc[f[i].p] = f[i].b; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    } else if (f[i].type == 'D' && f[i].p <= d) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
      d_all.push_back(f[i]); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
      if (maxbd[f[i].p] < f[i].b) maxbd[f[i].p] = f[i].b; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= c; i++) /* line 41 slow_hit_count: 100001, fast_hit_count: 3 */
    if (maxbc[i] < maxbc[i - 1]) maxbc[i] = maxbc[i - 1]; /* line 42 slow_hit_count: 100000, fast_hit_count: 2 */
  for (int i = 1; i <= d; i++) /* line 43 slow_hit_count: 100001, fast_hit_count: 2 */
    if (maxbd[i] < maxbd[i - 1]) maxbd[i] = maxbd[i - 1]; /* line 44 slow_hit_count: 100000, fast_hit_count: 1 */
  if (maxbd[d] != 0 && maxbc[c] != 0) ans = maxbd[d] + maxbc[c]; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  length = c_all.size(); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = length - 1; i > 0; i--) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    left = c - c_all[i].p; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    left_pos = bin_search(c_all, 0, i - 1, left); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    if (left_pos) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      ans = max(ans, c_all[i].b + maxbc[c_all[left_pos - 1].p]); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  length = d_all.size(); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = length - 1; i > 0; i--) { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    left = d - d_all[i].p; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    left_pos = bin_search(d_all, 0, i - 1, left); /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    if (left_pos) ans = max(ans, d_all[i].b + maxbd[d_all[left_pos - 1].p]); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the provided code and hit counts, the following observations can be made:

1. **Loop over `maxbc` and `maxbd` Arrays**:
   - Lines 41 and 43 show that loops running up to `c` and `d` are hit 100,001 times in the slow run compared to just 3 and 2 times in the fast run. This indicates that filling the `maxbc` and `maxbd` arrays takes significant time when `c` or `d` are large.

2. **Impact of `c_all` and `d_all` Sizes**:
   - The size of `c_all` and `d_all` depends on the filtering conditions (lines 33 and 36). However, these loops (lines 47 and 55) were hit only once in both runs, suggesting they aren't the primary source of slowdown.

3. **Sorting Impact**:
   - Sorting has minimal impact here (as evidenced by only one hit on line 31) because `n` is small in both cases (just 2 fountains).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants describe the conditions under which the program slows down:

1. **Invariant 1: Large Money Limits Lead to Inefficiencies**:
   - **Description**: When the number of coins (`c`) or diamonds (`d`) Arkady has is very large, the time complexity of filling the `maxbc` and `maxbd` arrays becomes significant, leading to performance degradation. This is because the arrays are updated up to the values of `c` and `d`, respectively.
   - **Threshold**: This inefficiency is particularly noticeable when `c` or `d` approach the upper limit of the input constraints (100,000).

2. **Invariant 2: Maximum Cost Reaches Limits**:
   - **Description**: If the cost of a fountain (either in coins or diamonds) is close to or equals the maximum available resources (`c` or `d`), it results in filling the `maxbc` or `maxbd` arrays extensively. This exhaustive filling is inefficient and contributes to the slowdown.
   - **Threshold**: This condition is exacerbated when most fountains have costs at or near `c` or `d`.

3. **Invariant 3: Filtering Fountains**:
   - **Description**: The filtering of fountains into `c_all` and `d_all` based on their cost and type, although not a bottleneck itself, can indirectly affect performance if it results in `maxbc` and `maxbd` arrays being heavily utilized. More fountains passing this filter imply more entries in these arrays.
   - **Threshold**: This is critical when many fountains have costs within Arkady’s budget.

These invariants aim to capture the key contributors to the slowdown in the code without relying on specific numeric values from the inputs but rather focusing on the conditions that lead to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here, we translate the natural language invariants into C++ code that checks these performance conditions at runtime.

#### Invariant 1: Large Money Limits Lead to Inefficiencies
```cpp
void check_money_limit_invariant(int c, int d) {
    if (c > 50000 || d > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large money limits!" << endl;
        abort();
    }
}
```

#### Invariant 2: Maximum Cost Reaches Limits
```cpp
void check_fountain_cost_invariant(int maxCoinCost, int maxDiamondCost, int c, int d) {
    if (maxCoinCost >= c || maxDiamondCost >= d) {
        cerr << "Warning: Performance bottleneck condition triggered due to maximum fountain cost reaching limits!" << endl;
        abort();
    }
}
```

#### Invariant 3: Filtering Fountains
```cpp
void check_fountain_filtering_invariant(int filteredCount, int n) {
    if (filteredCount > (n / 2)) {
        cerr << "Warning: Performance bottleneck condition triggered due to many fountains passing the filter!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, we integrate these checks into the original C++ code to monitor the performance conditions.

```cpp
#include <bits/stdc++.h>
using namespace std;

typedef struct fountain {
    int b;
    int p;
    char type;
} fountain;

fountain f[100002];
vector<fountain> c_all, d_all;
int maxbc[100002] = {0};
int maxbd[100002] = {0};

int bin_search(vector<fountain>& a, int l, int r, int val) {
    while (l <= r) {
        int mid = (l + r) / 2;
        if (val < a[mid].p)
            r = mid - 1;
        else
            l = mid + 1;
    }
    return l;
}

int sort(const void* x, const void* y) {
    if (((fountain*)x)->p == ((fountain*)y)->p)
        return ((fountain*)y)->b - ((fountain*)x)->b;
    return ((fountain*)x)->p - ((fountain*)y)->p;
}

// Check invariant 1 for large money limits
void check_money_limit_invariant(int c, int d) {
    if (c > 50000 || d > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large money limits!" << endl;
        abort();
    }
}

// Check invariant 2 for maximum cost reaching limits
void check_fountain_cost_invariant(int maxCoinCost, int maxDiamondCost, int c, int d) {
    if (maxCoinCost >= c || maxDiamondCost >= d) {
        cerr << "Warning: Performance bottleneck condition triggered due to maximum fountain cost reaching limits!" << endl;
        abort();
    }
}

// Check invariant 3 for excessive filtering
void check_fountain_filtering_invariant(int filteredCount, int n) {
    if (filteredCount > (n / 2)) {
        cerr << "Warning: Performance bottleneck condition triggered due to many fountains passing the filter!" << endl;
        abort();
    }
}

int main() {
    int n, c, d, ans = 0, length, left_pos, left;
    cin >> n >> c >> d;
    
    // Insert check for money limits
    check_money_limit_invariant(c, d);
    
    for (int i = 1; i <= n; i++) cin >> f[i].b >> f[i].p >> f[i].type;
    qsort(f + 1, n, sizeof(fountain), sort);
    
    int maxCoinCost = 0, maxDiamondCost = 0;
    for (int i = 1; i <= n; i++) {
        if (f[i].type == 'C' && f[i].p <= c) {
            c_all.push_back(f[i]);
            if (maxbc[f[i].p] < f[i].b) maxbc[f[i].p] = f[i].b;
            maxCoinCost = max(maxCoinCost, f[i].p);
        } else if (f[i].type == 'D' && f[i].p <= d) {
            d_all.push_back(f[i]);
            if (maxbd[f[i].p] < f[i].b) maxbd[f[i].p] = f[i].b;
            maxDiamondCost = max(maxDiamondCost, f[i].p);
        }
    }
    
    // Insert check for maximum cost reaching limits
    check_fountain_cost_invariant(maxCoinCost, maxDiamondCost, c, d);

    // Insert check for filtering performance
    check_fountain_filtering_invariant(c_all.size() + d_all.size(), n);

    for (int i = 1; i <= c; i++)
        if (maxbc[i] < maxbc[i - 1]) maxbc[i] = maxbc[i - 1];
    for (int i = 1; i <= d; i++)
        if (maxbd[i] < maxbd[i - 1]) maxbd[i] = maxbd[i - 1];
    if (maxbd[d] != 0 && maxbc[c] != 0) ans = maxbd[d] + maxbc[c];
    length = c_all.size();
    for (int i = length - 1; i > 0; i--) {
        left = c - c_all[i].p;
        left_pos = bin_search(c_all, 0, i - 1, left);
        if (left_pos) {
            ans = max(ans, c_all[i].b + maxbc[c_all[left_pos - 1].p]);
        }
    }
    length = d_all.size();
    for (int i = length - 1; i > 0; i--) {
        left = d - d_all[i].p;
        left_pos = bin_search(d_all, 0, i - 1, left);
        if (left_pos) ans = max(ans, d_all[i].b + maxbd[d_all[left_pos - 1].p]);
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation of Integrated Checks

- **Check for Large Money Limits**: Placed immediately after reading the input values to catch cases where `c` or `d` are large.
- **Check for Maximum Fountain Cost**: Evaluated after filtering fountains to detect cases where costs reach the limits of available resources.
- **Check for Excessive Filtering**: Executed after sorting and filtering fountains, ensuring that the number of passing fountains isn't too large, which could indirectly lead to inefficiencies.

