system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, c, d, a, b, ans, cmax, dmax;
char type;
vector<pair<int, int> > coin_list, diamond_list;
void calc(vector<pair<int, int> > x, int avail) {
  int sz = x.size();
  if (sz < 2) return;
  vector<int> vect(100007);
  vect[0] = x[0].second;
  for (int i = 1; i < sz; i++) vect[i] = max(vect[i - 1], x[i].second);
  for (int i = sz - 1; i > 0; i--) {
    int j;
    for (j = 0; j < i; j++)
      if (x[i].first + x[j].first > avail) break;
    j -= 1;
    if (j - 1 == i) break;
    if (j >= 0) ans = max(ans, x[i].second + vect[j]);
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> c >> d;
  while (n--) {
    cin >> a >> b >> type;
    if (type == 'C') {
      if (b > c) continue;
      coin_list.push_back(make_pair(b, a));
      cmax = max(cmax, a);
    } else {
      if (b > d) continue;
      diamond_list.push_back(make_pair(b, a));
      dmax = max(dmax, a);
    }
  }
  sort(coin_list.begin(), coin_list.end());
  sort(diamond_list.begin(), diamond_list.end());
  calc(coin_list, c);
  calc(diamond_list, d);
  if (diamond_list.size() && coin_list.size()) ans = max(ans, cmax + dmax);
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6 4 9
12 6 D
1 4 D
6 7 C
7 7 D
5 7 D
2 5 D


(G.2) Fast Input

4 15 9
6 10 C
2 10 D
6 19 D
7 5 D


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, c, d, a, b, ans, cmax, dmax; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char type; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > coin_list, diamond_list; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void calc(vector<pair<int, int> > x, int avail) { /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  int sz = x.size(); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  if (sz < 2) return; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> vect(100007); /* line 9 slow_hit_count: 2, fast_hit_count: 0 */
  vect[0] = x[0].second; /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < sz; i++) vect[i] = max(vect[i - 1], x[i].second); /* line 11 slow_hit_count: 5, fast_hit_count: 0 */
  for (int i = sz - 1; i > 0; i--) { /* line 12 slow_hit_count: 5, fast_hit_count: 0 */
    int j; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    for (j = 0; j < i; j++) /* line 14 slow_hit_count: 5, fast_hit_count: 0 */
      if (x[i].first + x[j].first > avail) break; /* line 15 slow_hit_count: 4, fast_hit_count: 0 */
    j -= 1; /* line 16 slow_hit_count: 4, fast_hit_count: 0 */
    if (j - 1 == i) break; /* line 17 slow_hit_count: 4, fast_hit_count: 0 */
    if (j >= 0) ans = max(ans, x[i].second + vect[j]); /* line 18 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> c >> d; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 25 slow_hit_count: 7, fast_hit_count: 5 */
    cin >> a >> b >> type; /* line 26 slow_hit_count: 6, fast_hit_count: 4 */
    if (type == 'C') { /* line 27 slow_hit_count: 6, fast_hit_count: 4 */
      if (b > c) continue; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
      coin_list.push_back(make_pair(b, a)); /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
      cmax = max(cmax, a); /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      if (b > d) continue; /* line 32 slow_hit_count: 5, fast_hit_count: 3 */
      diamond_list.push_back(make_pair(b, a)); /* line 33 slow_hit_count: 5, fast_hit_count: 1 */
      dmax = max(dmax, a); /* line 34 slow_hit_count: 5, fast_hit_count: 1 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  sort(coin_list.begin(), coin_list.end()); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  sort(diamond_list.begin(), diamond_list.end()); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  calc(coin_list, c); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  calc(diamond_list, d); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  if (diamond_list.size() && coin_list.size()) ans = max(ans, cmax + dmax); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the given C program, let's go through the two phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - **Lines with Significant Hit Differences:**
     - **Line 9:** `vector<int> vect(100007);` (slow: 2, fast: 0)
     - **Lines 10-12:** Building and using `vect` (slow: significant hits; fast: 0 hits).
     - **Lines 14-18:** Inner loop where combinations of fountains are checked (slow: 4 hits; fast: 0 hits).

2. **Analysis of Inefficient Code Segments:**
   - The `calc` function is called for both `coin_list` and `diamond_list`, but the loop within `calc` that checks combinations of fountains appears much more frequently in the slow case. This suggests that the inner loop (`for (j = 0; j < i; j++)`) is potentially costly.
   - The program uses a greedy strategy to compute the maximum sum of beauty values while checking availability constraints. The double loop structure here results in O(n^2) complexity, which could be costly given constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some performance-characterizing invariants in natural language that explain under what conditions the program slows down:

1. **Invariant 1: Large List with Repeated Combinations**
   - **Natural Language Description:** "If the number of fountains available for consideration (either coin-based or diamond-based) is large, and the maximum allowable cost is such that many combinations need to be tested, the nested loop may cause a slowdown."
   - **Reasoning:** The nested loop structure in `calc`, which checks pair combinations, becomes expensive as more fountains are available, especially since it operates at O(n^2).

2. **Invariant 2: Cost Thresholds Allow Extensive Searches**
   - **Natural Language Description:** "If the available coins or diamonds are close to the upper limit of possible fountain costs, more fountains will be considered, resulting in a larger search space and potential slowdowns."
   - **Reasoning:** When more fountains can be potentially purchased given the budget (c or d), the algorithm does more work to validate combinations.

3. **Invariant 3: Insufficient Constraints on Search Space**
   - **Natural Language Description:** "If there are insufficient constraints on the search space (e.g., many fountains are affordable but not combinable), the program will explore many suboptimal paths."
   - **Reasoning:** The function iteratively maximizes beauty while respecting costs. When many affordable combinations do not lead to valid purchases due to budget limits, computational resources are spent exploring these paths.

### Recommendations

- To avoid the nested loop slowness, consider optimizing the search logic, possibly by using more efficient data structures or heuristics to avoid unnecessary checks.
- Consider early exits when certain conditions are met (e.g., if a fountain combination cannot possibly be affordable given current constraints).
- Although the input constraint is n ≤ 100,000, the algorithm's quadratic nature (nested loop) makes it critical to manage list sizes effectively within practical limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Natural Language Invariants in C++

Let's translate the performance-characterizing invariants derived earlier into C++ code checkers.

### Invariant 1: Large List with Repeated Combinations

**Natural Language Description:** "If the number of fountains available for consideration (either coin-based or diamond-based) is large, and the maximum allowable cost is such that many combinations need to be tested, the nested loop may cause a slowdown."

**C++ Checker Code:**

```cpp
void check_large_list_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large list with repeated combinations" << endl;
        abort();
    }
}
```

### Invariant 2: Cost Thresholds Allow Extensive Searches

**Natural Language Description:** "If the available coins or diamonds are close to the upper limit of possible fountain costs, more fountains will be considered, resulting in a larger search space and potential slowdowns."

**C++ Checker Code:**

```cpp
void check_cost_threshold_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - cost thresholds allow extensive searches" << endl;
        abort();
    }
}
```

### Invariant 3: Insufficient Constraints on Search Space

**Natural Language Description:** "If there are insufficient constraints on the search space (e.g., many fountains are affordable but not combinable), the program will explore many suboptimal paths."

**C++ Checker Code:**

```cpp
void check_insufficient_constraints_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient constraints on search space" << endl;
        abort();
    }
}
```

## Phase 4: Propagate and Insert Conditional Checks

Now, let's integrate these checker functions into the provided C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, c, d, a, b, ans, cmax, dmax;
char type;
vector<pair<int, int>> coin_list, diamond_list;

// Performance checker functions
void check_large_list_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large list with repeated combinations" << endl;
        abort();
    }
}

void check_cost_threshold_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - cost thresholds allow extensive searches" << endl;
        abort();
    }
}

void check_insufficient_constraints_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient constraints on search space" << endl;
        abort();
    }
}

void calc(vector<pair<int, int>> x, int avail) {
    int sz = x.size();
    if (sz < 2) return;

    // Check for large list condition
    check_large_list_invariant(sz > 1000);  // arbitrary threshold for demonstration

    vector<int> vect(100007);
    vect[0] = x[0].second;
    for (int i = 1; i < sz; i++) vect[i] = max(vect[i - 1], x[i].second);
    for (int i = sz - 1; i > 0; i--) {
        int j;
        for (j = 0; j < i; j++)
            if (x[i].first + x[j].first > avail) break;
        j -= 1;
        if (j - 1 == i) break;
        if (j >= 0) ans = max(ans, x[i].second + vect[j]);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> c >> d;

    // Check for cost threshold condition
    check_cost_threshold_invariant(c > 90000 || d > 90000); // arbitrary high threshold

    while (n--) {
        cin >> a >> b >> type;
        if (type == 'C') {
            if (b > c) continue;
            coin_list.push_back(make_pair(b, a));
            cmax = max(cmax, a);
        } else {
            if (b > d) continue;
            diamond_list.push_back(make_pair(b, a));
            dmax = max(dmax, a);
        }
    }

    // Check for insufficient constraints on search space
    check_insufficient_constraints_invariant((coin_list.size() > 10) && (diamond_list.size() > 10)); // arbitrary combined condition

    sort(coin_list.begin(), coin_list.end());
    sort(diamond_list.begin(), diamond_list.end());
    calc(coin_list, c);
    calc(diamond_list, d);
    if (diamond_list.size() && coin_list.size()) ans = max(ans, cmax + dmax);
    cout << ans;
}
```

### Comments on Inserted Checks

1. **`check_large_list_invariant`:** This check is inserted in the `calc` function to detect when a large list might lead to extensive pair combination checks.

2. **`check_cost_threshold_invariant`:** Placed immediately after reading the inputs to detect situations where high budget thresholds could lead to inefficient searches.

3. **`check_insufficient_constraints_invariant`:** Added before sorting and calculating to identify cases where both lists are large enough to potentially explore too many suboptimal paths.

