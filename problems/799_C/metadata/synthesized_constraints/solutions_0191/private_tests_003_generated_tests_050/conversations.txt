system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5;
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
int n, c, d;
int tree[(N + 10) << 2][2];
vector<int> v[N + 10][2];
void update(int x, int l, int r, int pos, int valu, int idx) {
  if (l == r) {
    if (valu)
      tree[x][idx] = max(tree[x][idx], valu);
    else
      tree[x][idx] = 0;
    return;
  }
  int mid = (l + r) / 2;
  if (pos <= mid)
    update(x << 1, l, mid, pos, valu, idx);
  else
    update(x << 1 | 1, mid + 1, r, pos, valu, idx);
  tree[x][idx] = max(tree[x << 1][idx], tree[x << 1 | 1][idx]);
}
int query(int x, int l, int r, int L, int R, int idx) {
  if (L <= l && r <= R) return tree[x][idx];
  int mid = (l + r) / 2, c = 0;
  if (L <= mid) c = max(c, query(x << 1, l, mid, L, R, idx));
  if (R > mid) c = max(c, query(x << 1 | 1, mid + 1, r, L, R, idx));
  return c;
}
bool cmp(int x, int y) { return x > y; }
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  cin >> n >> c >> d;
  int maxc = 0, maxd = 0, ans = 0;
  for (int i = 1; i <= n; i++) {
    int b, p;
    char ch[2];
    cin >> b >> p >> ch;
    if (ch[0] == 'C') {
      v[p][0].push_back(b);
      update(1, 1, N, p, b, 0);
      if (p <= c) maxc = max(maxc, b);
    } else {
      v[p][1].push_back(b);
      update(1, 1, N, p, b, 1);
      if (p <= d) maxd = max(maxd, b);
    }
  }
  for (int i = 1; i <= N; i++) {
    sort(v[i][0].begin(), v[i][0].end(), cmp);
    sort(v[i][1].begin(), v[i][1].end(), cmp);
  }
  if (maxc && maxd) ans = maxc + maxd;
  for (int i = 1; i < c; i++) {
    if (v[i][0].empty()) continue;
    int x = v[i][0][0];
    update(1, 1, N, i, 0, 0);
    if (v[i][0].size() > 1) update(1, 1, N, i, v[i][0][1], 0);
    int y = query(1, 1, N, 1, c - i, 0);
    if (y) ans = max(ans, x + y);
    update(1, 1, N, i, v[i][0][0], 0);
  }
  for (int i = 1; i < d; i++) {
    if (v[i][1].empty()) continue;
    int x = v[i][1][0];
    update(1, 1, N, i, 0, 1);
    if (v[i][1].size() > 1) update(1, 1, N, i, v[i][1][1], 1);
    int y = query(1, 1, N, 1, d - i, 1);
    if (y) ans = max(ans, x + y);
    update(1, 1, N, i, v[i][1][0], 1);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 100000 100000
100000 100000 C
100000 100000 D


(G.2) Fast Input

2 1 0
1 1 C
0 1 D


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, c, d; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int tree[(N + 10) << 2][2]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v[N + 10][2]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void update(int x, int l, int r, int pos, int valu, int idx) { /* line 9 slow_hit_count: 34, fast_hit_count: 36 */
  if (l == r) { /* line 10 slow_hit_count: 34, fast_hit_count: 36 */
    if (valu) /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
      tree[x][idx] = max(tree[x][idx], valu); /* line 12 slow_hit_count: 2, fast_hit_count: 1 */
    else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      tree[x][idx] = 0; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) / 2; /* line 17 slow_hit_count: 32, fast_hit_count: 34 */
  if (pos <= mid) /* line 18 slow_hit_count: 32, fast_hit_count: 34 */
    update(x << 1, l, mid, pos, valu, idx); /* line 19 slow_hit_count: 0, fast_hit_count: 34 */
  else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    update(x << 1 | 1, mid + 1, r, pos, valu, idx); /* line 21 slow_hit_count: 32, fast_hit_count: 0 */
  tree[x][idx] = max(tree[x << 1][idx], tree[x << 1 | 1][idx]); /* line 22 slow_hit_count: 32, fast_hit_count: 34 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int query(int x, int l, int r, int L, int R, int idx) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (L <= l && r <= R) return tree[x][idx]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) / 2, c = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (L <= mid) c = max(c, query(x << 1, l, mid, L, R, idx)); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (R > mid) c = max(c, query(x << 1 | 1, mid + 1, r, L, R, idx)); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return c; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(int x, int y) { return x > y; } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> c >> d; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  int maxc = 0, maxd = 0, ans = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 37 slow_hit_count: 3, fast_hit_count: 3 */
    int b, p; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    char ch[2]; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> b >> p >> ch; /* line 40 slow_hit_count: 2, fast_hit_count: 2 */
    if (ch[0] == 'C') { /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
      v[p][0].push_back(b); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
      update(1, 1, N, p, b, 0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
      if (p <= c) maxc = max(maxc, b); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      v[p][1].push_back(b); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      update(1, 1, N, p, b, 1); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      if (p <= d) maxd = max(maxd, b); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= N; i++) { /* line 51 slow_hit_count: 100001, fast_hit_count: 100001 */
    sort(v[i][0].begin(), v[i][0].end(), cmp); /* line 52 slow_hit_count: 100000, fast_hit_count: 100000 */
    sort(v[i][1].begin(), v[i][1].end(), cmp); /* line 53 slow_hit_count: 100000, fast_hit_count: 100000 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  if (maxc && maxd) ans = maxc + maxd; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < c; i++) { /* line 56 slow_hit_count: 100000, fast_hit_count: 1 */
    if (v[i][0].empty()) continue; /* line 57 slow_hit_count: 99999, fast_hit_count: 0 */
    int x = v[i][0][0]; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    update(1, 1, N, i, 0, 0); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    if (v[i][0].size() > 1) update(1, 1, N, i, v[i][0][1], 0); /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    int y = query(1, 1, N, 1, c - i, 0); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (y) ans = max(ans, x + y); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    update(1, 1, N, i, v[i][0][0], 0); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < d; i++) { /* line 65 slow_hit_count: 100000, fast_hit_count: 1 */
    if (v[i][1].empty()) continue; /* line 66 slow_hit_count: 99999, fast_hit_count: 0 */
    int x = v[i][1][0]; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    update(1, 1, N, i, 0, 1); /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    if (v[i][1].size() > 1) update(1, 1, N, i, v[i][1][1], 1); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    int y = query(1, 1, N, 1, d - i, 1); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    if (y) ans = max(ans, x + y); /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    update(1, 1, N, i, v[i][1][0], 1); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the hit counts and the given code, let's proceed through both phases of the task:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Consistency**:
   - Lines 51 to 53: Both inputs hit these lines 100,000 times because they process each possible cost for fountains in a sorting step. This step is inherently expensive as it involves sorting operations for each potential cost, whether they exist or not.

2. **Loop Iteration Differences**:
   - Lines 56 and 65: The loops iterate over up to `c` and `d` respectively, with significant hits (100,000 times for the slow input) compared to the fast input (1 time). This indicates that the program is examining every possible cost value up to the maximum coins (`c`) or diamonds (`d`).

3. **Conditional Operations**:
   - Lines 57 and 66: These are skipped most of the time for the slow input because `v[i][0]` and `v[i][1]` are usually empty, causing the loops to skip the rest of their bodies. This suggests inefficiency, as the loops continue iterating over many unpopulated indices.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Sorting Inefficiency**:
   - **Invariant**: "The sorting operation across all possible costs, even when many of these costs have no corresponding fountain, can become a significant performance bottleneck if the range of possible costs (`c` or `d`) is large."
   
2. **Loop Iteration Overhead**:
   - **Invariant**: "Iterating over all potential coin and diamond costs up to the maximum available (`c` or `d`) can cause inefficiencies, especially when the actual number of purchasable fountains is small compared to these ranges."

3. **Empty Vector Checks**:
   - **Invariant**: "Frequent checks on empty lists (`v[i][0]` or `v[i][1]`) during loops can lead to unnecessary processing if the list of potential costs is sparsely populated with actual fountain data."

By considering these invariants, we capture the conditions under which the program enters a slow path. These invariants are abstracted from specific input values but are grounded in the problem's constraints and the observed behavior of the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

Solution (C++ code):
{solution}


assistant: Let's proceed through the phases to implement and integrate the performance-characterizing invariants in the given C++ code.

### Phase 3: Implement the Natural Language Invariants in C++

We derived the following performance-characterizing invariants:

1. Sorting Inefficiency
2. Loop Iteration Overhead
3. Empty Vector Checks

Here is the C++ code implementing these as runtime checks:

```cpp
void check_sorting_invariant(int n, int c, int d) {
    if (n > 0 && (c > 1000 || d > 1000)) {
        cerr << "Warning: sorting_invariant triggered - potentially large number of sorting operations." << endl;
        abort();
    }
}

void check_loop_iteration_invariant(int c, int d) {
    if (c > 1000 || d > 1000) {
        cerr << "Warning: loop_iteration_invariant triggered - iterating over large range of costs." << endl;
        abort();
    }
}

void check_empty_vector_invariant(const vector<int>& v) {
    if (v.empty()) {
        cerr << "Warning: empty_vector_invariant triggered - empty vector check might be inefficient." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Program

We will now integrate these checks into the original program, placing them strategically to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5;
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
int n, c, d;
int tree[(N + 10) << 2][2];
vector<int> v[N + 10][2];

// Function to update segment tree
void update(int x, int l, int r, int pos, int valu, int idx) {
  if (l == r) {
    if (valu)
      tree[x][idx] = max(tree[x][idx], valu);
    else
      tree[x][idx] = 0;
    return;
  }
  int mid = (l + r) / 2;
  if (pos <= mid)
    update(x << 1, l, mid, pos, valu, idx);
  else
    update(x << 1 | 1, mid + 1, r, pos, valu, idx);
  tree[x][idx] = max(tree[x << 1][idx], tree[x << 1 | 1][idx]);
}

// Function to query segment tree
int query(int x, int l, int r, int L, int R, int idx) {
  if (L <= l && r <= R) return tree[x][idx];
  int mid = (l + r) / 2, c = 0;
  if (L <= mid) c = max(c, query(x << 1, l, mid, L, R, idx));
  if (R > mid) c = max(c, query(x << 1 | 1, mid + 1, r, L, R, idx));
  return c;
}

// Invariant checks
void check_sorting_invariant(int n, int c, int d) {
    if (n > 0 && (c > 1000 || d > 1000)) {
        cerr << "Warning: sorting_invariant triggered - potentially large number of sorting operations." << endl;
        abort();
    }
}

void check_loop_iteration_invariant(int c, int d) {
    if (c > 1000 || d > 1000) {
        cerr << "Warning: loop_iteration_invariant triggered - iterating over large range of costs." << endl;
        abort();
    }
}

void check_empty_vector_invariant(const vector<int>& v) {
    if (v.empty()) {
        cerr << "Warning: empty_vector_invariant triggered - empty vector check might be inefficient." << endl;
        abort();
    }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  cin >> n >> c >> d;

  // Check potential bottleneck conditions
  check_sorting_invariant(n, c, d);
  check_loop_iteration_invariant(c, d);

  int maxc = 0, maxd = 0, ans = 0;
  for (int i = 1; i <= n; i++) {
    int b, p;
    char ch[2];
    cin >> b >> p >> ch;
    if (ch[0] == 'C') {
      v[p][0].push_back(b);
      update(1, 1, N, p, b, 0);
      if (p <= c) maxc = max(maxc, b);
    } else {
      v[p][1].push_back(b);
      update(1, 1, N, p, b, 1);
      if (p <= d) maxd = max(maxd, b);
    }
  }
  
  for (int i = 1; i <= N; i++) {
    sort(v[i][0].begin(), v[i][0].end(), cmp);
    sort(v[i][1].begin(), v[i][1].end(), cmp);
  }
  
  if (maxc && maxd) ans = maxc + maxd;
  
  for (int i = 1; i < c; i++) {
    if (v[i][0].empty()) continue;
    // Check empty vector invariant
    check_empty_vector_invariant(v[i][0]);
    int x = v[i][0][0];
    update(1, 1, N, i, 0, 0);
    if (v[i][0].size() > 1) update(1, 1, N, i, v[i][0][1], 0);
    int y = query(1, 1, N, 1, c - i, 0);
    if (y) ans = max(ans, x + y);
    update(1, 1, N, i, v[i][0][0], 0);
  }
  
  for (int i = 1; i < d; i++) {
    if (v[i][1].empty()) continue;
    // Check empty vector invariant
    check_empty_vector_invariant(v[i][1]);
    int x = v[i][1][0];
    update(1, 1, N, i, 0, 1);
    if (v[i][1].size() > 1) update(1, 1, N, i, v[i][1][1], 1);
    int y = query(1, 1, N, 1, d - i, 1);
    if (y) ans = max(ans, x + y);
    update(1, 1, N, i, v[i][1][0], 1);
  }
  
  cout << ans;
  return 0;
}
```

### Explanation of Integration

- **Sorting Check**: Triggered when the inputs suggest a large number of sorting operations (for `c` or `d` above a certain threshold).
- **Loop Check**: Triggered when the loop would iterate over excessive potential costs, i.e., when `c` or `d` are high.
- **Empty Vector Check**: Triggered specifically when a vector is empty, indicating an inefficient condition if reached frequently.

These checks are placed at points in the program where they can effectively detect specific performance bottlenecks without being in tight loops that would degrade performance.

