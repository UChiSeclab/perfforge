system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100005, MIN = -3 * N;
struct Value {
  int first, second, first_index, second_index;
  Value() : first(MIN), second(MIN), first_index(-1), second_index(-1) {}
};
Value beauty[N][2];
void updateValue(Value &value, int new_value, int index) {
  if (new_value > value.first) {
    value.second = value.first;
    value.second_index = value.first_index;
    value.first = new_value;
    value.first_index = index;
  } else if (new_value > value.second) {
    value.second = new_value;
    value.second_index = index;
  }
}
int main() {
  int n, cd[2];
  scanf("%d %d %d", &n, &cd[0], &cd[1]);
  for (int i = 0; i < n; ++i) {
    int b, p;
    char c;
    scanf("%d %d %c", &b, &p, &c);
    updateValue(beauty[p][c - 'C'], b, p);
  }
  for (int k = 0; k < 2; ++k) {
    for (int i = 1; i <= cd[k]; ++i) {
      updateValue(beauty[i][k], beauty[i - 1][k].first,
                  beauty[i - 1][k].first_index);
      updateValue(beauty[i][k], beauty[i - 1][k].second,
                  beauty[i - 1][k].second_index);
    }
  }
  int res = 0;
  for (int k = 0; k < 2; ++k) {
    for (int i = 0; i <= cd[k]; ++i) {
      res = max(res, beauty[i][k].first + beauty[cd[k ^ 1]][k ^ 1].first);
      if (beauty[i][k].first_index != beauty[cd[k] - i][k].first_index) {
        res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].first);
      } else {
        res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].second);
      }
    }
  }
  printf("%d\n", res);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 100000 100000
100000 100000 C
100000 100000 D


(G.2) Fast Input

2 2 1
1 1 C
1 1 D


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100005, MIN = -3 * N; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct Value { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int first, second, first_index, second_index; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  Value() : first(MIN), second(MIN), first_index(-1), second_index(-1) {} /* line 6 slow_hit_count: 200010, fast_hit_count: 200010 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
Value beauty[N][2]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void updateValue(Value &value, int new_value, int index) { /* line 9 slow_hit_count: 400002, fast_hit_count: 8 */
  if (new_value > value.first) { /* line 10 slow_hit_count: 400002, fast_hit_count: 8 */
    value.second = value.first; /* line 11 slow_hit_count: 2, fast_hit_count: 3 */
    value.second_index = value.first_index; /* line 12 slow_hit_count: 2, fast_hit_count: 3 */
    value.first = new_value; /* line 13 slow_hit_count: 2, fast_hit_count: 3 */
    value.first_index = index; /* line 14 slow_hit_count: 2, fast_hit_count: 3 */
  } else if (new_value > value.second) { /* line 15 slow_hit_count: 400000, fast_hit_count: 5 */
    value.second = new_value; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    value.second_index = index; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 400002, fast_hit_count: 8 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int n, cd[2]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d %d", &n, &cd[0], &cd[1]); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 23 slow_hit_count: 3, fast_hit_count: 3 */
    int b, p; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    char c; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %c", &b, &p, &c); /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
    updateValue(beauty[p][c - 'C'], b, p); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int k = 0; k < 2; ++k) { /* line 29 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 1; i <= cd[k]; ++i) { /* line 30 slow_hit_count: 200002, fast_hit_count: 5 */
      updateValue(beauty[i][k], beauty[i - 1][k].first, /* line 31 slow_hit_count: 200000, fast_hit_count: 3 */
                  beauty[i - 1][k].first_index); /* line 32 slow_hit_count: 200000, fast_hit_count: 3 */
      updateValue(beauty[i][k], beauty[i - 1][k].second, /* line 33 slow_hit_count: 200000, fast_hit_count: 3 */
                  beauty[i - 1][k].second_index); /* line 34 slow_hit_count: 200000, fast_hit_count: 3 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int k = 0; k < 2; ++k) { /* line 38 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 0; i <= cd[k]; ++i) { /* line 39 slow_hit_count: 200004, fast_hit_count: 7 */
      res = max(res, beauty[i][k].first + beauty[cd[k ^ 1]][k ^ 1].first); /* line 40 slow_hit_count: 200002, fast_hit_count: 5 */
      if (beauty[i][k].first_index != beauty[cd[k] - i][k].first_index) { /* line 41 slow_hit_count: 200002, fast_hit_count: 5 */
        res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].first); /* line 42 slow_hit_count: 4, fast_hit_count: 4 */
      } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].second); /* line 44 slow_hit_count: 199998, fast_hit_count: 1 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", res); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the provided code and determine the performance-characterizing invariants that can lead to a slowdown, let's first break down the expensive or inefficient code segments by comparing the hit counts from the slow and fast runs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The function `updateValue` (lines 9-19) gets called significantly more in the slow run (400,002 hits) compared to the fast run (8 hits).
   - The nested loop (lines 29-35) is executed 200,002 times in the slow run, showing a stark contrast to just 5 times in the fast run.
   - The loop starting at line 38 is also heavily hit in the slow run with similar counts to the nested loops.

2. **Code Structure**:
   - The nested loops iterate over a range defined by `cd[k]`, which represents the number of coins and diamonds.
   - The `updateValue` function updates values based on the cost (`p`) of fountains and their beauty, and it gets called extensively for each increment within these loops.

3. **Interaction with Data Structures**:
   - The `beauty` 2D array structures are updated frequently based on the `p` value of each fountain, which causes heavy iteration when `p` values are large (like 100,000).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can generate the following performance-characterizing invariants:

1. **High Cost Value Iteration**:
   - **Natural Language Description**: "If the maximum cost of any fountain approaches the upper limit (e.g., 100,000), the program may enter a slow path due to excessive iteration over possible cost values."
   - **Reasoning**: The slow input with maximum cost values triggers an extensive loop iteration, as each possible cost up to 100,000 is considered for potential updates.

2. **Duplicated Cost Consideration**:
   - **Natural Language Description**: "If the number of coins and diamonds both approach their upper limits, the nested loop computations may become excessive due to repeated updates for each cost type."
   - **Reasoning**: Both loops iterate over maximum possible values for both coin and diamond types, leading to numerous redundant updates in the `beauty` array.

3. **Excessive Function Calls**:
   - **Natural Language Description**: "If the cost values frequently require updates with the same or higher beauty scores, the program may perform inefficiently due to repeated calls to the update function."
   - **Reasoning**: With high frequency of `updateValue` calls at maximum input constraints, the updates become a bottleneck particularly when costs do not vary significantly.

### Conclusion

These performance invariants can guide optimizations or validations to ensure that the program does not degrade significantly under high input constraints or specific input scenarios. By recognizing these patterns, one can proactively test and refactor the program to handle potential slowdowns in a more efficient manner.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input

The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers bi and pi (1 ≤ bi, pi ≤ 100 000) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output

Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Examples

Input

3 7 6
10 8 C
4 3 C
5 6 D


Output

9


Input

2 4 5
2 5 C
2 1 D


Output

0


Input

3 10 10
5 5 C
5 5 C
10 11 D


Output

10

Note

In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins. 

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived earlier as runtime checks in C++ code. We'll first provide the checker functions, followed by their integration into the main program.

### Phase 3: Implementing Natural Language Invariants as C++ Checker Code

For each invariant derived in natural language, we will create a corresponding checker function in C++.

1. **High Cost Value Iteration**:
   ```cpp
   void check_high_cost_invariant(int cost, int max_cost) {
       if (cost >= max_cost) {
           cerr << "Warning: High cost invariant triggered - excessive iterations over maximum cost values!" << endl;
           abort();
       }
   }
   ```

2. **Duplicated Cost Consideration**:
   ```cpp
   void check_duplicate_cost_invariant(int coins, int diamonds, int max_threshold) {
       if (coins >= max_threshold && diamonds >= max_threshold) {
           cerr << "Warning: Duplicate cost invariant triggered - excessive loop iterations for coins and diamonds!" << endl;
           abort();
       }
   }
   ```

3. **Excessive Function Calls**:
   ```cpp
   void check_excessive_function_calls_invariant(int update_count, int threshold) {
       if (update_count >= threshold) {
           cerr << "Warning: Excessive function calls invariant triggered - frequent updates causing performance issues!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, let's integrate these checker functions into the provided C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100005, MIN = -3 * N;

// Structure to hold two maximum values with indices
struct Value {
    int first, second, first_index, second_index;
    Value() : first(MIN), second(MIN), first_index(-1), second_index(-1) {}
};

Value beauty[N][2];

// Update function that might be called excessively
void updateValue(Value &value, int new_value, int index) {
    if (new_value > value.first) {
        value.second = value.first;
        value.second_index = value.first_index;
        value.first = new_value;
        value.first_index = index;
    } else if (new_value > value.second) {
        value.second = new_value;
        value.second_index = index;
    }
}

// Checker for high cost iteration
void check_high_cost_invariant(int cost, int max_cost) {
    if (cost >= max_cost) {
        cerr << "Warning: High cost invariant triggered - excessive iterations over maximum cost values!" << endl;
        abort();
    }
}

// Checker for duplicated cost consideration
void check_duplicate_cost_invariant(int coins, int diamonds, int max_threshold) {
    if (coins >= max_threshold && diamonds >= max_threshold) {
        cerr << "Warning: Duplicate cost invariant triggered - excessive loop iterations for coins and diamonds!" << endl;
        abort();
    }
}

// Checker for excessive function calls
void check_excessive_function_calls_invariant(int update_count, int threshold) {
    if (update_count >= threshold) {
        cerr << "Warning: Excessive function calls invariant triggered - frequent updates causing performance issues!" << endl;
        abort();
    }
}

int main() {
    int n, cd[2];
    scanf("%d %d %d", &n, &cd[0], &cd[1]);

    // Insert checker for duplicate cost consideration 
    check_duplicate_cost_invariant(cd[0], cd[1], 100000);

    for (int i = 0; i < n; ++i) {
        int b, p;
        char c;
        scanf("%d %d %c", &b, &p, &c);
        // Check for high cost value iteration
        check_high_cost_invariant(p, 100000);
        updateValue(beauty[p][c - 'C'], b, p);
    }

    int update_count = 0;

    for (int k = 0; k < 2; ++k) {
        for (int i = 1; i <= cd[k]; ++i) {
            updateValue(beauty[i][k], beauty[i - 1][k].first, beauty[i - 1][k].first_index);
            updateValue(beauty[i][k], beauty[i - 1][k].second, beauty[i - 1][k].second_index);
            update_count += 2;  // Increment the update count for each call
        }
    }

    // Check for excessive function calls
    check_excessive_function_calls_invariant(update_count, 200000);

    int res = 0;
    for (int k = 0; k < 2; ++k) {
        for (int i = 0; i <= cd[k]; ++i) {
            res = max(res, beauty[i][k].first + beauty[cd[k ^ 1]][k ^ 1].first);
            if (beauty[i][k].first_index != beauty[cd[k] - i][k].first_index) {
                res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].first);
            } else {
                res = max(res, beauty[i][k].first + beauty[cd[k] - i][k].second);
            }
        }
    }

    printf("%d\n", res);
}
```

### Explanation
- **High Cost Value Iteration Check**: This checker ensures that the program doesn't excessively iterate over high-cost values, which is checked during input parsing.
- **Duplicated Cost Consideration Check**: This is placed after reading the coin and diamond counts to ensure that both are not excessively large, which could cause many iterations in the nested loops.
- **Excessive Function Calls Check**: After the loop updating the `beauty` array, this checker ensures that the number of updates (function calls) does not exceed a defined threshold, indicating a performance bottleneck.

These checks are positioned strategically to avoid adding overhead within the core loops, thus maintaining efficient execution while safeguarding against performance bottlenecks.

