system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = (int)(1e9);
const int DI[] = {0, 1, 0, -1};
const int DJ[] = {1, 0, -1, 0};
const int N_MAX = 100;
const int X_MAX = 100;
const int Y_MAX = 100;
int n, d;
int a[N_MAX - 2];
int x[N_MAX];
int y[N_MAX];
int dp[2 * Y_MAX + 1][2 * X_MAX + 1];
void solve() {
  for (int i = 0; i < (n); ++i) x[i] += X_MAX;
  for (int i = 0; i < (n); ++i) y[i] += Y_MAX;
  fill(dp[0], dp[0] + (2 * Y_MAX + 1) * (2 * X_MAX + 1), INF);
  queue<pair<int, int> > q;
  q.push(pair<int, int>(x[0], y[0]));
  dp[y[0]][x[0]] = 0;
  while (!q.empty()) {
    pair<int, int> e = q.front();
    q.pop();
    int j = e.first;
    int i = e.second;
    int t = 0;
    for (int k = 0; k < (n - 2); ++k)
      if (x[k + 1] == j && y[k + 1] == i) t = a[k];
    for (int k = 0; k < 4; ++k) {
      int u = j + DJ[k];
      int v = i + DI[k];
      if (u < 0 || u > 2 * X_MAX || v < 0 || v > 2 * Y_MAX) continue;
      if (dp[i][j] + d - t < dp[v][u]) {
        dp[v][u] = dp[i][j] + d - t;
        q.push(pair<int, int>(u, v));
      }
    }
  }
  int ans = dp[y[n - 1]][x[n - 1]];
  cout << ans << endl;
}
int main() {
  cin >> n >> d;
  for (int i = 0; i < (n - 2); ++i) cin >> a[i];
  for (int i = 0; i < (n); ++i) cin >> x[i] >> y[i];
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6 1000
1000 1000 1000 1000
0 0
0 -1
1 -1
2 -1
2 0
2 1


(G.2) Fast Input

3 1000
1000
-1 0
0 1
0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)(1e9); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int DI[] = {0, 1, 0, -1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int DJ[] = {1, 0, -1, 0}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int N_MAX = 100; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int X_MAX = 100; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int Y_MAX = 100; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n, d; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int a[N_MAX - 2]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int x[N_MAX]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int y[N_MAX]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int dp[2 * Y_MAX + 1][2 * X_MAX + 1]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); ++i) x[i] += X_MAX; /* line 15 slow_hit_count: 7, fast_hit_count: 4 */
  for (int i = 0; i < (n); ++i) y[i] += Y_MAX; /* line 16 slow_hit_count: 7, fast_hit_count: 4 */
  fill(dp[0], dp[0] + (2 * Y_MAX + 1) * (2 * X_MAX + 1), INF); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  queue<pair<int, int> > q; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  q.push(pair<int, int>(x[0], y[0])); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  dp[y[0]][x[0]] = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 21 slow_hit_count: 50601, fast_hit_count: 40502 */
    pair<int, int> e = q.front(); /* line 22 slow_hit_count: 50600, fast_hit_count: 40501 */
    q.pop(); /* line 23 slow_hit_count: 50600, fast_hit_count: 40501 */
    int j = e.first; /* line 24 slow_hit_count: 50600, fast_hit_count: 40501 */
    int i = e.second; /* line 25 slow_hit_count: 50600, fast_hit_count: 40501 */
    int t = 0; /* line 26 slow_hit_count: 50600, fast_hit_count: 40501 */
    for (int k = 0; k < (n - 2); ++k) /* line 27 slow_hit_count: 253000, fast_hit_count: 81002 */
      if (x[k + 1] == j && y[k + 1] == i) t = a[k]; /* line 28 slow_hit_count: 202400, fast_hit_count: 40501 */
    for (int k = 0; k < 4; ++k) { /* line 29 slow_hit_count: 253000, fast_hit_count: 202505 */
      int u = j + DJ[k]; /* line 30 slow_hit_count: 202400, fast_hit_count: 162004 */
      int v = i + DI[k]; /* line 31 slow_hit_count: 202400, fast_hit_count: 162004 */
      if (u < 0 || u > 2 * X_MAX || v < 0 || v > 2 * Y_MAX) continue; /* line 32 slow_hit_count: 202400, fast_hit_count: 162004 */
      if (dp[i][j] + d - t < dp[v][u]) { /* line 33 slow_hit_count: 201394, fast_hit_count: 161199 */
        dp[v][u] = dp[i][j] + d - t; /* line 34 slow_hit_count: 50599, fast_hit_count: 40500 */
        q.push(pair<int, int>(u, v)); /* line 35 slow_hit_count: 50599, fast_hit_count: 40500 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = dp[y[n - 1]][x[n - 1]]; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> d; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n - 2); ++i) cin >> a[i]; /* line 44 slow_hit_count: 5, fast_hit_count: 2 */
  for (int i = 0; i < (n); ++i) cin >> x[i] >> y[i]; /* line 45 slow_hit_count: 7, fast_hit_count: 4 */
  solve(); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck of the given C code, we will go through the two phases: identifying inefficient code segments and deriving performance-characterizing invariants.

### Phase 1: Identify Inefficient Code Segments

1. **Line-level Hit Count Comparison:**
   - The key difference in line-level hit counts between the slow and fast inputs occurs inside the main loop starting at line 21.
   - Significant differences are noted, especially in the loop conditions and queue operations:
     - Lines 21-25, 27-35 have a much higher hit count for the slow input compared to the fast input, indicating that the loop is iterating significantly more times.

2. **Analysis of Exponential Growth:**
   - The increased hit count suggests an exploration of more paths or states, which likely results from an increased number of accessible positions in the grid.
   - The `while (!q.empty())` loop (line 21) is a breadth-first search (BFS) over possible paths. The nature of the problem suggests that the number of times we revisit or compute distances between stations might be causing the slowdown.
   - The queue operations (lines 22-35) are crucial to this BFS, and more states being pushed to the queue (`q.push`) indicate more paths to evaluate.

3. **Data Structure Interaction:**
   - The `dp` array is used to store the minimum cost to reach a particular grid point. The frequent updates and checks (`dp[v][u]` updates on lines 33-34) indicate that many transitions are being considered.
   - Thus, in the slow scenario, there is a higher occurrence of updates to the `dp` array, suggesting inefficient exploration or redundancy in state transitions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above observations, we derive the following performance-characterizing invariants:

1. **Invariant 1 - Dense Grid Exploration:**
   - **Natural language description:** "If the number of potential paths or states increases significantly, especially in a densely connected grid, the BFS may explore too many possibilities, leading to slowdowns."
   - **Abstracted condition:** The slowdown is likely to occur when the number of states pushed into the queue grows too large due to dense station placement or closely aligned pathways.

2. **Invariant 2 - Frequent Re-evaluation of States:**
   - **Natural language description:** "When many stations are closely packed, the algorithm may repeatedly re-evaluate multiple states, increasing the time complexity."
   - **Abstracted condition:** The program slows down when the `dp` array is updated excessively due to densely packed stations that allow multiple short-distance transitions.

3. **Invariant 3 - High Redundancy in Transition Evaluations:**
   - **Natural language description:** "If transitions between stations result in frequent redundant evaluations, the performance may degrade, especially if the BFS revisits many points."
   - **Abstracted condition:** Slow performance is triggered when there are many revisits to grid points or states due to highly interconnected station placements.

These invariants reflect the potential causes of slow performance without relying on specific numeric values from the slow input. They focus on the density and interconnectivity of stations, which lead to increased path exploration and state re-evaluation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants in C++

For each natural language invariant derived earlier, we will write a checker function in C++ to identify potential performance bottlenecks at runtime.

**Invariant 1 - Dense Grid Exploration:**
- **Checker Code:**
  ```cpp
  void check_dense_grid_invariant(const queue<pair<int, int>>& q, int threshold) {
      if (q.size() > threshold) {
          cerr << "Warning: Performance bottleneck condition triggered - dense grid exploration!" << endl;
          abort();
      }
  }
  ```

**Invariant 2 - Frequent Re-evaluation of States:**
- **Checker Code:**
  ```cpp
  void check_state_revaluation_invariant(int dp_updates, int threshold) {
      if (dp_updates > threshold) {
          cerr << "Warning: Performance bottleneck condition triggered - frequent state re-evaluation!" << endl;
          abort();
      }
  }
  ```

**Invariant 3 - High Redundancy in Transition Evaluations:**
- **Checker Code:**
  ```cpp
  void check_transition_redundancy_invariant(int transition_checks, int threshold) {
      if (transition_checks > threshold) {
          cerr << "Warning: Performance bottleneck condition triggered - redundant transition evaluations!" << endl;
          abort();
      }
  }
  ```

### Phase 4: Integrating Checkers into the Original C++ Code

We will now insert these checker functions at strategic points in the program to assess the conditions leading to performance bottlenecks. Here's the instrumented code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = (int)(1e9);
const int DI[] = {0, 1, 0, -1};
const int DJ[] = {1, 0, -1, 0};
const int N_MAX = 100;
const int X_MAX = 100;
const int Y_MAX = 100;
int n, d;
int a[N_MAX - 2];
int x[N_MAX];
int y[N_MAX];
int dp[2 * Y_MAX + 1][2 * X_MAX + 1];

// Checker functions
void check_dense_grid_invariant(const queue<pair<int, int>>& q, int threshold) {
    if (q.size() > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense grid exploration!" << endl;
        abort();
    }
}

void check_state_revaluation_invariant(int dp_updates, int threshold) {
    if (dp_updates > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent state re-evaluation!" << endl;
        abort();
    }
}

void check_transition_redundancy_invariant(int transition_checks, int threshold) {
    if (transition_checks > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant transition evaluations!" << endl;
        abort();
    }
}

void solve() {
    for (int i = 0; i < (n); ++i) x[i] += X_MAX;
    for (int i = 0; i < (n); ++i) y[i] += Y_MAX;
    fill(dp[0], dp[0] + (2 * Y_MAX + 1) * (2 * X_MAX + 1), INF);

    queue<pair<int, int>> q;
    q.push(pair<int, int>(x[0], y[0]));
    dp[y[0]][x[0]] = 0;

    int dp_updates = 0;  // Track updates to dp array
    int transition_checks = 0;  // Track transition evaluations

    while (!q.empty()) {
        pair<int, int> e = q.front();
        q.pop();

        int j = e.first;
        int i = e.second;
        int t = 0;

        for (int k = 0; k < (n - 2); ++k) {
            if (x[k + 1] == j && y[k + 1] == i) t = a[k];
        }

        for (int k = 0; k < 4; ++k) {
            int u = j + DJ[k];
            int v = i + DI[k];

            if (u < 0 || u > 2 * X_MAX || v < 0 || v > 2 * Y_MAX) continue;
            transition_checks++; // Increment for each transition check

            if (dp[i][j] + d - t < dp[v][u]) {
                dp[v][u] = dp[i][j] + d - t;
                q.push(pair<int, int>(u, v));
                dp_updates++; // Increment when updating dp array
            }
        }

        // Call checkers inside the loop but outside performance-critical sections
        check_dense_grid_invariant(q, 10000);    // Example threshold for queue size
        check_state_revaluation_invariant(dp_updates, 20000); // Example threshold for dp updates
        check_transition_redundancy_invariant(transition_checks, 50000); // Example threshold for transition checks
    }

    int ans = dp[y[n - 1]][x[n - 1]];
    cout << ans << endl;
}

int main() {
    cin >> n >> d;
    for (int i = 0; i < (n - 2); ++i) cin >> a[i];
    for (int i = 0; i < (n); ++i) cin >> x[i] >> y[i];
    solve();
    return 0;
}
```

### Explanation
1. **Checkers Overview:**
   - These checkers are placed within the main loop to catch performance issues early without inserting them into the inner, performance-critical sections.
   
2. **Thresholds:**
   - The thresholds are hypothetical and should be tuned based on profiling data and expected input sizes. The current values are illustrative and based on typical constraints in `n <= 100`.

3. **Abort Usage:**
   - The `abort()` function is used to halt execution upon detecting a performance issue, useful for testing or fuzzing environments to catch problematic cases. 

This instrumented code should help identify the conditions under which the program experiences performance bottlenecks due to dense grid exploration, frequent state re-evaluation, and redundant transition evaluations.

