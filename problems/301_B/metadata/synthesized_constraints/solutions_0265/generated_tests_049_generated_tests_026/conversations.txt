system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 502;
int n, d, a[N];
int x[N], y[N];
map<pair<int, int>, int> dis, mp;
struct Nod {
  int x, y, dis;
  bool operator<(const Nod& o) const { return dis > o.dis; }
};
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};
void dijkstra() {
  priority_queue<Nod> q;
  q.push((Nod){x[n], y[n], 0});
  dis[make_pair(x[n], y[n])] = 0;
  while (q.size()) {
    Nod tmp = q.top();
    q.pop();
    int X = tmp.x, Y = tmp.y;
    if (tmp.dis > d * (abs(x[1] - x[n]) + abs(y[1] - y[n]))) continue;
    if (tmp.dis > dis[make_pair(X, Y)] || X < -100 || X > 100 || Y < -100 ||
        Y > 100)
      continue;
    if (X == x[1] && Y == y[1]) break;
    for (int i = 0; i < 4; i++) {
      int nx = X + dx[i], ny = Y + dy[i];
      int v = d + max(0, tmp.dis - mp[make_pair(X, Y)]);
      if (!dis.count(make_pair(nx, ny)) || dis[make_pair(nx, ny)] > v) {
        dis[make_pair(nx, ny)] = v;
        q.push((Nod){nx, ny, v});
      }
    }
  }
  printf("%d\n", dis[make_pair(x[1], y[1])]);
}
int main() {
  scanf("%d%d", &n, &d);
  for (int i = 2; i <= n - 1; i++) scanf("%d", &a[i]);
  for (int i = 1; i <= n; i++) scanf("%d%d", &x[i], &y[i]);
  for (int i = 2; i < n; i++) mp[make_pair(x[i], y[i])] = a[i];
  dijkstra();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 1000
759 222 589 423 947 507 31 427
0 -71
-31 -53
24 28
-11 -65
-59 -49
-42 -79
85 -71
-60 -17
28 66
74 2


(G.2) Fast Input

10 1000
759 222 589 423 947 507 31 427
0 -48
-31 -53
24 28
-11 -65
-59 -49
-42 -79
85 -71
-60 -17
28 66
74 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 502; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, d, a[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int x[N], y[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, int>, int> dis, mp; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct Nod { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y, dis; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const Nod& o) const { return dis > o.dis; } /* line 9 slow_hit_count: 219273, fast_hit_count: 178150 */
}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int dx[4] = {-1, 1, 0, 0}; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int dy[4] = {0, 0, -1, 1}; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void dijkstra() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  priority_queue<Nod> q; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  q.push((Nod){x[n], y[n], 0}); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  dis[make_pair(x[n], y[n])] = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  while (q.size()) { /* line 17 slow_hit_count: 25219, fast_hit_count: 20528 */
    Nod tmp = q.top(); /* line 18 slow_hit_count: 25219, fast_hit_count: 20528 */
    q.pop(); /* line 19 slow_hit_count: 25219, fast_hit_count: 20528 */
    int X = tmp.x, Y = tmp.y; /* line 20 slow_hit_count: 25219, fast_hit_count: 20528 */
    if (tmp.dis > d * (abs(x[1] - x[n]) + abs(y[1] - y[n]))) continue; /* line 21 slow_hit_count: 25568, fast_hit_count: 20819 */
    if (tmp.dis > dis[make_pair(X, Y)] || X < -100 || X > 100 || Y < -100 || /* line 22 slow_hit_count: 50164, fast_hit_count: 40816 */
        Y > 100) /* line 23 slow_hit_count: 24945, fast_hit_count: 20288 */
      continue; /* line 24 slow_hit_count: 349, fast_hit_count: 291 */
    if (X == x[1] && Y == y[1]) break; /* line 25 slow_hit_count: 24870, fast_hit_count: 20237 */
    for (int i = 0; i < 4; i++) { /* line 26 slow_hit_count: 124345, fast_hit_count: 101180 */
      int nx = X + dx[i], ny = Y + dy[i]; /* line 27 slow_hit_count: 99476, fast_hit_count: 80944 */
      int v = d + max(0, tmp.dis - mp[make_pair(X, Y)]); /* line 28 slow_hit_count: 99476, fast_hit_count: 80944 */
      if (!dis.count(make_pair(nx, ny)) || dis[make_pair(nx, ny)] > v) { /* line 29 slow_hit_count: 99476, fast_hit_count: 80944 */
        dis[make_pair(nx, ny)] = v; /* line 30 slow_hit_count: 25421, fast_hit_count: 20738 */
        q.push((Nod){nx, ny, v}); /* line 31 slow_hit_count: 25421, fast_hit_count: 20738 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", dis[make_pair(x[1], y[1])]); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &d); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= n - 1; i++) scanf("%d", &a[i]); /* line 39 slow_hit_count: 9, fast_hit_count: 9 */
  for (int i = 1; i <= n; i++) scanf("%d%d", &x[i], &y[i]); /* line 40 slow_hit_count: 11, fast_hit_count: 11 */
  for (int i = 2; i < n; i++) mp[make_pair(x[i], y[i])] = a[i]; /* line 41 slow_hit_count: 9, fast_hit_count: 9 */
  dijkstra(); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided code, input constraints, and hit count information, let's analyze the performance and derive the performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Analysis**: 
   - The `while` loop starting at line 17 is the main workhorse of the `dijkstra()` function, and it's hit significantly more often in the slow input than the fast input, indicating this as a critical section affecting performance.
   - The loop on line 26 iterates over four directions, and the lines within this loop (27 to 31) are executed considerably more for the slow input. This suggests that the surrounding loop structure and conditions are central to the slowdown.
   - The priority queue top access (line 18) and pop operation (line 19) occur more frequently with slow input, meaning more nodes are processed.

2. **Data Structure Usage**: 
   - The priority queue is used for Dijkstra's algorithm, where nodes are repeatedly pushed and popped based on their "distance" value.
   - The map `dis` is used to store the minimal distance to each station and is accessed frequently.

3. **Potential Bottlenecks**:
   - Higher hit counts of lines 21 and 22 suggest that the conditions filtering unnecessary processing are less effective for slow input, allowing more nodes to enter the queue.
   - Having additional points processed means the algorithm covers more paths due to more significant variations in distances or reward values at intermediary stations.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the potential conditions under which the program may exhibit significant slowdowns:

1. **High Number of Nodes Processed**:
   - **Natural Language Invariant**: "If the path complexity between the start and end stations is high, resulting in many potential paths needing evaluation, the program may slow down significantly."
   - **Explanation**: Variations in station locations or rewards at intermediary points can increase the number of paths the algorithm needs to process.

2. **Inefficient Use of Station Rewards**:
   - **Natural Language Invariant**: "When rewards at intermediary clock stations are positioned such that multiple potential paths are equally viable, leading to excessive exploration, the performance may degrade."
   - **Explanation**: If the rewards don't significantly steer the decision-making, many equivalent paths may be explored before the optimal path is found.

3. **Dense Station Clusters**:
   - **Natural Language Invariant**: "If many stations are densely clustered or placed close together such that distances and potential gains need reevaluation frequently, performance may decrease."
   - **Explanation**: Close proximity of stations can cause many small movements, leading to frequent updates and considerations in the priority queue.

These conditions capture the essence of where problems could arise performance-wise, abstracting away from specific numeric values and instead focusing on input patterns and algorithmic behavior. These invariants provide a framework for understanding how different inputs might trigger slow execution paths in the program.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Checks

Based on the performance characteristics identified previously, we'll implement the checks to detect potential bottlenecks.

1. **High Number of Nodes Processed**:
   - We need to monitor the number of nodes being processed. If it exceeds a certain threshold, it could indicate excessive path evaluation.

```cpp
void check_node_processing_invariant(int nodesProcessed) {
    if (nodesProcessed > 50000) {  // Arbitrary threshold for node processing
        cerr << "Warning: Performance bottleneck condition triggered - excessive nodes being processed!" << endl;
        abort();
    }
}
```

2. **Inefficient Use of Station Rewards**:
   - We should check if the algorithm is processing too many equivalent path costs without making significant progress.

```cpp
void check_equivalent_paths_invariant(int equivalentPaths) {
    if (equivalentPaths > 20000) {  // Arbitrary threshold for equivalent paths
        cerr << "Warning: Performance bottleneck condition triggered - excessive equivalent paths!" << endl;
        abort();
    }
}
```

3. **Dense Station Clusters**:
   - This check ensures that if stations are densely packed, and too many small movements are considered, we flag it.

```cpp
void check_dense_station_clusters(int stationMoves) {
    if (stationMoves > 100000) {  // Arbitrary threshold for station moves
        cerr << "Warning: Performance bottleneck condition triggered - dense station clusters causing excessive moves!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original C++ Program

Now let's integrate the above checks into the provided C++ program. We will place checks effectively around the loop structures in the `dijkstra()` function, ensuring they do not degrade performance further.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 502;
int n, d, a[N];
int x[N], y[N];
map<pair<int, int>, int> dis, mp;
struct Nod {
    int x, y, dis;
    bool operator<(const Nod& o) const { return dis > o.dis; }
};
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

void check_node_processing_invariant(int nodesProcessed) {
    if (nodesProcessed > 50000) {  // Arbitrary threshold for node processing
        cerr << "Warning: Performance bottleneck condition triggered - excessive nodes being processed!" << endl;
        abort();
    }
}

void check_equivalent_paths_invariant(int equivalentPaths) {
    if (equivalentPaths > 20000) {  // Arbitrary threshold for equivalent paths
        cerr << "Warning: Performance bottleneck condition triggered - excessive equivalent paths!" << endl;
        abort();
    }
}

void check_dense_station_clusters(int stationMoves) {
    if (stationMoves > 100000) {  // Arbitrary threshold for station moves
        cerr << "Warning: Performance bottleneck condition triggered - dense station clusters causing excessive moves!" << endl;
        abort();
    }
}

void dijkstra() {
    priority_queue<Nod> q;
    q.push((Nod){x[n], y[n], 0});
    dis[make_pair(x[n], y[n])] = 0;

    int nodesProcessed = 0;
    int equivalentPaths = 0;
    int stationMoves = 0;

    while (q.size()) {
        Nod tmp = q.top();
        q.pop();
        int X = tmp.x, Y = tmp.y;
        nodesProcessed++;
        check_node_processing_invariant(nodesProcessed);

        if (tmp.dis > d * (abs(x[1] - x[n]) + abs(y[1] - y[n]))) continue;
        if (tmp.dis > dis[make_pair(X, Y)] || X < -100 || X > 100 || Y < -100 || Y > 100)
            continue;
        if (X == x[1] && Y == y[1]) break;
        for (int i = 0; i < 4; i++) {
            int nx = X + dx[i], ny = Y + dy[i];
            int v = d + max(0, tmp.dis - mp[make_pair(X, Y)]);
            stationMoves++;
            check_dense_station_clusters(stationMoves);

            if (!dis.count(make_pair(nx, ny)) || dis[make_pair(nx, ny)] > v) {
                dis[make_pair(nx, ny)] = v;
                q.push((Nod){nx, ny, v});
                equivalentPaths++;
                check_equivalent_paths_invariant(equivalentPaths);
            }
        }
    }
    printf("%d\n", dis[make_pair(x[1], y[1])]);
}

int main() {
    scanf("%d%d", &n, &d);
    for (int i = 2; i <= n - 1; i++) scanf("%d", &a[i]);
    for (int i = 1; i <= n; i++) scanf("%d%d", &x[i], &y[i]);
    for (int i = 2; i < n; i++) mp[make_pair(x[i], y[i])] = a[i];
    dijkstra();
}
```

### Comments on the Integration

- **Node Processing Check**: `check_node_processing_invariant()` is called as nodes are processed to ensure excessive nodes aren't being evaluated.
- **Equivalent Paths Check**: `check_equivalent_paths_invariant()` is invoked when nodes are added to the queue with equivalent path costs.
- **Dense Station Clusters Check**: `check_dense_station_clusters()` is placed inside the loop where potential small movements are determined.

These checks help identify performance bottlenecks dynamically during program execution, assisting in diagnosing and optimizing the code further.

