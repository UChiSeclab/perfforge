system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[102], x[102], y[102];
int n, d;
bool vis[102];
int dist(int a, int b) { return abs(x[a] - x[b]) + abs(y[a] - y[b]); }
bool first(long long val) {
  priority_queue<pair<long long, int> > q;
  q.push(make_pair(val, 1));
  memset(vis, false, sizeof(vis));
  while (!q.empty()) {
    pair<long long, int> now = q.top();
    q.pop();
    if (vis[now.second]) continue;
    vis[now.second] = true;
    if (now.second == n) return true;
    for (int i = 1; i <= n; i++) {
      if (now.first >= d * dist(now.second, i))
        q.push(make_pair(now.first - d * dist(now.second, i) + a[i], i));
    }
  }
  return false;
}
int main() {
  int i, j;
  scanf("%d", &n);
  scanf("%d", &d);
  for (i = 2; i < n; i++) scanf("%d", &a[i]);
  for (i = 1; i <= n; i++) {
    scanf("%d", &x[i]);
    scanf("%d", &y[i]);
  }
  long long lo = 0, hi = (long long)1e15;
  while (hi - lo > 1) {
    long long mid = (hi + lo) / 2;
    if (first(mid))
      hi = mid;
    else
      lo = mid;
  }
  cout << hi << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 1211
1 5 7 1000 1000 1000 1000 1000 1000 1000
1 1
5 5
3 4
4 3
0 1
0 2
0 5
0 7
1 0
3 0
8 0
10 10


(G.2) Fast Input

3 1000
1000
1 0
2 2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[102], x[102], y[102]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[102]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dist(int a, int b) { return abs(x[a] - x[b]) + abs(y[a] - y[b]); } /* line 6 slow_hit_count: 12975, fast_hit_count: 282 */
bool first(long long val) { /* line 7 slow_hit_count: 50, fast_hit_count: 50 */
  priority_queue<pair<long long, int> > q; /* line 8 slow_hit_count: 100, fast_hit_count: 100 */
  q.push(make_pair(val, 1)); /* line 9 slow_hit_count: 50, fast_hit_count: 50 */
  memset(vis, false, sizeof(vis)); /* line 10 slow_hit_count: 50, fast_hit_count: 50 */
  while (!q.empty()) { /* line 11 slow_hit_count: 5974, fast_hit_count: 150 */
    pair<long long, int> now = q.top(); /* line 12 slow_hit_count: 5964, fast_hit_count: 144 */
    q.pop(); /* line 13 slow_hit_count: 5964, fast_hit_count: 144 */
    if (vis[now.second]) continue; /* line 14 slow_hit_count: 5964, fast_hit_count: 144 */
    vis[now.second] = true; /* line 15 slow_hit_count: 590, fast_hit_count: 94 */
    if (now.second == n) return true; /* line 16 slow_hit_count: 590, fast_hit_count: 94 */
    for (int i = 1; i <= n; i++) { /* line 17 slow_hit_count: 7150, fast_hit_count: 200 */
      if (now.first >= d * dist(now.second, i)) /* line 18 slow_hit_count: 6600, fast_hit_count: 150 */
        q.push(make_pair(now.first - d * dist(now.second, i) + a[i], i)); /* line 19 slow_hit_count: 6375, fast_hit_count: 132 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 22 slow_hit_count: 10, fast_hit_count: 6 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &d); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 2; i < n; i++) scanf("%d", &a[i]); /* line 28 slow_hit_count: 11, fast_hit_count: 2 */
  for (i = 1; i <= n; i++) { /* line 29 slow_hit_count: 13, fast_hit_count: 4 */
    scanf("%d", &x[i]); /* line 30 slow_hit_count: 12, fast_hit_count: 3 */
    scanf("%d", &y[i]); /* line 31 slow_hit_count: 12, fast_hit_count: 3 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  long long lo = 0, hi = (long long)1e15; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (hi - lo > 1) { /* line 34 slow_hit_count: 51, fast_hit_count: 51 */
    long long mid = (hi + lo) / 2; /* line 35 slow_hit_count: 50, fast_hit_count: 50 */
    if (first(mid)) /* line 36 slow_hit_count: 50, fast_hit_count: 50 */
      hi = mid; /* line 37 slow_hit_count: 40, fast_hit_count: 44 */
    else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mid; /* line 39 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << hi << endl; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, let's conduct a two-phase analysis as specified:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts**:
   - The line-level hit counts reveal significant differences between the slow and fast inputs, especially within the `first` function.
   - The `dist` function (line 6) was called 12,975 times for the slow input compared to just 282 times for the fast input.
   - The loop starting at line 11 in the `first` function shows 5,974 hits for the slow input versus 150 for the fast input.
   - The loop at line 17 has 7,150 iterations for the slow input versus 200 for the fast input.

2. **Pinpoint Lines or Functions with High Hit Disparity**:
   - The `dist` function is heavily invoked, indicating that distance calculations are a significant performance factor.
   - The loops within `first` (lines 11-21) are executed far more frequently with the slow input. Specifically, the inner loop (lines 17-19) suggests that many potential paths are evaluated between stations, which could be costly in terms of distance calculations and priority queue operations.

3. **Inferences on Data Structures and Control Flow**:
   - The `priority_queue` is repopulated extensively, and the `dist` function, which computes Manhattan distance, is a critical factor in queue operations.
   - Since the algorithm seems to explore possible paths, a large number of stations with close proximity (or particular geometric configurations) can lead to extensive evaluations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the potential performance-characterizing invariants:

1. **Invariant on Path Exploration**:
   - **Natural Language Description**: "If the game involves stations that are closely clustered together or have high potential for path overlap, the algorithm may enter a slow path due to extensive exploration of similar paths and repeated distance calculations."

2. **Invariant on Priority Queue Operations**:
   - **Natural Language Description**: "When the number of stations approaches the upper constraint (n close to 100) and they are positioned such that many paths between stations are viable, the priority queue may grow large, leading to a significant number of operations and potential slowdown."

3. **Invariant on Distance Calculations**:
   - **Natural Language Description**: "In scenarios where the Manhattan distances between stations are minimal and require frequent recalculations, performance may degrade due to the high number of computed distances."

By establishing these invariants, we focus on abstract conditions that trigger slow performance, such as station proximity and path density, which correlate with excessive calculations and operations in the algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Yaroslav is playing a game called "Time". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.

A player spends d·dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |xi - xj| + |yi - yj|.

Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).

Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.

Input

The first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.

The second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).

It is guaranteed that no two stations are located at the same point.

Output

In a single line print an integer — the answer to the problem.

Examples

Input

3 1000
1000
0 0
0 1
0 3


Output

2000


Input

3 1000
1000
1 0
1 1
1 2


Output

1000

Solution (C++ code):
{solution}


assistant: Let's proceed with the task in two phases:

### Phase 3: Implement the Invariants as Runtime Checks in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived previously:

1. **Invariant for Path Exploration**:
   ```cpp
   void check_path_exploration_invariant(int n, bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck due to excessive path exploration!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Priority Queue Operations**:
   ```cpp
   void check_priority_queue_invariant(int pq_size, int threshold) {
       if (pq_size > threshold) {
           cerr << "Warning: Performance bottleneck due to large priority queue size!" << endl;
           abort();
       }
   }
   ```

3. **Invariant for Distance Calculations**:
   ```cpp
   void check_distance_calculation_invariant(int dist_calls, int threshold) {
       if (dist_calls > threshold) {
           cerr << "Warning: Performance bottleneck due to excessive distance calculations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the original C++ program. We'll place them at strategic points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[102], x[102], y[102];
int n, d;
bool vis[102];
int dist_call_count = 0; // Counter for distance calculations

int dist(int a, int b) {
    dist_call_count++; // Increment distance calculation counter
    return abs(x[a] - x[b]) + abs(y[a] - y[b]);
}

void check_path_exploration_invariant(int explored_paths, int threshold) {
    if (explored_paths > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive path exploration!" << endl;
        abort();
    }
}

void check_priority_queue_invariant(int pq_size, int threshold) {
    if (pq_size > threshold) {
        cerr << "Warning: Performance bottleneck due to large priority queue size!" << endl;
        abort();
    }
}

void check_distance_calculation_invariant(int dist_calls, int threshold) {
    if (dist_calls > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive distance calculations!" << endl;
        abort();
    }
}

bool first(long long val) {
    priority_queue<pair<long long, int> > q;
    q.push(make_pair(val, 1));
    memset(vis, false, sizeof(vis));

    int explored_paths = 0; // Counter for path exploration

    while (!q.empty()) {
        pair<long long, int> now = q.top();
        q.pop();
        if (vis[now.second]) continue;
        vis[now.second] = true;
        if (now.second == n) return true;
        for (int i = 1; i <= n; i++) {
            if (now.first >= d * dist(now.second, i)) {
                q.push(make_pair(now.first - d * dist(now.second, i) + a[i], i));
            }
        }
        explored_paths++; // Increment the exploration path count
        check_priority_queue_invariant(q.size(), 1000); // Check priority queue size
    }

    check_path_exploration_invariant(explored_paths, 5000); // Check path exploration
    return false;
}

int main() {
    int i, j;
    scanf("%d", &n);
    scanf("%d", &d);

    for (i = 2; i < n; i++) scanf("%d", &a[i]);
    for (i = 1; i <= n; i++) {
        scanf("%d", &x[i]);
        scanf("%d", &y[i]);
    }

    long long lo = 0, hi = (long long)1e15;
    while (hi - lo > 1) {
        long long mid = (hi + lo) / 2;
        dist_call_count = 0; // Reset the distance calculation counter for each iteration
        if (first(mid))
            hi = mid;
        else
            lo = mid;
        check_distance_calculation_invariant(dist_call_count, 10000); // Check distance calculations
    }

    cout << hi << endl;
    return 0;
}
```

### Explanation:

- **Path Exploration Check**: We use `explored_paths` to count the number of paths explored in the `first` function. The check occurs after the while loop completes.
- **Priority Queue Size Check**: We check the size of the priority queue `q` after each new element is potentially added. This ensures we detect situations where the queue grows too large.
- **Distance Calculation Check**: We tally distance calculations in `dist_call_count`, resetting it each iteration of the binary search loop in `main`. A check follows each call to `first` to ensure calculations don't exceed a threshold.

These checks help identify potential performance bottlenecks based on previously identified invariants.

