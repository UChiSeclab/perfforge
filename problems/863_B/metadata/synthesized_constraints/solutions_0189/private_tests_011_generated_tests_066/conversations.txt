system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[120], vis[1200];
int n;
int doit(int x, int y) {
  bool use[120] = {0};
  use[x] = use[y] = 1;
  int tmp = 0;
  for (int i = 1; i <= n; i++) {
    int dif = n;
    if (use[i]) continue;
    for (int j = i + 1; j <= n; j++) {
      if (use[j]) continue;
      if (abs(a[i] - a[j]) < abs(a[i] - a[dif])) {
        dif = j;
      }
    }
    use[i] = 1;
    use[dif] = 1;
    tmp += abs(a[i] - a[dif]);
  }
  return tmp;
}
int main() {
  scanf("%d", &n);
  n *= 2;
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
  sort(a + 1, a + 1 + n);
  int ans = INT_MAX;
  for (int i = 1; i <= n; i++) {
    for (int j = i + 1; j <= n; j++) {
      ans = min(ans, doit(i, j));
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[120], vis[1200]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int doit(int x, int y) { /* line 5 slow_hit_count: 4950, fast_hit_count: 6 */
  bool use[120] = {0}; /* line 6 slow_hit_count: 4950, fast_hit_count: 6 */
  use[x] = use[y] = 1; /* line 7 slow_hit_count: 4950, fast_hit_count: 6 */
  int tmp = 0; /* line 8 slow_hit_count: 4950, fast_hit_count: 6 */
  for (int i = 1; i <= n; i++) { /* line 9 slow_hit_count: 499950, fast_hit_count: 30 */
    int dif = n; /* line 10 slow_hit_count: 495000, fast_hit_count: 24 */
    if (use[i]) continue; /* line 11 slow_hit_count: 495000, fast_hit_count: 24 */
    for (int j = i + 1; j <= n; j++) { /* line 12 slow_hit_count: 13980539, fast_hit_count: 20 */
      if (use[j]) continue; /* line 13 slow_hit_count: 13654370, fast_hit_count: 14 */
      if (abs(a[i] - a[j]) < abs(a[i] - a[dif])) { /* line 14 slow_hit_count: 13214486, fast_hit_count: 6 */
        dif = j; /* line 15 slow_hit_count: 154080, fast_hit_count: 3 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    use[i] = 1; /* line 18 slow_hit_count: 326169, fast_hit_count: 6 */
    use[dif] = 1; /* line 19 slow_hit_count: 326169, fast_hit_count: 6 */
    tmp += abs(a[i] - a[dif]); /* line 20 slow_hit_count: 326169, fast_hit_count: 6 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return tmp; /* line 22 slow_hit_count: 4950, fast_hit_count: 6 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  n *= 2; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]); /* line 27 slow_hit_count: 101, fast_hit_count: 5 */
  sort(a + 1, a + 1 + n); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = INT_MAX; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 30 slow_hit_count: 101, fast_hit_count: 5 */
    for (int j = i + 1; j <= n; j++) { /* line 31 slow_hit_count: 5050, fast_hit_count: 10 */
      ans = min(ans, doit(i, j)); /* line 32 slow_hit_count: 4950, fast_hit_count: 6 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program, we begin by analyzing the line-level hit counts from both the fast and slow inputs. We then derive performance-characterizing invariants that explain under what conditions the program slows down.

### Phase 1: Identifying Expensive Code Segments

1. **Observation of Hit Counts:**
   - The `doit` function is called significantly more times for the slow input (`4950` times) compared to the fast input (`6` times). This is due to the nested loop structure in the `main` function, particularly at lines 30 and 31.
   - Within `doit`, the nested loop at line 12 is a major contributor to the high number of operations, with hit counts reaching `13,980,539` for the slow input, compared to just `20` for the fast input.
   - Lines 14 and 15 within the inner loop of `doit` also experience a significant number of hits (`13,214,486` and `154,080` respectively for the slow input), indicating heavy computation related to finding the minimum absolute difference.

2. **Interaction with Data Structures:**
   - The array `a` is sorted once, and then multiple calculations of absolute differences are performed to minimize instability.
   - The nested loops in `doit` iterate through all pairs of people not already marked as `used`, leading to a complexity of approximately \(O(n^3)\) in the worst case due to three levels of nested iteration (two in `main` and one in `doit`).

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the above insights, we derive the following performance-characterizing invariants:

1. **Invariant 1: Pair Selection Complexity**
   - Natural Language Description: "When the number of people `2·n` (where n is the number of tandem kayaks plus two single kayaks) is close to the maximum limit, the double nested loop structure leads to excessive recalculation for selecting pairs, significantly slowing down the program."
   - This invariant relates to the inherent complexity of the loop structure, which becomes problematic as the input size approaches the upper constraint.

2. **Invariant 2: Heavy Iteration in Pair Finding**
   - Natural Language Description: "If the number of available tandem kayaks (`n-1`) and the corresponding number of pairs to be formed is large, the program may struggle with excessive iterations in finding optimal pairs, especially when iterating over large sorted weight arrays."
   - This reflects the performance hit due to the inefficiencies in the `doit` function when scaling up to the problem constraints.

3. **Invariant 3: Input Size Impact**
   - Natural Language Description: "With a larger input size (up to `n = 50`), the algorithm becomes bottlenecked by the need to frequently calculate minimum instability across all potential pair combinations."
   - This captures the general performance degradation as input approaches the maximum size constraint.

### Recommendations

To mitigate these performance issues, consider optimizing the pair selection process to avoid redundant calculations and reduce the complexity of nested loops. Such optimizations could involve smarter data structures or algorithms (such as greedy or dynamic programming approaches) tailored to handle larger inputs efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: To address the performance issues identified in the C++ program, we'll follow the two phases described: implementing invariant checks (Phase 3) and integrating these checks into the original program (Phase 4).

### Phase 3: Implementing the Invariant Checks

1. **Invariant 1: Pair Selection Complexity**
   - **Description**: When `2·n` is close to the maximum limit, the nested loops significantly increase operations.
   - **Checker Code**:
   ```cpp
   void check_pair_selection_complexity(int n) {
       if (n >= 50) {
           cerr << "Warning: Performance bottleneck condition triggered - high pair selection complexity!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Heavy Iteration in Pair Finding**
   - **Description**: For large `n`, redundant iterations in finding optimal pairs.
   - **Checker Code**:
   ```cpp
   void check_heavy_iteration(int n) {
       if (n > 40) { // Arbitrary threshold, close to max n = 50
           cerr << "Warning: Performance bottleneck condition triggered - heavy iteration in pair finding!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Input Size Impact**
   - **Description**: Algorithm bottlenecked by input size.
   - **Checker Code**:
   ```cpp
   void check_input_size_impact(int n) {
       if (n > 45) { // Another threshold closer to the max limit
           cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Invariant Checks into the Original Program

Now, we will insert these checks at effective points within the control flow, ensuring minimal impact on performance while accurately capturing the bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance bottlenecks
void check_pair_selection_complexity(int n) {
    if (n >= 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high pair selection complexity!" << endl;
        abort();
    }
}

void check_heavy_iteration(int n) {
    if (n > 40) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy iteration in pair finding!" << endl;
        abort();
    }
}

void check_input_size_impact(int n) {
    if (n > 45) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}

int a[120], vis[1200];
int n;

int doit(int x, int y) {
    bool use[120] = {0};
    use[x] = use[y] = 1;
    int tmp = 0;
    for (int i = 1; i <= n; i++) {
        int dif = n;
        if (use[i]) continue;
        for (int j = i + 1; j <= n; j++) {
            if (use[j]) continue;
            if (abs(a[i] - a[j]) < abs(a[i] - a[dif])) {
                dif = j;
            }
        }
        use[i] = 1;
        use[dif] = 1;
        tmp += abs(a[i] - a[dif]);
    }
    return tmp;
}

int main() {
    scanf("%d", &n);

    // Apply performance checks based on the identified invariants
    check_pair_selection_complexity(n);
    check_heavy_iteration(n);
    check_input_size_impact(n);

    n *= 2;
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    sort(a + 1, a + 1 + n);
    int ans = INT_MAX;
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            ans = min(ans, doit(i, j));
        }
    }
    cout << ans;
}
```

### Explanation

- **Check Placement**: The checks are positioned right after reading the input value `n`. This positioning ensures that we catch the bottleneck conditions early, without affecting the nested loops later in the program.
- **Thresholds**: The thresholds are set based on the problem constraints (`n <= 50`), but slightly below the maximum to trigger warnings before reaching critical slowdowns.
- **Warning and Abort**: Each check issues a warning and aborts the program if the conditions are met, allowing for quick detection during testing or fuzzing.

