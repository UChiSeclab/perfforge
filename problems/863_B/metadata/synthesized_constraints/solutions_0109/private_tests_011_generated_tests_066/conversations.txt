system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long T = 1;
  for (long long tt = 1; tt <= T; tt++) {
    int n, mn = 1e9;
    cin >> n;
    n *= 2;
    vector<int> ls(n);
    for (int &x : ls) cin >> x;
    sort(ls.begin(), ls.end());
    for (int u = 0; u < n; u++) {
      for (int v = 0; v < n; v++) {
        if (v != u) {
          map<int, int> vis;
          vis[u] = vis[v] = 1;
          int w = 0, x = 0, sm = 0;
          while (x < n) {
            while (vis[w]) w++;
            while (vis[x] || x == w) x++;
            if (x < n) sm += ls[x] - ls[w], vis[w] = vis[x] = 1;
            w++, x++;
          }
          mn = min(mn, sm);
        }
      }
    }
    cout << mn;
    cout << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long T = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long tt = 1; tt <= T; tt++) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    int n, mn = 1e9; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    n *= 2; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    vector<int> ls(n); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    for (int &x : ls) cin >> x; /* line 12 slow_hit_count: 101, fast_hit_count: 5 */
    sort(ls.begin(), ls.end()); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    for (int u = 0; u < n; u++) { /* line 14 slow_hit_count: 101, fast_hit_count: 5 */
      for (int v = 0; v < n; v++) { /* line 15 slow_hit_count: 10100, fast_hit_count: 20 */
        if (v != u) { /* line 16 slow_hit_count: 10000, fast_hit_count: 16 */
          map<int, int> vis; /* line 17 slow_hit_count: 9900, fast_hit_count: 12 */
          vis[u] = vis[v] = 1; /* line 18 slow_hit_count: 9900, fast_hit_count: 12 */
          int w = 0, x = 0, sm = 0; /* line 19 slow_hit_count: 9900, fast_hit_count: 12 */
          while (x < n) { /* line 20 slow_hit_count: 495198, fast_hit_count: 30 */
            while (vis[w]) w++; /* line 21 slow_hit_count: 980298, fast_hit_count: 42 */
            while (vis[x] || x == w) x++; /* line 22 slow_hit_count: 990396, fast_hit_count: 60 */
            if (x < n) sm += ls[x] - ls[w], vis[w] = vis[x] = 1; /* line 23 slow_hit_count: 485298, fast_hit_count: 18 */
            w++, x++; /* line 24 slow_hit_count: 485298, fast_hit_count: 18 */
          } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
          mn = min(mn, sm); /* line 26 slow_hit_count: 9900, fast_hit_count: 12 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cout << mn; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    cout << '\n'; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance of the given C program, we need to identify the segments contributing to the slowdown, particularly when running with the slow input, and then derive performance-characterizing invariants. Here's a step-by-step approach to accomplish this:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### 1. Compare Line-Level Hit Counts
From the provided hit counts data, we observe some significant differences between the slow and fast inputs:

- The nested loops starting at lines 14 and 15 are hit extensively—10100 times in the slow case versus 20 in the fast case.
- The innermost while loop at line 20 has an especially high hit count in the slow case (495198 times versus 30 in the fast case).
- Lines 21, 22, 23, and 24 also experience significantly more executions in the slow case, indicating that the inner loop operations are being repeated excessively.

#### 2. Pinpoint Lines with More Hits
The critical area in the code where performance degrades is the nested loops combined with the inner while loop that iterates over the indices to compute `sm`.

#### 3. Data Structures and Loop Interactions
- The `map<int, int> vis` is used to track which indices have been visited. This approach, together with the nested loops, results in a complexity that can become quadratic in nature due to repeated checks and updates for each possible pairing of people in tandem kayaks.
- The `while` loops inside the `if (v != u)` block perform repeated operations for each combination of unvisited pairs, leading to numerous iterations when `n` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can identify the conditions that lead to slow execution:

#### Invariant 1: High Iterative Complexity with Large `n`
- **Natural Language Description:** "When `n` is close to its maximum limit (50), the program may enter a slow path due to the high number of iterations over all possible combinations of people in tandem kayaks."
- **Explanation:** As `n` approaches its upper constraint, the number of pair evaluations (nested for loops) grows dramatically, leading to quadratic complexity.

#### Invariant 2: Excessive Inner Loop Iterations
- **Natural Language Description:** "If the difference in weights between individuals in various positions is low, the code may perform excessive iterations in searching for optimal pairings."
- **Explanation:** Particularly for inputs where the weights don't easily reveal optimal pairings, the inner loops repeatedly search for combinations, increasing iteration count.

#### Invariant 3: Suboptimal Use of Data Structures
- **Natural Language Description:** "The use of a map to track visited indices can become inefficient when used in loops processing a large number of combinations, leading to slow execution."
- **Explanation:** The map structure's use within nested loops adds overhead, especially when repeatedly checking and updating visited indices.

### Recommendations
- Consider optimizing the data structure usage or algorithm to reduce the number of unnecessary operations.
- Evaluate whether the logic can be simplified or whether pre-computation can reduce the number of combinations that need to be checked in detail.

By addressing these areas, you can help prevent future instances where similar input patterns trigger slow execution, ensuring the program performs efficiently across all allowed input sizes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ functions implementing the natural language invariants as runtime checks:

```cpp
#include <iostream>
using namespace std;

// Check for high iterative complexity with large n
void check_large_n_invariant(int n) {
    if (n >= 45) { // n close to the upper bound of 50
        cerr << "Warning: Performance bottleneck condition triggered - large n value!" << endl;
        abort();
    }
}

// Check for excessive inner loop iterations
void check_pairing_invariant(int n, const vector<int>& weights) {
    // Estimate heuristic: If weights have many close values, assume inefficiency
    int similar_pairs = 0;
    for (size_t i = 1; i < weights.size(); ++i) {
        if (abs(weights[i] - weights[i - 1]) <= 2) {
            similar_pairs++;
        }
    }
    if (similar_pairs > n) { // Arbitrary threshold based on n
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations for similar weights!" << endl;
        abort();
    }
}

// Check for inefficient data structure use
void check_data_structure_invariant(int n) {
    // Since the map is used n^2 times, we use a derived threshold
    if (n > 40) { // When n is large enough to make map operations expensive
        cerr << "Warning: Performance bottleneck condition triggered - inefficient data structure use!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, integrate these checks into the original program at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_n_invariant(int n) {
    if (n >= 45) {
        cerr << "Warning: Performance bottleneck condition triggered - large n value!" << endl;
        abort();
    }
}

void check_pairing_invariant(int n, const vector<int>& weights) {
    int similar_pairs = 0;
    for (size_t i = 1; i < weights.size(); ++i) {
        if (abs(weights[i] - weights[i - 1]) <= 2) {
            similar_pairs++;
        }
    }
    if (similar_pairs > n) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations for similar weights!" << endl;
        abort();
    }
}

void check_data_structure_invariant(int n) {
    if (n > 40) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient data structure use!" << endl;
        abort();
    }
}

// Main program
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long T = 1;
    for (long long tt = 1; tt <= T; tt++) {
        int n, mn = 1e9;
        cin >> n;
        n *= 2;
        
        // Trigger invariant checks after reading input
        check_large_n_invariant(n / 2);

        vector<int> ls(n);
        for (int &x : ls) cin >> x;
        sort(ls.begin(), ls.end());

        check_pairing_invariant(n / 2, ls);
        check_data_structure_invariant(n / 2);

        for (int u = 0; u < n; u++) {
            for (int v = 0; v < n; v++) {
                if (v != u) {
                    map<int, int> vis;
                    vis[u] = vis[v] = 1;
                    int w = 0, x = 0, sm = 0;
                    while (x < n) {
                        while (vis[w]) w++;
                        while (vis[x] || x == w) x++;
                        if (x < n) sm += ls[x] - ls[w], vis[w] = vis[x] = 1;
                        w++, x++;
                    }
                    mn = min(mn, sm);
                }
            }
        }
        cout << mn;
        cout << '\n';
    }
}
```

### Explanation of Integration
- **Large `n` Check:** Placed right after reading the input to preemptively warn if `n` could lead to a bottleneck.
- **Pairing Check:** Added after sorting weights to analyze weight distribution.
- **Data Structure Check:** Added to signal potential inefficiencies as `n` increases.

These checks efficiently provide warnings when the program might enter a slow path without introducing significant overhead in the main loops.

