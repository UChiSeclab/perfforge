system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[110];
int b[110];
int main() {
  int n;
  cin >> n;
  n *= 2;
  for (int i = 1; i <= n; i++) cin >> a[i];
  int ans = 10000005;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if (i == j) continue;
      memset(b, 0, sizeof(b));
      int num = 0;
      for (int k = 1; k <= n; k++)
        if (k != i && k != j) b[num++] = a[k];
      sort(b, b + num);
      int sum = 0;
      for (int k = 0; k < num; k += 2) sum += b[k + 1] - b[k];
      ans = min(sum, ans);
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[110]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int b[110]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  n *= 2; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i]; /* line 9 slow_hit_count: 101, fast_hit_count: 5 */
  int ans = 10000005; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 11 slow_hit_count: 101, fast_hit_count: 5 */
    for (int j = 1; j <= n; j++) { /* line 12 slow_hit_count: 10100, fast_hit_count: 20 */
      if (i == j) continue; /* line 13 slow_hit_count: 10000, fast_hit_count: 16 */
      memset(b, 0, sizeof(b)); /* line 14 slow_hit_count: 9900, fast_hit_count: 12 */
      int num = 0; /* line 15 slow_hit_count: 9900, fast_hit_count: 12 */
      for (int k = 1; k <= n; k++) /* line 16 slow_hit_count: 999900, fast_hit_count: 60 */
        if (k != i && k != j) b[num++] = a[k]; /* line 17 slow_hit_count: 990000, fast_hit_count: 48 */
      sort(b, b + num); /* line 18 slow_hit_count: 9900, fast_hit_count: 12 */
      int sum = 0; /* line 19 slow_hit_count: 9900, fast_hit_count: 12 */
      for (int k = 0; k < num; k += 2) sum += b[k + 1] - b[k]; /* line 20 slow_hit_count: 495000, fast_hit_count: 24 */
      ans = min(sum, ans); /* line 21 slow_hit_count: 9900, fast_hit_count: 12 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, we need to analyze the hit count discrepancies between the fast and slow inputs. Let's proceed through the required phases to identify performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Discrepancies in Hit Counts:**
   - Lines 11, 12, and 13 are part of nested loops and show a significant increase in hit counts for the slow input (`i` and `j` loops: 10100 for slow vs. 20 for fast).
   - Line 16 and 17 also have a very high hit count for the slow input due to the inner loop (`k` loop: 999900 for slow vs. 60 for fast).
   - The `sort` operation on line 18 is called 9900 times for the slow input compared to only 12 times for the fast input.

2. **Expensive Interactions:**
   - There is a nested loop structure with `i` and `j`, iterating over `n` elements (where `n` is double the input number).
   - The `b` array, which is crucial for storing elements except the two currently indexed by `i` and `j`, is sorted repeatedly, contributing significantly to the slowdown.

3. **Data Structures and Loops Analysis:**
   - The core inefficiency arises from sorting `b` in every pair combination of `i` and `j`. As `n` increases, the number of combinations grows quadratically, leading to more frequent and expensive calls to `sort`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can characterize conditions under which the program experiences slowdowns:

1. **Invariant 1: High Combinatorial Pairs Trigger Excessive Sorting**
   - **Natural Language Description:** "When the number of people is close to its maximum limit, leading to many possible pairs in nested loops, the repeated sorting of arrays can become computationally expensive."
   
2. **Invariant 2: Nested Loop Overhead with Sorting**
   - **Natural Language Description:** "If the input size results in many iterations through nested loops, where a significant portion involves sorting, the performance may degrade due to repeated operations."

3. **Invariant 3: Sorting Cost with Redundant Data States**
   - **Natural Language Description:** "If repeated sorting operations are performed with similar data states, especially under high input constraints, computational cost can be significantly high."

4. **Invariant 4: Removal and Sorting of Large Sublists**
   - **Natural Language Description:** "When removing elements for sublist creation and subsequent sorting occurs frequently due to loop structure, it can lead to slow execution times."

These invariants suggest that the slowdown occurs due to the high number of iterations within nested loops, especially when `n` is large (close to its upper constraint), causing frequent and costly sorting operations. The program's performance is most affected when there are numerous combinations of pairs to be evaluated and sorted iteratively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Here, we translate the performance-characterizing invariants into C++ checker code. These checks will help identify when the program is likely to experience performance slowdowns due to the conditions we inferred earlier.

1. **Invariant 1: High Combinatorial Pairs Trigger Excessive Sorting**

```cpp
void check_combinatorial_pairs_invariant(int n) {
    // Check if the number of combinations is very high, which implies many sorts
    if (n > 40) {  // Arbitrarily chosen threshold close to the constraint's upper limit
        cerr << "Warning: combinatorial_pairs_invariant triggered - excessive combinations leading to sort operations" << endl;
        abort();
    }
}
```

2. **Invariant 2: Nested Loop Overhead with Sorting**

```cpp
void check_nested_loop_sort_invariant(int numSorts) {
    // Check if nested loop causes excessive sorting
    if (numSorts > 5000) {  // Estimated number from maximum pair combinations
        cerr << "Warning: nested_loop_sort_invariant triggered - high number of nested loops with sorting" << endl;
        abort();
    }
}
```

3. **Invariant 3: Sorting Cost with Redundant Data States**

```cpp
void check_redundant_sort_invariant(int redundantSorts) {
    // Check if the program performs redundant sort operations
    if (redundantSorts > 1000) {  // Arbitrary threshold to detect performance degradation
        cerr << "Warning: redundant_sort_invariant triggered - excessive redundant sorting operations" << endl;
        abort();
    }
}
```

4. **Invariant 4: Removal and Sorting of Large Sublists**

```cpp
void check_large_sublist_removal_invariant(int n) {
    // Check if large sublists are frequently created and sorted
    if (n > 45) {  // Close to the maximum constraint suggesting large operations
        cerr << "Warning: large_sublist_removal_invariant triggered - removal and sorting of large sublists" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now we integrate the checkers into the original program, placing them at effective points prior to the heavy loops or operations.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[110];
int b[110];

void check_combinatorial_pairs_invariant(int n) {
    if (n > 40) {
        cerr << "Warning: combinatorial_pairs_invariant triggered - excessive combinations leading to sort operations" << endl;
        abort();
    }
}

void check_nested_loop_sort_invariant(int numSorts) {
    if (numSorts > 5000) {
        cerr << "Warning: nested_loop_sort_invariant triggered - high number of nested loops with sorting" << endl;
        abort();
    }
}

void check_redundant_sort_invariant(int redundantSorts) {
    if (redundantSorts > 1000) {
        cerr << "Warning: redundant_sort_invariant triggered - excessive redundant sorting operations" << endl;
        abort();
    }
}

void check_large_sublist_removal_invariant(int n) {
    if (n > 45) {
        cerr << "Warning: large_sublist_removal_invariant triggered - removal and sorting of large sublists" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    n *= 2;
    for (int i = 1; i <= n; i++) cin >> a[i];
    
    // Check the invariant related to combinatorial pair calculations
    check_combinatorial_pairs_invariant(n / 2);
    
    int ans = 10000005;
    int numSorts = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i == j) continue;
            memset(b, 0, sizeof(b));
            int num = 0;
            for (int k = 1; k <= n; k++)
                if (k != i && k != j) b[num++] = a[k];
            
            sort(b, b + num);
            numSorts++;  // Increment sorting counter
            
            int sum = 0;
            for (int k = 0; k < num; k += 2) sum += b[k + 1] - b[k];
            ans = min(sum, ans);
        }
    }

    // Check for nested loop sort invariant
    check_nested_loop_sort_invariant(numSorts);

    // Check for redundant sorting
    check_redundant_sort_invariant(numSorts);

    // Check for large sublist removal and sort
    check_large_sublist_removal_invariant(n / 2);

    cout << ans << endl;
    return 0;
}
```

**Comments:**
- **Combinatorial Pairs Invariant:** Placed after input reading to abort early if `n` suggests excessive pairs.
- **Nested Loop Sort Invariant:** Count the number of sorts and check after loops.
- **Redundant Sort Invariant:** Uses the same sort count as nested loop invariant.
- **Large Sublist Removal Invariant:** Directly post input, checks the potential size of sublists based on `n`.

