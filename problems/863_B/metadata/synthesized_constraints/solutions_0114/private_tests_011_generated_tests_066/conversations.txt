system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 14001;
const int INF = 1000 * 1000 * 1000 + 1000;
const int mod = 1000 * 1000 * 1000 + 7;
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  ;
  int n;
  cin >> n;
  n *= 2;
  int mas[n];
  for (int i = 0; i < n; i++) cin >> mas[i];
  sort(mas, mas + n);
  int best = INF;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (i == j) continue;
      vector<int> v;
      for (int k = 0; k < n; k++) {
        if (k != i && k != j) v.push_back(mas[k]);
      }
      sort(v.begin(), v.end());
      int sum = 0;
      for (int k = 0; k < (int)v.size(); k += 2) {
        int x = v[k + 1] - v[k];
        sum += x;
      }
      best = min(best, sum);
    }
  }
  cout << best;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 14001; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1000 * 1000 * 1000 + 1000; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000 * 1000 * 1000 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  n *= 2; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int mas[n]; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> mas[i]; /* line 16 slow_hit_count: 101, fast_hit_count: 5 */
  sort(mas, mas + n); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int best = INF; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 19 slow_hit_count: 101, fast_hit_count: 5 */
    for (int j = 0; j < n; j++) { /* line 20 slow_hit_count: 10100, fast_hit_count: 20 */
      if (i == j) continue; /* line 21 slow_hit_count: 10000, fast_hit_count: 16 */
      vector<int> v; /* line 22 slow_hit_count: 9900, fast_hit_count: 12 */
      for (int k = 0; k < n; k++) { /* line 23 slow_hit_count: 999900, fast_hit_count: 60 */
        if (k != i && k != j) v.push_back(mas[k]); /* line 24 slow_hit_count: 990000, fast_hit_count: 48 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      sort(v.begin(), v.end()); /* line 26 slow_hit_count: 9900, fast_hit_count: 12 */
      int sum = 0; /* line 27 slow_hit_count: 9900, fast_hit_count: 12 */
      for (int k = 0; k < (int)v.size(); k += 2) { /* line 28 slow_hit_count: 495000, fast_hit_count: 24 */
        int x = v[k + 1] - v[k]; /* line 29 slow_hit_count: 485100, fast_hit_count: 12 */
        sum += x; /* line 30 slow_hit_count: 485100, fast_hit_count: 12 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      best = min(best, sum); /* line 32 slow_hit_count: 9900, fast_hit_count: 12 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << best; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, we need to analyze the difference in line-level hit counts between the fast and slow inputs. The slow input leads to significantly more hits, particularly in the nested loops, indicating where the performance issues lie.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 19 and Line 20:** These loops iterate over all pairs `(i, j)` where `i` and `j` are indices in the array of weights. For the slow input, the outer loop executes 100 times, and the inner loop executes 10,100 times, resulting in a total of almost 10,000,000 iterations.

2. **Line 23 and Line 24:** Inside the inner loop, there's another loop that constructs a vector `v` by excluding the elements at indices `i` and `j`. This loop results in 999,900 hits for the slow input.

3. **Line 28:** There is another loop iterating over the constructed vector `v`, performing pairwise operations. This line executes 495,000 times for the slow input.

The nested loops in the program are the primary contributors to the performance issues, as they significantly increase the number of iterations, especially when `n` is large (close to the upper bound of 50).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the performance-characterizing invariants in natural language:

1. **Invariant 1: High Iteration Count in Nested Loops**
   - **Description:** "The program slows down significantly when the number of iterations in the nested loops becomes excessive. This occurs when `n` is close to the upper limit, leading to a combinatorial explosion of checked pairs `(i, j)` in the inner loops."
   - **Threshold Suggestion:** "If `n` is large (close to 50), the number of combinations of pairs `(i, j)` becomes very high, leading to a slowdown."

2. **Invariant 2: Excessive Construction of Intermediate Arrays**
   - **Description:** "Performance degrades when intermediate vectors are constructed repeatedly in the loop, especially when `n` is large. This repeated construction of vectors with almost 2n elements is costly."
   - **Threshold Suggestion:** "When `n` approaches 50, the redundant creation and sorting of vectors for each pair `(i, j)` adds significant overhead."

3. **Invariant 3: Frequent Sorting of Nearly Identical Data**
   - **Description:** "The program spends a lot of time sorting similar vectors in each iteration of the inner loop, which can be expensive if the vectors are large and numerous."
   - **Threshold Suggestion:** "If `n` is large, the same sorting operation on slightly different data across many iterations can slow down execution."

These invariants help identify the conditions under which the program is likely to become slow, especially when dealing with large input sizes near the constraint boundaries. The issue primarily arises from the combinatorial complexity of the nested loops and the repeated operations on large data structures.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: Let's proceed by translating the natural language performance-characterizing invariants into C++ code (Phase 3) and then integrating these checks into the original C++ program (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

For each invariant we derived, we will create a corresponding C++ check:

1. **Invariant 1: High Iteration Count in Nested Loops**

   ```cpp
   void check_iteration_invariant(int n) {
       // Combinatorial explosion in nested loops when n is too large
       if (n > 45) { // Chose 45 as a threshold because n is close to the upper limit of 50
           cerr << "Warning: iteration_invariant triggered - excessive nested loop iterations" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Excessive Construction of Intermediate Arrays**

   ```cpp
   void check_array_construction_invariant(int n) {
       // Intermediate arrays are constructed repeatedly, causing slowdown
       if (n > 45) {
           cerr << "Warning: array_construction_invariant triggered - repeated vector construction" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Frequent Sorting of Nearly Identical Data**

   ```cpp
   void check_sorting_invariant(int n) {
       // Frequent sorting when n is large
       if (n > 45) {
           cerr << "Warning: sorting_invariant triggered - excessive sorting operations" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now we will integrate these checks into the original C++ code, placing them at effective points to ensure the program aborts before executing the costly computations.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 1000 * 1000 * 1000 + 1000;

void check_iteration_invariant(int n) {
    if (n > 45) {
        cerr << "Warning: iteration_invariant triggered - excessive nested loop iterations" << endl;
        abort();
    }
}

void check_array_construction_invariant(int n) {
    if (n > 45) {
        cerr << "Warning: array_construction_invariant triggered - repeated vector construction" << endl;
        abort();
    }
}

void check_sorting_invariant(int n) {
    if (n > 45) {
        cerr << "Warning: sorting_invariant triggered - excessive sorting operations" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n;
    cin >> n;

    // Check invariants
    check_iteration_invariant(n);
    check_array_construction_invariant(n);
    check_sorting_invariant(n);

    n *= 2;
    int mas[n];
    for (int i = 0; i < n; i++) cin >> mas[i];
    sort(mas, mas + n);
    int best = INF;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) continue;
            vector<int> v;
            for (int k = 0; k < n; k++) {
                if (k != i && k != j) v.push_back(mas[k]);
            }
            sort(v.begin(), v.end());
            int sum = 0;
            for (int k = 0; k < (int)v.size(); k += 2) {
                int x = v[k + 1] - v[k];
                sum += x;
            }
            best = min(best, sum);
        }
    }
    cout << best;
    return 0;
}
```

### Explanation

- We've introduced the invariant checks right after reading the input for `n`. This ensures that before any potentially slow operations begin, the program checks whether the conditions for slowdown are met.
- The thresholds in the checks are set near the upper bound of `n` (50) to reflect the constraints under which performance degrades, without stepping into specific input values.
- Each check aborts the program with a descriptive error message if the conditions are met, providing useful feedback for identifying performance bottlenecks.

