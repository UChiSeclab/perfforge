system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int c, n, i, s1 = 100000, sum = 0;
  cin >> n;
  int a[2 * n];
  for (i = 0; i < 2 * n; i++) cin >> a[i];
  sort(a, a + 2 * n);
  for (int j = 0; j < 2 * n - 1; j++) {
    for (int k = j + 1; k < 2 * n; k++) {
      sum = 0;
      c = 1;
      for (i = 0; i < 2 * n; i++) {
        if (i != k && i != j) {
          sum += (pow(-1, c) * a[i]);
          c++;
        }
      }
      s1 = min(s1, sum);
    }
  }
  cout << s1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int c, n, i, s1 = 100000, sum = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int a[2 * n]; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < 2 * n; i++) cin >> a[i]; /* line 10 slow_hit_count: 101, fast_hit_count: 5 */
  sort(a, a + 2 * n); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < 2 * n - 1; j++) { /* line 12 slow_hit_count: 100, fast_hit_count: 4 */
    for (int k = j + 1; k < 2 * n; k++) { /* line 13 slow_hit_count: 5049, fast_hit_count: 9 */
      sum = 0; /* line 14 slow_hit_count: 4950, fast_hit_count: 6 */
      c = 1; /* line 15 slow_hit_count: 4950, fast_hit_count: 6 */
      for (i = 0; i < 2 * n; i++) { /* line 16 slow_hit_count: 499950, fast_hit_count: 30 */
        if (i != k && i != j) { /* line 17 slow_hit_count: 495000, fast_hit_count: 24 */
          sum += (pow(-1, c) * a[i]); /* line 18 slow_hit_count: 485100, fast_hit_count: 12 */
          c++; /* line 19 slow_hit_count: 485100, fast_hit_count: 12 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      s1 = min(s1, sum); /* line 22 slow_hit_count: 4950, fast_hit_count: 6 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << s1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's proceed with the analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The most significant discrepancy between slow and fast input is seen in lines 13-19.
   - Line 16 is particularly revealing, as it shows 499,950 hits for the slow input compared to just 30 for the fast input. This suggests a nested loop structure causing heavy computation.
   - Lines 17-19 have similarly high hit counts, indicating the intensive computation performed within these loops.

2. **Code Structure and Loops**:
   - The code has a triple-nested loop structure. The outer loop iterates `j` from `0` to `2 * n - 2`, the middle loop iterates `k` from `j + 1` to `2 * n - 1`, and the innermost loop iterates over the entire array to compute `sum`.
   - The repetitive calculations in the nested loops suggest inefficient use, especially when `n` is large (close to its upper limit).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants under which the code likely slows down:

1. **Nested Loop Interaction**:
   - **Natural Language Invariant**: "When `n` is large, particularly near 50, the triple nested loops (one over `j`, one over `k`, and one over `i`) result in a significantly higher number of iterations, causing the program to slow down."
   - **Implementation Context**: The outer loop iterates approximately 2n times, and the inner loops iterate cumulatively 2n*(2n-1)/2 times, leading to a computational explosion as n approaches 50.

2. **Combinatorial Pair Selection**:
   - **Natural Language Invariant**: "As the number of potential pairs (`2n choose 2`) becomes large, the program's complexity increases due to evaluating each combination of pairs for computing total instability."
   - **Implementation Context**: The nested loops are exploring all unique pairs without optimizing for previously computed results, which becomes costly as n grows.

3. **Redundant Sum Calculations**:
   - **Natural Language Invariant**: "When recalculating the instability sum for each pair removal, redundant operations are performed within the innermost loop, and the cumulative effect can cause a slowdown."
   - **Implementation Context**: The computation of the sum for each pair of indices (j, k) redundantly recalculates values that have been computed before, which is especially wasteful for large n.

### Conclusion

The performance bottlenecks derive from the combinatorial nature of the problem when n is large, combined with inefficient loop handling and redundant calculations. By identifying conditions such as large `n` leading to high iteration counts and redundant sum computations, the program can be optimized to handle potential slowdowns more effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: Let's proceed with the tasks outlined in Phase 3 and Phase 4.

### Phase 3: Implementing Invariants as Runtime Checks in C++

Here are the checks for the performance-characterizing invariants we identified:

1. **Nested Loop Interaction**:
   - This invariant is triggered when `n` is large, causing the loops to iterate excessively. We'll implement a check to detect when `n` is near its maximum value.

2. **Combinatorial Pair Selection**:
   - The checker will flag if the number of pair combinations (`2n choose 2`) becomes substantial, which happens when `n` is large.

3. **Redundant Sum Calculations**:
   - This invariant is checked by recognizing when many redundant operations are performed—primarily a concern with the current nested loop strategy.

Here's the C++ code implementing these checks:

```cpp
void check_nested_loop_invariant(int n) {
    if (n > 45) { // Assuming n is close to its upper bound
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to large n!" << endl;
        abort();
    }
}

void check_combinatorial_invariant(int n) {
    if (n * (2 * n - 1) > 1000) { // Evaluating (2n choose 2) for a substantial threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinatorial pairings!" << endl;
        abort();
    }
}

void check_redundant_calculation_invariant(int n) {
    if (n > 40) { // Assuming a threshold beyond which redundant calculations become costly
        cerr << "Warning: Performance bottleneck condition triggered - redundant sum calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Next, we'll integrate these checks into the original C++ program strategically to avoid impacting performance within tight loops. Here’s the final instrumented version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for nested loop performance issues
void check_nested_loop_invariant(int n) {
    if (n > 45) { // Assuming n is close to its upper bound
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to large n!" << endl;
        abort();
    }
}

// Function to check for excessive combinatorial pairings
void check_combinatorial_invariant(int n) {
    if (n * (2 * n - 1) > 1000) { // Evaluating (2n choose 2) for a substantial threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinatorial pairings!" << endl;
        abort();
    }
}

// Function to check for redundant calculations
void check_redundant_calculation_invariant(int n) {
    if (n > 40) { // Assuming a threshold beyond which redundant calculations become costly
        cerr << "Warning: Performance bottleneck condition triggered - redundant sum calculations!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int c, n, i, s1 = 100000, sum = 0;
    cin >> n;
    
    // Initial checks after reading input size n
    check_nested_loop_invariant(n);
    check_combinatorial_invariant(n);
    check_redundant_calculation_invariant(n);

    int a[2 * n];
    for (i = 0; i < 2 * n; i++) {
        cin >> a[i];
    }
    sort(a, a + 2 * n);

    for (int j = 0; j < 2 * n - 1; j++) {
        for (int k = j + 1; k < 2 * n; k++) {
            sum = 0;
            c = 1;
            for (i = 0; i < 2 * n; i++) {
                if (i != k && i != j) {
                    sum += (pow(-1, c) * a[i]);
                    c++;
                }
            }
            s1 = min(s1, sum);
        }
    }

    cout << s1;
    return 0;
}
```

### Comments

- **Placement of checks**: Each check is placed immediately after reading `n`, ensuring they don't interfere with the main computational loops.
- **Threshold values**: The thresholds used in the checks (`n > 45`, `n * (2n - 1) > 1000`, `n > 40`) reflect the performance characteristics and potential bottlenecks as identified in Phase 2. These thresholds aim to provide early warnings for input sizes likely to cause slow execution, while avoiding unnecessary checks within the loops themselves.

