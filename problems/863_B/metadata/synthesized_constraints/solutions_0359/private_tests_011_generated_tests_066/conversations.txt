system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int ans[300005];
int main() {
  int n;
  cin >> n;
  vector<int> cnt;
  for (int i = 0; i < n * 2; i++) {
    int x;
    cin >> x;
    cnt.push_back(x);
  }
  int ans = INT_MAX;
  for (int i = 0; i < cnt.size(); i++) {
    for (int e = 0; e < cnt.size(); e++) {
      if (i != e) {
        vector<int> tmp;
        for (int j = 0; j < cnt.size(); j++) {
          if (j != e && j != i) {
            tmp.push_back(cnt[j]);
          }
        }
        sort(tmp.begin(), tmp.end());
        int t = 0;
        for (int j = 1; j < tmp.size(); j += 2) {
          t += (tmp[j] - tmp[j - 1]);
        }
        ans = min(ans, t);
      }
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2


(G.2) Fast Input

2
1 2 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int ans[300005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> cnt; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n * 2; i++) { /* line 8 slow_hit_count: 101, fast_hit_count: 5 */
    int x; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 10 slow_hit_count: 100, fast_hit_count: 4 */
    cnt.push_back(x); /* line 11 slow_hit_count: 100, fast_hit_count: 4 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = INT_MAX; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < cnt.size(); i++) { /* line 14 slow_hit_count: 101, fast_hit_count: 5 */
    for (int e = 0; e < cnt.size(); e++) { /* line 15 slow_hit_count: 10100, fast_hit_count: 20 */
      if (i != e) { /* line 16 slow_hit_count: 10000, fast_hit_count: 16 */
        vector<int> tmp; /* line 17 slow_hit_count: 9900, fast_hit_count: 12 */
        for (int j = 0; j < cnt.size(); j++) { /* line 18 slow_hit_count: 999900, fast_hit_count: 60 */
          if (j != e && j != i) { /* line 19 slow_hit_count: 990000, fast_hit_count: 48 */
            tmp.push_back(cnt[j]); /* line 20 slow_hit_count: 970200, fast_hit_count: 24 */
          } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        sort(tmp.begin(), tmp.end()); /* line 23 slow_hit_count: 9900, fast_hit_count: 12 */
        int t = 0; /* line 24 slow_hit_count: 9900, fast_hit_count: 12 */
        for (int j = 1; j < tmp.size(); j += 2) { /* line 25 slow_hit_count: 495000, fast_hit_count: 24 */
          t += (tmp[j] - tmp[j - 1]); /* line 26 slow_hit_count: 485100, fast_hit_count: 12 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        ans = min(ans, t); /* line 28 slow_hit_count: 9900, fast_hit_count: 12 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the given C program, let's first break down the code and examine the hits on each line for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Line-Level Analysis:

1. **Input Reading (Lines 8-11):**
   - These lines are responsible for reading the input. They are proportional to the input size and are not a bottleneck themselves.

2. **Nested Loops (Lines 14-15):**
   - These lines iterate over the combinations of people. For the slow input, hit counts are very high (10,100 vs 20 for the fast input). This reflects a quadratic complexity in terms of the number of people (2*n).

3. **Inner Loop (Lines 18-20):**
   - This loop constructs the `tmp` vector, excluding two people from the list. Hit counts are extremely high for the slow input, indicating each combination of people results in multiple iterations.
   
4. **Sorting (Line 23):**
   - Sorting `tmp` is performed many times, each time incurring an `O(n log n)` cost. High hit counts suggest sorting is a significant factor in slow performance.

5. **Tandem Instability Calculation (Lines 25-26):**
   - This loop calculates the instability, which has a lower hit count than the sorting due to its linear complexity. It still contributes to the overall complexity but less so than sorting.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the primary performance bottleneck is the combination generation and redundant sorting operations. Let's translate these observations into natural language performance-characterizing invariants:

1. **Invariant on Combination Complexity:**
   - **Natural Language Description:** "When every possible pair of people is considered for exclusion from the list to form tandem kayaks, the number of operations grows quadratically as the number of participants increases. This can lead to significant slowdowns especially when the number of participants approaches the maximum constraint (n = 50)."
   - **Threshold:** This invariant impacts performance as the number of possible combinations (which is `O((2*n)^2)`) approaches its upper limit.

2. **Invariant on Redundant Sorting:**
   - **Natural Language Description:** "Repeated sorting of the list of weights after excluding each pair significantly impacts performance. This sorting is done for every possible pair and can become a bottleneck as the number of participants increases."
   - **Threshold:** Sorting `n-2` elements multiple times leads to inefficiencies when repeated for all combinations. It becomes critical when `n` is large but still within the constraint (n <= 50).

3. **Invariant on Tandem Instability Calculation:**
   - **Natural Language Description:** "Calculating the instability for each combination of weights involves iterating through almost the entire reduced list. This process contributes to the slowdown particularly when repeated for a large number of combinations."
   - **Threshold:** This becomes significant in combination with the above factors, especially when repeated across `O((2*n)^2)` iterations.

### Conclusion

The primary cause of the slow execution is the quadratic growth of combination pairs and repeated sorting operations. These operations become impractical as n approaches the upper limit of its constraint. Focusing on optimizing these segments or reducing redundant operations would be key to improving performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.

Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2·n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking — if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.

Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.

Help the party to determine minimum possible total instability! 

Input

The first line contains one number n (2 ≤ n ≤ 50).

The second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000).

Output

Print minimum possible total instability.

Examples

Input

2
1 2 3 4


Output

1


Input

4
1 3 4 6 3 4 100 200


Output

5

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants from Phase 2 as runtime checks in C++ and integrate them into the given program.

### Phase 3: Implement Checkers for Invariants

**Invariant 1: Combination Complexity**
- When the number of participants `n` approaches its maximum value, the number of operations grows quadratically due to the nested loops.
  
```cpp
void check_combination_invariant(int n) {
    if (n >= 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to high combination complexity!" << endl;
        abort();
    }
}
```

**Invariant 2: Redundant Sorting**
- Sorting is performed repeatedly for each pair, leading to inefficiency when `n` is large.

```cpp
void check_sorting_invariant(int sortCount) {
    if (sortCount > 10000) { // Example threshold based on performance impact
        cerr << "Warning: Performance bottleneck condition triggered due to redundant sorting!" << endl;
        abort();
    }
}
```

**Invariant 3: Tandem Instability Calculation**
- The calculation is done for each list after exclusion of a pair, potentially impacting performance.

```cpp
void check_instability_calc_invariant(int calcIterations) {
    if (calcIterations > 10000) { // Example threshold based on performance impact
        cerr << "Warning: Performance bottleneck condition triggered due to excessive instability calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Program

Now, let's integrate these checkers into the provided program. We'll strategically place them before the heavy computational sections to avoid overhead within loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_combination_invariant(int n) {
    if (n >= 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to high combination complexity!" << endl;
        abort();
    }
}

void check_sorting_invariant(int sortCount) {
    if (sortCount > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to redundant sorting!" << endl;
        abort();
    }
}

void check_instability_calc_invariant(int calcIterations) {
    if (calcIterations > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive instability calculations!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    
    // Check invariant for combination complexity
    check_combination_invariant(n);
    
    vector<int> cnt;
    for (int i = 0; i < n * 2; i++) {
        int x;
        cin >> x;
        cnt.push_back(x);
    }
    
    int ans = INT_MAX;
    int sortCount = 0;  // Track number of sorts
    int calcIterations = 0;  // Track number of calculations
    
    for (int i = 0; i < cnt.size(); i++) {
        for (int e = 0; e < cnt.size(); e++) {
            if (i != e) {
                vector<int> tmp;
                for (int j = 0; j < cnt.size(); j++) {
                    if (j != e && j != i) {
                        tmp.push_back(cnt[j]);
                    }
                }
                sort(tmp.begin(), tmp.end());
                sortCount++;
                
                // Check invariant for redundant sorting
                check_sorting_invariant(sortCount);
                
                int t = 0;
                for (int j = 1; j < tmp.size(); j += 2) {
                    t += (tmp[j] - tmp[j - 1]);
                    calcIterations++;
                }
                
                // Check invariant for excessive instability calculations
                check_instability_calc_invariant(calcIterations);
                
                ans = min(ans, t);
            }
        }
    }
    cout << ans;
    return 0;
}
```

### Explanation:

- **Combination Complexity Check:** Placed after reading `n` to immediately warn for potential complexity issues.
- **Sorting Invariant Check:** Before sorting, we track and check the number of sorts to guarantee efficient execution.
- **Instability Calculation Check:** Placed within the innermost loop to monitor and ensure the calculations don't exceed reasonable thresholds.

These checks help diagnose and correct potential slowdowns due to inefficiencies in the algorithm when handling maximum constraint inputs.

