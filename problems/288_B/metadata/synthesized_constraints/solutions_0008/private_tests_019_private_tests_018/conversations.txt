system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = (long long)1e9 + 7;
int N, K, A[10], B[10];
long long mod_pow(long long n, long long x) {
  long long res = 1;
  while (x) {
    if (x & 1) res = res * n % MOD;
    x >>= 1, n = n * n % MOD;
  }
  return res;
}
int is_valid(int pos, int cnt) {
  if (pos == 0) return B[pos] = 1;
  if (cnt == K) {
    return B[pos] = 0;
  }
  if (B[pos] > -1) return B[pos];
  return B[pos] = is_valid(A[pos], cnt + 1);
}
long long dfs(int x) {
  if (x == K) {
    for (int i = 0; i < K; i++) B[i] = -1;
    bool ok = true;
    for (int i = 0; i < K; i++) {
      ok &= is_valid(i, 0);
    }
    if (ok) return 1;
    return 0;
  }
  long long res = 0;
  for (int i = 0; i < K; i++) {
    A[x] = i;
    res += dfs(x + 1);
  }
  return res;
}
int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr);
  cin >> N >> K;
  cout << dfs(0) * mod_pow(N - K, N - K) % MOD << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = (long long)1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int N, K, A[10], B[10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_pow(long long n, long long x) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (x) { /* line 7 slow_hit_count: 1, fast_hit_count: 4 */
    if (x & 1) res = res * n % MOD; /* line 8 slow_hit_count: 0, fast_hit_count: 3 */
    x >>= 1, n = n * n % MOD; /* line 9 slow_hit_count: 0, fast_hit_count: 3 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int is_valid(int pos, int cnt) { /* line 13 slow_hit_count: 389237120, fast_hit_count: 1 */
  if (pos == 0) return B[pos] = 1; /* line 14 slow_hit_count: 389237120, fast_hit_count: 1 */
  if (cnt == K) { /* line 15 slow_hit_count: 357779840, fast_hit_count: 0 */
    return B[pos] = 0; /* line 16 slow_hit_count: 23656576, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (B[pos] > -1) return B[pos]; /* line 18 slow_hit_count: 334123264, fast_hit_count: 0 */
  return B[pos] = is_valid(A[pos], cnt + 1); /* line 19 slow_hit_count: 255019392, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long dfs(int x) { /* line 21 slow_hit_count: 19173961, fast_hit_count: 2 */
  if (x == K) { /* line 22 slow_hit_count: 19173961, fast_hit_count: 2 */
    for (int i = 0; i < K; i++) B[i] = -1; /* line 23 slow_hit_count: 150994944, fast_hit_count: 2 */
    bool ok = true; /* line 24 slow_hit_count: 16777216, fast_hit_count: 1 */
    for (int i = 0; i < K; i++) { /* line 25 slow_hit_count: 150994944, fast_hit_count: 2 */
      ok &= is_valid(i, 0); /* line 26 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (ok) return 1; /* line 28 slow_hit_count: 16777216, fast_hit_count: 1 */
    return 0; /* line 29 slow_hit_count: 14680064, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 0; /* line 31 slow_hit_count: 2396745, fast_hit_count: 1 */
  for (int i = 0; i < K; i++) { /* line 32 slow_hit_count: 21570705, fast_hit_count: 2 */
    A[x] = i; /* line 33 slow_hit_count: 19173960, fast_hit_count: 1 */
    res += dfs(x + 1); /* line 34 slow_hit_count: 19173960, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 36 slow_hit_count: 2396745, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false), cin.tie(nullptr); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> K; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dfs(0) * mod_pow(N - K, N - K) % MOD << endl; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identification of Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `is_valid` function (line 13) is called an enormous number of times for the slow input (`389,237,120` times) compared to the fast input (`1` time). This indicates that the line `19` call to `is_valid` is particularly expensive.
   - The `dfs` function (line 21) is also called significantly more (`19,173,961` times for the slow input vs `2` times for the fast input), further contributing to the inefficiency.
  
2. **Code Structure:**
   - The `dfs` function is a recursive function that explores possible configurations for the first `K` houses.
   - The line `19` calls `is_valid` recursively, which leads to deeper recursive calls when `cnt` is not yet equal to `K`.

3. **Interaction with Input Constraints:**
   - For the slow input (`8, 8`), `K` equals `N`, which means the recursive functions (`dfs` and `is_valid`) are fully exploring every possible configuration for all houses, resulting in exponential growth in function calls.
   - For the fast input (`8, 1`), the recursive exploration is minimal since `K` is small.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Performance Invariant #1: Recursive Depth and Branching**
   - **Natural Language Description:** "If the parameter `K` is very close to `N`, the recursive exploration in `dfs` and `is_valid` functions becomes exhaustive, leading to a large number of calls and potential performance degradation."
   - **Explanation:** This invariant captures the essence that when `K` is maximized relative to `N`, the recursion depth and branching factor both increase, resulting in exponential time complexity.

2. **Performance Invariant #2: Exhaustive Validity Checks**
   - **Natural Language Description:** "When `K` is large, the `is_valid` function performs exhaustive checks for each configuration path in `dfs`, causing a significant number of recursive calls and potential slowdown."
   - **Explanation:** This highlights the issue that as `K` approaches `N`, the `is_valid` function performs a vast number of checks, compounded by recursive calls.

3. **Performance Invariant #3: High Call Frequency of Recursive Functions**
   - **Natural Language Description:** "A high frequency of recursive calls indicates that the program is exploring many possible configurations, which is exacerbated when `K` is large relative to `N`."
   - **Explanation:** This captures the high call volume seen in the hit counts, tying it to the condition where `K` is large, leading to an exhaustive search space exploration.

### Output

By abstracting these observations, we can encapsulate the inefficiencies observed in the program through these performance invariants. They demonstrate how the problem's structure and input constraints drive potential slowdowns, helping future analyses and adjustments to focus on these critical areas.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance-Characterizing Invariants in C++

Here, we translate the previously derived natural language invariants into C++ checker functions.

1. **Performance Invariant #1: Recursive Depth and Branching**
   - **C++ Code:**
   ```cpp
   void check_recursive_depth_invariant(int K, int N) {
       if (K >= N) {
           cerr << "Warning: Recursive depth and branching factor are high due to K being close to N!" << endl;
           abort();
       }
   }
   ```

2. **Performance Invariant #2: Exhaustive Validity Checks**
   - **C++ Code:**
   ```cpp
   void check_exhaustive_validity_invariant(int K) {
       if (K > 7) { // Assuming K close to 8 creates heavy checks
           cerr << "Warning: Exhaustive validity checks due to large K!" << endl;
           abort();
       }
   }
   ```

3. **Performance Invariant #3: High Call Frequency of Recursive Functions**
   - **C++ Code:**
   ```cpp
   void check_high_call_frequency_invariant(int K, int N) {
       if (K >= N - 1) {
           cerr << "Warning: High frequency of recursive calls!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Functions into the Original C++ Code

Below, the checker functions are integrated into the original program at strategic points to avoid slowing down the execution within performance-critical sections.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = (long long)1e9 + 7;
int N, K, A[10], B[10];

// Checker functions
void check_recursive_depth_invariant(int K, int N) {
    if (K >= N) {
        cerr << "Warning: Recursive depth and branching factor are high due to K being close to N!" << endl;
        abort();
    }
}

void check_exhaustive_validity_invariant(int K) {
    if (K > 7) { // Assuming K close to 8 creates heavy checks
        cerr << "Warning: Exhaustive validity checks due to large K!" << endl;
        abort();
    }
}

void check_high_call_frequency_invariant(int K, int N) {
    if (K >= N - 1) {
        cerr << "Warning: High frequency of recursive calls!" << endl;
        abort();
    }
}

long long mod_pow(long long n, long long x) {
    long long res = 1;
    while (x) {
        if (x & 1) res = res * n % MOD;
        x >>= 1, n = n * n % MOD;
    }
    return res;
}

int is_valid(int pos, int cnt) {
    if (pos == 0) return B[pos] = 1;
    if (cnt == K) {
        return B[pos] = 0;
    }
    if (B[pos] > -1) return B[pos];
    return B[pos] = is_valid(A[pos], cnt + 1);
}

long long dfs(int x) {
    if (x == K) {
        for (int i = 0; i < K; i++) B[i] = -1;
        bool ok = true;
        for (int i = 0; i < K; i++) {
            ok &= is_valid(i, 0);
        }
        if (ok) return 1;
        return 0;
    }
    long long res = 0;
    for (int i = 0; i < K; i++) {
        A[x] = i;
        res += dfs(x + 1);
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false), cin.tie(nullptr);
    cin >> N >> K;

    // Insert checks after input is taken, before any heavy computation
    check_recursive_depth_invariant(K, N);
    check_exhaustive_validity_invariant(K);
    check_high_call_frequency_invariant(K, N);

    cout << dfs(0) * mod_pow(N - K, N - K) % MOD << endl;
    return 0;
}
```

### Comments on Integration:

- **Placement of Checks:** The checks are strategically placed after reading inputs (`N` and `K`) and before entering the recursive computation, ensuring they do not incur additional overhead during critical loops.
- **Fuzzer Utility:** These checks are designed to help a fuzzer trigger warnings when the conditions for potential slowdowns are met, helping identify scenarios that lead to performance bottlenecks.

