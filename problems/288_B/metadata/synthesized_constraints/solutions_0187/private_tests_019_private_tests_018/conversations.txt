system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1000000007;
int add(int a, int b) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
  return a;
}
int rest(int a, int b) {
  a -= b;
  if (a < 0) {
    a += mod;
  }
  return a;
}
int mult(int a, int b) { return ((long long)a * (long long)b) % mod; }
int bpow(int b, int exp) {
  if (exp == 0) {
    return 1;
  }
  if (exp == 1) {
    return b;
  }
  int ret = bpow(b, exp / 2);
  ret = mult(ret, ret);
  if (exp & 1) {
    ret = mult(ret, b);
  }
  return ret;
}
int sol;
int p[10];
bool mk[10];
vector<int> g[10];
void dfs(int u) {
  mk[u] = true;
  for (int i = 0; i < g[u].size(); i++) {
    if (!mk[g[u][i]]) {
      dfs(g[u][i]);
    }
  }
}
int pw;
void solve(int step, int k) {
  if (step > k) {
    for (int i = 1; i <= k; i++) {
      g[i].clear();
      mk[i] = false;
    }
    for (int i = 1; i <= k; i++) {
      g[p[i]].push_back(i);
    }
    dfs(1);
    for (int i = 1; i <= k; i++) {
      if (!mk[i]) {
        return;
      }
    }
    sol = add(sol, pw);
    return;
  }
  for (int i = 1; i <= k; i++) {
    p[step] = i;
    solve(step + 1, k);
  }
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n, k;
  cin >> n >> k;
  pw = 1;
  for (int i = 1; i <= n - k; i++) {
    pw = mult(pw, n - k);
  }
  sol = 0;
  solve(1, k);
  cout << sol << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int add(int a, int b) { /* line 4 slow_hit_count: 2097152, fast_hit_count: 1 */
  a += b; /* line 5 slow_hit_count: 2097152, fast_hit_count: 1 */
  if (a >= mod) { /* line 6 slow_hit_count: 2097152, fast_hit_count: 1 */
    a -= mod; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 9 slow_hit_count: 2097152, fast_hit_count: 1 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int rest(int a, int b) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  a -= b; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < 0) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    a += mod; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int mult(int a, int b) { return ((long long)a * (long long)b) % mod; } /* line 18 slow_hit_count: 0, fast_hit_count: 7 */
int bpow(int b, int exp) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (exp == 0) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (exp == 1) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int ret = bpow(b, exp / 2); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  ret = mult(ret, ret); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (exp & 1) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    ret = mult(ret, b); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int sol; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
int p[10]; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
bool mk[10]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[10]; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int u) { /* line 37 slow_hit_count: 54442368, fast_hit_count: 1 */
  mk[u] = true; /* line 38 slow_hit_count: 54442368, fast_hit_count: 1 */
  for (int i = 0; i < g[u].size(); i++) { /* line 39 slow_hit_count: 98912816, fast_hit_count: 2 */
    if (!mk[g[u][i]]) { /* line 40 slow_hit_count: 44470448, fast_hit_count: 1 */
      dfs(g[u][i]); /* line 41 slow_hit_count: 37665152, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 54442368, fast_hit_count: 1 */
int pw; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int step, int k) { /* line 46 slow_hit_count: 19173961, fast_hit_count: 2 */
  if (step > k) { /* line 47 slow_hit_count: 19173961, fast_hit_count: 2 */
    for (int i = 1; i <= k; i++) { /* line 48 slow_hit_count: 150994944, fast_hit_count: 2 */
      g[i].clear(); /* line 49 slow_hit_count: 134217728, fast_hit_count: 1 */
      mk[i] = false; /* line 50 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= k; i++) { /* line 52 slow_hit_count: 150994944, fast_hit_count: 2 */
      g[p[i]].push_back(i); /* line 53 slow_hit_count: 134217728, fast_hit_count: 1 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    dfs(1); /* line 55 slow_hit_count: 16777216, fast_hit_count: 1 */
    for (int i = 1; i <= k; i++) { /* line 56 slow_hit_count: 55040968, fast_hit_count: 2 */
      if (!mk[i]) { /* line 57 slow_hit_count: 52943816, fast_hit_count: 1 */
        return; /* line 58 slow_hit_count: 14680064, fast_hit_count: 0 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    sol = add(sol, pw); /* line 61 slow_hit_count: 2097152, fast_hit_count: 1 */
    return; /* line 62 slow_hit_count: 2097152, fast_hit_count: 1 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= k; i++) { /* line 64 slow_hit_count: 21570705, fast_hit_count: 2 */
    p[step] = i; /* line 65 slow_hit_count: 19173960, fast_hit_count: 1 */
    solve(step + 1, k); /* line 66 slow_hit_count: 19173960, fast_hit_count: 1 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  pw = 1; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n - k; i++) { /* line 75 slow_hit_count: 1, fast_hit_count: 8 */
    pw = mult(pw, n - k); /* line 76 slow_hit_count: 0, fast_hit_count: 7 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  sol = 0; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  solve(1, k); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  cout << sol << '\n'; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 81 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Comparison of Line-Level Hit Counts:**

1. **Function `dfs(int u)`**: 
   - The line `mk[u] = true;` is hit 54,442,368 times for slow input and only once for fast input.
   - The loop `for (int i = 0; i < g[u].size(); i++)` is hit 98,912,816 times for slow input and only twice for fast input.

2. **Function `solve(int step, int k)`**:
   - The entire function is called 19,173,961 times for slow input and only twice for fast input.
   - The loop `for (int i = 1; i <= k; i++)` is hit 21,570,705 times for slow input and only twice for fast input.
   
3. **Function `add(int a, int b)`**:
   - The function is called 2,097,152 times for slow input and only once for fast input.

**Analysis:**
- The recursive `dfs` function is repeatedly called due to a large branching factor, which results in many function calls and excessive marking of nodes as visited.
- The `solve` function explores permutations extensively when `k` is large, particularly when `k` equals `n` for the slow input, leading to a combinatorial explosion.
- The `add` function's high hit count results from frequent additions in `solve`.

### Phase 2: Derive Performance-Characterizing Invariants

**Invariants Descriptions:**

1. **High Recursion Depth and Branching Factor in DFS:**
   - **Natural Language Invariant:** "If the depth and branching factor of the depth-first search (DFS) are high, particularly when `k` is large, the recursive exploration becomes expensive, leading to a slowdown."
  
2. **Combinatorial Explosion in Permutations:**
   - **Natural Language Invariant:** "When `k` approaches `n`, the number of permutations of house indices grows factorially, causing significant recursive exploration and performance degradation."

3. **Frequent Additions within Critical Loops:**
   - **Natural Language Invariant:** "If the `add` function is called repeatedly in nested or performance-critical loops, like when exploring permutations of house indices, the cumulative arithmetic operations can lead to slowdowns."

**Threshold Examples:**

- **DFS Depth and Branching Factor:** Check for recursive calls in DFS when `k` is large to identify potential slowdowns due to extensive graph traversal.
  
- **Permutations:** The combinatorial nature of the problem indicates that as `k` approaches `n` (e.g., `k = n`), the recursive calls and permutations grow significantly, triggering slow paths.

- **Addition Operations:** Monitor the frequency of additions in the loop to detect possible slowdown when `k` is large, leading to excessive addition operations.

By understanding and checking these invariants, we can predict scenarios that may lead to slow performance and mitigate them accordingly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the checker functions that implement the performance-characterizing invariants:

1. **High Recursion Depth and Branching Factor in DFS:**

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}
```

2. **Combinatorial Explosion in Permutations:**

```cpp
void check_permutation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: permutation_invariant triggered - combinatorial explosion with high k" << endl;
        abort();
    }
}
```

3. **Frequent Additions within Critical Loops:**

```cpp
void check_addition_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: addition_invariant triggered - excessive additions in loop" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Below is the original C++ program with the added performance checkers integrated at effective locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1000000007;

// Checker functions for performance bottlenecks
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_permutation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: permutation_invariant triggered - combinatorial explosion with high k" << endl;
        abort();
    }
}

void check_addition_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: addition_invariant triggered - excessive additions in loop" << endl;
        abort();
    }
}

int add(int a, int b) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
  return a;
}

int rest(int a, int b) {
  a -= b;
  if (a < 0) {
    a += mod;
  }
  return a;
}

int mult(int a, int b) { return ((long long)a * (long long)b) % mod; }

int bpow(int b, int exp) {
  if (exp == 0) {
    return 1;
  }
  if (exp == 1) {
    return b;
  }
  int ret = bpow(b, exp / 2);
  ret = mult(ret, ret);
  if (exp & 1) {
    ret = mult(ret, b);
  }
  return ret;
}

int sol;
int p[10];
bool mk[10];
vector<int> g[10];

void dfs(int u) {
  mk[u] = true;

  // Check if the DFS is creating too many recursive calls (high branching factor)
  check_dfs_invariant(g[u].size() > 10);

  for (int i = 0; i < g[u].size(); i++) {
    if (!mk[g[u][i]]) {
      dfs(g[u][i]);
    }
  }
}

int pw;

void solve(int step, int k) {
  if (step > k) {
    for (int i = 1; i <= k; i++) {
      g[i].clear();
      mk[i] = false;
    }
    for (int i = 1; i <= k; i++) {
      g[p[i]].push_back(i);
    }
    dfs(1);
    for (int i = 1; i <= k; i++) {
      if (!mk[i]) {
        return;
      }
    }

    // Check if excessive additions are happening
    check_addition_invariant(sol > 1000000);

    sol = add(sol, pw);
    return;
  }

  // Check for combinatorial explosion in permutations
  check_permutation_invariant(step > 8);

  for (int i = 1; i <= k; i++) {
    p[step] = i;
    solve(step + 1, k);
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n, k;
  cin >> n >> k;

  // Check if k is approaching the limit (combinatorial explosion risk)
  check_permutation_invariant(k > 8);

  pw = 1;
  for (int i = 1; i <= n - k; i++) {
    pw = mult(pw, n - k);
  }
  sol = 0;
  solve(1, k);
  cout << sol << '\n';
}
```

**Explanation of Checker Integration:**

- **DFS Invariant:** The check is placed inside the `dfs` function to monitor the size of the graph list `g[u]`, which indicates a high branching factor.
  
- **Permutation Invariant:** Integrated at the start of the `solve` function and `main` function to catch when `step` exceeds reasonable bounds or when `k` is too large, leading to combinatorial explosions.

- **Addition Invariant:** The check is placed before the `add` function call in `solve` to monitor the size of `sol`, preventing excessive addition operations. 

These checks help ensure the program identifies potential performance bottlenecks during execution with varying inputs.

