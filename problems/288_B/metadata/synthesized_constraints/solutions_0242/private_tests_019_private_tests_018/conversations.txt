system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using LL = long long;
const int M = 1e2 + 30;
const int N = 1003;
const int mo = 1e9 + 7;
const LL inf = 1e16 + 1;
LL qpow(LL a, LL b) {
  LL res = 1;
  while (b > 0) {
    if (b & 1) res = res * a % mo;
    b >>= 1;
    a = a * a % mo;
  }
  return res;
}
char s[M][M];
int a[M];
int vis[M];
LL res = 0;
bool check(int u, int n) {
  for (int i = 1; i <= n; i++) vis[i] = 0;
  while (!vis[u]) {
    if (u == 1) return true;
    vis[u] = 1;
    u = a[u];
  }
  return false;
}
void dfs(int u, int n) {
  if (u > n) {
    int flag = 0;
    for (int i = 1; i <= n; i++) {
      if (!check(i, n)) {
        flag = 1;
        break;
      }
    }
    if (!flag) res++;
    return;
  }
  for (int i = 1; i <= n; i++) {
    a[u] = i;
    dfs(u + 1, n);
  }
}
void test() {
  for (int n = 2; n <= 6; n++) {
    cout << n << ": ";
    res = 0;
    dfs(1, n);
    cout << res << endl;
  }
}
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  LL tmp = qpow(n - k, n - k);
  dfs(1, k);
  res = res * tmp % mo;
  printf("%I64d\n", res);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 8


(G.2) Fast Input

8 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using LL = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 1e2 + 30; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1003; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int mo = 1e9 + 7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const LL inf = 1e16 + 1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
LL qpow(LL a, LL b) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  LL res = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (b > 0) { /* line 10 slow_hit_count: 1, fast_hit_count: 4 */
    if (b & 1) res = res * a % mo; /* line 11 slow_hit_count: 0, fast_hit_count: 3 */
    b >>= 1; /* line 12 slow_hit_count: 0, fast_hit_count: 3 */
    a = a * a % mo; /* line 13 slow_hit_count: 0, fast_hit_count: 3 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
char s[M][M]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int a[M]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int vis[M]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
LL res = 0; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int u, int n) { /* line 21 slow_hit_count: 52943816, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) vis[i] = 0; /* line 22 slow_hit_count: 476494344, fast_hit_count: 2 */
  while (!vis[u]) { /* line 23 slow_hit_count: 141989032, fast_hit_count: 1 */
    if (u == 1) return true; /* line 24 slow_hit_count: 127308968, fast_hit_count: 1 */
    vis[u] = 1; /* line 25 slow_hit_count: 89045216, fast_hit_count: 0 */
    u = a[u]; /* line 26 slow_hit_count: 89045216, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 28 slow_hit_count: 14680064, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int u, int n) { /* line 30 slow_hit_count: 19173961, fast_hit_count: 2 */
  if (u > n) { /* line 31 slow_hit_count: 19173961, fast_hit_count: 2 */
    int flag = 0; /* line 32 slow_hit_count: 16777216, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 33 slow_hit_count: 55040968, fast_hit_count: 2 */
      if (!check(i, n)) { /* line 34 slow_hit_count: 52943816, fast_hit_count: 1 */
        flag = 1; /* line 35 slow_hit_count: 14680064, fast_hit_count: 0 */
        break; /* line 36 slow_hit_count: 14680064, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (!flag) res++; /* line 39 slow_hit_count: 16777216, fast_hit_count: 1 */
    return; /* line 40 slow_hit_count: 16777216, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 42 slow_hit_count: 21570705, fast_hit_count: 2 */
    a[u] = i; /* line 43 slow_hit_count: 19173960, fast_hit_count: 1 */
    dfs(u + 1, n); /* line 44 slow_hit_count: 19173960, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
void test() { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int n = 2; n <= 6; n++) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    cout << n << ": "; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    res = 0; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    dfs(1, n); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  LL tmp = qpow(n - k, n - k); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  dfs(1, k); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  res = res * tmp % mo; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%I64d\n", res); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks and derive the performance-characterizing invariants, let's go through the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Line-Level Hit Counts Analysis:**
   - The `check` function (lines 21-28) is called significantly more times in the slow run (52,943,816 hits) compared to the fast run (1 hit).
   - The `dfs` function (lines 30-45) is also called a considerable number of times (19,173,961 hits) in the slow input compared to the fast input (2 hits).
   - The loop within the `dfs` function (lines 42-45) and the nested call to `check` for each permutation iteration are major contributors to the hit count.

2. **Interaction with Data Structures and Input Constraints:**
   - The `dfs` function employs a recursive depth-first search to generate permutations of house numbers for plaques from 1 to `k`.
   - Each permutation checks if it satisfies the specified conditions using the `check` function. This is inefficient as `k` approaches `n` due to the factorial growth of permutations (`k!`).

### Phase 2: Derive Performance-Characterizing Invariants
1. **Invariants in Natural Language:**
   - **Invariant 1:** "If `k` is close to `n`, the code may slow down significantly because it generates a large number of permutations (`k!`) to check conditions, leading to extensive recursive calls and state checks."
   - **Invariant 2:** "When `k` is large, especially near the upper constraint (e.g., `k = n`), the repeated checking of permutations against conditions results in high computational overhead due to factorial growth."

2. **Explanation of Conditions:**
   - For `k` close to `n`, the number of ways to arrange house plaques (`k!`) becomes very large, causing the recursive `dfs` calls and `check` validations to multiply dramatically.
   - The nested loops in `dfs` and `check` exacerbate this issue, especially when the setup approaches the constraint limits, making the problem factorially expensive.

3. **Thresholds and Input Patterns:**
   - The slow path is triggered when `k` is close to the maximum value of `n`, as this maximizes the number of permutations calculated.
   - The inefficiency is less about the individual size of `n` or `k` but rather their relative closeness and the corresponding factorial permutation space.

By understanding these conditions, developers can anticipate and mitigate potential slowdowns by optimizing permutation checks or limiting `k` to avoid factorial blowup in recursive scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1 ≤ pi ≤ n).

Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.

We know that:

  1. When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1. 
  2. When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1. 
  3. When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. 



You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109 + 7).

Input

The single line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ min(8, n)) — the number of the houses and the number k from the statement.

Output

In a single line print a single integer — the answer to the problem modulo 1000000007 (109 + 7).

Examples

Input

5 2


Output

54


Input

7 4


Output

1728

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previous analysis, let's implement the checker functions for the identified performance-characterizing invariants:

#### Invariant 1: Large Permutation Space
- **Description:** If `k` is close to `n`, the code may slow down significantly due to the factorial growth of permutations.
- **Checker Code:**
```cpp
void check_permutation_invariant(int k, int n) {
    if (k > n - 2) {  // If k is very close to n, this likely triggers a slowdown.
        cerr << "Warning: Performance bottleneck condition triggered - large permutation space!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Recursive Calls
- **Description:** When `k` is large, especially near the upper constraint (`k = n`), the repeated checking results in high computational overhead.
- **Checker Code:**
```cpp
void check_recursive_invariant(int k) {
    if (k >= 7) {  // Assume k is large enough to cause significant recursive overhead.
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Below is the modified C++ code with integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;
using LL = long long;
const int M = 1e2 + 30;
const int N = 1003;
const int mo = 1e9 + 7;
const LL inf = 1e16 + 1;

// Check for large permutation space
void check_permutation_invariant(int k, int n) {
    if (k > n - 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large permutation space!" << endl;
        abort();
    }
}

// Check for excessive recursive calls
void check_recursive_invariant(int k) {
    if (k >= 7) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

LL qpow(LL a, LL b) {
    LL res = 1;
    while (b > 0) {
        if (b & 1) res = res * a % mo;
        b >>= 1;
        a = a * a % mo;
    }
    return res;
}

char s[M][M];
int a[M];
int vis[M];
LL res = 0;

bool check(int u, int n) {
    for (int i = 1; i <= n; i++) vis[i] = 0;
    while (!vis[u]) {
        if (u == 1) return true;
        vis[u] = 1;
        u = a[u];
    }
    return false;
}

void dfs(int u, int n) {
    if (u > n) {
        int flag = 0;
        for (int i = 1; i <= n; i++) {
            if (!check(i, n)) {
                flag = 1;
                break;
            }
        }
        if (!flag) res++;
        return;
    }
    for (int i = 1; i <= n; i++) {
        a[u] = i;
        dfs(u + 1, n);
    }
}

int main() {
    int n, k;
    scanf("%d%d", &n, &k);

    // Check performance invariants
    check_permutation_invariant(k, n);
    check_recursive_invariant(k);

    LL tmp = qpow(n - k, n - k);
    dfs(1, k);
    res = res * tmp % mo;
    printf("%I64d\n", res);
    return 0;
}
```

### Explanation of Integration
- **Invariant Checks:** The checks are placed immediately after reading the input values for `n` and `k` to ensure early detection of potential performance bottlenecks. This avoids adding overhead within the recursive `dfs` function.
- **Thresholds:** The conditions for triggering the checks are based on `k` being very close to `n` or `k` being large enough to significantly impact performance due to recursive depth, considering the constraints provided.

