system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp plays "Game 23". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.

Print the number of moves needed to transform n to m. Print -1 if it is impossible to do so.

It is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).

Input

The only line of the input contains two integers n and m (1 ≤ n ≤ m ≤ 5⋅10^8).

Output

Print the number of moves to transform n to m, or -1 if there is no solution.

Examples

Input


120 51840


Output


7


Input


42 42


Output


0


Input


48 72


Output


-1

Note

In the first example, the possible sequence of moves is: 120 → 240 → 720 → 1440 → 4320 → 12960 → 25920 → 51840. The are 7 steps in total.

In the second example, no moves are needed. Thus, the answer is 0.

In the third example, it is impossible to transform 48 to 72.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool sc[10000007];
vector<long long int> pr;
void sieve() {
  for (long long int i = 2; i * i < 10000007; i++) {
    if (!sc[i]) {
      for (long long int j = i * i; j < 10000007; j += i) sc[j] = 1;
    }
  }
  pr.push_back(2);
  for (long long int i = 3; i < 10000007; i += 2)
    if (!sc[i]) pr.push_back(i);
}
pair<long long int, long long int> pf[10000007];
void pri_fact(long long int n) {
  long long int i, u = 0;
  for (i = 0; i < pr.size() && n != 1; i++) {
    long long int c = 0;
    while (!(n % pr[i])) {
      n /= pr[i];
      c++;
    }
    if (c) {
      pf[u].first = pr[i];
      pf[u].second = c;
      u++;
    }
  }
  if (n > 1) {
    pf[u].first = n;
    pf[u].second = 1;
  }
}
int main() {
  long long int x, y;
  cin >> x >> y;
  if (y % x != 0) {
    cout << -1;
    return 0;
  }
  if (x == y) {
    cout << 0;
    return 0;
  }
  sieve();
  long long int z = y / x;
  pri_fact(z);
  long long int s = pf[0].second + pf[1].second;
  if ((long long int)(pow(pf[0].first, pf[0].second) *
                      pow(pf[1].first, pf[1].second)) == z) {
    long long int ct = 0, tc = 0, i;
    for (i = 0; pf[i].first != 0; i++) {
      ct++;
      if (pf[i].first == 2) {
        tc = 0;
      } else if (pf[i].first == 3) {
        tc = 0;
      } else {
        tc = 1;
      }
    }
    if (ct > 2) {
      cout << -1;
      return 0;
    } else if (tc == 1) {
      cout << -1;
      return 0;
    }
    cout << s;
    return 0;
  } else
    cout << -1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 491280007


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool sc[10000007]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> pr; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void sieve() { /* line 5 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long int i = 2; i * i < 10000007; i++) { /* line 6 slow_hit_count: 3162, fast_hit_count: 0 */
    if (!sc[i]) { /* line 7 slow_hit_count: 3161, fast_hit_count: 0 */
      for (long long int j = i * i; j < 10000007; j += i) sc[j] = 1; /* line 8 slow_hit_count: 22850511, fast_hit_count: 0 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  pr.push_back(2); /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long int i = 3; i < 10000007; i += 2) /* line 12 slow_hit_count: 5000003, fast_hit_count: 0 */
    if (!sc[i]) pr.push_back(i); /* line 13 slow_hit_count: 5000002, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
pair<long long int, long long int> pf[10000007]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void pri_fact(long long int n) { /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
  long long int i, u = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 0; i < pr.size() && n != 1; i++) { /* line 18 slow_hit_count: 664580, fast_hit_count: 0 */
    long long int c = 0; /* line 19 slow_hit_count: 664579, fast_hit_count: 0 */
    while (!(n % pr[i])) { /* line 20 slow_hit_count: 664579, fast_hit_count: 0 */
      n /= pr[i]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      c++; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (c) { /* line 24 slow_hit_count: 664579, fast_hit_count: 0 */
      pf[u].first = pr[i]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      pf[u].second = c; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      u++; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 1) { /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    pf[u].first = n; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    pf[u].second = 1; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  long long int x, y; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> y; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  if (y % x != 0) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == y) { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  sieve(); /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  long long int z = y / x; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  pri_fact(z); /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  long long int s = pf[0].second + pf[1].second; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  if ((long long int)(pow(pf[0].first, pf[0].second) * /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
                      pow(pf[1].first, pf[1].second)) == z) { /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
    long long int ct = 0, tc = 0, i; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
    for (i = 0; pf[i].first != 0; i++) { /* line 53 slow_hit_count: 2, fast_hit_count: 0 */
      ct++; /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
      if (pf[i].first == 2) { /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
        tc = 0; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (pf[i].first == 3) { /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
        tc = 0; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        tc = 1; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    if (ct > 2) { /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
      cout << -1; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (tc == 1) { /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
      cout << -1; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    cout << s; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 75 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck of the given C program, let's go through a systematic analysis of the code and the hit counts provided for the fast and slow inputs. We need to identify the lines or sections of code that are contributing to the slowdown when processing the slow input, and then derive performance-characterizing invariants from these observations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Sieve Function Call (Lines 5-14):**
   - The `sieve` function is executed once during the slow run and involves a loop running approximately 3162 times (line 6) and another nested loop that executes 22,850,511 times (line 8). This indicates a computationally expensive operation for finding primes up to a large number.
   - None of these computations happen during the fast input processing, as the sieve is not needed (since \( n = m \)).

2. **Prime Factorization (Lines 16-34):**
   - The `pri_fact` function also shows significant execution time with loops running numerous times (line 18 with 664,580 hits). This function is responsible for factorizing the number `z` which is derived from `y/x`.
   - These computations are again absent in the fast input execution.

3. **Computation Checks and Conditions (Lines 50-68):**
   - These lines involve checks and computations related to whether the transformation of `n` to `m` is possible using only the prime factors 2 and 3. This includes checking if the number of prime factors exceeds two and ensuring the factors are 2 or 3.
   - Lines 63-68 are particularly relevant as they directly lead to returning `-1` for the slow input.

The significant difference in line hits between the slow and fast inputs suggests that the performance bottleneck arises from the complex operations in `sieve` and `pri_fact`, which are executed when the transformation involves large numbers or many steps.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Large Prime Factorization:**
   - **Natural Language Invariant**: "When the ratio \( \frac{m}{n} \) has large prime factors or numerous prime factors, the code may experience a slowdown due to extensive prime factorization operations."
   
2. **High Exponentiation in Checks:**
   - **Natural Language Invariant**: "If the code frequently checks and computes powers of numbers to validate factorization, especially for large values of \( m \), it may lead to significant slowdowns."

3. **Extensive Sieve Calculations:**
   - **Natural Language Invariant**: "The program executes a computationally expensive sieve operation when large numbers are involved, potentially slowing down performance significantly."

### Summary of Conditions

- The slowdown is primarily triggered by the sheer size and complexity of the number `m` relative to `n`, leading to extensive sieve operations and prime factorization.
- The program is inefficient when handling cases where `m` has large or numerous prime factors that need to be checked or computed through exponentiation or other mathematical operations.
- The performance bottlenecks are exacerbated by the necessity to verify transformation feasibility via these computational paths, especially when `m` significantly differs from `n`. 

By understanding these conditions, developers can focus on optimizing or restructuring the sieve and prime factorization approach to minimize performance hits for large and complex numerical transformations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp plays "Game 23". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.

Print the number of moves needed to transform n to m. Print -1 if it is impossible to do so.

It is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).

Input

The only line of the input contains two integers n and m (1 ≤ n ≤ m ≤ 5⋅10^8).

Output

Print the number of moves to transform n to m, or -1 if there is no solution.

Examples

Input


120 51840


Output


7


Input


42 42


Output


0


Input


48 72


Output


-1

Note

In the first example, the possible sequence of moves is: 120 → 240 → 720 → 1440 → 4320 → 12960 → 25920 → 51840. The are 7 steps in total.

In the second example, no moves are needed. Thus, the answer is 0.

In the third example, it is impossible to transform 48 to 72.

Solution (C++ code):
{solution}


assistant: To fulfill the task, we will implement runtime checks based on the previously inferred performance-characterizing invariants. Here is how we will approach it:

### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants we derived in Phase 2, let's write C++ code snippets that check these conditions at runtime.

#### Invariant 1: Large Prime Factorization
**Condition**: When the ratio \( \frac{m}{n} \) has large prime factors or numerous prime factors.

```cpp
void check_large_prime_factorization(bool condition) {
    if (condition) {
        cerr << "Warning: Large prime factorization detected, potential performance bottleneck!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Exponentiation Checks
**Condition**: If the program frequently checks and computes powers of numbers to validate factorization, especially for large values of \( m \).

```cpp
void check_high_exponentiation(bool condition) {
    if (condition) {
        cerr << "Warning: High exponentiation computation detected, potential performance slowdown!" << endl;
        abort();
    }
}
```

#### Invariant 3: Extensive Sieve Calculations
**Condition**: The program executes an expensive sieve operation when large numbers are involved.

```cpp
void check_sieve_calculation(bool condition) {
    if (condition) {
        cerr << "Warning: Extensive sieve calculations detected, potential performance bottleneck!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Program

Now, let's integrate the checker functions into the original C++ code. The checks should be placed strategically to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

bool sc[10000007];
vector<long long int> pr;

void sieve() {
    for (long long int i = 2; i * i < 10000007; i++) {
        if (!sc[i]) {
            for (long long int j = i * i; j < 10000007; j += i) sc[j] = 1;
        }
    }
    pr.push_back(2);
    for (long long int i = 3; i < 10000007; i += 2)
        if (!sc[i]) pr.push_back(i);
}

pair<long long int, long long int> pf[10000007];

void pri_fact(long long int n) {
    long long int i, u = 0;
    for (i = 0; i < pr.size() && n != 1; i++) {
        long long int c = 0;
        while (!(n % pr[i])) {
            n /= pr[i];
            c++;
        }
        if (c) {
            pf[u].first = pr[i];
            pf[u].second = c;
            u++;
        }
    }
    if (n > 1) {
        pf[u].first = n;
        pf[u].second = 1;
    }
}

// Checker functions based on performance invariants

void check_large_prime_factorization(bool condition) {
    if (condition) {
        cerr << "Warning: Large prime factorization detected, potential performance bottleneck!" << endl;
        abort();
    }
}

void check_high_exponentiation(bool condition) {
    if (condition) {
        cerr << "Warning: High exponentiation computation detected, potential performance slowdown!" << endl;
        abort();
    }
}

void check_sieve_calculation(bool condition) {
    if (condition) {
        cerr << "Warning: Extensive sieve calculations detected, potential performance bottleneck!" << endl;
        abort();
    }
}

int main() {
    long long int x, y;
    cin >> x >> y;

    if (y % x != 0) {
        cout << -1;
        return 0;
    }

    if (x == y) {
        cout << 0;
        return 0;
    }

    // Check for potential sieve bottleneck
    check_sieve_calculation(y / x > 1000000);  // Arbitrary threshold for extensive sieve

    sieve();

    long long int z = y / x;
    pri_fact(z);

    // Check for large prime factorization before further processing
    check_large_prime_factorization(pf[0].first > 100000);  // Arbitrary large prime threshold

    long long int s = pf[0].second + pf[1].second;

    // Check for high exponentiation
    check_high_exponentiation(s > 20);  // Arbitrary threshold for high exponentiation

    if ((long long int)(pow(pf[0].first, pf[0].second) * 
                        pow(pf[1].first, pf[1].second)) == z) {
        long long int ct = 0, tc = 0, i;
        for (i = 0; pf[i].first != 0; i++) {
            ct++;
            if (pf[i].first == 2) {
                tc = 0;
            } else if (pf[i].first == 3) {
                tc = 0;
            } else {
                tc = 1;
            }
        }
        if (ct > 2) {
            cout << -1;
            return 0;
        } else if (tc == 1) {
            cout << -1;
            return 0;
        }
        cout << s;
        return 0;
    } else
        cout << -1;
    return 0;
}
```

**Explanation of Integrated Checks:**

- **Sieve Calculation Check:** Placed before calling the `sieve` function to detect potential large computations.
- **Prime Factorization Check:** After `pri_fact` to ensure we are not dealing with unreasonably large prime factors.
- **High Exponentiation Check:** Before performing the power computations to ensure the operations are not too costly.

These strategic placements ensure the program detects potential slowdowns before they happen, thereby helping in debugging and optimizing performance.

