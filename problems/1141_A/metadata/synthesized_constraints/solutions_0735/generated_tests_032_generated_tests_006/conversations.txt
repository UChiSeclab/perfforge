system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp plays "Game 23". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.

Print the number of moves needed to transform n to m. Print -1 if it is impossible to do so.

It is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).

Input

The only line of the input contains two integers n and m (1 ≤ n ≤ m ≤ 5⋅10^8).

Output

Print the number of moves to transform n to m, or -1 if there is no solution.

Examples

Input


120 51840


Output


7


Input


42 42


Output


0


Input


48 72


Output


-1

Note

In the first example, the possible sequence of moves is: 120 → 240 → 720 → 1440 → 4320 → 12960 → 25920 → 51840. The are 7 steps in total.

In the second example, no moves are needed. Thus, the answer is 0.

In the third example, it is impossible to transform 48 to 72.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int m, n;
int co(int num, int in) {
  if (num == m) return in;
  if (num > m) return -1;
  in++;
  int in1 = co(num * 2, in);
  int in2 = co(num * 3, in);
  if (in1 == -1 && in2 == -1)
    return -1;
  else
    return in1 == -1 ? in2 : in1;
}
int main() {
  cin >> n >> m;
  cout << co(n, 0);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 499999993


(G.2) Fast Input

2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int m, n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int co(int num, int in) { /* line 4 slow_hit_count: 12541035, fast_hit_count: 1 */
  if (num == m) return in; /* line 5 slow_hit_count: 12541035, fast_hit_count: 1 */
  if (num > m) return -1; /* line 6 slow_hit_count: 12541035, fast_hit_count: 0 */
  in++; /* line 7 slow_hit_count: 6270517, fast_hit_count: 0 */
  int in1 = co(num * 2, in); /* line 8 slow_hit_count: 6270517, fast_hit_count: 0 */
  int in2 = co(num * 3, in); /* line 9 slow_hit_count: 6270517, fast_hit_count: 0 */
  if (in1 == -1 && in2 == -1) /* line 10 slow_hit_count: 6270517, fast_hit_count: 0 */
    return -1; /* line 11 slow_hit_count: 6270517, fast_hit_count: 0 */
  else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return in1 == -1 ? in2 : in1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cout << co(n, 0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the slow performance of the given C program, let's analyze the code execution and derive performance-characterizing invariants based on the hit count differences between the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `co` function has a very high hit count for the slow input compared to the fast input.
   - Lines within the `co` function, particularly the recursive calls (`num * 2` and `num * 3`), are hit frequently during the slow input execution.

2. **Code Behavior:**
   - The program uses recursion to explore multiplying the current number `num` by 2 or 3 until it potentially reaches `m`.
   - For the slow input, the recursion explores a large space due to the high value of `m` (`499999993`), causing a significant number of recursive calls and thus, a high hit count.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following invariants describe the conditions under which the program's performance degrades:

1. **Large Multiplicative Space:**
   - **Invariant:** "If the target number `m` is much larger than the initial number `n` and close to the upper constraint (`5⋅10^8`), the recursive function explores a vast multiplicative space, significantly slowing down the execution."
   - **Explanation:** The recursion branches out exponentially as it tries all possible combinations of multiplying by 2 and 3 to reach `m`. This causes a combinatorial explosion in the number of recursive calls, particularly when `m` is large and not easily reachable from `n` via simple multiplications of 2 and 3.

2. **Recursive Depth and Branching:**
   - **Invariant:** "If a high depth of recursion is needed to reach `m` from `n`, with each recursion step involving branching (via multiplication by 2 or 3), the execution time may increase substantially."
   - **Explanation:** Recursive calls multiply `num` by 2 or 3, creating multiple branches at each recursion depth, leading to a high number of calls when `m` is not easily reachable, especially if `m` is a large prime number or a product of large primes that cannot be easily decomposed into factors of 2 or 3.

3. **Unreachable Targets:**
   - **Invariant:** "If `m` cannot be expressed solely as a product of `n` multiplied by powers of 2 and 3, the recursion continues to explore unnecessarily deep paths, causing inefficiency."
   - **Explanation:** For values of `m` that cannot be formed by multiplying `n` by combinations of 2 and 3, the function redundantly explores all paths without success, wasting computational resources.

These invariants highlight conditions that could trigger slow performance and apply broadly to other inputs within the constraints, without relying on specific values. The program's inefficiency stems from excessive recursion due to factors of `m` not aligning well with factors of 2 and 3, particularly when `m` is very large.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp plays "Game 23". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.

Print the number of moves needed to transform n to m. Print -1 if it is impossible to do so.

It is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).

Input

The only line of the input contains two integers n and m (1 ≤ n ≤ m ≤ 5⋅10^8).

Output

Print the number of moves to transform n to m, or -1 if there is no solution.

Examples

Input


120 51840


Output


7


Input


42 42


Output


0


Input


48 72


Output


-1

Note

In the first example, the possible sequence of moves is: 120 → 240 → 720 → 1440 → 4320 → 12960 → 25920 → 51840. The are 7 steps in total.

In the second example, no moves are needed. Thus, the answer is 0.

In the third example, it is impossible to transform 48 to 72.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Code

For each natural language invariant derived, we will implement a corresponding checker in C++. Here is how each invariant translates into checker code:

1. **Large Multiplicative Space:**
   ```cpp
   void check_large_target_invariant(int n, int m) {
       if (m > n && m > 1e8) { // Assuming a heuristic threshold for a large m
           cerr << "Warning: Performance bottleneck condition triggered - large target m relative to n!" << endl;
           abort();
       }
   }
   ```

2. **Recursive Depth and Branching:**
   ```cpp
   void check_recursive_depth_invariant(int n, int m) {
       int potentialDepth = 0;
       int temp = m;
       while (temp > n && (temp % 2 == 0 || temp % 3 == 0)) {
           if (temp % 2 == 0) temp /= 2;
           else if (temp % 3 == 0) temp /= 3;
           potentialDepth++;
       }
       if (potentialDepth > 50) { // Arbitrary yet reasonable threshold
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

3. **Unreachable Targets:**
   ```cpp
   void check_unreachable_target_invariant(int n, int m) {
       int temp = m;
       while (temp % 2 == 0) temp /= 2;
       while (temp % 3 == 0) temp /= 3;
       if (temp != n && temp != 1) {
           cerr << "Warning: Performance bottleneck condition triggered - target m seems unreachable!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Now, we integrate these checkers into the original C++ program. The checks should be placed after reading the input, but before the recursion starts.

```cpp
#include <iostream>
using namespace std;

int m, n;

int co(int num, int in) {
  if (num == m) return in;
  if (num > m) return -1;
  in++;
  int in1 = co(num * 2, in);
  int in2 = co(num * 3, in);
  if (in1 == -1 && in2 == -1)
    return -1;
  else
    return in1 == -1 ? in2 : in1;
}

void check_large_target_invariant(int n, int m) {
    if (m > n && m > 1e8) { // Assuming a heuristic threshold for a large m
        cerr << "Warning: Performance bottleneck condition triggered - large target m relative to n!" << endl;
        abort();
    }
}

void check_recursive_depth_invariant(int n, int m) {
    int potentialDepth = 0;
    int temp = m;
    while (temp > n && (temp % 2 == 0 || temp % 3 == 0)) {
        if (temp % 2 == 0) temp /= 2;
        else if (temp % 3 == 0) temp /= 3;
        potentialDepth++;
    }
    if (potentialDepth > 50) { // Arbitrary yet reasonable threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_unreachable_target_invariant(int n, int m) {
    int temp = m;
    while (temp % 2 == 0) temp /= 2;
    while (temp % 3 == 0) temp /= 3;
    if (temp != n && temp != 1) {
        cerr << "Warning: Performance bottleneck condition triggered - target m seems unreachable!" << endl;
        abort();
    }
}

int main() {
  cin >> n >> m;

  // Perform invariant checks before starting recursion
  check_large_target_invariant(n, m);
  check_recursive_depth_invariant(n, m);
  check_unreachable_target_invariant(n, m);

  cout << co(n, 0);
  return 0;
}
```

### Explanation

- The checks are added directly after reading inputs in the `main` function.
- These checks ensure that potentially problematic scenarios are caught early, allowing for aborting execution and providing informative debug messages.
- By placing checks outside tight loops and recursive calls, we minimize performance overhead while still catching scenarios that can lead to inefficiencies.

