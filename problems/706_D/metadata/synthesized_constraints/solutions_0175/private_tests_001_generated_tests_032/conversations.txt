system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int TRIE[200005 * 32 * 2][2];
int isword[200005 * 32 * 2];
int nxt;
void ins(string &s) {
  int v = 0;
  for (int i = 0; i < s.size(); i++) {
    if (TRIE[v][s[i] - '0'] == -1) TRIE[v][s[i] - '0'] = nxt++;
    isword[v]++;
    v = TRIE[v][s[i] - '0'];
  }
  isword[v]++;
}
void del(string &s) {
  int v = 0;
  int u;
  for (int i = 0; i < s.size(); i++) {
    if (isword[v] > 0) isword[v]--;
    if (isword[v] == 0 && i > 0) TRIE[u][s[i - 1] - '0'] = -1;
    u = v;
    v = TRIE[v][s[i] - '0'];
  }
  if (isword[v] > 0) isword[v]--;
  if (isword[v] == 0) TRIE[u][s[31] - '0'] = -1;
}
string bin(int a) {
  string k = "";
  while (a) {
    k += to_string(a % 2);
    a /= 2;
  }
  int u = k.length();
  for (int i = 0; i < 32 - u; i++) k += "0";
  reverse(k.begin(), k.end());
  return k;
}
long long int query(string &s) {
  int v = 0;
  string k = "";
  for (int i = 0; i < s.size(); i++) {
    if (TRIE[v][1 - (s[i] - '0')] != -1) {
      v = TRIE[v][1 - (s[i] - '0')];
      if (s[i] == '0')
        k += "1";
      else
        k += "0";
    } else {
      v = TRIE[v][s[i] - '0'];
      k += s[i];
    }
  }
  long long int val = 0, bit;
  for (int i = 0; i <= 31; i++) {
    bit = (s[i] == k[i]) ? 0 : 1;
    val <<= 1;
    val += bit;
  }
  return val;
}
int main() {
  memset(isword, 0, sizeof(isword));
  memset(TRIE, -1, sizeof(TRIE));
  isword[0] = 1;
  nxt = 1;
  int q, a;
  string s;
  cin >> q;
  string k = bin(0);
  ins(k);
  for (int i = 0; i < q; i++) {
    cin >> s >> a;
    string k = bin(a);
    if (s == "+")
      ins(k);
    else if (s == "-")
      del(k);
    else
      cout << query(k) << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
? 1
+ 941492387
+ 72235422
+ 449924898
+ 783332532
- 941492387
- 72235422


(G.2) Fast Input

1
? 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int TRIE[200005 * 32 * 2][2]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int isword[200005 * 32 * 2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int nxt; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void ins(string &s) { /* line 6 slow_hit_count: 5, fast_hit_count: 1 */
  int v = 0; /* line 7 slow_hit_count: 5, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 8 slow_hit_count: 165, fast_hit_count: 33 */
    if (TRIE[v][s[i] - '0'] == -1) TRIE[v][s[i] - '0'] = nxt++; /* line 9 slow_hit_count: 160, fast_hit_count: 32 */
    isword[v]++; /* line 10 slow_hit_count: 160, fast_hit_count: 32 */
    v = TRIE[v][s[i] - '0']; /* line 11 slow_hit_count: 160, fast_hit_count: 32 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  isword[v]++; /* line 13 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 5, fast_hit_count: 1 */
void del(string &s) { /* line 15 slow_hit_count: 2, fast_hit_count: 0 */
  int v = 0; /* line 16 slow_hit_count: 2, fast_hit_count: 0 */
  int u; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < s.size(); i++) { /* line 18 slow_hit_count: 66, fast_hit_count: 0 */
    if (isword[v] > 0) isword[v]--; /* line 19 slow_hit_count: 64, fast_hit_count: 0 */
    if (isword[v] == 0 && i > 0) TRIE[u][s[i - 1] - '0'] = -1; /* line 20 slow_hit_count: 64, fast_hit_count: 0 */
    u = v; /* line 21 slow_hit_count: 64, fast_hit_count: 0 */
    v = TRIE[v][s[i] - '0']; /* line 22 slow_hit_count: 64, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (isword[v] > 0) isword[v]--; /* line 24 slow_hit_count: 2, fast_hit_count: 0 */
  if (isword[v] == 0) TRIE[u][s[31] - '0'] = -1; /* line 25 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 2, fast_hit_count: 0 */
string bin(int a) { /* line 27 slow_hit_count: 8, fast_hit_count: 2 */
  string k = ""; /* line 28 slow_hit_count: 16, fast_hit_count: 4 */
  while (a) { /* line 29 slow_hit_count: 182, fast_hit_count: 3 */
    k += to_string(a % 2); /* line 30 slow_hit_count: 174, fast_hit_count: 1 */
    a /= 2; /* line 31 slow_hit_count: 174, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  int u = k.length(); /* line 33 slow_hit_count: 8, fast_hit_count: 2 */
  for (int i = 0; i < 32 - u; i++) k += "0"; /* line 34 slow_hit_count: 90, fast_hit_count: 65 */
  reverse(k.begin(), k.end()); /* line 35 slow_hit_count: 8, fast_hit_count: 2 */
  return k; /* line 36 slow_hit_count: 8, fast_hit_count: 2 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
long long int query(string &s) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  int v = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  string k = ""; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 41 slow_hit_count: 33, fast_hit_count: 33 */
    if (TRIE[v][1 - (s[i] - '0')] != -1) { /* line 42 slow_hit_count: 32, fast_hit_count: 32 */
      v = TRIE[v][1 - (s[i] - '0')]; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
      if (s[i] == '0') /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
        k += "1"; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        k += "0"; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      v = TRIE[v][s[i] - '0']; /* line 49 slow_hit_count: 31, fast_hit_count: 31 */
      k += s[i]; /* line 50 slow_hit_count: 31, fast_hit_count: 31 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  long long int val = 0, bit; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 31; i++) { /* line 54 slow_hit_count: 33, fast_hit_count: 33 */
    bit = (s[i] == k[i]) ? 0 : 1; /* line 55 slow_hit_count: 32, fast_hit_count: 32 */
    val <<= 1; /* line 56 slow_hit_count: 32, fast_hit_count: 32 */
    val += bit; /* line 57 slow_hit_count: 32, fast_hit_count: 32 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  return val; /* line 59 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  memset(isword, 0, sizeof(isword)); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  memset(TRIE, -1, sizeof(TRIE)); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  isword[0] = 1; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  nxt = 1; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  int q, a; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 67 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> q; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  string k = bin(0); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  ins(k); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < q; i++) { /* line 71 slow_hit_count: 8, fast_hit_count: 2 */
    cin >> s >> a; /* line 72 slow_hit_count: 7, fast_hit_count: 1 */
    string k = bin(a); /* line 73 slow_hit_count: 14, fast_hit_count: 2 */
    if (s == "+") /* line 74 slow_hit_count: 7, fast_hit_count: 1 */
      ins(k); /* line 75 slow_hit_count: 4, fast_hit_count: 0 */
    else if (s == "-") /* line 76 slow_hit_count: 3, fast_hit_count: 1 */
      del(k); /* line 77 slow_hit_count: 2, fast_hit_count: 0 */
    else /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      cout << query(k) << endl; /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 82 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance differences between the fast and slow inputs, we need to analyze the code and hit count information provided. Let's break it down step by step:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The `ins` function is called more times in the slow input run (`slow_hit_count: 5`) compared to the fast input run (`fast_hit_count: 1`).
   - The `del` function is also called a few times during the slow input run (`slow_hit_count: 2`), but not at all during the fast run.
   - The `query` function is called once in both runs, but the hit counts within the loop of this function are similar for both inputs.
   - The line `for (int i = 0; i < s.size(); i++)` within both `ins` and `del` functions shows significant hit differences because `s.size()` is always 32 (for 32-bit binary representation), but more iterations of the loop occur in the slow run due to more calls to these functions.

2. **Data Structure and Algorithms**:
   - The main data structure in use is a TRIE (prefix tree), which is used to store and manage binary representations of numbers.
   - Operations on the TRIE (`ins` and `del`) are hit more frequently with slow input, indicating that repeated insertions and deletions impact performance.
   - The binary conversion functions (`bin`) are called multiple times, which could add overhead when handling a large number of insertions or deletions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can identify the scenarios where the program is likely to slow down:

1. **Frequent Insertions and Deletions**:
   - **Invariant**: "If the input sequence contains a high number of alternating insertions and deletions, the program may slow down due to repeated modifications of the TRIE structure."
   - **Reasoning**: Frequent insertions and deletions result in numerous updates to the TRIE, causing significant overhead, especially when each element is represented as a 32-bit binary string.

2. **Expensive String Operations**:
   - **Invariant**: "When many numbers are inserted or deleted, each requiring conversion to a 32-bit binary string, performance can degrade due to the cumulative cost of these conversions."
   - **Reasoning**: Each insertion or deletion involves converting a number to its binary string form, which is computationally intensive for a large number of operations.

3. **High Query Load with Large TRIE**:
   - **Invariant**: "If a high number of query operations occur after building a large TRIE with numerous elements, the cost of traversing the TRIE for maximum XOR becomes significant."
   - **Reasoning**: Although this is less prominent in the given inputs, a large TRIE with many branches could slow down query operations due to extensive traversals.

### Conclusion

The primary bottleneck in slow input is the high frequency of insertions and deletions, which involve costly operations on the TRIE structure and repeated binary conversions. These operations significantly outnumber the relatively straightforward query operations, leading to a noticeable performance difference between the fast and slow inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language performance invariants identified earlier into C++ checker code.

1. **Invariant 1: Frequent Insertions and Deletions**  
   **Natural Language**: "If the input sequence contains a high number of alternating insertions and deletions, the program may slow down due to repeated modifications of the TRIE structure."

   ```cpp
   void check_alternating_insert_delete(int insertCount, int deleteCount) {
       if (insertCount > 1000 && deleteCount > 1000) { // Threshold chosen arbitrarily for demonstration
           cerr << "Warning: Performance bottleneck due to high alternating insertions and deletions!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Expensive String Operations**  
   **Natural Language**: "When many numbers are inserted or deleted, each requiring conversion to a 32-bit binary string, performance can degrade due to the cumulative cost of these conversions."

   ```cpp
   void check_string_operations(int conversionCount) {
       if (conversionCount > 2000) { // Threshold chosen arbitrarily for demonstration
           cerr << "Warning: Performance bottleneck due to excessive binary string conversions!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: High Query Load with Large TRIE**  
   **Natural Language**: "If a high number of query operations occur after building a large TRIE with numerous elements, the cost of traversing the TRIE for maximum XOR becomes significant."

   ```cpp
   void check_query_load(int queryCount, int trieSize) {
       if (queryCount > 1000 && trieSize > 1024) { // Threshold chosen arbitrarily; trieSize is a hypothetical measure
           cerr << "Warning: Performance bottleneck due to high query load on large TRIE!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into Original Program

Now, we integrate these checkers into the provided C++ program at appropriate points to detect the performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int TRIE[200005 * 32 * 2][2];
int isword[200005 * 32 * 2];
int nxt;

// Performance checkers
void check_alternating_insert_delete(int insertCount, int deleteCount) {
    if (insertCount > 1000 && deleteCount > 1000) {
        cerr << "Warning: Performance bottleneck due to high alternating insertions and deletions!" << endl;
        abort();
    }
}

void check_string_operations(int conversionCount) {
    if (conversionCount > 2000) {
        cerr << "Warning: Performance bottleneck due to excessive binary string conversions!" << endl;
        abort();
    }
}

void check_query_load(int queryCount, int trieSize) {
    if (queryCount > 1000 && trieSize > 1024) {
        cerr << "Warning: Performance bottleneck due to high query load on large TRIE!" << endl;
        abort();
    }
}

void ins(string &s) {
    int v = 0;
    for (int i = 0; i < s.size(); i++) {
        if (TRIE[v][s[i] - '0'] == -1) TRIE[v][s[i] - '0'] = nxt++;
        isword[v]++;
        v = TRIE[v][s[i] - '0'];
    }
    isword[v]++;
}

void del(string &s) {
    int v = 0;
    int u;
    for (int i = 0; i < s.size(); i++) {
        if (isword[v] > 0) isword[v]--;
        if (isword[v] == 0 && i > 0) TRIE[u][s[i - 1] - '0'] = -1;
        u = v;
        v = TRIE[v][s[i] - '0'];
    }
    if (isword[v] > 0) isword[v]--;
    if (isword[v] == 0) TRIE[u][s[31] - '0'] = -1;
}

string bin(int a) {
    string k = "";
    while (a) {
        k += to_string(a % 2);
        a /= 2;
    }
    int u = k.length();
    for (int i = 0; i < 32 - u; i++) k += "0";
    reverse(k.begin(), k.end());
    return k;
}

long long int query(string &s) {
    int v = 0;
    string k = "";
    for (int i = 0; i < s.size(); i++) {
        if (TRIE[v][1 - (s[i] - '0')] != -1) {
            v = TRIE[v][1 - (s[i] - '0')];
            if (s[i] == '0')
                k += "1";
            else
                k += "0";
        } else {
            v = TRIE[v][s[i] - '0'];
            k += s[i];
        }
    }
    long long int val = 0, bit;
    for (int i = 0; i <= 31; i++) {
        bit = (s[i] == k[i]) ? 0 : 1;
        val <<= 1;
        val += bit;
    }
    return val;
}

int main() {
    memset(isword, 0, sizeof(isword));
    memset(TRIE, -1, sizeof(TRIE));
    isword[0] = 1;
    nxt = 1;
    int q, a;
    int insertCount = 0, deleteCount = 0, conversionCount = 0, queryCount = 0;
    string s;
    cin >> q;
    string k = bin(0);
    ins(k);
    for (int i = 0; i < q; i++) {
        cin >> s >> a;
        conversionCount++;
        string k = bin(a);
        if (s == "+") {
            ins(k);
            insertCount++;
        } else if (s == "-") {
            del(k);
            deleteCount++;
        } else {
            cout << query(k) << endl;
            queryCount++;
        }

        // Performance checks
        check_alternating_insert_delete(insertCount, deleteCount);
        check_string_operations(conversionCount);
        check_query_load(queryCount, nxt);
    }
    return 0;
}
```

### Explanation

- **Invariants and Checkers**: We implemented the invariants as checkers that print a warning and abort the program when certain thresholds are exceeded.
- **Integration Points**: Each check is placed after the relevant operations within the loop in `main`. For example, the check for alternating inserts/deletes is after processing the input, ensuring it doesn't add overhead in tight loops.
- **Usage**: These checks help identify when the program might be hitting a performance bottleneck due to the conditions we identified earlier.

