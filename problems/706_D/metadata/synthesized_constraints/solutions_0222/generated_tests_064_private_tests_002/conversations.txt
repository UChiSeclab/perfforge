system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct trieNode {
  trieNode *children[2];
  int counter;
  trieNode() {
    counter = 0;
    for (int i = 0; i < 2; i++) children[i] = NULL;
  }
} *root = new trieNode();
void add(string s, int delta) {
  trieNode *cur = root;
  int n = s.length();
  for (int i = 0; i < n; i++) {
    int idx = s[i] - '0';
    if (cur->children[idx] == NULL) cur->children[idx] = new trieNode();
    cur = cur->children[idx];
    cur->counter += delta;
  }
}
int query(string s) {
  int n = s.length();
  int ret = 0;
  trieNode *cur = root;
  for (int i = 0; i < n; i++) {
    int idx = s[i] - '0';
    idx = 1 - idx;
    if (cur->children[idx] != NULL && cur->children[idx]->counter != 0) {
      ret += (1 << (n - i - 1));
      cur = cur->children[idx];
    } else {
      cur = cur->children[1 - idx];
    }
  }
  return ret;
}
string toBinary(int x) {
  string ret = "";
  while (x) {
    if (x % 2 == 0)
      ret = "0" + ret;
    else
      ret = "1" + ret;
    x /= 2;
  }
  while (ret.length() != 30) ret = "0" + ret;
  return ret;
}
int main() {
  int q;
  cin >> q;
  add(toBinary(0), 1);
  while (q--) {
    char type;
    int x;
    cin >> type >> x;
    if (type == '+') add(toBinary(x), 1);
    if (type == '-') add(toBinary(x), -1);
    if (type == '?') cout << query(toBinary(x)) << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

14
+ 4
+ 4
+ 4
+ 4
? 3
- 4
- 4
- 4
? 3
+ 3
? 3
- 4
+ 4
? 1


(G.2) Fast Input

1
? 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct trieNode { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  trieNode *children[2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int counter; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  trieNode() { /* line 6 slow_hit_count: 36, fast_hit_count: 31 */
    counter = 0; /* line 7 slow_hit_count: 36, fast_hit_count: 31 */
    for (int i = 0; i < 2; i++) children[i] = NULL; /* line 8 slow_hit_count: 108, fast_hit_count: 93 */
  } /* line 9 slow_hit_count: 36, fast_hit_count: 31 */
} *root = new trieNode(); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void add(string s, int delta) { /* line 11 slow_hit_count: 11, fast_hit_count: 1 */
  trieNode *cur = root; /* line 12 slow_hit_count: 11, fast_hit_count: 1 */
  int n = s.length(); /* line 13 slow_hit_count: 11, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 14 slow_hit_count: 341, fast_hit_count: 31 */
    int idx = s[i] - '0'; /* line 15 slow_hit_count: 330, fast_hit_count: 30 */
    if (cur->children[idx] == NULL) cur->children[idx] = new trieNode(); /* line 16 slow_hit_count: 330, fast_hit_count: 30 */
    cur = cur->children[idx]; /* line 17 slow_hit_count: 330, fast_hit_count: 30 */
    cur->counter += delta; /* line 18 slow_hit_count: 330, fast_hit_count: 30 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 11, fast_hit_count: 1 */
int query(string s) { /* line 21 slow_hit_count: 4, fast_hit_count: 1 */
  int n = s.length(); /* line 22 slow_hit_count: 4, fast_hit_count: 1 */
  int ret = 0; /* line 23 slow_hit_count: 4, fast_hit_count: 1 */
  trieNode *cur = root; /* line 24 slow_hit_count: 4, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 25 slow_hit_count: 124, fast_hit_count: 31 */
    int idx = s[i] - '0'; /* line 26 slow_hit_count: 120, fast_hit_count: 30 */
    idx = 1 - idx; /* line 27 slow_hit_count: 120, fast_hit_count: 30 */
    if (cur->children[idx] != NULL && cur->children[idx]->counter != 0) { /* line 28 slow_hit_count: 120, fast_hit_count: 30 */
      ret += (1 << (n - i - 1)); /* line 29 slow_hit_count: 11, fast_hit_count: 1 */
      cur = cur->children[idx]; /* line 30 slow_hit_count: 11, fast_hit_count: 1 */
    } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      cur = cur->children[1 - idx]; /* line 32 slow_hit_count: 109, fast_hit_count: 29 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 35 slow_hit_count: 4, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
string toBinary(int x) { /* line 37 slow_hit_count: 15, fast_hit_count: 2 */
  string ret = ""; /* line 38 slow_hit_count: 30, fast_hit_count: 4 */
  while (x) { /* line 39 slow_hit_count: 51, fast_hit_count: 5 */
    if (x % 2 == 0) /* line 40 slow_hit_count: 36, fast_hit_count: 3 */
      ret = "0" + ret; /* line 41 slow_hit_count: 18, fast_hit_count: 2 */
    else /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      ret = "1" + ret; /* line 43 slow_hit_count: 18, fast_hit_count: 1 */
    x /= 2; /* line 44 slow_hit_count: 36, fast_hit_count: 3 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  while (ret.length() != 30) ret = "0" + ret; /* line 46 slow_hit_count: 429, fast_hit_count: 59 */
  return ret; /* line 47 slow_hit_count: 15, fast_hit_count: 2 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  int q; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  add(toBinary(0), 1); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 53 slow_hit_count: 15, fast_hit_count: 2 */
    char type; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    int x; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> type >> x; /* line 56 slow_hit_count: 14, fast_hit_count: 1 */
    if (type == '+') add(toBinary(x), 1); /* line 57 slow_hit_count: 14, fast_hit_count: 1 */
    if (type == '-') add(toBinary(x), -1); /* line 58 slow_hit_count: 14, fast_hit_count: 1 */
    if (type == '?') cout << query(toBinary(x)) << '\n'; /* line 59 slow_hit_count: 14, fast_hit_count: 1 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts provided:

1. **`add` Function:**
   - The `add` function (lines 11-20) has a much higher hit count in the slow input run compared to the fast input run:
     - Slow: `11` calls with `341` iterations total in the loop (line 14).
     - Fast: `1` call with `31` iterations in the loop.
   - The significant increase in the number of iterations indicates that the `add` function is a bottleneck when managing the multiset.

2. **`query` Function:**
   - The `query` function (lines 21-36) also shows more iterations in the slow input run:
     - Slow: `4` calls with `124` iterations total in the loop (line 25).
     - Fast: `1` call with `31` iterations in the loop.
   - This indicates that `query` operations have increased complexity when executed repeatedly or under certain multiset conditions.

3. **`toBinary` Function:**
   - The `toBinary` function (lines 37-48) called more frequently in the slow run:
     - Slow: `15` calls with `429` iterations in the zero-padding loop (line 46).
     - Fast: `2` calls with `59` iterations.
   - The frequent execution and additional processing suggest that converting to binary might be contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are natural language invariants describing conditions that lead to performance slowdowns:

1. **High Frequency of Additions:**
   - Natural Language Invariant: "When the same value is added multiple times into the multiset, especially when the value is large in binary representation, the cumulative effect can lead to performance degradation."
   - This is due to a higher number of iterations in the `add` function, as each addition traverses the trie structure.

2. **Repetitive Queries with Similar Values:**
   - Natural Language Invariant: "If queries are frequently made with inputs that result in traversing large portions of the trie, the function may become a bottleneck, leading to slowdowns."
   - This is observed in the `query` function's traversal, which becomes complex with certain input patterns.

3. **Conversion Overhead:**
   - Natural Language Invariant: "Repeated conversion of frequently queried or added values to their binary form, especially if they involve long binary representations, may introduce significant overhead."
   - This comes from the `toBinary` function, where repeated binary conversions add overhead.

4. **Saturation of Trie Structure:**
   - Natural Language Invariant: "A trie structure holding a large number of similar patterns due to repeated additions can saturate, causing queries and updates to take longer as they repeatedly traverse similar paths."
   - This reflects the compounded effect of repeated similar values being added to the multiset.

These invariants provide insights into potential slow paths that can be triggered by inputs which lead to excessive trie operations or conversions, even under the constraint of `n <= 100`. Such patterns should be monitored to ensure optimal performance in various scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Invariants as Checker Code in C++

Below are the C++ implementations of the natural language performance invariants.

### Invariant 1: High Frequency of Additions
```cpp
void check_addition_invariant(int additionCount) {
    if (additionCount > 100) {  // Arbitrary threshold for excessive additions
        cerr << "Warning: Performance bottleneck condition triggered due to frequent additions of the same value!" << endl;
        abort();
    }
}
```

### Invariant 2: Repetitive Queries with Similar Values
```cpp
void check_query_invariant(int queryCount) {
    if (queryCount > 50) {  // Arbitrary threshold for excessive similar queries
        cerr << "Warning: Performance bottleneck condition triggered due to repetitive similar queries!" << endl;
        abort();
    }
}
```

### Invariant 3: Conversion Overhead
```cpp
void check_conversion_invariant(int conversionCount) {
    if (conversionCount > 200) {  // Arbitrary threshold for excessive binary conversions
        cerr << "Warning: Performance bottleneck condition triggered due to excessive binary conversions!" << endl;
        abort();
    }
}
```

### Invariant 4: Saturation of Trie Structure
```cpp
void check_trie_saturation_invariant(int trieDepth) {
    if (trieDepth > 30) {  // 30 bits considered as a saturation threshold
        cerr << "Warning: Performance bottleneck condition triggered due to trie saturation!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code with Original Program

Below is the final C++ program with integrated performance checks. These checks are placed at strategic points in the program to avoid adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct trieNode {
    trieNode *children[2];
    int counter;
    trieNode() {
        counter = 0;
        for (int i = 0; i < 2; i++) children[i] = NULL;
    }
} *root = new trieNode();

// Checkers for performance bottlenecks
void check_addition_invariant(int additionCount) {
    if (additionCount > 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to frequent additions of the same value!" << endl;
        abort();
    }
}

void check_query_invariant(int queryCount) {
    if (queryCount > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to repetitive similar queries!" << endl;
        abort();
    }
}

void check_conversion_invariant(int conversionCount) {
    if (conversionCount > 200) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive binary conversions!" << endl;
        abort();
    }
}

void check_trie_saturation_invariant(int trieDepth) {
    if (trieDepth > 30) {
        cerr << "Warning: Performance bottleneck condition triggered due to trie saturation!" << endl;
        abort();
    }
}

void add(string s, int delta) {
    trieNode *cur = root;
    int n = s.length();
    for (int i = 0; i < n; i++) {
        int idx = s[i] - '0';
        if (cur->children[idx] == NULL) cur->children[idx] = new trieNode();
        cur = cur->children[idx];
        cur->counter += delta;
    }
}

int query(string s) {
    int n = s.length();
    int ret = 0;
    trieNode *cur = root;
    for (int i = 0; i < n; i++) {
        int idx = s[i] - '0';
        idx = 1 - idx;
        if (cur->children[idx] != NULL && cur->children[idx]->counter != 0) {
            ret += (1 << (n - i - 1));
            cur = cur->children[idx];
        } else {
            cur = cur->children[1 - idx];
        }
    }
    return ret;
}

string toBinary(int x) {
    string ret = "";
    while (x) {
        if (x % 2 == 0)
            ret = "0" + ret;
        else
            ret = "1" + ret;
        x /= 2;
    }
    while (ret.length() != 30) ret = "0" + ret;
    return ret;
}

int main() {
    int q;
    cin >> q;
    add(toBinary(0), 1);

    int additionCount = 0;  // Track addition operations
    int queryCount = 0;     // Track query operations
    int conversionCount = 0;  // Track conversions

    while (q--) {
        char type;
        int x;
        cin >> type >> x;
        string bin = toBinary(x);

        conversionCount++;
        check_conversion_invariant(conversionCount);  // Check conversion overhead

        if (type == '+') {
            add(bin, 1);
            additionCount++;
            check_addition_invariant(additionCount);  // Check frequent additions
        }
        if (type == '-') {
            add(bin, -1);
        }
        if (type == '?') {
            cout << query(bin) << '\n';
            queryCount++;
            check_query_invariant(queryCount);  // Check repetitive similar queries
        }
    }
}
```
### Comments:
- **Addition Count Checker**: Placed after each addition to track excessive additions.
- **Query Count Checker**: Placed after each query to detect repetitive similar queries.
- **Conversion Count Checker**: Placed after binary conversion to track excessive binary conversions.
- **Trie Saturation Checker**: Not directly used because trie depth is implicitly checked by trie operations. The depth is controlled by bit representation (30 bits), inherent in operations.

These checks help identify potential performance bottlenecks without adding excessive overhead to the program execution.

