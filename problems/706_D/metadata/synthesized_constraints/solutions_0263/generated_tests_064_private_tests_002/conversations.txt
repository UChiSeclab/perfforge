system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int node = 1;
string change(int x) {
  string s = "";
  while (x != 0) {
    s += (char)(x % 2 + 48);
    x = x / 2;
  }
  reverse(s.begin(), s.end());
  while (s.size() < 32) s = '0' + s;
  return s;
}
const int N = 1e7 + 9;
int check[N][2];
int f[N];
void add(int x) {
  string s = change(x);
  int curr = 1, tmp;
  for (int i = 0; i < s.size(); i++) {
    tmp = curr;
    if (check[curr][s[i] - 48] == 0) {
      node++;
      check[curr][s[i] - 48] = node;
      curr = node;
    } else
      curr = check[curr][s[i] - 48];
    f[curr]++;
  }
}
void remove(int x) {
  string s = change(x);
  int curr = 1;
  for (int i = 0; i < s.size(); i++) {
    curr = check[curr][s[i] - 48];
    f[curr]--;
  }
}
string res;
int kt[N];
void find(int x, string key, int d) {
  d++;
  kt[0] = (check[x][0] == 0 || f[check[x][0]] == 0) ? false : true;
  kt[1] = (check[x][1] == 0 || f[check[x][1]] == 0) ? false : true;
  if (!kt[0] && !kt[1]) return;
  if (!kt[0] || !kt[1]) {
    if (!kt[0]) {
      if (key[d] == '1')
        res += '0';
      else
        res += '1';
      find(check[x][1], key, d);
    } else {
      if (key[d] == '1')
        res += '1';
      else
        res += '0';
      find(check[x][0], key, d);
    }
  } else {
    res += '1';
    if (key[d] == '1')
      find(check[x][0], key, d);
    else
      find(check[x][1], key, d);
  }
}
long long revert(string s) {
  reverse(s.begin(), s.end());
  long long res = 0;
  for (int i = 0; i <= 30; i++) {
    long long tmp = s[i] - 48;
    if (tmp != 0) res += tmp * (long long)pow(2, i);
  }
  return res;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n, x;
  char c;
  cin >> n;
  add(0);
  for (int i = 1; i <= n; i++) {
    cin >> c >> x;
    if (c == '+') add(x);
    if (c == '-') remove(x);
    if (c == '?') {
      res = "";
      find(2, change(x), 0);
      cout << revert(res) << endl;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

14
+ 4
+ 4
+ 4
+ 4
? 3
- 4
- 4
- 4
? 3
+ 3
? 3
- 4
+ 4
? 1


(G.2) Fast Input

1
? 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int node = 1; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string change(int x) { /* line 4 slow_hit_count: 15, fast_hit_count: 2 */
  string s = ""; /* line 5 slow_hit_count: 30, fast_hit_count: 4 */
  while (x != 0) { /* line 6 slow_hit_count: 51, fast_hit_count: 5 */
    s += (char)(x % 2 + 48); /* line 7 slow_hit_count: 36, fast_hit_count: 3 */
    x = x / 2; /* line 8 slow_hit_count: 36, fast_hit_count: 3 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  reverse(s.begin(), s.end()); /* line 10 slow_hit_count: 15, fast_hit_count: 2 */
  while (s.size() < 32) s = '0' + s; /* line 11 slow_hit_count: 459, fast_hit_count: 63 */
  return s; /* line 12 slow_hit_count: 15, fast_hit_count: 2 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e7 + 9; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int check[N][2]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int f[N]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void add(int x) { /* line 17 slow_hit_count: 7, fast_hit_count: 1 */
  string s = change(x); /* line 18 slow_hit_count: 14, fast_hit_count: 2 */
  int curr = 1, tmp; /* line 19 slow_hit_count: 7, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 20 slow_hit_count: 231, fast_hit_count: 33 */
    tmp = curr; /* line 21 slow_hit_count: 224, fast_hit_count: 32 */
    if (check[curr][s[i] - 48] == 0) { /* line 22 slow_hit_count: 224, fast_hit_count: 32 */
      node++; /* line 23 slow_hit_count: 37, fast_hit_count: 32 */
      check[curr][s[i] - 48] = node; /* line 24 slow_hit_count: 37, fast_hit_count: 32 */
      curr = node; /* line 25 slow_hit_count: 37, fast_hit_count: 32 */
    } else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      curr = check[curr][s[i] - 48]; /* line 27 slow_hit_count: 187, fast_hit_count: 0 */
    f[curr]++; /* line 28 slow_hit_count: 224, fast_hit_count: 32 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 7, fast_hit_count: 1 */
void remove(int x) { /* line 31 slow_hit_count: 4, fast_hit_count: 0 */
  string s = change(x); /* line 32 slow_hit_count: 8, fast_hit_count: 0 */
  int curr = 1; /* line 33 slow_hit_count: 4, fast_hit_count: 0 */
  for (int i = 0; i < s.size(); i++) { /* line 34 slow_hit_count: 132, fast_hit_count: 0 */
    curr = check[curr][s[i] - 48]; /* line 35 slow_hit_count: 128, fast_hit_count: 0 */
    f[curr]--; /* line 36 slow_hit_count: 128, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 4, fast_hit_count: 0 */
string res; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
int kt[N]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
void find(int x, string key, int d) { /* line 41 slow_hit_count: 128, fast_hit_count: 32 */
  d++; /* line 42 slow_hit_count: 128, fast_hit_count: 32 */
  kt[0] = (check[x][0] == 0 || f[check[x][0]] == 0) ? false : true; /* line 43 slow_hit_count: 128, fast_hit_count: 32 */
  kt[1] = (check[x][1] == 0 || f[check[x][1]] == 0) ? false : true; /* line 44 slow_hit_count: 128, fast_hit_count: 32 */
  if (!kt[0] && !kt[1]) return; /* line 45 slow_hit_count: 128, fast_hit_count: 32 */
  if (!kt[0] || !kt[1]) { /* line 46 slow_hit_count: 124, fast_hit_count: 31 */
    if (!kt[0]) { /* line 47 slow_hit_count: 120, fast_hit_count: 31 */
      if (key[d] == '1') /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        res += '0'; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        res += '1'; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      find(check[x][1], key, d); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      if (key[d] == '1') /* line 54 slow_hit_count: 120, fast_hit_count: 31 */
        res += '1'; /* line 55 slow_hit_count: 7, fast_hit_count: 1 */
      else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        res += '0'; /* line 57 slow_hit_count: 113, fast_hit_count: 30 */
      find(check[x][0], key, d); /* line 58 slow_hit_count: 120, fast_hit_count: 31 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    res += '1'; /* line 61 slow_hit_count: 4, fast_hit_count: 0 */
    if (key[d] == '1') /* line 62 slow_hit_count: 4, fast_hit_count: 0 */
      find(check[x][0], key, d); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      find(check[x][1], key, d); /* line 65 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
long long revert(string s) { /* line 68 slow_hit_count: 4, fast_hit_count: 1 */
  reverse(s.begin(), s.end()); /* line 69 slow_hit_count: 4, fast_hit_count: 1 */
  long long res = 0; /* line 70 slow_hit_count: 4, fast_hit_count: 1 */
  for (int i = 0; i <= 30; i++) { /* line 71 slow_hit_count: 128, fast_hit_count: 32 */
    long long tmp = s[i] - 48; /* line 72 slow_hit_count: 124, fast_hit_count: 31 */
    if (tmp != 0) res += tmp * (long long)pow(2, i); /* line 73 slow_hit_count: 124, fast_hit_count: 31 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 75 slow_hit_count: 4, fast_hit_count: 1 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  char c; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  add(0); /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 85 slow_hit_count: 15, fast_hit_count: 2 */
    cin >> c >> x; /* line 86 slow_hit_count: 14, fast_hit_count: 1 */
    if (c == '+') add(x); /* line 87 slow_hit_count: 14, fast_hit_count: 1 */
    if (c == '-') remove(x); /* line 88 slow_hit_count: 14, fast_hit_count: 1 */
    if (c == '?') { /* line 89 slow_hit_count: 14, fast_hit_count: 1 */
      res = ""; /* line 90 slow_hit_count: 4, fast_hit_count: 1 */
      find(2, change(x), 0); /* line 91 slow_hit_count: 4, fast_hit_count: 1 */
      cout << revert(res) << endl; /* line 92 slow_hit_count: 4, fast_hit_count: 1 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 96 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottlenecks in the provided C program, we need to analyze the line-level hit counts and understand the logic behind the expensive operations. We'll then explain the findings in natural language as performance-characterizing invariants. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - **Function `change(int x)`**: This function gets called frequently (15 times for slow input vs. 2 times for fast input). The while loop within it (line 11) to pad the binary string to 32 characters is hit heavily (459 times slow vs. 63 fast).
   - **Function `add(int x)`**: The loop inside `add` (line 20) is executed 231 times with the slow input compared to 33 times with the fast input. The check and update operations on the `check` array (lines 22-28) are also heavily hit.
   - **Function `remove(int x)`**: Shows high hit counts (132 times for the loop at line 34) during slow input, indicating frequent calls.
   - **Function `find(int x, string key, int d)`**: This recursive function is called 128 times during slow input vs. 32 times during fast input. The recursive branching logic (lines 46-58) shows heavy hits.
   - **Loop and Operation Complexity**:
     - The `find` function's recursion depends on the depth and structure of the binary trie built from the `add` operations. The hit count indicates complex navigation through the trie.
     - The `remove` function needs to decrement counts which can cause inefficient navigation through data structures if the multiset elements are repetitive.

2. **Data Structure Interactions**:
   - The program uses a trie-like structure to manage XOR calculations. Each update or query involves navigating this potentially deep and wide structure.
   - Frequent additions and removals of the same element can lead to inefficiencies, as seen with the repetitive operations on integer `4` in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can infer the conditions under which performance degrades:

1. **Repetitive Operations in the Trie**:
   - **Invariant**: "When the same element is added and removed repeatedly in the multiset, this causes excessive updates in the trie structure, leading to slower performance. Specifically, these operations increase the complexity of navigation and modification within the trie."
   
2. **Trie Depth and Redundant Recursion**:
   - **Invariant**: "If a significant portion of execution time is spent on recursive calls within a deep or wide trie during XOR queries, performance may degrade. This can happen when the trie is dense due to many repeated values being inserted and removed."
   
3. **Binary String Manipulation Overhead**:
   - **Invariant**: "The conversion of integers to binary strings with padding to a fixed length can become a bottleneck when processed repeatedly for many operations. This is especially true when the number of operations approaches the upper limits of input constraints."

These invariants highlight the potential slow paths without relying on specific input values. They focus on repetitive operations and the structure of the trie, both of which are crucial given the input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Author has gone out of the stories about Vasiliy, so here is just a formal task description.

You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:

  1. "+ x" — add integer x to multiset A.
  2. "- x" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query.
  3. "? x" — you are given integer x and need to compute the value <image>, i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.



Multiset is a set, where equal elements are allowed.

Input

The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform.

Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type.

Note, that the integer 0 will always be present in the set A.

Output

For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.

Example

Input

10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11


Output

11
10
14
13

Note

After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.

The answer for the sixth query is integer <image> — maximum among integers <image>, <image>, <image>, <image> and <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Based on the performance-characterizing invariants identified earlier, here are the C++ code snippets to check these conditions:

1. **Invariant for Repetitive Operations in the Trie**:
   - **Checker Code**: This checks if the same element is added and removed repeatedly, which can lead to inefficiencies.

```cpp
void check_repetitive_operations_invariant(int addCount, int removeCount, int threshold) {
    if (addCount - removeCount > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to excessive repetitive operations!" << endl;
        abort();
    }
}
```

2. **Invariant for Trie Depth and Recursion**:
   - **Checker Code**: This checks if the recursive function `find` is called excessively, indicating a potential slowdown due to deep trie navigation.

```cpp
void check_trie_depth_invariant(int recursionDepth, int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck triggered due to excessive recursion depth!" << endl;
        abort();
    }
}
```

3. **Invariant for Binary String Manipulation Overhead**:
   - **Checker Code**: This checks if the conversion function `change` is called excessively, indicating high overhead.

```cpp
void check_binary_string_manipulation_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to excessive binary string manipulation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here is the C++ code with the integrated checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int node = 1;
const int N = 1e7 + 9;
int check[N][2];
int f[N];
string res;
int kt[N];

// Performance check thresholds
const int REPETITIVE_OP_THRESHOLD = 1000;
const int MAX_RECURSION_DEPTH = 50;
const int BINARY_MANIPULATION_THRESHOLD = 1000;

// Counters for checkers
int repetitiveAddCount = 0;
int repetitiveRemoveCount = 0;
int findCallCount = 0;
int changeCallCount = 0;

// Checker function implementations
void check_repetitive_operations_invariant(int addCount, int removeCount, int threshold) {
    if (addCount - removeCount > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to excessive repetitive operations!" << endl;
        abort();
    }
}

void check_trie_depth_invariant(int recursionDepth, int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck triggered due to excessive recursion depth!" << endl;
        abort();
    }
}

void check_binary_string_manipulation_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to excessive binary string manipulation!" << endl;
        abort();
    }
}

string change(int x) {
    changeCallCount++;
    check_binary_string_manipulation_invariant(changeCallCount, BINARY_MANIPULATION_THRESHOLD);

    string s = "";
    while (x != 0) {
        s += (char)(x % 2 + 48);
        x = x / 2;
    }
    reverse(s.begin(), s.end());
    while (s.size() < 32) s = '0' + s;
    return s;
}

void add(int x) {
    repetitiveAddCount++;
    check_repetitive_operations_invariant(repetitiveAddCount, repetitiveRemoveCount, REPETITIVE_OP_THRESHOLD);

    string s = change(x);
    int curr = 1, tmp;
    for (int i = 0; i < s.size(); i++) {
        tmp = curr;
        if (check[curr][s[i] - 48] == 0) {
            node++;
            check[curr][s[i] - 48] = node;
            curr = node;
        } else
            curr = check[curr][s[i] - 48];
        f[curr]++;
    }
}

void remove(int x) {
    repetitiveRemoveCount++;
    check_repetitive_operations_invariant(repetitiveAddCount, repetitiveRemoveCount, REPETITIVE_OP_THRESHOLD);

    string s = change(x);
    int curr = 1;
    for (int i = 0; i < s.size(); i++) {
        curr = check[curr][s[i] - 48];
        f[curr]--;
    }
}

void find(int x, string key, int d) {
    findCallCount++;
    check_trie_depth_invariant(findCallCount, MAX_RECURSION_DEPTH);

    d++;
    kt[0] = (check[x][0] == 0 || f[check[x][0]] == 0) ? false : true;
    kt[1] = (check[x][1] == 0 || f[check[x][1]] == 0) ? false : true;
    if (!kt[0] && !kt[1]) return;
    if (!kt[0] || !kt[1]) {
        if (!kt[0]) {
            if (key[d] == '1')
                res += '0';
            else
                res += '1';
            find(check[x][1], key, d);
        } else {
            if (key[d] == '1')
                res += '1';
            else
                res += '0';
            find(check[x][0], key, d);
        }
    } else {
        res += '1';
        if (key[d] == '1')
            find(check[x][0], key, d);
        else
            find(check[x][1], key, d);
    }
}

long long revert(string s) {
    reverse(s.begin(), s.end());
    long long res = 0;
    for (int i = 0; i <= 30; i++) {
        long long tmp = s[i] - 48;
        if (tmp != 0) res += tmp * (long long)pow(2, i);
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, x;
    char c;
    cin >> n;
    add(0);
    for (int i = 1; i <= n; i++) {
        cin >> c >> x;
        if (c == '+') add(x);
        if (c == '-') remove(x);
        if (c == '?') {
            res = "";
            find(2, change(x), 0);
            cout << revert(res) << endl;
        }
    }
    return 0;
}
```

### Explanation of Changes

- **Checker Functions**: Three checker functions were added corresponding to the identified invariants. These checkers monitor conditions based on the count of operations and recursion depth.
  
- **Integration Points**: 
  - The check for repetitive operations is monitored within the `add` and `remove` functions since these directly affect trie updates.
  - The recursion depth is monitored within the `find` function.
  - The binary string manipulation count is checked each time the `change` function is called.

- **Counters and Thresholds**: The counters (e.g., `repetitiveAddCount`) track the number of calls to specific operations, and thresholds are set to signal potential performance issues.

This integration ensures that any potential bottlenecks are identified during execution, helping to preemptively address performance issues.

