system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct node {
  int x, y;
};
node s1[4];
node s2[4];
long long int dist2(node a, node b) {
  long long ans = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
  return ans;
}
long long int cross_prod(node v1, node v2) {
  long long int k = v1.x * v2.y - v2.x * v1.y;
  if (k < 0)
    return -1;
  else if (k == 0)
    return 0;
  else
    return 1;
}
int comp_dist(node c, node a, node b) {
  long long int d1 = dist2(a, b), d2 = dist2(a, c), d3 = dist2(c, b);
  long long int d = d2 * d3;
  d = sqrtl(d);
  if (d * d != d2 * d3) return 0;
  if (d1 == d2 + d3 + 2 * d) return 1;
  return 0;
}
int in(node pt, node sq[]) {
  for (int i = 0; i < 4; i++) {
    if (pt.x == sq[i].x && pt.y == sq[i].y) return 1;
  }
  vector<int> x;
  for (int i = 0; i < 4; i++) {
    int j = (i + 1) % 4;
    node v1, v2;
    v1.x = sq[j].x - sq[i].x;
    v1.y = sq[j].y - sq[i].y;
    v2.x = pt.x - sq[i].x;
    v2.y = pt.y - sq[i].y;
    if (comp_dist(pt, sq[i], sq[j])) {
      return 1;
    }
    x.push_back(cross_prod(v1, v2));
  }
  for (int i = 0; i < 4; i++) {
    if (x[i] != x[0]) return 0;
  }
  return 1;
}
int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  node mid1;
  mid1.x = mid1.y = 0;
  int l1;
  for (int i = 0; i < 4; i++) {
    cin >> s1[i].x >> s1[i].y;
    mid1.x += s1[i].x;
    mid1.y += s1[i].y;
  }
  l1 = abs(s1[0].x - s1[1].x) + abs(s1[0].y - s1[1].y);
  node s2[4];
  node mid2;
  mid2.x = mid2.y = 0;
  for (int i = 0; i < 4; i++) {
    cin >> s2[i].x >> s2[i].y;
    mid2.x += s2[i].x;
    mid2.y += s2[i].y;
  }
  for (int i = -100; i <= 100; i++) {
    for (int j = -100; j <= 100; j++) {
      node pt;
      pt.x = i;
      pt.y = j;
      if (in(pt, s1) && in(pt, s2)) {
        cout << "YES\n";
        return 0;
      }
    }
  }
  cout << "NO\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
node s1[4]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
node s2[4]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long int dist2(node a, node b) { /* line 8 slow_hit_count: 484812, fast_hit_count: 1500 */
  long long ans = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y); /* line 9 slow_hit_count: 484812, fast_hit_count: 1500 */
  return ans; /* line 10 slow_hit_count: 484812, fast_hit_count: 1500 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long int cross_prod(node v1, node v2) { /* line 12 slow_hit_count: 161604, fast_hit_count: 400 */
  long long int k = v1.x * v2.y - v2.x * v1.y; /* line 13 slow_hit_count: 161604, fast_hit_count: 400 */
  if (k < 0) /* line 14 slow_hit_count: 161604, fast_hit_count: 400 */
    return -1; /* line 15 slow_hit_count: 80806, fast_hit_count: 300 */
  else if (k == 0) /* line 16 slow_hit_count: 80798, fast_hit_count: 100 */
    return 0; /* line 17 slow_hit_count: 796, fast_hit_count: 0 */
  else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 19 slow_hit_count: 80002, fast_hit_count: 100 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int comp_dist(node c, node a, node b) { /* line 21 slow_hit_count: 161604, fast_hit_count: 500 */
  long long int d1 = dist2(a, b), d2 = dist2(a, c), d3 = dist2(c, b); /* line 22 slow_hit_count: 161604, fast_hit_count: 500 */
  long long int d = d2 * d3; /* line 23 slow_hit_count: 161604, fast_hit_count: 500 */
  d = sqrtl(d); /* line 24 slow_hit_count: 161604, fast_hit_count: 500 */
  if (d * d != d2 * d3) return 0; /* line 25 slow_hit_count: 161604, fast_hit_count: 500 */
  if (d1 == d2 + d3 + 2 * d) return 1; /* line 26 slow_hit_count: 800, fast_hit_count: 104 */
  return 0; /* line 27 slow_hit_count: 800, fast_hit_count: 4 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int in(node pt, node sq[]) { /* line 29 slow_hit_count: 40405, fast_hit_count: 202 */
  for (int i = 0; i < 4; i++) { /* line 30 slow_hit_count: 202015, fast_hit_count: 1002 */
    if (pt.x == sq[i].x && pt.y == sq[i].y) return 1; /* line 31 slow_hit_count: 161614, fast_hit_count: 802 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> x; /* line 33 slow_hit_count: 80802, fast_hit_count: 400 */
  for (int i = 0; i < 4; i++) { /* line 34 slow_hit_count: 202005, fast_hit_count: 600 */
    int j = (i + 1) % 4; /* line 35 slow_hit_count: 161604, fast_hit_count: 500 */
    node v1, v2; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    v1.x = sq[j].x - sq[i].x; /* line 37 slow_hit_count: 161604, fast_hit_count: 500 */
    v1.y = sq[j].y - sq[i].y; /* line 38 slow_hit_count: 161604, fast_hit_count: 500 */
    v2.x = pt.x - sq[i].x; /* line 39 slow_hit_count: 161604, fast_hit_count: 500 */
    v2.y = pt.y - sq[i].y; /* line 40 slow_hit_count: 161604, fast_hit_count: 500 */
    if (comp_dist(pt, sq[i], sq[j])) { /* line 41 slow_hit_count: 161604, fast_hit_count: 500 */
      return 1; /* line 42 slow_hit_count: 0, fast_hit_count: 100 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    x.push_back(cross_prod(v1, v2)); /* line 44 slow_hit_count: 161604, fast_hit_count: 400 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) { /* line 46 slow_hit_count: 81001, fast_hit_count: 400 */
    if (x[i] != x[0]) return 0; /* line 47 slow_hit_count: 81001, fast_hit_count: 400 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(false); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  node mid1; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  mid1.x = mid1.y = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  int l1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) { /* line 58 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> s1[i].x >> s1[i].y; /* line 59 slow_hit_count: 4, fast_hit_count: 4 */
    mid1.x += s1[i].x; /* line 60 slow_hit_count: 4, fast_hit_count: 4 */
    mid1.y += s1[i].y; /* line 61 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  l1 = abs(s1[0].x - s1[1].x) + abs(s1[0].y - s1[1].y); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  node s2[4]; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  node mid2; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  mid2.x = mid2.y = 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 4; i++) { /* line 67 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> s2[i].x >> s2[i].y; /* line 68 slow_hit_count: 4, fast_hit_count: 4 */
    mid2.x += s2[i].x; /* line 69 slow_hit_count: 4, fast_hit_count: 4 */
    mid2.y += s2[i].y; /* line 70 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = -100; i <= 100; i++) { /* line 72 slow_hit_count: 202, fast_hit_count: 1 */
    for (int j = -100; j <= 100; j++) { /* line 73 slow_hit_count: 40602, fast_hit_count: 101 */
      node pt; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      pt.x = i; /* line 75 slow_hit_count: 40401, fast_hit_count: 101 */
      pt.y = j; /* line 76 slow_hit_count: 40401, fast_hit_count: 101 */
      if (in(pt, s1) && in(pt, s2)) { /* line 77 slow_hit_count: 40401, fast_hit_count: 101 */
        cout << "YES\n"; /* line 78 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 79 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO\n"; /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 84 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 85 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The lines that show significant differences in hit counts between the slow and fast runs are primarily in the nested loops (lines 72-77) and the function `in()` (lines 29-49).
   - Specifically, the nested loops (lines 72-73) are executed 40,602 times in the slow input compared to just 101 times in the fast input, showing a major discrepancy.
   - The function `in()` is also called substantially more often during the slow input, with line 29 being hit 40,405 times versus 202 times in the fast input. This suggests `in()` is involved in a computationally expensive operation.

2. **Interaction with Data Structures**:
   - The program checks every point within a bounding box around the coordinate range from -100 to 100 to see if it lies within both squares. This results in an O(n^2 * m) complexity where n and m are the side lengths of the coordinate grid, resulting in a large number of checks.
   - The `in()` function iterates over the vertices of a square to determine if a point lies inside it, contributing to the high number of operations.

3. **Triggering Conditions**:
   - The slowdown occurs because of the nested loop structure examining every point in a dense grid. The bounding box's size (200x200) is invariant, but the conditions which make the function `in(pt, s1) && in(pt, s2)` true more often increase the workload.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: Large Search Space Due to Nested Loops**
   - **Natural language description**: "If the coordinate grid being searched has a high density of potential intersection points, particularly due to both squares occupying a large portion of this grid, the program's performance may degrade significantly."
   - **Explanation**: The nested loops responsible for iterating over potential intersection points become a bottleneck when a large number of points need to be checked for intersection.

2. **Invariant: Expensive Distance Calculations and Point-in-Square Check**
   - **Natural language description**: "When the number of points to check for inclusion in both squares is large, especially when the squares overlap significantly, the performance could be hindered by the repeated execution of distance and cross product calculations."
   - **Explanation**: The function `in()` checks if a point is within a square by calculating distances and cross products multiple times. When this is done over a large set of points, it becomes computationally heavy.

3. **Invariant: Computational Density in Geometry Checks**
   - **Natural language description**: "Heavy computational geometry checks are a performance bottleneck, particularly when both squares have large areas of potential overlap or when many boundary and interior points have to be checked repeatedly."
   - **Explanation**: Both the geometry of the input squares and their relative positions can result in a higher number of boundary checks, making the algorithm less efficient.

### Summary of Invariants:
- Slowdowns are predominantly due to the large number of operations required to check each point within a fixed-size grid and the computational overhead of geometric checks when squares are positioned in ways that maximize potential intersections. Reducing these operations or optimizing the check logic can alleviate the slow performance path.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, I will implement the performance-characterizing invariants identified in Phase 2.

#### Invariant 1: Large Search Space Due to Nested Loops
This invariant is triggered when the coordinate grid has a high density of potential intersection points, which is checked by considering the extent of the bounding grid being searched.

```cpp
void check_search_space_invariant(int x_range, int y_range) {
    if (x_range * y_range > 20000) { // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - excessive search space!" << endl;
        abort();
    }
}
```

#### Invariant 2: Expensive Distance Calculations and Point-in-Square Check
This invariant is triggered when many points are checked for inclusion within squares, particularly when there are significant overlaps.

```cpp
void check_expensive_computation_invariant(int num_checks) {
    if (num_checks > 15000) { // Arbitrary threshold to illustrate potential bottlenecks
        cerr << "Warning: Performance bottleneck condition triggered - excessive computations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the newly integrated performance checkers.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct node {
    int x, y;
};

node s1[4];
node s2[4];

long long int dist2(node a, node b) {
    long long ans = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
    return ans;
}

long long int cross_prod(node v1, node v2) {
    long long int k = v1.x * v2.y - v2.x * v1.y;
    if (k < 0)
        return -1;
    else if (k == 0)
        return 0;
    else
        return 1;
}

int comp_dist(node c, node a, node b) {
    long long int d1 = dist2(a, b), d2 = dist2(a, c), d3 = dist2(c, b);
    long long int d = d2 * d3;
    d = sqrtl(d);
    if (d * d != d2 * d3) return 0;
    if (d1 == d2 + d3 + 2 * d) return 1;
    return 0;
}

int in(node pt, node sq[]) {
    for (int i = 0; i < 4; i++) {
        if (pt.x == sq[i].x && pt.y == sq[i].y) return 1;
    }
    vector<int> x;
    for (int i = 0; i < 4; i++) {
        int j = (i + 1) % 4;
        node v1, v2;
        v1.x = sq[j].x - sq[i].x;
        v1.y = sq[j].y - sq[i].y;
        v2.x = pt.x - sq[i].x;
        v2.y = pt.y - sq[i].y;
        if (comp_dist(pt, sq[i], sq[j])) {
            return 1;
        }
        x.push_back(cross_prod(v1, v2));
    }
    for (int i = 0; i < 4; i++) {
        if (x[i] != x[0]) return 0;
    }
    return 1;
}

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    node mid1;
    mid1.x = mid1.y = 0;
    int l1;
    for (int i = 0; i < 4; i++) {
        cin >> s1[i].x >> s1[i].y;
        mid1.x += s1[i].x;
        mid1.y += s1[i].y;
    }
    l1 = abs(s1[0].x - s1[1].x) + abs(s1[0].y - s1[1].y);

    node s2[4];
    node mid2;
    mid2.x = mid2.y = 0;
    for (int i = 0; i < 4; i++) {
        cin >> s2[i].x >> s2[i].y;
        mid2.x += s2[i].x;
        mid2.y += s2[i].y;
    }

    // Integrate invariant checker for large search space
    check_search_space_invariant(201, 201);

    // Count the number of checks performed and integrate an invariant checker
    int num_checks = 0;

    for (int i = -100; i <= 100; i++) {
        for (int j = -100; j <= 100; j++) {
            node pt;
            pt.x = i;
            pt.y = j;
            if (in(pt, s1) && in(pt, s2)) {
                cout << "YES\n";
                return 0;
            }
            num_checks++;
        }
    }

    // Integrate invariant checker for expensive computations
    check_expensive_computation_invariant(num_checks);

    cout << "NO\n";
    return 0;
}
```

### Explanation:
- **`check_search_space_invariant`**: This checker is triggered when the search space is excessively large, which happens when both squares cover a large part of the coordinate grid.
- **`check_expensive_computation_invariant`**: This checker counts the number of potential point checks and will trigger if this count exceeds a certain threshold, indicating a possible bottleneck due to excessive computational checks. The check is placed after counting the loop iterations, ensuring no additional overhead in the tight loop.

