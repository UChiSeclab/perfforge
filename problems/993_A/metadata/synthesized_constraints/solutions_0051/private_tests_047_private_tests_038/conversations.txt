system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct Point {
  double x, y;
  Point() {}
  Point(double _x, double _y) : x(_x), y(_y) {}
  void in() { scanf("%lf%lf", &x, &y); }
  bool operator<(const Point &X) const { return x == X.x ? y < X.y : x < X.x; }
};
Point operator-(const Point &X, const Point &Y) {
  return Point(X.x - Y.x, X.y - Y.y);
}
double det(Point X, Point Y) { return X.x * Y.y - X.y * Y.x; }
struct Node {
  Point P[4];
  void in() {
    for (signed i = 0; i < 4; i++) P[i].in();
    sort(P, P + 4);
  }
} T1, T2;
bool cross(Point X, Point Y, Point Z) { return det(Y - X, Z - X) <= 1e-6; }
bool c(double x, double y) {
  bool ta = 1;
  ta &= (T1.P[0].x <= x && x <= T1.P[3].x && T1.P[0].y <= y && y <= T1.P[3].y);
  Point X = Point(x, y);
  ta &= (cross(T2.P[0], T2.P[2], X) && cross(T2.P[0], X, T2.P[1]) &&
         cross(X, T2.P[2], T2.P[3]) && cross(X, T2.P[3], T2.P[1]));
  return ta;
}
signed main() {
  T1.in();
  T2.in();
  c(2, 5);
  for (double i = -100; i <= 100; i += 0.25)
    for (double j = -100; j <= 100; j += 0.25) {
      if (c(i, j)) {
        puts("YES");
        return 0;
      }
    }
  return puts("NO"), 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct Point { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  double x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  Point() {} /* line 5 slow_hit_count: 8, fast_hit_count: 8 */
  Point(double _x, double _y) : x(_x), y(_y) {} /* line 6 slow_hit_count: 4812018, fast_hit_count: 2018 */
  void in() { scanf("%lf%lf", &x, &y); } /* line 7 slow_hit_count: 8, fast_hit_count: 8 */
  bool operator<(const Point &X) const { return x == X.x ? y < X.y : x < X.x; } /* line 8 slow_hit_count: 15, fast_hit_count: 15 */
}; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
Point operator-(const Point &X, const Point &Y) { /* line 10 slow_hit_count: 4170416, fast_hit_count: 1616 */
  return Point(X.x - Y.x, X.y - Y.y); /* line 11 slow_hit_count: 4170416, fast_hit_count: 1616 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
double det(Point X, Point Y) { return X.x * Y.y - X.y * Y.x; } /* line 13 slow_hit_count: 2085208, fast_hit_count: 808 */
struct Node { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  Point P[4]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  void in() { /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
    for (signed i = 0; i < 4; i++) P[i].in(); /* line 17 slow_hit_count: 10, fast_hit_count: 10 */
    sort(P, P + 4); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
} T1, T2; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool cross(Point X, Point Y, Point Z) { return det(Y - X, Z - X) <= 1e-6; } /* line 21 slow_hit_count: 2085208, fast_hit_count: 808 */
bool c(double x, double y) { /* line 22 slow_hit_count: 641602, fast_hit_count: 402 */
  bool ta = 1; /* line 23 slow_hit_count: 641602, fast_hit_count: 402 */
  ta &= (T1.P[0].x <= x && x <= T1.P[3].x && T1.P[0].y <= y && y <= T1.P[3].y); /* line 24 slow_hit_count: 641602, fast_hit_count: 402 */
  Point X = Point(x, y); /* line 25 slow_hit_count: 641602, fast_hit_count: 402 */
  ta &= (cross(T2.P[0], T2.P[2], X) && cross(T2.P[0], X, T2.P[1]) && /* line 26 slow_hit_count: 1203004, fast_hit_count: 804 */
         cross(X, T2.P[2], T2.P[3]) && cross(X, T2.P[3], T2.P[1])); /* line 27 slow_hit_count: 1203004, fast_hit_count: 804 */
  return ta; /* line 28 slow_hit_count: 641602, fast_hit_count: 402 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  T1.in(); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  T2.in(); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  c(2, 5); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (double i = -100; i <= 100; i += 0.25) /* line 34 slow_hit_count: 802, fast_hit_count: 1 */
    for (double j = -100; j <= 100; j += 0.25) { /* line 35 slow_hit_count: 642402, fast_hit_count: 401 */
      if (c(i, j)) { /* line 36 slow_hit_count: 641601, fast_hit_count: 401 */
        puts("YES"); /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  return puts("NO"), 0; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in this C program and generate performance-characterizing invariants, we need to follow the outlined phases. Here's the analysis and potential invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The line with the most significant increase in hit counts between fast and slow inputs is line 6 in the `Point` constructor, with a massive increase from 2,018 hits in the fast input to 4,812,018 hits in the slow input.
   - The lines responsible for computing cross products and checking intersections (lines 21 and 26-27) also show a significant increase in execution frequency.
   - The nested loop in the `main` function (lines 34-35) runs many more iterations for the slow input. This loop iterates over a grid checking if any point inside the squares intersects by calling the `c` function.

2. **Interpreting Interaction:**
   - The slow performance is primarily due to the exhaustive check over a grid of points at a quarter-unit resolution, which is exacerbated when the intersection check is complex or covers a broad space.
   - The increase in hit counts for the constructor and the `cross` function indicates excessive object creation and arithmetic operations, largely driven by the nested loop structure.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants:

1. **Dense Grid Evaluation:**
   - **Invariant:** "If the area of potential intersection covers a large portion of the grid being checked, the program may execute a large number of intersection checks, leading to slow performance."
   - **Explanation:** The grid defined by the loop covers a space from (-100, -100) to (100, 100) with a step of 0.25, resulting in a significant number of iterations. If the possible intersection area is large relative to this grid, the loop performs many checks unnecessarily.

2. **Diagonal Square Size:**
   - **Invariant:** "When the diagonal square covers a broad area, especially near the grid boundaries, the number of point checks increases, degrading performance."
   - **Explanation:** The slow input involves a square with coordinates near the grid's limit, increasing the likelihood of many points being evaluated for intersection.

3. **Grid Step Size Sensitivity:**
   - **Invariant:** "If the grid resolution (step size) is too fine for the intended precision or tolerance required for intersection detection, the performance will degrade due to excessive computations."
   - **Explanation:** A step size of 0.25 leads to a very fine grid, which might be unnecessary for the intersection check's precision level, causing many redundant checks.

### Conclusion

These invariants abstract the conditions under which the code's performance degrades. The primary issue is the exhaustive grid check, which becomes particularly expensive when potential intersections cover a large area or when the grid's resolution is very fine compared to the needed precision. The analysis suggests reconsidering the step size or the region of interest to improve efficiency.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Invariants with C++ Checkers

Based on the natural language invariants derived previously, here are the C++ code snippets that check the conditions at runtime:

### Invariant 1: Dense Grid Evaluation

```cpp
void check_dense_grid_invariant(double areaThreshold, double gridSize) {
    if (areaThreshold > gridSize * gridSize) {
        cerr << "Warning: Performance bottleneck condition triggered - dense grid evaluation!" << endl;
        abort();
    }
}
```

### Invariant 2: Diagonal Square Size

```cpp
void check_diagonal_square_size(double squareSize) {
    if (squareSize > 180) { // Example threshold based on potential size impact
        cerr << "Warning: Performance bottleneck condition triggered - large diagonal square!" << endl;
        abort();
    }
}
```

### Invariant 3: Grid Step Size Sensitivity

```cpp
void check_grid_step_size(double stepSize) {
    if (stepSize < 0.5) { // Example threshold for excessive checks
        cerr << "Warning: Performance bottleneck condition triggered - grid step size too fine!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original Code

Below is the final, instrumented C++ code with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct Point {
    double x, y;
    Point() {}
    Point(double _x, double _y) : x(_x), y(_y) {}
    void in() { scanf("%lf%lf", &x, &y); }
    bool operator<(const Point &X) const { return x == X.x ? y < X.y : x < X.x; }
};

Point operator-(const Point &X, const Point &Y) {
    return Point(X.x - Y.x, X.y - Y.y);
}

double det(Point X, Point Y) { return X.x * Y.y - X.y * Y.x; }

struct Node {
    Point P[4];
    void in() {
        for (signed i = 0; i < 4; i++) P[i].in();
        sort(P, P + 4);
    }
} T1, T2;

bool cross(Point X, Point Y, Point Z) { return det(Y - X, Z - X) <= 1e-6; }

bool c(double x, double y) {
    bool ta = 1;
    ta &= (T1.P[0].x <= x && x <= T1.P[3].x && T1.P[0].y <= y && y <= T1.P[3].y);
    Point X = Point(x, y);
    ta &= (cross(T2.P[0], T2.P[2], X) && cross(T2.P[0], X, T2.P[1]) &&
           cross(X, T2.P[2], T2.P[3]) && cross(X, T2.P[3], T2.P[1]));
    return ta;
}

// Checker Implementations
void check_dense_grid_invariant(double areaThreshold, double gridSize) {
    if (areaThreshold > gridSize * gridSize) {
        cerr << "Warning: Performance bottleneck condition triggered - dense grid evaluation!" << endl;
        abort();
    }
}

void check_diagonal_square_size(double squareSize) {
    if (squareSize > 180) { // Example threshold based on potential size impact
        cerr << "Warning: Performance bottleneck condition triggered - large diagonal square!" << endl;
        abort();
    }
}

void check_grid_step_size(double stepSize) {
    if (stepSize < 0.5) { // Example threshold for excessive checks
        cerr << "Warning: Performance bottleneck condition triggered - grid step size too fine!" << endl;
        abort();
    }
}

signed main() {
    T1.in();
    T2.in();
    
    // Insert checks
    check_dense_grid_invariant(20000, 200); // Assuming gridSize is the dimension range
    check_diagonal_square_size(abs(T2.P[0].x - T2.P[2].x)); // Diagonal size check
    check_grid_step_size(0.25); // Grid step size check
    
    c(2, 5);
    for (double i = -100; i <= 100; i += 0.25)
        for (double j = -100; j <= 100; j += 0.25) {
            if (c(i, j)) {
                puts("YES");
                return 0;
            }
        }
    return puts("NO"), 0;
}
```

### Comments on Integration

- **Dense Grid Evaluation Check:** This check is placed before the loop to identify if the grid evaluation's potential area might be unnecessarily large.
- **Diagonal Square Size Check:** This is positioned after reading inputs to quickly alert if the diagonal square's size might lead to performance issues.
- **Grid Step Size Sensitivity Check:** This check ensures that the step size used is not excessively fine, which would cause too many iterations.

