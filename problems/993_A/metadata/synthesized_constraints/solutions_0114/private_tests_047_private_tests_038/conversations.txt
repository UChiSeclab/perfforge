system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long double eps = 0.0000001;
const long long inf = 1e15;
struct point {
  long long x, y;
  point() {}
  point(long long a, long long b) {
    x = a;
    y = b;
  }
};
struct vec {
  point st, fin;
  vec() {}
  vec(point a, point b) {
    st = a;
    fin = b;
  }
};
long long norm(vec q, point a) {
  long long x1 = q.fin.x - q.st.x, x2 = a.x - q.st.x;
  long long y1 = q.fin.y - q.st.y, y2 = a.y - q.st.y;
  if (x1 * y2 - x2 * y1 < 0) return 1;
  if (x1 * y2 - x2 * y1 == 0) return 0;
  return -1;
}
signed main() {
  point A1, B1, C1, D1;
  point A2, B2, C2, D2;
  cin >> A1.x >> A1.y >> B1.x >> B1.y >> C1.x >> C1.y >> D1.x >> D1.y;
  cin >> A2.x >> A2.y >> B2.x >> B2.y >> C2.x >> C2.y >> D2.x >> D2.y;
  vec v11 = vec(A1, B1), v12 = vec(B1, C1), v13 = vec(C1, D1),
      v14 = vec(D1, A1);
  vec v21 = vec(A2, B2), v22 = vec(B2, C2), v23 = vec(C2, D2),
      v24 = vec(D2, A2);
  vector<vec> W1 = {v11, v12, v13, v14}, W2 = {v21, v22, v23, v24};
  for (long long i = -100; i < 101; ++i) {
    for (long long j = -100; j < 101; ++j) {
      point a = point(i, j);
      long long q1 = 0, q2 = 0;
      long long val1 = 0, val2 = 0;
      for (auto u : W1) {
        long long b = norm(u, a);
        if (b == 0)
          q1++;
        else
          val1 += b;
      }
      for (auto u : W2) {
        long long b = norm(u, a);
        if (b == 0)
          q2++;
        else
          val2 += b;
      }
      if (val1 < 0)
        val1 -= q1;
      else
        val1 += q1;
      if (val2 < 0)
        val2 -= q2;
      else
        val2 += q2;
      if (abs(val1) == 4 && abs(val2) == 4) {
        cout << "YES";
        return 0;
      }
    }
  }
  cout << "NO";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 0.0000001; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1e15; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct point { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, y; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  point() {} /* line 7 slow_hit_count: 24, fast_hit_count: 24 */
  point(long long a, long long b) { /* line 8 slow_hit_count: 40401, fast_hit_count: 101 */
    x = a; /* line 9 slow_hit_count: 40401, fast_hit_count: 101 */
    y = b; /* line 10 slow_hit_count: 40401, fast_hit_count: 101 */
  } /* line 11 slow_hit_count: 40401, fast_hit_count: 101 */
}; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
struct vec { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  point st, fin; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  vec() {} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  vec(point a, point b) { /* line 16 slow_hit_count: 8, fast_hit_count: 8 */
    st = a; /* line 17 slow_hit_count: 8, fast_hit_count: 8 */
    fin = b; /* line 18 slow_hit_count: 8, fast_hit_count: 8 */
  } /* line 19 slow_hit_count: 8, fast_hit_count: 8 */
}; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long norm(vec q, point a) { /* line 21 slow_hit_count: 323208, fast_hit_count: 808 */
  long long x1 = q.fin.x - q.st.x, x2 = a.x - q.st.x; /* line 22 slow_hit_count: 323208, fast_hit_count: 808 */
  long long y1 = q.fin.y - q.st.y, y2 = a.y - q.st.y; /* line 23 slow_hit_count: 323208, fast_hit_count: 808 */
  if (x1 * y2 - x2 * y1 < 0) return 1; /* line 24 slow_hit_count: 323208, fast_hit_count: 808 */
  if (x1 * y2 - x2 * y1 == 0) return 0; /* line 25 slow_hit_count: 101406, fast_hit_count: 204 */
  return -1; /* line 26 slow_hit_count: 100198, fast_hit_count: 100 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  point A1, B1, C1, D1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  point A2, B2, C2, D2; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> A1.x >> A1.y >> B1.x >> B1.y >> C1.x >> C1.y >> D1.x >> D1.y; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> A2.x >> A2.y >> B2.x >> B2.y >> C2.x >> C2.y >> D2.x >> D2.y; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  vec v11 = vec(A1, B1), v12 = vec(B1, C1), v13 = vec(C1, D1), /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
      v14 = vec(D1, A1); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  vec v21 = vec(A2, B2), v22 = vec(B2, C2), v23 = vec(C2, D2), /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      v24 = vec(D2, A2); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vec> W1 = {v11, v12, v13, v14}, W2 = {v21, v22, v23, v24}; /* line 37 slow_hit_count: 3, fast_hit_count: 3 */
  for (long long i = -100; i < 101; ++i) { /* line 38 slow_hit_count: 202, fast_hit_count: 1 */
    for (long long j = -100; j < 101; ++j) { /* line 39 slow_hit_count: 40602, fast_hit_count: 101 */
      point a = point(i, j); /* line 40 slow_hit_count: 40401, fast_hit_count: 101 */
      long long q1 = 0, q2 = 0; /* line 41 slow_hit_count: 40401, fast_hit_count: 101 */
      long long val1 = 0, val2 = 0; /* line 42 slow_hit_count: 40401, fast_hit_count: 101 */
      for (auto u : W1) { /* line 43 slow_hit_count: 202005, fast_hit_count: 505 */
        long long b = norm(u, a); /* line 44 slow_hit_count: 161604, fast_hit_count: 404 */
        if (b == 0) /* line 45 slow_hit_count: 161604, fast_hit_count: 404 */
          q1++; /* line 46 slow_hit_count: 804, fast_hit_count: 102 */
        else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
          val1 += b; /* line 48 slow_hit_count: 160800, fast_hit_count: 302 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      for (auto u : W2) { /* line 50 slow_hit_count: 202005, fast_hit_count: 505 */
        long long b = norm(u, a); /* line 51 slow_hit_count: 161604, fast_hit_count: 404 */
        if (b == 0) /* line 52 slow_hit_count: 161604, fast_hit_count: 404 */
          q2++; /* line 53 slow_hit_count: 404, fast_hit_count: 2 */
        else /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
          val2 += b; /* line 55 slow_hit_count: 161200, fast_hit_count: 402 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      if (val1 < 0) /* line 57 slow_hit_count: 40401, fast_hit_count: 101 */
        val1 -= q1; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        val1 += q1; /* line 60 slow_hit_count: 40401, fast_hit_count: 101 */
      if (val2 < 0) /* line 61 slow_hit_count: 40401, fast_hit_count: 101 */
        val2 -= q2; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
        val2 += q2; /* line 64 slow_hit_count: 40401, fast_hit_count: 101 */
      if (abs(val1) == 4 && abs(val2) == 4) { /* line 65 slow_hit_count: 40401, fast_hit_count: 101 */
        cout << "YES"; /* line 66 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 67 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO"; /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count analysis, we notice the following lines and functions with significant differences between the slow and fast inputs:

1. **Line 21 (Function `norm`)**:
   - Hit count: Slow input = 323,208; Fast input = 808.
   - This function is hit significantly more times in the slow input, indicating that it may be a bottleneck.

2. **Line 38 (Outer loop iterating over `i`)**:
   - Hit count: Slow input = 202; Fast input = 1.
   - This loop is executed more times for the slow input, which suggests that the outer iteration is a factor in performance.

3. **Line 39 (Inner loop iterating over `j`)**:
   - Hit count: Slow input = 40,602; Fast input = 101.
   - Like the outer loop, this inner loop is executed a significantly larger number of times in the slow input scenario.

4. **Line 44 and 51 (Loop over vectors `W1` and `W2`)**:
   - Hit counts: Slow input = 161,604 (each); Fast input = 404 (each).
   - These loops make calls to the `norm` function, contributing to the high execution count.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of line hit counts and the observed input constraints, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Grid Search Overhead**
   - **Natural Language Description**: "If the algorithm performs a grid search over a large number of points (near the maximum range of coordinates from -100 to 100), the performance will degrade significantly due to the extensive iteration."
   - **Condition**: The loops at lines 38 and 39 iterate over a 201x201 grid. If both squares are positioned such that the algorithm must evaluate a large grid region, the performance will slow down.

2. **Invariant 2: High Frequency of `norm` Function Calls**
   - **Natural Language Description**: "If the `norm` function is invoked excessively due to overlapping or nearly overlapping configurations of the two squares, performance will degrade as this function is computationally intensive and called repeatedly."
   - **Condition**: The function is called within nested loops that iterate over all vectors and points, suggesting that when the squares are positioned such that they require extensive checks, the function becomes a bottleneck.

3. **Invariant 3: Extensive Vector Intersection Checks**
   - **Natural Language Description**: "When the algorithm must check the intersection of vectors formed by the square sides over a dense grid of points, especially when the squares are close together, performance may degrade due to the large number of intersection evaluations."
   - **Condition**: The loops involving vector intersection checks are executed a large number of times when the squares are aligned such that potential overlap regions are large.

By implementing these invariants, a fuzzer or a performance testing framework could detect and prevent scenarios that lead to inefficiency in the algorithm, ensuring more consistent performance across different input configurations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Runtime Checks in C++

Let's translate the previously derived natural language invariants into C++ runtime checks:

1. **Grid Search Overhead Check**: This check will validate if the extensive grid search, iterating over a large number of points, is happening.

```cpp
void check_grid_search_invariant(int i_max, int j_max) {
    if (i_max > 200 && j_max > 200) {
        cerr << "Warning: Performance bottleneck condition triggered due to large grid search!" << endl;
        abort();
    }
}
```

2. **High Frequency of `norm` Function Calls Check**: This check identifies if the `norm` function is being called excessively, indicating a potential performance bottleneck.

```cpp
static long long norm_call_count = 0;

void increment_norm_call_count() {
    norm_call_count++;
}

void check_norm_calls_invariant() {
    if (norm_call_count > 100000) { // Example threshold based on known expensive calls
        cerr << "Warning: Performance bottleneck condition triggered due to excessive norm function calls!" << endl;
        abort();
    }
}
```

3. **Extensive Vector Intersection Checks**: This check will determine if vector intersection checks are being done extensively.

```cpp
void check_vector_intersection_invariant(int intersection_checks) {
    if (intersection_checks > 100000) { // Arbitrary threshold for extensive checks
        cerr << "Warning: Performance bottleneck condition triggered due to extensive vector intersection checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original C++ Program

Integrate these checks into the original program, ensuring they are placed effectively to detect performance bottlenecks without adding overhead to inner loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long double eps = 0.0000001;
const long long inf = 1e15;

struct point {
  long long x, y;
  point() {}
  point(long long a, long long b) {
    x = a;
    y = b;
  }
};

struct vec {
  point st, fin;
  vec() {}
  vec(point a, point b) {
    st = a;
    fin = b;
  }
};

long long norm(vec q, point a) {
  increment_norm_call_count(); // Increment norm call counter
  long long x1 = q.fin.x - q.st.x, x2 = a.x - q.st.x;
  long long y1 = q.fin.y - q.st.y, y2 = a.y - q.st.y;
  if (x1 * y2 - x2 * y1 < 0) return 1;
  if (x1 * y2 - x2 * y1 == 0) return 0;
  return -1;
}

// Function to check grid search invariant
void check_grid_search_invariant(int i_max, int j_max) {
    if (i_max > 200 && j_max > 200) {
        cerr << "Warning: Performance bottleneck condition triggered due to large grid search!" << endl;
        abort();
    }
}

// Function to check norm calls invariant
void check_norm_calls_invariant() {
    if (norm_call_count > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive norm function calls!" << endl;
        abort();
    }
}

// Function to check vector intersection invariant
void check_vector_intersection_invariant(int intersection_checks) {
    if (intersection_checks > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive vector intersection checks!" << endl;
        abort();
    }
}

signed main() {
  point A1, B1, C1, D1;
  point A2, B2, C2, D2;
  cin >> A1.x >> A1.y >> B1.x >> B1.y >> C1.x >> C1.y >> D1.x >> D1.y;
  cin >> A2.x >> A2.y >> B2.x >> B2.y >> C2.x >> C2.y >> D2.x >> D2.y;
  vec v11 = vec(A1, B1), v12 = vec(B1, C1), v13 = vec(C1, D1),
      v14 = vec(D1, A1);
  vec v21 = vec(A2, B2), v22 = vec(B2, C2), v23 = vec(C2, D2),
      v24 = vec(D2, A2);
  vector<vec> W1 = {v11, v12, v13, v14}, W2 = {v21, v22, v23, v24};

  // Check grid search invariant before loops
  check_grid_search_invariant(201, 201);

  for (long long i = -100; i < 101; ++i) {
    for (long long j = -100; j < 101; ++j) {
      point a = point(i, j);
      long long q1 = 0, q2 = 0;
      long long val1 = 0, val2 = 0;
      int intersection_checks = 0; // Counter for intersection checks

      for (auto u : W1) {
        long long b = norm(u, a);
        if (b == 0)
          q1++;
        else
          val1 += b;
        intersection_checks++; // Increment intersection check counter
      }

      for (auto u : W2) {
        long long b = norm(u, a);
        if (b == 0)
          q2++;
        else
          val2 += b;
        intersection_checks++; // Increment intersection check counter
      }

      // Check vector intersection invariant
      check_vector_intersection_invariant(intersection_checks);

      if (val1 < 0)
        val1 -= q1;
      else
        val1 += q1;
      if (val2 < 0)
        val2 -= q2;
      else
        val2 += q2;
      if (abs(val1) == 4 && abs(val2) == 4) {
        cout << "YES";
        return 0;
      }
    }
  }

  // Check norm calls invariant after loops
  check_norm_calls_invariant();

  cout << "NO";
  return 0;
}
```

### Explanation of Integration:

- **Grid Search Check**: Executed once before entering the main loops to ensure we don't iterate over an excessive number of points.
- **Norm Calls Check**: Accumulates the count of `norm` calls and checks after the loops.
- **Intersection Checks**: Counts the intersection evaluations per point and verifies within each iteration. 

