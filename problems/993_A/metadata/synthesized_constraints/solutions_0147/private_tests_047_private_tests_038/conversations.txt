system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MN = 100005, inf = 1000000005, MOD = 1000000007;
const long long INF = 1000000000000000005LL;
pair<int, int> A[10], B[10];
int det(pair<int, int> A, pair<int, int> B, pair<int, int> C) {
  int a = B.first - A.first, b = B.second - A.second, c = C.first - A.first,
      d = C.second - A.second;
  return (a * d - b * c);
}
bool inside(pair<int, int> a) {
  int mia = inf, mib = inf;
  int maa = -inf, mab = -inf;
  for (int i = 0; i < 4; ++i) {
    int cura = det(A[i], A[(i + 1) % 4], a),
        curb = det(B[i], B[(i + 1) % 4], a);
    mia = min(mia, cura);
    mib = min(mib, curb);
    maa = max(maa, cura);
    mab = max(mab, curb);
  }
  int ok = 0;
  if (mia >= 0 || maa <= 0) ++ok;
  if (mib >= 0 || mab <= 0) ++ok;
  return (ok == 2);
}
int main() {
  for (int i = 0; i < 4; ++i) scanf("%d%d", &A[i].first, &A[i].second);
  for (int i = 0; i < 4; ++i) scanf("%d%d", &B[i].first, &B[i].second);
  for (int x = -100; x <= 100; ++x)
    for (int y = -100; y <= 100; ++y) {
      pair<int, int> cur = {x, y};
      if (inside(cur)) {
        printf("YES");
        return 0;
      }
    }
  printf("NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MN = 100005, inf = 1000000005, MOD = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1000000000000000005LL; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> A[10], B[10]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int det(pair<int, int> A, pair<int, int> B, pair<int, int> C) { /* line 6 slow_hit_count: 323208, fast_hit_count: 808 */
  int a = B.first - A.first, b = B.second - A.second, c = C.first - A.first, /* line 7 slow_hit_count: 323208, fast_hit_count: 808 */
      d = C.second - A.second; /* line 8 slow_hit_count: 323208, fast_hit_count: 808 */
  return (a * d - b * c); /* line 9 slow_hit_count: 323208, fast_hit_count: 808 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool inside(pair<int, int> a) { /* line 11 slow_hit_count: 40401, fast_hit_count: 101 */
  int mia = inf, mib = inf; /* line 12 slow_hit_count: 40401, fast_hit_count: 101 */
  int maa = -inf, mab = -inf; /* line 13 slow_hit_count: 40401, fast_hit_count: 101 */
  for (int i = 0; i < 4; ++i) { /* line 14 slow_hit_count: 202005, fast_hit_count: 505 */
    int cura = det(A[i], A[(i + 1) % 4], a), /* line 15 slow_hit_count: 161604, fast_hit_count: 404 */
        curb = det(B[i], B[(i + 1) % 4], a); /* line 16 slow_hit_count: 161604, fast_hit_count: 404 */
    mia = min(mia, cura); /* line 17 slow_hit_count: 161604, fast_hit_count: 404 */
    mib = min(mib, curb); /* line 18 slow_hit_count: 161604, fast_hit_count: 404 */
    maa = max(maa, cura); /* line 19 slow_hit_count: 161604, fast_hit_count: 404 */
    mab = max(mab, curb); /* line 20 slow_hit_count: 161604, fast_hit_count: 404 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int ok = 0; /* line 22 slow_hit_count: 40401, fast_hit_count: 101 */
  if (mia >= 0 || maa <= 0) ++ok; /* line 23 slow_hit_count: 40401, fast_hit_count: 101 */
  if (mib >= 0 || mab <= 0) ++ok; /* line 24 slow_hit_count: 40401, fast_hit_count: 101 */
  return (ok == 2); /* line 25 slow_hit_count: 40401, fast_hit_count: 101 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 4; ++i) scanf("%d%d", &A[i].first, &A[i].second); /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
  for (int i = 0; i < 4; ++i) scanf("%d%d", &B[i].first, &B[i].second); /* line 29 slow_hit_count: 5, fast_hit_count: 5 */
  for (int x = -100; x <= 100; ++x) /* line 30 slow_hit_count: 202, fast_hit_count: 1 */
    for (int y = -100; y <= 100; ++y) { /* line 31 slow_hit_count: 40602, fast_hit_count: 101 */
      pair<int, int> cur = {x, y}; /* line 32 slow_hit_count: 40401, fast_hit_count: 101 */
      if (inside(cur)) { /* line 33 slow_hit_count: 40401, fast_hit_count: 101 */
        printf("YES"); /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  printf("NO"); /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the given C program, we need to analyze the line-level hit counts and derive performance-characterizing invariants. Here's a detailed breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The function `det()` is called significantly more times in the slow input case (323,208 hits) compared to the fast input (808 hits). This suggests that the `det()` function is a bottleneck.
   - The `inside()` function is also called 40,401 times for the slow input as opposed to 101 times for the fast input, which indicates that the outer loop structures are likely being executed many more times than necessary.
   - Lines in the nested loops (lines 30-33) and their operations, especially the check within the `inside()` function, are repeatedly executed.

2. **Loop Interactions:**
   - The program iterates over every point within the bounds `(-100,100)` for both `x` and `y`, leading to a potential 40,401 iterations for the slow input.
   - The `inside()` function checks if a point is inside either square using determinants, leading to repetitive and expensive calculations for each grid point.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive some performance-characterizing invariants:

1. **Exhaustive Point Checking:**
   - **Invariant Description:** "When the coordinates of the square vertices result in exhaustive point checking over a large grid, the program may slow down. This occurs when the axis-aligned square and the rotated square cover a large area in their potential bounding box coordinates."
   
   ```cpp
   void check_exhaustive_point_checking(bool condition) {
       if (condition) {
           cerr << "Warning: exhaustive_point_checking triggered - large bounding box area" << endl;
           abort();
       }
   }

   // Before iterating through grid points
   int bounding_box_area = (max_x - min_x) * (max_y - min_y);
   check_exhaustive_point_checking(bounding_box_area > threshold);
   ```

2. **Determinant Calculation Overhead:**
   - **Invariant Description:** "When the number of determinant calculations becomes excessive due to a grid search approach, the computation may become a bottleneck. This is likely if the grid search involves checking many points relative to the size and orientation of the squares."

   ```cpp
   void check_determinant_overhead(bool condition) {
       if (condition) {
           cerr << "Warning: determinant_overhead triggered - excessive determinant calculations" << endl;
           abort();
       }
   }

   // After calculating determinants
   int determinant_count = /* logic to count determinant calculations */;
   check_determinant_overhead(determinant_count > threshold);
   ```

These invariants indicate that the slowdown is primarily due to the exhaustive nature of checking every point in the grid and performing determinant operations for each. Optimizations could be considered by reducing unnecessary checks or leveraging geometric properties to minimize the search space.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Based on the performance characterizing invariants identified earlier, we will implement the following runtime checks in C++:

1. **Exhaustive Point Checking:**
   - We will check if the area of the bounding box covering the potential region of interest is too large, which might indicate an exhaustive point checking.

2. **Determinant Calculation Overhead:**
   - We will monitor the number of determinant calculations to ensure it's not growing excessively due to the nested loops.

Here's the C++ code to implement these checkers:

```cpp
// Checker for exhaustive point checking
void check_exhaustive_point_checking(int min_x, int max_x, int min_y, int max_y, int threshold) {
    int bounding_box_area = (max_x - min_x) * (max_y - min_y);
    if (bounding_box_area > threshold) {
        cerr << "Warning: exhaustive_point_checking triggered - large bounding box area" << endl;
        abort();
    }
}

// Checker for determinant calculation overhead
void check_determinant_overhead(int determinant_count, int threshold) {
    if (determinant_count > threshold) {
        cerr << "Warning: determinant_overhead triggered - excessive determinant calculations" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, we will integrate these checks into the original C++ program at appropriate places to monitor the performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for exhaustive point checking
void check_exhaustive_point_checking(int min_x, int max_x, int min_y, int max_y, int threshold) {
    int bounding_box_area = (max_x - min_x) * (max_y - min_y);
    if (bounding_box_area > threshold) {
        cerr << "Warning: exhaustive_point_checking triggered - large bounding box area" << endl;
        abort();
    }
}

// Checker for determinant calculation overhead
void check_determinant_overhead(int determinant_count, int threshold) {
    if (determinant_count > threshold) {
        cerr << "Warning: determinant_overhead triggered - excessive determinant calculations" << endl;
        abort();
    }
}

const int inf = 1000000005;
pair<int, int> A[10], B[10];
int det(pair<int, int> A, pair<int, int> B, pair<int, int> C) {
    int a = B.first - A.first, b = B.second - A.second, c = C.first - A.first,
        d = C.second - A.second;
    return (a * d - b * c);
}

bool inside(pair<int, int> a) {
    int mia = inf, mib = inf;
    int maa = -inf, mab = -inf;
    for (int i = 0; i < 4; ++i) {
        int cura = det(A[i], A[(i + 1) % 4], a),
            curb = det(B[i], B[(i + 1) % 4], a);
        mia = min(mia, cura);
        mib = min(mib, curb);
        maa = max(maa, cura);
        mab = max(mab, curb);
    }
    int ok = 0;
    if (mia >= 0 || maa <= 0) ++ok;
    if (mib >= 0 || mab <= 0) ++ok;
    return (ok == 2);
}

int main() {
    for (int i = 0; i < 4; ++i) scanf("%d%d", &A[i].first, &A[i].second);
    for (int i = 0; i < 4; ++i) scanf("%d%d", &B[i].first, &B[i].second);

    // Bounding box calculation
    int min_x = -100, max_x = 100, min_y = -100, max_y = 100;
    check_exhaustive_point_checking(min_x, max_x, min_y, max_y, 40000);  // Example threshold

    int determinant_count = 0;
    for (int x = min_x; x <= max_x; ++x) {
        for (int y = min_y; y <= max_y; ++y) {
            pair<int, int> cur = {x, y};
            determinant_count += 8;  // Each call to inside invokes det 8 times
            if (inside(cur)) {
                printf("YES");
                return 0;
            }
        }
    }
    
    check_determinant_overhead(determinant_count, 320000);  // Example threshold
    printf("NO");
    return 0;
}
```

### Explanation

- **Exhaustive Point Checking:** We calculate the bounding box area and check if it exceeds a threshold indicative of potential performance problems. The check is done just after reading inputs and before entering the nested loops.

- **Determinant Calculation Overhead:** We count the number of determinant calculations based on the inner loop logic. After looping through all grid points, we check if this count exceeds a threshold.

These checks will help a fuzzer identify performance bottlenecks when they are triggered during execution.

