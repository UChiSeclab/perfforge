system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
const double eps = 1e-8;
int x[2][10], y[2][10], mxx1 = -111, mxy1 = -111, mnx1 = 111, mny1 = 111;
double dis(double x1, double y1, double x2, double y2) {
  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
}
int main() {
  for (int i = 1; i <= 4; i++) scanf("%d %d", &x[0][i], &y[0][i]);
  for (int i = 1; i <= 4; i++) scanf("%d %d", &x[1][i], &y[1][i]);
  double midx = (x[1][1] + x[1][3]) / 2.0, midy = (y[1][1] + y[1][3]) / 2.0;
  for (int i = 1; i <= 4; i++) {
    mxx1 = max(mxx1, x[0][i]);
    mxy1 = max(mxy1, y[0][i]);
    mnx1 = min(mnx1, x[0][i]);
    mny1 = min(mny1, y[0][i]);
  }
  int mxx = -111, mxy = -111, mnx = 111, mny = 111;
  for (int i = 1; i <= 4; i++) {
    mxx = max(mxx, x[1][i]);
    mxy = max(mxy, y[1][i]);
    mnx = min(mnx, x[1][i]);
    mny = min(mny, y[1][i]);
  }
  for (double xx = -100; xx <= 100; xx += 0.1)
    for (double yy = -100; yy <= 100; yy += 0.1) {
      double d = dis(xx, yy, midx, midy);
      bool f1 = false, f2 = false;
      if (d < dis(xx, yy, mxx, mxy) + eps && d < dis(xx, yy, mxx, mny) + eps &&
          d < dis(xx, yy, mnx, mxy) + eps && d < dis(xx, yy, mnx, mny) + eps)
        f2 = true;
      if (xx < mxx1 + eps && xx > mnx1 - eps && yy < mxy1 + eps &&
          yy > mny1 - eps)
        f1 = true;
      if (f1 && f2) return puts("YES"), 0;
    }
  puts("NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-8; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int x[2][10], y[2][10], mxx1 = -111, mxy1 = -111, mnx1 = 111, mny1 = 111; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
double dis(double x1, double y1, double x2, double y2) { /* line 6 slow_hit_count: 17017005, fast_hit_count: 5005 */
  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1); /* line 7 slow_hit_count: 17017005, fast_hit_count: 5005 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4; i++) scanf("%d %d", &x[0][i], &y[0][i]); /* line 10 slow_hit_count: 5, fast_hit_count: 5 */
  for (int i = 1; i <= 4; i++) scanf("%d %d", &x[1][i], &y[1][i]); /* line 11 slow_hit_count: 5, fast_hit_count: 5 */
  double midx = (x[1][1] + x[1][3]) / 2.0, midy = (y[1][1] + y[1][3]) / 2.0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4; i++) { /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
    mxx1 = max(mxx1, x[0][i]); /* line 14 slow_hit_count: 4, fast_hit_count: 4 */
    mxy1 = max(mxy1, y[0][i]); /* line 15 slow_hit_count: 4, fast_hit_count: 4 */
    mnx1 = min(mnx1, x[0][i]); /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
    mny1 = min(mny1, y[0][i]); /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int mxx = -111, mxy = -111, mnx = 111, mny = 111; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4; i++) { /* line 20 slow_hit_count: 5, fast_hit_count: 5 */
    mxx = max(mxx, x[1][i]); /* line 21 slow_hit_count: 4, fast_hit_count: 4 */
    mxy = max(mxy, y[1][i]); /* line 22 slow_hit_count: 4, fast_hit_count: 4 */
    mnx = min(mnx, x[1][i]); /* line 23 slow_hit_count: 4, fast_hit_count: 4 */
    mny = min(mny, y[1][i]); /* line 24 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  for (double xx = -100; xx <= 100; xx += 0.1) /* line 26 slow_hit_count: 2002, fast_hit_count: 1 */
    for (double yy = -100; yy <= 100; yy += 0.1) { /* line 27 slow_hit_count: 4006002, fast_hit_count: 1001 */
      double d = dis(xx, yy, midx, midy); /* line 28 slow_hit_count: 4004001, fast_hit_count: 1001 */
      bool f1 = false, f2 = false; /* line 29 slow_hit_count: 4004001, fast_hit_count: 1001 */
      if (d < dis(xx, yy, mxx, mxy) + eps && d < dis(xx, yy, mxx, mny) + eps && /* line 30 slow_hit_count: 7507502, fast_hit_count: 2002 */
          d < dis(xx, yy, mnx, mxy) + eps && d < dis(xx, yy, mnx, mny) + eps) /* line 31 slow_hit_count: 7507502, fast_hit_count: 2002 */
        f2 = true; /* line 32 slow_hit_count: 2002001, fast_hit_count: 1 */
      if (xx < mxx1 + eps && xx > mnx1 - eps && yy < mxy1 + eps && /* line 33 slow_hit_count: 4004001, fast_hit_count: 1001 */
          yy > mny1 - eps) /* line 34 slow_hit_count: 22011, fast_hit_count: 1001 */
        f1 = true; /* line 35 slow_hit_count: 121, fast_hit_count: 1001 */
      if (f1 && f2) return puts("YES"), 0; /* line 36 slow_hit_count: 4004001, fast_hit_count: 1001 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  puts("NO"); /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts

1. **Disproportionate Hit Counts**: The function `dis` is called significantly more times in the slow run (17,017,005 hits) compared to the fast run (5,005 hits). This is an indicator that the double nested loop iterating over `xx` and `yy` is excessively executed during the slow input.

2. **Looping Construct**: The nested loops (lines 26 and 27) iterate over `xx` and `yy` from -100 to 100 with a step of 0.1. This results in 201x201 = 40,401 iterations for the slow input, leading to a high number of calls to the `dis` function.

3. **Conditional Checks**: The condition at line 30 and subsequent lines is checked repeatedly for each point `(xx, yy)`, contributing to the lengthy execution time for the slow input.

### Interaction with Data Structures

- The code computes distances between `(xx, yy)` and key points of the squares, determining if these points lie within certain bounds. This geometric computation is highly repetitive due to the fine granularity of the loop increments.
  
- The problem is exacerbated if the computed distances fall into a region where the squares are nearly touching or overlapping, requiring the full extent of loop iterations to ascertain no intersection.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants in Natural Language

1. **High Frequency Grid Search**: When the algorithm attempts to detect intersections through a fine-grained grid search (by incrementing in small steps like 0.1 over a large coordinate range), the number of iterations increases exponentially. This can lead to performance bottlenecks, particularly if the search space includes dense regions where squares are almost touching.

   - **Invariant**: "If the algorithm performs a dense grid search over a large range, especially when squares are close or nearly intersecting, the performance may degrade significantly."

2. **Distance Computation Overhead**: The necessity to compute distances within a nested loop for each grid point leads to excessive calculations. This becomes a bottleneck when such computations do not yield early exits, especially in cases where the squares are isolated but close.

   - **Invariant**: "If the iterative distance checks for intersection do not yield early exits and cover a wide range of points, performance might degrade severely."

3. **Bounding Box Inefficiencies**: The approach of calculating bounding boxes and checking conditions for each point without leveraging geometric properties of the squares (like symmetry or fixed angles) might lead to inefficient computations, especially when the square vertices are near the boundaries of the search grid.

   - **Invariant**: "If bounding box checks are performed exhaustively over a detailed grid without using geometric optimizations, computational cost can become significant."

### Recommendations

- **Early Exit Conditions**: Introduce checks to exit loops early if an intersection is determined, reducing unnecessary computation.
  
- **Geometric Optimization**: Leverage mathematical properties of the squares (e.g., symmetry, fixed angles) to reduce the grid search area or step size dynamically.

- **Adaptive Step Size**: Consider adjusting the step size based on proximity to relevant features or thresholds, reducing unnecessary detailed checks in regions unlikely to contribute to intersection detection.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Checkers in C++

Let's implement the checkers for the performance-characterizing invariants derived earlier. These checkers aim to identify potential performance bottlenecks during runtime.

### Checker Code

```cpp
void check_grid_search_invariant(double stepX, double stepY, int gridSizeX, int gridSizeY) {
    // Check if the loop steps are very fine over a large grid, which may cause performance issues
    if ((stepX < 0.5 || stepY < 0.5) && gridSizeX * gridSizeY > 10000) {
        cerr << "Warning: grid_search_invariant triggered - dense grid search over a large range" << endl;
        abort();
    }
}

void check_distance_computation_invariant(int numDistanceCalculations) {
    // Check if the number of distance calculations exceeds a threshold
    if (numDistanceCalculations > 1000000) {
        cerr << "Warning: distance_computation_invariant triggered - excessive distance computations" << endl;
        abort();
    }
}

void check_bounding_box_invariant(bool exhaustiveBoundingBoxChecks, int totalChecks) {
    // Check if bounding box checks are performed exhaustively over a large area
    if (exhaustiveBoundingBoxChecks && totalChecks > 200000) {
        cerr << "Warning: bounding_box_invariant triggered - exhaustive bounding box checks" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original Program

Next, we'll integrate these checkers into the provided C++ code at strategic points to detect potential performance issues without adding unnecessary overhead to tight loops.

### Instrumented C++ Code

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
const double eps = 1e-8;
int x[2][10], y[2][10], mxx1 = -111, mxy1 = -111, mnx1 = 111, mny1 = 111;

double dis(double x1, double y1, double x2, double y2) {
    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
}

void check_grid_search_invariant(double stepX, double stepY, int gridSizeX, int gridSizeY) {
    if ((stepX < 0.5 || stepY < 0.5) && gridSizeX * gridSizeY > 10000) {
        cerr << "Warning: grid_search_invariant triggered - dense grid search over a large range" << endl;
        abort();
    }
}

void check_distance_computation_invariant(int numDistanceCalculations) {
    if (numDistanceCalculations > 1000000) {
        cerr << "Warning: distance_computation_invariant triggered - excessive distance computations" << endl;
        abort();
    }
}

void check_bounding_box_invariant(bool exhaustiveBoundingBoxChecks, int totalChecks) {
    if (exhaustiveBoundingBoxChecks && totalChecks > 200000) {
        cerr << "Warning: bounding_box_invariant triggered - exhaustive bounding box checks" << endl;
        abort();
    }
}

int main() {
    for (int i = 1; i <= 4; i++) scanf("%d %d", &x[0][i], &y[0][i]);
    for (int i = 1; i <= 4; i++) scanf("%d %d", &x[1][i], &y[1][i]);
    
    double midx = (x[1][1] + x[1][3]) / 2.0, midy = (y[1][1] + y[1][3]) / 2.0;
    
    for (int i = 1; i <= 4; i++) {
        mxx1 = max(mxx1, x[0][i]);
        mxy1 = max(mxy1, y[0][i]);
        mnx1 = min(mnx1, x[0][i]);
        mny1 = min(mny1, y[0][i]);
    }
    
    int mxx = -111, mxy = -111, mnx = 111, mny = 111;
    for (int i = 1; i <= 4; i++) {
        mxx = max(mxx, x[1][i]);
        mxy = max(mxy, y[1][i]);
        mnx = min(mnx, x[1][i]);
        mny = min(mny, y[1][i]);
    }

    double stepX = 0.1, stepY = 0.1;
    int gridSizeX = (int)(200 / stepX) + 1, gridSizeY = (int)(200 / stepY) + 1;
    
    check_grid_search_invariant(stepX, stepY, gridSizeX, gridSizeY);

    int numDistanceCalculations = 0;
    bool exhaustiveBoundingBoxChecks = false;
    int totalBoundingBoxChecks = 0;

    for (double xx = -100; xx <= 100; xx += stepX)
        for (double yy = -100; yy <= 100; yy += stepY) {
            double d = dis(xx, yy, midx, midy);
            numDistanceCalculations++;
            
            bool f1 = false, f2 = false;
            if (d < dis(xx, yy, mxx, mxy) + eps && 
                d < dis(xx, yy, mxx, mny) + eps &&
                d < dis(xx, yy, mnx, mxy) + eps && 
                d < dis(xx, yy, mnx, mny) + eps)
                f2 = true;
            
            if (xx < mxx1 + eps && xx > mnx1 - eps && yy < mxy1 + eps && yy > mny1 - eps)
                f1 = true;
            
            totalBoundingBoxChecks++;
            if (f1 && f2) return puts("YES"), 0;
        }
    
    if (gridSizeX * gridSizeY == totalBoundingBoxChecks) {
        exhaustiveBoundingBoxChecks = true;
    }

    check_distance_computation_invariant(numDistanceCalculations);
    check_bounding_box_invariant(exhaustiveBoundingBoxChecks, totalBoundingBoxChecks);

    puts("NO");
    return 0;
}
```

### Explanation

- **Grid Search Invariant**: The `check_grid_search_invariant` function checks if the loop steps are very fine over a large grid, which can lead to performance issues.
  
- **Distance Computation Invariant**: The `check_distance_computation_invariant` function monitors the number of distance calculations to ensure it doesn't exceed a reasonable threshold.

- **Bounding Box Invariant**: The `check_bounding_box_invariant` function checks if bounding box checks are performed exhaustively over the grid, which can be inefficient in large grids.

By adding these checkers, we help detect potential bottlenecks early and improve the program's performance in handling various inputs.

