system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 2005;
int F[N][N];
int main() {
  int x1 = 200, y1 = 200, x2 = 0, y2 = 0;
  for (int i = 1; i <= 4; i++) {
    int x, y;
    cin >> x >> y;
    x += 100;
    y += 100;
    x1 = min(x, x1);
    y1 = min(y, y1);
    x2 = max(x, x2);
    y2 = max(y, y2);
  }
  x1 *= 2;
  y1 *= 2;
  x2 *= 2;
  y2 *= 2;
  for (int i = x1; i <= x2; i++) {
    for (int j = y1; j <= y2; j++) {
      F[i][j] = 1;
    }
  }
  x1 = 200, y1 = 200, x2 = 0, y2 = 0;
  for (int i = 1; i <= 4; i++) {
    int x, y;
    cin >> x >> y;
    x += 100;
    y += 100;
    x1 = min(x, x1);
    y1 = min(y, y1);
    x2 = max(x, x2);
    y2 = max(y, y2);
  }
  x1 *= 2;
  y1 *= 2;
  x2 *= 2;
  y2 *= 2;
  int yy = (y1 + y2) / 2, xx = (x1 + x2) / 2;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      if (F[i][j] == 0) continue;
      int x = j - i, y = i + j;
      if (x <= yy - x1 and x >= yy - x2 and y <= xx + y2 and y >= xx + y1) {
        printf("YES");
        return 0;
      }
    }
  }
  printf("NO");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 99 100 100 100 100 99
-100 0 0 100 100 0 0 -100


(G.2) Fast Input

-100 -100 -100 100 100 100 100 -100
-100 0 0 100 100 0 0 -100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int F[N][N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int x1 = 200, y1 = 200, x2 = 0, y2 = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4; i++) { /* line 7 slow_hit_count: 5, fast_hit_count: 5 */
    int x, y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
    x += 100; /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
    y += 100; /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
    x1 = min(x, x1); /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
    y1 = min(y, y1); /* line 13 slow_hit_count: 4, fast_hit_count: 4 */
    x2 = max(x, x2); /* line 14 slow_hit_count: 4, fast_hit_count: 4 */
    y2 = max(y, y2); /* line 15 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  x1 *= 2; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  y1 *= 2; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  x2 *= 2; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  y2 *= 2; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = x1; i <= x2; i++) { /* line 21 slow_hit_count: 4, fast_hit_count: 402 */
    for (int j = y1; j <= y2; j++) { /* line 22 slow_hit_count: 12, fast_hit_count: 161202 */
      F[i][j] = 1; /* line 23 slow_hit_count: 9, fast_hit_count: 160801 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  x1 = 200, y1 = 200, x2 = 0, y2 = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4; i++) { /* line 27 slow_hit_count: 5, fast_hit_count: 5 */
    int x, y; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 29 slow_hit_count: 4, fast_hit_count: 4 */
    x += 100; /* line 30 slow_hit_count: 4, fast_hit_count: 4 */
    y += 100; /* line 31 slow_hit_count: 4, fast_hit_count: 4 */
    x1 = min(x, x1); /* line 32 slow_hit_count: 4, fast_hit_count: 4 */
    y1 = min(y, y1); /* line 33 slow_hit_count: 4, fast_hit_count: 4 */
    x2 = max(x, x2); /* line 34 slow_hit_count: 4, fast_hit_count: 4 */
    y2 = max(y, y2); /* line 35 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  x1 *= 2; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  y1 *= 2; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  x2 *= 2; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  y2 *= 2; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int yy = (y1 + y2) / 2, xx = (x1 + x2) / 2; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; i++) { /* line 42 slow_hit_count: 2006, fast_hit_count: 1 */
    for (int j = 0; j < N; j++) { /* line 43 slow_hit_count: 4022030, fast_hit_count: 201 */
      if (F[i][j] == 0) continue; /* line 44 slow_hit_count: 4020025, fast_hit_count: 201 */
      int x = j - i, y = i + j; /* line 45 slow_hit_count: 9, fast_hit_count: 201 */
      if (x <= yy - x1 and x >= yy - x2 and y <= xx + y2 and y >= xx + y1) { /* line 46 slow_hit_count: 9, fast_hit_count: 201 */
        printf("YES"); /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  printf("NO"); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - **Line 21 (`for (int i = x1; i <= x2; i++)`) and Line 22 (`for (int j = y1; j <= y2; j++)`):** 
     - Slow Input: 4 and 12 hits respectively.
     - Fast Input: 402 and 161,202 hits respectively.
   - **Line 42 (`for (int i = 0; i < N; i++)`) and Line 43 (`for (int j = 0; j < N; j++)`):** 
     - Slow Input: 2006 and 4,022,030 hits respectively.
     - Fast Input: 1 and 201 hits respectively.

2. **Pinpointed Slow Path:**
   - The most significant discrepancy is observed in the nested loop starting at line 42. The slow input results in significantly higher iterations, particularly in the loop at line 43. This suggests that the loop is iterating over the matrix `F` extensively for the slow input.

3. **Inference on Data Structures and Loops:**
   - The matrix `F` is being filled and then checked extensively for certain conditions. The slow input seems to cause the loops at lines 42 and 43 to go through nearly the entire matrix `F` due to the condition checks on `F` in line 44.
   - The slow path is triggered when the second square, which is rotated, possibly overlaps or is fully enclosed within the first square, causing a large section of the matrix `F` to be traversed.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants in Natural Language:**

   - **Invariant 1: Large Area Overlap**
     - Natural Language: "If the squares have a large overlapping area, particularly when one square is nearly or fully enclosed by the other, the algorithm tends to iterate over a large portion of the matrix, causing a slowdown."
     - This invariant captures the essence of the slow execution path observed, where the overlapping area leads to a significant number of iterations over the matrix `F`.

   - **Invariant 2: Extensive Matrix Traversal**
     - Natural Language: "When the combination of transformed coordinates results in a condition where multiple rows and columns of the matrix `F` are marked as occupied, the program may experience performance degradation."
     - This condition is likely true when the diagonal square is positioned such that it aligns with a larger segment of the matrix grid.

These invariants suggest that the program's performance is heavily influenced by the spatial relationship between the two squares, especially when it leads to larger areas of matrix `F` being marked and subsequently checked in nested loops.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.

The interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.

Input

The input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.

The first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.

All the values are integer and between -100 and 100.

Output

Print "Yes" if squares intersect, otherwise print "No".

You can print each letter in any case (upper or lower).

Examples

Input

0 0 6 0 6 6 0 6
1 3 3 5 5 3 3 1


Output

YES


Input

0 0 6 0 6 6 0 6
7 3 9 5 11 3 9 1


Output

NO


Input

6 0 6 6 0 6 0 0
7 4 4 7 7 10 10 7


Output

YES

Note

In the first example the second square lies entirely within the first square, so they do intersect.

In the second sample squares do not have any points in common.

Here are images corresponding to the samples:

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ implementations of the performance-characterizing invariants derived from Phase 2.

#### Invariant 1: Large Area Overlap

```cpp
void check_large_area_overlap(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large area overlap detected!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Matrix Traversal

```cpp
void check_extensive_matrix_traversal(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive matrix traversal detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the checker functions integrated at effective points in the program flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 2005;
int F[N][N];

// Function to check for large area overlap
void check_large_area_overlap(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large area overlap detected!" << endl;
        abort();
    }
}

// Function to check for extensive matrix traversal
void check_extensive_matrix_traversal(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive matrix traversal detected!" << endl;
        abort();
    }
}

int main() {
    int x1 = 200, y1 = 200, x2 = 0, y2 = 0;
    for (int i = 1; i <= 4; i++) {
        int x, y;
        cin >> x >> y;
        x += 100;
        y += 100;
        x1 = min(x, x1);
        y1 = min(y, y1);
        x2 = max(x, x2);
        y2 = max(y, y2);
    }
    x1 *= 2;
    y1 *= 2;
    x2 *= 2;
    y2 *= 2;

    // Check if the area of the first square is large enough to cause potential slowdowns
    int area1 = (x2 - x1) * (y2 - y1);
    check_large_area_overlap(area1 > 1000); // arbitrary threshold for demonstration

    for (int i = x1; i <= x2; i++) {
        for (int j = y1; j <= y2; j++) {
            F[i][j] = 1;
        }
    }

    x1 = 200, y1 = 200, x2 = 0, y2 = 0;
    for (int i = 1; i <= 4; i++) {
        int x, y;
        cin >> x >> y;
        x += 100;
        y += 100;
        x1 = min(x, x1);
        y1 = min(y, y1);
        x2 = max(x, x2);
        y2 = max(y, y2);
    }
    x1 *= 2;
    y1 *= 2;
    x2 *= 2;
    y2 *= 2;

    int yy = (y1 + y2) / 2, xx = (x1 + x2) / 2;

    // Check for potential extensive matrix traversal
    check_extensive_matrix_traversal((x2 - x1) * (y2 - y1) > 1000); // arbitrary threshold for demonstration

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (F[i][j] == 0) continue;
            int x = j - i, y = i + j;
            if (x <= yy - x1 && x >= yy - x2 && y <= xx + y2 && y >= xx + y1) {
                printf("YES");
                return 0;
            }
        }
    }
    printf("NO");
}
```

**Explanation:**

- **Check for Large Area Overlap:** The area of the first square is computed and checked against a threshold before filling the matrix `F`. This is based on the invariant that a large overlapping area could indicate a potential slowdown.

- **Check for Extensive Matrix Traversal:** After setting up the second square, a similar area check is performed. If it indicates a large traversal space, it triggers the bottleneck warning.

These checks are placed strategically where they capture the conditions leading to potential slowdowns without being inside tight loops, avoiding unnecessary performance overhead.

