system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

At the beginning of the new semester there is new schedule in the Berland State University. According to this schedule, n groups have lessons at the room 31. For each group the starting time of the lesson and the finishing time of the lesson are known. It has turned out that it is impossible to hold all lessons, because for some groups periods of their lessons intersect. If at some moment of time one groups finishes it's lesson, and the other group starts the lesson, their lessons don't intersect.

The dean wants to cancel the lesson in one group so that no two time periods of lessons of the remaining groups intersect. You are to find all ways to do that.

Input

The first line contains integer n (1 ≤ n ≤ 5000) — amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 ≤ li < ri ≤ 106) — starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1).

Output

Output integer k — amount of ways to cancel the lesson in exactly one group so that no two time periods of lessons of the remaining groups intersect. In the second line output k numbers — indexes of groups, where it is possible to cancel the lesson. Groups are numbered starting from 1 in the order that they were given in the input. Output the numbers in increasing order.

Examples

Input

3
3 10
20 30
1 3


Output

3
1 2 3 

Input

4
3 10
20 30
1 3
1 39


Output

1
4 

Input

3
1 5
2 6
3 7


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dp[1000005];
int leftt = 100000000;
int rightt = 0;
int le[5005];
int ri[5005];
vector<int> ans;
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int l, r;
    cin >> l >> r;
    r--;
    le[i] = l;
    ri[i] = r;
    dp[l]++;
    dp[r + 1]--;
  }
  for (int i = 1; i <= 1000000; i++) {
    dp[i] += dp[i - 1];
    if (dp[i] > 2) {
      cout << 0;
      return 0;
    }
  }
  for (int i = 0; i <= 1000000; i++) {
    if (dp[i] == 2) {
      leftt = min(leftt, i);
      rightt = max(rightt, i);
    }
  }
  for (int i = 0; i < n; i++) {
    if (le[i] <= leftt && rightt <= ri[i]) {
      ans.push_back(i);
    }
  }
  cout << ans.size() << endl;
  for (auto i : ans) cout << i + 1 << " ";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
3 10
20 41
1 3
1 39


(G.2) Fast Input

4
2 10
20 41
1 3
1 39


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1000005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int leftt = 100000000; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int rightt = 0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int le[5005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int ri[5005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> ans; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
    int l, r; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r; /* line 15 slow_hit_count: 4, fast_hit_count: 4 */
    r--; /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
    le[i] = l; /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
    ri[i] = r; /* line 18 slow_hit_count: 4, fast_hit_count: 4 */
    dp[l]++; /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
    dp[r + 1]--; /* line 20 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 1000000; i++) { /* line 22 slow_hit_count: 1000001, fast_hit_count: 2 */
    dp[i] += dp[i - 1]; /* line 23 slow_hit_count: 1000000, fast_hit_count: 2 */
    if (dp[i] > 2) { /* line 24 slow_hit_count: 1000000, fast_hit_count: 2 */
      cout << 0; /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 1000000; i++) { /* line 29 slow_hit_count: 1000002, fast_hit_count: 0 */
    if (dp[i] == 2) { /* line 30 slow_hit_count: 1000001, fast_hit_count: 0 */
      leftt = min(leftt, i); /* line 31 slow_hit_count: 28, fast_hit_count: 0 */
      rightt = max(rightt, i); /* line 32 slow_hit_count: 28, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 35 slow_hit_count: 5, fast_hit_count: 0 */
    if (le[i] <= leftt && rightt <= ri[i]) { /* line 36 slow_hit_count: 4, fast_hit_count: 0 */
      ans.push_back(i); /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans.size() << endl; /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
  for (auto i : ans) cout << i + 1 << " "; /* line 41 slow_hit_count: 2, fast_hit_count: 0 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the provided line-level hit counts for the slow and fast runs, we observe the following:

1. **Line 22-24**: This loop is executed 1,000,000 times for the slow input, compared to only 2 times for the fast input. The line `if (dp[i] > 2)` checks for overlaps but causes a significant slowdown due to the high number of iterations.

2. **Line 29-32**: These lines are also executed 1,000,001 times in the slow input, which suggests they are part of a costly operation, but this loop is not reached in the fast input.

3. **Line 35-37**: The checks for possible removal candidates are performed in the slow input but not in the fast input.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, the slowdown seems to be heavily influenced by the operations on the `dp` array, particularly when there are overlaps between the lesson times. Here are the performance-characterizing invariants:

1. **High Number of Overlapping Lessons**:
   - **Natural Language Invariant**: "If there are many overlapping lesson periods, resulting in a high number of updates and checks on the time interval array, the program may become slow. This is especially true when time intervals are densely packed."
   - **Explanation**: The slow execution occurs due to the dense usage of time slots, which leads to many increments and decrements in the `dp` array, causing the algorithm to iterate extensively over a large range without early termination.

2. **Large Time Interval Range**:
   - **Natural Language Invariant**: "If the range of lesson start and end times covers a large span compared to the average interval length, the program may experience performance issues due to extensive loop iterations over the `dp` array."
   - **Explanation**: The loop over a large range in the `dp` array leads to inefficiency when the actual time intervals used by lessons do not span the same breadth, causing unnecessary computations.

3. **Multiple Lesson Overlaps**:
   - **Natural Language Invariant**: "When there are multiple overlapping lessons that require validation against the `dp` array conditions, the complexity rises, potentially triggering slow execution paths as the program exhaustively checks each condition."
   - **Explanation**: The need to assess overlapping conditions across numerous time slots can significantly increase the computation time, as seen in the slow input case.

### Conclusion

The primary cause of inefficiencies lies in how the program handles overlapping intervals and the loop iterations over potentially large time spans. Addressing these bottlenecks by optimizing overlap detection and reducing unnecessary loop iterations could improve performance for inputs that meet these conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
At the beginning of the new semester there is new schedule in the Berland State University. According to this schedule, n groups have lessons at the room 31. For each group the starting time of the lesson and the finishing time of the lesson are known. It has turned out that it is impossible to hold all lessons, because for some groups periods of their lessons intersect. If at some moment of time one groups finishes it's lesson, and the other group starts the lesson, their lessons don't intersect.

The dean wants to cancel the lesson in one group so that no two time periods of lessons of the remaining groups intersect. You are to find all ways to do that.

Input

The first line contains integer n (1 ≤ n ≤ 5000) — amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 ≤ li < ri ≤ 106) — starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1).

Output

Output integer k — amount of ways to cancel the lesson in exactly one group so that no two time periods of lessons of the remaining groups intersect. In the second line output k numbers — indexes of groups, where it is possible to cancel the lesson. Groups are numbered starting from 1 in the order that they were given in the input. Output the numbers in increasing order.

Examples

Input

3
3 10
20 30
1 3


Output

3
1 2 3 

Input

4
3 10
20 30
1 3
1 39


Output

1
4 

Input

3
1 5
2 6
3 7


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Based on the performance-characterizing invariants outlined earlier, here's how we can translate these invariants into C++ checker code:

1. **High Number of Overlapping Lessons**:
   ```cpp
   void check_high_overlap(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - high number of overlapping lessons!" << endl;
           abort();
       }
   }
   ```

2. **Large Time Interval Range**:
   ```cpp
   void check_large_time_range(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large time interval range!" << endl;
           abort();
       }
   }
   ```

3. **Multiple Lesson Overlaps**:
   ```cpp
   void check_multiple_overlaps(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - multiple lesson overlaps!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original C++ Program

Now, let's insert these checks into the program to help detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int dp[1000005];
int leftt = 100000000;
int rightt = 0;
int le[5005];
int ri[5005];
vector<int> ans;

// Checker for high number of overlapping lessons
void check_high_overlap(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of overlapping lessons!" << endl;
        abort();
    }
}

// Checker for large time interval range
void check_large_time_range(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large time interval range!" << endl;
        abort();
    }
}

// Checker for multiple lesson overlaps
void check_multiple_overlaps(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - multiple lesson overlaps!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;

    // Read input and populate lesson arrays
    for (int i = 0; i < n; i++) {
        int l, r;
        cin >> l >> r;
        r--;
        le[i] = l;
        ri[i] = r;
        dp[l]++;
        dp[r + 1]--;
    }

    // Check for potential bottlenecks before processing
    check_large_time_range((ri[n-1] - le[0]) > 100000); // Arbitrary threshold for large time range

    for (int i = 1; i <= 1000000; i++) {
        dp[i] += dp[i - 1];
        if (dp[i] > 2) {
            cout << 0;
            return 0;
        }
    }

    check_high_overlap(dp[1000000] > 0); // Check if any time interval still has more than 2 overlaps

    for (int i = 0; i <= 1000000; i++) {
        if (dp[i] == 2) {
            leftt = min(leftt, i);
            rightt = max(rightt, i);
        }
    }

    for (int i = 0; i < n; i++) {
        if (le[i] <= leftt && rightt <= ri[i]) {
            ans.push_back(i);
        }
    }

    cout << ans.size() << endl;
    for (auto i : ans) {
        cout << i + 1 << " ";
    }

    check_multiple_overlaps(ans.size() > (n / 2)); // Arbitrary threshold for multiple overlaps
    return 0;
}
```

### Explanation

- **Checker Placement**: Checkers are placed before entering loops that process large ranges or critical logic, ensuring that potential issues are identified early without adding overhead in tight loops.
- **Arbitrary Thresholds**: Threshold values are chosen to trigger checkers based on typical conditions that indicate potential slowdowns (e.g., large ranges or excessive overlap). These values can be adjusted based on further testing or empirical data.

