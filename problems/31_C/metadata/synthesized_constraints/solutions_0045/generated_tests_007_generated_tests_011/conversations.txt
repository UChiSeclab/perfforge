system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

At the beginning of the new semester there is new schedule in the Berland State University. According to this schedule, n groups have lessons at the room 31. For each group the starting time of the lesson and the finishing time of the lesson are known. It has turned out that it is impossible to hold all lessons, because for some groups periods of their lessons intersect. If at some moment of time one groups finishes it's lesson, and the other group starts the lesson, their lessons don't intersect.

The dean wants to cancel the lesson in one group so that no two time periods of lessons of the remaining groups intersect. You are to find all ways to do that.

Input

The first line contains integer n (1 ≤ n ≤ 5000) — amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 ≤ li < ri ≤ 106) — starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1).

Output

Output integer k — amount of ways to cancel the lesson in exactly one group so that no two time periods of lessons of the remaining groups intersect. In the second line output k numbers — indexes of groups, where it is possible to cancel the lesson. Groups are numbered starting from 1 in the order that they were given in the input. Output the numbers in increasing order.

Examples

Input

3
3 10
20 30
1 3


Output

3
1 2 3 

Input

4
3 10
20 30
1 3
1 39


Output

1
4 

Input

3
1 5
2 6
3 7


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 5;
int n, l[N], r[N], a[N];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> l[i] >> r[i];
    r[i]--;
    a[l[i]]++, a[r[i] + 1]--;
  }
  for (int i = 1; i < N; i++) a[i] += a[i - 1];
  int le = 2e9, rg = n;
  for (int i = 1; i < N; i++) {
    if (a[i] > 2) {
      le = -1;
      break;
    }
    if (a[i] == 2) {
      le = min(le, i);
      rg = max(rg, i);
    }
  }
  vector<int> res;
  for (int i = 1; i <= n; i++)
    if (le == 2e9 || (l[i] <= le && r[i] >= rg)) res.push_back(i);
  cout << res.size() << '\n';
  for (int i = 0; i < res.size(); i++) cout << res[i] << ' ';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
3 10
20 26
1 3
1 32


(G.2) Fast Input

4
0 10
20 26
1 3
1 32


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, l[N], r[N], a[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> l[i] >> r[i]; /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
    r[i]--; /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
    a[l[i]]++, a[r[i] + 1]--; /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < N; i++) a[i] += a[i - 1]; /* line 14 slow_hit_count: 1000005, fast_hit_count: 1000005 */
  int le = 2e9, rg = n; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < N; i++) { /* line 16 slow_hit_count: 1000005, fast_hit_count: 1 */
    if (a[i] > 2) { /* line 17 slow_hit_count: 1000004, fast_hit_count: 1 */
      le = -1; /* line 18 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (a[i] == 2) { /* line 21 slow_hit_count: 1000004, fast_hit_count: 0 */
      le = min(le, i); /* line 22 slow_hit_count: 15, fast_hit_count: 0 */
      rg = max(rg, i); /* line 23 slow_hit_count: 15, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> res; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 27 slow_hit_count: 5, fast_hit_count: 5 */
    if (le == 2e9 || (l[i] <= le && r[i] >= rg)) res.push_back(i); /* line 28 slow_hit_count: 4, fast_hit_count: 4 */
  cout << res.size() << '\n'; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < res.size(); i++) cout << res[i] << ' '; /* line 30 slow_hit_count: 2, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C code, we'll analyze the hit counts and identify where the code behaves differently for the slow and fast inputs. Then, we'll derive performance-characterizing invariants in natural language, abstracting from specific numeric values.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The second loop (lines 16-24) is executed significantly more times for the slow input (1,000,005 hits) than for the fast input (1 hit).
   - The condition `if (a[i] == 2)` is frequently true for the slow input, causing additional operations on lines 22 and 23.

2. **Analysis:**
   - The array `a` is traversed completely up to `N = 1e6 + 5` for the slow input, indicating that a significant range of values satisfies `a[i] >= 2`.
   - This is indicative of overlapping lesson time intervals, leading to time complexity issues when calculating the minimum and maximum overlapping points (`le` and `rg`).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **High Overlap Invariant:**
   - If the overlap of lesson schedules is high such that many time slots have two or more overlapping lessons, the performance can degrade significantly.
   - *Natural language description:* "When a large number of time slots have overlapping lesson intervals, the computation of overlaps becomes expensive due to extensive scanning for these slots."

2. **Long Interval Range Invariant:**
   - If the lesson time intervals cover a large range of time slots, especially with overlapping start and end times, performance may degrade.
   - *Natural language description:* "If the lesson intervals span a large range of time slots with substantial overlaps, the code may slow down due to increased range checks and updates."

3. **Dense Collision Invariant:**
   - When the density of collisions (overlaps) in time slots is high, with many intervals overlapping at the same time, the performance is impacted.
   - *Natural language description:* "The program may slow down if multiple lesson intervals overlap densely over extended periods, increasing the number of operations to determine cancellation options."

### Conclusion

The slow performance is primarily due to a high number of overlapping lesson intervals, which requires the program to perform extensive checks over a large range of time slots. The derived invariants provide a general framework for understanding the conditions under which similar slowdowns might occur, even for different inputs adhering to the given constraints. These invariants can guide optimizations or preventative checks in similar scheduling problems.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
At the beginning of the new semester there is new schedule in the Berland State University. According to this schedule, n groups have lessons at the room 31. For each group the starting time of the lesson and the finishing time of the lesson are known. It has turned out that it is impossible to hold all lessons, because for some groups periods of their lessons intersect. If at some moment of time one groups finishes it's lesson, and the other group starts the lesson, their lessons don't intersect.

The dean wants to cancel the lesson in one group so that no two time periods of lessons of the remaining groups intersect. You are to find all ways to do that.

Input

The first line contains integer n (1 ≤ n ≤ 5000) — amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 ≤ li < ri ≤ 106) — starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1).

Output

Output integer k — amount of ways to cancel the lesson in exactly one group so that no two time periods of lessons of the remaining groups intersect. In the second line output k numbers — indexes of groups, where it is possible to cancel the lesson. Groups are numbered starting from 1 in the order that they were given in the input. Output the numbers in increasing order.

Examples

Input

3
3 10
20 30
1 3


Output

3
1 2 3 

Input

4
3 10
20 30
1 3
1 39


Output

1
4 

Input

3
1 5
2 6
3 7


Output

0

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as runtime checks and integrate them into the given C++ code.

### Phase 3: Implement Natural Language Invariants in C++

Based on the previous analysis, we derived these natural language invariants:

1. **High Overlap Invariant:**
   - Check if a large number of time slots have overlapping lessons.

2. **Long Interval Range Invariant:**
   - Check if lesson intervals span a large range with overlaps.

3. **Dense Collision Invariant:**
   - Check for dense overlaps within a close time range.

Let's translate these into C++ checkers:

```cpp
void check_high_overlap_invariant(int max_overlap) {
    if (max_overlap > 2) {
        cerr << "Warning: High overlap invariant triggered - too many overlapping lessons!" << endl;
        abort();
    }
}

void check_long_interval_range_invariant(int le, int rg) {
    if (le != 2e9 && rg - le > 10000) {  // arbitrary threshold for large range
        cerr << "Warning: Long interval range invariant triggered - large time range overlap!" << endl;
        abort();
    }
}

void check_dense_collision_invariant(int overlap_slots) {
    if (overlap_slots > 1000) {  // arbitrary threshold for dense collision
        cerr << "Warning: Dense collision invariant triggered - dense overlaps!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Below is the original C++ program with integrated runtime checks based on the invariants:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 5;
int n, l[N], r[N], a[N];

// Add helper functions for invariant checks
void check_high_overlap_invariant(int max_overlap) {
    if (max_overlap > 2) {
        cerr << "Warning: High overlap invariant triggered - too many overlapping lessons!" << endl;
        abort();
    }
}

void check_long_interval_range_invariant(int le, int rg) {
    if (le != 2e9 && rg - le > 10000) {  // arbitrary threshold for large range
        cerr << "Warning: Long interval range invariant triggered - large time range overlap!" << endl;
        abort();
    }
}

void check_dense_collision_invariant(int overlap_slots) {
    if (overlap_slots > 1000) {  // arbitrary threshold for dense collision
        cerr << "Warning: Dense collision invariant triggered - dense overlaps!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> l[i] >> r[i];
        r[i]--;
        a[l[i]]++, a[r[i] + 1]--;
    }

    int max_overlap = 0, overlap_slots = 0;
    for (int i = 1; i < N; i++) {
        a[i] += a[i - 1];
        max_overlap = max(max_overlap, a[i]);
        if (a[i] >= 2) overlap_slots++;
    }

    // Insert checks after processing the array `a`
    check_high_overlap_invariant(max_overlap);
    check_dense_collision_invariant(overlap_slots);

    int le = 2e9, rg = n;
    for (int i = 1; i < N; i++) {
        if (a[i] > 2) {
            le = -1;
            break;
        }
        if (a[i] == 2) {
            le = min(le, i);
            rg = max(rg, i);
        }
    }

    // Another check after determining the overlap range
    check_long_interval_range_invariant(le, rg);

    vector<int> res;
    for (int i = 1; i <= n; i++)
        if (le == 2e9 || (l[i] <= le && r[i] >= rg)) res.push_back(i);

    cout << res.size() << '\n';
    for (int i = 0; i < res.size(); i++) cout << res[i] << ' ';
    return 0;
}
```

**Notes:**
- The checks are placed after the significant loops and computations to detect potential performance bottlenecks based on the derived invariants.
- The arbitrary thresholds are set to values that are reasonable for detecting excessive overlaps or range issues, but may need adjustment based on further profiling or testing.

