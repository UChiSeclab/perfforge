system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;
const int N=2e5+7;
int dp[N];
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> v(n);
        map<int,int> mp;
        for(int i=0;i<n;i++){
            cin>>v[i];
            mp[v[i]]++;
        }
        sort(v.begin(),v.end());
        for(int i=v.size()-1;i>=0;){
            dp[v[i]]=mp[v[i]];
            for(int j=2*v[i];j<N;j+=v[i]){
                 dp[v[i]]=max(dp[j]+mp[v[i]],dp[v[i]]);
            }
            i=i-mp[v[i]];
        }
        int mx=0;
        for(int i=0;i<N;i++){
              mx=max(mx,dp[i]);
        }
        cout<<n-mx<<endl;
        for(int i=0;i<=v[n-1];i++){
            dp[i]=0;
        }
    }
    return 0;
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
5 4 2 4 4
4
3 1 2 1
4
1 3 5 3
5
5 2 3 1 5
5
2 1 5 5 4
5
4 2 4 4 1
5
1 3 1 2 5
5
5 2 3 5 1
5
4 2 2 1 3
5
2 3 1 2 1


(G.2) Fast Input

1
5
2 4 2 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N=2e5+7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(){ /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
    ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    cout.tie(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    int t; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin>>t; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    while(t--){ /* line 11 slow_hit_count: 11, fast_hit_count: 2 */
        int n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        cin>>n; /* line 13 slow_hit_count: 10, fast_hit_count: 1 */
        vector<int> v(n); /* line 14 slow_hit_count: 20, fast_hit_count: 2 */
        map<int,int> mp; /* line 15 slow_hit_count: 20, fast_hit_count: 2 */
        for(int i=0;i<n;i++){ /* line 16 slow_hit_count: 58, fast_hit_count: 6 */
            cin>>v[i]; /* line 17 slow_hit_count: 48, fast_hit_count: 5 */
            mp[v[i]]++; /* line 18 slow_hit_count: 48, fast_hit_count: 5 */
        } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        sort(v.begin(),v.end()); /* line 20 slow_hit_count: 10, fast_hit_count: 1 */
        for(int i=v.size()-1;i>=0;){ /* line 21 slow_hit_count: 45, fast_hit_count: 4 */
            dp[v[i]]=mp[v[i]]; /* line 22 slow_hit_count: 35, fast_hit_count: 3 */
            for(int j=2*v[i];j<N;j+=v[i]){ /* line 23 slow_hit_count: 3606767, fast_hit_count: 350010 */
                 dp[v[i]]=max(dp[j]+mp[v[i]],dp[v[i]]); /* line 24 slow_hit_count: 3606732, fast_hit_count: 350007 */
            } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
            i=i-mp[v[i]]; /* line 26 slow_hit_count: 35, fast_hit_count: 3 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        int mx=0; /* line 28 slow_hit_count: 10, fast_hit_count: 1 */
        for(int i=0;i<N;i++){ /* line 29 slow_hit_count: 2000080, fast_hit_count: 200008 */
              mx=max(mx,dp[i]); /* line 30 slow_hit_count: 2000070, fast_hit_count: 200007 */
        } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        cout<<n-mx<<endl; /* line 32 slow_hit_count: 10, fast_hit_count: 1 */
        for(int i=0;i<=v[n-1];i++){ /* line 33 slow_hit_count: 64, fast_hit_count: 6 */
            dp[i]=0; /* line 34 slow_hit_count: 54, fast_hit_count: 5 */
        } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze and derive performance-characterizing invariants for the given C program based on the provided hit counts and problem context, let's go through the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - **Lines 23-24 (Inner Loop for Divisibility Checking):**
     - **Slow Hit Count:** 3,606,767 and 3,606,732
     - **Fast Hit Count:** 350,010 and 350,007
     - These lines are hit significantly more during the slow input processing. This suggests that the loop iterates over a large range of numbers for each element, checking divisibility, which takes a considerable amount of time.
   
2. **Pinpoint Problematic Code:**
   - The nested loop starting at line 23 is costly, likely because it processes a large number of elements, combined with the divisibility checks, which are computationally expensive when the range of `j` becomes large.

3. **Data Structures and Input Constraints:**
   - The `dp` array and the map `mp` are used to track counts and compute the maximum sequence length based on divisibility. The loop iterates for multiples of each element, potentially leading to quadratic complexity in terms of `n` when combined with the nested nature of the divisibility checks.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are some natural language performance invariants:

1. **Nested Loop Complexity:**
   - "If the input contains elements that are factors of many numbers or have many multiples within the array, the nested loop over possible multiples can lead to excessive iterations and slow down the program."

2. **Large Input Size with Dense Multiples:**
   - "When the array size is large and many elements have common divisors or are multiples of each other, the divisibility checks multiply exponentially, leading to performance degradation."

3. **Sparse Unique Values with Many Multiples:**
   - "The program can slow significantly if the array has few unique values with each having a large number of multiples within the range, causing repeated evaluations in the inner loop."

### Summary

The performance bottleneck arises primarily from the nested loop structure that checks for divisibility across a potentially large range of multiples for each element in the array. When these conditions are met, the computational load increases significantly, leading to slower execution times.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checker Code in C++

Here, we will translate the natural language invariants derived earlier into C++ checker functions and conditions:

#### Invariant 1: Nested Loop Complexity
```cpp
void check_nested_loop_invariant(int n, const vector<int>& v) {
    int unique_count = set<int>(v.begin(), v.end()).size();
    if (n > 1000 && unique_count < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - nested loop may iterate excessively due to many divisors or multiples!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Input Size with Dense Multiples
```cpp
void check_dense_multiples_invariant(const map<int, int>& mp) {
    for (const auto& pair : mp) {
        if (pair.second > 100) {
            cerr << "Warning: Performance bottleneck condition triggered - high density of multiples in input!" << endl;
            abort();
        }
    }
}
```

#### Invariant 3: Sparse Unique Values with Many Multiples
```cpp
void check_sparse_unique_values_invariant(int n, const map<int, int>& mp) {
    int max_frequency = 0;
    for (const auto& pair : mp) {
        max_frequency = max(max_frequency, pair.second);
    }
    if (n > 1000 && max_frequency > n / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - few unique values with many multiples!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate the above checker code into the C++ program at appropriate points to detect conditions that may lead to slow performance.

```cpp
#include<bits/stdc++.h>
using namespace std;
const int N=2e5+7;
int dp[N];

// Checkers for performance bottlenecks
void check_nested_loop_invariant(int n, const vector<int>& v) {
    int unique_count = set<int>(v.begin(), v.end()).size();
    if (n > 1000 && unique_count < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - nested loop may iterate excessively!" << endl;
        abort();
    }
}

void check_dense_multiples_invariant(const map<int, int>& mp) {
    for (const auto& pair : mp) {
        if (pair.second > 100) {
            cerr << "Warning: Performance bottleneck condition triggered - high density of multiples in input!" << endl;
            abort();
        }
    }
}

void check_sparse_unique_values_invariant(int n, const map<int, int>& mp) {
    int max_frequency = 0;
    for (const auto& pair : mp) {
        max_frequency = max(max_frequency, pair.second);
    }
    if (n > 1000 && max_frequency > n / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - few unique values with many multiples!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> v(n);
        map<int, int> mp;
        for (int i = 0; i < n; i++) {
            cin >> v[i];
            mp[v[i]]++;
        }

        // Performance Checker Invocations
        check_nested_loop_invariant(n, v);
        check_dense_multiples_invariant(mp);
        check_sparse_unique_values_invariant(n, mp);

        sort(v.begin(), v.end());
        for (int i = v.size() - 1; i >= 0;) {
            dp[v[i]] = mp[v[i]];
            for (int j = 2 * v[i]; j < N; j += v[i]) {
                dp[v[i]] = max(dp[j] + mp[v[i]], dp[v[i]]);
            }
            i = i - mp[v[i]];
        }
        int mx = 0;
        for (int i = 0; i < N; i++) {
            mx = max(mx, dp[i]);
        }
        cout << n - mx << endl;
        for (int i = 0; i <= v[n - 1]; i++) {
            dp[i] = 0;
        }
    }
    return 0;
}
```

### Explanation
- **Location of Checks:** The checks are placed after reading the input and before the main computation loop to catch potential slow scenarios early.
- **Avoiding Overhead:** The checks are placed outside of tight loops to prevent additional overhead during the core computation.
- **Utility for Fuzzers:** These checks help identify configurations that trigger known performance bottlenecks, assisting fuzzers in detecting slow execution paths efficiently.

