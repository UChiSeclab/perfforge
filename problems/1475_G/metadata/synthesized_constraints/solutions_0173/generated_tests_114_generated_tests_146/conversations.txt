system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>

#define fi first
#define se second
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef array<int, 3> a3;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<ii> vii;

const int N=2*1e5+5;



void solve()
{
	int n;cin>>n;

    vi f(N, 0);
    int m=0;
    for (int i=0;i<n;i++)
    {
        int x;cin>>x;
        f[x]++;
        m=max(m, x);
    }

    int maxlen=0;
    for (int i=m;i;i--)
    {
        int x=f[i];
        for (int j=2;i*j<=m;j++) f[i]=max(f[i], f[i*j]+x);
        maxlen=max(maxlen, f[i]);
    }
    cout<<n-maxlen<<"\n";
}

int main()
{
//	freopen(".inp","r",stdin);
//	freopen(".out","w",stdout);

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);cout.tie(NULL);

	int t;cin>>t;
    while (t--) solve();

	return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
2
100100 12846


(G.2) Fast Input

1
2
000100 12846


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#define fi first /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define se second /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long ll; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<int, int> ii; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
typedef array<int, 3> a3; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<int> vi; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<ll> vll; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<ii> vii; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int N=2*1e5+5; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void solve() /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
	int n;cin>>n; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    vi f(N, 0); /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
    int m=0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i=0;i<n;i++) /* line 24 slow_hit_count: 3, fast_hit_count: 3 */
    { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        int x;cin>>x; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
        f[x]++; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
        m=max(m, x); /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    int maxlen=0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i=m;i;i--) /* line 32 slow_hit_count: 100101, fast_hit_count: 12847 */
    { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        int x=f[i]; /* line 34 slow_hit_count: 100100, fast_hit_count: 12846 */
        for (int j=2;i*j<=m;j++) f[i]=max(f[i], f[i*j]+x); /* line 35 slow_hit_count: 1168042, fast_hit_count: 123515 */
        maxlen=max(maxlen, f[i]); /* line 36 slow_hit_count: 100100, fast_hit_count: 12846 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    cout<<n-maxlen<<"\n"; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
//	freopen(".inp","r",stdin); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
//	freopen(".out","w",stdout); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
	ios_base::sync_with_stdio(false); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
	cin.tie(NULL);cout.tie(NULL); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
	int t;cin>>t; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    while (t--) solve(); /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
 /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
	return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts, the following observations can be made:

1. **Significant Line Hits:** Line 35 (`for (int j=2;i*j<=m;j++) f[i]=max(f[i], f[i*j]+x);`) has an extremely high number of hits in the slow input compared to the fast input (1168042 vs. 123515). This indicates that this line is a major contributor to the slowdown.

2. **Loop Intensity:** The loop on line 32 (`for (int i=m;i;i--)`) iterates `m` times, where `m` is the maximum element in the array `a`. The nested loop in line 35 iterates over all multiples of `i` up to `m`.

3. **Data Interaction:** The nested loop is recalculating and updating values in the array `f` based on multiples of each element. This operation's intensity grows with the value of `m` and the distribution of factors within the array.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following natural language performance invariants can be derived:

1. **High Maximum Element:**
   - **Invariant Description:** When the maximum value in the array `a` is large, the program may slow down significantly due to increased iterations over potential factors. The nested loops become more intensive as more multiples need to be calculated and processed.
   - **Condition:** If the maximum element `m` in array `a` is close to or reaches the upper bound (e.g., `m` is large relative to the constraints), it indicates a potential slowdown.

2. **Dense Multiples:**
   - **Invariant Description:** If many elements of the array `a` have common factors or are multiples of other elements, the computation complexity grows. This is because the inner loop on line 35 will process more elements repeatedly.
   - **Condition:** When the array contains values such that many of them are divisible by each other, or there are many potential divisors, the performance may degrade. Specifically, arrays that have many small factors near the maximum element can cause significant slowdowns.

3. **Frequent Updates in Nested Loops:**
   - **Invariant Description:** Arrays with a high frequency of updates in the nested loop (line 35) can indicate potential performance bottlenecks. The number of times the array `f` is updated is directly related to inefficiency.
   - **Condition:** If the number of updates to `f` is high compared to the number of elements in `a`, especially when `m` is large, it suggests a performance issue.

The above invariants provide a broad characterization of conditions under which the program might enter a slow path. Each invariant is crafted to reflect realistic triggers that could potentially be overlooked otherwise, offering insights into how certain input patterns correlate with performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the checker functions implementing the natural language invariants derived earlier:

```cpp
void check_high_max_element(int maxElement, int threshold) {
    if (maxElement > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high maximum element!" << endl;
        abort();
    }
}

void check_dense_multiples(const vector<int>& frequency, int threshold) {
    int count = 0;
    for (int f : frequency) {
        if (f > 1) {
            count++;
        }
    }
    if (count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense multiples!" << endl;
        abort();
    }
}

void check_frequent_updates(int totalUpdates, int threshold) {
    if (totalUpdates > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent updates in nested loops!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

The following is the instrumented C++ code with the inserted performance-checking functions:

```cpp
#include <bits/stdc++.h>

#define fi first
#define se second
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef array<int, 3> a3;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<ii> vii;

const int N = 2 * 1e5 + 5;

// Check the condition for a high maximum element
void check_high_max_element(int maxElement, int threshold) {
    if (maxElement > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high maximum element!" << endl;
        abort();
    }
}

// Check the condition for dense multiples
void check_dense_multiples(const vector<int>& frequency, int threshold) {
    int count = 0;
    for (int f : frequency) {
        if (f > 1) {
            count++;
        }
    }
    if (count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense multiples!" << endl;
        abort();
    }
}

// Check the condition for frequent updates in loops
void check_frequent_updates(int totalUpdates, int threshold) {
    if (totalUpdates > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent updates in nested loops!" << endl;
        abort();
    }
}

void solve() {
    int n;
    cin >> n;

    vi f(N, 0);
    int m = 0;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        f[x]++;
        m = max(m, x);
    }

    // Performance checker for the maximum element
    check_high_max_element(m, 1.5 * 1e5);  // Threshold set to 150,000

    int maxlen = 0;
    int totalUpdates = 0; // Counter for updates in the loop
    for (int i = m; i; i--) {
        int x = f[i];
        for (int j = 2; i * j <= m; j++) {
            f[i] = max(f[i], f[i * j] + x);
            totalUpdates++;
        }
        maxlen = max(maxlen, f[i]);
    }

    // Performance checker for frequent updates
    check_frequent_updates(totalUpdates, 1e6);  // Threshold set to 1,000,000

    cout << n - maxlen << "\n";
}

int main() {
//  freopen(".inp","r",stdin);
//  freopen(".out","w",stdout);

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
    while (t--) solve();

    return 0;
}
```

### Explanation of the Integration

1. **High Maximum Element:** The `check_high_max_element()` function is placed right after determining the maximum value `m` from the input array. This ensures that we capture cases where a large `m` might lead to inefficiencies.

2. **Dense Multiples:** The `check_dense_multiples()` function checks the frequency array to ensure that a large number of elements sharing factors doesn't slow down the nested loop processing.

3. **Frequent Updates:** The `check_frequent_updates()` function is placed after the nested loop, counting the number of updates to the `f` array, which could indicate potential inefficiencies if this number is excessive.

These checks provide a way to alert and handle potential performance bottlenecks without affecting the main logic flow and ensure efficient runtime performance under diverse input conditions.

