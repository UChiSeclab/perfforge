system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))
#define off ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;
typedef vector<LL> 		VL;
#define si(n) cin>>n
#define dout(n) cout<<n<<"\n"
#define DRT() int t; si(t); while(t--)
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//# define M_PI           3.14159265358979323846264338327950288
// DSU

void IO(){
	#ifndef ONLINE_JUDGE
    freopen("../input.txt", "r", stdin);
    freopen("../output.txt", "w", stdout);
	#endif
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	off;
}
const int N = 2e5 + 10;
LL score[N];
int main(){
	IO();
	DRT(){
		memset(score, 0, sizeof(score));
		LL n;cin>>n;
		VL arr(n);
		rep(i,0,n){
			cin>>arr[i];
		}
		sort(ALL(arr), greater<LL> ());
		LL ans = 0;
		rep(i,0,n){
			LL mm = 0;
			LL can = 1;
			if(i-1 >= 0 && arr[i] == arr[i-1])
				can = 0;
			if(can)
			for(LL j=arr[i]; j < N; j+= arr[i]){
				mm = max(mm, score[j]);
			}
			score[arr[i]] = max(score[arr[i]], mm);
			score[arr[i]]++;
			ans = max(ans, score[arr[i]]);
		}
		dout(n - ans);
	}
	return 0;
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
4 3 1 5 1
5
1 4 1 1 3
5
4 1 2 1 2
5
5 5 5 1 4
5
5 2 4 5 4
5
3 1 2 3 4
5
2 3 5 4 1
5
5 4 5 5 4
5
1 2 2 3 2
4
2 1 3 1


(G.2) Fast Input

10
5
4 2 5 2 2
5
2 3 2 5 2
5
4 4 3 3 4
4
2 1 3 1
5
5 3 3 4 5
4
1 4 1 2
5
2 1 1 3 5
5
4 5 2 4 5
5
3 5 2 4 3
5
5 4 5 2 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define PB push_back /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#define MP make_pair /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#define F first /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#define S second /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#define SZ(a) (int)(a.size()) /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#define ALL(a) a.begin(),a.end() /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#define SET(a,b) memset(a,b,sizeof(a)) /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#define off ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0) /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<int,int>   II; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector< II >      VII; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<int>     VI; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector< VI > 	VVI; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long int 	LL; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<LL> 		VL; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
#define si(n) cin>>n /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
#define dout(n) cout<<n<<"\n" /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
#define DRT() int t; si(t); while(t--) /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end))) /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
//# define M_PI           3.14159265358979323846264338327950288 /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
// DSU /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void IO(){ /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
	#ifndef ONLINE_JUDGE /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    freopen("../input.txt", "r", stdin); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    freopen("../output.txt", "w", stdout); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
	#endif /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
	off; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2e5 + 10; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
LL score[N]; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int main(){ /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
	IO(); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
	DRT(){ /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
		memset(score, 0, sizeof(score)); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
		LL n;cin>>n; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
		VL arr(n); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
		rep(i,0,n){ /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
			cin>>arr[i]; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
		sort(ALL(arr), greater<LL> ()); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
		LL ans = 0; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
		rep(i,0,n){ /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
			LL mm = 0; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
			LL can = 1; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
			if(i-1 >= 0 && arr[i] == arr[i-1]) /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
				can = 0; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
			if(can) /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
			for(LL j=arr[i]; j < N; j+= arr[i]){ /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
				mm = max(mm, score[j]); /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
			} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
			score[arr[i]] = max(score[arr[i]], mm); /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
			score[arr[i]]++; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
			ans = max(ans, score[arr[i]]); /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
		dout(n - ans); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
	} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
	return 0; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose and derive performance-characterizing invariants for the given C program, we need to analyze the provided code, hit count data, and inputs. Here's a breakdown of the slow and fast paths in the code and the potential reasons for these differences.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The hit counts for lines 52 to 54, which involve a loop iterating over multiples of an array element (`arr[i]`), likely show significantly more hits in the slow input than in the fast input.
   - This loop (`for(LL j=arr[i]; j < N; j+= arr[i])`) iterates over all multiples of `arr[i]` up to a certain limit (`N`), which is a costly operation especially if the number of iterations is large.

2. **Interaction with Data Structures**:
   - The array `arr` is sorted in descending order at line 44, and the loop from lines 46 to 58 iterates over this sorted array.
   - The inner loop from lines 52 to 54 checks the `score` array for each multiple of `arr[i]`, which can be extensive if `arr[i]` is small or if there are many elements in `arr` that are divisible by each other.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can infer certain conditions under which the program likely enters a slow path. Here are the performance-characterizing invariants:

1. **Invariant 1: Small Array Elements**:
   - **Natural Language Description**: "When the array contains small elements, especially those with many factors, the inner loop iterating over multiples can lead to a slow execution path. This is because smaller elements result in a higher number of iterations over the `score` array."
   - **Implication**: If the array has many small numbers or numbers with a dense set of factors (e.g., repeated numbers or numbers that are multiples of each other), each element may result in multiple accesses to the `score` array, causing slow performance.

2. **Invariant 2: Repeated Elements**:
   - **Natural Language Description**: "If the array contains repeated elements, the loop may perform redundant calculations, slowing down execution."
   - **Implication**: Repeated elements in the array cause unnecessary extra work, as the check for `if(can)` (lines 49-51) disables the loop for duplicates. However, the presence of duplicates might still add overhead to the computation.

3. **Invariant 3: High Factor Count**:
   - **Natural Language Description**: "When an element has many factors within the range of possible array values, the computation of maximum scores over its multiples can become performance-intensive."
   - **Implication**: If the array has elements that are common divisors of many other elements, the loop at line 52 iterates through many multiples, thus repeatedly updating the `score` array and leading to performance degradation.

### Conclusion

These invariants provide insight into the potential causes of slow performance in the code based on the given input and hit count data. By monitoring these conditions, we can better understand and potentially optimize the program to handle such scenarios more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Using the natural language invariants derived earlier, we'll create checker functions to detect potential performance bottlenecks based on the program's behavior.

#### Invariant 1: Small Array Elements
- **Description**: When the array contains small elements with many factors, iterating over multiples can lead to slow execution.
- **Checker Code**:
  ```cpp
  void check_small_elements_invariant(const std::vector<long long>& arr) {
      int smallElementCount = std::count_if(arr.begin(), arr.end(), [](long long x) { return x <= 10; });
      if (smallElementCount > arr.size() / 2) {
          cerr << "Warning: small_elements_invariant triggered - too many small elements!" << endl;
          abort();
      }
  }
  ```

#### Invariant 2: Repeated Elements
- **Description**: If the array contains repeated elements, this may cause redundant calculations.
- **Checker Code**:
  ```cpp
  void check_repeated_elements_invariant(const std::vector<long long>& arr) {
      std::unordered_map<long long, int> elementCount;
      for (const auto& elem : arr) {
          elementCount[elem]++;
          if (elementCount[elem] > 1) {
              cerr << "Warning: repeated_elements_invariant triggered - repeated elements detected!" << endl;
              abort();
          }
      }
  }
  ```

#### Invariant 3: High Factor Count
- **Description**: When elements have many factors in the range, computation of scores over multiples can become performance-intensive.
- **Checker Code**:
  ```cpp
  void check_high_factor_count_invariant(const std::vector<long long>& arr) {
      for (const auto& elem : arr) {
          int factorCount = 0;
          for (long long j = elem; j < N; j += elem) {
              factorCount++;
              if (factorCount > 100) {  // Arbitrary threshold for example purposes
                  cerr << "Warning: high_factor_count_invariant triggered - too many factors!" << endl;
                  abort();
              }
          }
      }
  }
  ```

### Phase 4: Integrating Checker Code with the Original Program

We'll integrate the checker functions at appropriate places in the provided C++ code to ensure they don't add unnecessary overhead in performance-critical sections.

```cpp
#include<bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))
#define off ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;
typedef vector<LL> 		VL;
#define si(n) cin>>n
#define dout(n) cout<<n<<"\n"
#define DRT() int t; si(t); while(t--)
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))

const int N = 2e5 + 10;
LL score[N];

// Checker function for small elements
void check_small_elements_invariant(const VL& arr) {
    int smallElementCount = count_if(arr.begin(), arr.end(), [](LL x) { return x <= 10; });
    if (smallElementCount > arr.size() / 2) {
        cerr << "Warning: small_elements_invariant triggered - too many small elements!" << endl;
        abort();
    }
}

// Checker function for repeated elements
void check_repeated_elements_invariant(const VL& arr) {
    unordered_map<LL, int> elementCount;
    for (const auto& elem : arr) {
        elementCount[elem]++;
        if (elementCount[elem] > 1) {
            cerr << "Warning: repeated_elements_invariant triggered - repeated elements detected!" << endl;
            abort();
        }
    }
}

// Checker function for high factor count
void check_high_factor_count_invariant(const VL& arr) {
    for (const auto& elem : arr) {
        int factorCount = 0;
        for (LL j = elem; j < N; j += elem) {
            factorCount++;
            if (factorCount > 100) {  // Arbitrary threshold for example purposes
                cerr << "Warning: high_factor_count_invariant triggered - too many factors!" << endl;
                abort();
            }
        }
    }
}

int main(){
    off;
    DRT(){
        memset(score, 0, sizeof(score));
        LL n; cin >> n;
        VL arr(n);
        rep(i,0,n){
            cin >> arr[i];
        }

        // Insert checks after reading input
        check_small_elements_invariant(arr);
        check_repeated_elements_invariant(arr);
        check_high_factor_count_invariant(arr);

        sort(ALL(arr), greater<LL>());
        LL ans = 0;
        rep(i,0,n){
            LL mm = 0;
            LL can = 1;
            if(i-1 >= 0 && arr[i] == arr[i-1])
                can = 0;
            if(can)
            for(LL j=arr[i]; j < N; j+= arr[i]){
                mm = max(mm, score[j]);
            }
            score[arr[i]] = max(score[arr[i]], mm);
            score[arr[i]]++;
            ans = max(ans, score[arr[i]]);
        }
        dout(n - ans);
    }
    return 0;
}
```

### Explanation of Integration

- The checker functions are placed after the input is read and before any operations are performed on the array. This ensures that any potential performance bottlenecks are detected early in the control flow.
- The checks are placed outside of performance-critical loops to avoid adding unnecessary overhead.
- These checks can help a fuzzer or a developer understand when and why the program might experience slow performance, making it easier to address potential issues proactively.

