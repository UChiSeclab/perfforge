system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>

using namespace std;

#define ull unsigned long long
#define ll long long
#define ui unsigned int
#define us unsigned short
#define inf_int 1e9
#define inf_ll 1e18
#define mod 1000000007
#define smod 998244353

const int maxN = 2 * 1e5 + 5;
int dp[maxN];

int main(){
	ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
	
	us t;
	cin >> t;
	
	while(t--){
		int n;
		cin >> n;
		
		int data[n];
		for(int x=0;x<n;x++){
			cin >> data[x];
		}
				
		fill(dp, dp+maxN, 0);
		
		for(int x=0;x<n;x++){
			dp[data[x]]++;
		}
		
		int ans = 0;
		for(int x=1;x<=200000;x++){
			int best = dp[x];
			for(int y=1;y*y<=x;y++){
				if(x % y == 0){
					if(x/y != x) best = max(best, dp[x] + dp[x/y]);
					if(x/y != y){
						best = max(best, dp[x] + dp[y]);
					}
				}
			}
			dp[x] = best;
			ans = max(ans, dp[x]);
		}
		
		cout << n-ans << "\n";
	}
	
    return 0;
}

// Santai
// Pikirin dengan benar-benar



(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
5 4 2 4 4
4
3 1 2 1
4
1 3 5 3
5
5 2 3 1 5
5
2 1 5 5 4
5
4 2 4 4 1
5
1 3 1 2 5
5
5 2 3 5 1
5
4 2 2 1 3
5
2 3 1 2 2


(G.2) Fast Input

1
5
2 4 2 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#define ull unsigned long long /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#define ll long long /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#define ui unsigned int /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#define us unsigned short /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#define inf_int 1e9 /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#define inf_ll 1e18 /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#define mod 1000000007 /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#define smod 998244353 /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 2 * 1e5 + 5; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int dp[maxN]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main(){ /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
	ios_base::sync_with_stdio(0); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(0); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    cout.tie(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
	 /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
	us t; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
	cin >> t; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
	 /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
	while(t--){ /* line 25 slow_hit_count: 11, fast_hit_count: 2 */
		int n; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
		cin >> n; /* line 27 slow_hit_count: 10, fast_hit_count: 1 */
		 /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
		int data[n]; /* line 29 slow_hit_count: 10, fast_hit_count: 1 */
		for(int x=0;x<n;x++){ /* line 30 slow_hit_count: 58, fast_hit_count: 6 */
			cin >> data[x]; /* line 31 slow_hit_count: 48, fast_hit_count: 5 */
		} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
				 /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
		fill(dp, dp+maxN, 0); /* line 34 slow_hit_count: 10, fast_hit_count: 1 */
		 /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
		for(int x=0;x<n;x++){ /* line 36 slow_hit_count: 58, fast_hit_count: 6 */
			dp[data[x]]++; /* line 37 slow_hit_count: 48, fast_hit_count: 5 */
		} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
		 /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
		int ans = 0; /* line 40 slow_hit_count: 10, fast_hit_count: 1 */
		for(int x=1;x<=200000;x++){ /* line 41 slow_hit_count: 2000010, fast_hit_count: 200001 */
			int best = dp[x]; /* line 42 slow_hit_count: 2000000, fast_hit_count: 200000 */
			for(int y=1;y*y<=x;y++){ /* line 43 slow_hit_count: 597289270, fast_hit_count: 59728927 */
				if(x % y == 0){ /* line 44 slow_hit_count: 595289270, fast_hit_count: 59528927 */
					if(x/y != x) best = max(best, dp[x] + dp[x/y]); /* line 45 slow_hit_count: 12362800, fast_hit_count: 1236280 */
					if(x/y != y){ /* line 46 slow_hit_count: 12362800, fast_hit_count: 1236280 */
						best = max(best, dp[x] + dp[y]); /* line 47 slow_hit_count: 12358330, fast_hit_count: 1235833 */
					} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
				} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
			} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
			dp[x] = best; /* line 51 slow_hit_count: 2000000, fast_hit_count: 200000 */
			ans = max(ans, dp[x]); /* line 52 slow_hit_count: 2000000, fast_hit_count: 200000 */
		} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
		 /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
		cout << n-ans << "\n"; /* line 55 slow_hit_count: 10, fast_hit_count: 1 */
	} /* line 56 slow_hit_count: 10, fast_hit_count: 1 */
	 /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
// Santai /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
// Pikirin dengan benar-benar /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we'll proceed through two phases: identifying the expensive code segments and deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts**:
   - The hit counts reveal a significant disparity in the loop starting at line 41. The number of iterations for `x` goes up from 200,001 in the fast input to 2,000,010 in the slow input.
   - The nested loop starting at line 43 is particularly costly with 59,728,927 hits for the fast input, which escalates to 597,289,270 hits for the slow input. This suggests a quadratic or worse complexity concerning the range of values processed (`x` up to 200,000).

2. **Pinpoint Lines with Significant Hits**:
   - Line 43: The condition in this loop (`y*y <= x`) suggests an inefficient factorization check for every `x` value, which can be particularly costly as `x` increases.
   - The operations within the loop (lines 45 and 47) involve updates to `best` which are executed a large number of times.

3. **Inference on Interaction with Data Structures**:
   - The program attempts to determine the maximum "beautiful" sub-array using dynamic programming (`dp` array). Each element `x` in the range [1, 200,000] is checked for its factors, and the frequency of each factor is updated dynamically.
   - The nested loop's complexity is likely O(sqrt(x)) for each element x up to 200,000, causing the performance hit.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit counts and analysis of the code structure, we can derive natural language statements that describe when the code might slow down significantly:

1. **Invariant 1: Large Value Processing**:
   - **Natural Language Description**: "The performance may degrade significantly when the dataset contains numbers with large factors or when the range of values extends to the upper limits (close to 200,000). This is due to the costly factorization checks in nested loops."
   - **Abstract Threshold**: This situation is exacerbated when the dataset includes numbers repeatedly requiring factor checks, often involving a wide distribution of values.

2. **Invariant 2: High Frequency of Specific Elements**:
   - **Natural Language Description**: "A slowdown can occur when a substantial portion of the array consists of numbers that are common factors of many other numbers. This results in repeated maximum checks for divisibility and frequent updates to the best count."
   - **Abstract Threshold**: Arrays with numbers having high divisibility potential, like many small numbers or frequent repeated elements, may trigger this inefficiency.

3. **Invariant 3: Maximal Range of Values**:
   - **Natural Language Description**: "If the input array covers a wide range of values, especially near the upper limit, the time complexity of processing increases due to the need for checking many potential factor pairs for each number."
   - **Abstract Threshold**: This typically happens when the values are not only large but also diverse, requiring extensive loops over potential factors.

By focusing on these invariants, we can anticipate scenarios where the program might slow down, not only based on the size but the distribution and range of input values, as well as the divisibility characteristics of numbers within the input array.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants from natural language into C++ code:

1. **Invariant 1: Large Value Processing**

```cpp
void check_large_value_processing(int maxValue) {
    if (maxValue > 199000) { // Arbitrary threshold close to the upper limit of 200,000
        cerr << "Warning: Performance bottleneck condition triggered - large value processing!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Frequency of Specific Elements**

```cpp
void check_high_frequency_elements(int n, int frequencyThreshold) {
    if (n > frequencyThreshold) { // Assuming frequency threshold based on array size
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of specific elements!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Maximal Range of Values**

```cpp
void check_maximal_range_of_values(int minValue, int maxValue) {
    if ((maxValue - minValue) > 198000) { // Arbitrary range close to the maximum span of values
        cerr << "Warning: Performance bottleneck condition triggered - maximal range of values!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code with the Original Program

We will now incorporate these checks into the original C++ code. We will place these checks strategically to avoid overhead in tight loops and ensure they provide meaningful warnings.

```cpp
#include <bits/stdc++.h>

using namespace std;

#define ull unsigned long long
#define ll long long
#define ui unsigned int
#define us unsigned short
#define inf_int 1e9
#define inf_ll 1e18
#define mod 1000000007
#define smod 998244353

const int maxN = 2 * 1e5 + 5;
int dp[maxN];

// Phase 3: Checker functions
void check_large_value_processing(int maxValue) {
    if (maxValue > 199000) { // Arbitrary threshold close to the upper limit of 200,000
        cerr << "Warning: Performance bottleneck condition triggered - large value processing!" << endl;
        abort();
    }
}

void check_high_frequency_elements(int n, int frequencyThreshold) {
    if (n > frequencyThreshold) { // Assuming frequency threshold based on array size
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of specific elements!" << endl;
        abort();
    }
}

void check_maximal_range_of_values(int minValue, int maxValue) {
    if ((maxValue - minValue) > 198000) { // Arbitrary range close to the maximum span of values
        cerr << "Warning: Performance bottleneck condition triggered - maximal range of values!" << endl;
        abort();
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
	
    us t;
    cin >> t;
	
    while(t--){
        int n;
        cin >> n;
		
        int data[n];
        for(int x = 0; x < n; x++){
            cin >> data[x];
        }

        // Phase 4: Insert checks after input
        int maxValue = *max_element(data, data + n);
        int minValue = *min_element(data, data + n);
        check_large_value_processing(maxValue);
        check_maximal_range_of_values(minValue, maxValue);

        fill(dp, dp + maxN, 0);
		
        for(int x = 0; x < n; x++){
            dp[data[x]]++;
        }

        // Check for high frequency of specific elements
        int frequencyThreshold = 200; // Example threshold
        for(int x = 0; x < n; x++) {
            check_high_frequency_elements(dp[data[x]], frequencyThreshold);
        }

        int ans = 0;
        for(int x = 1; x <= 200000; x++){
            int best = dp[x];
            for(int y = 1; y * y <= x; y++){
                if(x % y == 0){
                    if(x / y != x) best = max(best, dp[x] + dp[x / y]);
                    if(x / y != y){
                        best = max(best, dp[x] + dp[y]);
                    }
                }
            }
            dp[x] = best;
            ans = max(ans, dp[x]);
        }
		
        cout << n - ans << "\n";
    }
	
    return 0;
}
```

### Explanation of Integration:
- **Large Value Processing Check**: This is checked post-input reading to ensure that no extremely high values are processed without a warning.
- **Maximal Range of Values Check**: After determining the min and max values in the array, this check is utilized to ensure a wide range of values isn't causing inefficiencies.
- **High Frequency of Specific Elements Check**: Implemented post-dp array population to detect any excessively frequent elements that might slow down the program.

This instrumented code will help identify potential performance bottlenecks during runtime by triggering warnings when the described conditions are met.

