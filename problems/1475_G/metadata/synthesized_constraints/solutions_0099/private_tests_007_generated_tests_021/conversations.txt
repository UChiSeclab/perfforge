system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <cmath>
#include <bitset>
#include <queue>
#include <map>
#include <random>
#include <queue>
#include <assert.h>

using namespace std;

#define ll long long
#define endl '\n'
#define cint(a) int a; cin >> a;

const int N = 2e5 + 1;

int a[N];
int dp[N];
int s[N];

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int t;
	cin >> t;
	while(t--)
	{
		cint(n);
		for (int i = 0; i < n; i++)
		{
			cin >> a[i];
			s[a[i]] = 0;
			dp[a[i]] = 0;
		}
		sort(a, a + n);
		for (int i = 0; i < n; i++)
		{
			s[a[i]]++;
			dp[a[i]]++;
		}
		int m = unique(a, a + n) - a;
		int ans = 0;
		for (int i = 0; i < m; i++)
		{
			ans = max(ans, dp[a[i]]);
			for (int j =  2 * a[i]; j < N; j += a[i])
			{
				dp[j] = max(dp[j], dp[a[i]] + s[j]);
			}
		}
		cout << n - ans << endl;
	cont:;
	}
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
4 3 1 5 1
5
1 4 1 1 3
5
4 1 2 1 2
5
5 5 5 1 4
5
5 2 4 5 4
5
3 1 2 3 4
5
2 3 5 4 1
5
5 4 5 5 4
5
1 2 2 3 2
4
2 1 3 1


(G.2) Fast Input

10
5
4 2 5 2 2
5
2 3 2 5 2
5
4 4 3 3 4
4
2 1 3 1
5
5 3 3 4 5
4
1 4 1 2
5
2 1 1 3 5
5
4 5 2 4 5
5
3 5 2 4 3
5
5 4 5 2 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#define _CRT_SECURE_NO_WARNINGS /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#include <iostream> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#include <iomanip> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#include <algorithm> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#include <string> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#include <vector> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#include <set> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#include <cmath> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#include <bitset> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#include <queue> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#include <map> /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
#include <random> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
#include <queue> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
#include <assert.h> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
#define ll long long /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
#define endl '\n' /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
#define cint(a) int a; cin >> a; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2e5 + 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N]; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int s[N]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
#ifdef _DEBUG /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
	freopen("input.txt", "r", stdin); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
#endif /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
	ios_base::sync_with_stdio(false); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
	cin.tie(0); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
	int t; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
	cin >> t; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
	while(t--) /* line 38 slow_hit_count: 11, fast_hit_count: 11 */
	{ /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
		cint(n); /* line 40 slow_hit_count: 10, fast_hit_count: 10 */
		for (int i = 0; i < n; i++) /* line 41 slow_hit_count: 59, fast_hit_count: 58 */
		{ /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
			cin >> a[i]; /* line 43 slow_hit_count: 49, fast_hit_count: 48 */
			s[a[i]] = 0; /* line 44 slow_hit_count: 49, fast_hit_count: 48 */
			dp[a[i]] = 0; /* line 45 slow_hit_count: 49, fast_hit_count: 48 */
		} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
		sort(a, a + n); /* line 47 slow_hit_count: 10, fast_hit_count: 10 */
		for (int i = 0; i < n; i++) /* line 48 slow_hit_count: 59, fast_hit_count: 58 */
		{ /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
			s[a[i]]++; /* line 50 slow_hit_count: 49, fast_hit_count: 48 */
			dp[a[i]]++; /* line 51 slow_hit_count: 49, fast_hit_count: 48 */
		} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
		int m = unique(a, a + n) - a; /* line 53 slow_hit_count: 10, fast_hit_count: 10 */
		int ans = 0; /* line 54 slow_hit_count: 10, fast_hit_count: 10 */
		for (int i = 0; i < m; i++) /* line 55 slow_hit_count: 43, fast_hit_count: 42 */
		{ /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
			ans = max(ans, dp[a[i]]); /* line 57 slow_hit_count: 33, fast_hit_count: 32 */
			for (int j =  2 * a[i]; j < N; j += a[i]) /* line 58 slow_hit_count: 3199996, fast_hit_count: 2496662 */
			{ /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
				dp[j] = max(dp[j], dp[a[i]] + s[j]); /* line 60 slow_hit_count: 3199963, fast_hit_count: 2496630 */
			} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
		cout << n - ans << endl; /* line 63 slow_hit_count: 10, fast_hit_count: 10 */
	cont:; /* line 64 slow_hit_count: 10, fast_hit_count: 10 */
	} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 66 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Sure, let's analyze the code and derive performance-characterizing invariants based on the provided information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**
   - Lines 58 and 60 are hit significantly more often in the slow run than in the fast run, with line 58 having 3,199,996 hits for the slow input compared to 2,496,662 for the fast input.
   - This nested loop at lines 58-60 is the critical region, which iterates over all multiples of `a[i]` up to `N`.

2. **Inefficiency Analysis**
   - The inner loop at lines 58-60 exhibits a pattern where it iterates over multiples of `a[i]`. If `a[i]` is small, the loop will iterate many times, leading to the high hit count.
   - This suggests that when elements of the array are small, the range of the inner loop becomes extensive, causing the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we should focus on the conditions where the inner loop becomes excessively long, which primarily depends on the values of elements in the array `a`.

#### Natural Language Performance Invariants:

1. **Presence of Small Elements Triggering Excessive Iterations:**
   - "If the array contains elements with small values (e.g., 1 or 2), the number of iterations in the inner loop increases significantly, as each multiple of such elements up to the maximum possible value (200,000) is processed. This may cause the program to slow down due to increased computation in loops."

2. **Distribution of Small Values in the Array:**
   - "If there are multiple small values in the array and they are frequent, the repeated execution of the nested loop for each small value increases the computational work, potentially leading to performance degradation."

3. **High Frequency of Small Numbers:**
   - "When a small number appears frequently in the array, it enhances the likelihood of triggering slow execution paths, as the nested loop work is proportionally repeated for each occurrence."

#### Suggested Thresholds and Checks

Given the constraints of the problem (e.g., `n <= 200,000`), a realistic check could involve monitoring the presence and frequency of small elements:

```cpp
void check_small_value_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: small_value_invariant triggered - presence of small elements causing excessive iterations" << endl;
        abort();
    }
}

// Example check before the nested loop execution
int smallValueThreshold = 10; // Example threshold for small values
int smallValueCount = count_if(a, a + n, [](int x) { return x <= smallValueThreshold; });
check_small_value_invariant(smallValueCount > n / 2); // Trigger if more than half of the array are small values
```

These statements and checks aim to generalize the condition that leads to performance bottlenecks without relying on exact input values. They are intended to capture scenarios where small elements in the array predominantly cause excessive iterations in the nested loop.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants as runtime checks in C++ and integrating these checks into the original program.

### Phase 3: Implement the Natural Language Invariants in C++

Based on the previous analysis, here are the C++ code snippets for the checks:

```cpp
void check_small_value_invariant(const int* arr, int size, int threshold) {
    int smallValueCount = 0;
    for (int i = 0; i < size; ++i) {
        if (arr[i] <= threshold) {
            ++smallValueCount;
        }
    }
    if (smallValueCount > size / 2) {
        cerr << "Warning: small_value_invariant triggered - presence of small elements causing excessive iterations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate the checker code into the original C++ program. We'll add the checks at an appropriate point in the code to effectively catch slow paths without adding overhead in tight loops.

```cpp
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <cmath>
#include <bitset>
#include <queue>
#include <map>
#include <random>
#include <queue>
#include <assert.h>

using namespace std;

#define ll long long
#define endl '\n'
#define cint(a) int a; cin >> a;

const int N = 2e5 + 1;

int a[N];
int dp[N];
int s[N];

void check_small_value_invariant(const int* arr, int size, int threshold) {
    int smallValueCount = 0;
    for (int i = 0; i < size; ++i) {
        if (arr[i] <= threshold) {
            ++smallValueCount;
        }
    }
    if (smallValueCount > size / 2) {
        cerr << "Warning: small_value_invariant triggered - presence of small elements causing excessive iterations" << endl;
        abort();
    }
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int t;
    cin >> t;
    while(t--)
    {
        cint(n);
        for (int i = 0; i < n; i++)
        {
            cin >> a[i];
            s[a[i]] = 0;
            dp[a[i]] = 0;
        }

        // Add the invariant check after reading the input
        check_small_value_invariant(a, n, 10); // assuming 10 as a threshold for small values

        sort(a, a + n);
        for (int i = 0; i < n; i++)
        {
            s[a[i]]++;
            dp[a[i]]++;
        }
        int m = unique(a, a + n) - a;
        int ans = 0;
        for (int i = 0; i < m; i++)
        {
            ans = max(ans, dp[a[i]]);
            for (int j =  2 * a[i]; j < N; j += a[i])
            {
                dp[j] = max(dp[j], dp[a[i]] + s[j]);
            }
        }
        cout << n - ans << endl;
    cont:;
    }
}
```

### Explanation of Integration

- **check_small_value_invariant:** The function checks if there are too many small values in the array, which could lead to excessive iterations.
- **Placement:** The check is placed after reading the input and before any heavy computation to ensure that the invariant is evaluated without adding overhead to the main computational loops.
- **Threshold:** A threshold of `10` is used for small values, which can be adjusted based on further profiling or theoretical insight into the problem space. 

This integration ensures that the program can catch performance issues related to small values effectively during execution.

