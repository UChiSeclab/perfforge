system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;
#define joker ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ll long long
#define z 1000000007
#define sh 200000
#define pb push_back

#define fi first
#define se second
#define pr(x) printf("%d ", x)
#define sc(x) scanf("%d",&x)
#define mxf INT_MAX
#define mnf INT_MIN
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
typedef vector<vi> vvi;
typedef map<int,int> mpi;
typedef map<int,pi> mpii;
void why_so_serious(){
    #ifndef ONLINE_JUDGE 
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout); 
    #endif 
}



bool cmp(ll a,ll b)
{
	return a>b;
}

// ll f[sh+1];
// ll me(ll x,ll n)
// {
//     ll res=1;
//     while(n>0)
//     {
//         if(n&1)
//             res=(res*x)%z;
//         x=(x*x)%z;
//         n/=2;
//     }
//     return res;
// }
 

// ll mi(ll x)
// {
//     return me(x,z-2);
// }
// void fact(){
//     f[0]=1;
//     for(ll i=1;i<=sh;i++)
//         f[i]=(f[i-1]*i)%z;
// }
// ll ncr(ll n,ll r)
// {
// 	if(n<r)
// 		return 0LL;
//     ll res=f[n];
//     ll tmp=(f[n-r]*f[r])%z;
//     tmp=mi(tmp);
//     res=(res*tmp)%z;
//     return res;
// }
int main()
{
	why_so_serious();
	joker
	// fact();
	int t;
	cin>>t;
	while(t--){
		int n,i;
		cin>>n;
		int ar[n];
		int dp[sh+2];
		memset(dp,0,sizeof(dp));
		map<int,int> mp;
		for(i=0;i<n;i++){
			cin>>ar[i];
			dp[ar[i]]++;
			mp[ar[i]]++;
		}

		sort(ar,ar+n);
		// for(auto it: mp)
		// 	cout<<it.first<<' '<<it.second<<endl;
		
		int ans=0;
		for(auto it=mp.rbegin();it!=mp.rend();it++){
			int val=it->first;
			// cout<<val<<endl;
			int num=val;
			while(num<=sh){
				num+=val;
				if(num<=sh)
				dp[val]=max(dp[val],dp[num]+mp[val]);

			}
			
		}
		for(i=1;i<=sh;i++)
			ans=max(ans,dp[i]);
		cout<<n-ans<<endl;
	}
}



(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
5 4 2 4 4
4
3 1 2 1
4
1 3 5 3
5
5 2 3 1 5
5
2 1 5 5 4
5
4 2 4 4 1
5
1 3 1 2 5
5
5 2 3 5 1
5
4 2 2 1 3
5
2 3 1 2 2


(G.2) Fast Input

1
5
2 4 2 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#define joker ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define ll long long /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#define z 1000000007 /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#define sh 200000 /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#define pb push_back /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#define fi first /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#define se second /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#define pr(x) printf("%d ", x) /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#define sc(x) scanf("%d",&x) /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
#define mxf INT_MAX /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
#define mnf INT_MIN /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<int, int> pi; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<int> vi; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<pi> vii; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
typedef vector<vi> vvi; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
typedef map<int,int> mpi; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
typedef map<int,pi> mpii; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void why_so_serious(){ /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    #ifndef ONLINE_JUDGE  /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    freopen("input.txt", "r", stdin);  /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    freopen("output.txt", "w", stdout);  /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    #endif  /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(ll a,ll b) /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
{ /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
	return a>b; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
// ll f[sh+1]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
// ll me(ll x,ll n) /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
// { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
//     ll res=1; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
//     while(n>0) /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
//     { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
//         if(n&1) /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
//             res=(res*x)%z; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
//         x=(x*x)%z; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
//         n/=2; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
//     } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
//     return res; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
// } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
// ll mi(ll x) /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
// { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
//     return me(x,z-2); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
// } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
// void fact(){ /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
//     f[0]=1; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
//     for(ll i=1;i<=sh;i++) /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
//         f[i]=(f[i-1]*i)%z; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
// } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
// ll ncr(ll n,ll r) /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
// { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
// 	if(n<r) /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
// 		return 0LL; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
//     ll res=f[n]; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
//     ll tmp=(f[n-r]*f[r])%z; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
//     tmp=mi(tmp); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
//     res=(res*tmp)%z; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
//     return res; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
// } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
	why_so_serious(); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
	joker /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
	// fact(); /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
	int t; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
	cin>>t; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
	while(t--){ /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
		int n,i; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
		cin>>n; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
		int ar[n]; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
		int dp[sh+2]; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
		memset(dp,0,sizeof(dp)); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
		map<int,int> mp; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
		for(i=0;i<n;i++){ /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
			cin>>ar[i]; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
			dp[ar[i]]++; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
			mp[ar[i]]++; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
		sort(ar,ar+n); /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
		// for(auto it: mp) /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
		// 	cout<<it.first<<' '<<it.second<<endl; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
		 /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
		int ans=0; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
		for(auto it=mp.rbegin();it!=mp.rend();it++){ /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
			int val=it->first; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
			// cout<<val<<endl; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
			int num=val; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
			while(num<=sh){ /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
				num+=val; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
				if(num<=sh) /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
				dp[val]=max(dp[val],dp[num]+mp[val]); /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
			} /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
			 /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
		for(i=1;i<=sh;i++) /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
			ans=max(ans,dp[i]); /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
		cout<<n-ans<<endl; /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
	} /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 110 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 111 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks and derive performance-characterizing invariants for the given C program, let's analyze the code and hit count information from both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The hit count data provided seems to be inaccurate or unhelpful (`slow_hit_count: 0, fast_hit_count: 0`) for many lines. This seems inconsistent with the problem statement, so let's analyze the code logic instead.

2. **Code Analysis:**
   - The code processes multiple test cases, reads the input array, counts the occurrences of each element, and applies a dynamic programming-like strategy to determine the maximum subset of the array that can be beautiful.
   - The critical computational part of the code appears to be the nested loop starting at line `94`, where it iterates over elements in a map of frequency counts (`mp`), and for each element, it repeatedly increments by the element's value to check divisibility conditions and update a `dp` array.

3. **Expensive Operations:**
   - The inner loop (lines `98-103`) can be expensive as it performs operations until `num` exceeds `sh` (200,000). If `it->first` is small, this results in many iterations.
   - The outer loop (line `94`) iterates over the map in reverse, which might involve several elements if many are unique.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, let's generate natural language statements that describe potential performance issues.

1. **High Frequency of Small Elements:**
   - **Invariant:** "If the array contains many elements with small values, the program may enter a slow path due to repeated iterations over these small elements combined with their multiples."
   - **Rationale:** Small elements in `mp` result in many iterations of the inner loop (`98-103`), which increase the hit count and execution time.

2. **Diverse Range of Array Elements:**
   - **Invariant:** "When the array contains a diverse or large range of unique elements, the program might slow down due to increased operations of the reverse map iteration and the subsequent updates to the `dp` array."
   - **Rationale:** Increased unique elements result in more iterations in both the map traversal and dynamic programming update.

3. **Large Arrays Near Upper Constraint:**
   - **Invariant:** "When n is near its upper limit (e.g., 200,000), the sheer number of operations, especially considering divisibility checks and updates, can lead to significant slow downs."
   - **Rationale:** Larger arrays inherently increase operation counts due to the nested logic.

4. **Frequent High Multiples Calculation:**
   - **Invariant:** "If elements in the array lead to frequent calculations of high multiples within the bounds of `sh`, the performance may degrade due to excessive iterations."
   - **Rationale:** The `while` loop checks multiples of values, and frequent loops here imply increased computational demands.

By abstracting these conditions, this analysis provides insights into potential slowdowns without directly relying on specific values from the input. This helps in understanding triggers for performance degradation and can aid in optimization or further debugging.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Here are the C++ code snippets for the performance-characterizing invariants that were previously described in natural language:

1. **High Frequency of Small Elements:**
   ```cpp
   void check_small_elements_invariant(int smallestElement) {
       if (smallestElement < 10) {  // Assuming 'small' is less than 10 for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - high frequency of small elements!" << endl;
           abort();
       }
   }
   ```

2. **Diverse Range of Array Elements:**
   ```cpp
   void check_diverse_range_invariant(int uniqueElementCount) {
       if (uniqueElementCount > 10000) {  // Threshold for 'diverse' is arbitrarily chosen
           cerr << "Warning: Performance bottleneck condition triggered - diverse range of array elements!" << endl;
           abort();
       }
   }
   ```

3. **Large Arrays Near Upper Constraint:**
   ```cpp
   void check_large_array_invariant(int n) {
       if (n > 190000) {  // Close to the maximum constraint of 200,000
           cerr << "Warning: Performance bottleneck condition triggered - large arrays near constraint!" << endl;
           abort();
       }
   }
   ```

4. **Frequent High Multiples Calculation:**
   ```cpp
   void check_high_multiples_invariant(int number) {
       if (number < 10) {  // Assuming frequent calculations for small numbers
           cerr << "Warning: Performance bottleneck condition triggered - frequent high multiples calculation!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Let's integrate these checks into the original C++ program provided:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define joker ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define ll long long
#define z 1000000007
#define sh 200000
#define pb push_back
#define fi first
#define se second
#define pr(x) printf("%d ", x)
#define sc(x) scanf("%d",&x)
#define mxf INT_MAX
#define mnf INT_MIN
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
typedef vector<vi> vvi;
typedef map<int, int> mpi;
typedef map<int, pi> mpii;

void why_so_serious() {
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

void check_small_elements_invariant(int smallestElement) {
    if (smallestElement < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of small elements!" << endl;
        abort();
    }
}

void check_diverse_range_invariant(int uniqueElementCount) {
    if (uniqueElementCount > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - diverse range of array elements!" << endl;
        abort();
    }
}

void check_large_array_invariant(int n) {
    if (n > 190000) {
        cerr << "Warning: Performance bottleneck condition triggered - large arrays near constraint!" << endl;
        abort();
    }
}

void check_high_multiples_invariant(int number) {
    if (number < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent high multiples calculation!" << endl;
        abort();
    }
}

int main() {
    why_so_serious();
    joker
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;

        // Add check for large arrays near the upper constraint.
        check_large_array_invariant(n);

        int ar[n];
        int dp[sh + 2];
        memset(dp, 0, sizeof(dp));
        map<int, int> mp;

        for (i = 0; i < n; i++) {
            cin >> ar[i];
            dp[ar[i]]++;
            mp[ar[i]]++;
        }

        // Sort the array and check for small elements.
        sort(ar, ar + n);
        check_small_elements_invariant(ar[0]);

        // Check for diverse range of elements.
        check_diverse_range_invariant(mp.size());

        int ans = 0;
        for (auto it = mp.rbegin(); it != mp.rend(); it++) {
            int val = it->first;
            int num = val;

            // Check for frequent high multiples calculation.
            check_high_multiples_invariant(val);

            while (num <= sh) {
                num += val;
                if (num <= sh)
                    dp[val] = max(dp[val], dp[num] + mp[val]);
            }
        }
        for (i = 1; i <= sh; i++)
            ans = max(ans, dp[i]);

        cout << n - ans << endl;
    }
}
```

### Explanation of Integration
- **Checker Functions**: Each checker function has been implemented using C++ and integrated into the program at relevant strategic points.
- **Check Placement**:
  - `check_large_array_invariant`: Placed after reading `n`.
  - `check_small_elements_invariant`: Placed after sorting the array to check for small elements.
  - `check_diverse_range_invariant`: Placed after initializing the frequency map.
  - `check_high_multiples_invariant`: Placed inside the loop iterating over map elements. 

By placing these checks at strategic points, we avoid adding overhead to tight loops while effectively capturing potential performance issues.

