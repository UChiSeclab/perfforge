system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include<cstdio>
#include<algorithm>
using namespace std;
int T,N;
int A[1<<18],B[1<<18];
int main()
{
	scanf("%d",&T);
	for(;T--;)
	{
		scanf("%d",&N);
		for(int i=0;i<1<<18;i++)A[i]=B[i]=0;
		for(int i=0;i<N;i++)
		{
			int a;scanf("%d",&a);
			A[a]++;
		}
		int ans=0;
		for(int i=1;i<1<<18;i++)
		{
			ans=max(ans,A[i]+=B[i]);
			for(int j=i+i;j<1<<18;j+=i)B[j]=max(B[j],A[i]);
		}
		printf("%d\n",N-ans);
	}
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
5 4 2 4 4
4
3 1 2 1
4
1 3 4 3
5
5 2 3 1 5
5
2 1 3 5 4
5
4 2 4 4 5
5
1 3 1 2 5
5
5 2 3 5 1
5
4 2 2 1 3
5
2 3 1 1 1


(G.2) Fast Input

1
5
2 4 2 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<cstdio> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#include<algorithm> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int T,N; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int A[1<<18],B[1<<18]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
	scanf("%d",&T); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
	for(;T--;) /* line 9 slow_hit_count: 11, fast_hit_count: 2 */
	{ /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
		scanf("%d",&N); /* line 11 slow_hit_count: 10, fast_hit_count: 1 */
		for(int i=0;i<1<<18;i++)A[i]=B[i]=0; /* line 12 slow_hit_count: 2621450, fast_hit_count: 262145 */
		for(int i=0;i<N;i++) /* line 13 slow_hit_count: 58, fast_hit_count: 6 */
		{ /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
			int a;scanf("%d",&a); /* line 15 slow_hit_count: 48, fast_hit_count: 5 */
			A[a]++; /* line 16 slow_hit_count: 48, fast_hit_count: 5 */
		} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
		int ans=0; /* line 18 slow_hit_count: 10, fast_hit_count: 1 */
		for(int i=1;i<1<<18;i++) /* line 19 slow_hit_count: 2621440, fast_hit_count: 262144 */
		{ /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
			ans=max(ans,A[i]+=B[i]); /* line 21 slow_hit_count: 2621430, fast_hit_count: 262143 */
			for(int j=i+i;j<1<<18;j+=i)B[j]=max(B[j],A[i]); /* line 22 slow_hit_count: 33111870, fast_hit_count: 3311187 */
		} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
		printf("%d\n",N-ans); /* line 24 slow_hit_count: 10, fast_hit_count: 1 */
	} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts from both the slow and fast input runs, the following observations can be made:

1. **Line 12:** `for(int i=0;i<1<<18;i++)A[i]=B[i]=0;`  
   - **Hit Count:** Slow: 2,621,450; Fast: 262,145
   - **Observation:** This line resets two large arrays `A` and `B` to zero, iterating over their full size (2^18 elements). This is expensive, but since it is a constant overhead, it doesn't account for input-dependent slowdown.

2. **Line 19-22:** Contains nested looping and updates:
   - `for(int i=1;i<1<<18;i++)`
   - `for(int j=i+i;j<1<<18;j+=i)B[j]=max(B[j],A[i]);`
   - **Hit Count:** Slow: 26,214,40 (outer loop), 33,111,870 (nested loop); Fast: 262,144 (outer loop), 3,311,187 (nested loop)
   - **Observation:** The nested loop structure here suggests that the inner loop (line 22) is hit significantly more often in the slow input, indicating it is a potential bottleneck. This loop is running over a large range and involves an update operation that could be expensive when `i` has many multiples.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **Invariant 1: Extensive Divisibility Checks**
   - **Natural Language Description:** "The program encounters potential slowdowns when there is a high frequency of elements in the array that have many multiples (or divisors) within the range. This results in excessive iterations of the inner loop, as each multiple requires a check and potential update."
   - **Threshold Suggestion:** This is likely to occur when arrays contain several small numbers, especially primes or numbers with many small divisors, causing the divisor loop to iterate extensively.

2. **Invariant 2: High Multiplicity of Small Numbers**
   - **Natural Language Description:** "If the array contains many elements that are divisors of a wide range of numbers (such as small integers or numbers with small prime factors), the algorithm's complexity increases due to repeated calculations in nested loops."
   - **Threshold Suggestion:** The frequency of small, non-unique elements can trigger this condition, especially if they are heavily repeated.

3. **Invariant 3: Heavy Initialization Overhead**
   - **Natural Language Description:** "While constant, the initialization and resetting of large arrays for each test case could contribute to overhead when processing multiple test cases, particularly if test cases are large or numerous."
   - **Threshold Suggestion:** This is more pronounced with a higher number of test cases, each pushing the limits of `n`, even though this operation itself is independent of the array content.

These invariants suggest that careful attention is needed for inputs containing small numbers with many divisors, as these exacerbate the need for computationally heavy iterations. Additionally, the sheer size of data structures used for each test case adds a non-negligible base level of computational cost, particularly when tests are numerous.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the implementations of the performance-characterizing invariants derived in natural language, translated into C++ code for runtime checking:

1. **Invariant 1: Extensive Divisibility Checks**
    ```cpp
    void check_divisibility_invariant(int n, int max_val) {
        if (n > 100 && max_val <= 100) {
            cerr << "Warning: Performance bottleneck condition triggered due to high divisibility checks!" << endl;
            abort();
        }
    }
    ```

2. **Invariant 2: High Multiplicity of Small Numbers**
    ```cpp
    void check_multiplicity_invariant(const int A[], int length, int threshold) {
        int count_small_numbers = 0;
        for (int i = 0; i < length; ++i) {
            if (A[i] < threshold) {
                count_small_numbers++;
            }
        }
        // Trigger if we have too many small numbers
        if (count_small_numbers > length / 2) {
            cerr << "Warning: Performance bottleneck condition triggered due to high multiplicity of small numbers!" << endl;
            abort();
        }
    }
    ```

3. **Invariant 3: Heavy Initialization Overhead**
    ```cpp
    void check_initialization_invariant(int t, int n) {
        if (t * n > 500000) {
            cerr << "Warning: Performance bottleneck condition triggered due to heavy initialization overhead!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate the Checker Code with the Original Program

Here is the instrumented C++ code with integrated runtime checks:

```cpp
#include<cstdio>
#include<algorithm>
using namespace std;

int T, N;
int A[1<<18], B[1<<18];

// Checker functions
void check_divisibility_invariant(int n, int max_val) {
    if (n > 100 && max_val <= 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to high divisibility checks!" << endl;
        abort();
    }
}

void check_multiplicity_invariant(const int A[], int length, int threshold) {
    int count_small_numbers = 0;
    for (int i = 0; i < length; ++i) {
        if (A[i] < threshold) {
            count_small_numbers++;
        }
    }
    if (count_small_numbers > length / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high multiplicity of small numbers!" << endl;
        abort();
    }
}

void check_initialization_invariant(int t, int n) {
    if (t * n > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to heavy initialization overhead!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &T);

    // Check for initialization overhead
    check_initialization_invariant(T, 200000); // Reasonable upper bound per constraints

    for(; T--; ) {
        scanf("%d", &N);

        for(int i = 0; i < 1<<18; i++) A[i] = B[i] = 0;

        int max_val = 0;
        for(int i = 0; i < N; i++) {
            int a;
            scanf("%d", &a);
            A[a]++;
            if (a > max_val) max_val = a;
        }

        // Check for high divisibility and multiplicity
        check_divisibility_invariant(N, max_val);
        check_multiplicity_invariant(A, N, 100);

        int ans = 0;
        for(int i = 1; i < 1<<18; i++) {
            ans = max(ans, A[i] += B[i]);
            for(int j = i + i; j < 1<<18; j += i) B[j] = max(B[j], A[i]);
        }

        printf("%d\n", N - ans);
    }
}
```

### Explanation:
- **Invariant Checks:** These are placed after reading the input size and values but before the heavy loops and computations.
- **Threshold and Conditions:** The checks utilize reasonable thresholds based on number theory and program constraints to predict and prevent potential bottlenecks, helping guide any fuzz testing or debugging processes.

