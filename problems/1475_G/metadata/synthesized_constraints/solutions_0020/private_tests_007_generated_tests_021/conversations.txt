system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;
const int N=2e5+7;
int dp[N];
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> v(n);
        map<int,int> mp;
        set<int> st;
        for(int i=0;i<n;i++){
            cin>>v[i];
            st.insert(v[i]);
            mp[v[i]]++;
        }
        sort(v.begin(),v.end());
        for(int i=v.size()-1;i>=0;){
            dp[v[i]]=mp[v[i]];
            for(int j=2*v[i];j<N;j+=v[i]){
                 dp[v[i]]=max(dp[j]+mp[v[i]],dp[v[i]]);
            }
            i=i-mp[v[i]];
        }
        int mx=0;
        for(int i=0;i<N;i++){
              mx=max(mx,dp[i]);
        }
        cout<<n-mx<<endl;
        for(int i=0;i<=v[n-1];i++){
            dp[i]=0;
        }
    }
    return 0;
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5
4 3 1 5 1
5
1 4 1 1 3
5
4 1 2 1 2
5
5 5 5 1 4
5
5 2 4 5 4
5
3 1 2 3 4
5
2 3 5 4 1
5
5 4 5 5 4
5
1 2 2 3 2
4
2 1 3 1


(G.2) Fast Input

10
5
4 2 5 2 2
5
2 3 2 5 2
5
4 4 3 3 4
4
2 1 3 1
5
5 3 3 4 5
4
1 4 1 2
5
2 1 1 3 5
5
4 5 2 4 5
5
3 5 2 4 3
5
5 4 5 2 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N=2e5+7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(){ /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
    ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    cout.tie(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    int t; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin>>t; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    while(t--){ /* line 11 slow_hit_count: 11, fast_hit_count: 11 */
        int n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        cin>>n; /* line 13 slow_hit_count: 10, fast_hit_count: 10 */
        vector<int> v(n); /* line 14 slow_hit_count: 20, fast_hit_count: 20 */
        map<int,int> mp; /* line 15 slow_hit_count: 20, fast_hit_count: 20 */
        set<int> st; /* line 16 slow_hit_count: 20, fast_hit_count: 20 */
        for(int i=0;i<n;i++){ /* line 17 slow_hit_count: 59, fast_hit_count: 58 */
            cin>>v[i]; /* line 18 slow_hit_count: 49, fast_hit_count: 48 */
            st.insert(v[i]); /* line 19 slow_hit_count: 49, fast_hit_count: 48 */
            mp[v[i]]++; /* line 20 slow_hit_count: 49, fast_hit_count: 48 */
        } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        sort(v.begin(),v.end()); /* line 22 slow_hit_count: 10, fast_hit_count: 10 */
        for(int i=v.size()-1;i>=0;){ /* line 23 slow_hit_count: 43, fast_hit_count: 42 */
            dp[v[i]]=mp[v[i]]; /* line 24 slow_hit_count: 33, fast_hit_count: 32 */
            for(int j=2*v[i];j<N;j+=v[i]){ /* line 25 slow_hit_count: 3200087, fast_hit_count: 2496732 */
                 dp[v[i]]=max(dp[j]+mp[v[i]],dp[v[i]]); /* line 26 slow_hit_count: 3200054, fast_hit_count: 2496700 */
            } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
            i=i-mp[v[i]]; /* line 28 slow_hit_count: 33, fast_hit_count: 32 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        int mx=0; /* line 30 slow_hit_count: 10, fast_hit_count: 10 */
        for(int i=0;i<N;i++){ /* line 31 slow_hit_count: 2000080, fast_hit_count: 2000080 */
              mx=max(mx,dp[i]); /* line 32 slow_hit_count: 2000070, fast_hit_count: 2000070 */
        } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        cout<<n-mx<<endl; /* line 34 slow_hit_count: 10, fast_hit_count: 10 */
        for(int i=0;i<=v[n-1];i++){ /* line 35 slow_hit_count: 63, fast_hit_count: 66 */
            dp[i]=0; /* line 36 slow_hit_count: 53, fast_hit_count: 56 */
        } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics and identify the bottleneck in the provided C code, let's proceed with the tasks and phases outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare line-level hit counts between the fast and slow runs:**
   - The most significant difference in hit counts between the slow and fast inputs occurs in the loop starting at line 25:
     ```cpp
     for(int j=2*v[i];j<N;j+=v[i]){
         dp[v[i]]=max(dp[j]+mp[v[i]],dp[v[i]]);
     }
     ```
   - Slow input hit count: 3,200,087
   - Fast input hit count: 2,496,732

2. **Pinpoint lines or functions that get significantly more hits under the slow input:**
   - The loop on line 25 iterates for a large number of times, taking up most of the execution time in the slow execution path.

3. **Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100):**
   - The line involves a nested loop where `j` increments by the value of `v[i]`, iterating over multiples of `v[i]` up to `N`. Given `N = 200,007`, this can create a large overhead if `v[i]` is small, resulting in many iterations.
   - The use of `dp[j]` indicates a dynamic programming approach, but the high hit counts suggest excessive redundant computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate natural language statements that describe conditions under which the program likely enters a slow path:**

   - **Invariant #1: Small Numbers with High Frequency**
     - **Natural language description:** "If there are several small numbers in the array that repeat frequently, the inner loop will iterate many times, causing excessive computation."
     - **Explanation:** When the array contains small numbers, especially numbers like `1`, the inner loop on line 25 can iterate many times due to small step increments (`j += v[i]`), leading to high computational overhead.

   - **Invariant #2: High Multiplicity of Small Values**
     - **Natural language description:** "If the array contains many small values with high frequency, the dynamic programming update step will be executed a large number of times, degrading performance."
     - **Explanation:** The loop updates `dp[v[i]]` based on the multiplicative reach of smaller values. When these values are small and frequently appearing, the update steps accumulate, slowing down the execution.

2. **Avoid using specific numeric values from the slow input; abstract them into categories or thresholds:**

   - The conditions focus on input patterns, such as having a large number of small values and high frequency of certain integers, leading to excessive looping.

3. **Correlate these conditions strongly to input patterns:**

   - Small values like `1` cause loops to run for many iterations, especially when combined with frequent occurrences, as the loop iterates over multiples of `v[i]`.

4. **Ensure your statements are broad enough to catch possible future slow scenarios but still reflect realistic triggers given the constraints (like n <= 100):**

   - Both invariants are based on patterns of input that lead to excessive looping and dynamic programming updates, covering potential future inputs that might cause similar performance issues.

These invariants help identify and flag scenarios where the algorithm's time complexity could degrade significantly due to specific input characteristics. By focusing on the presence of small, frequently-occurring numbers, these statements can assist in crafting checks or adjustments in the code for more efficient execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp found on the street an array a of n elements.

Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i ≠ j: 

  * a_i is divisible by a_j; 
  * or a_j is divisible by a_i. 



For example, if: 

  * n=5 and a=[7, 9, 3, 14, 63], then the a array is not beautiful (for i=4 and j=2, none of the conditions above is met); 
  * n=3 and a=[2, 14, 42], then the a array is beautiful; 
  * n=4 and a=[45, 9, 3, 18], then the a array is not beautiful (for i=1 and j=4 none of the conditions above is met); 



Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.

Input

The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.

The second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a.

Output

For each test case output one integer — the minimum number of elements that must be removed to make the array a beautiful.

Example

Input


4
5
7 9 3 14 63
3
2 14 42
4
45 9 3 18
3
2 2 8


Output


2
0
1
0

Note

In the first test case, removing 7 and 14 will make array a beautiful.

In the second test case, the array a is already beautiful.

In the third test case, removing one of the elements 45 or 18 will make the array a beautiful.

In the fourth test case, the array a is beautiful.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets implementing runtime checks based on the invariants derived earlier.

#### Invariant #1: Small Numbers with High Frequency

**Natural language description:** "If there are several small numbers in the array that repeat frequently, the inner loop will iterate many times, causing excessive computation."

**C++ Code:**
```cpp
void check_small_frequent_numbers(const map<int, int>& mp) {
    int threshold = 10; // Arbitrary threshold for high frequency small values
    for (const auto& entry : mp) {
        if (entry.first <= 10 && entry.second > threshold) {
            cerr << "Warning: Performance bottleneck condition triggered - small numbers with high frequency!" << endl;
            abort();
        }
    }
}
```

#### Invariant #2: High Multiplicity of Small Values

**Natural language description:** "If the array contains many small values with high frequency, the dynamic programming update step will be executed a large number of times, degrading performance."

**C++ Code:**
```cpp
void check_multiplicity(const vector<int>& v) {
    int small_value_limit = 10; // Threshold for what constitutes a "small" value
    int count_of_small_values = 0;
    for (int value : v) {
        if (value <= small_value_limit) {
            count_of_small_values++;
        }
    }
    if (count_of_small_values > v.size() / 2) { // Arbitrary condition for too many small values
        cerr << "Warning: Performance bottleneck condition triggered - high multiplicity of small values!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the final, instrumented C++ code with integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 7;
int dp[N];

// Check for small numbers with high frequency
void check_small_frequent_numbers(const map<int, int>& mp) {
    int threshold = 10; // Arbitrary threshold for high frequency small values
    for (const auto& entry : mp) {
        if (entry.first <= 10 && entry.second > threshold) {
            cerr << "Warning: Performance bottleneck condition triggered - small numbers with high frequency!" << endl;
            abort();
        }
    }
}

// Check for high multiplicity of small values
void check_multiplicity(const vector<int>& v) {
    int small_value_limit = 10; // Threshold for what constitutes a "small" value
    int count_of_small_values = 0;
    for (int value : v) {
        if (value <= small_value_limit) {
            count_of_small_values++;
        }
    }
    if (count_of_small_values > v.size() / 2) { // Arbitrary condition for too many small values
        cerr << "Warning: Performance bottleneck condition triggered - high multiplicity of small values!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> v(n);
        map<int, int> mp;
        set<int> st;
        for (int i = 0; i < n; i++) {
            cin >> v[i];
            st.insert(v[i]);
            mp[v[i]]++;
        }

        // Integrate checks
        check_small_frequent_numbers(mp); // Check 1
        check_multiplicity(v); // Check 2

        sort(v.begin(), v.end());
        for (int i = v.size() - 1; i >= 0;) {
            dp[v[i]] = mp[v[i]];
            for (int j = 2 * v[i]; j < N; j += v[i]) {
                dp[v[i]] = max(dp[j] + mp[v[i]], dp[v[i]]);
            }
            i = i - mp[v[i]];
        }
        int mx = 0;
        for (int i = 0; i < N; i++) {
            mx = max(mx, dp[i]);
        }
        cout << n - mx << endl;
        for (int i = 0; i <= v[n - 1]; i++) {
            dp[i] = 0;
        }
    }
    return 0;
}
```

**Integration Comments:**
- **Location of Checkers:** The checks are placed immediately after reading the input and before any heavy processing. This ensures that potential performance issues are caught early without adding overhead inside tight loops.
- **Avoiding Redundancy:** The checks are designed based on distinct conditions to address different potential performance scenarios.

