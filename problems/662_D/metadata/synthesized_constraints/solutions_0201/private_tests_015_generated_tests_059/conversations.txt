system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dominant[5005];
int main() {
  int n;
  cin >> n;
  while (n--) {
    string s;
    cin >> s;
    int len = s.length() - 4;
    int num = 0;
    for (int i = 4; i < s.length(); i++) num = num * 10 + s[i] - '0';
    if (len > 3) {
      if (num < 1989 + 10 * (((long long)ceil(pow(10, len - 1)) - 1) / 9))
        num += (int)ceil(pow(10, len));
    } else
      for (int i = 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9);
           i < 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9) +
                   (int)ceil(pow(10, len));
           i++) {
        if ((i - num) % (int)ceil(pow(10, len)) == 0) {
          num = i;
          break;
        }
      }
    cout << num << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
IAO'089


(G.2) Fast Input

1
IAO'31178


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dominant[5005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    string s; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> s; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    int len = s.length() - 4; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    int num = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 4; i < s.length(); i++) num = num * 10 + s[i] - '0'; /* line 12 slow_hit_count: 4, fast_hit_count: 6 */
    if (len > 3) { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
      if (num < 1989 + 10 * (((long long)ceil(pow(10, len - 1)) - 1) / 9)) /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
        num += (int)ceil(pow(10, len)); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9); /* line 17 slow_hit_count: 991, fast_hit_count: 0 */
           i < 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9) + /* line 18 slow_hit_count: 991, fast_hit_count: 0 */
                   (int)ceil(pow(10, len)); /* line 19 slow_hit_count: 991, fast_hit_count: 0 */
           i++) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        if ((i - num) % (int)ceil(pow(10, len)) == 0) { /* line 21 slow_hit_count: 991, fast_hit_count: 0 */
          num = i; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
          break; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    cout << num << '\n'; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the provided C code, let's go through the tasks step-by-step.

### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Compare Line-Level Hit Counts:**

- The crucial observation is that line 17 and its associated loop (lines 18-23) are hit significantly more in the slow input compared to the fast input. Specifically:
  - Line 17 is hit 991 times for the slow input and not at all for the fast input.
  - Line 21 is also hit 991 times, indicating a loop that is iterating extensively.

**2. Pinpoint Lines or Functions with More Hits:**

- The loop starting at line 17 is the primary source of the slowdown for the slow input. The loop is traversing a wide range of possible years, trying to find a matching condition.

**3. Infer Interactions with Data Structures and Constraints:**

- The loop is incrementing through a sequence of years and checking a condition in line 21. This approach becomes costly if the sequence is large.

### Phase 2: Derive Performance-Characterizing Invariants

**1. Generate Natural Language Statements:**

- **Invariant 1: "When the abbreviation has a long numeric part, the computation may slow down significantly."**
  - **Reasoning:** The length of the numeric part (calculated as `len`) determines the number of iterations the loop has to perform. If this numeric part is long, the loop in lines 17-21 runs many times, leading to slow execution.

**2. Avoid Specific Numeric Values:**

- **Invariant 2: "If the numeric part of the abbreviation is such that it results in a lengthy sequence of years to check, the program execution time may increase."**
  - **Reasoning:** The slow input `IAO'089` suggests that certain numeric configurations lead to a large search space for potential years.

**3. Ensure Broad Conditions Reflective of Constraints:**

- **Invariant 3: "For numeric suffixes resulting in a significant range of candidate years, performance can degrade due to the exhaustive search within that range."**
  - **Reasoning:** Given the constraint of `n <= 1000`, the slowdown is not necessarily from the number of abbreviations but the specific years searched in each abbreviation.

### Conclusion

The slowdown in the provided C program is mainly due to the lengthy loop iterations triggered by specific numeric suffixes in the abbreviation. When this suffix results in a large range of candidate years to verify, the program's performance can degrade. This happens regardless of the number of abbreviations (`n`) since the issue is with how some individual abbreviations are processed.

By focusing on these conditions, we can derive performance-characterizing invariants that help anticipate when and why the code might slow down, offering insight into potential optimizations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants described previously, we will implement the following checks in C++:

### Invariant Checkers

1. **Invariant 1:** When the abbreviation has a long numeric part, the computation may slow down significantly.

   ```cpp
   void check_long_numeric_part(int len) {
       if (len > 3) {  // Consider a significant length as a threshold
           cerr << "Warning: Performance bottleneck condition triggered - long numeric part" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2:** If the numeric part of the abbreviation is such that it results in a lengthy sequence of years to check, the program execution time may increase.

   ```cpp
   void check_lengthy_year_sequence(int len, int num) {
       int baseYear = 1989;
       int rangeLimit = baseYear + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9);
       if (num < rangeLimit) {
           cerr << "Warning: Performance bottleneck condition triggered - lengthy year sequence" << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checkers into the original C++ program, ensuring they are placed at strategic points to catch bottlenecks before the main computation:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_long_numeric_part(int len) {
    if (len > 3) {  // Check for long numeric parts, as they can cause slowdown
        cerr << "Warning: Performance bottleneck condition triggered - long numeric part" << endl;
        abort();
    }
}

void check_lengthy_year_sequence(int len, int num) {
    int baseYear = 1989;
    int rangeLimit = baseYear + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9);
    if (num < rangeLimit) {  // Check if the year sequence is lengthy, which can slow down the computation
        cerr << "Warning: Performance bottleneck condition triggered - lengthy year sequence" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    while (n--) {
        string s;
        cin >> s;
        int len = s.length() - 4;
        int num = 0;
        for (int i = 4; i < s.length(); i++) num = num * 10 + s[i] - '0';
        
        // Insert checks based on the inferred invariants
        check_long_numeric_part(len);
        check_lengthy_year_sequence(len, num);
        
        if (len > 3) {
            if (num < 1989 + 10 * (((long long)ceil(pow(10, len - 1)) - 1) / 9))
                num += (int)ceil(pow(10, len));
        } else
            for (int i = 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9); 
                 i < 1989 + 10 * ((int)(ceil(pow(10, len - 1)) - 1) / 9) + 
                 (int)ceil(pow(10, len)); 
                 i++) {
                if ((i - num) % (int)ceil(pow(10, len)) == 0) {
                    num = i;
                    break;
                }
            }
        cout << num << '\n';
    }
    return 0;
}
```

### Explanation

- **`check_long_numeric_part`** is called after determining the length of the numeric part, ensuring we catch potential slowdowns due to long numeric strings.
  
- **`check_lengthy_year_sequence`** is called after parsing the numeric portion to identify cases where the iteration might become extensive.

This instrumented code is designed to catch and abort execution when it detects potential performance bottlenecks, providing a useful tool for testing and optimization in development environments.

