system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int findYear(string abbr) {
  int result;
  unordered_set<int> yearFound;
  int year = 0;
  for (int i = 1; i <= abbr.length(); ++i) {
    string abr = abbr.substr(abbr.length() - i);
    string nabr;
    if (abr.length() < 4) {
      for (int n = 1989; 1; ++n) {
        string ns = to_string(n);
        nabr = ns.substr(0, 4 - abr.length()) + abr;
        year = atoi(nabr.c_str());
        if (year >= 1989 && yearFound.count(year) == 0) {
          goto next;
        }
      }
    }
    year = atoi(abr.c_str());
    if (yearFound.count(year) == 0 && year >= 1989) {
      goto next;
    }
    for (int x = 1; 1; ++x) {
      abr = to_string(x) + abr;
      year = atoi(abr.c_str());
      if (yearFound.count(year) == 0 && year >= 1989) {
        goto next;
      }
    }
  next:
    yearFound.insert(year);
    continue;
  }
  result = year;
  return result;
}
int main() {
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    string abbr;
    cin >> abbr;
    int year = findYear(abbr.substr(4));
    cout << year << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
IAO'0
IAO'00
IAO'000
IAO'0000
IAO'00000
IAO'000000
IAO'0000000
IAO'00000000
IAO'000000000


(G.2) Fast Input

2
IAO'0
IAO'00


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int findYear(string abbr) { /* line 3 slow_hit_count: 9, fast_hit_count: 2 */
  int result; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  unordered_set<int> yearFound; /* line 5 slow_hit_count: 9, fast_hit_count: 2 */
  int year = 0; /* line 6 slow_hit_count: 9, fast_hit_count: 2 */
  for (int i = 1; i <= abbr.length(); ++i) { /* line 7 slow_hit_count: 54, fast_hit_count: 5 */
    string abr = abbr.substr(abbr.length() - i); /* line 8 slow_hit_count: 90, fast_hit_count: 6 */
    string nabr; /* line 9 slow_hit_count: 90, fast_hit_count: 6 */
    if (abr.length() < 4) { /* line 10 slow_hit_count: 45, fast_hit_count: 3 */
      for (int n = 1989; 1; ++n) { /* line 11 slow_hit_count: 24, fast_hit_count: 3 */
        string ns = to_string(n); /* line 12 slow_hit_count: 7198, fast_hit_count: 16 */
        nabr = ns.substr(0, 4 - abr.length()) + abr; /* line 13 slow_hit_count: 7198, fast_hit_count: 16 */
        year = atoi(nabr.c_str()); /* line 14 slow_hit_count: 7198, fast_hit_count: 16 */
        if (year >= 1989 && yearFound.count(year) == 0) { /* line 15 slow_hit_count: 7198, fast_hit_count: 16 */
          goto next; /* line 16 slow_hit_count: 24, fast_hit_count: 3 */
        } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 18 slow_hit_count: 7174, fast_hit_count: 13 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    year = atoi(abr.c_str()); /* line 20 slow_hit_count: 21, fast_hit_count: 0 */
    if (yearFound.count(year) == 0 && year >= 1989) { /* line 21 slow_hit_count: 21, fast_hit_count: 0 */
      goto next; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    for (int x = 1; 1; ++x) { /* line 24 slow_hit_count: 21, fast_hit_count: 0 */
      abr = to_string(x) + abr; /* line 25 slow_hit_count: 21, fast_hit_count: 0 */
      year = atoi(abr.c_str()); /* line 26 slow_hit_count: 21, fast_hit_count: 0 */
      if (yearFound.count(year) == 0 && year >= 1989) { /* line 27 slow_hit_count: 21, fast_hit_count: 0 */
        goto next; /* line 28 slow_hit_count: 21, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  next: /* line 31 slow_hit_count: 45, fast_hit_count: 3 */
    yearFound.insert(year); /* line 32 slow_hit_count: 45, fast_hit_count: 3 */
    continue; /* line 33 slow_hit_count: 45, fast_hit_count: 3 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  result = year; /* line 35 slow_hit_count: 9, fast_hit_count: 2 */
  return result; /* line 36 slow_hit_count: 18, fast_hit_count: 4 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 41 slow_hit_count: 10, fast_hit_count: 3 */
    string abbr; /* line 42 slow_hit_count: 18, fast_hit_count: 4 */
    cin >> abbr; /* line 43 slow_hit_count: 9, fast_hit_count: 2 */
    int year = findYear(abbr.substr(4)); /* line 44 slow_hit_count: 9, fast_hit_count: 2 */
    cout << year << endl; /* line 45 slow_hit_count: 9, fast_hit_count: 2 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts provided, the following observations can be made:

1. **Lines 12-15**: These lines are executed significantly more often for the slow input compared to the fast input. This portion of the code is generating years starting from 1989 and checking if they match the abbreviation pattern. The inefficiency here is due to the linear search for a matching year, which can take an excessive number of iterations for certain patterns, particularly those with leading zeros like `'0000000'`.

2. **Lines 24-27**: These lines do not execute for the fast input but are executed for the slow input. This indicates that for certain abbreviations, especially those with leading zeros, the program enters a loop where it prepends numbers to the abbreviation in an attempt to find a valid year. This operation can be costly when the number of iterations increases, as is likely the case with long sequences of zeros.

3. **Line 7**: The loop that iterates over all possible suffix lengths of the abbreviation string also contributes to the inefficiency, especially since it leads to the repeated execution of the costly operations highlighted above.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant for Abbreviations with Leading Zeros**:
   - **Natural Language Description**: "When the abbreviation has leading zeros, the program may enter a computationally expensive loop to generate valid years, significantly slowing down the execution."
   - This is because such abbreviations force the code to explore a larger search space as it attempts to find the first possible year.

2. **Invariant for Abbreviations Requiring Year Generation**:
   - **Natural Language Description**: "If the abbreviation requires generating years from 1989 onwards to find a match, particularly when the suffix length is less than four digits, the performance may degrade due to the high number of iterations required."
   - This is evident from the excessive hit counts on lines 12-15 for the slow input, which suggests that the linear search for years is costly.

3. **Invariant for Extremely Long Abbreviations**:
   - **Natural Language Description**: "When the abbreviation length approaches or exceeds the typical year suffix length (i.e., more than four characters), the code may attempt to prepend numbers in a loop, causing a dramatic increase in computation time."
   - This invariant highlights the inefficiency when the algorithm attempts to match very long strings of digits to a valid year, as seen in lines 24-27.

These invariants help in understanding under what conditions the program tends to slow down and can guide optimizations or input handling strategies to mitigate such inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

We have previously identified three performance-characterizing invariants:

1. **Invariant for Abbreviations with Leading Zeros**: Check if the abbreviation has leading zeros and if so, it may lead to a performance bottleneck.
2. **Invariant for Abbreviations Requiring Year Generation**: Check if the abbreviation requires generating years from 1989 onwards, especially when the suffix length is less than four digits.
3. **Invariant for Extremely Long Abbreviations**: Check if the abbreviation length approaches or exceeds a typical year suffix length, which could degrade performance.

Below is the C++ code implementing these invariants:

```cpp
void check_leading_zeros_invariant(const string& abbr) {
    if (!abbr.empty() && abbr[0] == '0') {
        cerr << "Warning: Performance bottleneck condition triggered due to leading zeros!" << endl;
        abort();
    }
}

void check_year_generation_invariant(int suffix_length) {
    if (suffix_length < 4) {
        cerr << "Warning: Performance bottleneck condition triggered due to year generation!" << endl;
        abort();
    }
}

void check_long_abbreviation_invariant(int abbr_length) {
    if (abbr_length > 4) {
        cerr << "Warning: Performance bottleneck condition triggered due to long abbreviation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Code

The original code will be modified to include these checkers at appropriate points, ensuring checks are conducted before entering potentially expensive loops or operations.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_leading_zeros_invariant(const string& abbr) {
    if (!abbr.empty() && abbr[0] == '0') {
        cerr << "Warning: Performance bottleneck condition triggered due to leading zeros!" << endl;
        abort();
    }
}

void check_year_generation_invariant(int suffix_length) {
    if (suffix_length < 4) {
        cerr << "Warning: Performance bottleneck condition triggered due to year generation!" << endl;
        abort();
    }
}

void check_long_abbreviation_invariant(int abbr_length) {
    if (abbr_length > 4) {
        cerr << "Warning: Performance bottleneck condition triggered due to long abbreviation!" << endl;
        abort();
    }
}

int findYear(string abbr) {
    int result;
    unordered_set<int> yearFound;
    int year = 0;

    // Check for long abbreviation invariant
    check_long_abbreviation_invariant(abbr.length());

    for (int i = 1; i <= abbr.length(); ++i) {
        string abr = abbr.substr(abbr.length() - i);
        string nabr;

        // Check for leading zeros invariant
        check_leading_zeros_invariant(abr);

        if (abr.length() < 4) {
            // Check for year generation invariant
            check_year_generation_invariant(abr.length());

            for (int n = 1989; 1; ++n) {
                string ns = to_string(n);
                nabr = ns.substr(0, 4 - abr.length()) + abr;
                year = atoi(nabr.c_str());
                if (year >= 1989 && yearFound.count(year) == 0) {
                    goto next;
                }
            }
        }
        year = atoi(abr.c_str());
        if (yearFound.count(year) == 0 && year >= 1989) {
            goto next;
        }
        for (int x = 1; 1; ++x) {
            abr = to_string(x) + abr;
            year = atoi(abr.c_str());
            if (yearFound.count(year) == 0 && year >= 1989) {
                goto next;
            }
        }
    next:
        yearFound.insert(year);
        continue;
    }
    result = year;
    return result;
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        string abbr;
        cin >> abbr;
        int year = findYear(abbr.substr(4));
        cout << year << endl;
    }
    return 0;
}
```

### Explanation of Integration

- **Leading Zeros Check**: This check is placed inside the loop for each suffix length, ensuring that if an abbreviation has leading zeros, it will trigger the warning.
- **Year Generation Check**: This check is placed before the nested loop that generates years, ensuring it only checks suffixes that require this generation.
- **Long Abbreviation Check**: This check is placed at the start of `findYear` to catch long abbreviations before other processing occurs.

These checks are strategically integrated to avoid excessive overhead and ensure that performance bottlenecks are detected early.

