system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const long long inf = 1e18;
int va[N], x, y, z, n;
long long getans(long long h) {
  long long ans = 0, a = 0, b = 0;
  for (int i = 1; i <= n; i++) {
    if (va[i] > h)
      a += va[i] - h;
    else
      b += h - va[i];
  }
  ans += 1ll * z * min(a, b);
  if (a > b)
    ans += 1ll * y * (a - b);
  else
    ans += 1ll * x * (b - a);
  return ans;
}
int main() {
  ios::sync_with_stdio(false);
  cin >> n;
  cin >> x >> y >> z;
  z = min(z, x + y);
  for (int i = 1; i <= n; i++) cin >> va[i];
  int l = 0, r = 1e9 + 7;
  while (r - l > 5) {
    int midl = l + (r - l + 1) / 3 - 1, midr = r - (r - l + 1) / 3 + 1;
    if (getans(midl) < getans(midr))
      r = midr;
    else
      l = midl;
  }
  long long ans = inf;
  for (int i = l; i <= r; i++) ans = min(getans(i), ans);
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 96 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int va[N], x, y, z, n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long getans(long long h) { /* line 6 slow_hit_count: 104, fast_hit_count: 104 */
  long long ans = 0, a = 0, b = 0; /* line 7 slow_hit_count: 104, fast_hit_count: 104 */
  for (int i = 1; i <= n; i++) { /* line 8 slow_hit_count: 10504, fast_hit_count: 1144 */
    if (va[i] > h) /* line 9 slow_hit_count: 10400, fast_hit_count: 1040 */
      a += va[i] - h; /* line 10 slow_hit_count: 727, fast_hit_count: 61 */
    else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      b += h - va[i]; /* line 12 slow_hit_count: 9673, fast_hit_count: 979 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  ans += 1ll * z * min(a, b); /* line 14 slow_hit_count: 104, fast_hit_count: 104 */
  if (a > b) /* line 15 slow_hit_count: 104, fast_hit_count: 104 */
    ans += 1ll * y * (a - b); /* line 16 slow_hit_count: 1, fast_hit_count: 7 */
  else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    ans += 1ll * x * (b - a); /* line 18 slow_hit_count: 103, fast_hit_count: 97 */
  return ans; /* line 19 slow_hit_count: 104, fast_hit_count: 104 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> y >> z; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  z = min(z, x + y); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> va[i]; /* line 26 slow_hit_count: 101, fast_hit_count: 11 */
  int l = 0, r = 1e9 + 7; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  while (r - l > 5) { /* line 28 slow_hit_count: 50, fast_hit_count: 50 */
    int midl = l + (r - l + 1) / 3 - 1, midr = r - (r - l + 1) / 3 + 1; /* line 29 slow_hit_count: 49, fast_hit_count: 49 */
    if (getans(midl) < getans(midr)) /* line 30 slow_hit_count: 49, fast_hit_count: 49 */
      r = midr; /* line 31 slow_hit_count: 44, fast_hit_count: 47 */
    else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      l = midl; /* line 33 slow_hit_count: 5, fast_hit_count: 2 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = inf; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = l; i <= r; i++) ans = min(getans(i), ans); /* line 36 slow_hit_count: 7, fast_hit_count: 7 */
  cout << ans << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, let's follow the outlined phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The `getans` function is a critical area, with significant differences in hit counts between the slow and fast inputs:
     - **Line 8**: `for (int i = 1; i <= n; i++)`: This loop iterates over all pillars.
     - **Line 10** and **Line 12**: These lines are hit many times, indicating calculations for each pillar to adjust to a certain height (`h`).
   - The while loop in the main function (**Lines 28-33**) shows constant iterations for both inputs, but the cost arises primarily from repeated calls to `getans`.

2. **Pinpoint Lines/Functions with More Hits:**
   - `getans` function has significantly more hits for the slow input, especially the loop over pillars and the operations to adjust heights (Lines 8-12).
   - This suggests that the cost of operations in `getans`, particularly due to large differences between actual pillar heights and target height `h`, contributes to slowness.

3. **Inferences:**
   - The significant number of iterations in `getans` suggests that it is repeatedly calculating potentially costly operations on the heights of the pillars.
   - This behavior indicates an increased computation cost per iteration, heavily dependent on the input heights and the chosen midpoints in the search for optimal height.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Differences in Pillar Heights**
   - **Natural Language Description:** "If there is a large disparity among initial pillar heights, the repeated calculations to bring all pillars to uniform height can cause significant slowdowns."
   - This invariant captures the condition where large differences in initial heights require extensive adjustments, increasing the cost and slowing down the program.

2. **Invariant 2: Frequency of Costly Operations**
   - **Natural Language Description:** "When the height adjustment operations are frequently invoked due to suboptimal intermediate heights in the ternary search, the overall execution time increases."
   - This invariant describes how the choice of intermediate heights significantly impacts the number of adjustments needed, hence affecting performance.

3. **Invariant 3: Inefficient Search Range Narrowing**
   - **Natural Language Description:** "If the ternary search doesn’t quickly narrow down the search range to optimal heights, the `getans` function gets called excessively, complicating performance."
   - This invariant underlines the relationship between the efficiency of the search algorithm in narrowing the height range and overall performance, especially when the range is large.

### Summary

The primary performance bottleneck in the program stems from the `getans` function repeatedly calculating operations over the entire set of pillars, exacerbated by large disparities in height and an inefficient narrowing of the search range for the target height. The derived invariants highlight conditions related to input characteristics and the efficiency of the search mechanism that can trigger slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language invariants we previously derived, here are the corresponding C++ checker code snippets:

```cpp
// Invariant 1: Large disparity among initial pillar heights
void check_height_disparity_invariant(const vector<int>& heights) {
    int minHeight = *min_element(heights.begin(), heights.end());
    int maxHeight = *max_element(heights.begin(), heights.end());
    if (maxHeight - minHeight > 1000000) { // Arbitrary threshold indicating large disparity
        cerr << "Warning: Performance bottleneck condition triggered - large height disparity!" << endl;
        abort();
    }
}

// Invariant 2: Frequent costly operations due to intermediate heights
void check_costly_operations_invariant(long long a, long long b) {
    if (abs(a - b) > 1000000) { // Arbitrary threshold indicating high cost disparity
        cerr << "Warning: Performance bottleneck condition triggered - frequent costly operations!" << endl;
        abort();
    }
}

// Invariant 3: Inefficient search range narrowing
void check_search_range_invariant(int initialRange) {
    if (initialRange > 1000000000) { // Arbitrary large range threshold
        cerr << "Warning: Performance bottleneck condition triggered - inefficient search range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

Now, let's integrate these checkers into the original C++ code. The integration includes placing checks at appropriate points without introducing significant overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;
const long long inf = 1e18;
int va[N], x, y, z, n;

// Invariant 1: Large disparity among initial pillar heights
void check_height_disparity_invariant(const vector<int>& heights) {
    int minHeight = *min_element(heights.begin(), heights.end());
    int maxHeight = *max_element(heights.begin(), heights.end());
    if (maxHeight - minHeight > 1000000) { // Arbitrary threshold indicating large disparity
        cerr << "Warning: Performance bottleneck condition triggered - large height disparity!" << endl;
        abort();
    }
}

// Invariant 2: Frequent costly operations due to intermediate heights
void check_costly_operations_invariant(long long a, long long b) {
    if (abs(a - b) > 1000000) { // Arbitrary threshold indicating high cost disparity
        cerr << "Warning: Performance bottleneck condition triggered - frequent costly operations!" << endl;
        abort();
    }
}

// Invariant 3: Inefficient search range narrowing
void check_search_range_invariant(int initialRange) {
    if (initialRange > 1000000000) { // Arbitrary large range threshold
        cerr << "Warning: Performance bottleneck condition triggered - inefficient search range!" << endl;
        abort();
    }
}

long long getans(long long h) {
    long long ans = 0, a = 0, b = 0;
    for (int i = 1; i <= n; i++) {
        if (va[i] > h)
            a += va[i] - h;
        else
            b += h - va[i];
    }
    // Checking invariant 2: Costly operation conditions
    check_costly_operations_invariant(a, b);

    ans += 1ll * z * min(a, b);
    if (a > b)
        ans += 1ll * y * (a - b);
    else
        ans += 1ll * x * (b - a);
    return ans;
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n;
    cin >> x >> y >> z;
    z = min(z, x + y);

    vector<int> heights(n);
    for (int i = 0; i < n; i++) cin >> va[i];
    
    // Convert input heights into a vector for easier processing
    for (int i = 0; i < n; ++i) heights[i] = va[i];

    // Check for large height disparity (Invariant 1)
    check_height_disparity_invariant(heights);

    int l = 0, r = 1e9 + 7;
    
    // Check initial range for inefficiency (Invariant 3)
    check_search_range_invariant(r - l);

    while (r - l > 5) {
        int midl = l + (r - l + 1) / 3 - 1, midr = r - (r - l + 1) / 3 + 1;
        if (getans(midl) < getans(midr))
            r = midr;
        else
            l = midl;
    }

    long long ans = inf;
    for (int i = l; i <= r; i++) ans = min(getans(i), ans);
    cout << ans << endl;
}
```

### Explanation of Integration
1. **Invariant 1** is checked after reading the input heights, providing an early detection of potential large disparities.
2. **Invariant 2** is checked within the `getans` function where the operation costs are calculated, ensuring detection of costly operations while iterating over pillars.
3. **Invariant 3** is checked immediately after setting the initial search range, ensuring efficient narrowing of the search space for height optimization.

