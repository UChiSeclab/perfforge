system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize(3, "Ofast", "inline")
using namespace std;
const int N = 100010;
const int mod = 998244353;
const double PI = 3.1415926535898;
int n;
long long a, r, m;
long long h[N];
inline long long calc(long long x) {
  long long p = 0, q = 0;
  for (int i = 1; i <= n; ++i) {
    if (h[i] <= x)
      p += x - h[i];
    else
      q += h[i] - x;
  }
  return min(p * a + q * r,
             min(p, q) * m + (p - min(p, q)) * a + (q - min(p, q)) * r);
}
int main() {
  scanf("%d %lld %lld %lld", &n, &a, &r, &m);
  for (int i = 1; i <= n; ++i) {
    scanf("%lld", &h[i]);
  }
  long long l = 0, r = 2000000000, mid, ret = 0;
  for (int t = 1; t <= 233; ++t) {
    mid = (l + r) >> 1;
    if (calc(mid) < calc((mid + r) >> 1))
      r = (mid + r) >> 1;
    else
      l = mid;
  }
  printf("%lld\n", calc(l));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 51 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 7 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize(3, "Ofast", "inline") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100010; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = 3.1415926535898; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long a, r, m; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long h[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
inline long long calc(long long x) { /* line 10 slow_hit_count: 467, fast_hit_count: 467 */
  long long p = 0, q = 0; /* line 11 slow_hit_count: 467, fast_hit_count: 467 */
  for (int i = 1; i <= n; ++i) { /* line 12 slow_hit_count: 47167, fast_hit_count: 5137 */
    if (h[i] <= x) /* line 13 slow_hit_count: 46700, fast_hit_count: 4670 */
      p += x - h[i]; /* line 14 slow_hit_count: 37241, fast_hit_count: 3317 */
    else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      q += h[i] - x; /* line 16 slow_hit_count: 9459, fast_hit_count: 1353 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return min(p * a + q * r, /* line 18 slow_hit_count: 934, fast_hit_count: 934 */
             min(p, q) * m + (p - min(p, q)) * a + (q - min(p, q)) * r); /* line 19 slow_hit_count: 467, fast_hit_count: 467 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %lld %lld %lld", &n, &a, &r, &m); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 23 slow_hit_count: 101, fast_hit_count: 11 */
    scanf("%lld", &h[i]); /* line 24 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  long long l = 0, r = 2000000000, mid, ret = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (int t = 1; t <= 233; ++t) { /* line 27 slow_hit_count: 234, fast_hit_count: 234 */
    mid = (l + r) >> 1; /* line 28 slow_hit_count: 233, fast_hit_count: 233 */
    if (calc(mid) < calc((mid + r) >> 1)) /* line 29 slow_hit_count: 233, fast_hit_count: 233 */
      r = (mid + r) >> 1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      l = mid; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", calc(l)); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the given C code, we need to examine the line-level hit counts for both fast and slow inputs, as well as consider how these lines interact with data structures, loops, and the input constraints. Let us go through the phases to identify and describe the performance-characterizing invariants.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Comparison of Line Hit Counts:**
   - **Line 12:** The loop iterating over the pillars has a significantly higher hit count for the slow input (47,167) compared to the fast input (5,137). This indicates that this loop runs many times, likely due to its interaction with the `calc` function being called repeatedly.
   - **Line 14:** This line is executed when the current pillar height is less than or equal to the target height `x`. It contributes to the cost calculation of adding bricks.
   - **Line 16:** This line is executed when the current pillar height is greater than the target height `x`. It contributes to the cost calculation of removing bricks.
   - **Line 18-19:** These lines calculate the total cost for a given target height `x`. They have the same hit count as the `calc` function calls.

2. **Interactions with Data Structures and Loops:**
   - The main loop (line 27) runs a fixed number of times (233), but within it, the `calc` function is called twice per iteration, and each call processes all pillars (`n` iterations in line 12). This implies that the slow performance is heavily dependent on the operations inside `calc`.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants that describe conditions under which the code becomes slow:

1. **Pillar Height Distribution:**
   - "If there is a large variance or imbalance in the initial heights of the pillars, the program may need to perform many costly operations to equalize them, leading to slow execution."

2. **Cost Balance Between Operations:**
   - "When the cost of adding or removing bricks (`A` or `R`) is significantly high compared to moving bricks (`M`), the algorithm may end up executing many more operations to reach an optimal state, thereby slowing down."

3. **Multiple Intermediate Calculations:**
   - "If the search for the optimal uniform height requires many intermediate calculations across a wide range of possible heights, the program may repeatedly iterate over all pillars, causing slowdowns."

4. **High Number of Pillars:**
   - "As the number of pillars approaches the upper limit of constraints (e.g., `n` close to 100,000), the nested operations in the `calc` function grow significantly, which can lead to performance degradation."

These invariants should guide future performance testing and optimization efforts, providing insight into conditions that typically lead to slow execution in the given program.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here, we translate the natural language invariants into C++ runtime checks that will be used to diagnose performance issues:

1. **Pillar Height Distribution:**
   ```cpp
   void check_height_variance(const vector<long long>& heights) {
       long long min_height = *min_element(heights.begin(), heights.end());
       long long max_height = *max_element(heights.begin(), heights.end());
       if (max_height - min_height > 1000000) { // Arbitrary threshold for large variance
           cerr << "Warning: Performance bottleneck condition triggered due to high variance in pillar heights!" << endl;
           abort();
       }
   }
   ```

2. **Cost Balance Between Operations:**
   ```cpp
   void check_cost_balance(long long a, long long r, long long m) {
       if (a > 10 * m || r > 10 * m) { // Example threshold for imbalance
           cerr << "Warning: Performance bottleneck condition triggered due to cost imbalance!" << endl;
           abort();
       }
   }
   ```

3. **Multiple Intermediate Calculations:**
   ```cpp
   void check_intermediate_calculations(long long n, int iterations) {
       if (n * iterations > 1000000) { // Arbitrary threshold for excessive calculations
           cerr << "Warning: Performance bottleneck due to excessive intermediate calculations!" << endl;
           abort();
       }
   }
   ```

4. **High Number of Pillars:**
   ```cpp
   void check_number_of_pillars(int n) {
       if (n > 100000) { // Threshold close to the constraint limit
           cerr << "Warning: Performance bottleneck due to large number of pillars!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Code

Here is the instrumented C++ code with the checks integrated:

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize(3, "Ofast", "inline")
using namespace std;
const int N = 100010;
const int mod = 998244353;
const double PI = 3.1415926535898;
int n;
long long a, r, m;
long long h[N];

inline long long calc(long long x) {
    long long p = 0, q = 0;
    for (int i = 1; i <= n; ++i) {
        if (h[i] <= x)
            p += x - h[i];
        else
            q += h[i] - x;
    }
    return min(p * a + q * r,
               min(p, q) * m + (p - min(p, q)) * a + (q - min(p, q)) * r);
}

// Checkers based on the performance-characterizing invariants

void check_height_variance(const vector<long long>& heights) {
    long long min_height = *min_element(heights.begin(), heights.end());
    long long max_height = *max_element(heights.begin(), heights.end());
    if (max_height - min_height > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high variance in pillar heights!" << endl;
        abort();
    }
}

void check_cost_balance(long long a, long long r, long long m) {
    if (a > 10 * m || r > 10 * m) {
        cerr << "Warning: Performance bottleneck condition triggered due to cost imbalance!" << endl;
        abort();
    }
}

void check_intermediate_calculations(long long n, int iterations) {
    if (n * iterations > 1000000) {
        cerr << "Warning: Performance bottleneck due to excessive intermediate calculations!" << endl;
        abort();
    }
}

void check_number_of_pillars(int n) {
    if (n > 100000) {
        cerr << "Warning: Performance bottleneck due to large number of pillars!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %lld %lld %lld", &n, &a, &r, &m);
    
    // Checking for number of pillars
    check_number_of_pillars(n);

    vector<long long> heights(n);
    for (int i = 1; i <= n; ++i) {
        scanf("%lld", &h[i]);
        heights[i-1] = h[i];
    }
    
    // Checking height variance
    check_height_variance(heights);
    
    // Checking cost balance
    check_cost_balance(a, r, m);
    
    long long l = 0, r = 2000000000, mid, ret = 0;

    // Checking for excessive intermediate calculations
    check_intermediate_calculations(n, 233);

    for (int t = 1; t <= 233; ++t) {
        mid = (l + r) >> 1;
        if (calc(mid) < calc((mid + r) >> 1))
            r = (mid + r) >> 1;
        else
            l = mid;
    }
    printf("%lld\n", calc(l));
    return 0;
}
```

### Explanation
- **Height Variance Check:** After reading the heights, we check the variance to catch cases where substantial height differences might cause performance issues.
- **Cost Balance Check:** Checks if either `A` or `R` is disproportionately higher than `M`, which can make operations expensive.
- **Intermediate Calculations Check:** Placed before the main loop to ensure we're not making excessive calculations due to high `n` or iterations.
- **Number of Pillars Check:** Ensures `n` is within a reasonable limit to avoid excessive overhead.

These checks will aid in identifying and diagnosing potential performance bottlenecks during execution.

