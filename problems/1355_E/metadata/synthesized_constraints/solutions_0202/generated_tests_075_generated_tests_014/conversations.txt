system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int h[100005];
int n, a, r, m;
long long costMv(long long x, long long y) { return x * m + y * (a + r); }
long long cost(int target) {
  long long dp = 0;
  long long dm = 0;
  for (int(i) = 0; (i) < (n); (i)++) {
    if (h[i] > target) {
      dp += h[i] - target;
    }
    if (h[i] < target) {
      dm += target - h[i];
    }
  }
  long long mv = min(dp, dm);
  long long ans = (dp - mv) * r + (dm - mv) * a;
  long long l = 0, r = mv;
  while (r - l > 2) {
    long long m1 = l + (r - l) / 3;
    long long m2 = r - (r - l) / 3;
    if (costMv(m1, mv - m1) > costMv(m2, mv - m2)) {
      l = m1;
    } else {
      r = m2;
    }
  }
  long long tmp = costMv(l, mv - l);
  for (long long i = l; i <= r; i++) {
    tmp = min(tmp, costMv(i, mv - i));
  }
  ans += tmp;
  return ans;
}
int main(void) {
  scanf("%d%d%d%d", &n, &a, &r, &m);
  for (int(i) = 0; (i) < (n); (i)++) {
    scanf("%d", &h[i]);
  }
  int l = 0, r = 1000000000;
  while (r - l > 2) {
    int m1 = l + (r - l) / 3;
    int m2 = r - (r - l) / 3;
    if (cost(m1) > cost(m2)) {
      l = m1;
    } else {
      r = m2;
    }
  }
  long long ans = cost(l);
  for (int(i) = (l); (i) < (r + 1); (i)++) {
    ans = min(ans, cost(i));
  }
  printf("%lld\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 96 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int h[100005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, a, r, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long costMv(long long x, long long y) { return x * m + y * (a + r); } /* line 5 slow_hit_count: 1062, fast_hit_count: 445 */
long long cost(int target) { /* line 6 slow_hit_count: 104, fast_hit_count: 104 */
  long long dp = 0; /* line 7 slow_hit_count: 104, fast_hit_count: 104 */
  long long dm = 0; /* line 8 slow_hit_count: 104, fast_hit_count: 104 */
  for (int(i) = 0; (i) < (n); (i)++) { /* line 9 slow_hit_count: 10504, fast_hit_count: 1144 */
    if (h[i] > target) { /* line 10 slow_hit_count: 10400, fast_hit_count: 1040 */
      dp += h[i] - target; /* line 11 slow_hit_count: 747, fast_hit_count: 70 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (h[i] < target) { /* line 13 slow_hit_count: 10400, fast_hit_count: 1040 */
      dm += target - h[i]; /* line 14 slow_hit_count: 9620, fast_hit_count: 956 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  long long mv = min(dp, dm); /* line 17 slow_hit_count: 104, fast_hit_count: 104 */
  long long ans = (dp - mv) * r + (dm - mv) * a; /* line 18 slow_hit_count: 104, fast_hit_count: 104 */
  long long l = 0, r = mv; /* line 19 slow_hit_count: 104, fast_hit_count: 104 */
  while (r - l > 2) { /* line 20 slow_hit_count: 502, fast_hit_count: 204 */
    long long m1 = l + (r - l) / 3; /* line 21 slow_hit_count: 398, fast_hit_count: 100 */
    long long m2 = r - (r - l) / 3; /* line 22 slow_hit_count: 398, fast_hit_count: 100 */
    if (costMv(m1, mv - m1) > costMv(m2, mv - m2)) { /* line 23 slow_hit_count: 398, fast_hit_count: 100 */
      l = m1; /* line 24 slow_hit_count: 398, fast_hit_count: 100 */
    } else { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      r = m2; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  long long tmp = costMv(l, mv - l); /* line 29 slow_hit_count: 104, fast_hit_count: 104 */
  for (long long i = l; i <= r; i++) { /* line 30 slow_hit_count: 266, fast_hit_count: 245 */
    tmp = min(tmp, costMv(i, mv - i)); /* line 31 slow_hit_count: 162, fast_hit_count: 141 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  ans += tmp; /* line 33 slow_hit_count: 104, fast_hit_count: 104 */
  return ans; /* line 34 slow_hit_count: 104, fast_hit_count: 104 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d%d", &n, &a, &r, &m); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = 0; (i) < (n); (i)++) { /* line 38 slow_hit_count: 101, fast_hit_count: 11 */
    scanf("%d", &h[i]); /* line 39 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  int l = 0, r = 1000000000; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  while (r - l > 2) { /* line 42 slow_hit_count: 51, fast_hit_count: 51 */
    int m1 = l + (r - l) / 3; /* line 43 slow_hit_count: 50, fast_hit_count: 50 */
    int m2 = r - (r - l) / 3; /* line 44 slow_hit_count: 50, fast_hit_count: 50 */
    if (cost(m1) > cost(m2)) { /* line 45 slow_hit_count: 50, fast_hit_count: 50 */
      l = m1; /* line 46 slow_hit_count: 6, fast_hit_count: 3 */
    } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      r = m2; /* line 48 slow_hit_count: 44, fast_hit_count: 47 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = cost(l); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = (l); (i) < (r + 1); (i)++) { /* line 52 slow_hit_count: 4, fast_hit_count: 4 */
    ans = min(ans, cost(i)); /* line 53 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify and describe performance-characterizing invariants for the given C code, we need to analyze the slow and fast input scenarios, focusing on the lines with notably higher hit counts in the slow case.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Line 9:** The loop iterating over the pillars has significantly more iterations (10,504 for slow vs. 1,144 for fast). This suggests that the number of times conditions on pillar heights are being evaluated is much higher in the slow input.
   - **Line 14:** The line `dm += target - h[i];` has a disproportionate increase in hits between slow and fast inputs (9,620 vs. 956), indicating that more pillars are below the target height, requiring bricks to be added more frequently.
   - **Lines 20-31:** These lines involve ternary search and evaluating potential height targets for minimizing cost. These lines are hit much more frequently during the slow run, indicating that the ternary search space is larger and more iterations are required.

2. **Data Structure Interaction:**
   - The main interaction is with the array `h` and how frequently the `cost` function is called and iterated over for each potential height target during the search process.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants:

1. **Invariant 1: High Variation in Pillar Heights**
   - If the initial pillar heights have a high variance, the number of operations (additions/removals) required increases significantly, as more adjustments are needed to equalize the pillar heights.
   - **Natural Language Description:** "When the initial pillar heights are highly varied, requiring significant adjustments to match a target height, the computation becomes costly due to numerous brick additions or removals."

2. **Invariant 2: Large Search Space for Target Heights**
   - When there is a wide range of potential target heights to evaluate (due to high variance in heights), the ternary search process becomes more extensive, leading to increased execution time.
   - **Natural Language Description:** "If the difference between the tallest and shortest pillars is large, the algorithm must evaluate more potential target heights, extending the search and increasing computation time."

3. **Invariant 3: Frequent Brick Movement or Adjustments**
   - If the cost of moving or adjusting bricks is relatively high compared to other operations, and many adjustments are needed, the overall computation cost increases.
   - **Natural Language Description:** "When a large number of brick movements or adjustments are needed due to cost constraints or initial height distribution, the overall performance degrades."

These invariants provide insight into the conditions under which the program's performance might degrade, based on input patterns and computational logic, without depending on specific numeric input values. These conditions help guide optimizations and testing strategies for similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: Sure, let's proceed with phase 3 and phase 4.

### Phase 3: Implement Checker Code in C++

We will write C++ code to check each of the performance-characterizing invariants we derived in Phase 2:

1. **Invariant 1: High Variation in Pillar Heights**
   ```cpp
   void check_high_variation_invariant(const vector<int>& heights) {
       int min_height = *min_element(heights.begin(), heights.end());
       int max_height = *max_element(heights.begin(), heights.end());
       if (max_height - min_height > 100000) {  // A suitable threshold can be determined based on experience or profiling.
           cerr << "Warning: Performance bottleneck due to high variation in pillar heights!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Large Search Space for Target Heights**
   ```cpp
   void check_large_search_space_invariant(int min_height, int max_height) {
       if (max_height - min_height > 100000) {  // Again, choose a threshold based on profiling or experience.
           cerr << "Warning: Performance bottleneck due to large search space for target heights!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Frequent Brick Movement or Adjustments**
   ```cpp
   void check_frequent_movements_invariant(long long dp, long long dm) {
       if (dp > 1000000 || dm > 1000000) {  // Arbitrary large threshold for demonstration.
           cerr << "Warning: Performance bottleneck due to frequent brick movements or adjustments!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Let's incorporate these checks into the C++ code at suitable points:

```cpp
#include <bits/stdc++.h>
using namespace std;
int h[100005];
int n, a, r, m;

// Check for high variation in initial pillar heights
void check_high_variation_invariant(const vector<int>& heights) {
    int min_height = *min_element(heights.begin(), heights.end());
    int max_height = *max_element(heights.begin(), heights.end());
    if (max_height - min_height > 100000) {
        cerr << "Warning: Performance bottleneck due to high variation in pillar heights!" << endl;
        abort();
    }
}

// Check for large search space for target heights
void check_large_search_space_invariant(int min_height, int max_height) {
    if (max_height - min_height > 100000) {
        cerr << "Warning: Performance bottleneck due to large search space for target heights!" << endl;
        abort();
    }
}

// Check for frequent brick movements or adjustments
void check_frequent_movements_invariant(long long dp, long long dm) {
    if (dp > 1000000 || dm > 1000000) {
        cerr << "Warning: Performance bottleneck due to frequent brick movements or adjustments!" << endl;
        abort();
    }
}

long long costMv(long long x, long long y) {
    return x * m + y * (a + r);
}

long long cost(int target) {
    long long dp = 0;
    long long dm = 0;
    for (int(i) = 0; (i) < (n); (i)++) {
        if (h[i] > target) {
            dp += h[i] - target;
        }
        if (h[i] < target) {
            dm += target - h[i];
        }
    }
    // Check for frequent movements condition
    check_frequent_movements_invariant(dp, dm);

    long long mv = min(dp, dm);
    long long ans = (dp - mv) * r + (dm - mv) * a;
    long long l = 0, r = mv;
    while (r - l > 2) {
        long long m1 = l + (r - l) / 3;
        long long m2 = r - (r - l) / 3;
        if (costMv(m1, mv - m1) > costMv(m2, mv - m2)) {
            l = m1;
        } else {
            r = m2;
        }
    }
    long long tmp = costMv(l, mv - l);
    for (long long i = l; i <= r; i++) {
        tmp = min(tmp, costMv(i, mv - i));
    }
    ans += tmp;
    return ans;
}

int main(void) {
    scanf("%d%d%d%d", &n, &a, &r, &m);
    vector<int> heights(n);
    for (int(i) = 0; (i) < (n); (i)++) {
        scanf("%d", &h[i]);
        heights[i] = h[i];
    }

    // Check for high variation in initial pillar heights
    check_high_variation_invariant(heights);

    int l = 0, r = 1000000000;
    while (r - l > 2) {
        int m1 = l + (r - l) / 3;
        int m2 = r - (r - l) / 3;
        if (cost(m1) > cost(m2)) {
            l = m1;
        } else {
            r = m2;
        }
    }
    long long ans = cost(l);
    for (int(i) = (l); (i) < (r + 1); (i)++) {
        ans = min(ans, cost(i));
    }

    // Check for large search space for target heights
    check_large_search_space_invariant(l, r);

    printf("%lld\n", ans);
}
```

### Comments on Placement:
- The **high variation** and **large search space** checks are placed after reading the input values, as they depend on initial conditions.
- The **frequent movements** check is placed within the `cost` function as it calculates the number of operations needed to equalize the pillar heights. This helps capture a condition that could lead to inefficient performance during execution.

