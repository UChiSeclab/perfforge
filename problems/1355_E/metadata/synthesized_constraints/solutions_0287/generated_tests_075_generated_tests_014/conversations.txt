system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
long long n, a, R, m, l, r, lmid, rmid, ans;
long long h[N];
long long calc(long long H) {
  long long less = 0, more = 0;
  for (long long i = 1; i <= n; i++) {
    if (h[i] > H) more += (h[i] - H);
    if (h[i] < H) less += (H - h[i]);
  }
  if (more > less)
    return (more - less) * R + less * m;
  else
    return (less - more) * a + more * m;
}
long long bin3() {
  l = 0, r = 1e9;
  ans = min(calc(l), calc(r));
  while (l <= r) {
    lmid = (l + r) / 2, rmid = (lmid + r) / 2;
    if (calc(lmid) > calc(rmid))
      l = lmid + 1;
    else
      r = rmid - 1;
    ans = min(ans, min(calc(lmid), calc(rmid)));
  }
  return ans;
}
signed main() {
  cin >> n >> a >> R >> m;
  m = min(m, a + R);
  for (long long i = 1; i <= n; i++) cin >> h[i];
  cout << bin3();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 96 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, a, R, m, l, r, lmid, rmid, ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long h[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long calc(long long H) { /* line 6 slow_hit_count: 258, fast_hit_count: 266 */
  long long less = 0, more = 0; /* line 7 slow_hit_count: 258, fast_hit_count: 266 */
  for (long long i = 1; i <= n; i++) { /* line 8 slow_hit_count: 26058, fast_hit_count: 2926 */
    if (h[i] > H) more += (h[i] - H); /* line 9 slow_hit_count: 25800, fast_hit_count: 2660 */
    if (h[i] < H) less += (H - h[i]); /* line 10 slow_hit_count: 25800, fast_hit_count: 2660 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (more > less) /* line 12 slow_hit_count: 258, fast_hit_count: 266 */
    return (more - less) * R + less * m; /* line 13 slow_hit_count: 3, fast_hit_count: 7 */
  else /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return (less - more) * a + more * m; /* line 15 slow_hit_count: 255, fast_hit_count: 259 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long bin3() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  l = 0, r = 1e9; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  ans = min(calc(l), calc(r)); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  while (l <= r) { /* line 20 slow_hit_count: 65, fast_hit_count: 67 */
    lmid = (l + r) / 2, rmid = (lmid + r) / 2; /* line 21 slow_hit_count: 64, fast_hit_count: 66 */
    if (calc(lmid) > calc(rmid)) /* line 22 slow_hit_count: 64, fast_hit_count: 66 */
      l = lmid + 1; /* line 23 slow_hit_count: 3, fast_hit_count: 1 */
    else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      r = rmid - 1; /* line 25 slow_hit_count: 61, fast_hit_count: 65 */
    ans = min(ans, min(calc(lmid), calc(rmid))); /* line 26 slow_hit_count: 64, fast_hit_count: 66 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> R >> m; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  m = min(m, a + R); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) cin >> h[i]; /* line 33 slow_hit_count: 101, fast_hit_count: 11 */
  cout << bin3(); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's analyze the provided code and input data to identify the performance bottlenecks and derive performance-characterizing invariants. The problem involves minimizing the cost of equalizing the height of pillars through operations with different costs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The `calc` function (lines 6-16) is called extensively, particularly the loop on line 8 iterates thousands of times for the slow input compared to the fast input.
   - The `bin3` function (lines 17-29) uses a ternary search to find the optimal height. This involves repeatedly calling `calc`, which, due to the high number of iterations in the loop, becomes a performance concern.

2. **Inference on Data Structures and Operations:**
   - The loop inside `calc` (line 8) iterates over each pillar height to determine how many bricks need to be added or removed.
   - The ternary search in `bin3` (line 20) heavily relies on the performance of `calc`. The repeated calls to `calc` are costly due to the loop iterating over all pillars for each potential height.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language invariants that characterize when the program may slow down:

1. **Invariant on Input Size and Iterations:**
   - **Natural Language Description:** "When the number of pillars is large, each calculation of potential equal heights involves looping through all pillars, significantly increasing execution time."
   - **Reasoning:** The loop inside the `calc` function iterates over every pillar height for each potential height checked by the binary search, leading to a quadratic time complexity relative to the number of pillars.

2. **Invariant on Cost Balancing:**
   - **Natural Language Description:** "High variability in pillar heights combined with costly operations (add, remove, move) induces more iterations in the search for the minimal cost, thus slowing down computation."
   - **Reasoning:** More diverse pillar heights require more complex balancing of operations (add, remove, move) to find the optimal height, resulting in more iterations of `calc`.

3. **Invariant on Search Strategy:**
   - **Natural Language Description:** "The precision required in the search for the optimal height increases the number of binary search iterations, especially when the cost differences (A, R, M) are significant."
   - **Reasoning:** Since `bin3` uses ternary search, the precision of determining the optimal height affects the number of required iterations. When cost values vary widely, finding the exact minimal cost height becomes computationally intensive.

These invariants capture the key performance bottlenecks in the code by focusing on the input size, height variability, and cost structure. These factors, when combined with the algorithm's reliance on repeated calculations, lead to the observed slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: Sure, let's move through Phase 3 and Phase 4 to create and integrate the performance-checking code.

### Phase 3: Implement Natural Language Invariants in C++

Based on the previously derived invariants, let's write C++ code to check each condition:

1. **Invariant on Input Size and Iterations:**
   - Check if the number of pillars leads to excessive calculations in the `calc` function.

2. **Invariant on Cost Balancing:**
   - Check if the variability in pillar heights and operation costs can lead to excessive calculations.

3. **Invariant on Search Strategy:**
   - Check if the precision in the search for the optimal height requires numerous iterations.

```cpp
// Checker for excessive calc calls due to large number of pillars
void check_large_pillar_count(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - excessive calc calls due to large pillar count" << endl;
        abort();
    }
}

// Checker for high operation cost leading to slow search
void check_high_operation_cost(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high operation cost affecting performance" << endl;
        abort();
    }
}

// Checker for extensive search iterations due to precision requirements
void check_search_precision(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - extensive search iterations needed" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Code

We will integrate the checkers into the C++ program, placing them at strategic points so they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
long long n, a, R, m, l, r, lmid, rmid, ans;
long long h[N];

// Checker functions
void check_large_pillar_count(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - excessive calc calls due to large pillar count" << endl;
        abort();
    }
}

void check_high_operation_cost(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high operation cost affecting performance" << endl;
        abort();
    }
}

void check_search_precision(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - extensive search iterations needed" << endl;
        abort();
    }
}

long long calc(long long H) {
    long long less = 0, more = 0;
    for (long long i = 1; i <= n; i++) {
        if (h[i] > H) more += (h[i] - H);
        if (h[i] < H) less += (H - h[i]);
    }
    if (more > less)
        return (more - less) * R + less * m;
    else
        return (less - more) * a + more * m;
}

long long bin3() {
    l = 0, r = 1e9;
    ans = min(calc(l), calc(r));
    while (l <= r) {
        lmid = (l + r) / 2, rmid = (lmid + r) / 2;
        if (calc(lmid) > calc(rmid))
            l = lmid + 1;
        else
            r = rmid - 1;
        ans = min(ans, min(calc(lmid), calc(rmid)));
    }
    return ans;
}

signed main() {
    cin >> n >> a >> R >> m;
    m = min(m, a + R);
    for (long long i = 1; i <= n; i++) cin >> h[i];

    // Place checkers after reading inputs and before heavy computations
    check_large_pillar_count(n > 50000); // Example threshold
    check_high_operation_cost((a > 5000 && R > 5000 && m > 5000)); // Example threshold
    check_search_precision((r - l) > 1e9 / 2); // Example of high range leading to more iterations

    cout << bin3();
    return 0;
}
```

### Explanation:
- **Checkers are placed**: After reading the input to ensure no overhead is added to the main computation loops.
- **Thresholds are illustrative**: These are not exact values but broad thresholds to indicate performance impact.
- **Purpose of each checker**: Identifies conditions that could lead to slow performance based on input size, cost disparity, and search precision requirements.

