system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
long long a, r, m, arr[100005], sum;
long long f(int h) {
  long long pos = 0, neg = 0;
  for (int i = 0; i < n; i++)
    pos += max(0ll, arr[i] - h), neg += max(0ll, h - arr[i]);
  if (a + r < m) return a * neg + r * pos;
  long long mini = min(pos, neg);
  return m * mini + a * (neg - mini) + r * (pos - mini);
}
int main() {
  cin >> n >> a >> r >> m;
  for (int i = 0; i < n; i++) cin >> arr[i], sum += arr[i];
  int l = 0, r = 1e9 + 1, m1, m2;
  while (l < r) {
    m1 = l + (r - l) / 3;
    m2 = l + 2 * (r - l) / 3;
    if (f(m1) > f(m2))
      l = m1 + 1;
    else
      r = m2;
  }
  cout << f(l) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 96 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long a, r, m, arr[100005], sum; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long f(int h) { /* line 5 slow_hit_count: 101, fast_hit_count: 101 */
  long long pos = 0, neg = 0; /* line 6 slow_hit_count: 101, fast_hit_count: 101 */
  for (int i = 0; i < n; i++) /* line 7 slow_hit_count: 10201, fast_hit_count: 1111 */
    pos += max(0ll, arr[i] - h), neg += max(0ll, h - arr[i]); /* line 8 slow_hit_count: 10100, fast_hit_count: 1010 */
  if (a + r < m) return a * neg + r * pos; /* line 9 slow_hit_count: 101, fast_hit_count: 101 */
  long long mini = min(pos, neg); /* line 10 slow_hit_count: 101, fast_hit_count: 101 */
  return m * mini + a * (neg - mini) + r * (pos - mini); /* line 11 slow_hit_count: 101, fast_hit_count: 101 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> r >> m; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> arr[i], sum += arr[i]; /* line 15 slow_hit_count: 101, fast_hit_count: 11 */
  int l = 0, r = 1e9 + 1, m1, m2; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  while (l < r) { /* line 17 slow_hit_count: 51, fast_hit_count: 51 */
    m1 = l + (r - l) / 3; /* line 18 slow_hit_count: 50, fast_hit_count: 50 */
    m2 = l + 2 * (r - l) / 3; /* line 19 slow_hit_count: 50, fast_hit_count: 50 */
    if (f(m1) > f(m2)) /* line 20 slow_hit_count: 50, fast_hit_count: 50 */
      l = m1 + 1; /* line 21 slow_hit_count: 5, fast_hit_count: 2 */
    else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      r = m2; /* line 23 slow_hit_count: 45, fast_hit_count: 48 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << f(l) << endl; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the given hit counts:

1. **Function `f(int h)` Execution:**
   - The function `f(int h)` is called frequently, with 101 executions for both slow and fast inputs. This suggests that the problem of slowdown might be related to the logic inside this function or how often it is called.
   
2. **Loop within `f(int h)` (line 7):**
   - The loop inside the function `f(int h)` is executed much more frequently with the slow input (10201 times) compared to the fast input (1111 times). This indicates a potential cause of the slowdown, as the loop's iteration count is significantly higher for the slow input.
   
3. **The Main Loop (lines 17-23):**
   - The main loop, which implements a ternary search to find the optimal height, iterates 51 times for both input cases. However, this loop's efficiency might be impacted if each iteration results in an expensive call to `f`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Height Adjustments:**
   - Natural Language Description: "If the heights of the pillars vary widely, and the loop inside the function `f` runs for each pillar, the program can enter a slow path due to the increased number of calculations needed for height adjustments."
   - Explanation: The loop in `f` calculates the `pos` and `neg` values for each pillar height difference with `h`. If `h` is far from many pillars’ heights, the loop executes more calculations.

2. **Invariant on Ternary Search Efficiency:**
   - Natural Language Description: "When the ternary search iteratively calls an expensive function over a large range of possible heights, it can lead to performance bottlenecks if each function call is costly."
   - Explanation: The ternary search relies on `f(m1)` and `f(m2)` evaluations to converge to the optimal height. Each evaluation involves iterating over all pillars, which becomes inefficient if the initial height range is large.

3. **Invariant on Cost Function Dynamics:**
   - Natural Language Description: "If the cost dynamics (combination of A, R, and M) require frequent balancing of adding and removing bricks among pillars, the function may execute slowly due to complex cost calculations."
   - Explanation: The function `f` chooses between different operations based on cost dynamics. Complex cost structures might lead to more calculations per function call.

4. **Invariant on Input Size and Variance:**
   - Natural Language Description: "When the pillar count `N` is high and there is a high variance in initial heights, the program may slow down significantly due to extensive iterations in `f` for balancing operations."
   - Explanation: A high number of pillars increases the function call cost within the loop. High variance means more potential height candidates to balance, increasing the search space in `f`.

These invariants provide broad conditions under which the program could slow down, considering the complexity of height adjustments and the operational costs. They reflect realistic triggers based on observed behavior while being abstracted from specific numeric inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

Here are C++ code snippets implementing the performance-characterizing invariants as runtime checks:

1. **Invariant on Height Adjustments:**

```cpp
void check_height_variance_invariant(const vector<long long>& heights, int n, int heightThreshold) {
    long long min_height = *min_element(heights.begin(), heights.end());
    long long max_height = *max_element(heights.begin(), heights.end());
    if ((max_height - min_height) > heightThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high variance in pillar heights!" << endl;
        abort();
    }
}
```

2. **Invariant on Ternary Search Efficiency:**

```cpp
void check_search_range_invariant(int initialLow, int initialHigh, int rangeThreshold) {
    if ((initialHigh - initialLow) > rangeThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search range in ternary search!" << endl;
        abort();
    }
}
```

3. **Invariant on Cost Function Dynamics:**

```cpp
void check_cost_dynamics_invariant(long long a, long long r, long long m) {
    if ((a > r && r > m) || (m > a && a > r)) {
        cerr << "Warning: Performance bottleneck condition triggered due to complex cost dynamics!" << endl;
        abort();
    }
}
```

4. **Invariant on Input Size and Variance:**

```cpp
void check_input_size_variance_invariant(int n, const vector<long long>& heights, int sizeThreshold, int varianceThreshold) {
    long long min_height = *min_element(heights.begin(), heights.end());
    long long max_height = *max_element(heights.begin(), heights.end());
    if (n > sizeThreshold && (max_height - min_height) > varianceThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high input size and variance!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the original C++ program for effective performance monitoring:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_height_variance_invariant(const vector<long long>& heights, int n, int heightThreshold) {
    long long min_height = *min_element(heights.begin(), heights.end());
    long long max_height = *max_element(heights.begin(), heights.end());
    if ((max_height - min_height) > heightThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high variance in pillar heights!" << endl;
        abort();
    }
}

void check_search_range_invariant(int initialLow, int initialHigh, int rangeThreshold) {
    if ((initialHigh - initialLow) > rangeThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search range in ternary search!" << endl;
        abort();
    }
}

void check_cost_dynamics_invariant(long long a, long long r, long long m) {
    if ((a > r && r > m) || (m > a && a > r)) {
        cerr << "Warning: Performance bottleneck condition triggered due to complex cost dynamics!" << endl;
        abort();
    }
}

void check_input_size_variance_invariant(int n, const vector<long long>& heights, int sizeThreshold, int varianceThreshold) {
    long long min_height = *min_element(heights.begin(), heights.end());
    long long max_height = *max_element(heights.begin(), heights.end());
    if (n > sizeThreshold && (max_height - min_height) > varianceThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high input size and variance!" << endl;
        abort();
    }
}

// Original program with integrated checks
int main() {
    int n;
    long long a, r, m;
    cin >> n >> a >> r >> m;
    vector<long long> arr(n);
    long long sum = 0;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        sum += arr[i];
    }

    // Insert checks after reading input
    check_height_variance_invariant(arr, n, 1000); // Arbitrary threshold for height variance
    check_search_range_invariant(0, 1e9 + 1, 1e9); // Threshold for range in ternary search
    check_cost_dynamics_invariant(a, r, m); // Check cost dynamics complexity
    check_input_size_variance_invariant(n, arr, 10000, 1000); // Threshold for size and variance

    int l = 0, r = 1e9 + 1, m1, m2;
    while (l < r) {
        m1 = l + (r - l) / 3;
        m2 = l + 2 * (r - l) / 3;
        if (f(m1, arr, n, a, r, m) > f(m2, arr, n, a, r, m))
            l = m1 + 1;
        else
            r = m2;
    }
    cout << f(l, arr, n, a, r, m) << endl;
    return 0;
}

// Helper function to calculate cost
long long f(int h, const vector<long long>& arr, int n, long long a, long long r, long long m) {
    long long pos = 0, neg = 0;
    for (int i = 0; i < n; i++) {
        pos += max(0ll, arr[i] - h);
        neg += max(0ll, h - arr[i]);
    }
    if (a + r < m) return a * neg + r * pos;
    long long mini = min(pos, neg);
    return m * mini + a * (neg - mini) + r * (pos - mini);
}
```

### Explanation of Integration

- **Height Variance Check:** This is placed after reading input to ensure that the height variability is analyzed immediately and prevent further slow operations.

- **Search Range Check:** Placed before the ternary search loop to check the initial range size, ensuring it is manageable.

- **Cost Dynamics Check:** Evaluated once inputs are available to check if the cost conditions are likely to cause complex dynamics.

- **Input Size and Variance Check:** Conducted after reading all inputs to ensure the input size and height variance are within manageable levels. 

These checks help identify potential performance bottlenecks early in the program execution, assisting in debugging and optimizing the code further.

