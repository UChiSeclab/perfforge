system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
long long h[maxn];
long long n, a, b, m;
long long ck(long long x) {
  long long d1 = 0, d2 = 0;
  for (int i = 1; i <= n; i++) {
    long long p = x - h[i];
    if (p < 0)
      d2 += h[i] - x;
    else
      d1 += x - h[i];
  }
  long long mi = min(d1, d2);
  long long fir = m * mi + (d1 - mi) * a + (d2 - mi) * b;
  long long sec = d1 * a + d2 * b;
  return min(fir, sec);
}
int main() {
  cin >> n >> a >> b >> m;
  long long mi = 0x7f7f7f7f7f7f7f, mx = 0;
  for (int i = 1; i <= n; i++) {
    cin >> h[i];
    if (mi > h[i]) mi = h[i];
    if (mx < h[i]) mx = h[i];
  }
  sort(h + 1, h + 1 + n);
  long long c1 = 0, c2 = 0;
  for (int i = 1; i <= n; i++) {
    c2 += (mx - h[i]) * a;
    c1 += (h[i] - mi) * b;
  }
  long long ans = min(c1, c2);
  long long l = mi, r = mx;
  while (r - l > 10) {
    long long lmid = l + (r - l) / 3;
    long long rmid = r - (r - l) / 3;
    if (ck(lmid) < ck(rmid))
      r = rmid;
    else
      l = lmid;
  }
  for (int i = l; i <= r; i++) {
    ans = min(ck(i), ans);
  }
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 51 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 2e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long h[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, a, b, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long ck(long long x) { /* line 6 slow_hit_count: 24, fast_hit_count: 13 */
  long long d1 = 0, d2 = 0; /* line 7 slow_hit_count: 24, fast_hit_count: 13 */
  for (int i = 1; i <= n; i++) { /* line 8 slow_hit_count: 2424, fast_hit_count: 143 */
    long long p = x - h[i]; /* line 9 slow_hit_count: 2400, fast_hit_count: 130 */
    if (p < 0) /* line 10 slow_hit_count: 2400, fast_hit_count: 130 */
      d2 += h[i] - x; /* line 11 slow_hit_count: 624, fast_hit_count: 38 */
    else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      d1 += x - h[i]; /* line 13 slow_hit_count: 1776, fast_hit_count: 92 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  long long mi = min(d1, d2); /* line 15 slow_hit_count: 24, fast_hit_count: 13 */
  long long fir = m * mi + (d1 - mi) * a + (d2 - mi) * b; /* line 16 slow_hit_count: 24, fast_hit_count: 13 */
  long long sec = d1 * a + d2 * b; /* line 17 slow_hit_count: 24, fast_hit_count: 13 */
  return min(fir, sec); /* line 18 slow_hit_count: 24, fast_hit_count: 13 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> m; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long mi = 0x7f7f7f7f7f7f7f, mx = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 23 slow_hit_count: 101, fast_hit_count: 11 */
    cin >> h[i]; /* line 24 slow_hit_count: 100, fast_hit_count: 10 */
    if (mi > h[i]) mi = h[i]; /* line 25 slow_hit_count: 100, fast_hit_count: 10 */
    if (mx < h[i]) mx = h[i]; /* line 26 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  sort(h + 1, h + 1 + n); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long c1 = 0, c2 = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 30 slow_hit_count: 101, fast_hit_count: 11 */
    c2 += (mx - h[i]) * a; /* line 31 slow_hit_count: 100, fast_hit_count: 10 */
    c1 += (h[i] - mi) * b; /* line 32 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = min(c1, c2); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  long long l = mi, r = mx; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  while (r - l > 10) { /* line 36 slow_hit_count: 8, fast_hit_count: 3 */
    long long lmid = l + (r - l) / 3; /* line 37 slow_hit_count: 7, fast_hit_count: 2 */
    long long rmid = r - (r - l) / 3; /* line 38 slow_hit_count: 7, fast_hit_count: 2 */
    if (ck(lmid) < ck(rmid)) /* line 39 slow_hit_count: 7, fast_hit_count: 2 */
      r = rmid; /* line 40 slow_hit_count: 3, fast_hit_count: 1 */
    else /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      l = lmid; /* line 42 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = l; i <= r; i++) { /* line 44 slow_hit_count: 11, fast_hit_count: 10 */
    ans = min(ck(i), ans); /* line 45 slow_hit_count: 10, fast_hit_count: 9 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the problem at hand and diagnose the performance bottlenecks in the provided C program, we will first analyze the line-level hit counts to identify expensive or inefficient code segments and then derive performance-characterizing invariants. Here’s how we can proceed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The function `ck(long long x)` is hit significantly more times during the slow run compared to the fast run. Specifically, lines 8-18 inside this function are executed far more frequently with the slow input.
   - The loop that seems to contribute most to the slow execution is the one initiated at line 8 and contained in the `ck` function. This is where the differences `d1` and `d2` are calculated for each pillar height adjustment.

2. **Pinpoint Lines of Interest:**
   - The loop on line 8 iterates `n` times, where `n` is relatively large in both input cases.
   - The ternary search loop (lines 36-43) is another area with a higher hit count in the slow input, indicating more iterations are required to converge on an optimal solution. This loop repeatedly calls the `ck` function.

3. **Data Interaction:**
   - The high hit counts in the `ck` function suggest that performance is sensitive to the number of comparisons and adjustments made for each candidate height `x`.
   - The nested nature of calling `ck` from the ternary search loop implies that the function is computationally expensive, especially since it is evaluating potential equal heights extensively.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can propose performance-invariants that characterize the scenarios under which the program experiences slowdowns:

1. **Invariant 1: Height Range and Iterations**
   - **Natural Language Description:** "When the difference between the maximum and minimum pillar heights is large, the algorithm may go through many iterations of height adjustments, leading to increased computation time."
   - **Reasoning:** A large height range necessitates more iterations in the ternary search to find the optimal height, as reflected by repeated calls to `ck`.

2. **Invariant 2: Height Adjustment Overheads**
   - **Natural Language Description:** "If the costs to add or remove bricks are very different, the optimal height calculation may require more iterations and adjustments, slowing down the program."
   - **Reasoning:** Disparities in operation costs (`A`, `R`, `M`) can affect the convergence of the ternary search, requiring more careful balancing of bricks moved, added, or removed across pillars.

3. **Invariant 3: Large Number of Pillars**
   - **Natural Language Description:** "As the number of pillars approaches the upper limit, the cumulative cost calculations across all pillars for each possible height can slow the execution significantly."
   - **Reasoning:** More pillars mean that each potential height must be evaluated across a larger dataset, increasing the computational workload.

### Conclusion

These invariants help identify when and why the C program slows down, focusing on the height range, cost disparities, and the number of pillars. By exploring these conditions, one can potentially optimize the program by refining how candidate heights are evaluated or adjusting the algorithm to better handle these complex scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4.

### Phase 3: Implementing the Invariants as C++ Checkers

Based on the natural language invariants identified in Phase 2, we'll implement checker code for each condition.

#### Invariant 1: Height Range and Iterations
```cpp
void check_height_range_invariant(long long min_height, long long max_height) {
    if (max_height - min_height > 1000000) { // arbitrary large threshold for height difference
        cerr << "Warning: Performance bottleneck condition triggered - large height range!" << endl;
        abort();
    }
}
```

#### Invariant 2: Height Adjustment Overheads
```cpp
void check_cost_invariant(long long a, long long r, long long m) {
    if ((a > 1000 && r < 10) || (r > 1000 && a < 10)) { // arbitrary threshold for cost disparity
        cerr << "Warning: Performance bottleneck condition triggered - cost disparity!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Number of Pillars
```cpp
void check_pillar_count_invariant(long long n) {
    if (n > 80000) { // threshold close to upper bound of n
        cerr << "Warning: Performance bottleneck condition triggered - large number of pillars!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the original C++ code with the performance-checking functions integrated. Each check is placed at a strategic point to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
long long h[maxn];
long long n, a, b, m;

// Function to check large height range
void check_height_range_invariant(long long min_height, long long max_height) {
    if (max_height - min_height > 1000000) { // arbitrary large threshold for height difference
        cerr << "Warning: Performance bottleneck condition triggered - large height range!" << endl;
        abort();
    }
}

// Function to check cost disparity
void check_cost_invariant(long long a, long long r, long long m) {
    if ((a > 1000 && r < 10) || (r > 1000 && a < 10)) { // arbitrary threshold for cost disparity
        cerr << "Warning: Performance bottleneck condition triggered - cost disparity!" << endl;
        abort();
    }
}

// Function to check large number of pillars
void check_pillar_count_invariant(long long n) {
    if (n > 80000) { // threshold close to upper bound of n
        cerr << "Warning: Performance bottleneck condition triggered - large number of pillars!" << endl;
        abort();
    }
}

long long ck(long long x) {
    long long d1 = 0, d2 = 0;
    for (int i = 1; i <= n; i++) {
        long long p = x - h[i];
        if (p < 0)
            d2 += h[i] - x;
        else
            d1 += x - h[i];
    }
    long long mi = min(d1, d2);
    long long fir = m * mi + (d1 - mi) * a + (d2 - mi) * b;
    long long sec = d1 * a + d2 * b;
    return min(fir, sec);
}

int main() {
    cin >> n >> a >> b >> m;

    // Check for number of pillars
    check_pillar_count_invariant(n);

    long long mi = 0x7f7f7f7f7f7f7f, mx = 0;
    for (int i = 1; i <= n; i++) {
        cin >> h[i];
        if (mi > h[i]) mi = h[i];
        if (mx < h[i]) mx = h[i];
    }
    
    // Check for height range
    check_height_range_invariant(mi, mx);

    // Check for cost disparity
    check_cost_invariant(a, b, m);

    sort(h + 1, h + 1 + n);
    long long c1 = 0, c2 = 0;
    for (int i = 1; i <= n; i++) {
        c2 += (mx - h[i]) * a;
        c1 += (h[i] - mi) * b;
    }
    long long ans = min(c1, c2);
    long long l = mi, r = mx;
    while (r - l > 10) {
        long long lmid = l + (r - l) / 3;
        long long rmid = r - (r - l) / 3;
        if (ck(lmid) < ck(rmid))
            r = rmid;
        else
            l = lmid;
    }
    for (int i = l; i <= r; i++) {
        ans = min(ck(i), ans);
    }
    cout << ans << '\n';
}
```

### Explanation of Integration

- **Pillar Count Check:** Placed immediately after reading `n` since it directly relates to the input size.
- **Height Range Check:** After computing `mi` and `mx`, check if the range exceeds a large threshold.
- **Cost Disparity Check:** After reading operation costs, checks for significant disparities.

These checks will help identify when and why the program may slow down due to these specific bottlenecks, providing useful feedback for optimization efforts.

