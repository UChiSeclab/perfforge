system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 111111;
long long n, A, R, M, h[N];
long long f(long long H) {
  long long x = 0, y = 0;
  for (long long i = 0; i < n; ++i) {
    if (h[i] > H)
      x += h[i] - H;
    else
      y += H - h[i];
  }
  return min(x, y) * M + (x - min(x, y)) * R + (y - min(x, y)) * A;
}
signed main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> A >> R >> M;
  M = min(M, A + R);
  for (long long i = 0; i < n; ++i) cin >> h[i];
  long long l = 0, r = 1e9;
  while (r - l > 20) {
    long long lmed = l + (r - l) / 3;
    long long rmed = r - (r - l) / 3;
    if (f(lmed) < f(rmed))
      r = rmed;
    else
      l = lmed;
  }
  long long res = 1e18;
  for (long long i = l; i <= r; ++i) res = min(res, f(i));
  cout << res;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 51 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 14 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 111111; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, A, R, M, h[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long H) { /* line 5 slow_hit_count: 108, fast_hit_count: 108 */
  long long x = 0, y = 0; /* line 6 slow_hit_count: 108, fast_hit_count: 108 */
  for (long long i = 0; i < n; ++i) { /* line 7 slow_hit_count: 10908, fast_hit_count: 1188 */
    if (h[i] > H) /* line 8 slow_hit_count: 10800, fast_hit_count: 1080 */
      x += h[i] - H; /* line 9 slow_hit_count: 761, fast_hit_count: 86 */
    else /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      y += H - h[i]; /* line 11 slow_hit_count: 10039, fast_hit_count: 994 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return min(x, y) * M + (x - min(x, y)) * R + (y - min(x, y)) * A; /* line 13 slow_hit_count: 108, fast_hit_count: 108 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> A >> R >> M; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  M = min(M, A + R); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) cin >> h[i]; /* line 19 slow_hit_count: 101, fast_hit_count: 11 */
  long long l = 0, r = 1e9; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  while (r - l > 20) { /* line 21 slow_hit_count: 45, fast_hit_count: 45 */
    long long lmed = l + (r - l) / 3; /* line 22 slow_hit_count: 44, fast_hit_count: 44 */
    long long rmed = r - (r - l) / 3; /* line 23 slow_hit_count: 44, fast_hit_count: 44 */
    if (f(lmed) < f(rmed)) /* line 24 slow_hit_count: 44, fast_hit_count: 44 */
      r = rmed; /* line 25 slow_hit_count: 41, fast_hit_count: 44 */
    else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      l = lmed; /* line 27 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1e18; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = l; i <= r; ++i) res = min(res, f(i)); /* line 30 slow_hit_count: 21, fast_hit_count: 21 */
  cout << res; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottleneck, let's go through the phases outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**

   - **Line 7**: The loop `for (long long i = 0; i < n; ++i)` is executed 10,908 times for the slow input and only 1,188 times for the fast input. This indicates that this loop is a major contributor to the increased execution time for the slow input.

   - **Line 8** and **Line 11**: Both conditions inside the loop are responsible for updating `x` and `y`, but they have different hit counts. Line 9 is executed 761 times, whereas Line 11 is executed 10,039 times in the slow run, indicating that most pillars need bricks added rather than removed.

2. **Inference on Line and Data Structure Interaction:**

   - The lines within the function `f(H)` are heavily interacting with the heights of the pillars (`h[i]`). The function evaluates the cost to make all pillars a specific height `H`. It seems to be calculating how many bricks need to be removed or added to reach a uniform height.

   - The main bottleneck seems to be the loop iterating over the pillars, with a significant number of brick additions happening (based on the hit count for line 11).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit analysis and the behavior of the code, here are potential performance characterizing invariants:

1. **Invariant on Cost Evaluation Frequency:**
   - **Natural Language Description:** "If the difference between the maximum and minimum heights of the pillars is large, the program may evaluate a high number of potential heights for equalization, leading to increased computation time."

2. **Invariant on Brick Addition/Removal:**
   - **Natural Language Description:** "If the majority of the pillars are significantly below a target uniform height, resulting in many additions, the computation may slow due to repeated calculations for brick additions."

3. **Invariant on Ternary Search Loop:**
   - **Natural Language Description:** "If the range between the minimum and maximum possible heights (`l` and `r`) is large, the ternary search loop will iterate many times, which could slow the program due to frequent recalculations of costs for different potential uniform heights."

### Explanation on Invariants

- The first invariant addresses the potential range of heights the function `f(H)` must consider, which can lead directly to increased time complexity if not bounded effectively or if the initial height spread is large.
  
- The second invariant highlights the condition where the cost of adding bricks is calculated far more often than removing them, which was evident from the hit counts.

- The third invariant targets the logical decision-making in the ternary search loop. The search aims to find an optimal height `H`, and if the gap between potential values is wide, more iterations—and hence, more function evaluations—are required.

These invariants are abstracted to be conditionally broad yet specific enough to cover possible future scenarios that could cause slow performance without relying on specific numerical thresholds from the provided inputs, respecting the constraint of `n <= 100,000`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ runtime checks for each invariant:

1. **Invariant on Cost Evaluation Frequency:**

   ```cpp
   void check_large_height_range_invariant(long long minHeight, long long maxHeight) {
       if ((maxHeight - minHeight) > 1000000) { // Arbitrary large threshold for illustration
           cerr << "Warning: Performance bottleneck condition triggered - large height range!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Brick Addition/Removal:**

   ```cpp
   void check_brick_addition_invariant(long long additions, long long totalPillars) {
       if (additions > totalPillars * 0.75) { // If more than 75% of pillars require additions
           cerr << "Warning: Performance bottleneck condition triggered - excessive brick additions!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Ternary Search Loop:**

   ```cpp
   void check_ternary_search_invariant(long long l, long long r) {
       if ((r - l) > 1000000) { // Arbitrary large threshold for search range
           cerr << "Warning: Performance bottleneck condition triggered - large ternary search range!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate the above checks into the given C++ program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 111111;
long long n, A, R, M, h[N];

// Performance Checker Functions
void check_large_height_range_invariant(long long minHeight, long long maxHeight) {
    if ((maxHeight - minHeight) > 1000000) { // Arbitrary large threshold for illustration
        cerr << "Warning: Performance bottleneck condition triggered - large height range!" << endl;
        abort();
    }
}

void check_brick_addition_invariant(long long additions, long long totalPillars) {
    if (additions > totalPillars * 0.75) { // If more than 75% of pillars require additions
        cerr << "Warning: Performance bottleneck condition triggered - excessive brick additions!" << endl;
        abort();
    }
}

void check_ternary_search_invariant(long long l, long long r) {
    if ((r - l) > 1000000) { // Arbitrary large threshold for search range
        cerr << "Warning: Performance bottleneck condition triggered - large ternary search range!" << endl;
        abort();
    }
}

long long f(long long H) {
    long long x = 0, y = 0;
    for (long long i = 0; i < n; ++i) {
        if (h[i] > H)
            x += h[i] - H;
        else
            y += H - h[i];
    }
    
    check_brick_addition_invariant(y, n); // Check for excessive additions
    
    return min(x, y) * M + (x - min(x, y)) * R + (y - min(x, y)) * A;
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin >> n >> A >> R >> M;
    M = min(M, A + R);
    for (long long i = 0; i < n; ++i) cin >> h[i];
    
    long long l = 0, r = 1e9;
    long long minHeight = *min_element(h, h + n);
    long long maxHeight = *max_element(h, h + n);
    
    check_large_height_range_invariant(minHeight, maxHeight); // Check for large height range
    
    while (r - l > 20) {
        long long lmed = l + (r - l) / 3;
        long long rmed = r - (r - l) / 3;
        
        check_ternary_search_invariant(l, r); // Check for large ternary search range
        
        if (f(lmed) < f(rmed))
            r = rmed;
        else
            l = lmed;
    }
    long long res = 1e18;
    for (long long i = l; i <= r; ++i) res = min(res, f(i));
    cout << res;
}
```

### Explanation of Integration:

- **Check for Large Height Range**: Added to check if the difference between the maximum and minimum heights is excessively large, potentially leading to more evaluations of the ternary search.

- **Check for Excessive Brick Additions**: Implemented within the function `f(H)` to detect inefficiencies if too many pillars require adding bricks.

- **Check for Large Ternary Search Range**: Placed within the ternary search loop to detect if the search range is too broad, implying a large number of iterations in the ternary search.

These checks are strategically placed to address potential bottlenecks without adding significant overhead to the main computational loop.

