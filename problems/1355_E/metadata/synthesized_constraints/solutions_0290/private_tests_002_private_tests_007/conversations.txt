system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vll = vector<ll>;
using vii = vector<ii>;
const ll MOD = 998244353;
const int INF = 1e9 + 9;
const int MAXN = 1000006;
ll n, a, r, m, h[MAXN], t[MAXN];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> a >> r >> m;
  ll s1 = 0, s2 = 0;
  m = min(m, a + r);
  for (int i = 0; i < n; ++i) {
    cin >> h[i];
    t[i] = h[i];
    s2 += h[i];
  }
  sort(t, t + n);
  ll ans = 1e18;
  for (ll i = 0; i < n; ++i) {
    while (t[i + 1] == t[i]) {
      s1 += t[i];
      s2 -= t[i];
      ++i;
    }
    s1 += t[i];
    s2 -= t[i];
    ll mean = (s1 + s2 + n - 1) / n;
    if (t[i] <= mean and t[i + 1] >= mean) {
      ans = min(
          ans, (s2 - mean * (n - i - 1)) * (m - a) + (mean * (i + 1) - s1) * a);
    }
    if (t[i] * (i + 1) - s1 >= s2 - t[i] * (n - i - 1)) {
      ans = min(
          ans, (s2 - t[i] * (n - i - 1)) * (m - a) + (t[i] * (i + 1) - s1) * a);
    }
  }
  swap(s1, s2);
  for (ll i = 0; i < n; ++i) {
    while (t[i + 1] == t[i]) {
      s1 += t[i];
      s2 -= t[i];
      ++i;
    }
    s1 += t[i];
    s2 -= t[i];
    ll mean = (s1 + s2) / n;
    if (t[i] <= mean and t[i + 1] >= mean) {
      ans = min(
          ans, (s2 - mean * (n - i - 1)) * r + (mean * (i + 1) - s1) * (m - r));
    }
    if (t[i] * (i + 1) - s1 <= s2 - t[i] * (n - i - 1)) {
      ans = min(
          ans, (s2 - t[i] * (n - i - 1)) * r + (t[i] * (i + 1) - s1) * (m - r));
    }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 0 0 0
0


(G.2) Fast Input

1 0 0 0
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ii = pair<int, int>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using vll = vector<ll>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using vii = vector<ii>; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const ll MOD = 998244353; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9 + 9; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 1000006; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
ll n, a, r, m, h[MAXN], t[MAXN]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> r >> m; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ll s1 = 0, s2 = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  m = min(m, a + r); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> h[i]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    t[i] = h[i]; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    s2 += h[i]; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  sort(t, t + n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  ll ans = 1e18; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (ll i = 0; i < n; ++i) { /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
    while (t[i + 1] == t[i]) { /* line 26 slow_hit_count: 1000008, fast_hit_count: 1 */
      s1 += t[i]; /* line 27 slow_hit_count: 1000007, fast_hit_count: 0 */
      s2 -= t[i]; /* line 28 slow_hit_count: 1000007, fast_hit_count: 0 */
      ++i; /* line 29 slow_hit_count: 1000007, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    s1 += t[i]; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    s2 -= t[i]; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    ll mean = (s1 + s2 + n - 1) / n; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    if (t[i] <= mean and t[i + 1] >= mean) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min( /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
          ans, (s2 - mean * (n - i - 1)) * (m - a) + (mean * (i + 1) - s1) * a); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (t[i] * (i + 1) - s1 >= s2 - t[i] * (n - i - 1)) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min( /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
          ans, (s2 - t[i] * (n - i - 1)) * (m - a) + (t[i] * (i + 1) - s1) * a); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  swap(s1, s2); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (ll i = 0; i < n; ++i) { /* line 44 slow_hit_count: 2, fast_hit_count: 2 */
    while (t[i + 1] == t[i]) { /* line 45 slow_hit_count: 1000008, fast_hit_count: 1 */
      s1 += t[i]; /* line 46 slow_hit_count: 1000007, fast_hit_count: 0 */
      s2 -= t[i]; /* line 47 slow_hit_count: 1000007, fast_hit_count: 0 */
      ++i; /* line 48 slow_hit_count: 1000007, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    s1 += t[i]; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    s2 -= t[i]; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    ll mean = (s1 + s2) / n; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    if (t[i] <= mean and t[i + 1] >= mean) { /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min( /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
          ans, (s2 - mean * (n - i - 1)) * r + (mean * (i + 1) - s1) * (m - r)); /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    if (t[i] * (i + 1) - s1 <= s2 - t[i] * (n - i - 1)) { /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min( /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
          ans, (s2 - t[i] * (n - i - 1)) * r + (t[i] * (i + 1) - s1) * (m - r)); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the performance differences between the "fast" and "slow" inputs, let's analyze the hit count information and the given C program to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The line `while (t[i + 1] == t[i])` (line 26 and line 45) is executed 1,000,008 times for the slow input, compared to just once for the fast input. This indicates a potentially inefficient loop where the program is repeatedly checking elements in a sequence where all elements are equal.
   - Inside this loop, `s1 += t[i]`, `s2 -= t[i]`, and `++i` (lines 27-29 and lines 46-48) are also executed 1,000,007 times, confirming the inefficiency stems from handling these similar elements.

2. **Data Interaction**:
   - The excessive hits on these lines suggest that the algorithm is inefficient when dealing with identical consecutive elements in the sorted array `t`. This could indicate that the program is not optimized for handling cases where all pillars have the same height.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are potential performance invariants that can help identify scenarios where the program might slow down:

1. **Invariant on Identical Heights**:
   - **Natural Language**: "If the pillars' heights are all the same or if large segments of the sorted heights array contain identical values, the program may enter a prolonged loop, leading to performance degradation."
   - **Explanation**: This condition leads to many redundant operations in the loop, as the program unnecessarily iterates over a large number of identical elements without making progress.

2. **Invariant on High Redundancy in Height Distribution**:
   - **Natural Language**: "When there is a high redundancy or repetition in the pillar heights such that many consecutive heights are equal, the program may perform excessive iterations."
   - **Explanation**: The program's handling of repetitive values can cause excessive and redundant computations, especially in the existing loop structure, which is not optimized for such input patterns.

3. **Invariant on Minimal Operations Costs**:
   - **Natural Language**: "If the costs of adding, removing, and moving bricks are all zero, the program may not efficiently handle cases where it could terminate early, leading to unnecessary computations."
   - **Explanation**: The program should ideally handle the case of zero-cost operations more gracefully, potentially avoiding loops that contribute no cost to the result.

These invariants are designed to broadly capture potential performance issues, especially concerning the distribution of pillar heights and cost configurations, which can be generalized beyond the specific slow input provided.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Let's translate the natural language invariants into checker code:

1. **Invariant on Identical Heights**:
   - Check if there are large segments of identical heights in the sorted height array `t`.

```cpp
void check_identical_heights_invariant(const vector<ll>& t, ll n) {
    int identical_count = 0;
    for (ll i = 0; i < n - 1; ++i) {
        if (t[i] == t[i + 1]) {
            identical_count++;
        } else {
            if (identical_count > n / 2) {
                cerr << "Warning: Performance bottleneck condition triggered - large segment of identical heights!" << endl;
                abort();
            }
            identical_count = 0;
        }
    }
}
```

2. **Invariant on Minimal Operations Costs**:
   - Check if all operations costs are zero and trigger an early warning.

```cpp
void check_zero_cost_invariant(ll a, ll r, ll m) {
    if (a == 0 && r == 0 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - zero operation costs!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, let's integrate these checkers into the provided C++ program at appropriate locations to ensure effective detection of the performance issues:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vll = vector<ll>;
using vii = vector<ii>;
const ll MOD = 998244353;
const int INF = 1e9 + 9;
const int MAXN = 1000006;
ll n, a, r, m, h[MAXN], t[MAXN];

// Function to check for large segments of identical heights
void check_identical_heights_invariant(const vector<ll>& t, ll n) {
    int identical_count = 0;
    for (ll i = 0; i < n - 1; ++i) {
        if (t[i] == t[i + 1]) {
            identical_count++;
        } else {
            if (identical_count > n / 2) {
                cerr << "Warning: Performance bottleneck condition triggered - large segment of identical heights!" << endl;
                abort();
            }
            identical_count = 0;
        }
    }
}

// Function to check if all operation costs are zero
void check_zero_cost_invariant(ll a, ll r, ll m) {
    if (a == 0 && r == 0 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - zero operation costs!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> a >> r >> m;
    ll s1 = 0, s2 = 0;
    
    // Check for zero-cost invariant
    check_zero_cost_invariant(a, r, m);
    
    m = min(m, a + r);
    vector<ll> heights(n);
    for (int i = 0; i < n; ++i) {
        cin >> h[i];
        t[i] = h[i];
        s2 += h[i];
    }
    
    sort(t, t + n);
    
    // Check for identical heights invariant
    check_identical_heights_invariant(vector<ll>(t, t + n), n);
    
    ll ans = 1e18;
    for (ll i = 0; i < n; ++i) {
        while (t[i + 1] == t[i]) {
            s1 += t[i];
            s2 -= t[i];
            ++i;
        }
        s1 += t[i];
        s2 -= t[i];
        ll mean = (s1 + s2 + n - 1) / n;
        if (t[i] <= mean and t[i + 1] >= mean) {
            ans = min(ans, (s2 - mean * (n - i - 1)) * (m - a) + (mean * (i + 1) - s1) * a);
        }
        if (t[i] * (i + 1) - s1 >= s2 - t[i] * (n - i - 1)) {
            ans = min(ans, (s2 - t[i] * (n - i - 1)) * (m - a) + (t[i] * (i + 1) - s1) * a);
        }
    }
    swap(s1, s2);
    for (ll i = 0; i < n; ++i) {
        while (t[i + 1] == t[i]) {
            s1 += t[i];
            s2 -= t[i];
            ++i;
        }
        s1 += t[i];
        s2 -= t[i];
        ll mean = (s1 + s2) / n;
        if (t[i] <= mean and t[i + 1] >= mean) {
            ans = min(ans, (s2 - mean * (n - i - 1)) * r + (mean * (i + 1) - s1) * (m - r));
        }
        if (t[i] * (i + 1) - s1 <= s2 - t[i] * (n - i - 1)) {
            ans = min(ans, (s2 - t[i] * (n - i - 1)) * r + (t[i] * (i + 1) - s1) * (m - r));
        }
    }
    cout << ans << endl;
}
```

### Explanation

- **Check for Identical Heights**: This check is placed after sorting the heights array. It will trigger a warning if there is a large segment of identical heights, which can lead to inefficiencies.
- **Check for Zero-Cost Operations**: This is checked immediately after reading the input parameters. If all operation costs are zero, this can lead to inefficiencies where the program does unnecessary calculations.

These checks aim to provide early warnings and abort execution when the known performance bottlenecks are likely to be triggered.

