system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int main() {
  int n;
  long long a, b, c;
  std::cin >> n >> a >> b >> c;
  std::vector<long long> h(n);
  for (int i = 0; i < n; i++) std::cin >> h[i];
  std::sort(h.rbegin(), h.rend());
  auto func = [&](long long targ) {
    long long cnt = 0;
    for (int i = 0; i < n; i++) cnt += std::max(0LL, h[i] - targ);
    long long ret = 0;
    bool ok[100003] = {};
    for (int i = 0; i < n; i++) {
      if (targ - h[i] > cnt) break;
      ret += std::max(0LL, targ - h[i]) * std::min(a + b, c);
      cnt -= std::max(0LL, targ - h[i]);
      ok[i] = true;
    }
    for (int i = 0; i < n; i++) {
      if (ok[i]) continue;
      long long res = targ - h[i];
      if (cnt > 0) {
        res -= cnt;
        ret += cnt * std::min(a + b, c);
        cnt = 0;
      }
      ret += res * a;
    }
    if (cnt > 0) ret += cnt * b;
    return ret;
  };
  long long lo = -1, hi = 1e9 + 1;
  while (hi - lo > 1) {
    long long mid = lo + (hi - lo) / 2;
    long long l = func(mid);
    long long r = func(mid + 1);
    if (l > r)
      lo = mid;
    else
      hi = mid;
  }
  std::cout << std::min(func(lo), func(hi)) << std::endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 20 149 72
67 100 52 15 0 92 26 74 44 61 6 44 45 19 22 8 10 85 0 78 24 61 81 99 62 84 9 71 11 65 5 97 3 72 7 81 81 104 65 85 52 21 20 53 66 91 4 75 84 139 72 27 50 25 9 65 14 6 54 68 6 2 89 78 40 45 98 45 27 51 94 72 67 81 20 19 38 64 14 40 57 21 82 99 37 113 21 22 30 14 73 93 60 8 63 25 27 30 32 13


(G.2) Fast Input

10 7 8 3
3 20 4 9 2 7 6 10 4 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 2 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long a, b, c; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> n >> a >> b >> c; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  std::vector<long long> h(n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) std::cin >> h[i]; /* line 7 slow_hit_count: 101, fast_hit_count: 11 */
  std::sort(h.rbegin(), h.rend()); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  auto func = [&](long long targ) { /* line 9 slow_hit_count: 62, fast_hit_count: 60 */
    long long cnt = 0; /* line 10 slow_hit_count: 62, fast_hit_count: 60 */
    for (int i = 0; i < n; i++) cnt += std::max(0LL, h[i] - targ); /* line 11 slow_hit_count: 6262, fast_hit_count: 660 */
    long long ret = 0; /* line 12 slow_hit_count: 62, fast_hit_count: 60 */
    bool ok[100003] = {}; /* line 13 slow_hit_count: 62, fast_hit_count: 60 */
    for (int i = 0; i < n; i++) { /* line 14 slow_hit_count: 1018, fast_hit_count: 136 */
      if (targ - h[i] > cnt) break; /* line 15 slow_hit_count: 1018, fast_hit_count: 131 */
      ret += std::max(0LL, targ - h[i]) * std::min(a + b, c); /* line 16 slow_hit_count: 956, fast_hit_count: 76 */
      cnt -= std::max(0LL, targ - h[i]); /* line 17 slow_hit_count: 956, fast_hit_count: 76 */
      ok[i] = true; /* line 18 slow_hit_count: 956, fast_hit_count: 76 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) { /* line 20 slow_hit_count: 6262, fast_hit_count: 660 */
      if (ok[i]) continue; /* line 21 slow_hit_count: 6200, fast_hit_count: 600 */
      long long res = targ - h[i]; /* line 22 slow_hit_count: 5244, fast_hit_count: 524 */
      if (cnt > 0) { /* line 23 slow_hit_count: 5244, fast_hit_count: 524 */
        res -= cnt; /* line 24 slow_hit_count: 18, fast_hit_count: 3 */
        ret += cnt * std::min(a + b, c); /* line 25 slow_hit_count: 18, fast_hit_count: 3 */
        cnt = 0; /* line 26 slow_hit_count: 18, fast_hit_count: 3 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      ret += res * a; /* line 28 slow_hit_count: 5244, fast_hit_count: 524 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt > 0) ret += cnt * b; /* line 30 slow_hit_count: 62, fast_hit_count: 60 */
    return ret; /* line 31 slow_hit_count: 62, fast_hit_count: 60 */
  }; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  long long lo = -1, hi = 1e9 + 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (hi - lo > 1) { /* line 34 slow_hit_count: 31, fast_hit_count: 30 */
    long long mid = lo + (hi - lo) / 2; /* line 35 slow_hit_count: 30, fast_hit_count: 29 */
    long long l = func(mid); /* line 36 slow_hit_count: 30, fast_hit_count: 29 */
    long long r = func(mid + 1); /* line 37 slow_hit_count: 30, fast_hit_count: 29 */
    if (l > r) /* line 38 slow_hit_count: 30, fast_hit_count: 29 */
      lo = mid; /* line 39 slow_hit_count: 4, fast_hit_count: 1 */
    else /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      hi = mid; /* line 41 slow_hit_count: 26, fast_hit_count: 28 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << std::min(func(lo), func(hi)) << std::endl; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, let's analyze the provided code and hit counts. We'll then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**: 
   - The line with the highest hit difference between the slow and fast inputs is line 11 (`for (int i = 0; i < n; i++) cnt += std::max(0LL, h[i] - targ);`). Here, the slow input has a count of 6262, while the fast input has 660. This implies that this loop runs significantly more often during the slow input.
   - Lines 20, 21, 22, and 28 within the second loop also have notably higher hit counts for the slow input compared to the fast input. This suggests that the program spends a lot of time iterating over the pillars and calculating operations.

2. **Analysis of Code Logic**:
   - The code's logic revolves around calculating the minimal cost to equalize the height of pillars by using operations defined with costs \( A \), \( R \), and \( M \).
   - The function `func(targ)` is used to calculate the cost for setting all pillars to the target height `targ`.
   - The binary search (lines 34-41) iteratively calls this function, which likely causes the inefficient computation.

3. **Interaction with Data Structures**:
   - The algorithm uses a sorted vector `h` and performs calculations by iterating over it multiple times, indicating a potential inefficiency when the differences `h[i] - targ` are large.

### Phase 2: Derive Performance-Characterizing Invariants

After identifying the expensive segments, we can derive conditions under which the program slows down:

1. **Invariant 1: High Variability in Pillar Heights**:
   - **Natural Language Description**: "When there is a large variability in the initial heights of pillars, the program may repeatedly calculate costly operations to equalize heights, leading to slowdown."
   - **Explanation**: The high number of iterations in the loops seems to be driven by large differences between pillar heights. When the initial pillar heights are widely spread, more operations are needed to equalize them.

2. **Invariant 2: Large Number of Iterations in Binary Search**:
   - **Natural Language Description**: "If the difference between the tallest and shortest pillar (`hi - lo`) is large, the binary search will require more steps, which can increase the computation time."
   - **Explanation**: The binary search is responsible for many calls to `func()`, causing repeated processing of the entire dataset.

3. **Invariant 3: Overuse of Expensive Operations**:
   - **Natural Language Description**: "If reducing pillars by removing bricks is significantly more expensive compared to other operations, the program may spend excessive time in costly decrement operations."
   - **Explanation**: The cost structure can influence the number of operations performed, particularly affecting scenarios where one operation is much cheaper than others, leading to potential inefficiencies.

These invariants help capture scenarios where the program's performance might degrade and are broad enough to identify potential future slowdowns without relying on specific numerical values from the slow input data.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have to restore the wall. The wall consists of N pillars of bricks, the height of the i-th pillar is initially equal to h_{i}, the height is measured in number of bricks. After the restoration all the N pillars should have equal heights.

You are allowed the following operations:

  * put a brick on top of one pillar, the cost of this operation is A;
  * remove a brick from the top of one non-empty pillar, the cost of this operation is R;
  * move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is M.



You cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes 0.

What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?

Input

The first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.

The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars.

Output

Print one integer — the minimal cost of restoration.

Examples

Input


3 1 100 100
1 3 8


Output


12


Input


3 100 1 100
1 3 8


Output


9


Input


3 100 100 1
1 3 8


Output


4


Input


5 1 2 4
5 5 3 6 5


Output


4


Input


5 1 2 2
5 5 3 6 5


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

1. **Invariant 1: High Variability in Pillar Heights**

```cpp
void check_variability_invariant(const std::vector<long long>& h) {
    long long maxHeight = *std::max_element(h.begin(), h.end());
    long long minHeight = *std::min_element(h.begin(), h.end());
    if (maxHeight - minHeight > 1e8) { // Threshold chosen to indicate very high variability
        cerr << "Warning: Performance bottleneck condition triggered due to high variability in pillar heights!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Large Number of Iterations in Binary Search**

```cpp
void check_binary_search_invariant(long long lo, long long hi) {
    if (hi - lo > 1e8) { // Arbitrary large threshold for detection
        cerr << "Warning: Performance bottleneck condition triggered due to large range in binary search!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Overuse of Expensive Operations**

```cpp
void check_expensive_operation_invariant(long long a, long long b) {
    if (b > 100 * a) { // Arbitrary ratio threshold indicating expensive removal operations
        cerr << "Warning: Performance bottleneck condition triggered due to expensive removal operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, we'll integrate these checkers into the original C++ program. Each check is placed at an effective point without incurring overhead in tight loops.

```cpp
#include <bits/stdc++.h>

// Checkers for performance invariants
void check_variability_invariant(const std::vector<long long>& h) {
    long long maxHeight = *std::max_element(h.begin(), h.end());
    long long minHeight = *std::min_element(h.begin(), h.end());
    if (maxHeight - minHeight > 1e8) { // Threshold chosen to indicate very high variability
        cerr << "Warning: Performance bottleneck condition triggered due to high variability in pillar heights!" << endl;
        abort();
    }
}

void check_binary_search_invariant(long long lo, long long hi) {
    if (hi - lo > 1e8) { // Arbitrary large threshold for detection
        cerr << "Warning: Performance bottleneck condition triggered due to large range in binary search!" << endl;
        abort();
    }
}

void check_expensive_operation_invariant(long long a, long long b) {
    if (b > 100 * a) { // Arbitrary ratio threshold indicating expensive removal operations
        cerr << "Warning: Performance bottleneck condition triggered due to expensive removal operations!" << endl;
        abort();
    }
}

int main() {
    int n;
    long long a, b, c;
    std::cin >> n >> a >> b >> c;
    std::vector<long long> h(n);
    for (int i = 0; i < n; i++) std::cin >> h[i];

    // Check for high variability in initial heights
    check_variability_invariant(h);

    // Check for expensive operations
    check_expensive_operation_invariant(a, b);
    
    std::sort(h.rbegin(), h.rend());
    auto func = [&](long long targ) {
        long long cnt = 0;
        for (int i = 0; i < n; i++) cnt += std::max(0LL, h[i] - targ);
        long long ret = 0;
        bool ok[100003] = {};
        for (int i = 0; i < n; i++) {
            if (targ - h[i] > cnt) break;
            ret += std::max(0LL, targ - h[i]) * std::min(a + b, c);
            cnt -= std::max(0LL, targ - h[i]);
            ok[i] = true;
        }
        for (int i = 0; i < n; i++) {
            if (ok[i]) continue;
            long long res = targ - h[i];
            if (cnt > 0) {
                res -= cnt;
                ret += cnt * std::min(a + b, c);
                cnt = 0;
            }
            ret += res * a;
        }
        if (cnt > 0) ret += cnt * b;
        return ret;
    };
    long long lo = -1, hi = 1e9 + 1;

    // Check for large initial range in binary search
    check_binary_search_invariant(lo, hi);

    while (hi - lo > 1) {
        long long mid = lo + (hi - lo) / 2;
        long long l = func(mid);
        long long r = func(mid + 1);
        if (l > r)
            lo = mid;
        else
            hi = mid;
    }
    std::cout << std::min(func(lo), func(hi)) << std::endl;
    return 0;
}
```

### Explanation

- **High Variability Check**: Placed after reading inputs to ensure the variability in heights is within acceptable limits.
- **Expensive Operation Check**: Placed after reading costs to detect potentially expensive operations early.
- **Binary Search Range Check**: Placed before entering the binary search loop to ensure the range is not excessively large, potentially causing many iterations.

These checks serve as early indicators of performance issues, helping to prevent slow execution by alerting to problematic scenarios.

