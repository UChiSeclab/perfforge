system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Orac is studying number theory, and he is interested in the properties of divisors.

For two positive integers a and b, a is a divisor of b if and only if there exists an integer c, such that a⋅ c=b.

For n ≥ 2, we will denote as f(n) the smallest positive divisor of n, except 1.

For example, f(7)=7,f(10)=2,f(35)=5.

For the fixed integer n, Orac decided to add f(n) to n. 

For example, if he had an integer n=5, the new value of n will be equal to 10. And if he had an integer n=6, n will be changed to 8.

Orac loved it so much, so he decided to repeat this operation several times.

Now, for two positive integers n and k, Orac asked you to add f(n) to n exactly k times (note that n will change after each operation, so f(n) may change too) and tell him the final value of n.

For example, if Orac gives you n=5 and k=2, at first you should add f(5)=5 to n=5, so your new value of n will be equal to n=10, after that, you should add f(10)=2 to 10, so your new (and the final!) value of n will be equal to 12.

Orac may ask you these queries many times.

Input

The first line of the input is a single integer t\ (1≤ t≤ 100): the number of times that Orac will ask you.

Each of the next t lines contains two positive integers n,k\ (2≤ n≤ 10^6, 1≤ k≤ 10^9), corresponding to a query by Orac.

It is guaranteed that the total sum of n is at most 10^6. 

Output

Print t lines, the i-th of them should contain the final value of n in the i-th query by Orac.

Example

Input


3
5 1
8 2
3 4


Output


10
12
12

Note

In the first query, n=5 and k=1. The divisors of 5 are 1 and 5, the smallest one except 1 is 5. Therefore, the only operation adds f(5)=5 to 5, and the result is 10.

In the second query, n=8 and k=2. The divisors of 8 are 1,2,4,8, where the smallest one except 1 is 2, then after one operation 8 turns into 8+(f(8)=2)=10. The divisors of 10 are 1,2,5,10, where the smallest one except 1 is 2, therefore the answer is 10+(f(10)=2)=12.

In the third query, n is changed as follows: 3 → 6 → 8 → 10 → 12.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long f(long long n) {
  for (int i = 2; i <= n; i++) {
    if (n % i == 0) {
      return i;
    }
  }
  return n;
}
int main() {
  ios::sync_with_stdio(false);
  int t;
  cin >> t;
  long long n, k;
  while (t--) {
    cin >> n >> k;
    long long ans = n;
    while (k--) {
      long long d = f(n);
      ans += f(n);
      n = ans;
      if (d == 2) {
        ans += k * 2ll;
        break;
      }
    }
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
149197 9995


(G.2) Fast Input

1
297170 9995


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long n) { /* line 3 slow_hit_count: 4, fast_hit_count: 2 */
  for (int i = 2; i <= n; i++) { /* line 4 slow_hit_count: 298394, fast_hit_count: 2 */
    if (n % i == 0) { /* line 5 slow_hit_count: 298394, fast_hit_count: 2 */
      return i; /* line 6 slow_hit_count: 4, fast_hit_count: 2 */
    } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  while (t--) { /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> n >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    long long ans = n; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    while (k--) { /* line 19 slow_hit_count: 2, fast_hit_count: 1 */
      long long d = f(n); /* line 20 slow_hit_count: 2, fast_hit_count: 1 */
      ans += f(n); /* line 21 slow_hit_count: 2, fast_hit_count: 1 */
      n = ans; /* line 22 slow_hit_count: 2, fast_hit_count: 1 */
      if (d == 2) { /* line 23 slow_hit_count: 2, fast_hit_count: 1 */
        ans += k * 2ll; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the provided C program, we need to focus on the differences in line-level hit counts between the "slow" and "fast" inputs. The goal is to identify the expensive or inefficient code segments and derive performance-characterizing invariants that explain under what conditions the code slows down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `f(n)` function is the primary hotspot, with the loop inside it (lines 4-6) being hit significantly more often for the slow input compared to the fast input.
   - For the slow input, the loop inside `f(n)` runs a total of 298,394 times, whereas for the fast input, it only runs twice. This indicates that finding the smallest divisor for the slow input's initial `n` is significantly more computationally expensive.

2. **Pinpoint Inefficient Lines:**
   - Lines 4 and 5 within the `f(n)` function are executed an excessive number of times for the slow input due to the inefficient divisor search approach.
   - The inefficiency arises because the loop iterates from 2 up to `n`, checking each number to see if it divides `n`. This is not optimized for large numbers with small prime factors.

3. **Interaction with Data Structures and Loops:**
   - The interaction here is primarily between the loop in `f(n)` and the iterative process of updating `n` in the main loop (lines 19-25).
   - The critical issue is that `f(n)` is repeatedly called in a loop (`while (k--)`), which becomes expensive when the smallest divisor is large or difficult to find.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language conditions that likely cause slow execution, abstracted into performance-characterizing invariants:

1. **Inefficient Divisor Search:**
   - Natural Language Description: "If `n` is a large composite number with no small divisors, the search for the smallest divisor other than 1 becomes inefficient, leading to excessive computation in the loop. The program may slow down significantly when repeatedly applying the divisor addition operation with such `n`."
   
   - Suggested Threshold: Given that `n` can be as large as 10^6, the inefficiency is most pronounced when `n` lacks small divisors, which makes the divisor search loop iterate close to `n` itself. This can be mitigated by checking for divisibility only up to the square root of `n`.

2. **Repeated Calls to `f(n)`:**
   - Natural Language Description: "Repeated calls to `f(n)` can degrade performance, especially when `n` changes slowly towards a number with a small divisor like 2. If the loop in `f(n)` needs to check many numbers before finding a divisor, the computation may become very costly."

   - Suggested Threshold: This inefficiency is exacerbated when `f(n)` does not quickly reach a divisor, such as when `n` is a large prime or semi-prime number. Optimizing the divisor check or caching results could help.

By addressing these performance-characterizing invariants, potential slowdowns in the program could be mitigated, particularly by optimizing the divisor search or handling specific cases where `n` is likely to cause inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Orac is studying number theory, and he is interested in the properties of divisors.

For two positive integers a and b, a is a divisor of b if and only if there exists an integer c, such that a⋅ c=b.

For n ≥ 2, we will denote as f(n) the smallest positive divisor of n, except 1.

For example, f(7)=7,f(10)=2,f(35)=5.

For the fixed integer n, Orac decided to add f(n) to n. 

For example, if he had an integer n=5, the new value of n will be equal to 10. And if he had an integer n=6, n will be changed to 8.

Orac loved it so much, so he decided to repeat this operation several times.

Now, for two positive integers n and k, Orac asked you to add f(n) to n exactly k times (note that n will change after each operation, so f(n) may change too) and tell him the final value of n.

For example, if Orac gives you n=5 and k=2, at first you should add f(5)=5 to n=5, so your new value of n will be equal to n=10, after that, you should add f(10)=2 to 10, so your new (and the final!) value of n will be equal to 12.

Orac may ask you these queries many times.

Input

The first line of the input is a single integer t\ (1≤ t≤ 100): the number of times that Orac will ask you.

Each of the next t lines contains two positive integers n,k\ (2≤ n≤ 10^6, 1≤ k≤ 10^9), corresponding to a query by Orac.

It is guaranteed that the total sum of n is at most 10^6. 

Output

Print t lines, the i-th of them should contain the final value of n in the i-th query by Orac.

Example

Input


3
5 1
8 2
3 4


Output


10
12
12

Note

In the first query, n=5 and k=1. The divisors of 5 are 1 and 5, the smallest one except 1 is 5. Therefore, the only operation adds f(5)=5 to 5, and the result is 10.

In the second query, n=8 and k=2. The divisors of 8 are 1,2,4,8, where the smallest one except 1 is 2, then after one operation 8 turns into 8+(f(8)=2)=10. The divisors of 10 are 1,2,5,10, where the smallest one except 1 is 2, therefore the answer is 10+(f(10)=2)=12.

In the third query, n is changed as follows: 3 → 6 → 8 → 10 → 12.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the identified natural language invariants, we need to implement runtime checks to detect potential performance bottlenecks.

**Invariant 1: Inefficient Divisor Search**
- We need a condition to detect when the function `f(n)` takes too long to find a divisor, which happens when `n` is a large number with no small divisors.
  
**Invariant 2: Repeated Calls to `f(n)`**
- We need to check when `f(n)` is called repeatedly without quickly finding a divisor like 2.

Here are the checker code snippets implementing these invariants:

```cpp
// Check if the divisor search in `f(n)` becomes inefficient
void check_divisor_search_efficiency(long long n, int iterations) {
    if (iterations > 1000) { // Assuming 1000 as a threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - inefficient divisor search!" << endl;
        abort();
    }
}

// Check if `f(n)` is repeatedly called without finding a small divisor
void check_repeated_calls(long long n, long long k) {
    if (k > 100000 && n > 1000000) { // Hypothetical threshold for detecting repeated calls inefficiency
        cerr << "Warning: Performance bottleneck condition triggered - excessive repeated divisor calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

We will now integrate the checker code into the original C++ program at suitable points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if the divisor search in `f(n)` becomes inefficient
void check_divisor_search_efficiency(long long n, int iterations) {
    if (iterations > 1000) { // Assuming 1000 as a threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - inefficient divisor search!" << endl;
        abort();
    }
}

// Check if `f(n)` is repeatedly called without finding a small divisor
void check_repeated_calls(long long n, long long k) {
    if (k > 100000 && n > 1000000) { // Hypothetical threshold for detecting repeated calls inefficiency
        cerr << "Warning: Performance bottleneck condition triggered - excessive repeated divisor calculations!" << endl;
        abort();
    }
}

long long f(long long n) {
    int iterations = 0;
    for (int i = 2; i <= n; i++) {
        iterations++;
        if (n % i == 0) {
            check_divisor_search_efficiency(n, iterations); // Check for inefficient search
            return i;
        }
    }
    return n;
}

int main() {
    ios::sync_with_stdio(false);
    int t;
    cin >> t;
    long long n, k;
    while (t--) {
        cin >> n >> k;
        check_repeated_calls(n, k); // Check for repeated call inefficiency
        long long ans = n;
        while (k--) {
            long long d = f(n);
            ans += f(n);
            n = ans;
            if (d == 2) {
                ans += k * 2ll;
                break;
            }
        }
        cout << ans << endl;
    }
    return 0;
}
```

**Explanation:**
- The function `check_divisor_search_efficiency` is called within `f(n)` after each iteration of the divisor search loop to detect if the divisor search is taking an excessive number of iterations, potentially indicating inefficiency.
- The `check_repeated_calls` function is invoked before entering the main computation loop to detect situations where `f(n)` might be called excessively without quickly finding a small divisor like 2.

These checks should help in identifying and preventing performance bottlenecks, particularly for large values of `n` without small divisors and high values of `k`.

