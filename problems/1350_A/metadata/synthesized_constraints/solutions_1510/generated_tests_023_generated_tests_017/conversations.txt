system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Orac is studying number theory, and he is interested in the properties of divisors.

For two positive integers a and b, a is a divisor of b if and only if there exists an integer c, such that a⋅ c=b.

For n ≥ 2, we will denote as f(n) the smallest positive divisor of n, except 1.

For example, f(7)=7,f(10)=2,f(35)=5.

For the fixed integer n, Orac decided to add f(n) to n. 

For example, if he had an integer n=5, the new value of n will be equal to 10. And if he had an integer n=6, n will be changed to 8.

Orac loved it so much, so he decided to repeat this operation several times.

Now, for two positive integers n and k, Orac asked you to add f(n) to n exactly k times (note that n will change after each operation, so f(n) may change too) and tell him the final value of n.

For example, if Orac gives you n=5 and k=2, at first you should add f(5)=5 to n=5, so your new value of n will be equal to n=10, after that, you should add f(10)=2 to 10, so your new (and the final!) value of n will be equal to 12.

Orac may ask you these queries many times.

Input

The first line of the input is a single integer t\ (1≤ t≤ 100): the number of times that Orac will ask you.

Each of the next t lines contains two positive integers n,k\ (2≤ n≤ 10^6, 1≤ k≤ 10^9), corresponding to a query by Orac.

It is guaranteed that the total sum of n is at most 10^6. 

Output

Print t lines, the i-th of them should contain the final value of n in the i-th query by Orac.

Example

Input


3
5 1
8 2
3 4


Output


10
12
12

Note

In the first query, n=5 and k=1. The divisors of 5 are 1 and 5, the smallest one except 1 is 5. Therefore, the only operation adds f(5)=5 to 5, and the result is 10.

In the second query, n=8 and k=2. The divisors of 8 are 1,2,4,8, where the smallest one except 1 is 2, then after one operation 8 turns into 8+(f(8)=2)=10. The divisors of 10 are 1,2,5,10, where the smallest one except 1 is 2, therefore the answer is 10+(f(10)=2)=12.

In the third query, n is changed as follows: 3 → 6 → 8 → 10 → 12.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 2000000000;
const long long infLL = 9000000000000000000;
template <typename first, typename second>
ostream& operator<<(ostream& os, const pair<first, second>& p) {
  return os << "(" << p.first << ", " << p.second << ")";
}
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
  os << "{";
  for (auto it = v.begin(); it != v.end(); ++it) {
    if (it != v.begin()) os << ", ";
    os << *it;
  }
  return os << "}";
}
template <typename T>
ostream& operator<<(ostream& os, const set<T>& v) {
  os << "[";
  for (auto it = v.begin(); it != v.end(); ++it) {
    if (it != v.begin()) os << ",";
    os << *it;
  }
  return os << "]";
}
template <typename T>
ostream& operator<<(ostream& os, const multiset<T>& v) {
  os << "[";
  for (auto it = v.begin(); it != v.end(); ++it) {
    if (it != v.begin()) os << ", ";
    os << *it;
  }
  return os << "]";
}
template <typename first, typename second>
ostream& operator<<(ostream& os, const map<first, second>& v) {
  os << "[";
  for (auto it = v.begin(); it != v.end(); ++it) {
    if (it != v.begin()) os << ", ";
    os << it->first << " = " << it->second;
  }
  return os << "]";
}
void faltu() { cerr << '\n'; }
template <typename T>
void faltu(T a[], int n) {
  for (int i = 0; i < n; ++i) cerr << a[i] << ' ';
  cerr << '\n';
}
template <typename T, typename... hello>
void faltu(T arg, const hello&... rest) {
  cerr << arg << ' ';
  faltu(rest...);
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  int t;
  cin >> t;
  while (t--) {
    long long n, k;
    cin >> n >> k;
    if (n % 2 == 0) {
      cout << n + 2 * k << '\n';
      continue;
    }
    long long hmm;
    for (int i = 2; i <= n; ++i) {
      if (n % i == 0) {
        hmm = i;
        break;
      }
    }
    n += hmm;
    long long ans = n + (k - 1) * 2;
    cout << ans << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
149197 9995


(G.2) Fast Input

1
50074 9995


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 2000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long infLL = 9000000000000000000; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename first, typename second> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pair<first, second>& p) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return os << "(" << p.first << ", " << p.second << ")"; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const vector<T>& v) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  os << "{"; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = v.begin(); it != v.end(); ++it) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (it != v.begin()) os << ", "; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    os << *it; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return os << "}"; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const set<T>& v) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  os << "["; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = v.begin(); it != v.end(); ++it) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    if (it != v.begin()) os << ","; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    os << *it; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return os << "]"; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const multiset<T>& v) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  os << "["; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = v.begin(); it != v.end(); ++it) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    if (it != v.begin()) os << ", "; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    os << *it; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return os << "]"; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
template <typename first, typename second> /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const map<first, second>& v) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  os << "["; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = v.begin(); it != v.end(); ++it) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (it != v.begin()) os << ", "; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    os << it->first << " = " << it->second; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  return os << "]"; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
void faltu() { cerr << '\n'; } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
void faltu(T a[], int n) { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) cerr << a[i] << ' '; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '\n'; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... hello> /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
void faltu(T arg, const hello&... rest) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << arg << ' '; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  faltu(rest...); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 63 slow_hit_count: 2, fast_hit_count: 2 */
    long long n, k; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> k; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
    if (n % 2 == 0) { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
      cout << n + 2 * k << '\n'; /* line 67 slow_hit_count: 0, fast_hit_count: 1 */
      continue; /* line 68 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    long long hmm; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 2; i <= n; ++i) { /* line 71 slow_hit_count: 149196, fast_hit_count: 0 */
      if (n % i == 0) { /* line 72 slow_hit_count: 149196, fast_hit_count: 0 */
        hmm = i; /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
        break; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    n += hmm; /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
    long long ans = n + (k - 1) * 2; /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
    cout << ans << '\n'; /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 81 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts

- **Line 67-68**: This block is executed only when `n` is even. In the fast input, this path is taken, indicating that for even `n`, the computation is straightforward and efficient.
- **Line 71-74**: This loop is the primary source of slow performance for the slow input. It iterates from `2` to `n`, finding the smallest positive divisor of `n` greater than `1`. The slow input `n = 149197` is odd and has a high hit count on this loop, indicating that finding the smallest divisor takes many iterations, likely because `n` is a large prime.
  
### Interaction with Data Structures and Input Constraints

- Since `n` is at most `10^6`, the loop for finding the smallest divisor can potentially iterate up to `n` times in the worst-case scenario, particularly problematic for large prime numbers.
- The `slow` input is indicative of a scenario where `n` is a large prime, requiring maximum iterations to find the divisor, whereas the `fast` input likely benefits from `n` being even, directly utilizing the efficient path.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Large Prime Number Trap**:
   - Natural Language: "When `n` is a large prime number, the loop for finding the smallest divisor becomes expensive, iterating nearly up to `n`. This leads to significant slowdowns due to the vast number of iterations."
   - This scenario is particularly problematic because it doesn't benefit from any early exits in the loop and requires checking each possible divisor up to `n`.

2. **Even Numbers Efficiency**:
   - Natural Language: "If `n` is even, the program efficiently computes the result in constant time, as the smallest divisor is always `2`, allowing direct computation of the final result."

3. **Near Prime Composite Numbers**:
   - Natural Language: "Numbers that are not prime but have their smallest divisor close to `n` also lead to significant work in the loop, similar to prime numbers, as they require many iterations to resolve the divisor."

By focusing on these patterns, performance can be better predicted and managed. For example, incorporating an efficient primality test or immediately checking for divisibility by small primes could mitigate the performance cost for large prime `n`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Orac is studying number theory, and he is interested in the properties of divisors.

For two positive integers a and b, a is a divisor of b if and only if there exists an integer c, such that a⋅ c=b.

For n ≥ 2, we will denote as f(n) the smallest positive divisor of n, except 1.

For example, f(7)=7,f(10)=2,f(35)=5.

For the fixed integer n, Orac decided to add f(n) to n. 

For example, if he had an integer n=5, the new value of n will be equal to 10. And if he had an integer n=6, n will be changed to 8.

Orac loved it so much, so he decided to repeat this operation several times.

Now, for two positive integers n and k, Orac asked you to add f(n) to n exactly k times (note that n will change after each operation, so f(n) may change too) and tell him the final value of n.

For example, if Orac gives you n=5 and k=2, at first you should add f(5)=5 to n=5, so your new value of n will be equal to n=10, after that, you should add f(10)=2 to 10, so your new (and the final!) value of n will be equal to 12.

Orac may ask you these queries many times.

Input

The first line of the input is a single integer t\ (1≤ t≤ 100): the number of times that Orac will ask you.

Each of the next t lines contains two positive integers n,k\ (2≤ n≤ 10^6, 1≤ k≤ 10^9), corresponding to a query by Orac.

It is guaranteed that the total sum of n is at most 10^6. 

Output

Print t lines, the i-th of them should contain the final value of n in the i-th query by Orac.

Example

Input


3
5 1
8 2
3 4


Output


10
12
12

Note

In the first query, n=5 and k=1. The divisors of 5 are 1 and 5, the smallest one except 1 is 5. Therefore, the only operation adds f(5)=5 to 5, and the result is 10.

In the second query, n=8 and k=2. The divisors of 8 are 1,2,4,8, where the smallest one except 1 is 2, then after one operation 8 turns into 8+(f(8)=2)=10. The divisors of 10 are 1,2,5,10, where the smallest one except 1 is 2, therefore the answer is 10+(f(10)=2)=12.

In the third query, n is changed as follows: 3 → 6 → 8 → 10 → 12.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Runtime Checks in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ snippets to check these conditions at runtime:

1. **Large Prime Number Trap**:
   ```cpp
   void check_large_prime_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered - large prime number detected!" << endl;
           abort();
       }
   }
   ```

2. **Even Numbers Efficiency**:
   - This invariant doesn't require a runtime check, as it describes an efficient path in the code.

3. **Near Prime Composite Numbers**:
   ```cpp
   void check_near_prime_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered - near prime composite number detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code with the Original Program

Below is the original C++ code instrumented with the above runtime checks to detect slow performance scenarios:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int inf = 2000000000;
const long long infLL = 9000000000000000000;

// Checkers for performance bottlenecks
void check_large_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - large prime number detected!" << endl;
        abort();
    }
}

void check_near_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered - near prime composite number detected!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int t;
    cin >> t;
    while (t--) {
        long long n, k;
        cin >> n >> k;

        // Checking for large prime or near-prime composite numbers
        bool isLargePrimeOrNearPrime = true;
        for (int i = 2; i <= sqrt(n); ++i) {
            if (n % i == 0) {
                isLargePrimeOrNearPrime = false;
                break;
            }
        }
        check_large_prime_invariant(isLargePrimeOrNearPrime && n > 100000);
        check_near_prime_invariant(isLargePrimeOrNearPrime && n <= 100000);

        if (n % 2 == 0) {
            cout << n + 2 * k << '\n';
            continue;
        }
        long long hmm;
        for (int i = 2; i <= n; ++i) {
            if (n % i == 0) {
                hmm = i;
                break;
            }
        }
        n += hmm;
        long long ans = n + (k - 1) * 2;
        cout << ans << '\n';
    }
}
```

### Explanation of Inserts

- **Large Prime Check**: After reading `n`, we check whether `n` is a large prime by attempting to divide it by all integers up to its square root. If no divisors are found and `n` is significantly large (greater than 100,000), it is flagged as a potential performance bottleneck.

- **Near Prime Composite Check**: Similarly, this check is used to identify numbers that may act like primes (i.e., numbers with few divisors close to `n`).

These checks help to detect inputs that could cause the program to run slowly, thereby providing early warnings about potential performance issues.

