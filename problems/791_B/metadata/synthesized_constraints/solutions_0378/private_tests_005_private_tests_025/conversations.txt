system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int i, j, a, b, n, m;
  cin >> n >> m;
  vector<int> v[n + 1];
  for (i = 1; i <= n; i++) {
    v[i].push_back(i);
  }
  for (i = 0; i < m; i++) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (i = 1; i <= n; i++) {
    sort(v[i].begin(), v[i].end());
  }
  int flag = 1, count = 0;
  ;
  for (i = 1; i <= n; i++) {
    for (j = 0; j < v[i].size(); j++) {
      if (!equal(v[i].begin(), v[i].end(), v[v[i][j]].begin())) {
        flag = 0;
        break;
      }
    }
    if (flag == 0) {
      cout << "NO";
      break;
    }
  }
  if (flag == 1) {
    cout << "YES";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, a, b, n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v[n + 1]; /* line 6 slow_hit_count: 300004, fast_hit_count: 10 */
  for (i = 1; i <= n; i++) { /* line 7 slow_hit_count: 150001, fast_hit_count: 4 */
    v[i].push_back(i); /* line 8 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < m; i++) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> a >> b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    v[a].push_back(b); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    v[b].push_back(a); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 15 slow_hit_count: 150001, fast_hit_count: 4 */
    sort(v[i].begin(), v[i].end()); /* line 16 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int flag = 1, count = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 20 slow_hit_count: 150001, fast_hit_count: 4 */
    for (j = 0; j < v[i].size(); j++) { /* line 21 slow_hit_count: 300000, fast_hit_count: 6 */
      if (!equal(v[i].begin(), v[i].end(), v[v[i][j]].begin())) { /* line 22 slow_hit_count: 150000, fast_hit_count: 3 */
        flag = 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag == 0) { /* line 27 slow_hit_count: 150000, fast_hit_count: 3 */
      cout << "NO"; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag == 1) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the problem of diagnosing performance bottlenecks in the provided C program, we need to analyze the line-level hit counts and understand the interactions with the program's data structures and logic. Let's go through the phases described in the task:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts**:
   - The slow input has significantly higher hit counts for lines involved in initializing and sorting vectors associated with each member, as well as checking equality among these vectors.
   - Lines 6 through 8 are hit 150,000 times in the slow input versus only a few times in the fast input, indicating that the initialization of vectors is a factor.
   - Lines 15 and 16, involving sorting the vectors, also show excessive hit counts in the slow input.
   - Lines 20-22, where the program checks for equality among member vectors, also have significantly higher hit counts in the slow input.

2. **Pinpointing Critical Lines**:
   - **Vector Initialization and Sorting**: The loop iterating through all members to initialize and then sort their friendship lists is inefficient, especially when each list is very small or empty.
   - **Equality Checking in Nested Loops**: The nested loop checking for equality between vectors is a potential bottleneck, as it involves redundant checks given a lack of actual friendships.

3. **Data Structure Interaction**:
   - The program uses a vector of vectors to represent friendships, but it inefficiently initializes this structure to include each member as their friend and sorts these small vectors.
   - The equality checks for transitive friendships (X-Y, Y-Z implies X-Z) are largely redundant when `m = 0`, making the operations unnecessary.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Initialization and Sorting Overhead**:
   - "When the number of members `n` is large, but the number of friend pairs `m` is zero or very low, the program performs unnecessary initializations and sorting, leading to inefficiency."

2. **Redundant Equality Checks**:
   - "If there are no friendships (`m = 0`), then checking for transitive friendship relations is redundant, causing unnecessary computation."

3. **Inefficient Use of Sorting**:
   - "Sorting operations are performed on vectors that are initialized to contain only single elements or are empty, which results in inefficient use of computational resources."

These invariants help us understand that the program becomes inefficient under conditions where there are many members but few to no connections between them, leading to redundant processing of data structures that do not contribute to solving the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we implement the natural language invariants derived earlier into C++ checker code.

### Phase 3: Implementing Checker Code in C++

**Invariant 1: Initialization and Sorting Overhead**

Natural Language Description: 
"When the number of members `n` is large, but the number of friend pairs `m` is zero or very low, the program performs unnecessary initializations and sorting, leading to inefficiency."

```cpp
void check_initialization_and_sorting_invariant(int n, int m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - unnecessary initialization and sorting with no friendships." << endl;
        abort();
    }
}
```

**Invariant 2: Redundant Equality Checks**

Natural Language Description:
"If there are no friendships (`m = 0`), then checking for transitive friendship relations is redundant, causing unnecessary computation."

```cpp
void check_redundant_equality_checks(int m) {
    if (m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant equality checks with no friendships." << endl;
        abort();
    }
}
```

**Invariant 3: Inefficient Use of Sorting**

Natural Language Description:
"Sorting operations are performed on vectors that are initialized to contain only single elements or are empty, which results in inefficient use of computational resources."

```cpp
void check_inefficient_sorting(int n, const vector<int>* v) {
    for (int i = 1; i <= n; ++i) {
        if (v[i].size() <= 1) {
            cerr << "Warning: Performance bottleneck condition triggered - inefficient sorting on small vectors." << endl;
            abort();
        }
    }
}
```

Next, we'll move on to Phase 4, where we integrate these checks into the original C++ program.

### Phase 4: Integrating Checker Code into the Original Program

Here is the instrumented program with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_initialization_and_sorting_invariant(int n, int m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - unnecessary initialization and sorting with no friendships." << endl;
        abort();
    }
}

void check_redundant_equality_checks(int m) {
    if (m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant equality checks with no friendships." << endl;
        abort();
    }
}

void check_inefficient_sorting(int n, const vector<int>* v) {
    for (int i = 1; i <= n; ++i) {
        if (v[i].size() <= 1) {
            cerr << "Warning: Performance bottleneck condition triggered - inefficient sorting on small vectors." << endl;
            abort();
        }
    }
}

int main() {
    int i, j, a, b, n, m;
    cin >> n >> m;
    
    // Check for initialization and sorting invariant
    check_initialization_and_sorting_invariant(n, m);
    
    vector<int> v[n + 1];
    for (i = 1; i <= n; i++) {
        v[i].push_back(i);
    }
    for (i = 0; i < m; i++) {
        cin >> a >> b;
        v[a].push_back(b);
        v[b].push_back(a);
    }
    
    // Check for inefficient sorting invariant
    check_inefficient_sorting(n, v);
    
    for (i = 1; i <= n; i++) {
        sort(v[i].begin(), v[i].end());
    }
    
    // Check for redundant equality checks invariant
    check_redundant_equality_checks(m);
    
    int flag = 1;
    for (i = 1; i <= n; i++) {
        for (j = 0; j < v[i].size(); j++) {
            if (!equal(v[i].begin(), v[i].end(), v[v[i][j]].begin())) {
                flag = 0;
                break;
            }
        }
        if (flag == 0) {
            cout << "NO";
            break;
        }
    }
    if (flag == 1) {
        cout << "YES";
    }
}
```

### Comments on Integration
- **Initialization and Sorting Check**: This is placed right after reading inputs to prevent unnecessary initialization and sorting when the conditions are met.
- **Redundant Equality Check**: This is placed before the equality checking loop to avoid unnecessary checks when there are no friendships.
- **Inefficient Sorting Check**: This is placed just before the sorting operations to catch inefficient sorting attempts on small vectors. 

These checks are designed to help a fuzzer identify performance issues by triggering when inefficient conditions are met.

