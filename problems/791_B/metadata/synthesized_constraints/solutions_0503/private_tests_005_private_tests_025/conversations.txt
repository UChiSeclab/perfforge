system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long M = 1e9 + 7;
class graph {
 public:
  vector<long long> *g;
  long long n;
  graph(long long v) {
    n = v;
    g = new vector<long long>[n];
  }
  void addedge(long long u, long long v) {
    g[u].push_back(v);
    g[v].push_back(u);
  }
  bool BFS(long long u, long long vis[]) {
    queue<long long> q;
    q.push(u);
    vector<long long> v;
    while (!q.empty()) {
      long long x = q.front();
      q.pop();
      if (vis[x] == 0) {
        vis[x] = 1;
        v.push_back(x);
        for (long long i = 0; i < g[x].size(); i++) q.push(g[x][i]);
      }
    }
    long long x = v.size();
    for (long long i = 0; i < x; i++) {
      if (g[v[i]].size() != x - 1) return false;
    }
    return true;
  }
};
void solve() {
  long long n, m;
  cin >> n >> m;
  graph G(n + 1);
  for (long long i = 1; i <= m; i++) {
    long long u, v;
    cin >> u >> v;
    G.addedge(u, v);
  }
  long long vis[n + 1];
  memset(vis, 0, sizeof(vis));
  for (long long i = 1; i <= n; i++) {
    if (vis[i] == 0) {
      if (!G.BFS(i, vis)) {
        cout << "NO" << '\n';
        return;
      }
    }
  }
  cout << "YES" << '\n';
}
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long M = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
class graph { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> *g; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  graph(long long v) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    n = v; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    g = new vector<long long>[n]; /* line 10 slow_hit_count: 150002, fast_hit_count: 5 */
  } /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  void addedge(long long u, long long v) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    g[u].push_back(v); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    g[v].push_back(u); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  bool BFS(long long u, long long vis[]) { /* line 16 slow_hit_count: 150000, fast_hit_count: 3 */
    queue<long long> q; /* line 17 slow_hit_count: 300000, fast_hit_count: 6 */
    q.push(u); /* line 18 slow_hit_count: 150000, fast_hit_count: 3 */
    vector<long long> v; /* line 19 slow_hit_count: 300000, fast_hit_count: 6 */
    while (!q.empty()) { /* line 20 slow_hit_count: 300000, fast_hit_count: 6 */
      long long x = q.front(); /* line 21 slow_hit_count: 150000, fast_hit_count: 3 */
      q.pop(); /* line 22 slow_hit_count: 150000, fast_hit_count: 3 */
      if (vis[x] == 0) { /* line 23 slow_hit_count: 150000, fast_hit_count: 3 */
        vis[x] = 1; /* line 24 slow_hit_count: 150000, fast_hit_count: 3 */
        v.push_back(x); /* line 25 slow_hit_count: 150000, fast_hit_count: 3 */
        for (long long i = 0; i < g[x].size(); i++) q.push(g[x][i]); /* line 26 slow_hit_count: 150000, fast_hit_count: 3 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = v.size(); /* line 29 slow_hit_count: 150000, fast_hit_count: 3 */
    for (long long i = 0; i < x; i++) { /* line 30 slow_hit_count: 300000, fast_hit_count: 6 */
      if (g[v[i]].size() != x - 1) return false; /* line 31 slow_hit_count: 150000, fast_hit_count: 3 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 33 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  graph G(n + 1); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= m; i++) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    long long u, v; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> u >> v; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    G.addedge(u, v); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  long long vis[n + 1]; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  memset(vis, 0, sizeof(vis)); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 47 slow_hit_count: 150001, fast_hit_count: 4 */
    if (vis[i] == 0) { /* line 48 slow_hit_count: 150000, fast_hit_count: 3 */
      if (!G.BFS(i, vis)) { /* line 49 slow_hit_count: 150000, fast_hit_count: 3 */
        cout << "NO" << '\n'; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        return; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "YES" << '\n'; /* line 55 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:
1. **Initialization of Graph (`graph` constructor)**:
   - **Line 10**: `g = new vector<long long>[n];` shows 150002 hits for the slow input and 5 hits for the fast input.
   - This line is heavily hit because `n` in the slow input is much larger, causing more vector initializations.

2. **Breadth-First Search (`BFS` method)**:
   - **Lines 16-33**: The whole `BFS` function has significantly more hits for the slow input compared to the fast input (e.g., Line 16 has 150,000 hits for the slow input vs. 3 for the fast input).
   - This indicates that BFS is called repeatedly for each unvisited node, contributing to slow execution.

3. **Main Loop in `solve()`**:
   - **Line 47**: This loop iterates over all members. The high hit count (150,001 for slow, 4 for fast) implies that it is a significant contributor to execution time.

#### Key Observations:
- The program handles each node separately, and the BFS traversal is performed for each one, which is inefficient for large inputs with no edges.
- The high hit counts in `BFS` suggest that many nodes are processed even when no edges exist, thus contributing to unnecessary operations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant about Graph Initialization:**
   - **Natural Language Description**: "When the number of members `n` is large, the initialization of data structures can become costly, especially if the graph has few or no edges, leading to significant memory usage without substantial connectivity."
   - **Reasoning**: Allocating a vector for every node when the graph is sparse or empty results in unnecessary memory operations.

2. **Invariant about BFS Calls:**
   - **Natural Language Description**: "If the graph is very sparse or has no edges, and `n` is large, the BFS function will be called repeatedly for each individual node without making progress, resulting in high computational cost."
   - **Reasoning**: When the adjacency lists (edges) are empty, BFS still traverses all nodes, incurring time complexity that scales with the number of nodes.

3. **Invariant about Main Loop Execution:**
   - **Natural Language Description**: "When `n` is large and most nodes are isolated, the main loop for checking node connectivity will perform redundant and expensive operations."
   - **Reasoning**: The loop iterates over all nodes, which is inefficient when no connections (edges) exist between them.

These invariants highlight circumstances in which the code enters a slow execution path, focusing on large node counts coupled with a lack of edges, which is pertinent to cases like the slow input. These conditions abstractly capture scenarios that lead to inefficiencies, avoiding reliance on specific numeric values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the runtime checks based on the natural language invariants we previously identified:

1. **Invariant about Graph Initialization:**
   - This invariant checks if the network is large while having few or no edges, indicating potential inefficiency due to unnecessary memory allocation.

```cpp
void check_graph_initialization_invariant(long long n, long long m) {
    if (n > 100000 && m < n / 10) { // Arbitrary threshold: large graph with very few edges
        cerr << "Warning: Performance bottleneck due to large graph with few edges!" << endl;
        abort();
    }
}
```

2. **Invariant about BFS Calls:**
   - This invariant checks whether the BFS function will be called redundantly when the graph is sparse.

```cpp
void check_bfs_invariant(long long n, long long m) {
    if (n > 100000 && m == 0) { // Specific case: large number of nodes, no edges
        cerr << "Warning: Performance bottleneck due to redundant BFS calls!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Original Program

Now, let's integrate these checks into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long M = 1e9 + 7;

class graph {
 public:
  vector<long long> *g;
  long long n;
  graph(long long v) {
    n = v;
    g = new vector<long long>[n];
  }
  void addedge(long long u, long long v) {
    g[u].push_back(v);
    g[v].push_back(u);
  }
  bool BFS(long long u, long long vis[]) {
    queue<long long> q;
    q.push(u);
    vector<long long> v;
    while (!q.empty()) {
      long long x = q.front();
      q.pop();
      if (vis[x] == 0) {
        vis[x] = 1;
        v.push_back(x);
        for (long long i = 0; i < g[x].size(); i++) q.push(g[x][i]);
      }
    }
    long long x = v.size();
    for (long long i = 0; i < x; i++) {
      if (g[v[i]].size() != x - 1) return false;
    }
    return true;
  }
};

void check_graph_initialization_invariant(long long n, long long m) {
    if (n > 100000 && m < n / 10) { // Arbitrary threshold: large graph with very few edges
        cerr << "Warning: Performance bottleneck due to large graph with few edges!" << endl;
        abort();
    }
}

void check_bfs_invariant(long long n, long long m) {
    if (n > 100000 && m == 0) { // Specific case: large number of nodes, no edges
        cerr << "Warning: Performance bottleneck due to redundant BFS calls!" << endl;
        abort();
    }
}

void solve() {
  long long n, m;
  cin >> n >> m;

  // Insert invariant checks after reading inputs
  check_graph_initialization_invariant(n, m);
  check_bfs_invariant(n, m);

  graph G(n + 1);
  for (long long i = 1; i <= m; i++) {
    long long u, v;
    cin >> u >> v;
    G.addedge(u, v);
  }
  long long vis[n + 1];
  memset(vis, 0, sizeof(vis));
  for (long long i = 1; i <= n; i++) {
    if (vis[i] == 0) {
      if (!G.BFS(i, vis)) {
        cout << "NO" << '\n';
        return;
      }
    }
  }
  cout << "YES" << '\n';
}

signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```

### Explanation:
- **Invariant Checks**: The checks are placed after reading the input values for `n` and `m`, ensuring that they trigger before any heavy computation begins.
- **Graph Initialization Invariant**: Detects potential inefficiencies in memory allocation for large graphs with few edges.
- **BFS Invariant**: Detects redundant BFS calls when there are many nodes but no connections, which could lead to unnecessary traversal operations.
- **Abort on Trigger**: Both checks will `abort()` execution if the conditions are met, providing clear feedback about potential performance issues. 

This integration will help identify scenarios where the program might enter a slow execution path due to the reasons captured by the invariants, improving overall performance diagnosis.

