system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
class UnionFind {
 private:
  vector<int> p, r;

 public:
  UnionFind(int n) {
    for (int i = 0; i < n; i++) {
      r.push_back(0);
      p.push_back(i);
    }
  }
  int findSet(int n) { return p[n] != n ? (p[n] = findSet(p[n])) : n; }
  void merge(int x, int y) {
    int s1 = findSet(x);
    int s2 = findSet(y);
    if (s1 != s2) {
      if (r[s1] > r[s2]) {
        p[s2] = s1;
      } else {
        p[s1] = s2;
        if (r[s2] == r[s1]) {
          r[s2]++;
        }
      }
    }
  }
};
int main() {
  int n, m;
  cin >> n >> m;
  int a, b;
  vector<vector<int> > ma(n + 1);
  UnionFind uf(n + 1);
  vector<int> c(n + 1);
  for (int i = 0; i <= n; i++) {
    c[i] = 0;
  }
  while (m--) {
    cin >> a >> b;
    uf.merge(a, b);
    c[a]++;
    c[b]++;
  }
  for (int i = 1; i <= n; i++) {
    ma[uf.findSet(i)].push_back(i);
  }
  for (auto li : ma) {
    if (li.size() >= 3) {
      for (auto node : li) {
        if (c[node] != li.size() - 1) {
          cout << "NO" << endl;
          return 0;
        }
      }
    }
  }
  cout << "YES" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
class UnionFind { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> p, r; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  UnionFind(int n) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 9 slow_hit_count: 150002, fast_hit_count: 5 */
      r.push_back(0); /* line 10 slow_hit_count: 150001, fast_hit_count: 4 */
      p.push_back(i); /* line 11 slow_hit_count: 150001, fast_hit_count: 4 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int findSet(int n) { return p[n] != n ? (p[n] = findSet(p[n])) : n; } /* line 14 slow_hit_count: 150000, fast_hit_count: 3 */
  void merge(int x, int y) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    int s1 = findSet(x); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    int s2 = findSet(y); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (s1 != s2) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      if (r[s1] > r[s2]) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        p[s2] = s1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        p[s1] = s2; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        if (r[s2] == r[s1]) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
          r[s2]++; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<int> > ma(n + 1); /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
  UnionFind uf(n + 1); /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> c(n + 1); /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i <= n; i++) { /* line 37 slow_hit_count: 150002, fast_hit_count: 5 */
    c[i] = 0; /* line 38 slow_hit_count: 150001, fast_hit_count: 4 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  while (m--) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> a >> b; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    uf.merge(a, b); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    c[a]++; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    c[b]++; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 46 slow_hit_count: 150001, fast_hit_count: 4 */
    ma[uf.findSet(i)].push_back(i); /* line 47 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto li : ma) { /* line 49 slow_hit_count: 150002, fast_hit_count: 5 */
    if (li.size() >= 3) { /* line 50 slow_hit_count: 150001, fast_hit_count: 4 */
      for (auto node : li) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        if (c[node] != li.size() - 1) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
          cout << "NO" << endl; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "YES" << endl; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program and derive performance-characterizing invariants, let's follow the outlined phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - **Line 9 (UnionFind constructor):** The loop initializing the `UnionFind` structure is hit 150002 times for the slow input, compared to just 5 times for the fast input. This suggests that initialization time scales with `n`.
   - **Line 37 and Line 46 (main function):** These lines iterate over all members (`n + 1`), which results in a high number of executions (150002 for the slow input).

2. **Pinpoint Lines with More Hits Under the Slow Input:**
   - **Initialization Loop (Lines 9-11):** The UnionFind arrays `p` and `r` are being populated. The number of hits corresponds to `n`, indicating this scales linearly with the number of members.
   - **FindSet Operations (Line 14 and Line 47):** These lines involve traversing the parent array to find the root of each set, which also scales with `n`.

3. **Analysis of Interaction with Data Structures:**
   - The `UnionFind` operations are heavily dependent on the size of `n`, and particularly the `findSet` function can become a bottleneck if the data structure is not balanced (though path compression is used).
   - The adjacency representation using vector `ma` involves further operations proportional to `n`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**
   - **Invariant 1: Large Initialization Overhead**
     - "If the number of members (`n`) is large, the overhead of initializing the `UnionFind` structure can cause performance slowdown."
   - **Invariant 2: Linear Traversal in UnionFind**
     - "If `n` is large, and each member requires a `findSet` operation, the performance can degrade due to the high number of individual set finds, especially when the structure isn't well balanced."
   - **Invariant 3: High Iteration Cost in Main Loop**
     - "When iterating over all members to construct and validate the adjacency structure, large values of `n` can result in many operations, slowing down the execution."

2. **Broad and Realistic Triggers:**
   - The input constraint of `n <= 150,000` means that the algorithm's performance will largely be dictated by how efficiently it can handle operations proportional to `n`.
   - The absence of friendships (`m = 0` in the slow input) means every member is in its own disjoint set, which maximizes the operations required for initialization and validation.

### Conclusion

The performance bottlenecks primarily arise from the linear scaling with `n` during initialization and traversal operations in the `UnionFind` data structure and the adjacency list construction. These operations are inherently O(n) due to the nature of the input constraints. The critical factor is the size of `n`, which directly influences the number of operations and can trigger significant slowdowns when near the upper constraint limit.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: Let's translate the performance-characterizing invariants derived in Phase 2 into C++ checker code, and then integrate them into the original C++ program.

### Phase 3: Implementing the Natural Language Invariants in C++

**Invariant 1: Large Initialization Overhead**

- **Description:** When `n` is large, the overhead of initializing the `UnionFind` structure can cause performance slowdown.
- **Checker Code:**
  ```cpp
  void check_initialization_invariant(int n) {
      if (n > 100000) {  // Set a threshold for potential slow initialization
          cerr << "Warning: Initialization invariant triggered - large number of members" << endl;
          abort();
      }
  }
  ```

**Invariant 2: Linear Traversal in UnionFind**

- **Description:** If `n` is large, and each member requires a `findSet` operation, the performance can degrade due to the high number of individual set finds.
- **Checker Code:**
  ```cpp
  void check_findSet_invariant(int n, int findSetCalls) {
      if (findSetCalls > n * 0.9) {  // Check if findSet is called nearly n times
          cerr << "Warning: findSet invariant triggered - excessive findSet calls" << endl;
          abort();
      }
  }
  ```

**Invariant 3: High Iteration Cost in Main Loop**

- **Description:** When iterating over all members to construct and validate the adjacency structure, large values of `n` can result in many operations.
- **Checker Code:**
  ```cpp
  void check_iteration_invariant(int n) {
      if (n > 100000) {  // Set a threshold for iterations over a large set
          cerr << "Warning: Iteration invariant triggered - high iteration count" << endl;
          abort();
      }
  }
  ```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program. 

```cpp
#include <bits/stdc++.h>
using namespace std;

class UnionFind {
 private:
  vector<int> p, r;

 public:
  UnionFind(int n) {
    for (int i = 0; i < n; i++) {
      r.push_back(0);
      p.push_back(i);
    }
  }
  int findSet(int n) { return p[n] != n ? (p[n] = findSet(p[n])) : n; }
  void merge(int x, int y) {
    int s1 = findSet(x);
    int s2 = findSet(y);
    if (s1 != s2) {
      if (r[s1] > r[s2]) {
        p[s2] = s1;
      } else {
        p[s1] = s2;
        if (r[s2] == r[s1]) {
          r[s2]++;
        }
      }
    }
  }
};

// Checker functions for performance invariants
void check_initialization_invariant(int n) {
    if (n > 100000) {
        cerr << "Warning: Initialization invariant triggered - large number of members" << endl;
        abort();
    }
}

void check_findSet_invariant(int findSetCalls, int n) {
    if (findSetCalls > n * 0.9) {
        cerr << "Warning: findSet invariant triggered - excessive findSet calls" << endl;
        abort();
    }
}

void check_iteration_invariant(int n) {
    if (n > 100000) {
        cerr << "Warning: Iteration invariant triggered - high iteration count" << endl;
        abort();
    }
}

int main() {
  int n, m;
  cin >> n >> m;

  // Check initialization invariant
  check_initialization_invariant(n);

  int a, b;
  vector<vector<int> > ma(n + 1);
  UnionFind uf(n + 1);
  vector<int> c(n + 1, 0);

  while (m--) {
    cin >> a >> b;
    uf.merge(a, b);
    c[a]++;
    c[b]++;
  }

  int findSetCalls = 0;
  for (int i = 1; i <= n; i++) {
    ma[uf.findSet(i)].push_back(i);
    findSetCalls++;
  }

  // Check findSet invariant
  check_findSet_invariant(findSetCalls, n);

  // Check iteration invariant
  check_iteration_invariant(n);

  for (auto li : ma) {
    if (li.size() >= 3) {
      for (auto node : li) {
        if (c[node] != li.size() - 1) {
          cout << "NO" << endl;
          return 0;
        }
      }
    }
  }
  cout << "YES" << endl;
  return 0;
}
```

**Comments on Integration:**

- The check for initialization invariant is placed right after reading the inputs. This ensures we capture any potential large initialization early.
- The findSet invariant is checked after the loop that populates the adjacency list, keeping track of how many times `findSet()` is called.
- The iteration invariant is checked after all necessary iterations in `main()` and `UnionFind` operations, ensuring it doesn't interfere with the loop performance.

This integration ensures that we identify potential performance bottlenecks while keeping the checks outside of tight, performance-critical loops.

