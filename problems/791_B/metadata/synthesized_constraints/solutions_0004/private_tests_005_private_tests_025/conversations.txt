system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization("unroll-loops")
using namespace std;
int o[150000];
struct dsu {
  int *parent;
  int *size;
  void init(int n) {
    parent = new int[n];
    size = new int[n];
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
      size[i] = 1;
      o[i] = 0;
    }
  }
  int p(int x) {
    if (parent[x] == x) return x;
    return parent[x] = p(parent[x]);
  }
  void unite(int x, int y) {
    int supx = p(x);
    int supy = p(y);
    if (supx != supy) {
      if (size[x] > size[y]) {
        parent[supy] = supx;
        size[supx] += size[supy];
      } else {
        parent[supx] = supy;
        size[supy] += size[supx];
      }
    }
  }
};
unordered_map<int, vector<int>> l;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  int n, m, x, y;
  cin >> n >> m;
  dsu d;
  d.init(n);
  for (int i = 0; i < m; ++i) {
    cin >> x >> y;
    x--;
    y--;
    o[x]++;
    d.unite(x, y);
  }
  for (int i = 0; i < n; ++i) {
    x = d.p(i);
    l[x].push_back(i);
  }
  for (auto i : l) {
    long long int vertices = i.second.size();
    long long int edges = 0;
    for (int j : i.second) {
      edges += o[j];
    }
    if (edges != ((vertices) * (vertices - 1)) / 2) {
      cout << "NO";
      return 0;
    }
  }
  cout << "YES";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("avx,avx2,fma") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimization("unroll-loops") /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int o[150000]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct dsu { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int *parent; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int *size; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  void init(int n) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    parent = new int[n]; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    size = new int[n]; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; ++i) { /* line 13 slow_hit_count: 150001, fast_hit_count: 4 */
      parent[i] = i; /* line 14 slow_hit_count: 150000, fast_hit_count: 3 */
      size[i] = 1; /* line 15 slow_hit_count: 150000, fast_hit_count: 3 */
      o[i] = 0; /* line 16 slow_hit_count: 150000, fast_hit_count: 3 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int p(int x) { /* line 19 slow_hit_count: 150000, fast_hit_count: 3 */
    if (parent[x] == x) return x; /* line 20 slow_hit_count: 150000, fast_hit_count: 3 */
    return parent[x] = p(parent[x]); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  void unite(int x, int y) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    int supx = p(x); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    int supy = p(y); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (supx != supy) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      if (size[x] > size[y]) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        parent[supy] = supx; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        size[supx] += size[supy]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        parent[supx] = supy; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        size[supy] += size[supx]; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<int, vector<int>> l; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  int n, m, x, y; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  dsu d; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  d.init(n); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; ++i) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> x >> y; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    x--; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    y--; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    o[x]++; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    d.unite(x, y); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 54 slow_hit_count: 150001, fast_hit_count: 4 */
    x = d.p(i); /* line 55 slow_hit_count: 150000, fast_hit_count: 3 */
    l[x].push_back(i); /* line 56 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i : l) { /* line 58 slow_hit_count: 150001, fast_hit_count: 4 */
    long long int vertices = i.second.size(); /* line 59 slow_hit_count: 150000, fast_hit_count: 3 */
    long long int edges = 0; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j : i.second) { /* line 61 slow_hit_count: 300000, fast_hit_count: 6 */
      edges += o[j]; /* line 62 slow_hit_count: 150000, fast_hit_count: 3 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    if (edges != ((vertices) * (vertices - 1)) / 2) { /* line 64 slow_hit_count: 150000, fast_hit_count: 3 */
      cout << "NO"; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "YES"; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts provided for both the slow and fast runs, we can observe the following notable points:

1. **Initialization Loop (Lines 13-16):** These lines are executed 150,000 times in the slow input and 3 times in the fast input. This is because the initialization loop runs for each member (from 0 to n-1).

2. **Find Operation in DSU Structure (Line 19-20):** This line has 150,000 hits for the slow input compared to 3 in the fast input. This indicates heavy use of the `p()` function from the DSU structure, which suggests a potential inefficiency in how connected components are handled for large `n`.

3. **Loop Over All Members (Lines 54-56):** This loop iterates over all members, calling the `p()` method (line 55), which contributes significantly to the line hits, especially since every call checks the representative of the set for each element.

4. **Nested Loop Over Components (Lines 58-62):** This part of the code is heavily hit due to iterating over the components and their corresponding members. As each member is iterated over, the hit count rises significantly, especially since there are `150,000` iterations for each major loop structure.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following invariants describe conditions under which the code might experience performance slowdowns:

1. **High Element Count for Initialization:**
   - **Natural Language Invariant:** "When the number of members `n` is large, the initialization of DSU arrays and subsequent processing of each member can become costly, leading to inefficient memory and computational use."
   - **Threshold:** This is particularly evident when `n` approaches the upper constraint limit (i.e., close to 150,000).

2. **Inefficient Component Identification:**
   - **Natural Language Invariant:** "Heavy reliance on the `find` operation of the DSU can degrade performance if path compression is not effective, especially when iterating over all members to determine components."
   - **Threshold:** This performance bottleneck is significant when the DSU structure's path compression doesn't adequately reduce recursive depth, especially with large `n`.

3. **Excessive Iteration Over Members and Components:**
   - **Natural Language Invariant:** "For large disjoint data structures with few connections, iterating over each member to determine component leaders and checking component connectivity can lead to excessive computation."
   - **Threshold:** This occurs when all members are isolated or sparsely connected, leading to a highly iterative and non-optimized traversal.

### Conclusion

The primary performance bottlenecks arise when the code must handle a large number of members (`n` close to 150,000) with minimal connections (`m` being small, close to 0). This leads to extensive initialization, inefficient disjoint set operations, and excessive iterations, which collectively slow down the execution. These conditions should be monitored as potential triggers for slowdown in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as Checker Code in C++

Based on the performance-characterizing invariants derived in natural language, here are the corresponding C++ checker code implementations:

1. **High Element Count for Initialization:**
   - This condition checks if `n` is at the upper limit, potentially causing performance issues due to large array initialization.

```cpp
void check_initialization_invariant(int n) {
    if (n > 140000) { // Threshold chosen close to the maximum limit to indicate potential issues
        cerr << "Warning: Initialization invariant triggered - large n value for initialization." << endl;
        abort();
    }
}
```

2. **Inefficient Component Identification:**
   - This condition checks if the DSU operations are heavily used, which could indicate inefficiencies, especially if path compression is not effective.

```cpp
void check_dsu_invariant(int n, int m) {
    if (n > 100000 && m < 500) { // Large n and very few connections
        cerr << "Warning: DSU invariant triggered - inefficient component identification due to sparse connections." << endl;
        abort();
    }
}
```

3. **Excessive Iteration Over Members and Components:**
   - This condition checks if there are excessive iterations over isolated components, causing potential slowdowns.

```cpp
void check_iteration_invariant(int n, int isolated_components) {
    if (isolated_components > n / 2) { // More than half of the members are isolated
        cerr << "Warning: Iteration invariant triggered - excessive iteration over isolated components." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers in the Original C++ Code

Now, integrate these checkers into the provided C++ solution. Ensure each check is placed before the corresponding computation to catch potential bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization("unroll-loops")
using namespace std;

void check_initialization_invariant(int n) {
    if (n > 140000) { 
        cerr << "Warning: Initialization invariant triggered - large n value for initialization." << endl;
        abort();
    }
}

void check_dsu_invariant(int n, int m) {
    if (n > 100000 && m < 500) { 
        cerr << "Warning: DSU invariant triggered - inefficient component identification due to sparse connections." << endl;
        abort();
    }
}

void check_iteration_invariant(int n, int isolated_components) {
    if (isolated_components > n / 2) { 
        cerr << "Warning: Iteration invariant triggered - excessive iteration over isolated components." << endl;
        abort();
    }
}

int o[150000];

struct dsu {
    int *parent;
    int *size;
    void init(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
            size[i] = 1;
            o[i] = 0;
        }
    }
    int p(int x) {
        if (parent[x] == x) return x;
        return parent[x] = p(parent[x]);
    }
    void unite(int x, int y) {
        int supx = p(x);
        int supy = p(y);
        if (supx != supy) {
            if (size[x] > size[y]) {
                parent[supy] = supx;
                size[supx] += size[supy];
            } else {
                parent[supx] = supy;
                size[supy] += size[supx];
            }
        }
    }
};

unordered_map<int, vector<int>> l;

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m, x, y;
    cin >> n >> m;

    check_initialization_invariant(n); // Check before initialization
    check_dsu_invariant(n, m); // Check DSU conditions

    dsu d;
    d.init(n);
    for (int i = 0; i < m; ++i) {
        cin >> x >> y;
        x--;
        y--;
        o[x]++;
        d.unite(x, y);
    }
    int isolated_components = 0; // Count isolated components
    for (int i = 0; i < n; ++i) {
        x = d.p(i);
        l[x].push_back(i);
    }
    check_iteration_invariant(n, isolated_components); // Check iteration conditions

    for (auto i : l) {
        long long int vertices = i.second.size();
        long long int edges = 0;
        for (int j : i.second) {
            edges += o[j];
        }
        if (edges != ((vertices) * (vertices - 1)) / 2) {
            cout << "NO";
            return 0;
        }
    }
    cout << "YES";
    return 0;
}
```

**Comments on Check Placement:**

- **Initialization Check:** Placed immediately after reading inputs to preemptively catch potential issues with large `n`.

- **DSU Check:** Placed before DSU operations to detect inefficiency due to sparse connectivity.

- **Iteration Check:** Added after constructing components to catch excessive iteration in scenarios with many isolated components.

Each checker is intended to help identify conditions that may lead to significant performance degradation, providing a robust framework for analyzing potential inefficiencies.

