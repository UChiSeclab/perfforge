system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<vector<long long>> g;
vector<long long> v, r;
long long find_set(long long);
void union_set(long long x, long long y) {
  x = find_set(x);
  y = find_set(y);
  if (x != y) {
    if (r[x] > r[y]) {
      r[x] += r[y];
      v[y] = x;
    } else {
      r[y] += r[x];
      v[x] = y;
    }
  }
}
long long find_set(long long x) {
  if (v[x] == -1) return x;
  return v[x] = find_set(v[x]);
}
int main() {
  long long n, m;
  cin >> n >> m;
  vector<vector<long long>> a(n);
  vector<long long> b(n, -1), c(n, 1);
  g = a;
  v = b;
  r = c;
  for (long long x, y, i = 0; i < m; i++) {
    cin >> x >> y;
    x--;
    y--;
    g[x].push_back(y);
    g[y].push_back(x);
    union_set(x, y);
  }
  unordered_map<long long, vector<long long>> se;
  for (long long i = 0; i < n; i++)
    if (v[i] == -1) {
      vector<long long> v;
      se[i] = v;
    }
  for (long long i = 0; i < n; i++)
    if (v[i] != -1) se[v[i]].push_back(i);
  bool k = 1;
  for (auto x : se) {
    long long a = ((x.second.empty()) ? 0 : (x.second.size()));
    if (a)
      for (auto y : x.second)
        if (g[y].size() != a) {
          k = 0;
          break;
        }
    if (!k) break;
  }
  if (k)
    cout << "YES" << endl;
  else
    cout << "NO" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> g; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v, r; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long find_set(long long); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void union_set(long long x, long long y) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  x = find_set(x); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  y = find_set(y); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (x != y) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (r[x] > r[y]) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      r[x] += r[y]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      v[y] = x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      r[y] += r[x]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      v[x] = y; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long find_set(long long x) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (v[x] == -1) return x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return v[x] = find_set(v[x]); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long>> a(n); /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  vector<long long> b(n, -1), c(n, 1); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  g = a; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  v = b; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  r = c; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long x, y, i = 0; i < m; i++) { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> x >> y; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    x--; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    y--; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    g[x].push_back(y); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    g[y].push_back(x); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    union_set(x, y); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  unordered_map<long long, vector<long long>> se; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) /* line 40 slow_hit_count: 150001, fast_hit_count: 4 */
    if (v[i] == -1) { /* line 41 slow_hit_count: 150000, fast_hit_count: 3 */
      vector<long long> v; /* line 42 slow_hit_count: 300000, fast_hit_count: 6 */
      se[i] = v; /* line 43 slow_hit_count: 150000, fast_hit_count: 3 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) /* line 45 slow_hit_count: 150001, fast_hit_count: 4 */
    if (v[i] != -1) se[v[i]].push_back(i); /* line 46 slow_hit_count: 150000, fast_hit_count: 3 */
  bool k = 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto x : se) { /* line 48 slow_hit_count: 150001, fast_hit_count: 4 */
    long long a = ((x.second.empty()) ? 0 : (x.second.size())); /* line 49 slow_hit_count: 150000, fast_hit_count: 3 */
    if (a) /* line 50 slow_hit_count: 150000, fast_hit_count: 3 */
      for (auto y : x.second) /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        if (g[y].size() != a) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
          k = 0; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    if (!k) break; /* line 56 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  if (k) /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES" << endl; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO" << endl; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the provided C program and generate performance-characterizing invariants, we need to analyze the code and hit count data to identify potential bottlenecks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - Line 40 and line 45 show a hit count of 150001 for the slow input, compared to only 4 for the fast input. This indicates that these loops are heavily iterated over when handling the slow input.
   - Lines 41-43 and lines 46-49 also exhibit significantly higher hit counts in the slow input, suggesting intensive operations.

2. **Code Analysis**:
   - The first loop (lines 40-44) initializes a structure `se` for members that don't have any prior connections (`v[i] == -1`). For the slow input, all members are initially unconnected, leading to an iteration over all `n` members.
   - The second loop (lines 45-46) populates this structure with members based on their connections. Again, since all members are initially unconnected, this loop iterates extensively.
   - The third loop (lines 48-56) checks conditions for graph connectivity, leading to high iteration counts for the slow input as it processes each member in the `se` map.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants that characterize potential slowdowns:

1. **Invariant on Unconnected Members**:
   - **Natural Language Description**: "When all members are initially disconnected (no friendships), the program may slow down significantly due to excessive iterations over the member list."
   - **Explanation**: The slow input case with `n = 150,000` and `m = 0` demonstrates this, where the loops initialize and iterate over all members, leading to high computational overhead.

2. **Invariant on Iterative Unions**:
   - **Natural Language Description**: "If there are no or minimal connections between members resulting in large disconnected components, performance may degrade due to repeated processing of isolated nodes."
   - **Explanation**: In cases where there are very few friendships available, the union-find operations must iterate over each node, causing inefficiencies.

3. **Invariant on Large Structure Initialization**:
   - **Natural Language Description**: "The initialization and processing of large structures (like arrays or maps) for each member can cause slowdowns when the number of members is large and the number of connections is small."
   - **Explanation**: This occurs in the first loop, where a structure for tracking connections is built for each member due to lack of initial connections.

### Suggested Code Adjustment

To address these issues, consider implementing checks or optimizations before entering these loops:

```cpp
void check_initial_connections_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: initial_connections_invariant triggered - high iteration count due to unconnected members" << endl;
        abort();
    }
}

// After reading input
check_initial_connections_invariant(m == 0 && n > 100000);
```

- This check warns and halts execution if the program detects a scenario with no initial friendships and a large number of members, likely leading to performance degradation. 

These invariants and checks aim to preemptively identify situations where the program might experience slow execution, aiding future optimization and testing processes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Based on the performance-characterizing invariants derived earlier, we translate them into C++ checker code snippets:

#### Invariant 1: Unconnected Members

**Natural Language Description:** "When all members are initially disconnected (no friendships), the program may slow down significantly due to excessive iterations over the member list."

**Checker Code:**

```cpp
void check_initial_connections_invariant(long long n, long long m) {
    if (m == 0 && n > 10000) {  // Set a reasonable threshold for n
        cerr << "Warning: Performance bottleneck condition triggered - all members are initially disconnected!" << endl;
        abort();
    }
}
```

#### Invariant 2: Iterative Unions

**Natural Language Description:** "If there are no or minimal connections between members resulting in large disconnected components, performance may degrade due to repeated processing of isolated nodes."

**Checker Code:**

```cpp
void check_minimal_connections_invariant(long long n, long long m) {
    if (m < n / 10) {  // A threshold indicating sparse connections
        cerr << "Warning: Performance bottleneck condition triggered - minimal connections leading to repeated processing!" << endl;
        abort();
    }
}
```

### Phase 4: Integration of Checker Code into the Program

Now we integrate these checkers into the given C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<vector<long long>> g;
vector<long long> v, r;

long long find_set(long long x);
void union_set(long long x, long long y) {
    x = find_set(x);
    y = find_set(y);
    if (x != y) {
        if (r[x] > r[y]) {
            r[x] += r[y];
            v[y] = x;
        } else {
            r[y] += r[x];
            v[x] = y;
        }
    }
}

long long find_set(long long x) {
    if (v[x] == -1) return x;
    return v[x] = find_set(v[x]);
}

// Check for performance bottleneck due to initial unconnected members
void check_initial_connections_invariant(long long n, long long m) {
    if (m == 0 && n > 10000) { // Reasonable threshold for detecting performance issues
        cerr << "Warning: Performance bottleneck condition triggered - all members are initially disconnected!" << endl;
        abort();
    }
}

// Check for performance bottleneck due to minimal connections
void check_minimal_connections_invariant(long long n, long long m) {
    if (m < n / 10) { // Threshold indicating sparse connections
        cerr << "Warning: Performance bottleneck condition triggered - minimal connections leading to repeated processing!" << endl;
        abort();
    }
}

int main() {
    long long n, m;
    cin >> n >> m;

    // Insert the invariants check after reading input values
    check_initial_connections_invariant(n, m); // Check based on initial connections
    check_minimal_connections_invariant(n, m); // Check for minimal connections

    vector<vector<long long>> a(n);
    vector<long long> b(n, -1), c(n, 1);
    g = a;
    v = b;
    r = c;

    for (long long x, y, i = 0; i < m; i++) {
        cin >> x >> y;
        x--;
        y--;
        g[x].push_back(y);
        g[y].push_back(x);
        union_set(x, y);
    }

    unordered_map<long long, vector<long long>> se;
    for (long long i = 0; i < n; i++)
        if (v[i] == -1) {
            vector<long long> v;
            se[i] = v;
        }
    for (long long i = 0; i < n; i++)
        if (v[i] != -1) se[v[i]].push_back(i);

    bool k = 1;
    for (auto x : se) {
        long long a = ((x.second.empty()) ? 0 : (x.second.size()));
        if (a)
            for (auto y : x.second)
                if (g[y].size() != a) {
                    k = 0;
                    break;
                }
        if (!k) break;
    }
    
    if (k)
        cout << "YES" << endl;
    else
        cout << "NO" << endl;

    return 0;
}
```

### Explanation

- **`check_initial_connections_invariant`** is placed right after parsing the input to quickly catch cases where there are no connections.
- **`check_minimal_connections_invariant`** is similarly placed to detect when the network is sparse, potentially leading to inefficiencies.
- Both checks are strategically placed after the input is parsed and before heavy computation begins, ensuring that they do not add unnecessary overhead during execution.

