system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long int inf = 1000000000;
const long long int MOD = 1000000007;
int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  register long long int i, j, x, y, m, n, t, k, sum = 0, max, min, count = 0,
                                                 temp, w, q, f = 0;
  cin >> n >> m;
  vector<set<long long int> > v(n + 1);
  vector<bool> visited(n + 1, false);
  for (i = 0; i < m; i++) {
    cin >> x >> y;
    v[x].insert(y);
    v[y].insert(x);
  }
  for (i = 1; i <= n; i++) {
    v[i].insert(i);
  }
  for (i = 1; i <= n; i++) {
    if (!visited[i]) {
      for (auto &it : v[i]) {
        visited[it] = true;
        if (v[it] != v[i]) {
          f = 1;
          break;
        }
      }
    }
    if (f) {
      break;
    }
  }
  if (f)
    cout << "NO";
  else
    cout << "YES";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

150000 0


(G.2) Fast Input

3 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long int inf = 1000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long int MOD = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  register long long int i, j, x, y, m, n, t, k, sum = 0, max, min, count = 0, /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
                                                 temp, w, q, f = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  vector<set<long long int> > v(n + 1); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  vector<bool> visited(n + 1, false); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < m; i++) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> x >> y; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    v[x].insert(y); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    v[y].insert(x); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 19 slow_hit_count: 150001, fast_hit_count: 4 */
    v[i].insert(i); /* line 20 slow_hit_count: 150000, fast_hit_count: 3 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 22 slow_hit_count: 150001, fast_hit_count: 4 */
    if (!visited[i]) { /* line 23 slow_hit_count: 150000, fast_hit_count: 3 */
      for (auto &it : v[i]) { /* line 24 slow_hit_count: 300000, fast_hit_count: 6 */
        visited[it] = true; /* line 25 slow_hit_count: 150000, fast_hit_count: 3 */
        if (v[it] != v[i]) { /* line 26 slow_hit_count: 150000, fast_hit_count: 3 */
          f = 1; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    if (f) { /* line 32 slow_hit_count: 150000, fast_hit_count: 3 */
      break; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (f) /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO"; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "YES"; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the provided C program, let's break down the phases outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis:
1. **Comparison of Line-Level Hit Counts**:
    - Line 19 (`for (i = 1; i <= n; i++) {`): Hit significantly more for the slow input (150001 times) compared to the fast input (4 times).
    - Line 20 (`v[i].insert(i);`): Hit 150000 times for the slow input, indicating each member is being inserted into their own friend set.
    - Line 22 (`for (i = 1; i <= n; i++) {`): Similar to Line 19, hit 150001 times for the slow input.
    - Line 24 (`for (auto &it : v[i]) {`): Hit 300000 times for the slow input, suggesting frequent traversal of the friend sets.
    - Line 25 and 26 are also hit 150000 times, indicating they execute for each friend relationship.

2. **Key Observations**:
    - The nested loops (lines 22-30) iterate through a large number of elements when `n` is large, but `m` (number of friendships) is zero, resulting in each member only having themselves in their friend set.
    - The line `if (v[it] != v[i])` checks if the sets are equal, causing repeated set comparisons for every member.

3. **Interaction with Data Structures**:
    - The main performance issue stems from iterating over all members twice and performing set operations and comparisons, which can be costly when `n` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language invariants:

1. **Invariant 1**: "If the number of members `n` is large and the number of friend pairs `m` is significantly smaller, the program may spend excessive time in nested loops checking trivial friendships."

   - This invariant captures the scenario where there are many members but few friendships, leading to unnecessary iterations over mostly empty sets.

2. **Invariant 2**: "When the network has a high number of members with sparse connections, the program may perform extensive set comparisons, leading to slow execution."

   - This invariant indicates that when the friendship network is mostly disconnected, the algorithm does redundant work checking for indirect friendships.

3. **Invariant 3**: "High iteration counts over members with minimal changes in connectivity can degrade performance since the check for reasonable networks involves repetitive set operations."

   - The repetitive operations on friend sets, particularly when they involve little data (like a member only having themselves as a 'friend'), can cause unnecessary processing.

### Conclusion

These invariants suggest that the inefficiency arises primarily from processing large but sparsely connected networks. The algorithm's logic for determining "reasonableness" becomes costly when it must check all members in a setting where few actual connections exist. These invariants do not rely on specific input values but rather on the relationship between `n`, `m`, and the resulting data structure operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).

There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.

Let A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.

For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.

Can you help Limak and check if the network is reasonable? Print "YES" or "NO" accordingly, without the quotes.

Input

The first line of the input contain two integers n and m (3 ≤ n ≤ 150 000, <image>) — the number of members and the number of pairs of members that are friends.

The i-th of the next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.

Output

If the given network is reasonable, print "YES" in a single line (without the quotes). Otherwise, print "NO" in a single line (without the quotes).

Examples

Input

4 3
1 3
3 4
1 4


Output

YES


Input

4 4
3 1
2 3
3 4
1 2


Output

NO


Input

10 4
4 3
5 10
8 9
1 2


Output

YES


Input

3 2
1 2
2 3


Output

NO

Note

The drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is "NO" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.

<image>

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

Let's translate each natural language invariant into C++ code for runtime checks.

### Invariant 1
**Natural Language Description:** 
"If the number of members `n` is large and the number of friend pairs `m` is significantly smaller, the program may spend excessive time in nested loops checking trivial friendships."

**C++ Code:**
```cpp
void check_members_friends_ratio(int n, int m) {
    if (n > 10000 && m < n / 10) {  // arbitrary threshold for sparse network
        cerr << "Warning: Performance bottleneck condition triggered - large number of members with sparse friendships!" << endl;
        abort();
    }
}
```

### Invariant 2
**Natural Language Description:** 
"When the network has a high number of members with sparse connections, the program may perform extensive set comparisons, leading to slow execution."

**C++ Code:**
```cpp
void check_sparse_network(int n, int m) {
    if (n > 10000 && m < n / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - high member count with sparse connections!" << endl;
        abort();
    }
}
```

### Invariant 3
**Natural Language Description:** 
"High iteration counts over members with minimal changes in connectivity can degrade performance since the check for reasonable networks involves repetitive set operations."

**C++ Code:**
```cpp
void check_redundant_set_operations(int n, int m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant set operations due to lack of friendships!" << endl;
        abort();
    }
}
```

## Phase 4: Integration with the Original C++ Program

Next, we'll incorporate these checks into the provided C++ solution at strategic points to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long int inf = 1000000000;
const long long int MOD = 1000000007;

// Checkers based on performance invariants
void check_members_friends_ratio(int n, int m) {
    if (n > 10000 && m < n / 10) {  // arbitrary threshold for sparse network
        cerr << "Warning: Performance bottleneck condition triggered - large number of members with sparse friendships!" << endl;
        abort();
    }
}

void check_sparse_network(int n, int m) {
    if (n > 10000 && m < n / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - high member count with sparse connections!" << endl;
        abort();
    }
}

void check_redundant_set_operations(int n, int m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant set operations due to lack of friendships!" << endl;
        abort();
    }
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    register long long int i, j, x, y, m, n, t, k, sum = 0, max, min, count = 0, temp, w, q, f = 0;
    
    cin >> n >> m;

    // Insert performance checks right after input reading
    check_members_friends_ratio(n, m);
    check_sparse_network(n, m);
    check_redundant_set_operations(n, m);

    vector<set<long long int> > v(n + 1);
    vector<bool> visited(n + 1, false);
    for (i = 0; i < m; i++) {
        cin >> x >> y;
        v[x].insert(y);
        v[y].insert(x);
    }
    for (i = 1; i <= n; i++) {
        v[i].insert(i);
    }
    for (i = 1; i <= n; i++) {
        if (!visited[i]) {
            for (auto &it : v[i]) {
                visited[it] = true;
                if (v[it] != v[i]) {
                    f = 1;
                    break;
                }
            }
        }
        if (f) {
            break;
        }
    }
    if (f)
        cout << "NO";
    else
        cout << "YES";
}
```

### Explanation:
- **Placement of Checks:** The checks are placed immediately after reading the input values for `n` and `m`. This ensures that they are evaluated before any heavy computation begins, thereby minimizing additional overhead.
- **Threshold Values:** The thresholds are chosen to detect conditions under which the program is likely to become slow due to sparse connection and high member count. These are arbitrary but should be tweaked during testing to match the application's performance profile.

