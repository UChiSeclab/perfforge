system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long k, all;
long long ten[13];
bool check(long long mid) {
  string s = to_string(mid);
  long long len = s.length();
  long long tp, sum, x, y, t;
  all = sum = 0;
  t = 1;
  for (long long i = 1; i <= len; i++) {
    if (i == len)
      tp = mid - ten[len - 1] + 1;
    else
      tp = t * 9;
    y = sum * tp;
    sum += tp * i;
    t *= 10;
    x = (tp * (tp + 1) / 2) * i;
    all = all + x + y;
  }
  if (all < k) return 1;
  return 0;
}
bool check2(long long mid) {
  string s = to_string(mid);
  long long len = s.length(), t = 1;
  all = 0;
  for (int i = 1; i < len; i++) all += t * 9 * i, t *= 10;
  all += (mid - ten[len - 1] + 1) * len;
  if (all < k) return 1;
  return 0;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr), cout.tie(nullptr);
  for (int i = 0; i <= 9; i++) ten[i] = pow(10, i);
  int q;
  cin >> q;
  while (q--) {
    cin >> k;
    long long L = 1, r = 1e9, mid = 0, a = 0, aa = 0;
    while (L <= r) {
      mid = (L + r) / 2;
      if (check(mid))
        L = mid + 1, a = mid;
      else
        r = mid - 1;
    }
    check(a);
    k -= all;
    L = 1, r = a + 1;
    while (L <= r) {
      mid = (L + r) / 2;
      if (check2(mid))
        L = mid + 1, aa = mid;
      else
        r = mid - 1;
    }
    check2(aa);
    k -= all;
    string s = to_string(aa + 1);
    cout << s[k - 1] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
1
3
12
38
56


(G.2) Fast Input

1
2836


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long k, all; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long ten[13]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool check(long long mid) { /* line 5 slow_hit_count: 154, fast_hit_count: 31 */
  string s = to_string(mid); /* line 6 slow_hit_count: 308, fast_hit_count: 62 */
  long long len = s.length(); /* line 7 slow_hit_count: 154, fast_hit_count: 31 */
  long long tp, sum, x, y, t; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  all = sum = 0; /* line 9 slow_hit_count: 154, fast_hit_count: 31 */
  t = 1; /* line 10 slow_hit_count: 154, fast_hit_count: 31 */
  for (long long i = 1; i <= len; i++) { /* line 11 slow_hit_count: 885, fast_hit_count: 182 */
    if (i == len) /* line 12 slow_hit_count: 731, fast_hit_count: 151 */
      tp = mid - ten[len - 1] + 1; /* line 13 slow_hit_count: 154, fast_hit_count: 31 */
    else /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      tp = t * 9; /* line 15 slow_hit_count: 577, fast_hit_count: 120 */
    y = sum * tp; /* line 16 slow_hit_count: 731, fast_hit_count: 151 */
    sum += tp * i; /* line 17 slow_hit_count: 731, fast_hit_count: 151 */
    t *= 10; /* line 18 slow_hit_count: 731, fast_hit_count: 151 */
    x = (tp * (tp + 1) / 2) * i; /* line 19 slow_hit_count: 731, fast_hit_count: 151 */
    all = all + x + y; /* line 20 slow_hit_count: 731, fast_hit_count: 151 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (all < k) return 1; /* line 22 slow_hit_count: 154, fast_hit_count: 31 */
  return 0; /* line 23 slow_hit_count: 141, fast_hit_count: 25 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
bool check2(long long mid) { /* line 25 slow_hit_count: 18, fast_hit_count: 7 */
  string s = to_string(mid); /* line 26 slow_hit_count: 36, fast_hit_count: 14 */
  long long len = s.length(), t = 1; /* line 27 slow_hit_count: 18, fast_hit_count: 7 */
  all = 0; /* line 28 slow_hit_count: 18, fast_hit_count: 7 */
  for (int i = 1; i < len; i++) all += t * 9 * i, t *= 10; /* line 29 slow_hit_count: 19, fast_hit_count: 9 */
  all += (mid - ten[len - 1] + 1) * len; /* line 30 slow_hit_count: 18, fast_hit_count: 7 */
  if (all < k) return 1; /* line 31 slow_hit_count: 18, fast_hit_count: 7 */
  return 0; /* line 32 slow_hit_count: 7, fast_hit_count: 3 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr), cout.tie(nullptr); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 9; i++) ten[i] = pow(10, i); /* line 37 slow_hit_count: 11, fast_hit_count: 11 */
  int q; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 40 slow_hit_count: 6, fast_hit_count: 2 */
    cin >> k; /* line 41 slow_hit_count: 5, fast_hit_count: 1 */
    long long L = 1, r = 1e9, mid = 0, a = 0, aa = 0; /* line 42 slow_hit_count: 5, fast_hit_count: 1 */
    while (L <= r) { /* line 43 slow_hit_count: 154, fast_hit_count: 31 */
      mid = (L + r) / 2; /* line 44 slow_hit_count: 149, fast_hit_count: 30 */
      if (check(mid)) /* line 45 slow_hit_count: 149, fast_hit_count: 30 */
        L = mid + 1, a = mid; /* line 46 slow_hit_count: 8, fast_hit_count: 5 */
      else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        r = mid - 1; /* line 48 slow_hit_count: 141, fast_hit_count: 25 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    check(a); /* line 50 slow_hit_count: 5, fast_hit_count: 1 */
    k -= all; /* line 51 slow_hit_count: 5, fast_hit_count: 1 */
    L = 1, r = a + 1; /* line 52 slow_hit_count: 5, fast_hit_count: 1 */
    while (L <= r) { /* line 53 slow_hit_count: 18, fast_hit_count: 7 */
      mid = (L + r) / 2; /* line 54 slow_hit_count: 13, fast_hit_count: 6 */
      if (check2(mid)) /* line 55 slow_hit_count: 13, fast_hit_count: 6 */
        L = mid + 1, aa = mid; /* line 56 slow_hit_count: 6, fast_hit_count: 3 */
      else /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        r = mid - 1; /* line 58 slow_hit_count: 7, fast_hit_count: 3 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    check2(aa); /* line 60 slow_hit_count: 5, fast_hit_count: 1 */
    k -= all; /* line 61 slow_hit_count: 5, fast_hit_count: 1 */
    string s = to_string(aa + 1); /* line 62 slow_hit_count: 10, fast_hit_count: 2 */
    cout << s[k - 1] << endl; /* line 63 slow_hit_count: 5, fast_hit_count: 1 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The `check` function has significantly higher hit counts for the slow input (`154` hits) compared to the fast input (`31` hits). This suggests that the binary search loop involving this function is a performance bottleneck.
   - Within the `check` function, the loop from line 11 to line 21 is particularly expensive with `885` hits on the slow input compared to `182` on the fast input.
   - The `check2` function is also called more frequently in the slow input scenario, but the difference is not as large.

2. **Involved Data Structures and Loops**:
   - The repeated use of string conversion and arithmetic operations inside the loop in the `check` function contributes to inefficiency, especially when the length of the string (`len`) is large.
   - The binary search process (`while` loops) that involve these checks seems to be triggered more frequently or for longer periods in the slow input scenario.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Related to Large `k`**:
   - **Natural Language Statement**: "When `k` is large relative to the number of queries, the program spends excessive time in binary search operations, particularly while determining the range in which the desired digit lies."
   - **Threshold Suggestion**: If `k` values require numerous iterations or the formation of large sequences before identifying the position, the search process will be slow.

2. **Invariant Related to Binary Search Loops**:
   - **Natural Language Statement**: "If the binary search process involves examining a large range of numbers due to high `k` values, particularly when `k` approaches the upper constraints (close to `10^{18}`), the performance degrades."
   - **Threshold Suggestion**: The degradation is notable when `k` leads to a number range that requires multiple iterations (e.g., more than a typical log scale expected for binary search).

3. **Invariant on Arithmetic Operations**:
   - **Natural Language Statement**: "Excessive arithmetic operations in calculating digit positions can slow the program significantly, especially when these operations are repeated within loops for large ranges."
   - **Threshold Suggestion**: When computations involve large numbers (like transformations from `long long` to strings) repeatedly, there should be a mechanism to pre-compute or cache results for frequent queries.

4. **Invariant for String Operations**:
   - **Natural Language Statement**: "Converting large numbers to strings multiple times can lead to inefficiencies. Monitoring the length of numbers being converted can indicate potential slowdowns."
   - **Threshold Suggestion**: If the string length (`len`) in computations like `to_string` exceeds a certain limit (e.g., `len > 10`), the code path may become inefficient.

These invariants and descriptions should help understand and mitigate scenarios leading to performance bottlenecks. They focus on the relationship between input size, the range of numbers processed, and repetitive arithmetic/string operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: To address the task of implementing the performance-characterizing invariants in C++ code, we will first develop checker functions based on the natural language invariants identified earlier. Then, we'll integrate these checks into the original C++ program to ensure they are triggered appropriately without introducing overhead within tight loops.

### Phase 3: Implement Checker Code in C++

Here are the checker implementations for each invariant:

1. **Invariant Related to Large `k` and Binary Search Operations**:
   - We will check if `k` is large and may require many iterations in binary search, potentially leading to slowdown.

```cpp
void check_large_k_invariant(long long k) {
    if (k > 1e17) { // Arbitrary threshold for large `k`
        cerr << "Warning: Performance bottleneck: very large `k` detected in binary search!" << endl;
        abort();
    }
}
```

2. **Invariant Related to String Length and Arithmetic Operations**:
   - We will monitor the length of strings and related operations to detect inefficient scenarios.

```cpp
void check_string_length_invariant(const string &s) {
    if (s.length() > 10) { // Threshold where string operations may become inefficient
        cerr << "Warning: Performance bottleneck: large string length in operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here is the instrumented C++ code with integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check if `k` is very large and may cause performance issues
void check_large_k_invariant(long long k) {
    if (k > 1e17) { // Arbitrary threshold for large `k`
        cerr << "Warning: Performance bottleneck: very large `k` detected in binary search!" << endl;
        abort();
    }
}

// Function to check if string operations may become inefficient
void check_string_length_invariant(const string &s) {
    if (s.length() > 10) { // Threshold where string operations may become inefficient
        cerr << "Warning: Performance bottleneck: large string length in operations!" << endl;
        abort();
    }
}

long long k, all;
long long ten[13];

bool check(long long mid) {
    string s = to_string(mid);
    // Check for inefficient string operations
    check_string_length_invariant(s);
    long long len = s.length();
    long long tp, sum, x, y, t;
    all = sum = 0;
    t = 1;
    for (long long i = 1; i <= len; i++) {
        if (i == len)
            tp = mid - ten[len - 1] + 1;
        else
            tp = t * 9;
        y = sum * tp;
        sum += tp * i;
        t *= 10;
        x = (tp * (tp + 1) / 2) * i;
        all = all + x + y;
    }
    if (all < k) return 1;
    return 0;
}

bool check2(long long mid) {
    string s = to_string(mid);
    // Check for inefficient string operations
    check_string_length_invariant(s);
    long long len = s.length(), t = 1;
    all = 0;
    for (int i = 1; i < len; i++) all += t * 9 * i, t *= 10;
    all += (mid - ten[len - 1] + 1) * len;
    if (all < k) return 1;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);

    for (int i = 0; i <= 9; i++) ten[i] = pow(10, i);

    int q;
    cin >> q;
    while (q--) {
        cin >> k;

        // Check for large `k` that might lead to performance issues
        check_large_k_invariant(k);

        long long L = 1, r = 1e9, mid = 0, a = 0, aa = 0;
        while (L <= r) {
            mid = (L + r) / 2;
            if (check(mid))
                L = mid + 1, a = mid;
            else
                r = mid - 1;
        }
        check(a);
        k -= all;

        L = 1, r = a + 1;
        while (L <= r) {
            mid = (L + r) / 2;
            if (check2(mid))
                L = mid + 1, aa = mid;
            else
                r = mid - 1;
        }
        check2(aa);
        k -= all;
        string s = to_string(aa + 1);
        cout << s[k - 1] << endl;
    }

    return 0;
}
```

### Explanation

- **Checker Functions**: We've implemented runtime checks that abort execution if the conditions outlined in the invariants are met. These are placed at strategic points to catch performance bottlenecks without adding overhead in tight loops.
- **Placement of Checkers**: The checks are placed right after reading `k` and within the string-heavy functions to ensure they catch potential performance issues early in the process.
- **Threshold Values**: These are set to an arbitrary high value to detect potential slow inputs without impacting the performance for typical cases.

