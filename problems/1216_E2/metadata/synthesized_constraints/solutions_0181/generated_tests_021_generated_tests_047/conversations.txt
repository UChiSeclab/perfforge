system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long le(long long n) {
  long long r = 0;
  while (n) {
    r++;
    n /= 10;
  }
  return r;
}
long long minpow10(long long n) {
  long long r = 1;
  for (int i = 1; i < n; i++) r = r * 10;
  return r;
}
long long maxpow10(long long n) {
  long long r = 1;
  for (int i = 1; i <= n; i++) r = r * 10;
  return r - 1;
}
long long len1(long long n) {
  long long l = le(n);
  long long mp10 = minpow10(l);
  long long res = (n - mp10 + 1) * l;
  for (int i = 1; i < l; i++) {
    res += i * (maxpow10(i) - minpow10(i) + 1);
  }
  return res;
}
long long len2(long long n) {
  if (n == 0) return 0;
  long long l = le(n);
  long long mp10 = minpow10(l);
  long long res =
      (n - mp10 + 1) * (n - mp10 + 2) / 2 * l + (n - mp10 + 1) * len1(mp10 - 1);
  res += len2(mp10 - 1);
  return res;
}
long long biser2(long long k, long long l, long long r) {
  while (l < r) {
    long long m = (l + r) / 2;
    if (len2(m) < k)
      l = m + 1;
    else
      r = m;
  }
  return l;
}
long long biser1(long long k, long long l, long long r) {
  while (l < r) {
    long long m = (l + r) / 2;
    if (len1(m) < k)
      l = m + 1;
    else
      r = m;
  }
  return l;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int q;
  cin >> q;
  while (q--) {
    long long k;
    cin >> k;
    long long b2 = biser2(k, 1, 510000000);
    k = k - len2(b2 - 1);
    long long b1 = biser1(k, 1, 1e18);
    k = k - len1(b1 - 1);
    long long l = le(b1);
    for (long long i = 0; i < l - k; i++) b1 /= 10;
    cout << b1 % 10 << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
1
6
22
38
4


(G.2) Fast Input

1
2836


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long le(long long n) { /* line 3 slow_hit_count: 1682, fast_hit_count: 345 */
  long long r = 0; /* line 4 slow_hit_count: 1682, fast_hit_count: 345 */
  while (n) { /* line 5 slow_hit_count: 8594, fast_hit_count: 1741 */
    r++; /* line 6 slow_hit_count: 6912, fast_hit_count: 1396 */
    n /= 10; /* line 7 slow_hit_count: 6912, fast_hit_count: 1396 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 9 slow_hit_count: 1682, fast_hit_count: 345 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long minpow10(long long n) { /* line 11 slow_hit_count: 5347, fast_hit_count: 1078 */
  long long r = 1; /* line 12 slow_hit_count: 5347, fast_hit_count: 1078 */
  for (int i = 1; i < n; i++) r = r * 10; /* line 13 slow_hit_count: 25554, fast_hit_count: 5124 */
  return r; /* line 14 slow_hit_count: 5347, fast_hit_count: 1078 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long maxpow10(long long n) { /* line 16 slow_hit_count: 3670, fast_hit_count: 734 */
  long long r = 1; /* line 17 slow_hit_count: 3670, fast_hit_count: 734 */
  for (int i = 1; i <= n; i++) r = r * 10; /* line 18 slow_hit_count: 22165, fast_hit_count: 4433 */
  return r - 1; /* line 19 slow_hit_count: 3670, fast_hit_count: 734 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long len1(long long n) { /* line 21 slow_hit_count: 991, fast_hit_count: 202 */
  long long l = le(n); /* line 22 slow_hit_count: 991, fast_hit_count: 202 */
  long long mp10 = minpow10(l); /* line 23 slow_hit_count: 991, fast_hit_count: 202 */
  long long res = (n - mp10 + 1) * l; /* line 24 slow_hit_count: 991, fast_hit_count: 202 */
  for (int i = 1; i < l; i++) { /* line 25 slow_hit_count: 4661, fast_hit_count: 936 */
    res += i * (maxpow10(i) - minpow10(i) + 1); /* line 26 slow_hit_count: 3670, fast_hit_count: 734 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 28 slow_hit_count: 991, fast_hit_count: 202 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long len2(long long n) { /* line 30 slow_hit_count: 836, fast_hit_count: 172 */
  if (n == 0) return 0; /* line 31 slow_hit_count: 836, fast_hit_count: 172 */
  long long l = le(n); /* line 32 slow_hit_count: 686, fast_hit_count: 142 */
  long long mp10 = minpow10(l); /* line 33 slow_hit_count: 686, fast_hit_count: 142 */
  long long res = /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      (n - mp10 + 1) * (n - mp10 + 2) / 2 * l + (n - mp10 + 1) * len1(mp10 - 1); /* line 35 slow_hit_count: 686, fast_hit_count: 142 */
  res += len2(mp10 - 1); /* line 36 slow_hit_count: 686, fast_hit_count: 142 */
  return res; /* line 37 slow_hit_count: 686, fast_hit_count: 142 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long biser2(long long k, long long l, long long r) { /* line 39 slow_hit_count: 150, fast_hit_count: 30 */
  while (l < r) { /* line 40 slow_hit_count: 150, fast_hit_count: 30 */
    long long m = (l + r) / 2; /* line 41 slow_hit_count: 145, fast_hit_count: 29 */
    if (len2(m) < k) /* line 42 slow_hit_count: 145, fast_hit_count: 29 */
      l = m + 1; /* line 43 slow_hit_count: 5, fast_hit_count: 5 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 45 slow_hit_count: 140, fast_hit_count: 24 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return l; /* line 47 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
long long biser1(long long k, long long l, long long r) { /* line 49 slow_hit_count: 305, fast_hit_count: 60 */
  while (l < r) { /* line 50 slow_hit_count: 305, fast_hit_count: 60 */
    long long m = (l + r) / 2; /* line 51 slow_hit_count: 300, fast_hit_count: 59 */
    if (len1(m) < k) /* line 52 slow_hit_count: 300, fast_hit_count: 59 */
      l = m + 1; /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
    else /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 55 slow_hit_count: 298, fast_hit_count: 57 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  return l; /* line 57 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  int q; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 65 slow_hit_count: 6, fast_hit_count: 2 */
    long long k; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> k; /* line 67 slow_hit_count: 5, fast_hit_count: 1 */
    long long b2 = biser2(k, 1, 510000000); /* line 68 slow_hit_count: 5, fast_hit_count: 1 */
    k = k - len2(b2 - 1); /* line 69 slow_hit_count: 5, fast_hit_count: 1 */
    long long b1 = biser1(k, 1, 1e18); /* line 70 slow_hit_count: 5, fast_hit_count: 1 */
    k = k - len1(b1 - 1); /* line 71 slow_hit_count: 5, fast_hit_count: 1 */
    long long l = le(b1); /* line 72 slow_hit_count: 5, fast_hit_count: 1 */
    for (long long i = 0; i < l - k; i++) b1 /= 10; /* line 73 slow_hit_count: 5, fast_hit_count: 1 */
    cout << b1 % 10 << endl; /* line 74 slow_hit_count: 5, fast_hit_count: 1 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 76 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, it appears that the functions `len1` and `len2` have significantly more hits in the slow input compared to the fast input. Specifically:

- `len1()`, especially lines 25-26, are hit much more frequently in the slow input.
- `len2()` is called recursively, and its call to `len1()` (line 35) and itself (line 36) suggest a recursive pattern that could lead to inefficiency.
- The binary search functions `biser1()` and `biser2()` also show a noticeable difference in calls between slow and fast inputs.

### Phase 2: Derive Performance-Characterizing Invariants

Given the above observations, the following invariants can be derived in natural language:

1. **Recursive and Repeated Calculations of Sequence Lengths**:
   - **Invariant**: "If the sequence length calculations (`len1` or `len2`) are invoked frequently, especially with large numbers, the program may slow down due to recursive and iterative depth, as these methods are computationally intensive."
   
   - **Explanation**: This invariant captures the recursive nature of `len2` and the iterative calculation in `len1`, which can be costly when dealing with large input values or numbers that result in deep recursion or long iterative paths.

2. **Binary Search Over Large Ranges**:
   - **Invariant**: "If the binary search (`biser1` or `biser2`) operates over a large range, the number of iterations required will increase, leading to slower performance."
   
   - **Explanation**: As the functions `biser1` and `biser2` perform binary search over potentially expansive ranges (e.g., up to 1e18), the number of iterations necessary to converge on a result could significantly impact performance.

3. **High Depth in Recursive Calculations**:
   - **Invariant**: "When recursive calls in `len2` deeply nest due to large numerical values, the risk of CPU-intensive operations increases, resulting in performance degradation."
   
   - **Explanation**: This invariant highlights the computational expense associated with deep recursion, which becomes more pronounced with larger values `n`, where each recursive call incurs additional overhead.

### Summary

These invariants identify key areas of the code that can lead to performance bottlenecks. They do not rely on specific values from the slow input but rather focus on patterns of computation and data processing that are likely to trigger slow performance under certain conditions. By understanding these patterns, a fuzzer can be tuned to detect and evaluate these scenarios, ensuring the code remains efficient across a range of inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

For each of the natural language invariants derived, we will implement a corresponding runtime check.

1. **Invariant for Recursive and Repeated Calculations**:
   - We want to check if `len1` or `len2` is being called with large numbers, which could lead to performance issues due to deep recursion or repeated calculations.

```cpp
void check_len1_invariant(long long n) {
    if (n > 1e6) { // Arbitrary threshold for illustration
        cerr << "Warning: len1 invariant triggered - potential performance issue with large n" << endl;
        abort();
    }
}

void check_len2_invariant(long long n) {
    if (n > 1e6) { // Arbitrary threshold for illustration
        cerr << "Warning: len2 invariant triggered - potential performance issue with large n" << endl;
        abort();
    }
}
```

2. **Invariant for Binary Search Over Large Ranges**:
   - We will check if `biser1` or `biser2` are called with large ranges, potentially causing more iterations.

```cpp
void check_biser_range_invariant(long long range) {
    if (range > 1e9) { // Arbitrary threshold for large range
        cerr << "Warning: biser range invariant triggered - excessive iterations possible" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Solution

Now, we integrate these checks into the original code, ensuring they are placed where they do not add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions based on performance-characterizing invariants
void check_len1_invariant(long long n) {
    if (n > 1e6) {
        cerr << "Warning: len1 invariant triggered - potential performance issue with large n" << endl;
        abort();
    }
}

void check_len2_invariant(long long n) {
    if (n > 1e6) {
        cerr << "Warning: len2 invariant triggered - potential performance issue with large n" << endl;
        abort();
    }
}

void check_biser_range_invariant(long long range) {
    if (range > 1e9) {
        cerr << "Warning: biser range invariant triggered - excessive iterations possible" << endl;
        abort();
    }
}

long long le(long long n) {
    long long r = 0;
    while (n) {
        r++;
        n /= 10;
    }
    return r;
}

long long minpow10(long long n) {
    long long r = 1;
    for (int i = 1; i < n; i++) r = r * 10;
    return r;
}

long long maxpow10(long long n) {
    long long r = 1;
    for (int i = 1; i <= n; i++) r = r * 10;
    return r - 1;
}

long long len1(long long n) {
    // Check the invariant for len1 before proceeding
    check_len1_invariant(n);

    long long l = le(n);
    long long mp10 = minpow10(l);
    long long res = (n - mp10 + 1) * l;
    for (int i = 1; i < l; i++) {
        res += i * (maxpow10(i) - minpow10(i) + 1);
    }
    return res;
}

long long len2(long long n) {
    // Check the invariant for len2 before proceeding
    check_len2_invariant(n);

    if (n == 0) return 0;
    long long l = le(n);
    long long mp10 = minpow10(l);
    long long res =
        (n - mp10 + 1) * (n - mp10 + 2) / 2 * l + (n - mp10 + 1) * len1(mp10 - 1);
    res += len2(mp10 - 1);
    return res;
}

long long biser2(long long k, long long l, long long r) {
    // Check the range invariant
    check_biser_range_invariant(r - l);

    while (l < r) {
        long long m = (l + r) / 2;
        if (len2(m) < k)
            l = m + 1;
        else
            r = m;
    }
    return l;
}

long long biser1(long long k, long long l, long long r) {
    // Check the range invariant
    check_biser_range_invariant(r - l);

    while (l < r) {
        long long m = (l + r) / 2;
        if (len1(m) < k)
            l = m + 1;
        else
            r = m;
    }
    return l;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int q;
    cin >> q;
    while (q--) {
        long long k;
        cin >> k;
        long long b2 = biser2(k, 1, 510000000);
        k = k - len2(b2 - 1);
        long long b1 = biser1(k, 1, 1e18);
        k = k - len1(b1 - 1);
        long long l = le(b1);
        for (long long i = 0; i < l - k; i++) b1 /= 10;
        cout << b1 % 10 << endl;
    }
}
```

### Explanation

- **Checker Functions**: These functions are declared at the top and invoked before the potentially expensive operations begin.
- **Thresholds**: The chosen thresholds (e.g., `1e6` or `1e9`) are arbitrarily set for illustration; they should be adjusted based on profiling or expected input size.
- **Placement of Checks**: The checks are placed at appropriate locations to prevent additional overhead during tight loops, ensuring they help identify performance bottlenecks without exacerbating them.

