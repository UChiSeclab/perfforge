system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<long long> digits;
long long countBits(long long x) { return (long long)ceil(log10(x + 1)); }
pair<long long, long long> BS(long long k) {
  long long l = 0, r = 1000000000, Sum = 0;
  while (l != r) {
    long long mid = (l + r + 1) / 2;
    long long sum = 0;
    long long cur = 9, cum = 9;
    for (long long i = 1; i < countBits(mid); i++) {
      sum += i * ((cur * (cur + 1)) / 2 + cur * (mid - cum));
      cur *= 10;
      cum += cur;
    }
    cum -= cur;
    sum += countBits(mid) * ((mid - cum) * (mid - cum + 1)) / 2;
    if (sum >= k)
      r = mid - 1;
    else
      l = mid;
    Sum = sum;
  }
  long long sum = 0;
  long long cur = 9, cum = 9;
  for (long long i = 1; i < countBits(l); i++) {
    sum += i * ((cur * (cur + 1)) / 2 + cur * (l - cum));
    cur *= 10;
    cum += cur;
  }
  cum -= cur;
  sum += countBits(l) * ((l - cum) * (l - cum + 1)) / 2;
  return {l, sum};
}
long long K_Digit(long long x, long long i) {
  string s;
  while (x != 0) {
    s += (x % 10 + '0');
    x /= 10;
  }
  reverse(s.begin(), s.end());
  if (i - 1 >= 0 && i - 1 <= s.length() - 1)
    return (long long)(s[i - 1] - '0');
  else
    return 0;
}
int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  digits.push_back(0);
  long long ten = 1;
  for (long long i = 1; i < 18; i++) {
    digits.push_back(9ll * ten * i);
    ten *= 10ll;
  }
  for (long long i = 1; i < 18; i++) digits[i] += digits[i - 1];
  long long q;
  cin >> q;
  for (long long u = 0; u < q; u++) {
    long long k;
    cin >> k;
    long long l = BS(k).first;
    long long sum = BS(k).second;
    k -= sum;
    long long r =
        lower_bound(digits.begin(), digits.end(), k) - 1 - digits.begin();
    if (r >= 0) k -= digits[r];
    long long before = k / (r + 1);
    if (r >= 1) {
      long long index = k % (r + 1);
      if (index == 0) {
        index = r + 1;
        before--;
      }
      before += (long long)pow(10, r);
      cout << K_Digit(before, index) << endl;
    } else
      cout << before << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
1
3
20
38
56


(G.2) Fast Input

1
3621


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> digits; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long countBits(long long x) { return (long long)ceil(log10(x + 1)); } /* line 4 slow_hit_count: 1770, fast_hit_count: 364 */
pair<long long, long long> BS(long long k) { /* line 5 slow_hit_count: 10, fast_hit_count: 2 */
  long long l = 0, r = 1000000000, Sum = 0; /* line 6 slow_hit_count: 10, fast_hit_count: 2 */
  while (l != r) { /* line 7 slow_hit_count: 308, fast_hit_count: 62 */
    long long mid = (l + r + 1) / 2; /* line 8 slow_hit_count: 298, fast_hit_count: 60 */
    long long sum = 0; /* line 9 slow_hit_count: 298, fast_hit_count: 60 */
    long long cur = 9, cum = 9; /* line 10 slow_hit_count: 298, fast_hit_count: 60 */
    for (long long i = 1; i < countBits(mid); i++) { /* line 11 slow_hit_count: 1452, fast_hit_count: 298 */
      sum += i * ((cur * (cur + 1)) / 2 + cur * (mid - cum)); /* line 12 slow_hit_count: 1154, fast_hit_count: 238 */
      cur *= 10; /* line 13 slow_hit_count: 1154, fast_hit_count: 238 */
      cum += cur; /* line 14 slow_hit_count: 1154, fast_hit_count: 238 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    cum -= cur; /* line 16 slow_hit_count: 298, fast_hit_count: 60 */
    sum += countBits(mid) * ((mid - cum) * (mid - cum + 1)) / 2; /* line 17 slow_hit_count: 298, fast_hit_count: 60 */
    if (sum >= k) /* line 18 slow_hit_count: 298, fast_hit_count: 60 */
      r = mid - 1; /* line 19 slow_hit_count: 282, fast_hit_count: 54 */
    else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      l = mid; /* line 21 slow_hit_count: 16, fast_hit_count: 6 */
    Sum = sum; /* line 22 slow_hit_count: 298, fast_hit_count: 60 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  long long sum = 0; /* line 24 slow_hit_count: 10, fast_hit_count: 2 */
  long long cur = 9, cum = 9; /* line 25 slow_hit_count: 10, fast_hit_count: 2 */
  for (long long i = 1; i < countBits(l); i++) { /* line 26 slow_hit_count: 10, fast_hit_count: 4 */
    sum += i * ((cur * (cur + 1)) / 2 + cur * (l - cum)); /* line 27 slow_hit_count: 0, fast_hit_count: 2 */
    cur *= 10; /* line 28 slow_hit_count: 0, fast_hit_count: 2 */
    cum += cur; /* line 29 slow_hit_count: 0, fast_hit_count: 2 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cum -= cur; /* line 31 slow_hit_count: 10, fast_hit_count: 2 */
  sum += countBits(l) * ((l - cum) * (l - cum + 1)) / 2; /* line 32 slow_hit_count: 10, fast_hit_count: 2 */
  return {l, sum}; /* line 33 slow_hit_count: 10, fast_hit_count: 2 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
long long K_Digit(long long x, long long i) { /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  string s; /* line 36 slow_hit_count: 2, fast_hit_count: 0 */
  while (x != 0) { /* line 37 slow_hit_count: 3, fast_hit_count: 0 */
    s += (x % 10 + '0'); /* line 38 slow_hit_count: 2, fast_hit_count: 0 */
    x /= 10; /* line 39 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  reverse(s.begin(), s.end()); /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  if (i - 1 >= 0 && i - 1 <= s.length() - 1) /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
    return (long long)(s[i - 1] - '0'); /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  digits.push_back(0); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  long long ten = 1; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < 18; i++) { /* line 52 slow_hit_count: 18, fast_hit_count: 18 */
    digits.push_back(9ll * ten * i); /* line 53 slow_hit_count: 17, fast_hit_count: 17 */
    ten *= 10ll; /* line 54 slow_hit_count: 17, fast_hit_count: 17 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i < 18; i++) digits[i] += digits[i - 1]; /* line 56 slow_hit_count: 18, fast_hit_count: 18 */
  long long q; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long u = 0; u < q; u++) { /* line 59 slow_hit_count: 6, fast_hit_count: 2 */
    long long k; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> k; /* line 61 slow_hit_count: 5, fast_hit_count: 1 */
    long long l = BS(k).first; /* line 62 slow_hit_count: 5, fast_hit_count: 1 */
    long long sum = BS(k).second; /* line 63 slow_hit_count: 5, fast_hit_count: 1 */
    k -= sum; /* line 64 slow_hit_count: 5, fast_hit_count: 1 */
    long long r = /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        lower_bound(digits.begin(), digits.end(), k) - 1 - digits.begin(); /* line 66 slow_hit_count: 5, fast_hit_count: 1 */
    if (r >= 0) k -= digits[r]; /* line 67 slow_hit_count: 5, fast_hit_count: 1 */
    long long before = k / (r + 1); /* line 68 slow_hit_count: 5, fast_hit_count: 1 */
    if (r >= 1) { /* line 69 slow_hit_count: 5, fast_hit_count: 1 */
      long long index = k % (r + 1); /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
      if (index == 0) { /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
        index = r + 1; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
        before--; /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      before += (long long)pow(10, r); /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
      cout << K_Digit(before, index) << endl; /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
    } else /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      cout << before << endl; /* line 78 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C++ program based on the slow and fast inputs, let's go through the tasks outlined in the context.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare line-level hit counts between the fast and slow runs:**
   - The binary search function `BS` (lines 5-34) is hit significantly more in the slow input.
   - The `for` loop inside the `while` loop (lines 11-14) is executed much more frequently in the slow input, indicating a deeper or more complex iterative process.
   - The `countBits` function (line 4) is also invoked many more times during the slow run, suggesting frequent recalculation of bit lengths.

2. **Pinpoint lines or functions with significant hit increases:**
   - Line 11: The loop iterating over `countBits(mid)` within the `BS` function has a high hit count, indicating the core of the performance issue.
   - Lines 12-14: Operations inside this loop are being executed multiple times due to a higher number of iterations, driven by the value of `mid`.

3. **Infer interactions with data structures or algorithms:**
   - The `BS` function is likely intended to find a certain position within a sequence through a binary search over possible block sizes. The repeated recalculation of `countBits` and the summation logic suggests that the sequence is computationally expensive to traverse or approximate within the constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are performance-characterizing invariants to describe when the program might enter a slow path:

1. **Invariant 1: Binary Search Depth and Complexity**
   - **Natural Language Description:** "If the binary search (`BS` function) requires deeper iterations due to higher values of k, the computation becomes expensive, especially when the cumulative size of sequence blocks is large."
   - **Explanation:** The binary search's performance is degraded when it needs to iterate deeper into potential block sizes to locate the k-th position, especially when `k` is large and blocks have accumulated considerable size.
   
2. **Invariant 2: Iterative Complexity within Blocks**
   - **Natural Language Description:** "If a large number of block calculations must be performed within each binary search step, particularly when the number of significant digits in mid grows large, performance may degrade."
   - **Explanation:** The `for` loop inside the binary search calculates a sum based on the number of digits, which becomes more complex as mid increases, leading to more operations and longer execution times.
   
3. **Invariant 3: High Frequency of Bit Length Calculations**
   - **Natural Language Description:** "If the `countBits` function is repeatedly called due to many small adjustments in the binary search range, this may indicate inefficient use of the function and slow down the program considerably."
   - **Explanation:** Frequent recalculations suggest many small shifts in binary search, possibly due to close decision boundaries or high precision requirements, leading to inefficiencies.

### Implementation Considerations
- **Thresholds and Constraints:** Ensure that checks are aligned with the problem constraints (e.g., n <= 100) to maintain applicability and prevent performance impact from the checks themselves.
- **Fuzzer Utility:** These invariants serve as potential triggers that a fuzzer could use to craft inputs that detect slow execution paths, helping diagnose or optimize the implementation further.

These invariants provide a framework for understanding potential performance bottlenecks, especially under varying input conditions, without relying on specific numerical values from any one input set.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived in the previous phase.

#### Invariant 1: Binary Search Depth and Complexity
```cpp
void check_binary_search_depth(long long iterations) {
    if (iterations > 300) { // Arbitrary threshold based on significant slowdown
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search iterations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Iterative Complexity within Blocks
```cpp
void check_iterative_complexity(long long countBitsMid) {
    if (countBitsMid > 10) { // Threshold based on complexity increase
        cerr << "Warning: Performance bottleneck condition triggered - high iterative complexity within blocks!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Frequency of Bit Length Calculations
```cpp
void check_bit_length_frequency(long long bitCountCalls) {
    if (bitCountCalls > 500) { // Threshold based on excessive calls
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of bit length calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Below is the final instrumented C++ program with the performance checks inserted:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<long long> digits;

// Checkers for performance bottlenecks
void check_binary_search_depth(long long iterations) {
    if (iterations > 300) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search iterations!" << endl;
        abort();
    }
}

void check_iterative_complexity(long long countBitsMid) {
    if (countBitsMid > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high iterative complexity within blocks!" << endl;
        abort();
    }
}

void check_bit_length_frequency(long long bitCountCalls) {
    if (bitCountCalls > 500) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of bit length calculations!" << endl;
        abort();
    }
}

long long countBits(long long x) {
    return (long long)ceil(log10(x + 1));
}

pair<long long, long long> BS(long long k) {
    long long l = 0, r = 1000000000, Sum = 0;
    long long iterations = 0; // Track binary search iterations
    long long bitCountCalls = 0; // Track countBits calls

    while (l != r) {
        long long mid = (l + r + 1) / 2;
        long long sum = 0;
        long long cur = 9, cum = 9;
        ++iterations;

        for (long long i = 1; i < countBits(mid); i++) {
            ++bitCountCalls;
            sum += i * ((cur * (cur + 1)) / 2 + cur * (mid - cum));
            cur *= 10;
            cum += cur;
        }

        check_iterative_complexity(countBits(mid)); // Check inside the loop

        cum -= cur;
        sum += countBits(mid) * ((mid - cum) * (mid - cum + 1)) / 2;
        if (sum >= k)
            r = mid - 1;
        else
            l = mid;
        Sum = sum;
    }

    check_binary_search_depth(iterations); // Check once binary search is complete
    check_bit_length_frequency(bitCountCalls); // Check frequency of countBits

    long long sum = 0;
    long long cur = 9, cum = 9;
    for (long long i = 1; i < countBits(l); i++) {
        sum += i * ((cur * (cur + 1)) / 2 + cur * (l - cum));
        cur *= 10;
        cum += cur;
    }
    cum -= cur;
    sum += countBits(l) * ((l - cum) * (l - cum + 1)) / 2;
    return {l, sum};
}

long long K_Digit(long long x, long long i) {
    string s;
    while (x != 0) {
        s += (x % 10 + '0');
        x /= 10;
    }
    reverse(s.begin(), s.end());
    if (i - 1 >= 0 && i - 1 <= s.length() - 1)
        return (long long)(s[i - 1] - '0');
    else
        return 0;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    digits.push_back(0);
    long long ten = 1;
    for (long long i = 1; i < 18; i++) {
        digits.push_back(9ll * ten * i);
        ten *= 10ll;
    }
    for (long long i = 1; i < 18; i++) digits[i] += digits[i - 1];
    long long q;
    cin >> q;
    for (long long u = 0; u < q; u++) {
        long long k;
        cin >> k;
        long long l = BS(k).first;
        long long sum = BS(k).second;
        k -= sum;
        long long r =
            lower_bound(digits.begin(), digits.end(), k) - 1 - digits.begin();
        if (r >= 0) k -= digits[r];
        long long before = k / (r + 1);
        if (r >= 1) {
            long long index = k % (r + 1);
            if (index == 0) {
                index = r + 1;
                before--;
            }
            before += (long long)pow(10, r);
            cout << K_Digit(before, index) << endl;
        } else
            cout << before << endl;
    }
    return 0;
}
```

### Explanation
- **Location of Checks:** The checks are placed after significant computational segments, such as after the binary search loop and after each loop calculating digit sums, to avoid adding overhead during each iteration.
- **Rationale for Thresholds:** Thresholds are set based on observed slowdowns. These can be adjusted based on further analysis or performance testing.
- **Warning Messages:** Each check provides a descriptive warning to help identify which performance bottleneck condition has been triggered. This is crucial for debugging and tuning the algorithm.

