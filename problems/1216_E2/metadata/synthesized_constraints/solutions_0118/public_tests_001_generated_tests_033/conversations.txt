system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
template <class T>
inline bool chmax(T& a, T b) {
  if (a < b) {
    a = b;
    return 1;
  }
  return 0;
}
template <class T>
inline bool chmin(T& a, T b) {
  if (a > b) {
    a = b;
    return 1;
  }
  return 0;
}
const long long MAX = 510000;
const long long INF = 1LL << 61;
const long long MOD = 1000000007LL;
const long long mod = 998244353LL;
using namespace std;
long long ten[20];
long long sum(long long x) {
  if (x == 0) return 0;
  long long D = to_string(x).size();
  long long res = 0;
  for (long long i = 1; i <= D; i++) {
    long long mn = ten[i - 1];
    long long mx = min(ten[i] - 1, x);
    long long n = mx - mn + 1;
    for (long long j = 1; j < i; j++) {
      res += 9 * ten[j - 1] * n * j;
    }
    res += n * (n + 1) / 2 * i;
  }
  return res;
}
long long sum2(long long x) {
  if (x == 0) return 0;
  long long D = to_string(x).size();
  long long res = 0;
  long long mn = ten[D - 1];
  long long mx = min(ten[D] - 1, x);
  long long n = mx - mn + 1;
  for (long long i = 1; i < D; i++) {
    res += 9 * ten[i - 1] * i;
  }
  res += n * D;
  return res;
}
void solve(long long k) {
  long long l = 0;
  long long r = 1LL << 30;
  while (r - l > 1) {
    long long m = (l + r) / 2;
    if (sum(m) < k) {
      l = m;
    } else {
      r = m;
    }
  }
  long long k2 = k - sum(l);
  l = 0;
  r = 1LL << 30;
  while (r - l > 1) {
    long long m = (l + r) / 2;
    if (sum2(m) < k2) {
      l = m;
    } else {
      r = m;
    }
  }
  long long k3 = k2 - sum2(l);
  string s = to_string(r);
  cout << s[k3 - 1] << endl;
}
int main() {
  long long Q;
  scanf("%lld", &Q);
  ten[0] = 1;
  for (long long i = 1; i < 20; i++) {
    ten[i] = ten[i - 1] * 10;
  }
  for (long long loop = 0; loop < Q; loop++) {
    long long k;
    scanf("%lld", &k);
    solve(k);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
1
3
20
38
56


(G.2) Fast Input

1
3621


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmax(T& a, T b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmin(T& a, T b) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAX = 510000; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1LL << 61; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007LL; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 998244353LL; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long ten[20]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long sum(long long x) { /* line 24 slow_hit_count: 155, fast_hit_count: 31 */
  if (x == 0) return 0; /* line 25 slow_hit_count: 155, fast_hit_count: 31 */
  long long D = to_string(x).size(); /* line 26 slow_hit_count: 154, fast_hit_count: 31 */
  long long res = 0; /* line 27 slow_hit_count: 154, fast_hit_count: 31 */
  for (long long i = 1; i <= D; i++) { /* line 28 slow_hit_count: 897, fast_hit_count: 184 */
    long long mn = ten[i - 1]; /* line 29 slow_hit_count: 743, fast_hit_count: 153 */
    long long mx = min(ten[i] - 1, x); /* line 30 slow_hit_count: 743, fast_hit_count: 153 */
    long long n = mx - mn + 1; /* line 31 slow_hit_count: 743, fast_hit_count: 153 */
    for (long long j = 1; j < i; j++) { /* line 32 slow_hit_count: 2682, fast_hit_count: 545 */
      res += 9 * ten[j - 1] * n * j; /* line 33 slow_hit_count: 1939, fast_hit_count: 392 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    res += n * (n + 1) / 2 * i; /* line 35 slow_hit_count: 743, fast_hit_count: 153 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 37 slow_hit_count: 154, fast_hit_count: 31 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long sum2(long long x) { /* line 39 slow_hit_count: 155, fast_hit_count: 31 */
  if (x == 0) return 0; /* line 40 slow_hit_count: 155, fast_hit_count: 31 */
  long long D = to_string(x).size(); /* line 41 slow_hit_count: 154, fast_hit_count: 30 */
  long long res = 0; /* line 42 slow_hit_count: 154, fast_hit_count: 30 */
  long long mn = ten[D - 1]; /* line 43 slow_hit_count: 154, fast_hit_count: 30 */
  long long mx = min(ten[D] - 1, x); /* line 44 slow_hit_count: 154, fast_hit_count: 30 */
  long long n = mx - mn + 1; /* line 45 slow_hit_count: 154, fast_hit_count: 30 */
  for (long long i = 1; i < D; i++) { /* line 46 slow_hit_count: 741, fast_hit_count: 147 */
    res += 9 * ten[i - 1] * i; /* line 47 slow_hit_count: 587, fast_hit_count: 117 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  res += n * D; /* line 49 slow_hit_count: 154, fast_hit_count: 30 */
  return res; /* line 50 slow_hit_count: 154, fast_hit_count: 30 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
void solve(long long k) { /* line 52 slow_hit_count: 5, fast_hit_count: 1 */
  long long l = 0; /* line 53 slow_hit_count: 5, fast_hit_count: 1 */
  long long r = 1LL << 30; /* line 54 slow_hit_count: 5, fast_hit_count: 1 */
  while (r - l > 1) { /* line 55 slow_hit_count: 155, fast_hit_count: 31 */
    long long m = (l + r) / 2; /* line 56 slow_hit_count: 150, fast_hit_count: 30 */
    if (sum(m) < k) { /* line 57 slow_hit_count: 150, fast_hit_count: 30 */
      l = m; /* line 58 slow_hit_count: 6, fast_hit_count: 1 */
    } else { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 60 slow_hit_count: 144, fast_hit_count: 29 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  long long k2 = k - sum(l); /* line 63 slow_hit_count: 5, fast_hit_count: 1 */
  l = 0; /* line 64 slow_hit_count: 5, fast_hit_count: 1 */
  r = 1LL << 30; /* line 65 slow_hit_count: 5, fast_hit_count: 1 */
  while (r - l > 1) { /* line 66 slow_hit_count: 155, fast_hit_count: 31 */
    long long m = (l + r) / 2; /* line 67 slow_hit_count: 150, fast_hit_count: 30 */
    if (sum2(m) < k2) { /* line 68 slow_hit_count: 150, fast_hit_count: 30 */
      l = m; /* line 69 slow_hit_count: 5, fast_hit_count: 0 */
    } else { /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 71 slow_hit_count: 145, fast_hit_count: 30 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  long long k3 = k2 - sum2(l); /* line 74 slow_hit_count: 5, fast_hit_count: 1 */
  string s = to_string(r); /* line 75 slow_hit_count: 10, fast_hit_count: 2 */
  cout << s[k3 - 1] << endl; /* line 76 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 5, fast_hit_count: 1 */
int main() { /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  long long Q; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld", &Q); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  ten[0] = 1; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < 20; i++) { /* line 82 slow_hit_count: 20, fast_hit_count: 20 */
    ten[i] = ten[i - 1] * 10; /* line 83 slow_hit_count: 19, fast_hit_count: 19 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long loop = 0; loop < Q; loop++) { /* line 85 slow_hit_count: 6, fast_hit_count: 2 */
    long long k; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%lld", &k); /* line 87 slow_hit_count: 5, fast_hit_count: 1 */
    solve(k); /* line 88 slow_hit_count: 5, fast_hit_count: 1 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem, we need to analyze why the C program performs slower on certain inputs, specifically focusing on the function and loop structures in the code. We'll derive conditions under which the program is likely to slow down, using the given line hit counts for both fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `sum(long long x)`**:
   - **Lines 24-37**: The function `sum` is called significantly more times during the execution of the slow input compared to the fast input (155 vs. 31 hits).
   - **Inner Loop (Lines 28-35)**: This loop has a very high hit count (897 vs. 184), suggesting nested loops or extensive iteration due to input characteristics.

2. **Function `sum2(long long x)`**:
   - **Lines 39-50**: Similar to `sum`, the `sum2` function also shows increased hits for the slow input (155 vs. 31).
   - **Inner Loop (Lines 46-49)**: This loop is also hit more frequently (741 vs. 147), indicating it might be a bottleneck.

3. **Binary Search in `solve(long long k)`**:
   - **Lines 55-62 and 66-73**: The binary search mechanism within `solve` reflects increased iterations (155 vs. 31), likely indicating the algorithm has to search through a larger space for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the natural language performance invariants:

1. **Nested Loop Complexity**:
   - **Invariant**: "If the number of digits involved in computation (`D`) increases significantly, especially in nested loops handling large ranges, the program may experience performance degradation. This is due to the quadratic nature of iterating through a growing block of numbers."
   - **Explanation**: The performance bottleneck arises because as `x` becomes large, the nested loops in `sum` and `sum2` functions are executed more frequently, leading to increased computational overhead.

2. **Binary Search Expansion**:
   - **Invariant**: "When the target position `k` in the sequence requires a large search space, the binary search may iterate extensively, causing slowdown. This is especially true when the sum functions have to evaluate large ranges to locate the block containing `k`."
   - **Explanation**: The larger value of `k` requires the binary search to cover more numbers in the `solve` function, intensifying the number of calls to `sum` and `sum2`.

3. **Input Size and Complexity**:
   - **Invariant**: "For large values of `k`, particularly when approaching the upper limit of the input constraints, the computation of block sums and determining digit positions becomes a significant performance factor."
   - **Explanation**: This captures the essence of how input size and complexity directly correlate with the number of computations required, as noted by increased function and loop hits.

### Conclusion

The proposed invariants identify performance triggers in the code based on the interaction of loops, recursion, and search operations with inputs near constraint limits. These conditions highlight the scenarios where the program is likely to enter a slow execution path, facilitating the recognition of performance bottlenecks in future test cases or inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: To proceed, we'll first implement the performance characterizing invariants as checker functions in C++ and then integrate these checkers into the original program. 

### Phase 3: Implement Checker Code

Based on the natural language invariants derived earlier, here are the checker functions in C++:

1. **Checker for Nested Loop Complexity**:
   - We'll create a checker that triggers if the estimated number of loop iterations becomes too large based on the size of `D`.

```cpp
void check_nested_loop_invariant(long long D) {
    if (D > 15) { // Arbitrary threshold for D based on potential slowdowns
        cerr << "Warning: Nested loop invariant triggered - high number of iterations due to large D." << endl;
        abort();
    }
}
```

2. **Checker for Binary Search Expansion**:
   - We'll add a checker to alert when the binary search could iterate extensively based on the value of `k`.

```cpp
void check_binary_search_invariant(long long k) {
    if (k > 1e17) { // Threshold based on input size constraints
        cerr << "Warning: Binary search invariant triggered - large search space required for k." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, we will integrate these checkers into the original code at the appropriate locations to ensure they detect the performance bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>

using namespace std;

const long long MAX = 510000;
const long long INF = 1LL << 61;
const long long MOD = 1000000007LL;
const long long mod = 998244353LL;
long long ten[20];

void check_nested_loop_invariant(long long D) {
    if (D > 15) { // Arbitrary threshold for D based on potential slowdowns
        cerr << "Warning: Nested loop invariant triggered - high number of iterations due to large D." << endl;
        abort();
    }
}

void check_binary_search_invariant(long long k) {
    if (k > 1e17) { // Threshold based on input size constraints
        cerr << "Warning: Binary search invariant triggered - large search space required for k." << endl;
        abort();
    }
}

long long sum(long long x) {
    if (x == 0) return 0;
    long long D = to_string(x).size();

    // Check the nested loop invariant
    check_nested_loop_invariant(D);

    long long res = 0;
    for (long long i = 1; i <= D; i++) {
        long long mn = ten[i - 1];
        long long mx = min(ten[i] - 1, x);
        long long n = mx - mn + 1;
        for (long long j = 1; j < i; j++) {
            res += 9 * ten[j - 1] * n * j;
        }
        res += n * (n + 1) / 2 * i;
    }
    return res;
}

long long sum2(long long x) {
    if (x == 0) return 0;
    long long D = to_string(x).size();
    
    // Check the nested loop invariant
    check_nested_loop_invariant(D);

    long long res = 0;
    long long mn = ten[D - 1];
    long long mx = min(ten[D] - 1, x);
    long long n = mx - mn + 1;
    for (long long i = 1; i < D; i++) {
        res += 9 * ten[i - 1] * i;
    }
    res += n * D;
    return res;
}

void solve(long long k) {
    // Check the binary search invariant
    check_binary_search_invariant(k);

    long long l = 0;
    long long r = 1LL << 30;
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if (sum(m) < k) {
            l = m;
        } else {
            r = m;
        }
    }
    long long k2 = k - sum(l);
    l = 0;
    r = 1LL << 30;
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if (sum2(m) < k2) {
            l = m;
        } else {
            r = m;
        }
    }
    long long k3 = k2 - sum2(l);
    string s = to_string(r);
    cout << s[k3 - 1] << endl;
}

int main() {
    long long Q;
    scanf("%lld", &Q);
    ten[0] = 1;
    for (long long i = 1; i < 20; i++) {
        ten[i] = ten[i - 1] * 10;
    }
    for (long long loop = 0; loop < Q; loop++) {
        long long k;
        scanf("%lld", &k);
        solve(k);
    }
    return 0;
}
```

### Explanation

- **Nested Loop Invariant**: The `check_nested_loop_invariant` function monitors the number of iterations based on `D`, preventing excessive iterations that can lead to slow execution.
- **Binary Search Invariant**: The `check_binary_search_invariant` function ensures that the search space for `k` is within a practical range, avoiding overly extensive searching which may cause a slowdown.

These checks will help guide future optimizations and ensure the program doesn't slow down unexpectedly for large or complex input sizes.

