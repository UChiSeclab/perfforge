system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using lint = long long;
lint pw(lint n, lint k) {
  if (k == 0) return 1;
  if (k & 1) return n * pw(n, k - 1);
  lint res = pw(n, k / 2);
  return res * res;
}
lint get_block_size_up_to_nth_block(lint n) {
  lint lg = log10(n);
  lint add = 0;
  lint res = 0;
  for (lint len = 0; len <= lg; len++) {
    lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1
                           : lint(pw(10ll, len + 1)) - lint(pw(10ll, len));
    res += add * cnt + ((cnt * (cnt + 1)) / 2) * (len + 1);
    add += cnt * (len + 1);
  }
  return res;
}
lint get_in_block(lint n) {
  lint lg = log10(n);
  lint add = 0;
  lint res = 0;
  for (lint len = 0; len <= lg; len++) {
    lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1
                           : lint(pw(10ll, len + 1)) - lint(pw(10ll, len));
    res += cnt * (len + 1);
  }
  return res;
}
char solve(lint k) {
  lint le = 1, ri = 1e9;
  lint block = 0;
  while (le <= ri) {
    lint mid = (le + ri) / 2;
    if (get_block_size_up_to_nth_block(mid) >= k) {
      block = mid;
      ri = mid - 1;
    } else {
      le = mid + 1;
    }
  }
  k -= get_block_size_up_to_nth_block(block - 1);
  le = 1, ri = 1e9;
  lint ans = -1;
  while (le <= ri) {
    lint mid = (le + ri) / 2;
    if (get_in_block(mid) >= k) {
      ans = mid;
      ri = mid - 1;
    } else {
      le = mid + 1;
    }
  }
  return to_string(ans)[k - get_in_block(ans - 1) - 1];
}
int main() {
  lint q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    lint k;
    cin >> k;
    cout << solve(k) << "\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
1
3
12
38
56


(G.2) Fast Input

1
3621


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using lint = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
lint pw(lint n, lint k) { /* line 4 slow_hit_count: 8758, fast_hit_count: 1768 */
  if (k == 0) return 1; /* line 5 slow_hit_count: 8758, fast_hit_count: 1768 */
  if (k & 1) return n * pw(n, k - 1); /* line 6 slow_hit_count: 6146, fast_hit_count: 1238 */
  lint res = pw(n, k / 2); /* line 7 slow_hit_count: 2780, fast_hit_count: 556 */
  return res * res; /* line 8 slow_hit_count: 2780, fast_hit_count: 556 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
lint get_block_size_up_to_nth_block(lint n) { /* line 10 slow_hit_count: 154, fast_hit_count: 31 */
  lint lg = log10(n); /* line 11 slow_hit_count: 154, fast_hit_count: 31 */
  lint add = 0; /* line 12 slow_hit_count: 154, fast_hit_count: 31 */
  lint res = 0; /* line 13 slow_hit_count: 154, fast_hit_count: 31 */
  for (lint len = 0; len <= lg; len++) { /* line 14 slow_hit_count: 884, fast_hit_count: 182 */
    lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1 /* line 15 slow_hit_count: 730, fast_hit_count: 151 */
                           : lint(pw(10ll, len + 1)) - lint(pw(10ll, len)); /* line 16 slow_hit_count: 577, fast_hit_count: 120 */
    res += add * cnt + ((cnt * (cnt + 1)) / 2) * (len + 1); /* line 17 slow_hit_count: 730, fast_hit_count: 151 */
    add += cnt * (len + 1); /* line 18 slow_hit_count: 730, fast_hit_count: 151 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 20 slow_hit_count: 154, fast_hit_count: 31 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
lint get_in_block(lint n) { /* line 22 slow_hit_count: 154, fast_hit_count: 30 */
  lint lg = log10(n); /* line 23 slow_hit_count: 154, fast_hit_count: 30 */
  lint add = 0; /* line 24 slow_hit_count: 154, fast_hit_count: 30 */
  lint res = 0; /* line 25 slow_hit_count: 154, fast_hit_count: 30 */
  for (lint len = 0; len <= lg; len++) { /* line 26 slow_hit_count: 883, fast_hit_count: 174 */
    lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1 /* line 27 slow_hit_count: 729, fast_hit_count: 144 */
                           : lint(pw(10ll, len + 1)) - lint(pw(10ll, len)); /* line 28 slow_hit_count: 576, fast_hit_count: 115 */
    res += cnt * (len + 1); /* line 29 slow_hit_count: 729, fast_hit_count: 144 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 31 slow_hit_count: 154, fast_hit_count: 30 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
char solve(lint k) { /* line 33 slow_hit_count: 5, fast_hit_count: 1 */
  lint le = 1, ri = 1e9; /* line 34 slow_hit_count: 5, fast_hit_count: 1 */
  lint block = 0; /* line 35 slow_hit_count: 5, fast_hit_count: 1 */
  while (le <= ri) { /* line 36 slow_hit_count: 154, fast_hit_count: 31 */
    lint mid = (le + ri) / 2; /* line 37 slow_hit_count: 149, fast_hit_count: 30 */
    if (get_block_size_up_to_nth_block(mid) >= k) { /* line 38 slow_hit_count: 149, fast_hit_count: 30 */
      block = mid; /* line 39 slow_hit_count: 141, fast_hit_count: 27 */
      ri = mid - 1; /* line 40 slow_hit_count: 141, fast_hit_count: 27 */
    } else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      le = mid + 1; /* line 42 slow_hit_count: 8, fast_hit_count: 3 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  k -= get_block_size_up_to_nth_block(block - 1); /* line 45 slow_hit_count: 5, fast_hit_count: 1 */
  le = 1, ri = 1e9; /* line 46 slow_hit_count: 5, fast_hit_count: 1 */
  lint ans = -1; /* line 47 slow_hit_count: 5, fast_hit_count: 1 */
  while (le <= ri) { /* line 48 slow_hit_count: 154, fast_hit_count: 30 */
    lint mid = (le + ri) / 2; /* line 49 slow_hit_count: 149, fast_hit_count: 29 */
    if (get_in_block(mid) >= k) { /* line 50 slow_hit_count: 149, fast_hit_count: 29 */
      ans = mid; /* line 51 slow_hit_count: 143, fast_hit_count: 29 */
      ri = mid - 1; /* line 52 slow_hit_count: 143, fast_hit_count: 29 */
    } else { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      le = mid + 1; /* line 54 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  return to_string(ans)[k - get_in_block(ans - 1) - 1]; /* line 57 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  lint q; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < q; i++) { /* line 62 slow_hit_count: 6, fast_hit_count: 2 */
    lint k; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> k; /* line 64 slow_hit_count: 5, fast_hit_count: 1 */
    cout << solve(k) << "\n"; /* line 65 slow_hit_count: 5, fast_hit_count: 1 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts for the slow and fast inputs, several inefficiencies can be identified:

1. **Function `pw(lint n, lint k)`**: This function is called frequently, with the slow hit count significantly higher than the fast one. This suggests that `pw` is repeatedly invoked, especially in lines 6 and 7, indicating that it's part of a recursive calculation related to powers of ten.

2. **Function `get_block_size_up_to_nth_block(lint n)`**: The loop starting at line 14 is heavily hit, especially line 17. This indicates that calculating the block size is a repeated process for the slow input.

3. **Binary Searches in `solve(lint k)`**: The binary search loops on lines 36-43 and 48-55 have significantly more iterations in the slow run, suggesting that the binary search has more iterations or checks more values in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the potential performance-characterizing invariants based on the analysis:

1. **Power Function Utilization**: 
   - **Invariant**: "If the function involving power calculations is called deeply or recursively with high branching (due to multiple recursive calls), the program may slow down significantly. This typically happens when determining the sequence block requires evaluating powers of ten multiple times."
   - **Rationale**: The power function `pw` is extensively used and is recursive. Such calculations are more frequent when handling large values of `k`.

2. **Block Size Calculation**: 
   - **Invariant**: "When calculating the block size for large `k`, especially when `k` approaches the limits where blocks are large, the computations can become expensive due to nested loops and repeated arithmetic operations."
   - **Rationale**: The function `get_block_size_up_to_nth_block` involves calculating cumulative sums which can be costly if invoked multiple times for large values, thus slowing execution.

3. **Binary Search Iterations**:
   - **Invariant**: "If binary searches navigate through a large range of possible block sizes or positions, they can slow down the solution, especially when the estimated block size varies greatly from the actual needed size."
   - **Rationale**: The binary searches in the `solve` function iterate more times in the slow input, indicating inefficiency when the block size or position requires extensive searching.

These invariants help abstract the conditions under which performance degradation can occur, supporting the identification of bottlenecks without relying on specific input values. By focusing on input patterns and computational structure, the invariants can guide future optimizations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets implementing these checks:

1. **Power Function Utilization** Check:
   - **Invariant**: Detect deep or repeated calls to the power function.
   
```cpp
void check_power_function_invariant(lint n, lint k) {
    if (n > 10 && k > 10) {  // Arbitrarily chosen, high n and k values that might indicate deep recursion.
        cerr << "Warning: Performance bottleneck condition triggered in power calculations!" << endl;
        abort();
    }
}
```

2. **Block Size Calculation** Check:
   - **Invariant**: Monitor large block calculations.

```cpp
void check_block_size_invariant(lint blockSize) {
    if (blockSize > 1e6) {  // Example threshold for large block size calculations.
        cerr << "Warning: Performance bottleneck condition triggered in block size calculations!" << endl;
        abort();
    }
}
```

3. **Binary Search Iterations** Check:
   - **Invariant**: Observe extensive binary search iterations.

```cpp
void check_binary_search_invariant(lint iterations) {
    if (iterations > 100) {  // Arbitrarily chosen threshold for excessive iterations.
        cerr << "Warning: Performance bottleneck condition triggered during binary search!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here's how to instrument the original code with these checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
using lint = long long;

// Power function utilization check
void check_power_function_invariant(lint n, lint k) {
    if (n > 10 && k > 10) {
        cerr << "Warning: Performance bottleneck condition triggered in power calculations!" << endl;
        abort();
    }
}

// Block size calculation check
void check_block_size_invariant(lint blockSize) {
    if (blockSize > 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered in block size calculations!" << endl;
        abort();
    }
}

// Binary search iterations check
void check_binary_search_invariant(lint iterations) {
    if (iterations > 100) {
        cerr << "Warning: Performance bottleneck condition triggered during binary search!" << endl;
        abort();
    }
}

lint pw(lint n, lint k) {
    check_power_function_invariant(n, k);
    if (k == 0) return 1;
    if (k & 1) return n * pw(n, k - 1);
    lint res = pw(n, k / 2);
    return res * res;
}

lint get_block_size_up_to_nth_block(lint n) {
    lint lg = log10(n);
    lint add = 0;
    lint res = 0;
    for (lint len = 0; len <= lg; len++) {
        lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1
                               : lint(pw(10ll, len + 1)) - lint(pw(10ll, len));
        res += add * cnt + ((cnt * (cnt + 1)) / 2) * (len + 1);
        add += cnt * (len + 1);
    }
    check_block_size_invariant(res); // Place check after calculation
    return res;
}

lint get_in_block(lint n) {
    lint lg = log10(n);
    lint add = 0;
    lint res = 0;
    for (lint len = 0; len <= lg; len++) {
        lint cnt = (len == lg) ? n - lint(pw(10ll, len)) + 1
                               : lint(pw(10ll, len + 1)) - lint(pw(10ll, len));
        res += cnt * (len + 1);
    }
    return res;
}

char solve(lint k) {
    lint le = 1, ri = 1e9;
    lint block = 0;
    lint iterations = 0;  // Counter for binary search iterations
    while (le <= ri) {
        iterations++;
        lint mid = (le + ri) / 2;
        if (get_block_size_up_to_nth_block(mid) >= k) {
            block = mid;
            ri = mid - 1;
        } else {
            le = mid + 1;
        }
    }
    check_binary_search_invariant(iterations); // Check after binary search completion

    k -= get_block_size_up_to_nth_block(block - 1);
    le = 1, ri = 1e9;
    lint ans = -1;
    iterations = 0;  // Reset counter for the second binary search
    while (le <= ri) {
        iterations++;
        lint mid = (le + ri) / 2;
        if (get_in_block(mid) >= k) {
            ans = mid;
            ri = mid - 1;
        } else {
            le = mid + 1;
        }
    }
    check_binary_search_invariant(iterations); // Check after second binary search

    return to_string(ans)[k - get_in_block(ans - 1) - 1];
}

int main() {
    lint q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        lint k;
        cin >> k;
        cout << solve(k) << "\n";
    }
}
```

**Comments:**
- The `check_power_function_invariant` is used inside the `pw` function.
- The `check_block_size_invariant` is placed right after calculating the block size.
- The `check_binary_search_invariant` is used after each binary search loop to ensure iteration count doesn't exceed a threshold. 

These checks should help identify performance bottlenecks during execution, especially when run under a fuzzer or during testing.

