system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
void _R(T &x) {
  cin >> x;
}
void _R(int &x) { scanf("%d", &x); }
void _R(long long &x) { scanf("%lld", &x); }
void _R(double &x) { scanf("%lf", &x); }
void _R(char &x) { scanf(" %c", &x); }
void _R(char *x) { scanf("%s", x); }
void R() {}
template <class T, class... U>
void R(T &head, U &...tail) {
  _R(head);
  R(tail...);
}
template <class T>
void _W(const T &x) {
  cout << x;
}
void _W(const int &x) { printf("%d", x); }
void _W(const long long &x) { printf("%lld", x); }
void _W(const double &x) { printf("%.16f", x); }
void _W(const char &x) { putchar(x); }
void _W(const char *x) { printf("%s", x); }
template <class T, class U>
void _W(const pair<T, U> &x) {
  _W(x.first);
  putchar(' ');
  _W(x.second);
}
template <class T>
void _W(const vector<T> &x) {
  for (auto i = x.begin(); i != x.end(); _W(*i++))
    if (i != x.cbegin()) putchar(' ');
}
void W() {}
template <class T, class... U>
void W(const T &head, const U &...tail) {
  _W(head);
  putchar(sizeof...(tail) ? ' ' : '\n');
  W(tail...);
}
int MOD = 1e9 + 7;
void ADD(long long &x, long long v) {
  x = (x + v) % MOD;
  if (x < 0) x += MOD;
}
const int SIZE = 1e6 + 10;
vector<pair<long long, long long> > AA;
int an[500];
long long g(long long x, int it) {
  vector<int> ker;
  while (x) {
    ker.push_back(x % 10);
    x /= 10;
  }
  reverse((ker).begin(), (ker).end());
  return ker[it];
}
long long f(long long n) {
  if (n <= 9) return n;
  n -= 9;
  if (n <= 90 * 2) {
    return g(10 + (n - 1) / 2, (n - 1) % 2);
  }
  n -= 90 * 2LL;
  if (n <= 900 * 3) {
    return g(100 + (n - 1) / 3, (n - 1) % 3);
  }
  n -= 900 * 3LL;
  if (n <= 9000 * 4LL) {
    return g(1000 + (n - 1) / 4, (n - 1) % 4);
  }
  n -= 9000 * 4LL;
  if (n <= 90000 * 5LL) {
    return g(10000 + (n - 1) / 5, (n - 1) % 5);
  }
  n -= 90000 * 5LL;
  if (n <= 900000 * 6LL) {
    return g(100000 + (n - 1) / 6, (n - 1) % 6);
  }
  n -= 900000 * 6LL;
  if (n <= 9000000 * 7LL) {
    return g(1000000 + (n - 1) / 7, (n - 1) % 7);
  }
  n -= 9000000 * 7LL;
  if (n <= 90000000 * 8LL) {
    return g(10000000 + (n - 1) / 8, (n - 1) % 8);
  }
  n -= 90000000 * 8LL;
  if (n <= 900000000 * 9LL) {
    return g(100000000 + (n - 1) / 9, (n - 1) % 9);
  }
  return -1;
}
int main() {
  int q;
  R(q);
  for (int i = 0; i < (q); ++i) {
    long long x;
    R(x);
    AA.push_back({x, i});
  }
  sort((AA).begin(), (AA).end());
  long long now = 0;
  long long len = 0;
  int it = 0;
  for (int i = (1); i <= (9); ++i) {
    len++;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (10); i <= (99); ++i) {
    len += 2;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (100); i <= (999); ++i) {
    len += 3;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (1000); i <= (9999); ++i) {
    len += 4;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (10000); i <= (99999); ++i) {
    len += 5;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (100000); i <= (999999); ++i) {
    len += 6;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (1000000); i <= (9999999); ++i) {
    len += 7;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (10000000); i <= (99999999); ++i) {
    len += 8;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  for (int i = (100000000); i <= (482720320); ++i) {
    len += 9;
    while (it < q && now + len >= AA[it].first) {
      an[AA[it].second] = f(AA[it].first - now);
      it++;
    }
    now += len;
  }
  W(vector<int>(an, an + q));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
931740878858857530


(G.2) Fast Input

1
2836


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void _R(T &x) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void _R(int &x) { scanf("%d", &x); } /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
void _R(long long &x) { scanf("%lld", &x); } /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
void _R(double &x) { scanf("%lf", &x); } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void _R(char &x) { scanf(" %c", &x); } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void _R(char *x) { scanf("%s", x); } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void R() {} /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
template <class T, class... U> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void R(T &head, U &...tail) { /* line 14 slow_hit_count: 4, fast_hit_count: 4 */
  _R(head); /* line 15 slow_hit_count: 4, fast_hit_count: 4 */
  R(tail...); /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
template <class T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const T &x) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cout << x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const int &x) { printf("%d", x); } /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
void _W(const long long &x) { printf("%lld", x); } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const double &x) { printf("%.16f", x); } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const char &x) { putchar(x); } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const char *x) { printf("%s", x); } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
template <class T, class U> /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const pair<T, U> &x) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  _W(x.first); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  putchar(' '); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  _W(x.second); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void _W(const vector<T> &x) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto i = x.begin(); i != x.end(); _W(*i++)) /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
    if (i != x.cbegin()) putchar(' '); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
void W() {} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
template <class T, class... U> /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
void W(const T &head, const U &...tail) { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  _W(head); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  putchar(sizeof...(tail) ? ' ' : '\n'); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  W(tail...); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
int MOD = 1e9 + 7; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
void ADD(long long &x, long long v) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  x = (x + v) % MOD; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < 0) x += MOD; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
const int SIZE = 1e6 + 10; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<long long, long long> > AA; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int an[500]; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
long long g(long long x, int it) { /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  vector<int> ker; /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  while (x) { /* line 55 slow_hit_count: 10, fast_hit_count: 0 */
    ker.push_back(x % 10); /* line 56 slow_hit_count: 9, fast_hit_count: 0 */
    x /= 10; /* line 57 slow_hit_count: 9, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  reverse((ker).begin(), (ker).end()); /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
  return ker[it]; /* line 60 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long n) { /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= 9) return n; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  n -= 9; /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 90 * 2) { /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
    return g(10 + (n - 1) / 2, (n - 1) % 2); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 90 * 2LL; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 900 * 3) { /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
    return g(100 + (n - 1) / 3, (n - 1) % 3); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 900 * 3LL; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 9000 * 4LL) { /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
    return g(1000 + (n - 1) / 4, (n - 1) % 4); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 9000 * 4LL; /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 90000 * 5LL) { /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
    return g(10000 + (n - 1) / 5, (n - 1) % 5); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 90000 * 5LL; /* line 80 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 900000 * 6LL) { /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
    return g(100000 + (n - 1) / 6, (n - 1) % 6); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 900000 * 6LL; /* line 84 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 9000000 * 7LL) { /* line 85 slow_hit_count: 1, fast_hit_count: 0 */
    return g(1000000 + (n - 1) / 7, (n - 1) % 7); /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 9000000 * 7LL; /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 90000000 * 8LL) { /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
    return g(10000000 + (n - 1) / 8, (n - 1) % 8); /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  n -= 90000000 * 8LL; /* line 92 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 900000000 * 9LL) { /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
    return g(100000000 + (n - 1) / 9, (n - 1) % 9); /* line 94 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  return -1; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  int q; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  R(q); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (q); ++i) { /* line 101 slow_hit_count: 2, fast_hit_count: 2 */
    long long x; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    R(x); /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
    AA.push_back({x, i}); /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  sort((AA).begin(), (AA).end()); /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  long long now = 0; /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  long long len = 0; /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  int it = 0; /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (1); i <= (9); ++i) { /* line 110 slow_hit_count: 10, fast_hit_count: 10 */
    len++; /* line 111 slow_hit_count: 9, fast_hit_count: 9 */
    while (it < q && now + len >= AA[it].first) { /* line 112 slow_hit_count: 9, fast_hit_count: 9 */
      an[AA[it].second] = f(AA[it].first - now); /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 116 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (10); i <= (99); ++i) { /* line 118 slow_hit_count: 91, fast_hit_count: 91 */
    len += 2; /* line 119 slow_hit_count: 90, fast_hit_count: 90 */
    while (it < q && now + len >= AA[it].first) { /* line 120 slow_hit_count: 90, fast_hit_count: 91 */
      an[AA[it].second] = f(AA[it].first - now); /* line 121 slow_hit_count: 0, fast_hit_count: 1 */
      it++; /* line 122 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 124 slow_hit_count: 90, fast_hit_count: 90 */
  } /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (100); i <= (999); ++i) { /* line 126 slow_hit_count: 901, fast_hit_count: 901 */
    len += 3; /* line 127 slow_hit_count: 900, fast_hit_count: 900 */
    while (it < q && now + len >= AA[it].first) { /* line 128 slow_hit_count: 900, fast_hit_count: 900 */
      an[AA[it].second] = f(AA[it].first - now); /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 132 slow_hit_count: 900, fast_hit_count: 900 */
  } /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (1000); i <= (9999); ++i) { /* line 134 slow_hit_count: 9001, fast_hit_count: 9001 */
    len += 4; /* line 135 slow_hit_count: 9000, fast_hit_count: 9000 */
    while (it < q && now + len >= AA[it].first) { /* line 136 slow_hit_count: 9000, fast_hit_count: 9000 */
      an[AA[it].second] = f(AA[it].first - now); /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 140 slow_hit_count: 9000, fast_hit_count: 9000 */
  } /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (10000); i <= (99999); ++i) { /* line 142 slow_hit_count: 90001, fast_hit_count: 90001 */
    len += 5; /* line 143 slow_hit_count: 90000, fast_hit_count: 90000 */
    while (it < q && now + len >= AA[it].first) { /* line 144 slow_hit_count: 90000, fast_hit_count: 90000 */
      an[AA[it].second] = f(AA[it].first - now); /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 148 slow_hit_count: 90000, fast_hit_count: 90000 */
  } /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (100000); i <= (999999); ++i) { /* line 150 slow_hit_count: 900001, fast_hit_count: 900001 */
    len += 6; /* line 151 slow_hit_count: 900000, fast_hit_count: 900000 */
    while (it < q && now + len >= AA[it].first) { /* line 152 slow_hit_count: 900000, fast_hit_count: 900000 */
      an[AA[it].second] = f(AA[it].first - now); /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 154 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 156 slow_hit_count: 900000, fast_hit_count: 900000 */
  } /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (1000000); i <= (9999999); ++i) { /* line 158 slow_hit_count: 9000001, fast_hit_count: 9000001 */
    len += 7; /* line 159 slow_hit_count: 9000000, fast_hit_count: 9000000 */
    while (it < q && now + len >= AA[it].first) { /* line 160 slow_hit_count: 9000000, fast_hit_count: 9000000 */
      an[AA[it].second] = f(AA[it].first - now); /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 163 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 164 slow_hit_count: 9000000, fast_hit_count: 9000000 */
  } /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (10000000); i <= (99999999); ++i) { /* line 166 slow_hit_count: 90000001, fast_hit_count: 90000001 */
    len += 8; /* line 167 slow_hit_count: 90000000, fast_hit_count: 90000000 */
    while (it < q && now + len >= AA[it].first) { /* line 168 slow_hit_count: 90000000, fast_hit_count: 90000000 */
      an[AA[it].second] = f(AA[it].first - now); /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
      it++; /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 172 slow_hit_count: 90000000, fast_hit_count: 90000000 */
  } /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (100000000); i <= (482720320); ++i) { /* line 174 slow_hit_count: 382720322, fast_hit_count: 382720322 */
    len += 9; /* line 175 slow_hit_count: 382720321, fast_hit_count: 382720321 */
    while (it < q && now + len >= AA[it].first) { /* line 176 slow_hit_count: 382720322, fast_hit_count: 382720321 */
      an[AA[it].second] = f(AA[it].first - now); /* line 177 slow_hit_count: 1, fast_hit_count: 0 */
      it++; /* line 178 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
    now += len; /* line 180 slow_hit_count: 382720321, fast_hit_count: 382720321 */
  } /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
  W(vector<int>(an, an + q)); /* line 182 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 183 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 184 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count data, the following observations can be made:

1. **Heavy Iteration in Loops:**
   - The loops that iterate over large ranges such as `(100000000 to 482720320)` (line 174) have extremely high hit counts. This suggests that these loops are being executed many times, contributing significantly to the slowdown.

2. **Function `f` Calls:**
   - The function `f(long long n)` (line 62) is called frequently for the slow input, particularly in line 177. This function implements multiple conditional checks and arithmetic operations that could cumulatively contribute to inefficiency if called excessively.

3. **Digit Extraction in Function `g`:**
   - Function `g(long long x, int it)` (line 53) is involved in digit extraction and has multiple lines with relatively high hit counts (e.g., lines 55, 56, and 57). This suggests intensive processing within this function, particularly when it repeatedly manipulates large numbers.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are some natural language performance invariants that describe the conditions under which the program may experience slowdowns:

1. **High Loop Iterations with Large Index Range:**
   - "When the sequence position `k_i` requires iterating over very large ranges of numbers (such as 100 million or more), the loop execution becomes extensive and computationally expensive."

2. **Frequent Calls to Digit Extraction with Large Numbers:**
   - "If the query involves extracting digits from large numbers repeatedly, the digit manipulation process can slow down the execution significantly."

3. **High Function Call Frequency with Complex Conditions:**
   - "When the function `f` is invoked repeatedly with large values of `n` that trigger deep conditional checks and arithmetic operations, the overhead can cause delays."

4. **Overall Sequence Position vs. Length Computation:**
   - "If the value of `k_i` is positioned deep into the sequence and requires substantial length computation (`now + len` comparison), it results in increased processing time."

The above invariants provide a structured understanding of the conditions that lead to performance bottlenecks in this program, focusing on large range iterations, frequency of complex function calls, and intensive digit manipulations. These descriptions abstract the specific numeric values and focus on behavior patterns that are likely to cause slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between the easy and the hard versions is the maximum value of k.

You are given an infinite sequence of form "112123123412345..." which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one — from 1 to 2, the third one — from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. 

So the first 56 elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.

Your task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.

Input

The first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries.

The i-th of the following q lines contains one integer k_i (1 ≤ k_i ≤ 10^{18}) — the description of the corresponding query.

Output

Print q lines. In the i-th line print one digit x_i (0 ≤ x_i ≤ 9) — the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.

Examples

Input


5
1
3
20
38
56


Output


1
2
5
2
0


Input


4
2132
506
999999999999999999
1000000000000000000


Output


8
2
4
1

Note

Answers on queries from the first example are described in the problem statement.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Below are the C++ checker snippets for the performance-characterizing invariants derived earlier:

1. **Check for High Loop Iterations with Large Index Range:**
   ```cpp
   void check_large_iteration_invariant(long long current_range) {
       if (current_range > 100000000) {
           cerr << "Warning: Large iteration range - potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

2. **Check for Frequent Calls to Digit Extraction with Large Numbers:**
   ```cpp
   void check_large_digit_extraction_invariant(long long number) {
       if (number > 1000000000000) {
           cerr << "Warning: Large number digit extraction - potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

3. **Check for High Function Call Frequency with Complex Conditions:**
   ```cpp
   void check_function_call_frequency(long long n) {
       if (n > 100000000) {
           cerr << "Warning: High function call frequency - potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

4. **Check for Overall Sequence Position vs. Length Computation:**
   ```cpp
   void check_sequence_position_invariant(long long position, long long now, long long len) {
       if (position > now + len) {
           cerr << "Warning: Sequence position vs. length computation - potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code with Original Program

Below is the instrumented C++ code with the checker functions inserted at appropriate places:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_iteration_invariant(long long current_range) {
    if (current_range > 100000000) {
        cerr << "Warning: Large iteration range - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_large_digit_extraction_invariant(long long number) {
    if (number > 1000000000000) {
        cerr << "Warning: Large number digit extraction - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_function_call_frequency(long long n) {
    if (n > 100000000) {
        cerr << "Warning: High function call frequency - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_sequence_position_invariant(long long position, long long now, long long len) {
    if (position > now + len) {
        cerr << "Warning: Sequence position vs. length computation - potential performance bottleneck!" << endl;
        abort();
    }
}

// Main function and logic
void R(int &x) { scanf("%d", &x); }
void R(long long &x) { scanf("%lld", &x); }
int MOD = 1e9 + 7;
const int SIZE = 1e6 + 10;
vector<pair<long long, long long> > AA;
int an[500];

long long g(long long x, int it) {
    vector<int> ker;
    while (x) {
        ker.push_back(x % 10);
        x /= 10;
    }
    reverse((ker).begin(), (ker).end());
    return ker[it];
}

long long f(long long n) {
    check_function_call_frequency(n); // Check for high function call frequency
    if (n <= 9) return n;
    n -= 9;
    if (n <= 90 * 2) {
        return g(10 + (n - 1) / 2, (n - 1) % 2);
    }
    n -= 90 * 2LL;
    if (n <= 900 * 3) {
        return g(100 + (n - 1) / 3, (n - 1) % 3);
    }
    n -= 900 * 3LL;
    if (n <= 9000 * 4LL) {
        return g(1000 + (n - 1) / 4, (n - 1) % 4);
    }
    n -= 9000 * 4LL;
    if (n <= 90000 * 5LL) {
        return g(10000 + (n - 1) / 5, (n - 1) % 5);
    }
    n -= 90000 * 5LL;
    if (n <= 900000 * 6LL) {
        return g(100000 + (n - 1) / 6, (n - 1) % 6);
    }
    n -= 900000 * 6LL;
    if (n <= 9000000 * 7LL) {
        return g(1000000 + (n - 1) / 7, (n - 1) % 7);
    }
    n -= 9000000 * 7LL;
    if (n <= 90000000 * 8LL) {
        return g(10000000 + (n - 1) / 8, (n - 1) % 8);
    }
    n -= 90000000 * 8LL;
    if (n <= 900000000 * 9LL) {
        return g(100000000 + (n - 1) / 9, (n - 1) % 9);
    }
    return -1;
}

int main() {
    int q;
    R(q);
    for (int i = 0; i < (q); ++i) {
        long long x;
        R(x);
        AA.push_back({x, i});
    }
    sort((AA).begin(), (AA).end());
    long long now = 0;
    long long len = 0;
    int it = 0;
    for (int i = (1); i <= (9); ++i) {
        len++;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len); // Check sequence position vs. length
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (10); i <= (99); ++i) {
        len += 2;
        check_large_iteration_invariant(len); // Check for large iteration range
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (100); i <= (999); ++i) {
        len += 3;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (1000); i <= (9999); ++i) {
        len += 4;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (10000); i <= (99999); ++i) {
        len += 5;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (100000); i <= (999999); ++i) {
        len += 6;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (1000000); i <= (9999999); ++i) {
        len += 7;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (10000000); i <= (99999999); ++i) {
        len += 8;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    for (int i = (100000000); i <= (482720320); ++i) {
        len += 9;
        while (it < q && now + len >= AA[it].first) {
            check_sequence_position_invariant(AA[it].first, now, len);
            an[AA[it].second] = f(AA[it].first - now);
            it++;
        }
        now += len;
    }
    W(vector<int>(an, an + q));
    return 0;
}
```

This code includes the checker functions to validate the presence of potential performance bottlenecks based on the derived invariants, integrated at appropriate places in the execution flow.

