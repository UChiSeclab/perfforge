system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  float a, b, c, d;
  cin >> a >> b >> c >> d;
  double ps = a / b, pz = c / d, pw = 0;
  double nps = 1 - ps, npz = 1 - pz;
  for (int i = 0;; i++) {
    double k = pow(nps, i) * pow(npz, i) * ps;
    pw += k;
    if (k < 0.0000000000001) break;
  }
  printf("%.12f", pw);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000 1 1000


(G.2) Fast Input

1 2 10 11


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  float a, b, c, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> c >> d; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  double ps = a / b, pz = c / d, pw = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  double nps = 1 - ps, npz = 1 - pz; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0;; i++) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    double k = pow(nps, i) * pow(npz, i) * ps; /* line 9 slow_hit_count: 11509, fast_hit_count: 11 */
    pw += k; /* line 10 slow_hit_count: 11509, fast_hit_count: 11 */
    if (k < 0.0000000000001) break; /* line 11 slow_hit_count: 11509, fast_hit_count: 11 */
  } /* line 12 slow_hit_count: 11508, fast_hit_count: 10 */
  printf("%.12f", pw); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts for both the fast and slow inputs, we can observe the following:

1. **Lines that show significant hit count differences**: 
   - Line 9: `double k = pow(nps, i) * pow(npz, i) * ps;`
   - Line 10: `pw += k;`
   - Line 11: `if (k < 0.0000000000001) break;`
   - The loop starting at line 8 runs 11 times for the fast input and 11,509 times for the slow input.

2. **Primary bottleneck**: The loop continues until the calculated value of `k` becomes negligibly small (below the precision threshold of `0.0000000000001`). The core computation in the loop involves exponentiation using `pow(nps, i)` and `pow(npz, i)`, which seems to be the expensive operation especially when `i` becomes large. 

3. **Interaction with input parameters**:
   - The values `nps` and `npz` (complementary probabilities) are derived from the probabilities `ps` and `pz`. When `ps` and `pz` are both very small (or close to zero), `nps` and `npz` will be close to 1. This leads to the loop running for a large number of iterations as `pow(nps, i) * pow(npz, i) * ps` remains significant for more iterations.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants:

1. **Invariant related to probabilities**:
   - **Natural language description**: "If both players have very low probabilities of hitting the target on each shot (i.e., probabilities `ps` and `pz` are very small), the number of iterations in the loop can become very large, leading to significant slowdowns in the computation."
   - **Condition check suggestion**: Monitor if both `ps` and `pz` are exceedingly small, close to zero.

2. **Invariant related to loop iterations**:
   - **Natural language description**: "If the complementary probabilities (`nps` and `npz`) are very close to 1, the loop will execute many iterations, as the decreasing product remains above the precision threshold for a longer period."
   - **Condition check suggestion**: Check if both `nps` and `npz` exceed a threshold close to 1, indicating many iterations will likely occur.

3. **Invariant related to exponential decay**:
   - **Natural language description**: "When the rate of decrease in the loop's exponential function is very slow (due to small values of `ps` and `pz`), the computation cost increases significantly as the loop executes a large number of times before meeting the precision threshold."
   - **Condition check suggestion**: Assess if the decay rate `pow(nps, i) * pow(npz, i)` is slow, potentially predicting a high number of iterations.

These invariants help identify slowdowns by focusing on inputs that make the loop run many times due to minimal decrement in the exponential product, which is influenced by the probability values `ps` and `pz`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Here we will implement the runtime checks for the identified performance-characterizing invariants from Phase 2:

### Invariant 1: Low Probability Slowdown

```cpp
void check_low_probability_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to low probabilities triggered!" << endl;
        abort();
    }
}
```

### Invariant 2: High Complementary Probability Slowdown

```cpp
void check_complementary_probability_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to high complementary probabilities triggered!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code with the Original Program

Now, let's integrate these checks into the provided C++ program. The checks should be placed after reading the input and before the heavy computation loop to avoid unnecessary overhead inside the loop.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Functions to check the performance invariants
void check_low_probability_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to low probabilities triggered!" << endl;
        abort();
    }
}

void check_complementary_probability_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to high complementary probabilities triggered!" << endl;
        abort();
    }
}

int main() {
    float a, b, c, d;
    cin >> a >> b >> c >> d;
    
    double ps = a / b, pz = c / d, pw = 0;
    double nps = 1 - ps, npz = 1 - pz;
    
    // Performance invariant check 1:
    // Detect low shooting probabilities leading to slow computations
    check_low_probability_invariant(ps < 0.01 && pz < 0.01);
    
    // Performance invariant check 2:
    // Detect high complementary probabilities leading to many loop iterations
    check_complementary_probability_invariant(nps > 0.99 && npz > 0.99);

    for (int i = 0;; i++) {
        double k = pow(nps, i) * pow(npz, i) * ps;
        pw += k;
        if (k < 0.0000000000001) break;
    }
    printf("%.12f", pw);
}
```

### Explanation
1. **Invariant Checks**:
   - **Low Probability Invariant**: After calculating `ps` and `pz`, we check if both are below a threshold (e.g., `0.01`). This captures scenarios where both players have very low chances of hitting the target, leading to a slowdown.
   - **Complementary Probability Invariant**: We also check if `nps` and `npz` are very high (e.g., `> 0.99`), which means the loop will iterate many times due to slow decay of `k`.

2. **Placement**: These checks are placed after input reading and initial computation of the probabilities to ensure they do not add overhead to the loop itself.

By adding these checks, any input scenario that could potentially lead to a performance bottleneck is detected early, allowing us to handle or debug such cases efficiently.

