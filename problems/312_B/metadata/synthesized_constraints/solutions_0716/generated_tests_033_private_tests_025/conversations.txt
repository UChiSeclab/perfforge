system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
double a, b, c, d, p1, np1, p2, np2, ans;
double prob_n(int n) { return powl(np1, n - 1) * powl(np2, n - 1) * p1; }
int main() {
  cin >> a >> b >> c >> d;
  p1 = a / b;
  p2 = c / d;
  np1 = 1.0 - p1;
  np2 = 1.0 - p2;
  a = prob_n(1);
  b = prob_n(2);
  ans += a + b;
  int j = 3;
  while (abs(a - b) > 0.0000000000001) {
    a = prob_n(j);
    ans += a;
    j++;
    swap(a, b);
  }
  cout << fixed << setprecision(12) << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

34 985 5 958


(G.2) Fast Input

4 5 4 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
double a, b, c, d, p1, np1, p2, np2, ans; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
double prob_n(int n) { return powl(np1, n - 1) * powl(np2, n - 1) * p1; } /* line 4 slow_hit_count: 581, fast_hit_count: 12 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> c >> d; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  p1 = a / b; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  p2 = c / d; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  np1 = 1.0 - p1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  np2 = 1.0 - p2; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  a = prob_n(1); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  b = prob_n(2); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ans += a + b; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int j = 3; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  while (abs(a - b) > 0.0000000000001) { /* line 15 slow_hit_count: 580, fast_hit_count: 11 */
    a = prob_n(j); /* line 16 slow_hit_count: 579, fast_hit_count: 10 */
    ans += a; /* line 17 slow_hit_count: 579, fast_hit_count: 10 */
    j++; /* line 18 slow_hit_count: 579, fast_hit_count: 10 */
    swap(a, b); /* line 19 slow_hit_count: 579, fast_hit_count: 10 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(12) << ans; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of performance bottlenecks in the given C program, we'll proceed in two phases: identifying inefficient code segments and deriving performance-characterizing invariants.

### Phase 1: Identifying Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The function `prob_n(int n)` (line 4) shows a significant increase in hit count: 581 for the slow input versus 12 for the fast input.
   - The `while` loop (line 15) is executed 580 times for the slow input and only 11 times for the fast input.

2. **Pinpointing Problematic Lines:**
   - The `while` loop on line 15 iterates significantly more for the slow input. The loop's condition `abs(a - b) > 0.0000000000001` suggests that `a` and `b` converge very slowly for the slow input.
   - Inside the loop, the function `prob_n(j)` (line 16) is repeatedly called, suggesting the exponential calculation `powl(np1, n - 1) * powl(np2, n - 1) * p1` is expensive and contributes to the slowdown.

3. **Interaction with Data Structures:**
   - The loop's performance is primarily affected by the convergence of `a` and `b`, which depends heavily on the input probabilities `p1` and `p2`.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis above, the following performance-characterizing invariants describe conditions triggering the slowdown:

1. **Invariant on Probability Values:**
   - **Natural language description:** "If the probabilities `p1` and `p2` are both significantly less than 1, the convergence of the series in the loop may be slow, causing the execution to take a longer time."
   - **Explanation:** Small values of `p1` and `p2` will result in larger values of `np1` and `np2`, causing the exponential terms in the loop to decrease more slowly, prolonging convergence.

2. **Invariant on Loop Iteration:**
   - **Natural language description:** "If the loop runs for a large number of iterations due to slow convergence of `a` and `b`, the computation within the loop becomes expensive and may lead to performance degradation."
   - **Explanation:** The loop's condition relies on a very small threshold for convergence, making it sensitive to precision issues, especially when probabilities are small.

3. **Invariant on Recursive Calculation:**
   - **Natural language description:** "If the series represented by `prob_n` involves a large number of recursive terms, as indicated by a high number of iterations in the loop, performance may degrade due to repeated expensive calculations."
   - **Explanation:** The repeated calculation of `powl(np1, n - 1) * powl(np2, n - 1)` for each term `n` in the loop can be computationally intensive when the loop iterates many times.

These invariants help identify conditions under which the code may slow down, focusing on input patterns related to probability values and loop convergence behavior. These insights can aid in optimizing the code or designing test cases for performance evaluation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

For each of the previously derived performance-characterizing invariants, I will produce C++ code to check these conditions at runtime:

1. **Invariant on Probability Values:**
   - **Checker Code:**
     ```cpp
     void check_probability_invariant(double p1, double p2) {
         if (p1 < 0.1 && p2 < 0.1) {  // Example threshold for "significantly less than 1"
             cerr << "Warning: Performance bottleneck condition triggered - low probability values!" << endl;
             abort();
         }
     }
     ```

2. **Invariant on Loop Iteration:**
   - **Checker Code:**
     ```cpp
     void check_loop_invariant(int iteration_count) {
         if (iteration_count > 1000) {  // Example threshold for large number of iterations
             cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
             abort();
         }
     }
     ```

3. **Invariant on Recursive Calculation:**
   - **Checker Code:**
     ```cpp
     void check_recursive_calculation_invariant(int j) {
         if (j > 1000) {  // Example threshold for large number of recursive terms
             cerr << "Warning: Performance bottleneck condition triggered - excessive recursive terms!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, I will integrate these checker functions into the provided C++ program, placing them strategically to avoid adding significant overhead to the tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for probability values
void check_probability_invariant(double p1, double p2) {
    if (p1 < 0.1 && p2 < 0.1) {  // Example threshold for "significantly less than 1"
        cerr << "Warning: Performance bottleneck condition triggered - low probability values!" << endl;
        abort();
    }
}

// Checker for excessive loop iterations
void check_loop_invariant(int iteration_count) {
    if (iteration_count > 1000) {  // Example threshold for large number of iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}

// Checker for excessive recursive terms
void check_recursive_calculation_invariant(int j) {
    if (j > 1000) {  // Example threshold for large number of recursive terms
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive terms!" << endl;
        abort();
    }
}

double a, b, c, d, p1, np1, p2, np2, ans;
double prob_n(int n) { return powl(np1, n - 1) * powl(np2, n - 1) * p1; }

int main() {
    cin >> a >> b >> c >> d;
    p1 = a / b;
    p2 = c / d;

    // Check probabilities after calculation
    check_probability_invariant(p1, p2);

    np1 = 1.0 - p1;
    np2 = 1.0 - p2;
    
    a = prob_n(1);
    b = prob_n(2);
    ans += a + b;
    
    int j = 3;
    int iteration_count = 0;
    
    while (abs(a - b) > 0.0000000000001) {
        // Check loop iteration count
        check_loop_invariant(++iteration_count);
        // Check recursive calculation
        check_recursive_calculation_invariant(j);

        a = prob_n(j);
        ans += a;
        j++;
        swap(a, b);
    }
    
    cout << fixed << setprecision(12) << ans;
    return 0;
}
```

### Comments on Code Integration:

- The probability check (`check_probability_invariant`) is done once after computing the probabilities `p1` and `p2`.
- The loop iteration check (`check_loop_invariant`) and recursive calculation check (`check_recursive_calculation_invariant`) are inside the loop to capture the performance bottleneck conditions accurately.
- The chosen thresholds (`< 0.1` for probabilities and `> 1000` for iterations) are illustrative and can be adjusted based on further analysis or empirical data.

