system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long double e = 1, a, b, c, d, p, s;
  cin >> a >> b >> c >> d;
  s = (1 - a / b) * (1 - c / d);
  p = s;
  while (e > 0.000000000001) {
    long double h = p;
    p = p * s + s;
    e = p - h;
  }
  cout << (p + 1) * (a / b) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000 1 1000


(G.2) Fast Input

1 2 0 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long double e = 1, a, b, c, d, p, s; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> c >> d; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  s = (1 - a / b) * (1 - c / d); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  p = s; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (e > 0.000000000001) { /* line 8 slow_hit_count: 13809, fast_hit_count: 40 */
    long double h = p; /* line 9 slow_hit_count: 13808, fast_hit_count: 39 */
    p = p * s + s; /* line 10 slow_hit_count: 13808, fast_hit_count: 39 */
    e = p - h; /* line 11 slow_hit_count: 13808, fast_hit_count: 39 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cout << (p + 1) * (a / b) << endl; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and identify performance-characterizing invariants, we first need to understand how the code functions and why certain inputs lead to slow performance.

**Phase 1: Identify expensive or inefficient code segments**

1. **Compare line-level hit counts between fast and slow runs:**
   - The while loop (line 8) is executed significantly more times for the slow input (13,809 hits) compared to the fast input (40 hits). The loop contains lines 9, 10, and 11, which are also executed 13,808 times for the slow input, indicating a major performance bottleneck.

2. **Pinpoint lines or functions that get significantly more hits under the slow input:**
   - The main culprit is the while loop starting at line 8, as its condition depends on the variable `e`, which represents the difference between successive values of `p` computed in lines 10 and 11.

3. **Infer how these lines interact with data structures, loops, recursion, etc.:**
   - The line `s = (1 - a / b) * (1 - c / d);` (line 6) computes a product that influences the loop's exit condition. If `s` is close to 1, the convergence towards making `e` small (less than the threshold of `0.000000000001`) becomes slow, as `p` changes very slightly in each iteration.

**Phase 2: Derive performance-characterizing invariants (natural language)**

1. **Generate natural language statements:**

   - **Invariant 1:** "If the probabilities (a/b and c/d) for both players are such that the product (1 - a/b) * (1 - c/d) approaches 1, the while loop will require significantly more iterations to converge, thereby slowing down the program."

2. **Avoid using specific numeric values from the slow input:**
   - The statement abstracts the condition without directly referencing the specific values from the slow input like `1/1000`.

3. **Correlate these conditions strongly to input patterns:**
   - The slowdown occurs when the product `(1 - a/b) * (1 - c/d)` is close to 1, indicating that both players have low probabilities of hitting the target on each attempt, resulting in a long sequence of misses.

4. **Ensure the statements are broad but reflect realistic triggers:**
   - The invariant is framed to catch scenarios where both probabilities are so low that convergence becomes slow, respecting the constraint of `n <= 100` as the problem deals with probabilities represented by ratios.

**Performance-Characterizing Invariants:**

1. **Invariant 1:**
   - "The performance of the program degrades significantly when the shooting probabilities for both SmallR and Zanoes are such that the expression `(1 - a/b) * (1 - c/d)` is close to 1. This results in a prolonged while loop execution as the difference `e` converges slowly to the threshold."

By incorporating this invariant into the code or using it to guide test generation, one can effectively predict and detect conditions leading to slow performance, thus enabling optimizations or alternate strategies for faster convergence.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.

Output the probability that SmallR will win the match.

Input

A single line contains four integers <image>.

Output

Print a single real number, the probability that SmallR will win the match.

The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.

Examples

Input

1 2 1 2


Output

0.666666666667

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariant we derived in Phase 2 as a runtime checker in C++. We'll then integrate this checker into the original program.

**Phase 3: Implementing the Invariant as C++ Checker Code**

Natural language invariant: "If the probabilities (a/b and c/d) for both players are such that the product (1 - a/b) * (1 - c/d) approaches 1, the while loop will require significantly more iterations to converge, thereby slowing down the program."

Here is the C++ code to implement this invariant check:

```cpp
void check_probability_invariant(long double s) {
    if (s > 0.999) {  // Check if the product is close to 1
        cerr << "Warning: Performance bottleneck condition triggered! Probability product is too close to 1." << endl;
        abort();
    }
}
```

**Phase 4: Integrating the Checker into the Original C++ Program**

Now, we'll integrate the above checker into the original program, placing it right after the computation of `s` and before the while loop, so it doesn't add unnecessary overhead within the loop.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check the performance bottleneck condition based on probabilities
void check_probability_invariant(long double s) {
    if (s > 0.999) {  // Check if the product is close to 1
        cerr << "Warning: Performance bottleneck condition triggered! Probability product is too close to 1." << endl;
        abort();
    }
}

int main() {
    long double e = 1, a, b, c, d, p, s;
    cin >> a >> b >> c >> d;
    s = (1 - a / b) * (1 - c / d);
    
    // Check for the probability product invariant
    check_probability_invariant(s);
    
    p = s;
    while (e > 0.000000000001) {
        long double h = p;
        p = p * s + s;
        e = p - h;
    }
    cout << (p + 1) * (a / b) << endl;
    return 0;
}
```

**Explanation:**
- The `check_probability_invariant` function checks if the product `(1 - a/b) * (1 - c/d)` is too close to 1, which triggers a potential performance bottleneck.
- The check is placed immediately after computing `s` and before entering the while loop, ensuring it doesn't introduce overhead within the loop.
- If the condition is met, a warning is printed to `cerr` and the program aborts, signaling that the input is likely to cause a performance issue.

This integration ensures that the program can detect and handle inputs that might lead to slow execution due to the identified bottleneck condition.

