system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int maxn = 1e5 + 10;
using namespace std;
int n, m;
struct node {
  int x, num;
} ne, pos;
int bfs() {
  queue<node> q;
  map<int, int> mp;
  mp[n] = 1;
  ne.x = n;
  ne.num = 0;
  q.push(ne);
  while (!q.empty()) {
    pos = q.front();
    q.pop();
    if (pos.x == m) return pos.num;
    ne.num = pos.num + 1;
    ne.x = pos.x * 2;
    if (ne.x <= maxn && mp[ne.x] == 0) {
      mp[ne.x] = 1;
      q.push(ne);
    }
    ne.x = pos.x - 1;
    if (ne.x >= 0 && mp[ne.x] == 0) {
      mp[ne.x] = 1;
      q.push(ne);
    }
  }
  return 0;
}
int main() {
  int ans;
  while (~scanf("%d%d", &n, &m)) {
    ans = bfs();
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9999 10000


(G.2) Fast Input

10000 9999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e5 + 10; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int x, num; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} ne, pos; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int bfs() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  queue<node> q; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  map<int, int> mp; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  mp[n] = 1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  ne.x = n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ne.num = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  q.push(ne); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 15 slow_hit_count: 94909, fast_hit_count: 3 */
    pos = q.front(); /* line 16 slow_hit_count: 94909, fast_hit_count: 3 */
    q.pop(); /* line 17 slow_hit_count: 94909, fast_hit_count: 3 */
    if (pos.x == m) return pos.num; /* line 18 slow_hit_count: 94909, fast_hit_count: 3 */
    ne.num = pos.num + 1; /* line 19 slow_hit_count: 94908, fast_hit_count: 2 */
    ne.x = pos.x * 2; /* line 20 slow_hit_count: 94908, fast_hit_count: 2 */
    if (ne.x <= maxn && mp[ne.x] == 0) { /* line 21 slow_hit_count: 94908, fast_hit_count: 2 */
      mp[ne.x] = 1; /* line 22 slow_hit_count: 44975, fast_hit_count: 2 */
      q.push(ne); /* line 23 slow_hit_count: 44975, fast_hit_count: 2 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    ne.x = pos.x - 1; /* line 25 slow_hit_count: 94908, fast_hit_count: 2 */
    if (ne.x >= 0 && mp[ne.x] == 0) { /* line 26 slow_hit_count: 94908, fast_hit_count: 2 */
      mp[ne.x] = 1; /* line 27 slow_hit_count: 49961, fast_hit_count: 2 */
      q.push(ne); /* line 28 slow_hit_count: 49961, fast_hit_count: 2 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
  int ans; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  while (~scanf("%d%d", &n, &m)) { /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
    ans = bfs(); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit count data, the following lines experience significantly higher hit counts in the slow input compared to the fast input:

- **Lines 15 to 18:** The loop and condition checks are executed many more times in the slow input.
- **Lines 19 to 23:** The operations related to doubling the number (`ne.x = pos.x * 2`) and queuing it are hit frequently.
- **Lines 25 to 28:** Similar frequent hits occur for the decrement operation (`ne.x = pos.x - 1`) and its subsequent queuing.

The above lines suggest that the breadth-first search (BFS) loop runs many iterations for the slow input, processing numerous nodes before reaching the target number `m`. The problem arises because the BFS explores multiple paths, especially when starting with a large number and needing only a slight increase, such as converting 9999 to 10000.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Near-Target Starting Values:**
   - **Natural Language Description:** "If the starting number `n` is close to the target number `m` but less than `m`, the BFS may explore many paths when `n` is large, leading to a high number of operations."
   - **Explanation:** When `n` is very close to `m` but still smaller, the BFS starts by exploring a vast search space due to the doubling operation, since multiple paths can lead to overshooting the target before correction with subtraction.

2. **Invariant on Exploratory Operations:**
   - **Natural Language Description:** "When a large starting number `n` is very close to the target `m`, the BFS tends to make excessive exploratory operations due to the doubling operation, which overshoots the target."
   - **Explanation:** The doubling operation frequently exceeds `m`, and subsequent corrections via subtraction are necessary, causing a high number of redundant operations.

3. **Invariant on High Initial Numbers:**
   - **Natural Language Description:** "If the initial number `n` is significantly larger than half the maximum number (`maxn`), doubling and decrementing operations may lead to a large search space within the BFS, especially if `n` is near `m`."
   - **Explanation:** When `n` is large and close to `m`, the BFS initially performs many redundant operations due to its strategy of doubling first and then correcting, which is inefficient if `m` is only slightly larger than `n`.

### Conclusion

The slow execution occurs primarily because the BFS explores a large number of potential states when the starting number `n` is close to the target `m` but still less than `m`. This results in many redundant operations due to the doubling and decrementing strategy, particularly when `n` is large. The outlined invariants capture these conditions and can help in diagnosing similar slow scenarios in the future.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Invariants as Runtime Checks

Here are the C++ code snippets that correspond to the natural language invariants described earlier:

1. **Invariant on Near-Target Starting Values:**
   ```cpp
   void check_near_target_starting_values(int n, int m) {
       if (n < m && abs(n - m) <= 10) { // Assuming "close" is within a small range like 10
           cerr << "Warning: Near-target starting value might cause excessive operations!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Exploratory Operations:**
   ```cpp
   void check_exploratory_operations(int n, int m) {
       if (n < m && n > m / 2) {  // Large n, but less than m
           cerr << "Warning: Exploratory operations due to large starting number!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on High Initial Numbers:**
   ```cpp
   void check_high_initial_numbers(int n, int m) {
       if (n > 5000 && n < m && abs(n - m) < 100) { // Large n with a small difference
           cerr << "Warning: High initial number causing large search space!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Below is the instrumented C++ code with the checks integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
const int maxn = 1e5 + 10;
using namespace std;

// Checker function to detect near-target starting values
void check_near_target_starting_values(int n, int m) {
    if (n < m && abs(n - m) <= 10) { // Assuming "close" is within a small range like 10
        cerr << "Warning: Near-target starting value might cause excessive operations!" << endl;
        abort();
    }
}

// Checker function for exploratory operations
void check_exploratory_operations(int n, int m) {
    if (n < m && n > m / 2) {  // Large n, but less than m
        cerr << "Warning: Exploratory operations due to large starting number!" << endl;
        abort();
    }
}

// Checker function for high initial numbers
void check_high_initial_numbers(int n, int m) {
    if (n > 5000 && n < m && abs(n - m) < 100) { // Large n with a small difference
        cerr << "Warning: High initial number causing large search space!" << endl;
        abort();
    }
}

struct node {
  int x, num;
} ne, pos;

int bfs() {
  queue<node> q;
  map<int, int> mp;
  mp[n] = 1;
  ne.x = n;
  ne.num = 0;
  q.push(ne);
  while (!q.empty()) {
    pos = q.front();
    q.pop();
    if (pos.x == m) return pos.num;
    ne.num = pos.num + 1;
    ne.x = pos.x * 2;
    if (ne.x <= maxn && mp[ne.x] == 0) {
      mp[ne.x] = 1;
      q.push(ne);
    }
    ne.x = pos.x - 1;
    if (ne.x >= 0 && mp[ne.x] == 0) {
      mp[ne.x] = 1;
      q.push(ne);
    }
  }
  return 0;
}

int main() {
  int ans;
  while (~scanf("%d%d", &n, &m)) {

    // Insert checks before performing the BFS
    check_near_target_starting_values(n, m);
    check_exploratory_operations(n, m);
    check_high_initial_numbers(n, m);

    ans = bfs();
    cout << ans << endl;
  }
  return 0;
}
```

### Explanation
- **Check Placement:** The checks are placed right after reading inputs `n` and `m`, before the BFS function is called. This ensures we do not add unnecessary overhead within the BFS loop itself.
- **Thresholds:** The thresholds for what constitutes a "near-target" or "large initial number" are set based on logical assumptions about what could lead to inefficiencies, rather than specific values from the input data.
- **Warnings and Abort:** Each check outputs a warning message and aborts execution if the condition is met, allowing for quick identification of performance bottlenecks during testing or fuzzing.

