system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool vis[2][10000 + 10];
int main(void) {
  int n, m;
  cin >> n >> m;
  vis[0][n] = true;
  for (int ans = 0;; ans++) {
    int nop = ans % 2;
    int nxp = nop ^ 1;
    if (vis[nop][m]) {
      cout << ans;
      return 0;
    }
    for (int i = 1; i <= 10000; i++) {
      if (vis[nop][i]) {
        vis[nxp][i] = true;
        if (i > 1) vis[nxp][i - 1] = true;
        if (i * 2 <= 10000) vis[nxp][i * 2] = true;
      }
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8192 2


(G.2) Fast Input

2 8192


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[2][10000 + 10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vis[0][n] = true; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int ans = 0;; ans++) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    int nop = ans % 2; /* line 9 slow_hit_count: 8191, fast_hit_count: 13 */
    int nxp = nop ^ 1; /* line 10 slow_hit_count: 8191, fast_hit_count: 13 */
    if (vis[nop][m]) { /* line 11 slow_hit_count: 8191, fast_hit_count: 13 */
      cout << ans; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= 10000; i++) { /* line 15 slow_hit_count: 81908190, fast_hit_count: 120012 */
      if (vis[nop][i]) { /* line 16 slow_hit_count: 81900000, fast_hit_count: 120000 */
        vis[nxp][i] = true; /* line 17 slow_hit_count: 41759505, fast_hit_count: 983 */
        if (i > 1) vis[nxp][i - 1] = true; /* line 18 slow_hit_count: 41759505, fast_hit_count: 983 */
        if (i * 2 <= 10000) vis[nxp][i * 2] = true; /* line 19 slow_hit_count: 41759505, fast_hit_count: 983 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 8190, fast_hit_count: 12 */
  return 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, we will follow the given phases to identify the cause of the slowdown and derive performance-characterizing invariants. Let's begin by analyzing the code and hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

- The `for` loop on line 15 shows a significant difference in hit counts between the slow and fast inputs. For the slow input, the loop executes 8,190,819 times, whereas for the fast input, it only executes 120,012 times.
- Within this loop, the conditional check on line 16, and the operations on lines 17, 18, and 19, all show high hit counts for the slow input (around 41,759,505 times each), indicating that these operations are executed frequently during the slow input run.
- Lines 9 to 11 are executed 8,191 times for the slow input but only 13 times for the fast input, suggesting that the outer loop (line 8) iterates significantly more for the slow input.

**Root Cause of Inefficiency:**

- The program essentially uses a breadth-first search (BFS) approach to find the minimum number of button presses required to transform `n` into `m`. This involves exploring many possible states and transitions between numbers.
- When `n` is much larger than `m`, as in the slow input (8192 to 2), the exploration involves many decrement operations, leading to numerous state transitions and checks.
- Conversely, when `n` is much smaller than `m`, the doubling operation reduces the number of necessary transitions quickly, as seen in the fast input (2 to 8192).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the performance-characterizing invariants:

1. **Inefficient State Exploration:**
   - **Natural Language Description:** "When `n` is significantly larger than `m`, the program may experience a slowdown due to extensive state exploration caused by repeated decrement operations. This results in a large number of iterations over possible states."
   - **Threshold Suggestion:** This slowdown is notable when `n` is much larger than `m`, especially when the difference between `n` and `m` approaches the upper constraint of 10,000.

2. **Excessive Loop Iterations:**
   - **Natural Language Description:** "If the difference `n - m` is large, particularly when `n` is close to the upper limit allowed by the constraints, the program may enter a slow path due to excessive iterations in the state exploration loop."
   - **Threshold Suggestion:** A significant inefficiency can occur when `n` is close to 10,000 and `m` is much smaller, leading to extensive loop operations.

3. **State Transition Overhead:**
   - **Natural Language Description:** "The overhead from managing state transitions (marking visited states and checking conditions) becomes substantial when the number of possible transitions per state is high, such as when `n` greatly exceeds `m`."
   - **Threshold Suggestion:** This overhead is more pronounced when exploring all decrement paths due to `n` being significantly larger than `m`.

These invariants focus on the input patterns and program behavior contributing to the slowdown, rather than specific numerical values from the slow input, aligning with the requirements and constraints of the problem statement.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as described.

### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived invariants, we will create C++ code snippets that check these conditions at runtime.

**Invariant 1: Inefficient State Exploration**

```cpp
void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient state exploration!" << endl;
        abort();
    }
}
```

**Invariant 2: Excessive Loop Iterations**

```cpp
void check_excessive_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive loop iterations!" << endl;
        abort();
    }
}
```

**Invariant 3: State Transition Overhead**

```cpp
void check_state_transition_overhead(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to state transition overhead!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Program

Now, let's incorporate these checkers into the original program at effective points. We will place our checks after reading inputs.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance invariants
void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient state exploration!" << endl;
        abort();
    }
}

void check_excessive_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive loop iterations!" << endl;
        abort();
    }
}

void check_state_transition_overhead(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to state transition overhead!" << endl;
        abort();
    }
}

bool vis[2][10000 + 10];

int main(void) {
    int n, m;
    cin >> n >> m;

    // Invariant check: Inefficient State Exploration
    check_inefficient_exploration(n > m * 2);

    // Invariant check: Excessive Iterations
    check_excessive_iterations(n > 9000 && m < 100);

    // Invariant check: State Transition Overhead
    check_state_transition_overhead(n > 8000 && (n - m) > 5000);

    vis[0][n] = true;
    for (int ans = 0;; ans++) {
        int nop = ans % 2;
        int nxp = nop ^ 1;
        if (vis[nop][m]) {
            cout << ans;
            return 0;
        }
        for (int i = 1; i <= 10000; i++) {
            if (vis[nop][i]) {
                vis[nxp][i] = true;
                if (i > 1) vis[nxp][i - 1] = true;
                if (i * 2 <= 10000) vis[nxp][i * 2] = true;
            }
        }
    }
    return 0;
}
```

**Explanation:**

- **Inefficient State Exploration Check:** After reading `n` and `m`, we check if `n` is significantly larger than twice `m`. This is a threshold that helps identify when `n` is much larger than `m`, leading to inefficient exploration.
  
- **Excessive Iterations Check:** We check if `n` is greater than 9000 and `m` is less than 100. This condition captures scenarios where the loop might iterate excessively due to a large difference in `n` and a much smaller `m`.

- **State Transition Overhead Check:** This check assumes a large overhead when `n` is greater than 8000 and the difference `n - m` is greater than 5000, indicating significant state transitions.

These checks are placed after the input is read and before the computation begins to avoid adding overhead in tight loops. They aim to catch potential performance pitfalls early in execution. This ensures that the program remains efficient while providing insights into performance issues.

