system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  list<int> a[10001];
  int n, m, val, maxi, visited[10001], dist[10001];
  list<int>::iterator it;
  cin >> n >> m;
  if (n == m)
    cout << "0";
  else {
    for (int i = 1; i <= 10000; ++i) {
      if (i - 1 <= 10000) a[i].push_back(i - 1);
      if (i * 2 <= 10000) a[i].push_back(i * 2);
    }
    memset(visited, 0, sizeof(visited));
    for (int i = 0; i <= 10000; ++i) dist[i] = INT_MAX;
    dist[n] = 0;
    for (int i = 0; i < 10000; ++i) {
      maxi = INT_MAX;
      for (int j = 0; j <= 10000; ++j) {
        if (!visited[j] && dist[j] < maxi) {
          val = j;
          maxi = dist[j];
        }
      }
      visited[val] = 1;
      if (val == m) break;
      for (it = a[val].begin(); it != a[val].end(); ++it) {
        if (!visited[*it] && dist[*it] > dist[val] + 1)
          dist[*it] = dist[val] + 1;
      }
    }
    cout << dist[m];
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 100


(G.2) Fast Input

100 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  list<int> a[10001]; /* line 4 slow_hit_count: 20004, fast_hit_count: 20004 */
  int n, m, val, maxi, visited[10001], dist[10001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  list<int>::iterator it; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == m) /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "0"; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= 10000; ++i) { /* line 11 slow_hit_count: 10001, fast_hit_count: 10001 */
      if (i - 1 <= 10000) a[i].push_back(i - 1); /* line 12 slow_hit_count: 10000, fast_hit_count: 10000 */
      if (i * 2 <= 10000) a[i].push_back(i * 2); /* line 13 slow_hit_count: 10000, fast_hit_count: 10000 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    memset(visited, 0, sizeof(visited)); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i <= 10000; ++i) dist[i] = INT_MAX; /* line 16 slow_hit_count: 10002, fast_hit_count: 10002 */
    dist[n] = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < 10000; ++i) { /* line 18 slow_hit_count: 7773, fast_hit_count: 2 */
      maxi = INT_MAX; /* line 19 slow_hit_count: 7773, fast_hit_count: 2 */
      for (int j = 0; j <= 10000; ++j) { /* line 20 slow_hit_count: 77745546, fast_hit_count: 20004 */
        if (!visited[j] && dist[j] < maxi) { /* line 21 slow_hit_count: 77737773, fast_hit_count: 20002 */
          val = j; /* line 22 slow_hit_count: 15495, fast_hit_count: 2 */
          maxi = dist[j]; /* line 23 slow_hit_count: 15495, fast_hit_count: 2 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      visited[val] = 1; /* line 26 slow_hit_count: 7773, fast_hit_count: 2 */
      if (val == m) break; /* line 27 slow_hit_count: 7773, fast_hit_count: 2 */
      for (it = a[val].begin(); it != a[val].end(); ++it) { /* line 28 slow_hit_count: 19596, fast_hit_count: 3 */
        if (!visited[*it] && dist[*it] > dist[val] + 1) /* line 29 slow_hit_count: 11824, fast_hit_count: 2 */
          dist[*it] = dist[val] + 1; /* line 30 slow_hit_count: 8026, fast_hit_count: 2 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    cout << dist[m]; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To effectively diagnose the performance bottlenecks in the provided C program, we should carefully analyze the slow and fast runs in terms of hit counts and algorithmic behavior. Let's go through the process of identifying costly operations and deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - **Loop from line 18:** The outer loop, which should ideally iterate until `m` is found, runs 7773 times in the slow input but only 2 times in the fast input.
   - **Nested Loop from line 20:** This inner loop examining nodes runs an astronomical 77,745,546 times during the slow run, compared to just 20,004 in the fast scenario.
   - **If condition within the nested loop (line 21):** This line is hit 77,737,773 times for the slow input, suggesting intensive searching or updating of distances.

2. **Line-by-Line Analysis:**
   - The nested loop and its associated conditional checks are central to the performance discrepancy. The algorithm likely performs a form of breadth-first search (BFS) or Dijkstra's algorithm, but the high hit count suggests inefficient exploration of states, especially in the slow input scenario.

3. **Data Structure and Algorithm Interaction:**
   - The inefficient exploration is due to the list-based approach to adjacency, which leads to many redundant checks on visited nodes and minimum distance updates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language invariants characterizing the potential performance issues:

1. **Invariant 1: Large Search Space Exploration**
   - **Description:** "When the number of states (or values of `m` to reach from `n`) is large and the algorithm explores a broad search space, it results in numerous redundant checks and updates, significantly slowing down execution. This is particularly evident when transformations like doubling and subtraction do not converge quickly to `m` from `n`."
   - **Condition:** The issue arises when the path from `n` to `m` involves many intermediary states due to the fact that the algorithm checks many possible combinations without early pruning.

2. **Invariant 2: Repeated Distance Updates**
   - **Description:** "If a large portion of the execution time is spent iterating over a wide range of possible values to find the smallest distance repeatedly, the performance may degrade. The program's efficiency decreases when it revisits nodes multiple times before convergence."
   - **Condition:** This happens when `m` is very close to `n` or involves many intermediary states that are not directly connected by optimal operations.

3. **Invariant 3: Inefficient Node Processing**
   - **Description:** "The program may slow down significantly if it processes nodes exhaustively without efficient pruning or bounding, especially when `n` and `m` have values that induce numerous intermediary states."
   - **Condition:** This is particularly evident in scenarios where there is a high number of intermediary nodes because the algorithm does not effectively prune unvisited nodes or prioritize promising branches.

### Conclusion

By understanding these invariants, optimizations can be directed toward reducing redundant state exploration and improving the prioritization of node visits. More efficient data structures (e.g., priority queues for BFS/DFS-like traversal) and early termination conditions might dramatically improve performance for the slow input cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

Solution (C++ code):
{solution}


assistant: Sure, let's proceed with Phase 3 first, where we translate the natural language invariants into C++ runtime checks.

### Phase 3: Implementing Invariants as C++ Checks

Here are the C++ runtime checks based on the previously derived natural language invariants:

1. **Invariant 1: Large Search Space Exploration**
    ```cpp
    void check_large_search_space(bool condition) {
        if (condition) {
            cerr << "Warning: Performance bottleneck condition triggered - large search space exploration!" << endl;
            abort();
        }
    }
    ```

2. **Invariant 2: Repeated Distance Updates**
    ```cpp
    void check_repeated_distance_updates(bool condition) {
        if (condition) {
            cerr << "Warning: Performance bottleneck condition triggered - repeated distance updates!" << endl;
            abort();
        }
    }
    ```

3. **Invariant 3: Inefficient Node Processing**
    ```cpp
    void check_inefficient_node_processing(bool condition) {
        if (condition) {
            cerr << "Warning: Performance bottleneck condition triggered - inefficient node processing!" << endl;
            abort();
        }
    }
    ```

Now let's move to Phase 4, where we integrate these checks into the original C++ program.

### Phase 4: Integrating Checks into the Original C++ Program

Below is the instrumented C++ code with the performance-checking functions integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Invariant checkers
void check_large_search_space(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large search space exploration!" << endl;
        abort();
    }
}

void check_repeated_distance_updates(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated distance updates!" << endl;
        abort();
    }
}

void check_inefficient_node_processing(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient node processing!" << endl;
        abort();
    }
}

int main() {
    list<int> a[10001];
    int n, m, val, maxi, visited[10001], dist[10001];
    list<int>::iterator it;
    cin >> n >> m;

    if (n == m) {
        cout << "0";
    } else {
        for (int i = 1; i <= 10000; ++i) {
            if (i - 1 <= 10000) a[i].push_back(i - 1);
            if (i * 2 <= 10000) a[i].push_back(i * 2);
        }

        memset(visited, 0, sizeof(visited));
        for (int i = 0; i <= 10000; ++i) dist[i] = INT_MAX;
        dist[n] = 0;

        // Check for large search space before entering the main loop
        check_large_search_space(n <= m && m > n * 2);

        for (int i = 0; i < 10000; ++i) {
            maxi = INT_MAX;

            // Check for repeated distance updates
            check_repeated_distance_updates(dist[m] != INT_MAX && dist[m] <= i + 1);

            for (int j = 0; j <= 10000; ++j) {
                if (!visited[j] && dist[j] < maxi) {
                    val = j;
                    maxi = dist[j];
                }
            }

            visited[val] = 1;
            if (val == m) break;

            // Check for inefficient node processing
            check_inefficient_node_processing(visited[m] != 1 && i > m / 2);

            for (it = a[val].begin(); it != a[val].end(); ++it) {
                if (!visited[*it] && dist[*it] > dist[val] + 1)
                    dist[*it] = dist[val] + 1;
            }
        }
        cout << dist[m];
    }
}
```

### Explanation of Placement

- **Large Search Space Exploration:** This is checked before the main loop to catch configurations where the direct path is likely to involve too many intermediary states due to inefficient state exploration.
  
- **Repeated Distance Updates:** Placed right before iterating over the node distances, this check ensures that if `m` has been reached or nearly reached, the loop should have already exited.

- **Inefficient Node Processing:** Placed inside the main loop, this checks if the target `m` should have been reached based on the number of iterations and bounds the search to prevent excessive and wasteful processing.

These checks aim to detect when the algorithm might take an inefficient path due to the nature of `n` and `m`.

