system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, b;
map<int, bool> vis;
int bfs() {
  queue<pair<int, int> > q;
  q.push(make_pair(a, 0));
  while (!q.empty()) {
    pair<int, int> cur = q.front();
    q.pop();
    vis[cur.first] = 1;
    if (cur.first == b) {
      return cur.second;
    }
    if (!vis[cur.first * 2] && cur.first <= b)
      q.push(make_pair(cur.first * 2, cur.second + 1));
    if (!vis[cur.first - 1]) q.push(make_pair(cur.first - 1, cur.second + 1));
  }
}
int main() {
  cin >> a >> b;
  cout << bfs() << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9999 10000


(G.2) Fast Input

10000 9999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, bool> vis; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int bfs() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  queue<pair<int, int> > q; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  q.push(make_pair(a, 0)); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 8 slow_hit_count: 24994, fast_hit_count: 2 */
    pair<int, int> cur = q.front(); /* line 9 slow_hit_count: 24994, fast_hit_count: 2 */
    q.pop(); /* line 10 slow_hit_count: 24994, fast_hit_count: 2 */
    vis[cur.first] = 1; /* line 11 slow_hit_count: 24994, fast_hit_count: 2 */
    if (cur.first == b) { /* line 12 slow_hit_count: 24994, fast_hit_count: 2 */
      return cur.second; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    if (!vis[cur.first * 2] && cur.first <= b) /* line 15 slow_hit_count: 24993, fast_hit_count: 1 */
      q.push(make_pair(cur.first * 2, cur.second + 1)); /* line 16 slow_hit_count: 5000, fast_hit_count: 0 */
    if (!vis[cur.first - 1]) q.push(make_pair(cur.first - 1, cur.second + 1)); /* line 17 slow_hit_count: 24993, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cout << bfs() << endl; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the given C program, we will follow a structured approach as outlined in the tasks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The slow input (`9999 10000`) results in significantly higher hit counts for the lines associated with the `while (!q.empty())` loop and the following operations compared to the fast input (`10000 9999`).

2. **Pinpoint Lines with More Hits in Slow Input:**
   - **Line 8 to 17:** These lines, which form the core of the BFS loop, are hit significantly more times for the slow input than for the fast input. Particularly, lines 8, 9, 10, 11, 12, 15, and 17 are repeatedly executed, indicating a large number of iterations through the loop.

3. **Infer Interaction with Data Structures:**
   - The BFS queue (`q`) is utilized to handle states as pairs of integers representing the current number on the display and the number of button presses. The heavy usage of the queue (as seen from the hit counts) suggests that the program is exploring many states, leading to inefficient processing for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's derive natural language statements that explain under what conditions the program slows down:

1. **Invariant #1: High Queue Utilization**
   - "When the initial number `n` is just below the target number `m`, the breadth-first search explores many unnecessary states by decreasing the number excessively before finding the shortest path to `m`. This leads to an excessive number of operations and queue states."

2. **Invariant #2: Redundant State Exploration**
   - "If the number on the display is very close to the target but requires a sequence of decrement operations to match the target, the program may enter a slow path due to exploring redundant paths that involve decrementing and then potentially unnecessary re-incrementing."

3. **Invariant #3: Inefficient Path Search**
   - "If `n` is slightly less than `m`, the BFS approach can lead to a situation where many decrement operations are queued before finding the optimal sequence of operations. This results in a high number of iterations as each potential state transition is explored."

### Summary

The slow performance in the given program is primarily due to unnecessary exploration of states in the BFS queue, particularly when `n` is close to but less than `m`. This results in excessive iterations and processing, leading to the observed slowdowns. By focusing on these invariants, we can better understand the triggers of slow performance and potentially guide optimizations or redesigns to address these inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants in C++

For each invariant derived in Phase 2, we will write C++ code that checks the condition at runtime.

### Invariant #1: High Queue Utilization
This invariant checks when the initial number `n` is just below the target number `m`, which may lead to excessive state exploration.

```cpp
void check_queue_utilization_invariant(int n, int m, int queueSize) {
    if (n < m && queueSize > 1000) { // Arbitrary threshold for excessive queue size
        cerr << "Warning: Performance bottleneck condition triggered - High Queue Utilization!" << endl;
        abort();
    }
}
```

### Invariant #2: Redundant State Exploration
This invariant checks when decrement operations dominate, leading to redundant paths.

```cpp
void check_redundant_state_invariant(int n, int m, int decrementCount) {
    if (n < m && decrementCount > 5000) { // Arbitrary threshold for excessive decrements
        cerr << "Warning: Performance bottleneck condition triggered - Redundant State Exploration!" << endl;
        abort();
    }
}
```

### Invariant #3: Inefficient Path Search
This invariant checks when the BFS is iterating excessively due to close values of `n` and `m`.

```cpp
void check_inefficient_path_search_invariant(int n, int m, int iterationCount) {
    if (n < m && iterationCount > 10000) { // Arbitrary threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - Inefficient Path Search!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Original Program

The next step is to integrate the above checker functions into the C++ program. We will insert these checks strategically to minimize overhead and ensure they are effective.

Here is the instrumented C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a, b;
map<int, bool> vis;

// Checker functions
void check_queue_utilization_invariant(int n, int m, int queueSize) {
    if (n < m && queueSize > 1000) { // Arbitrary threshold for excessive queue size
        cerr << "Warning: Performance bottleneck condition triggered - High Queue Utilization!" << endl;
        abort();
    }
}

void check_redundant_state_invariant(int n, int m, int decrementCount) {
    if (n < m && decrementCount > 5000) { // Arbitrary threshold for excessive decrements
        cerr << "Warning: Performance bottleneck condition triggered - Redundant State Exploration!" << endl;
        abort();
    }
}

void check_inefficient_path_search_invariant(int n, int m, int iterationCount) {
    if (n < m && iterationCount > 10000) { // Arbitrary threshold for excessive iterations
        cerr << "Warning: Performance bottleneck condition triggered - Inefficient Path Search!" << endl;
        abort();
    }
}

int bfs() {
    queue<pair<int, int>> q;
    q.push(make_pair(a, 0));
    int decrementCount = 0; // Track number of decrements
    int iterationCount = 0; // Track number of BFS iterations

    while (!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        vis[cur.first] = 1;

        iterationCount++;
        check_inefficient_path_search_invariant(a, b, iterationCount);

        if (cur.first == b) {
            return cur.second;
        }

        if (!vis[cur.first * 2] && cur.first <= b) {
            q.push(make_pair(cur.first * 2, cur.second + 1));
        }

        if (!vis[cur.first - 1]) {
            q.push(make_pair(cur.first - 1, cur.second + 1));
            decrementCount++;
            check_redundant_state_invariant(a, b, decrementCount);
        }

        check_queue_utilization_invariant(a, b, q.size());
    }
}

int main() {
    cin >> a >> b;
    cout << bfs() << endl;
    return 0;
}
```

### Explanation

1. **Insertion Points:**
   - The checks are strategically placed outside tight loops where possible to avoid significant overhead.

2. **State Tracking:**
   - `decrementCount` tracks the number of decrement operations.
   - `iterationCount` tracks the total number of BFS loop iterations.
   - `q.size()` is checked regularly to assess queue utilization.

3. **Comments:**
   - Each check is accompanied by comments detailing which invariant it is associated with, helping maintain clarity and purpose in the code. 

This instrumentation aims to help identify performance bottlenecks, making the code more robust against various input scenarios that could cause slowdowns.

