system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, v[300000];
int dfs(int x, int y) {
  if (x == m) {
    return y;
  } else if (x < 0 || x >= 30005 || v[x] && v[x] < y) {
    return 30005;
  }
  v[x] = y;
  return min(dfs(2 * x, y + 1), dfs(x - 1, y + 1));
}
int main(int argc, char** argv) {
  cin >> n >> m;
  cout << dfs(n, 0) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1


(G.2) Fast Input

1 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, v[300000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dfs(int x, int y) { /* line 4 slow_hit_count: 714681, fast_hit_count: 9 */
  if (x == m) { /* line 5 slow_hit_count: 714681, fast_hit_count: 9 */
    return y; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  } else if (x < 0 || x >= 30005 || v[x] && v[x] < y) { /* line 7 slow_hit_count: 714680, fast_hit_count: 8 */
    return 30005; /* line 8 slow_hit_count: 357340, fast_hit_count: 4 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  v[x] = y; /* line 10 slow_hit_count: 357340, fast_hit_count: 4 */
  return min(dfs(2 * x, y + 1), dfs(x - 1, y + 1)); /* line 11 slow_hit_count: 357340, fast_hit_count: 4 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char** argv) { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cout << dfs(n, 0) << endl; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issues inherent in the given C program, we need to analyze the provided code and identify the conditions that cause it to slow down. The analysis is based on the differences in hit counts between the "slow" and "fast" inputs provided, which will allow us to determine under what conditions the slowdown occurs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts:**
   - The `dfs` function is called significantly more for the slow input (714,681 hits) than for the fast input (9 hits).
   - The condition checks at line 5 (`if (x == m)`) and line 7 (`else if (x < 0 || x >= 30005 || v[x] && v[x] < y)`) are frequently hit during the slow input, suggesting that these conditions are often evaluated and the recursion is deep, with many branches explored or revisited.
   - The recursive calls at line 11 (`return min(dfs(2 * x, y + 1), dfs(x - 1, y + 1))`) indicate that both branches of the recursive call are contributing to the depth and breadth of the recursion tree, which is extensive for the slow input.

2. **Infer Interactions with Data Structures and Flow Control:**
   - The array `v` is used to memoize or track the smallest number of steps (`y`) to reach a given display value `x`. Despite its use, the high hit counts suggest that many values are recalculated, indicating potential inefficiency in the recursive exploration.
   - The `dfs` function explores two potential operations (doubling and subtracting) on each recursive call, leading to an exponential growth in calls, especially when the number doesn't decrease efficiently towards `m`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language invariants capture the performance characteristics of the code:

1. **Invariant on Recursive Depth and Breadth:**
   - **Natural Language Description:** "If the initial value `n` is larger than the target value `m`, and the subtraction operation is predominantly used to decrease from `n` to `m`, the recursive depth and branching can cause excessive computation, leading to a slowdown."
   - **Explanation:** When `n > m`, the recursive exploration primarily relies on subtracting from `x` to reach `m`, which can lead to deep and broad recursion trees since each state potentially explores two paths continuously without a rapid convergence.

2. **Invariant on Memoization Efficiency:**
   - **Natural Language Description:** "If the array `v` does not effectively prune redundant calculations for states with many repeated visits, the program may perform unnecessary work by recalculating paths that have already been explored more efficiently."
   - **Explanation:** The memoization array `v` is intended to reduce redundant calculations, but if it is not effectively utilized, states may be revisited multiple times with inefficient paths.

3. **Invariant on Exponential Growth of Recursive Calls:**
   - **Natural Language Description:** "If the recursive exploration frequently chooses to double `x` when close to or greater than `m`, the number of recursive calls can grow exponentially, causing slow execution times."
   - **Explanation:** Doubling the value when `x` is already large or not efficiently reducing towards `m` contributes to a larger search space, increasing the number of recursive calls and slowing down performance.

By understanding these conditions, we can design checks or optimizations to prevent the performance bottlenecks observed in the slow input case, enhancing the program's efficiency across a range of scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.

Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?

Input

The first and the only line of the input contains two distinct integers n and m (1 ≤ n, m ≤ 104), separated by a space .

Output

Print a single number — the minimum number of times one needs to push the button required to get the number m out of number n.

Examples

Input

4 6


Output

2


Input

10 1


Output

9

Note

In the first example you need to push the blue button once, and then push the red button once.

In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.

Solution (C++ code):
{solution}


assistant: Let's proceed with the task of implementing invariant checks derived from the previous analysis into C++ code.

### Phase 3: Implement Checker Code in C++

Here are the C++ checkers based on the performance-characterizing invariants we derived:

1. **Invariant on Recursive Depth and Breadth:**
   - **Checker Code:**
     ```cpp
     void check_recursive_depth_breadth(bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth and breadth!" << endl;
             abort();
         }
     }
     ```

2. **Invariant on Memoization Efficiency:**
   - **Checker Code:**
     ```cpp
     void check_memoization_efficiency(bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck condition triggered due to ineffective memoization!" << endl;
             abort();
         }
     }
     ```

3. **Invariant on Exponential Growth of Recursive Calls:**
   - **Checker Code:**
     ```cpp
     void check_exponential_growth(bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck condition triggered due to exponential growth of recursive calls!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrate Checkers into the Program

Now, let's integrate these checkers into the provided C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for recursion depth and breadth
void check_recursive_depth_breadth(int x, int y, int m) {
    if (x > m && y > 10) {  // Arbitrary threshold for depth and breadth
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth and breadth!" << endl;
        abort();
    }
}

// Checker function for memoization efficiency
void check_memoization_efficiency(int x, int y, const int* v) {
    if (v[x] && v[x] < y) {
        cerr << "Warning: Performance bottleneck condition triggered due to ineffective memoization!" << endl;
        abort();
    }
}

// Checker function for exponential growth of recursive calls
void check_exponential_growth(int x, int m) {
    if (x > 2 * m) {  // Arbitrary condition indicating potential exponential growth
        cerr << "Warning: Performance bottleneck condition triggered due to exponential growth of recursive calls!" << endl;
        abort();
    }
}

int n, m, v[300000];
int dfs(int x, int y) {
    check_recursive_depth_breadth(x, y, m);  // Checking depth and breadth invariant
    check_memoization_efficiency(x, y, v);   // Checking memoization efficiency

    if (x == m) {
        return y;
    } else if (x < 0 || x >= 30005 || v[x] && v[x] < y) {
        return 30005;
    }
    v[x] = y;
    check_exponential_growth(x, m);  // Checking for exponential growth of recursive calls
    return min(dfs(2 * x, y + 1), dfs(x - 1, y + 1));
}

int main(int argc, char** argv) {
    cin >> n >> m;
    cout << dfs(n, 0) << endl;
    return 0;
}
```

### Comments on Inserted Checkers
- **Recursive Depth and Breadth:** The check is placed at the beginning of the `dfs` function to prevent excessive recursion depth. The condition checks if `x` is greater than `m` and `y` is beyond an arbitrary threshold, implying potentially excessive recursive exploration.
- **Memoization Efficiency:** This check ensures that memoization is preventing redundant calculations. It verifies that if a smaller `y` value was already achieved, we shouldn't proceed further.
- **Exponential Growth:** This check guards against potential exponential growth by ensuring that the value `x` doesn't get excessively large relative to `m`.

These checks are designed to help identify performance problems during testing, especially when running with various input sizes and conditions.

