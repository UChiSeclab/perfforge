system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<pair<int, int>, int> edges;
set<int> vertex;
vector<int> comp;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n, m, u, v, cnt;
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    vertex.insert(i);
  }
  for (int i = 0; i < m; i++) {
    cin >> u >> v;
    edges[{u, v}] = 1;
    edges[{v, u}] = 1;
  }
  while (!vertex.empty()) {
    u = *vertex.begin();
    cnt = 1;
    vertex.erase(vertex.begin());
    queue<int> q;
    q.push(u);
    while (!q.empty()) {
      v = q.front();
      q.pop();
      auto itr = vertex.begin();
      while (itr != vertex.end()) {
        bool found = false;
        if (!edges[{*itr, v}]) {
          found = true;
        }
        if (found) {
          q.push(*itr);
          cnt++;
          itr = vertex.erase(itr);
        } else {
          itr++;
        }
      }
    }
    comp.push_back(cnt);
  }
  cout << comp.size() - 1 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, int>, int> edges; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<int> vertex; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> comp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, u, v, cnt; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 12 slow_hit_count: 100001, fast_hit_count: 2 */
    vertex.insert(i); /* line 13 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> u >> v; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    edges[{u, v}] = 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    edges[{v, u}] = 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  while (!vertex.empty()) { /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
    u = *vertex.begin(); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cnt = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    vertex.erase(vertex.begin()); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    queue<int> q; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
    q.push(u); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    while (!q.empty()) { /* line 26 slow_hit_count: 100001, fast_hit_count: 2 */
      v = q.front(); /* line 27 slow_hit_count: 100000, fast_hit_count: 1 */
      q.pop(); /* line 28 slow_hit_count: 100000, fast_hit_count: 1 */
      auto itr = vertex.begin(); /* line 29 slow_hit_count: 100000, fast_hit_count: 1 */
      while (itr != vertex.end()) { /* line 30 slow_hit_count: 199999, fast_hit_count: 1 */
        bool found = false; /* line 31 slow_hit_count: 99999, fast_hit_count: 0 */
        if (!edges[{*itr, v}]) { /* line 32 slow_hit_count: 99999, fast_hit_count: 0 */
          found = true; /* line 33 slow_hit_count: 99999, fast_hit_count: 0 */
        } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
        if (found) { /* line 35 slow_hit_count: 99999, fast_hit_count: 0 */
          q.push(*itr); /* line 36 slow_hit_count: 99999, fast_hit_count: 0 */
          cnt++; /* line 37 slow_hit_count: 99999, fast_hit_count: 0 */
          itr = vertex.erase(itr); /* line 38 slow_hit_count: 99999, fast_hit_count: 0 */
        } else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
          itr++; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    comp.push_back(cnt); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << comp.size() - 1 << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 1, fast_hit_count: 1 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

From the hit count data, we notice the following key observations:

1. **Hit Count Comparison**:
   - Line 26 (`while (!q.empty())`): Hit 100,001 times in the slow input, but only 2 times in the fast input.
   - Lines 27-38: The inner loop and its constituent operations (`q.pop()`, `q.push()`, `vertex.erase()`, etc.) are executed nearly 100,000 times for the slow input, whereas they are executed only once for the fast input.

2. **Data Structure and Algorithmic Complexity**:
   - The main computational work seems to be happening inside the nested loops starting from line 26, which is likely performing a graph traversal or connectivity check.
   - The operations on the `vertex` set and the `q` queue are causing these lines to be executed frequently, especially when `n` is large.

3. **Input Constraints Interaction**:
   - The slow input (`100,000 0`) suggests that for a fully disconnected graph (all edges have weight 0), the traversal needs to check all potential edges or nodes, leading to the high hit count.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the analysis, the following natural language performance-characterizing invariants can be derived:

1. **Graph Size and Connectivity**:
   - Natural Language Description: "If the number of vertices `n` is very large and the graph is sparse or has no edges (`m` is close to 0), the traversal operations may significantly increase, leading to performance degradation."
   - Explanation: In a large graph where no edges have weight 1, the algorithm must process each vertex individually, leading to a high number of operations.

2. **Graph Traversal in Sparse Graphs**:
   - Natural Language Description: "When `n` is near its maximum limit and the graph lacks connectivity (i.e., very few or no edges of weight 1), the main traversal loop may execute many redundant checks, causing slow execution."
   - Explanation: The lack of connectivity forces the algorithm into a worst-case scenario where it checks each vertex and potential edges exhaustively.

3. **Repeated Queue Operations**:
   - Natural Language Description: "In scenarios where the graph is large and mostly disconnected, the queue operations for node exploration can become a performance bottleneck, as each node might trigger unnecessary or repeated checks."
   - Explanation: The use of a queue for breadth-first search (BFS) or similar operations becomes inefficient when handling many isolated nodes.

By using these performance invariants, we can better understand under which conditions the algorithm will likely perform slowly. These insights help to improve the algorithm or manage expectations when processing large and sparse graphs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: Here’s the step-by-step procedure to implement the performance characterizing invariants as runtime checks and integrate them into the given C++ program.

**Phase 3: Implement Natural Language Invariants as C++ Checks**

For the invariants derived, we will now translate them into C++ runtime checks.

1. **Invariant 1: Graph Size and Connectivity**
   - Check when `n` is large and `m` is 0, which could lead to performance issues due to sparse graph traversal.

```cpp
void check_graph_size_connectivity(int n, int m) {
    // If n is large and m is 0, the graph is sparse, potentially causing a performance issue.
    if (n > 10000 && m == 0) { // Choosing 10000 as a somewhat arbitrary but reasonable threshold for "large"
        cerr << "Warning: Potential performance bottleneck - large, sparse graph (n is large and m is 0)" << endl;
        abort();
    }
}
```

2. **Invariant 2: Graph Traversal in Sparse Graphs**
   - Similar condition as above; ensure the traversal of nodes does not become a bottleneck.

```cpp
void check_traversal_operations(int n, int m) {
    // Check when the graph is large and sparse; traversal could lead to excessive operations.
    if (n > 10000 && m < n / 10) { // Check if edges are significantly fewer than vertices.
        cerr << "Warning: Traversal performance bottleneck - large graph with very few edges" << endl;
        abort();
    }
}
```

3. **Invariant 3: Repeated Queue Operations in Sparse Graphs**
   - Ensure that queue operations do not become excessive due to node exploration in sparse graphs.

```cpp
void check_queue_operations(int n, int size) {
    // Check if the number of queue operations (size of the queue) becomes excessive in large, sparse graphs.
    if (n > 10000 && size > n * 0.5) { // If half the graph's nodes are being explored at once, this could indicate excess.
        cerr << "Warning: Queue operation bottleneck - excessive operations in large sparse graph" << endl;
        abort();
    }
}
```

**Phase 4: Integrate the Checkers into the Original Program**

We will now integrate these check functions into the original C++ program, placing them at strategic points to minimize overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for graph size and connectivity
void check_graph_size_connectivity(int n, int m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Potential performance bottleneck - large, sparse graph (n is large and m is 0)" << endl;
        abort();
    }
}

// Checker for traversal operations
void check_traversal_operations(int n, int m) {
    if (n > 10000 && m < n / 10) {
        cerr << "Warning: Traversal performance bottleneck - large graph with very few edges" << endl;
        abort();
    }
}

// Checker for queue operations
void check_queue_operations(int n, int size) {
    if (n > 10000 && size > n * 0.5) {
        cerr << "Warning: Queue operation bottleneck - excessive operations in large sparse graph" << endl;
        abort();
    }
}

map<pair<int, int>, int> edges;
set<int> vertex;
vector<int> comp;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int n, m, u, v, cnt;
    cin >> n >> m;
    
    // Insert checkers after reading input
    check_graph_size_connectivity(n, m);
    check_traversal_operations(n, m);
    
    for (int i = 1; i <= n; i++) {
        vertex.insert(i);
    }
    for (int i = 0; i < m; i++) {
        cin >> u >> v;
        edges[{u, v}] = 1;
        edges[{v, u}] = 1; 
    }
    
    while (!vertex.empty()) {
        u = *vertex.begin();
        cnt = 1;
        vertex.erase(vertex.begin());
        queue<int> q;
        q.push(u);
        while (!q.empty()) {
            v = q.front();
            q.pop();
            auto itr = vertex.begin();
            while (itr != vertex.end()) {
                bool found = false;
                if (!edges[{*itr, v}]) {
                    found = true;
                }
                if (found) {
                    q.push(*itr);
                    cnt++;
                    itr = vertex.erase(itr);
                } else {
                    itr++;
                }
            }
            // Check inside the traversal to monitor queue size
            check_queue_operations(n, q.size());
        }
        comp.push_back(cnt);
    }
    
    cout << comp.size() - 1 << endl;
}
```

**Explanation:**

- **Check placements**: The checks are placed immediately after reading the graph input to catch any potential performance issues early on. The queue size check is placed inside the traversal loop to ensure it doesn't grow excessively.
- **Check conditions**: The conditions are broad enough to signal potential issues without being too restrictive, based on the derived invariants.

