=== Invariants Response ===
To address the task of identifying performance bottlenecks and deriving performance-characterizing invariants, let's proceed with the analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

1. **`findSet` Function:**
   - **Line 7**: `return parent[at] = findSet(parent[at]);` is particularly hit often (499,997 times in slow input, 0 in fast input). This suggests significant recursion and path compression due to union-find operations.
   
2. **`unionSets` Function:**
   - The whole function is called frequently, with **Lines 10-15** seeing 300,000 hits in the slow input, indicating extensive union-find operations.

3. **Sorting with `std::sort`:**
   - **Lines 34-37**: The sorting operation is heavily invoked with 1,994,320 hits on slow input. This indicates that the sorting function, involving graph operations, is a major bottleneck.

4. **Main Loop (Lines 39-52):**
   - This loop is executed 100,000 times, with nested operations inside (like checking connections and union operations), making it costly for large `n`.

5. **Union-Find and Graph Interaction:**
   - Most notably, **Lines 43-51** show repeated checks and modifications in the `nz` map and the graph, which are costly with large `n` due to their complexity.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, here are the performance-characterizing invariants:

1. **Repeated Union-Find Operations:**
   - **Invariant:** "When `n` is large and there are no edges with weight 1 (`m = 0`), union-find operations with path compression are executed extensively, which may slow down the performance significantly."

2. **Sorting Overhead:**
   - **Invariant:** "With increasing `n`, especially when all nodes are isolated (`m = 0`), the repeated sorting of nodes based on degree or arbitrary criteria can become a performance bottleneck."

3. **Graph Operations:**
   - **Invariant:** "When the graph is sparse or empty, and `n` approaches the upper constraint, the operations of checking connections and modifying structures (`std::map` and `std::set`) can lead to high execution times."

4. **Data Structure Manipulation:**
   - **Invariant:** "The manipulation and frequent access of data structures like `std::map` and `std::set` in the context of a large number of vertices without connecting edges (`m = 0`) can degrade performance due to their inherent overhead."

These invariants highlight scenarios where the algorithm's performance can degrade, particularly focusing on when `n` is close to its maximum allowed value, and the graph structure leads to excessive operations in the union-find or sorting processes. These statements abstract the specific numeric values and focus on conditions or structures that lead to performance issues, making them applicable to other similar scenarios within the problem constraints.

=== Checker Response ===
Let's proceed with Phase 3 and Phase 4 to implement the performance-characterizing invariants in C++ and integrate them into the provided C++ program.

### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language invariants from Phase 2 into C++ runtime checks:

```cpp
#include <iostream>

// Check for extensive union-find operations when n is large and m = 0
void check_union_find_invariant(int n, int m) {
    if (n > 50000 && m == 0) {
        std::cerr << "Warning: Performance bottleneck due to extensive union-find operations with large n and no edges." << std::endl;
        abort();
    }
}

// Check for sorting overhead when n is large
void check_sort_invariant(int n) {
    if (n > 50000) {
        std::cerr << "Warning: Performance bottleneck due to sorting operations in a large dataset." << std::endl;
        abort();
    }
}

// Check for costly data structure operations in a sparse or empty graph
void check_graph_operations_invariant(int n, int m) {
    if (n > 50000 && m == 0) {
        std::cerr << "Warning: Performance bottleneck due to costly data structure operations in a sparse or empty graph." << std::endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the original C++ code at appropriate points:

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")

std::vector<std::set<int>> graph;
std::vector<int> parent, size;

int findSet(int at) {
    if (parent[at] == at) return at;
    return parent[at] = findSet(parent[at]);
}

void unionSets(int a, int b) {
    a = findSet(a);
    b = findSet(b);
    if (a == b) return;
    if (size[a] < size[b]) std::swap(a, b);
    parent[b] = a;
    size[a] += size[b];
}

int main() {
    int n, m;
    std::cin >> n >> m;
    
    // Invariant checks for performance bottlenecks
    check_union_find_invariant(n, m);
    check_sort_invariant(n);
    check_graph_operations_invariant(n, m);

    graph.resize(n);
    parent.resize(n);
    size.resize(n, 1);
    for (int i = 0; i < m; i++) {
        int a, b;
        std::cin >> a >> b;
        a--;
        b--;
        graph[a].insert(b);
        graph[b].insert(a);
    }
    
    std::vector<int> vec(n);
    std::map<int, int> nz;
    for (int i = 0; i < n; i++) vec[i] = i, parent[i] = i, nz[i] = 3;
    std::sort(vec.begin(), vec.end(), [&](int a, int b) {
        return graph[a].size() != graph[b].size()
                   ? graph[a].size() < graph[b].size()
                   : (12345 ^ a) < (12345 ^ b);
    });
    for (int _i = 0; _i < n; _i++) {
        int i = vec[_i];
        for (auto it = nz.begin(); it != nz.end();) {
            bool del = false;
            if (graph[i].find(it->first) == graph[i].end()) {
                unionSets(i, it->first);
                nz[it->first]--;
                if (nz[it->first] == 0) del = true;
            }
            if (del)
                it = nz.erase(it);
            else
                it++;
        }
    }
    for (int i = 0; i < n; i++) findSet(i);
    std::set<int> uniq;
    for (int el : parent) uniq.insert(el);
    std::cout << (uniq.size() - 1) << '\n';
}
```

### Explanation:

- **Invariant Checks:** The checks are inserted right after reading inputs, ensuring they don't add overhead within tight loops.
- **Purpose:** Each check is designed to trigger if the conditions leading to performance bottlenecks (as identified in Phase 2) are met, helping identify scenarios where the program might run slowly.
- **Abort on Warning:** These checks will log a message to `stderr` and abort the program, which is useful for testing and detecting problem scenarios during development or fuzz testing.
