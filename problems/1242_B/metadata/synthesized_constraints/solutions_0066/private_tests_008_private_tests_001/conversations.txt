system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct UnionSet {
  vector<pair<int32_t, int32_t> > sets;
  void init(int32_t n) {
    for (int i = (0); i < (n); ++i) {
      sets.push_back({i, 0});
    }
  }
  int find(int32_t x) {
    if (sets[x].first == x)
      return x;
    else
      return sets[x].first = find(sets[x].first);
  }
  void union_both(int32_t x, int32_t y) {
    int32_t parentX = find(x), parentY = find(y);
    int32_t rankX = sets[parentX].second, rankY = sets[parentY].second;
    if (parentX == parentY)
      return;
    else if (rankX < rankY)
      sets[parentX].first = parentY;
    else
      sets[parentY].first = parentX;
    if (rankX == rankY) sets[parentX].second++;
  }
};
const int N = 100001;
vector<pair<int, int> > edges;
int d[N];
vector<int> adj[N];
int n, m;
int mm;
vector<int> random_nodes(vector<int>& a) {
  vector<int> nums;
  int d = a.size();
  for (int i = (0); i < (mm); ++i) nums.push_back(rand() % (n - d));
  sort(nums.begin(), nums.end());
  int i = 0;
  int cur = 0;
  int cur_j = 0;
  a.push_back(n + 1);
  vector<int> nodes;
  for (auto j : nums) {
    while (cur + 1 + j - cur_j >= a[i]) {
      cur_j += a[i] - cur - 1;
      cur = a[i];
      i++;
    }
    nodes.push_back(cur + 1 + j - cur_j);
  }
  a.pop_back();
  return nodes;
}
int random_try() {
  UnionSet U;
  U.init(n + 1);
  for (int u = (1); u < (n + 1); ++u) {
    if (d[u] >= n - mm) {
      adj[u].push_back(n + 1);
      for (int i = (0); i < (d[u]); ++i) {
        for (int v = (adj[u][i] + 1); v < (adj[u][i + 1]); ++v)
          if (u != v) {
            U.union_both(u, v);
          }
      }
      for (int v = (1); v < (adj[u][0]); ++v) U.union_both(u, v);
      adj[u].pop_back();
    } else {
      for (auto v : random_nodes(adj[u])) {
        U.union_both(u, v);
      }
    }
  }
  int cost = 0;
  for (auto p : edges) {
    if (U.find(p.first) != U.find(p.second)) {
      cost++;
      U.union_both(p.first, p.second);
    }
  }
  return cost;
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  fill(d, d + n + 1, 0);
  for (int i = (0); i < (m); ++i) {
    int u, v;
    cin >> u >> v;
    edges.push_back({u, v});
    d[u]++;
    d[v]++;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  for (int u = (1); u < (n + 1); ++u) {
    sort(adj[u].begin(), adj[u].end());
  }
  int cost = n + 1;
  mm = min(3000000 / (n + m), 200);
  for (int i = (0); i < (3); ++i) {
    cost = min(random_try(), cost);
  }
  cout << cost << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct UnionSet { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int32_t, int32_t> > sets; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  void init(int32_t n) { /* line 5 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = (0); i < (n); ++i) { /* line 6 slow_hit_count: 300006, fast_hit_count: 9 */
      sets.push_back({i, 0}); /* line 7 slow_hit_count: 300003, fast_hit_count: 6 */
    } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 3, fast_hit_count: 3 */
  int find(int32_t x) { /* line 10 slow_hit_count: 35702669, fast_hit_count: 6 */
    if (sets[x].first == x) /* line 11 slow_hit_count: 35702669, fast_hit_count: 6 */
      return x; /* line 12 slow_hit_count: 18000000, fast_hit_count: 6 */
    else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      return sets[x].first = find(sets[x].first); /* line 14 slow_hit_count: 17702669, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  void union_both(int32_t x, int32_t y) { /* line 16 slow_hit_count: 9000000, fast_hit_count: 3 */
    int32_t parentX = find(x), parentY = find(y); /* line 17 slow_hit_count: 9000000, fast_hit_count: 3 */
    int32_t rankX = sets[parentX].second, rankY = sets[parentY].second; /* line 18 slow_hit_count: 9000000, fast_hit_count: 3 */
    if (parentX == parentY) /* line 19 slow_hit_count: 9000000, fast_hit_count: 3 */
      return; /* line 20 slow_hit_count: 8700003, fast_hit_count: 3 */
    else if (rankX < rankY) /* line 21 slow_hit_count: 299997, fast_hit_count: 0 */
      sets[parentX].first = parentY; /* line 22 slow_hit_count: 9612, fast_hit_count: 0 */
    else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      sets[parentY].first = parentX; /* line 24 slow_hit_count: 290385, fast_hit_count: 0 */
    if (rankX == rankY) sets[parentX].second++; /* line 25 slow_hit_count: 299997, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100001; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > edges; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int d[N]; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> adj[N]; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int mm; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> random_nodes(vector<int>& a) { /* line 34 slow_hit_count: 300000, fast_hit_count: 0 */
  vector<int> nums; /* line 35 slow_hit_count: 600000, fast_hit_count: 0 */
  int d = a.size(); /* line 36 slow_hit_count: 300000, fast_hit_count: 0 */
  for (int i = (0); i < (mm); ++i) nums.push_back(rand() % (n - d)); /* line 37 slow_hit_count: 9300000, fast_hit_count: 0 */
  sort(nums.begin(), nums.end()); /* line 38 slow_hit_count: 300000, fast_hit_count: 0 */
  int i = 0; /* line 39 slow_hit_count: 300000, fast_hit_count: 0 */
  int cur = 0; /* line 40 slow_hit_count: 300000, fast_hit_count: 0 */
  int cur_j = 0; /* line 41 slow_hit_count: 300000, fast_hit_count: 0 */
  a.push_back(n + 1); /* line 42 slow_hit_count: 300000, fast_hit_count: 0 */
  vector<int> nodes; /* line 43 slow_hit_count: 300000, fast_hit_count: 0 */
  for (auto j : nums) { /* line 44 slow_hit_count: 9300000, fast_hit_count: 0 */
    while (cur + 1 + j - cur_j >= a[i]) { /* line 45 slow_hit_count: 9000000, fast_hit_count: 0 */
      cur_j += a[i] - cur - 1; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      cur = a[i]; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      i++; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    nodes.push_back(cur + 1 + j - cur_j); /* line 50 slow_hit_count: 9000000, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  a.pop_back(); /* line 52 slow_hit_count: 300000, fast_hit_count: 0 */
  return nodes; /* line 53 slow_hit_count: 600000, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int random_try() { /* line 55 slow_hit_count: 3, fast_hit_count: 3 */
  UnionSet U; /* line 56 slow_hit_count: 3, fast_hit_count: 3 */
  U.init(n + 1); /* line 57 slow_hit_count: 3, fast_hit_count: 3 */
  for (int u = (1); u < (n + 1); ++u) { /* line 58 slow_hit_count: 300003, fast_hit_count: 6 */
    if (d[u] >= n - mm) { /* line 59 slow_hit_count: 300000, fast_hit_count: 3 */
      adj[u].push_back(n + 1); /* line 60 slow_hit_count: 0, fast_hit_count: 3 */
      for (int i = (0); i < (d[u]); ++i) { /* line 61 slow_hit_count: 0, fast_hit_count: 3 */
        for (int v = (adj[u][i] + 1); v < (adj[u][i + 1]); ++v) /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
          if (u != v) { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
            U.union_both(u, v); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      for (int v = (1); v < (adj[u][0]); ++v) U.union_both(u, v); /* line 67 slow_hit_count: 0, fast_hit_count: 6 */
      adj[u].pop_back(); /* line 68 slow_hit_count: 0, fast_hit_count: 3 */
    } else { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      for (auto v : random_nodes(adj[u])) { /* line 70 slow_hit_count: 9300000, fast_hit_count: 0 */
        U.union_both(u, v); /* line 71 slow_hit_count: 9000000, fast_hit_count: 0 */
      } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  int cost = 0; /* line 75 slow_hit_count: 3, fast_hit_count: 3 */
  for (auto p : edges) { /* line 76 slow_hit_count: 3, fast_hit_count: 3 */
    if (U.find(p.first) != U.find(p.second)) { /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      cost++; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      U.union_both(p.first, p.second); /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  return cost; /* line 82 slow_hit_count: 6, fast_hit_count: 6 */
} /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  fill(d, d + n + 1, 0); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (m); ++i) { /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
    int u, v; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> u >> v; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    edges.push_back({u, v}); /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    d[u]++; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    d[v]++; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    adj[u].push_back(v); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    adj[v].push_back(u); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  for (int u = (1); u < (n + 1); ++u) { /* line 97 slow_hit_count: 100001, fast_hit_count: 2 */
    sort(adj[u].begin(), adj[u].end()); /* line 98 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  int cost = n + 1; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  mm = min(3000000 / (n + m), 200); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (3); ++i) { /* line 102 slow_hit_count: 4, fast_hit_count: 4 */
    cost = min(random_try(), cost); /* line 103 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cost << "\n"; /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 106 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C code and derive performance-characterizing invariants, we need to identify the segments of the code that are disproportionately hit during the execution on the slow input compared to the fast input. From the hit count information, we can identify potential bottlenecks and then deduce the conditions that might lead to performance degradation.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Union-Find Operations**: 
   - Lines 10-14 (the `find` function) are significantly more frequently hit during the slow input run. The `find` function is called 35,702,669 times, showing substantial recursive activity due to path compression.
   - Line 17 (inside `union_both`) shows 9,000,000 hits on the slow input, indicating many union operations.

2. **Random Nodes Calculation**:
   - The `random_nodes` function (lines 34-53) is heavily used, with numerous hits on lines 37 and 44, indicating repeated execution of the loop for generating random numbers.

3. **Union Operations**:
   - Line 71 (inside the `random_try` function) shows 9,000,000 hits, suggesting the union operation is called frequently.

### Phase 2: Derive Performance-Characterizing Invariants

Given the code and the problem statement, we can infer several conditions under which the program might slow down. Here are the natural language performance invariants:

1. **When `n` is large with minimal edges of weight 1**:
   - The algorithm's efficiency is hampered when `n` approaches its upper constraint (100,000) and `m` is very low (close to 0). The large `n` causes a high number of initializations and checks in the union-find structure, and with minimal edges, the union-find operations become dominant with little beneficial merging.

2. **High Frequency of Union-Find Operations**:
   - The program experiences significant slowdowns when there is a high frequency of union and find operations due to a large number of vertices needing to be processed individually. This is exacerbated when there is a lack of connectivity (few or no edges of weight 1) leading to inefficient path compression.

3. **Ineffective Random Sampling**:
   - If the graph is sparse with very few edges of weight 1, the `random_nodes` function may generate many redundant or ineffective attempts at forming connections, leading to unnecessary computational overhead.

4. **Excessive Recursion within Union-Find**:
   - If the depth of recursion in the `find` function becomes significant owing to the lack of connected components to merge effectively, it leads to excessive path compression operations, slowing the program.

Here are generalized conditions that could indicate the program is likely to slow down:

- "When `n` is large and `m` is significantly smaller relative to `n`, leading to inefficient union-find operations with minimal path compression benefits."
- "When the number of vertices significantly exceeds the number of edges of weight 1, resulting in frequent union and find operations without effective merging, causing a bottleneck."
- "When the random node selection process has to iterate over large vertex sets with minimal edge weight variety, leading to redundant operations."

These invariants help to abstractly capture scenarios that might cause the program to slow down, based on the code structure and observed hit counts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants derived in the previous phase. The conditions will be checked at runtime to detect potential performance bottlenecks.

1. **Invariant**: When `n` is large with minimal edges of weight 1.
```cpp
void check_large_n_minimal_m(int n, int m) {
    if (n > 50000 && m < n / 10) {  // Thresholds can be tuned based on empirical observations or constraints
        cerr << "Warning: Performance bottleneck due to large n with minimal edges of weight 1!" << endl;
        abort();
    }
}
```

2. **Invariant**: High frequency of union-find operations.
```cpp
void check_high_union_find_frequency(int union_find_calls, int threshold) {
    if (union_find_calls > threshold) {
        cerr << "Warning: Performance bottleneck due to high frequency of union-find operations!" << endl;
        abort();
    }
}
```

3. **Invariant**: Ineffective random sampling.
```cpp
void check_ineffective_random_sampling(int random_sampling_iterations, int threshold) {
    if (random_sampling_iterations > threshold) {
        cerr << "Warning: Performance bottleneck due to ineffective random sampling!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct UnionSet {
  vector<pair<int32_t, int32_t> > sets;
  void init(int32_t n) {
    for (int i = (0); i < (n); ++i) {
      sets.push_back({i, 0});
    }
  }
  int find(int32_t x) {
    if (sets[x].first == x)
      return x;
    else
      return sets[x].first = find(sets[x].first);
  }
  void union_both(int32_t x, int32_t y) {
    int32_t parentX = find(x), parentY = find(y);
    int32_t rankX = sets[parentX].second, rankY = sets[parentY].second;
    if (parentX == parentY)
      return;
    else if (rankX < rankY)
      sets[parentX].first = parentY;
    else
      sets[parentY].first = parentX;
    if (rankX == rankY) sets[parentX].second++;
  }
};

// Checkers for performance bottlenecks
void check_large_n_minimal_m(int n, int m) {
    if (n > 50000 && m < n / 10) {
        cerr << "Warning: Performance bottleneck due to large n with minimal edges of weight 1!" << endl;
        abort();
    }
}

void check_high_union_find_frequency(int union_find_calls, int threshold) {
    if (union_find_calls > threshold) {
        cerr << "Warning: Performance bottleneck due to high frequency of union-find operations!" << endl;
        abort();
    }
}

void check_ineffective_random_sampling(int random_sampling_iterations, int threshold) {
    if (random_sampling_iterations > threshold) {
        cerr << "Warning: Performance bottleneck due to ineffective random sampling!" << endl;
        abort();
    }
}

const int N = 100001;
vector<pair<int, int> > edges;
int d[N];
vector<int> adj[N];
int n, m;
int mm;
int union_find_calls = 0;  // Counter for union-find operations
int random_sampling_iterations = 0;  // Counter for random sampling iterations

vector<int> random_nodes(vector<int>& a) {
  vector<int> nums;
  int d = a.size();
  for (int i = (0); i < (mm); ++i) nums.push_back(rand() % (n - d));
  random_sampling_iterations++;  // Increment random sampling counter
  sort(nums.begin(), nums.end());
  int i = 0;
  int cur = 0;
  int cur_j = 0;
  a.push_back(n + 1);
  vector<int> nodes;
  for (auto j : nums) {
    while (cur + 1 + j - cur_j >= a[i]) {
      cur_j += a[i] - cur - 1;
      cur = a[i];
      i++;
    }
    nodes.push_back(cur + 1 + j - cur_j);
  }
  a.pop_back();
  return nodes;
}

int random_try() {
  UnionSet U;
  U.init(n + 1);
  for (int u = (1); u < (n + 1); ++u) {
    if (d[u] >= n - mm) {
      adj[u].push_back(n + 1);
      for (int i = (0); i < (d[u]); ++i) {
        for (int v = (adj[u][i] + 1); v < (adj[u][i + 1]); ++v)
          if (u != v) {
            U.union_both(u, v);
            union_find_calls++;  // Increment union-find operation counter
          }
      }
      for (int v = (1); v < (adj[u][0]); ++v) {
        U.union_both(u, v);
        union_find_calls++;  // Increment union-find operation counter
      }
      adj[u].pop_back();
    } else {
      for (auto v : random_nodes(adj[u])) {
        U.union_both(u, v);
        union_find_calls++;  // Increment union-find operation counter
      }
    }
  }

  int cost = 0;
  for (auto p : edges) {
    if (U.find(p.first) != U.find(p.second)) {
      cost++;
      U.union_both(p.first, p.second);
      union_find_calls++;  // Increment union-find operation counter
    }
  }
  
  // Check for performance bottlenecks after critical operations
  check_high_union_find_frequency(union_find_calls, 10000000);
  check_ineffective_random_sampling(random_sampling_iterations, 100000);

  return cost;
}

int32_t main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  fill(d, d + n + 1, 0);
  for (int i = (0); i < (m); ++i) {
    int u, v;
    cin >> u >> v;
    edges.push_back({u, v});
    d[u]++;
    d[v]++;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  for (int u = (1); u < (n + 1); ++u) {
    sort(adj[u].begin(), adj[u].end());
  }
  int cost = n + 1;
  mm = min(3000000 / (n + m), 200);
  
  // Check for large n with minimal edges before any expensive operations
  check_large_n_minimal_m(n, m);

  for (int i = (0); i < (3); ++i) {
    cost = min(random_try(), cost);
  }
  cout << cost << "\n";
}
```

### Explanation

- **Check for Large `n` with Minimal `m`**: This check is placed after reading the input values. It ensures that the program will abort if `n` is large but `m` is very small, as this situation can create a bottleneck due to inefficient union-find operations.
  
- **Check for High Union-Find Frequency and Ineffective Random Sampling**: These checks are implemented inside the `random_try` function after critical operations are executed. They ensure that the program will abort if it detects excessive union-find operations or inefficient random sampling attempts.

By carefully placing these checks, we prevent them from adding significant overhead during tight loops while effectively detecting performance bottlenecks.

