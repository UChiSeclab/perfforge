system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
vector<int> adj[100005];
int par[100005];
int fnd(int u) { return par[u] = par[u] == u ? u : fnd(par[u]); }
void unn(int u, int v) {
  u = fnd(u), v = fnd(v);
  par[u] = v;
}
int main() {
  srand(time(0));
  scanf("%d%d", &n, &m);
  iota(par, par + n + 1, 0);
  for (int a, b, i = 0; i < m; i++) {
    scanf("%d%d", &a, &b);
    adj[a].push_back(b);
    adj[b].push_back(a);
  }
  for (int i = 1; i <= n; i++) {
    vector<int> conn;
    adj[i].push_back(0);
    adj[i].push_back(i);
    adj[i].push_back(n + 1);
    sort(adj[i].begin(), adj[i].end());
    if (n - adj[i].size() + 2 <= 100) {
      int nt = 1;
      for (int j : adj[i]) {
        while (nt < j) conn.push_back(nt++);
        if (nt == j) nt++;
      }
    } else {
      vector<pair<int, int>> rngs;
      for (int j = 1; j < adj[i].size(); j++)
        if (adj[i][j] - adj[i][j - 1] > 1)
          rngs.push_back({adj[i][j] - adj[i][j - 1] - 1, adj[i][j - 1] + 1});
      for (int j = 1; j < rngs.size(); j++) rngs[j].first += rngs[j - 1].first;
      while (conn.size() < min(100, n - 1)) {
        int tk = rand() % rngs.back().first + 1;
        int st = 0, en = rngs.size() - 1, mid;
        while (st <= en) {
          mid = (st + en) >> 1;
          if (rngs[mid].first < tk)
            st = mid + 1;
          else
            en = mid - 1;
        }
        int ad = tk - (st ? rngs[st - 1].first : 0) + rngs[st].second - 1;
        conn.push_back(ad);
      }
    }
    for (int j : conn) unn(i, j);
  }
  int ans = -1;
  for (int i = 1; i <= n; i++) ans += (i == fnd(i));
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> adj[100005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int par[100005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int fnd(int u) { return par[u] = par[u] == u ? u : fnd(par[u]); } /* line 6 slow_hit_count: 42705727, fast_hit_count: 1 */
void unn(int u, int v) { /* line 7 slow_hit_count: 10000000, fast_hit_count: 0 */
  u = fnd(u), v = fnd(v); /* line 8 slow_hit_count: 10000000, fast_hit_count: 0 */
  par[u] = v; /* line 9 slow_hit_count: 10000000, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 10000000, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  srand(time(0)); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  iota(par, par + n + 1, 0); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int a, b, i = 0; i < m; i++) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    scanf("%d%d", &a, &b); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    adj[a].push_back(b); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    adj[b].push_back(a); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 20 slow_hit_count: 100001, fast_hit_count: 2 */
    vector<int> conn; /* line 21 slow_hit_count: 200000, fast_hit_count: 2 */
    adj[i].push_back(0); /* line 22 slow_hit_count: 100000, fast_hit_count: 1 */
    adj[i].push_back(i); /* line 23 slow_hit_count: 100000, fast_hit_count: 1 */
    adj[i].push_back(n + 1); /* line 24 slow_hit_count: 100000, fast_hit_count: 1 */
    sort(adj[i].begin(), adj[i].end()); /* line 25 slow_hit_count: 100000, fast_hit_count: 1 */
    if (n - adj[i].size() + 2 <= 100) { /* line 26 slow_hit_count: 100000, fast_hit_count: 1 */
      int nt = 1; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
      for (int j : adj[i]) { /* line 28 slow_hit_count: 0, fast_hit_count: 4 */
        while (nt < j) conn.push_back(nt++); /* line 29 slow_hit_count: 0, fast_hit_count: 3 */
        if (nt == j) nt++; /* line 30 slow_hit_count: 0, fast_hit_count: 3 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      vector<pair<int, int>> rngs; /* line 33 slow_hit_count: 200000, fast_hit_count: 0 */
      for (int j = 1; j < adj[i].size(); j++) /* line 34 slow_hit_count: 300000, fast_hit_count: 0 */
        if (adj[i][j] - adj[i][j - 1] > 1) /* line 35 slow_hit_count: 200000, fast_hit_count: 0 */
          rngs.push_back({adj[i][j] - adj[i][j - 1] - 1, adj[i][j - 1] + 1}); /* line 36 slow_hit_count: 199998, fast_hit_count: 0 */
      for (int j = 1; j < rngs.size(); j++) rngs[j].first += rngs[j - 1].first; /* line 37 slow_hit_count: 199998, fast_hit_count: 0 */
      while (conn.size() < min(100, n - 1)) { /* line 38 slow_hit_count: 10100000, fast_hit_count: 0 */
        int tk = rand() % rngs.back().first + 1; /* line 39 slow_hit_count: 10000000, fast_hit_count: 0 */
        int st = 0, en = rngs.size() - 1, mid; /* line 40 slow_hit_count: 10000000, fast_hit_count: 0 */
        while (st <= en) { /* line 41 slow_hit_count: 25001052, fast_hit_count: 0 */
          mid = (st + en) >> 1; /* line 42 slow_hit_count: 15001052, fast_hit_count: 0 */
          if (rngs[mid].first < tk) /* line 43 slow_hit_count: 15001052, fast_hit_count: 0 */
            st = mid + 1; /* line 44 slow_hit_count: 5001052, fast_hit_count: 0 */
          else /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
            en = mid - 1; /* line 46 slow_hit_count: 10000000, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        int ad = tk - (st ? rngs[st - 1].first : 0) + rngs[st].second - 1; /* line 48 slow_hit_count: 10000000, fast_hit_count: 0 */
        conn.push_back(ad); /* line 49 slow_hit_count: 10000000, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j : conn) unn(i, j); /* line 52 slow_hit_count: 10100000, fast_hit_count: 1 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = -1; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) ans += (i == fnd(i)); /* line 55 slow_hit_count: 100001, fast_hit_count: 2 */
  printf("%d\n", ans); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 6 (`fnd` function)**: This line has a significantly higher hit count during the slow run (42,705,727 hits) compared to the fast run (1 hit). This indicates that the `fnd` function (used for finding the set representative in the Union-Find data structure) is called very frequently, perhaps due to deep recursion caused by path compression.

2. **Lines 8-9 (`unn` function)**: These lines, part of the union operation, have 10,000,000 hits in the slow run and 0 hits in the fast run. This suggests that the union operation is a performance bottleneck due to the large number of connections being processed.

3. **Loop starting at Line 20**: This loop iterates over the number of vertices `n`, with hit counts indicating that the body of the loop (lines 21-52) executes 100,000 times in the slow run. Within this loop:
   - **Line 38 (`while` loop)**: With 10,100,000 hit counts, this indicates heavy processing within the random selection logic.
   - **Lines 41-46 (Binary search logic)**: These lines are hit many times (25,001,052 hits for Line 41), pointing to expensive operations possibly due to repeated binary search operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are performance-characterizing invariants:

1. **Union-Find Operations**: "If the number of vertices `n` is large (close to the upper limit of 100,000) and most edges have weight 0 (i.e., `m` is small or zero), the computation of the minimum spanning tree becomes expensive due to excessive Union-Find operations. This is particularly due to the high number of find operations with deep path compressions."

2. **Large Loops with Random Selection**: "When `n` is large, the loop iterating over vertices performs numerous operations, including random selection from potentially large ranges. This can cause a performance slowdown due to the repeated sorting and binary search operations within these loops."

3. **Sparse Graphs**: "In sparse graphs where the number of edges with weight 1 (`m`) is very low compared to the possible number of edges in a complete graph, the algorithm may perform unnecessary operations over zero-weight edges. This inefficiency becomes noticeable as `n` approaches 100,000."

By focusing on these conditions, we can predict scenarios that are likely to lead to performance degradation, helping guide optimizations or input filtering strategies in future uses of the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, here is the C++ code that checks these conditions at runtime:

```cpp
void check_union_find_invariant(int n, int m, int numFindCalls) {
    // Invariant: If n is large and m is very small, Union-Find operations may be excessive
    if (n > 50000 && m < 1000 && numFindCalls > 10000000) {
        cerr << "Warning: Union-Find performance bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_loop_invariant(int n, size_t totalConnections) {
    // Invariant: Heavy processing in loops due to random selection in large graphs
    if (n > 50000 && totalConnections > 100000000) {
        cerr << "Warning: Loop performance bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_sparse_graph_invariant(int n, int m) {
    // Invariant: Sparse graph with mostly zero-weight edges may cause inefficiency
    if (n > 50000 && m < n / 10) {
        cerr << "Warning: Sparse graph performance inefficiency condition triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Here's how the checks can be integrated into the main C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> adj[100005];
int par[100005];

int fnd(int u) {
    return par[u] = par[u] == u ? u : fnd(par[u]);
}

void unn(int u, int v) {
    u = fnd(u), v = fnd(v);
    par[u] = v;
}

void check_union_find_invariant(int n, int m, int numFindCalls) {
    if (n > 50000 && m < 1000 && numFindCalls > 10000000) {
        cerr << "Warning: Union-Find performance bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_loop_invariant(int n, size_t totalConnections) {
    if (n > 50000 && totalConnections > 100000000) {
        cerr << "Warning: Loop performance bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_sparse_graph_invariant(int n, int m) {
    if (n > 50000 && m < n / 10) {
        cerr << "Warning: Sparse graph performance inefficiency condition triggered!" << endl;
        abort();
    }
}

int main() {
    srand(time(0));
    scanf("%d%d", &n, &m);
    iota(par, par + n + 1, 0);
    for (int a, b, i = 0; i < m; i++) {
        scanf("%d%d", &a, &b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    int numFindCalls = 0;
    size_t totalConnections = 0;

    for (int i = 1; i <= n; i++) {
        vector<int> conn;
        adj[i].push_back(0);
        adj[i].push_back(i);
        adj[i].push_back(n + 1);
        sort(adj[i].begin(), adj[i].end());

        if (n - adj[i].size() + 2 <= 100) {
            int nt = 1;
            for (int j : adj[i]) {
                while (nt < j) conn.push_back(nt++);
                if (nt == j) nt++;
            }
        } else {
            vector<pair<int, int>> rngs;
            for (int j = 1; j < adj[i].size(); j++)
                if (adj[i][j] - adj[i][j - 1] > 1)
                    rngs.push_back({adj[i][j] - adj[i][j - 1] - 1, adj[i][j - 1] + 1});
            for (int j = 1; j < rngs.size(); j++) rngs[j].first += rngs[j - 1].first;
            while (conn.size() < min(100, n - 1)) {
                int tk = rand() % rngs.back().first + 1;
                int st = 0, en = rngs.size() - 1, mid;
                while (st <= en) {
                    mid = (st + en) >> 1;
                    if (rngs[mid].first < tk)
                        st = mid + 1;
                    else
                        en = mid - 1;
                }
                int ad = tk - (st ? rngs[st - 1].first : 0) + rngs[st].second - 1;
                conn.push_back(ad);
            }
        }
        totalConnections += conn.size();
        for (int j : conn) {
            unn(i, j);
            numFindCalls++;
        }
    }

    check_union_find_invariant(n, m, numFindCalls);
    check_loop_invariant(n, totalConnections);
    check_sparse_graph_invariant(n, m);

    int ans = -1;
    for (int i = 1; i <= n; i++) ans += (i == fnd(i));
    printf("%d\n", ans);
}
```

### Explanation of Code Placement:
- **Union-Find Check**: Placed after the loop to monitor the number of `find` operations.
- **Loop Check**: Evaluates total connections processed, placed outside the loop to avoid overhead.
- **Sparse Graph Check**: Placed after reading inputs to ensure immediate detection of inefficient sparse graph scenarios.

