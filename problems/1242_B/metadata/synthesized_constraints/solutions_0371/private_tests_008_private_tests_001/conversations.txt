system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int IT_MAX = 1 << 17;
int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const long long LL_INF = 0x0f3f3f3f3f3f3f3f;
const double PI = acos(-1);
const double ERR = 1e-10;
long long mod(long long a, long long m) {
  return (a + (abs(a) / m) * m + m) % m;
}
int main() {
  ios_base::sync_with_stdio(false);
  cout.tie(0);
  cin.tie(0);
  long long n, m;
  cin >> n >> m;
  vector<unordered_set<long long>> gr(n);
  for (int i = 0; i < m; ++i) {
    long long a, b;
    cin >> a >> b;
    --a;
    --b;
    gr[a].insert(b);
    gr[b].insert(a);
  }
  vector<long long> to(n);
  unordered_set<long long> ver;
  ver.reserve(1024);
  ver.max_load_factor(0.25);
  long long ans = 0;
  unordered_set<long long> q;
  q.reserve(1024);
  q.max_load_factor(0.25);
  q.insert(0);
  unordered_set<long long> not_used;
  not_used.reserve(1024);
  not_used.max_load_factor(0.25);
  for (int i = 0; i < n; ++i) {
    not_used.insert(i);
  }
  not_used.erase(0);
  while (ver.size() != n) {
    long long cur_ver = *q.begin();
    q.erase(cur_ver);
    ver.insert(cur_ver);
    vector<long long> to_er;
    for (auto i : not_used) {
      if (ver.count(i) == 0) {
        if (gr[cur_ver].count(i)) {
          to[i]++;
        }
        if (to[i] != ver.size()) {
          to_er.push_back(i);
          q.insert(i);
        }
      }
    }
    for (auto i : to_er) {
      not_used.erase(i);
    }
    if (q.size() == 0 && ver.size() != n) {
      long long a = *not_used.begin();
      q.insert(a);
      not_used.erase(a);
      ++ans;
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int IT_MAX = 1 << 17; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int MOD = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long LL_INF = 0x0f3f3f3f3f3f3f3f; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const double ERR = 1e-10; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long mod(long long a, long long m) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return (a + (abs(a) / m) * m + m) % m; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<unordered_set<long long>> gr(n); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < m; ++i) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    long long a, b; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    --a; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    --b; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    gr[a].insert(b); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    gr[b].insert(a); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> to(n); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  unordered_set<long long> ver; /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
  ver.reserve(1024); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  ver.max_load_factor(0.25); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_set<long long> q; /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  q.reserve(1024); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  q.max_load_factor(0.25); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  q.insert(0); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_set<long long> not_used; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  not_used.reserve(1024); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  not_used.max_load_factor(0.25); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 39 slow_hit_count: 100001, fast_hit_count: 2 */
    not_used.insert(i); /* line 40 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  not_used.erase(0); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  while (ver.size() != n) { /* line 43 slow_hit_count: 100001, fast_hit_count: 2 */
    long long cur_ver = *q.begin(); /* line 44 slow_hit_count: 100000, fast_hit_count: 1 */
    q.erase(cur_ver); /* line 45 slow_hit_count: 100000, fast_hit_count: 1 */
    ver.insert(cur_ver); /* line 46 slow_hit_count: 100000, fast_hit_count: 1 */
    vector<long long> to_er; /* line 47 slow_hit_count: 200000, fast_hit_count: 2 */
    for (auto i : not_used) { /* line 48 slow_hit_count: 199999, fast_hit_count: 1 */
      if (ver.count(i) == 0) { /* line 49 slow_hit_count: 99999, fast_hit_count: 0 */
        if (gr[cur_ver].count(i)) { /* line 50 slow_hit_count: 99999, fast_hit_count: 0 */
          to[i]++; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        if (to[i] != ver.size()) { /* line 53 slow_hit_count: 99999, fast_hit_count: 0 */
          to_er.push_back(i); /* line 54 slow_hit_count: 99999, fast_hit_count: 0 */
          q.insert(i); /* line 55 slow_hit_count: 99999, fast_hit_count: 0 */
        } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto i : to_er) { /* line 59 slow_hit_count: 199999, fast_hit_count: 1 */
      not_used.erase(i); /* line 60 slow_hit_count: 99999, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (q.size() == 0 && ver.size() != n) { /* line 62 slow_hit_count: 100000, fast_hit_count: 1 */
      long long a = *not_used.begin(); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      q.insert(a); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      not_used.erase(a); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      ++ans; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, the following lines are hit significantly more often in the slow input compared to the fast input:

1. **Line 39-40:** The construction of the `not_used` set with 100,000 elements.
2. **Line 43:** The `while` loop condition `ver.size() != n`, which runs 100,001 times.
3. **Line 44-46:** The maintenance of the `q` and `ver` sets.
4. **Line 48-48:** The `for` loop iterating over `not_used` within the `while` loop.
5. **Lines 49-55:** The conditional checks and set operations within the `for` loop.
6. **Line 59-60:** The `for` loop iterating over `to_er` for erasing elements from `not_used`.

The bottleneck appears to be the repeated iterations over potentially large sets (`not_used` and `to_er`) and the frequent insertions and erasures in unordered sets, which can become costly with large sizes.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language performance invariants that describe when the code encounters slow execution paths:

1. **Invariant: Large Graph with No Weighted Edges**
   - **Description:** When the number of vertices `n` is large and the number of weighted edges `m` is zero, the code performs extensive unnecessary iterations over all vertices because every edge is implicitly weight zero. This leads to a large number of operations for constructing the spanning tree.
   - **Condition:** The program is likely to slow down significantly with large values of `n` and `m` being zero, as the algorithm will needlessly visit all vertices in an attempt to form a minimum spanning tree.

2. **Invariant: Many Iterations Over Unused Vertices**
   - **Description:** If the set of unused vertices (`not_used`) becomes large and each vertex needs to be processed in a loop, the operations on this set can become a bottleneck due to frequent insertions, deletions, and membership checks.
   - **Condition:** Performance may degrade when the set of unused vertices is close to the total number of vertices, particularly when each membership check and operation on this set is repeated for every vertex.

3. **Invariant: Inefficient Handling of Vertex Connections**
   - **Description:** The frequent checks to see if vertex pairs are connected by a weighted edge become expensive with no weighted edges or with the majority of the graph being described by zero-weight edges. 
   - **Condition:** The number of operations grows when there are very few or no edges with weight 1, thus requiring many iterations to establish connections between all vertices.

These invariants highlight scenarios where the algorithm unnecessarily processes every vertex and edge in the graph, leading to performance degradation despite not contributing meaningful data for the minimum spanning tree calculation. Addressing these will help optimize the program for large input sizes and edge cases where `m` is zero.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Runtime Checks

For each natural language invariant identified, we will create a C++ function to check the condition at runtime. 

#### Invariant 1: Large Graph with No Weighted Edges
- **Description:** Detects if the graph is large with `n` vertices and `m` is zero.
- **Code:**
  ```cpp
  void check_no_edges_invariant(long long n, long long m) {
      if (n > 10000 && m == 0) {  // Example threshold for large n
          cerr << "Warning: Performance bottleneck condition triggered - large graph with no weighted edges" << endl;
          abort();
      }
  }
  ```

#### Invariant 2: Many Iterations Over Unused Vertices
- **Description:** Detects when `not_used` set is large, indicating potential inefficiency.
- **Code:**
  ```cpp
  void check_not_used_invariant(size_t notUsedSize, long long n) {
      if (notUsedSize > n / 2) {  // A large portion of the vertices are unused
          cerr << "Warning: Performance bottleneck condition triggered - many unused vertices" << endl;
          abort();
      }
  }
  ```

#### Invariant 3: Inefficient Handling of Vertex Connections
- **Description:** Detects inefficiency when there are few or no edges with weight 1.
- **Code:**
  ```cpp
  void check_vertex_connection_invariant(long long numWeightedEdges, long long n) {
      if (numWeightedEdges < n / 100) {  // Few weighted edges compared to the size of the graph
          cerr << "Warning: Performance bottleneck condition triggered - inefficient vertex connections" << endl;
          abort();
      }
  }
  ```

### Phase 4: Integrate Checkers into Original C++ Program

Now, we integrate these checks into the original C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;

int IT_MAX = 1 << 17;
int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const long long LL_INF = 0x0f3f3f3f3f3f3f3f;
const double PI = acos(-1);
const double ERR = 1e-10;

void check_no_edges_invariant(long long n, long long m) {
    if (n > 10000 && m == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - large graph with no weighted edges" << endl;
        abort();
    }
}

void check_not_used_invariant(size_t notUsedSize, long long n) {
    if (notUsedSize > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - many unused vertices" << endl;
        abort();
    }
}

void check_vertex_connection_invariant(long long numWeightedEdges, long long n) {
    if (numWeightedEdges < n / 100) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient vertex connections" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cout.tie(0);
    cin.tie(0);

    long long n, m;
    cin >> n >> m;

    // Check for the first invariant after reading the input
    check_no_edges_invariant(n, m);

    vector<unordered_set<long long>> gr(n);
    for (int i = 0; i < m; ++i) {
        long long a, b;
        cin >> a >> b;
        --a;
        --b;
        gr[a].insert(b);
        gr[b].insert(a);
    }

    vector<long long> to(n);
    unordered_set<long long> ver;
    ver.reserve(1024);
    ver.max_load_factor(0.25);
    long long ans = 0;
    unordered_set<long long> q;
    q.reserve(1024);
    q.max_load_factor(0.25);
    q.insert(0);
    unordered_set<long long> not_used;
    not_used.reserve(1024);
    not_used.max_load_factor(0.25);
    for (int i = 0; i < n; ++i) {
        not_used.insert(i);
    }
    not_used.erase(0);
    
    // Check for the second invariant before entering the while loop
    check_not_used_invariant(not_used.size(), n);
    
    while (ver.size() != n) {
        long long cur_ver = *q.begin();
        q.erase(cur_ver);
        ver.insert(cur_ver);
        vector<long long> to_er;
        for (auto i : not_used) {
            if (ver.count(i) == 0) {
                if (gr[cur_ver].count(i)) {
                    to[i]++;
                }
                if (to[i] != ver.size()) {
                    to_er.push_back(i);
                    q.insert(i);
                }
            }
        }
        for (auto i : to_er) {
            not_used.erase(i);
        }
        if (q.size() == 0 && ver.size() != n) {
            long long a = *not_used.begin();
            q.insert(a);
            not_used.erase(a);
            ++ans;
        }
    }

    // Check for the third invariant after processing
    check_vertex_connection_invariant(m, n);

    cout << ans;
    return 0;
}
```

### Explanation:

1. **Check Insertion:** The `check_no_edges_invariant` is placed right after reading inputs. The `check_not_used_invariant` is placed before the while loop starts, and `check_vertex_connection_invariant` is checked after processing the graph to catch conditions leading to inefficiency.
2. **Placement:** These checks are placed outside tight loops to avoid overhead, ensuring they don't degrade performance further.
3. **Thresholds:** The thresholds are chosen to reflect conditions where performance issues are likely to occur, given the constraints and observed behaviors.

