system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const unsigned long long int INF = 10e8;
struct pt {
  double x;
  double y;
};
vector<unsigned long long int> dp;
unsigned long long int f(pt t) {
  int x = (int)t.x;
  int y = (int)t.y;
  unsigned long long int res(0);
  unsigned long long int st(0);
  for (int i(0); i <= y; i++) {
    res += dp[x] + (x + 1) * st;
    st++;
  }
  return res;
}
bool solve() {
  double m, b;
  cin >> m >> b;
  pt ox, oy;
  ox.x = b * m;
  ox.y = 0;
  oy.x = 0;
  oy.y = b;
  dp.resize(ox.x + 1);
  unsigned long long int cr(0);
  for (int i(0); i < dp.size(); i++) {
    cr += i;
    dp[i] = cr;
  }
  pt tmp;
  unsigned long long int ans(0);
  for (int i(0); i <= b; i++) {
    tmp.x = (b - i) * m;
    tmp.y = i;
    ans = max(ans, f(tmp));
  }
  cout << ans;
  return 1;
}
int main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 9252


(G.2) Fast Input

4 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const unsigned long long int INF = 10e8; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct pt { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  double x; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  double y; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<unsigned long long int> dp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long int f(pt t) { /* line 9 slow_hit_count: 9253, fast_hit_count: 3 */
  int x = (int)t.x; /* line 10 slow_hit_count: 9253, fast_hit_count: 3 */
  int y = (int)t.y; /* line 11 slow_hit_count: 9253, fast_hit_count: 3 */
  unsigned long long int res(0); /* line 12 slow_hit_count: 9253, fast_hit_count: 3 */
  unsigned long long int st(0); /* line 13 slow_hit_count: 9253, fast_hit_count: 3 */
  for (int i(0); i <= y; i++) { /* line 14 slow_hit_count: 42822884, fast_hit_count: 9 */
    res += dp[x] + (x + 1) * st; /* line 15 slow_hit_count: 42813631, fast_hit_count: 6 */
    st++; /* line 16 slow_hit_count: 42813631, fast_hit_count: 6 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 18 slow_hit_count: 9253, fast_hit_count: 3 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
bool solve() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  double m, b; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> b; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  pt ox, oy; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  ox.x = b * m; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  ox.y = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  oy.x = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  oy.y = b; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  dp.resize(ox.x + 1); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long int cr(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i(0); i < dp.size(); i++) { /* line 30 slow_hit_count: 37010, fast_hit_count: 10 */
    cr += i; /* line 31 slow_hit_count: 37009, fast_hit_count: 9 */
    dp[i] = cr; /* line 32 slow_hit_count: 37009, fast_hit_count: 9 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  pt tmp; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  unsigned long long int ans(0); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i(0); i <= b; i++) { /* line 36 slow_hit_count: 9254, fast_hit_count: 4 */
    tmp.x = (b - i) * m; /* line 37 slow_hit_count: 9253, fast_hit_count: 3 */
    tmp.y = i; /* line 38 slow_hit_count: 9253, fast_hit_count: 3 */
    ans = max(ans, f(tmp)); /* line 39 slow_hit_count: 9253, fast_hit_count: 3 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 1; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C code and hit count information, let's identify the expensive or inefficient segments and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis**:
   - The function `f(pt t)` is called significantly more times in the slow run (9253 times) compared to the fast run (3 times). Within this function, the loop on line 14 (over `y`) is the primary contributor to the slowdown.
   - Specifically, lines 14, 15, and 16 within `f(pt t)` have much higher hit counts (up to 42,813,631 times in the slow input) than in the fast input (at most 9 times).

2. **Interaction with Data Structures and Loops**:
   - The loop from line 14 iterates over `y`, where `y` is derived from the input `b` and varies in the range `[0, b]`. This signifies that larger values of `b` lead to significantly more iterations of the loop.
   - The computation `dp[x] + (x + 1) * st` on line 15 is performed multiple times within this loop, contributing heavily to execution time.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Related to the Size of `b`**:
   - **Natural Language Description**: "The performance of the program degrades significantly when the parameter `b` is large because it directly affects the number of iterations in a nested loop, leading to an increased number of computations."
   - **Explanation**: The loop on line 14, which runs from 0 to `y`, is executed once for each `i` in the outer loop (line 36) over `b`. Larger `b` results in larger `y` values, thus longer loops and higher hit counts for the inner operations.

2. **Invariant Related to the Accumulation in Loop**:
   - **Natural Language Description**: "If `b` becomes close to its upper constraint (10,000), the cumulative effect of nested loops over each point (x, y) under the line can lead to excessive computation times."
   - **Explanation**: The combined effect of traversing points `(x, y)` multiple times, especially when `b` reaches higher values, results in a quadratic increase in computation when generating cumulative sums (`dp[x] + (x + 1) * st`).

3. **Invariant Related to Memory Allocation**:
   - **Natural Language Description**: "A larger value of `m * b` leads to the allocation of large vectors, which might increase the setup time, further contributing to slowdowns."
   - **Explanation**: The vector `dp` is resized to `ox.x + 1` which is `b * m + 1`. Larger `b` and `m` values result in larger vectors, which increases both memory usage and initialization time.

### Conclusion

The main performance bottleneck is due to the nested loops influenced by the value of `b`, which results in a significant number of redundant calculations. By understanding these invariants, we can predict the scenarios under which the program's performance will degrade, especially as `b` approaches its upper limit of 10,000, causing a quadratic increase in operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as C++ checks and then integrate those checks into the original program.

### Phase 3: Implement the Natural Language Invariants into C++ Checkers

1. **Checking Large Values of `b`**:
   - We will check if `b` is large enough to likely cause performance issues due to extensive iterations. Since the problem constraints are `1 ≤ b ≤ 10000`, let's use a threshold like 9000 to indicate when `b` is approaching a size that could lead to performance degradation.

```cpp
void check_large_b_invariant(int b) {
    if (b > 9000) { 
        cerr << "Warning: Performance bottleneck condition triggered - large value of b!" << endl;
        abort();
    }
}
```

2. **Checking Vector `dp` Size and Initialization Overhead**:
   - We will check if the size of `dp` (which depends on `m` and `b`) is excessively large, leading to costly initialization. Given `m` can be up to 1000, larger `b` values will result in larger vectors.

```cpp
void check_large_dp_invariant(int m, int b) {
    if (m * b > 9000000) { // This threshold is chosen based on typical memory concerns.
        cerr << "Warning: Performance bottleneck condition triggered - large vector size!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the given C++ program at appropriate places to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

const unsigned long long int INF = 10e8;

struct pt {
    double x;
    double y;
};

vector<unsigned long long int> dp;

unsigned long long int f(pt t) {
    int x = (int)t.x;
    int y = (int)t.y;
    unsigned long long int res(0);
    unsigned long long int st(0);
    for (int i(0); i <= y; i++) {
        res += dp[x] + (x + 1) * st;
        st++;
    }
    return res;
}

void check_large_b_invariant(int b) {
    if (b > 9000) { 
        cerr << "Warning: Performance bottleneck condition triggered - large value of b!" << endl;
        abort();
    }
}

void check_large_dp_invariant(int m, int b) {
    if (m * b > 9000000) { 
        cerr << "Warning: Performance bottleneck condition triggered - large vector size!" << endl;
        abort();
    }
}

bool solve() {
    double m, b;
    cin >> m >> b;

    // Invariant checks
    check_large_b_invariant((int)b);
    check_large_dp_invariant((int)m, (int)b);

    pt ox, oy;
    ox.x = b * m;
    ox.y = 0;
    oy.x = 0;
    oy.y = b;

    dp.resize(ox.x + 1);
    unsigned long long int cr(0);
    for (int i(0); i < dp.size(); i++) {
        cr += i;
        dp[i] = cr;
    }

    pt tmp;
    unsigned long long int ans(0);
    for (int i(0); i <= b; i++) {
        tmp.x = (b - i) * m;
        tmp.y = i;
        ans = max(ans, f(tmp));
    }
    cout << ans;
    return 1;
}

int main() {
    solve();
    return 0;
}
```

### Explanation

- **`check_large_b_invariant` is called immediately after reading `b`**: This checks for large values of `b` that could cause performance issues due to extensive computations and iterations.
- **`check_large_dp_invariant` is invoked after reading `m` and `b`**: This checks if the product `m * b` results in a large vector allocation that could be inefficient in terms of memory usage and initialization time.

These checks are strategically placed to catch potential performance bottlenecks before the program proceeds with heavy computations. They help ensure that the program's performance characteristics are monitored dynamically and warned about during execution if conditions that would lead to slowdowns are detected.

