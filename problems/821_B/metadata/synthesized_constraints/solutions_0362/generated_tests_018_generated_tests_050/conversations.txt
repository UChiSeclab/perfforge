system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gauss(long long n) {
  if (n % 2 == 0)
    return n / 2 * (n + 1);
  else
    return n * (n + 1) / 2;
}
long long cb(int x, int y) { return (x + 1) * gauss(y) + (y + 1) * gauss(x); }
int main() {
  long long m, b;
  cin >> m >> b;
  long long X = m * b;
  long long res = 0;
  for (int i = 0; i <= X; i++) {
    int y = floor(((double)i / m) * (-1) + b);
    res = max(res, cb(i, y));
  }
  cout << res << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1061 8096


(G.2) Fast Input

11 8096


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gauss(long long n) { /* line 3 slow_hit_count: 17179714, fast_hit_count: 178114 */
  if (n % 2 == 0) /* line 4 slow_hit_count: 17179714, fast_hit_count: 178114 */
    return n / 2 * (n + 1); /* line 5 slow_hit_count: 8589858, fast_hit_count: 89058 */
  else /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    return n * (n + 1) / 2; /* line 7 slow_hit_count: 8589856, fast_hit_count: 89056 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long cb(int x, int y) { return (x + 1) * gauss(y) + (y + 1) * gauss(x); } /* line 9 slow_hit_count: 8589857, fast_hit_count: 89057 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  long long m, b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> b; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  long long X = m * b; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= X; i++) { /* line 15 slow_hit_count: 8589858, fast_hit_count: 89058 */
    int y = floor(((double)i / m) * (-1) + b); /* line 16 slow_hit_count: 8589857, fast_hit_count: 89057 */
    res = max(res, cb(i, y)); /* line 17 slow_hit_count: 8589857, fast_hit_count: 89057 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The lines inside the loop (lines 15-17) are hit significantly more times for the slow input compared to the fast input.
   - Specifically, the function `gauss` (lines 3-7) is called extensively during both runs, but much more frequently for the slow input.

2. **Pinpoint Inefficient Lines**:
   - Line 15, which runs the loop, is a major contributor to inefficiency due to its dependency on the value of `X = m * b`. This value is substantial in the slow input (1061 * 8096), leading to many iterations.
   - The function `cb`, called on line 17, includes two calls to `gauss`, leading to further computational overhead.

3. **Interaction with Data Structures and Input Constraints**:
   - No complex data structures are involved, but the computation is heavily reliant on the loop bound `X`.
   - The loop iterates up to `X = m * b`, which makes the performance highly sensitive to the values of `m` and `b`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant #1**: **Large Loop Iteration Count**
   - **Natural Language Description**: "When the product of `m` and `b` is large, resulting in a high number of loop iterations, the program's performance will degrade significantly. The execution time increases as the loop runs a number of times directly proportional to `m * b`."
   
2. **Invariant #2**: **Frequent Computation in Loop**
   - **Natural Language Description**: "If the loop frequently calls computational functions such as `gauss`, especially with large integer values, performance can degrade due to repeated calculations over a large range of values."
   
3. **Invariant #3**: **High Arithmetic Overhead**
   - **Natural Language Description**: "When arithmetic operations involving division and floor operations are repeated within a loop that runs for a large number of iterations, the cumulative computational cost may slow down the execution."

### Thresholds and Conditions
- **Choice of Thresholds**: Since `m` and `b` can each be as large as 10000, `m * b` can reach values up to 100,000,000. The key performance factor is the magnitude of `m * b`; a threshold that considers values where this product approaches higher limits within constraints should help identify slow scenarios.

### Summary
The program slows down considerably when:
- The product `m * b` is large, causing the main loop to iterate many times.
- Expensive computations like Gaussian summations are frequently repeated for large input values within this loop.
- Arithmetic operations inside the loop add additional processing overhead. 

By understanding these conditions, future slowdowns can be anticipated and analyzed for scenarios where `m` and `b` are at the upper limits within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Invariants in C++

We will create checker functions based on the performance-characterizing invariants derived earlier:

1. **Invariant #1: Large Loop Iteration Count**
   ```cpp
   void check_large_iteration_invariant(long long m, long long b) {
       if (m * b > 1000000) { // Arbitrary threshold chosen based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - large loop iteration count!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Frequent Computation in Loop**
   ```cpp
   void check_frequent_computation_invariant(long long X) {
       if (X > 1000000) { // Threshold indicating many calls to the expensive function
           cerr << "Warning: Performance bottleneck condition triggered - frequent computations in loop!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: High Arithmetic Overhead**
   ```cpp
   // This invariant is a bit abstract to check directly, but you can infer it from frequent computation checks
   void check_high_arithmetic_overhead_invariant(long long X) {
       if (X > 1000000) { // Use similar threshold indicating potential arithmetic overhead
           cerr << "Warning: Performance bottleneck condition triggered - high arithmetic overhead!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance invariant checkers
void check_large_iteration_invariant(long long m, long long b) {
    if (m * b > 1000000) { // Arbitrary threshold chosen based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - large loop iteration count!" << endl;
        abort();
    }
}

void check_frequent_computation_invariant(long long X) {
    if (X > 1000000) { // Threshold indicating many calls to the expensive function
        cerr << "Warning: Performance bottleneck condition triggered - frequent computations in loop!" << endl;
        abort();
    }
}

void check_high_arithmetic_overhead_invariant(long long X) {
    if (X > 1000000) { // Use similar threshold indicating potential arithmetic overhead
        cerr << "Warning: Performance bottleneck condition triggered - high arithmetic overhead!" << endl;
        abort();
    }
}

long long gauss(long long n) {
  if (n % 2 == 0)
    return n / 2 * (n + 1);
  else
    return n * (n + 1) / 2;
}

long long cb(int x, int y) { 
    return (x + 1) * gauss(y) + (y + 1) * gauss(x); 
}

int main() {
  long long m, b;
  cin >> m >> b;

  // Insert check for large iteration count
  check_large_iteration_invariant(m, b);

  long long X = m * b;
  long long res = 0;

  // Insert check for frequent computation in loop and high arithmetic overhead
  check_frequent_computation_invariant(X);
  check_high_arithmetic_overhead_invariant(X);

  for (int i = 0; i <= X; i++) {
    int y = floor(((double)i / m) * (-1) + b);
    res = max(res, cb(i, y));
  }
  
  cout << res << endl;
}
```

### Explanation

- **Checker Placement**: The checkers are placed after reading the input and before entering the loop to ensure they do not interfere with the main computation but still catch potentially slow conditions.
- **Threshold**: We used an arbitrary threshold of `1000000` for `m * b` and `X` to signal potential performance bottlenecks. This threshold can be adjusted based on further profiling or testing.
- **Abort on Trigger**: Each checker outputs a warning and then aborts execution to highlight the performance issue, simulating a mechanism useful for fuzzing or debugging.

