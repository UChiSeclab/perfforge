system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  long long m, b;
  long long ans = 0;
  cin >> m >> b;
  for (long long i = 0; i <= m * b; i++) {
    long long maxx = floor(-i * 1.0 / m) + b;
    ans = max(ans,
              (maxx + 1) * i * (i + 1) / 2 + maxx * (maxx + 1) * (i + 1) / 2);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1061 8096


(G.2) Fast Input

11 8096


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long m, b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> b; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i <= m * b; i++) { /* line 8 slow_hit_count: 8589858, fast_hit_count: 89058 */
    long long maxx = floor(-i * 1.0 / m) + b; /* line 9 slow_hit_count: 8589857, fast_hit_count: 89057 */
    ans = max(ans, /* line 10 slow_hit_count: 8589857, fast_hit_count: 89057 */
              (maxx + 1) * i * (i + 1) / 2 + maxx * (maxx + 1) * (i + 1) / 2); /* line 11 slow_hit_count: 8589857, fast_hit_count: 89057 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the problem statement, provided C program, inputs, and hit counts, let's analyze the potential causes of slowdown and derive performance-characterizing invariants.

### Phase 1: Analyze the Expensive Code Segments

**Analysis:**
1. **Line-Level Hit Counts:**
   - The `for` loop (line 8) is executed significantly more times for the slow input (`8589858` times) compared to the fast input (`89058` times). 
   - The lines inside the loop (lines 9-11) are hit almost as many times as the loop itself, indicating each iteration involves these calculations.

2. **Loop Condition:**
   - The loop iterates from `0` to `m * b`. The slow input is `m = 1061, b = 8096`, making `m * b = 8589856`, while for the fast input `m = 11, b = 8096`, making `m * b = 89056`.
   - The number of iterations directly scales with `m * b`, suggesting a computational complexity roughly proportional to `m * b`.

3. **Expensive Operations:**
   - Each iteration computes `floor(-i * 1.0 / m) + b` and performs arithmetic operations to update `ans`. The operations inside the loop are not particularly expensive in isolation, but the sheer number of iterations causes slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

**Performance Invariants:**

1. **Invariant 1: Large `m` and `b` Product**
   - Natural language description: "If the product of `m` and `b` is large, the loop iterates excessively, causing a slowdown. Performance degrades significantly as `m * b` approaches its upper bounds."
   - This invariant is based on the observation that the loop condition `i <= m * b` leads to an extensive number of iterations when `m * b` is large.

2. **Invariant 2: High Iteration Count**
   - Natural language description: "When the number of iterations (`m * b`) becomes very large, particularly close to the maximum possible value, the computations within the loop add significant overhead, slowing down execution."
   - Here, the focus is on the computational overhead incurred by the large number of loop iterations, even if each individual computation is not too costly.

3. **Invariant 3: Loop Computation**
   - Natural language description: "The computations involving combinations of `i` and `maxx` within each loop iteration accumulate significant processing time when `i` spans a large range, particularly when the range determined by `m * b` is maximal."
   - The operations in the loop involve arithmetic progressions and large number operations, which although efficient per iteration, become costly over extensive iterations.

**Conclusion:**
The primary performance issue arises from the number of iterations driven by the product `m * b`. The program is efficient in its computations per loop iteration, but the iteration count can grow large, causing the program to slow down. These invariants help explain the conditions that lead to slower execution and provide insight into potential modifications to better handle large input ranges.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Invariants

In this phase, I'm implementing the checker code based on the performance-characterizing invariants derived in Phase 2.

1. **Invariant 1: Large `m` and `b` Product**
   - **Natural language description:** "If the product of `m` and `b` is large, the loop iterates excessively, causing a slowdown."
   - **Checker Code:**

   ```cpp
   void check_mb_product_invariant(long long m, long long b) {
       if (m * b > 1000000) { // Example threshold based on problem constraints
           cerr << "Warning: Performance bottleneck due to large m * b product!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: High Iteration Count**
   - **Natural language description:** "When the number of iterations (`m * b`) becomes very large, the computations within the loop add significant overhead."
   - **Checker Code:**

   ```cpp
   void check_iteration_count_invariant(long long iteration_count) {
       if (iteration_count > 1000000) { // Example threshold to indicate excessive iterations
           cerr << "Warning: Performance bottleneck due to high iteration count!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Loop Computation**
   - **Natural language description:** "The computations involving combinations of `i` and `maxx` within each loop iteration accumulate significant processing time."
   - **Checker Code:**

   ```cpp
   void check_loop_computation_invariant(long long m, long long b) {
       if (m * b > 1000000) { // Same threshold can apply due to overlapping conditions
           cerr << "Warning: Performance bottleneck due to extensive loop computation!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into Original Program

Now, I will integrate the checker code into the original C++ program for effective performance monitoring.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check the invariant for large m * b product
void check_mb_product_invariant(long long m, long long b) {
    if (m * b > 1000000) { // Threshold based on problem constraints
        cerr << "Warning: Performance bottleneck due to large m * b product!" << endl;
        abort();
    }
}

// Function to check the invariant for high iteration count
void check_iteration_count_invariant(long long iteration_count) {
    if (iteration_count > 1000000) { // Threshold to indicate excessive iterations
        cerr << "Warning: Performance bottleneck due to high iteration count!" << endl;
        abort();
    }
}

// Function to check the invariant for extensive loop computation
void check_loop_computation_invariant(long long m, long long b) {
    if (m * b > 1000000) { // Threshold for overlapping conditions
        cerr << "Warning: Performance bottleneck due to extensive loop computation!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    long long m, b;
    long long ans = 0;
    cin >> m >> b;

    // Insert runtime checks before entering the loop
    check_mb_product_invariant(m, b);
    check_iteration_count_invariant(m * b);
    check_loop_computation_invariant(m, b);

    for (long long i = 0; i <= m * b; i++) {
        long long maxx = floor(-i * 1.0 / m) + b;
        ans = max(ans,
                  (maxx + 1) * i * (i + 1) / 2 + maxx * (maxx + 1) * (i + 1) / 2);
    }
    cout << ans << endl;
    return 0;
}
```

**Explanation:**
- **Check Placement:** The checks are placed before the loop starts to ensure they don't add overhead within the loop itself.
- **Thresholds:** The thresholds for the checks (e.g., `1000000`) are set based on potential constraints and the goal of identifying performance bottlenecks.
- **Abort Function:** If any performance bottleneck condition is triggered, the program will print a warning and abort execution, making it suitable for use with fuzzers.

