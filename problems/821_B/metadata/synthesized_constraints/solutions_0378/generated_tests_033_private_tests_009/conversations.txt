system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long int m, b, i, j;
  cin >> m >> b;
  long long int max = 0, ans = 0;
  for (i = 0; i <= (m * b); i = i + m) {
    ans = 0;
    long long int y = ((-i) / m) + b;
    for (j = 0; j <= y; j++) {
      ans += (i * (i + 1)) / 2;
      ans += j * (i + 1);
    }
    if (ans > max) {
      max = ans;
    }
  }
  cout << max << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 9252


(G.2) Fast Input

4 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long int m, b, i, j; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> b; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long int max = 0, ans = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= (m * b); i = i + m) { /* line 7 slow_hit_count: 9254, fast_hit_count: 8 */
    ans = 0; /* line 8 slow_hit_count: 9253, fast_hit_count: 7 */
    long long int y = ((-i) / m) + b; /* line 9 slow_hit_count: 9253, fast_hit_count: 7 */
    for (j = 0; j <= y; j++) { /* line 10 slow_hit_count: 42822884, fast_hit_count: 35 */
      ans += (i * (i + 1)) / 2; /* line 11 slow_hit_count: 42813631, fast_hit_count: 28 */
      ans += j * (i + 1); /* line 12 slow_hit_count: 42813631, fast_hit_count: 28 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans > max) { /* line 14 slow_hit_count: 9253, fast_hit_count: 7 */
      max = ans; /* line 15 slow_hit_count: 5764, fast_hit_count: 5 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max << endl; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The outer loop (`for (i = 0; i <= (m * b); i = i + m)`) iterates significantly more times in the slow input (9254 times) compared to the fast input (8 times).
   - The inner loop (`for (j = 0; j <= y; j++)`) is particularly notable, being executed 42,822,884 times for the slow input versus just 35 times for the fast input.
   - Lines 11 and 12, which compute portions of `ans`, are hit a similar number of times to the inner loop, indicating that these operations are repeated quite often.

2. **Analysis of Iteration and Computation:**
   - The outer loop range depends on `m * b`, which is significantly larger for the slow input.
   - The inner loop iterates over `y` times, where `y = ((-i) / m) + b`. The value `y` can be large, leading to a high number of iterations in the inner loop.
   - The operations inside the inner loop involve arithmetic summations that are repeatedly calculated, leading to performance bottlenecks for large values of `m * b`.

3. **Interacting with Data Structures:**
   - There are no complex data structures in use, but the computation involves summing arithmetic sequences, both for `i` and `j`. The number of arithmetic operations scales with the values of `m` and `b`.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Invariant: Large Outer Loop Iterations**
   - "If the product of `m` and `b` is large, the outer loop iterates many times, leading to potential slow execution. This is because the loop condition `i <= (m * b)` heavily depends on `m` and `b`, and hence when both have relatively high values, the loop scales up."

2. **Invariant: Nested Loop with High Iteration Count**
   - "When `b` is significantly larger than `m`, the nested loop (controlled by `j <= y`) results in many iterations, particularly because `y = ((-i) / m) + b` can have high values for small `i`. This can lead to a substantial number of arithmetic operations being performed for moderate values of `m` and large values of `b`."

3. **Invariant: Arithmetic Operations Overhead**
   - "The inner loop performs repeated arithmetic operations, which can degrade performance if `y` is large. High values of `y`, generated by larger values of `b`, result in numerous summations for each iteration of `i`, causing cumulative computational overhead."

4. **Invariant: Dependency on Linear Constraint**
   - "The performance is impacted by the linear constraint implied by the line in the 2D plane. The extent to which points are evaluated (on or under the line) can result in quadratic-like growth in computation based on the input values, particularly when `b` dominates the line's equation, leading to expansive coverage on the plane."

These invariants help recognize conditions leading to slow program execution and can guide optimizations or alternative approaches for handling large input values within specified constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Checkers

Here are the C++ code snippets for the performance-characterizing invariants inferred previously:

1. **Checker for Large Outer Loop Iterations:**
   ```cpp
   void check_outer_loop_invariant(long long m, long long b) {
       if (m * b > 10000) {  // Arbitrary threshold considering m (max 1000) and b (max 10000)
           cerr << "Warning: Performance bottleneck condition triggered - large outer loop iterations!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Nested Loop with High Iteration Count:**
   ```cpp
   void check_inner_loop_invariant(long long i, long long m, long long b) {
       long long y = ((-i) / m) + b;
       if (y > 1000) {  // Arbitrary threshold to detect high iterations in inner loop
           cerr << "Warning: Performance bottleneck condition triggered - high inner loop iterations!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Arithmetic Operations Overhead:**
   ```cpp
   void check_arithmetic_invariant(long long m, long long b) {
       if (m * b > 5000) {  // Arbitrary threshold considering potential arithmetic overhead
           cerr << "Warning: Performance bottleneck condition triggered - high arithmetic operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers with the Program

Here's the instrumented C++ program with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large outer loop iterations
void check_outer_loop_invariant(long long m, long long b) {
    if (m * b > 10000) {  // Arbitrary threshold considering maximum input constraints
        cerr << "Warning: Performance bottleneck condition triggered - large outer loop iterations!" << endl;
        abort();
    }
}

// Checker for nested loop with high iteration count
void check_inner_loop_invariant(long long i, long long m, long long b) {
    long long y = ((-i) / m) + b;
    if (y > 1000) {  // Arbitrary threshold to detect high iterations in inner loop
        cerr << "Warning: Performance bottleneck condition triggered - high inner loop iterations!" << endl;
        abort();
    }
}

// Checker for arithmetic operations overhead
void check_arithmetic_invariant(long long m, long long b) {
    if (m * b > 5000) {  // Arbitrary threshold considering potential arithmetic overhead
        cerr << "Warning: Performance bottleneck condition triggered - high arithmetic operations!" << endl;
        abort();
    }
}

int main() {
    long long int m, b, i, j;
    cin >> m >> b;

    // Check for performance bottlenecks based on the input parameters
    check_outer_loop_invariant(m, b);
    check_arithmetic_invariant(m, b);

    long long int max = 0, ans = 0;
    for (i = 0; i <= (m * b); i = i + m) {
        ans = 0;
        long long int y = ((-i) / m) + b;

        // Check each iteration of the outer loop for potential inner loop bottlenecks
        check_inner_loop_invariant(i, m, b);

        for (j = 0; j <= y; j++) {
            ans += (i * (i + 1)) / 2;
            ans += j * (i + 1);
        }
        if (ans > max) {
            max = ans;
        }
    }
    cout << max << endl;
    return 0;
}
```

### Explanation:

- **Outer Loop Check:** This check is placed right after reading inputs to ensure that the outer loop does not iterate excessively.
- **Inner Loop Check:** This check is inside the outer loop but before the inner loop starts, ensuring that the inner loop does not iterate too many times for any given outer loop iteration.
- **Arithmetic Operations Check:** This check is also placed after reading inputs, similar to the outer loop check, to prevent arithmetic overhead from large calculations early on. 

By integrating these checks, the program will warn and abort if it is likely to encounter a performance bottleneck due to the reasons identified in the natural language invariants.

