system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  unsigned long long b, m, ans, x, tmp, tmp1, kq;
  cin >> m >> b;
  if (b == 1) {
    cout << (m * (m + 1)) / 2;
  } else {
    x = m;
    ans = 0;
    while (true) {
      if (x / m == b) {
        unsigned long long a = ((x * (x + 1)) / 2) % 1000000000000000000;
        ans = max(ans, a);
        ans %= 1000000000000000000;
        break;
      }
      tmp = x;
      tmp1 = b - (tmp / m);
      kq = 0;
      for (int i = tmp1; i >= 0; i--) {
        kq = (kq + (tmp * (tmp + 1)) / 2 + (tmp * i)) % 1000000000000000000;
      }
      kq = (kq + (tmp1 * (tmp1 + 1)) / 2) % 1000000000000000000;
      ans = max(ans, kq);
      ans %= 1000000000000000000;
      x += m;
    }
    cout << (ans + 1000000000000000000) % 1000000000000000000;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 9252


(G.2) Fast Input

4 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long b, m, ans, x, tmp, tmp1, kq; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> b; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  if (b == 1) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    cout << (m * (m + 1)) / 2; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    x = m; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    ans = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    while (true) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      if (x / m == b) { /* line 13 slow_hit_count: 9252, fast_hit_count: 2 */
        unsigned long long a = ((x * (x + 1)) / 2) % 1000000000000000000; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
        ans = max(ans, a); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
        ans %= 1000000000000000000; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      tmp = x; /* line 19 slow_hit_count: 9251, fast_hit_count: 1 */
      tmp1 = b - (tmp / m); /* line 20 slow_hit_count: 9251, fast_hit_count: 1 */
      kq = 0; /* line 21 slow_hit_count: 9251, fast_hit_count: 1 */
      for (int i = tmp1; i >= 0; i--) { /* line 22 slow_hit_count: 42813628, fast_hit_count: 3 */
        kq = (kq + (tmp * (tmp + 1)) / 2 + (tmp * i)) % 1000000000000000000; /* line 23 slow_hit_count: 42804377, fast_hit_count: 2 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      kq = (kq + (tmp1 * (tmp1 + 1)) / 2) % 1000000000000000000; /* line 25 slow_hit_count: 9251, fast_hit_count: 1 */
      ans = max(ans, kq); /* line 26 slow_hit_count: 9251, fast_hit_count: 1 */
      ans %= 1000000000000000000; /* line 27 slow_hit_count: 9251, fast_hit_count: 1 */
      x += m; /* line 28 slow_hit_count: 9251, fast_hit_count: 1 */
    } /* line 29 slow_hit_count: 9251, fast_hit_count: 1 */
    cout << (ans + 1000000000000000000) % 1000000000000000000; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To understand why the given C program runs slowly for the slow input, let's analyze the provided hit count information and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The line within the `while (true)` loop and the nested `for` loop (lines 12-22) receives significantly more hits for the slow input (4,281,3628 hits) compared to the fast input (3 hits).
   - The condition `if (x / m == b)` on line 13 is executed 9,252 times for the slow input compared to 2 times for the fast input.
   - The nested loop (line 22) iterates for each value of `i` from `tmp1` down to 0, causing the bulk of the workload.

2. **Inference about Code Behavior**:
   - The outer loop continues to execute as long as `x / m != b`. This loop appears to increment `x` by `m` in each iteration, and the condition is only satisfied when `x` is exactly `m * b`.
   - The expression `b - (tmp / m)` (line 20) calculates `tmp1`, which directly influences the number of iterations in the nested loop.
   - The nested loop iterates based on the size of `tmp1`, and its high execution count indicates that `tmp1` is large for the slow input, resulting in many repeated calculations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants that describe when the program enters a slow path:

1. **Invariant on Loop Termination**:
   - **Natural Language Description**: "The program may slow down when the value of `b` is large, as the condition `x / m == b` requires many increments of `x` to satisfy, leading to excessive iterations of the outer loop."
   - **Threshold Consideration**: Although `b` is constrained (1 ≤ b ≤ 10,000), higher values of `b` can significantly increase the number of iterations in the outer loop.

2. **Invariant on Nested Loop Iterations**:
   - **Natural Language Description**: "Performance degradation can occur when the calculated value `tmp1` from the expression `b - (tmp / m)` is large, as this leads to numerous iterations of the nested loop, causing increased computation."
   - **Input Pattern Correlation**: This situation arises when the line equation's slope leads to `x` values that climb slowly, making `tmp1` large.

3. **Invariant on Combined Loop Behavior**:
   - **Natural Language Description**: "If the combination of `m` and `b` results in a large number of permissible rectangle configurations, the program may experience slowdowns due to extensive loop execution."
   - **Correlation to Input Patterns**: Inputs are more likely to slow the program when `m` and `b` create a rectangle configuration space larger than typical.

These invariants help identify scenarios that could lead to long execution times, especially when larger values of `b` interact with the loop structure to cause extensive iteration. By focusing on these conditions, future scenarios of slow performance can be detected and mitigated.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.

Consider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation <image>. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.

Help Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.

Okabe is sure that the answer does not exceed 1018. You can trust him.

Input

The first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).

Output

Print the maximum number of bananas Okabe can get from the trees he cuts.

Examples

Input

1 5


Output

30


Input

2 3


Output

25

Note

<image>

The graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.

Solution (C++ code):
{solution}


assistant: Below are the C++ code snippets that implement the performance-characterizing invariants derived from Phase 2.

### Phase 3: Implementing the Natural Language Invariants in C++

1. **Invariant on Loop Termination**:
   - **Condition**: The program may slow down when the value of `b` is large, as it requires many increments of `x` to satisfy `x / m == b`.
   - **Checker Code**:
   ```cpp
   void check_large_b_invariant(int b) {
       if (b > 5000) { // Choosing a threshold for large b
           cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Nested Loop Iterations**:
   - **Condition**: Performance degradation can occur when the calculated value `tmp1` from `b - (tmp / m)` is large.
   - **Checker Code**:
   ```cpp
   void check_large_tmp1_invariant(unsigned long long tmp1) {
       if (tmp1 > 5000) { // Choosing a threshold for large tmp1
           cerr << "Warning: Performance bottleneck condition triggered due to large tmp1!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Combined Loop Behavior**:
   - **Condition**: If `m` and `b` create a large rectangle configuration space, performance may slow.
   - **Checker Code**:
   ```cpp
   void check_combined_invariant(int m, int b) {
       if (m * b > 500000) { // Arbitrary threshold for large configuration space
           cerr << "Warning: Performance bottleneck due to large m * b configuration!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Below is the modified C++ program with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Invariant checkers
void check_large_b_invariant(int b) {
    if (b > 5000) { // Choosing a threshold for large b
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

void check_large_tmp1_invariant(unsigned long long tmp1) {
    if (tmp1 > 5000) { // Choosing a threshold for large tmp1
        cerr << "Warning: Performance bottleneck condition triggered due to large tmp1!" << endl;
        abort();
    }
}

void check_combined_invariant(int m, int b) {
    if (m * b > 500000) { // Arbitrary threshold for large configuration space
        cerr << "Warning: Performance bottleneck due to large m * b configuration!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    unsigned long long b, m, ans, x, tmp, tmp1, kq;
    cin >> m >> b;

    // Check invariants based on input
    check_large_b_invariant(b);
    check_combined_invariant(m, b);

    if (b == 1) {
        cout << (m * (m + 1)) / 2;
    } else {
        x = m;
        ans = 0;
        while (true) {
            if (x / m == b) {
                unsigned long long a = ((x * (x + 1)) / 2) % 1000000000000000000;
                ans = max(ans, a);
                ans %= 1000000000000000000;
                break;
            }
            tmp = x;
            tmp1 = b - (tmp / m);

            // Check invariant inside loop
            check_large_tmp1_invariant(tmp1);

            kq = 0;
            for (int i = tmp1; i >= 0; i--) {
                kq = (kq + (tmp * (tmp + 1)) / 2 + (tmp * i)) % 1000000000000000000;
            }
            kq = (kq + (tmp1 * (tmp1 + 1)) / 2) % 1000000000000000000;
            ans = max(ans, kq);
            ans %= 1000000000000000000;
            x += m;
        }
        cout << (ans + 1000000000000000000) % 1000000000000000000;
    }
}
```

### Explanation
- The checks are added before the main computation loop begins to avoid adding overhead in nested loops.
- The `check_large_tmp1_invariant()` is strategically placed to monitor the `tmp1` value before the nested loop begins, which is critical for identifying potential slowdowns.
- These checks ensure that the program aborts when it encounters a scenario that could lead to performance bottlenecks, thus aiding in debugging and optimization efforts.

