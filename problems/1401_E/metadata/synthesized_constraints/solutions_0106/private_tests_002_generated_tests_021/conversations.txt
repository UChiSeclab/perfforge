system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int bit[1000005];
inline int lowbit(int x) { return x & -x; }
void add(int pos, int val) {
  pos++;
  while (pos < 1000005) {
    bit[pos] += val;
    pos += lowbit(pos);
  }
}
int sum(int pos) {
  pos++;
  int ret = 0;
  while (pos > 0) {
    ret += bit[pos];
    pos -= lowbit(pos);
  }
  return ret;
}
int query(int l, int r) { return sum(r) - (l == 0 ? 0 : sum(l - 1)); }
struct hline {
  int y, l, r;
} arr[100005];
struct vline {
  int x, u, d;
} brr[100005];
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> arr[i].y >> arr[i].l >> arr[i].r;
  for (int i = 1; i <= m; i++) cin >> brr[i].x >> brr[i].u >> brr[i].d;
  sort(arr + 1, arr + 1 + n,
       [=](hline a, hline b) -> bool { return a.y < b.y; });
  sort(brr + 1, brr + 1 + m,
       [=](vline a, vline b) -> bool { return a.u < b.u; });
  int cur1 = 1, cur2 = 1;
  priority_queue<pair<int, int>, vector<pair<int, int> >,
                 greater<pair<int, int> > >
      pq;
  long long ans = 1;
  for (int y = 0; y < 1000000; y++) {
    while (cur2 <= m && brr[cur2].u == y) {
      int x = brr[cur2].x, d = brr[cur2].d;
      add(x, 1);
      pq.push({d, x});
      if (d - y == 1000000) ans++;
      cur2++;
    }
    while (cur1 <= n && arr[cur1].y == y) {
      int l = arr[cur1].l, r = arr[cur1].r;
      ans += query(l, r);
      if (r - l == 1000000) ans++;
      cur1++;
    }
    while (!pq.empty() && pq.top().first == y) {
      int x = pq.top().second;
      pq.pop();
      add(x, -1);
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
500000 1 1000000
500000 0 999999


(G.2) Fast Input

1 1
35925 1 1000000
991542 0 205


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int bit[1000005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline int lowbit(int x) { return x & -x; } /* line 4 slow_hit_count: 35, fast_hit_count: 27 */
void add(int pos, int val) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  pos++; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  while (pos < 1000005) { /* line 7 slow_hit_count: 28, fast_hit_count: 20 */
    bit[pos] += val; /* line 8 slow_hit_count: 26, fast_hit_count: 18 */
    pos += lowbit(pos); /* line 9 slow_hit_count: 26, fast_hit_count: 18 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
int sum(int pos) { /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  pos++; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  int ret = 0; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  while (pos > 0) { /* line 15 slow_hit_count: 11, fast_hit_count: 11 */
    ret += bit[pos]; /* line 16 slow_hit_count: 9, fast_hit_count: 9 */
    pos -= lowbit(pos); /* line 17 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int query(int l, int r) { return sum(r) - (l == 0 ? 0 : sum(l - 1)); } /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
struct hline { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int y, l, r; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} arr[100005]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
struct vline { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int x, u, d; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} brr[100005]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> arr[i].y >> arr[i].l >> arr[i].r; /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= m; i++) cin >> brr[i].x >> brr[i].u >> brr[i].d; /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
  sort(arr + 1, arr + 1 + n, /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
       [=](hline a, hline b) -> bool { return a.y < b.y; }); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  sort(brr + 1, brr + 1 + m, /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
       [=](vline a, vline b) -> bool { return a.u < b.u; }); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  int cur1 = 1, cur2 = 1; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  priority_queue<pair<int, int>, vector<pair<int, int> >, /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
                 greater<pair<int, int> > > /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      pq; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int y = 0; y < 1000000; y++) { /* line 44 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    while (cur2 <= m && brr[cur2].u == y) { /* line 45 slow_hit_count: 1000001, fast_hit_count: 1000001 */
      int x = brr[cur2].x, d = brr[cur2].d; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      add(x, 1); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      pq.push({d, x}); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
      if (d - y == 1000000) ans++; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
      cur2++; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    while (cur1 <= n && arr[cur1].y == y) { /* line 52 slow_hit_count: 1000001, fast_hit_count: 1000001 */
      int l = arr[cur1].l, r = arr[cur1].r; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
      ans += query(l, r); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
      if (r - l == 1000000) ans++; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
      cur1++; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    while (!pq.empty() && pq.top().first == y) { /* line 58 slow_hit_count: 1000001, fast_hit_count: 1000001 */
      int x = pq.top().second; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
      pq.pop(); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
      add(x, -1); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive conditions or invariants that trigger slowdowns in the given C code, let's go through the two phases as requested.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The loop at line 44 (`for (int y = 0; y < 1000000; y++)`) runs for a fixed number of iterations (1,000,000), so its hit count remains constant for both fast and slow inputs.
   - Lines 45, 52, and 58 are `while` loops that interact with the data structures, and their hit counts are also consistently high due to the same loop structure. However, these lines are critical as they encapsulate operations that could be sensitive to input properties.
   - The `add` function (lines 5 to 11) and the `sum` function (lines 12 to 20) have similar hit counts but differ slightly between the slow and fast inputs. This suggests that operations on the Fenwick tree (or Binary Indexed Tree) within these functions may contribute to the slowdown.

2. **Pinpoint Significant Lines:**
   - **Line 7:** The `while` loop inside `add` function (`while (pos < 1000005)`) runs more times for the slow input than the fast input, indicating more iterations over the data structure.
   - **Line 9:** This line shows the computation using `lowbit`, suggesting that more positions are being updated due to the characteristics of the slow input.

3. **Interaction with Data Structures and Loops:**
   - The difference in the number of hits on lines 7 and 9 suggests that the updates to the Fenwick tree are frequent or involve more iterations for certain positions, possibly due to the distribution of the segments over the space.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Based on Code and Problem Understanding:**

   - **Invariant #1: Fenwick Tree Update Overhead**
     - **Natural Language Description:** "When segments are positioned such that many updates to a significant portion of the Fenwick tree occur, the program may slow down."
     - **Explanation:** The slow input may involve a positioning of segments that trigger excessive updates along specific indices in the data structure, leading to increased computational cost per iteration.

   - **Invariant #2: Segment Overlap and Length**
     - **Natural Language Description:** "If horizontal or vertical segments extend across large portions of the boundary or overlap significantly, it can lead to increased Fenwick tree operations and slow down the computation."
     - **Explanation:** Segments that extend to or near the limits of the coordinate plane may cause more frequent intersection checks and updates, particularly if many segments overlap or align closely, increasing processing per loop iteration.

   - **Invariant #3: Input Symmetry and Alignment**
     - **Natural Language Description:** "When the segments are symmetrically positioned, especially around the center or a significant axis, this symmetry might trigger more calculations due to concurrent intersection checks."
     - **Explanation:** Certain symmetrical or aligned inputs may cause the program to perform more complex intersection checks or updates concurrently, leading to increased computational cost.

2. **General Observations:**
   - The performance bottleneck seems to arise not just from the size of the input, but from specific spatial arrangements and the extent of segments. The use of a Fenwick tree means that performance might degrade when operations are localized around certain hotspots or involve large ranges frequently.
   - The invariants focus on the geometric distribution and extent of segments, which directly affect the complexity of operations performed by the loops and the data structure updates.

These assessments and invariants should help identify potential performance issues in future scenarios with similar inputs, abstracting away from specific numerical values to focus on input characteristics.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived in Phase 2 into the given C++ program.

### Phase 3: Implement the Natural Language Invariants as C++ Checkers

1. **Invariant #1: Fenwick Tree Update Overhead**

```cpp
void check_fenwick_tree_update(bool condition) {
    if (condition) {
        cerr << "Warning: Fenwick tree update overhead condition triggered!" << endl;
        abort();
    }
}
```

2. **Invariant #2: Segment Overlap and Length**

```cpp
void check_segment_overlap(bool condition) {
    if (condition) {
        cerr << "Warning: Segment overlap or length condition triggered!" << endl;
        abort();
    }
}
```

3. **Invariant #3: Input Symmetry and Alignment**

```cpp
void check_input_symmetry(bool condition) {
    if (condition) {
        cerr << "Warning: Input symmetry and alignment condition triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Program

Now, let's integrate these checkers into the provided C++ solution at appropriate places. We'll add checks after reading inputs and before intensive operations are performed, thereby avoiding performance degradation due to checks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int bit[1000005];
inline int lowbit(int x) { return x & -x; }
void add(int pos, int val) {
    pos++;
    while (pos < 1000005) {
        bit[pos] += val;
        pos += lowbit(pos);
    }
}
int sum(int pos) {
    pos++;
    int ret = 0;
    while (pos > 0) {
        ret += bit[pos];
        pos -= lowbit(pos);
    }
    return ret;
}
int query(int l, int r) { return sum(r) - (l == 0 ? 0 : sum(l - 1)); }
struct hline {
    int y, l, r;
} arr[100005];
struct vline {
    int x, u, d;
} brr[100005];

// Checker functions
void check_fenwick_tree_update(bool condition) {
    if (condition) {
        cerr << "Warning: Fenwick tree update overhead condition triggered!" << endl;
        abort();
    }
}

void check_segment_overlap(bool condition) {
    if (condition) {
        cerr << "Warning: Segment overlap or length condition triggered!" << endl;
        abort();
    }
}

void check_input_symmetry(bool condition) {
    if (condition) {
        cerr << "Warning: Input symmetry and alignment condition triggered!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    
    for (int i = 1; i <= n; i++) cin >> arr[i].y >> arr[i].l >> arr[i].r;
    for (int i = 1; i <= m; i++) cin >> brr[i].x >> brr[i].u >> brr[i].d;

    // Check for segment overlap or length
    for (int i = 1; i <= n; i++) {
        check_segment_overlap(arr[i].r - arr[i].l > 900000); // Example threshold
    }
    for (int i = 1; i <= m; i++) {
        check_segment_overlap(brr[i].d - brr[i].u > 900000); // Example threshold
    }

    sort(arr + 1, arr + 1 + n, [=](hline a, hline b) -> bool { return a.y < b.y; });
    sort(brr + 1, brr + 1 + m, [=](vline a, vline b) -> bool { return a.u < b.u; });

    int cur1 = 1, cur2 = 1;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    long long ans = 1;

    for (int y = 0; y < 1000000; y++) {
        while (cur2 <= m && brr[cur2].u == y) {
            int x = brr[cur2].x, d = brr[cur2].d;
            add(x, 1);
            pq.push({d, x});
            if (d - y == 1000000) ans++;
            cur2++;

            // Check potential Fenwick tree update overhead
            check_fenwick_tree_update(d - y > 800000); // Example threshold
        }
        while (cur1 <= n && arr[cur1].y == y) {
            int l = arr[cur1].l, r = arr[cur1].r;
            ans += query(l, r);
            if (r - l == 1000000) ans++;
            cur1++;
        }
        while (!pq.empty() && pq.top().first == y) {
            int x = pq.top().second;
            pq.pop();
            add(x, -1);
        }
    }

    // Check for input symmetry
    check_input_symmetry(n == m && m > 50000); // Example condition

    cout << ans << endl;
    return 0;
}
```

### Explanation of Integration:

- **Checker for Segment Overlap or Length:** Checks if the segments are extremely long, potentially indicating a performance issue due to excessive overlap or boundary crossing.
- **Checker for Fenwick Tree Update Overhead:** Positioned within the loop that adds to the Fenwick tree to check for excessive updates, which could indicate high overhead.
- **Checker for Input Symmetry:** Placed at the end to assess if the input conditions might cause symmetry-related slowdowns.

Each checker is designed to catch situations known to lead to inefficiencies based on the previously derived natural language invariants. These checks now assist in identifying potential performance bottlenecks in new scenarios without causing excessive overhead themselves.

