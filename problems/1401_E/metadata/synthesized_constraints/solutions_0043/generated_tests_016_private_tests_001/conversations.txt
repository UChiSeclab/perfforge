system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct ura {
  int tip, x, y;
} v[200005];
int aib[1000006];
int lsb(int x) { return x & -x; }
void update(int pz, int val) {
  for (; pz <= 1000000; pz += lsb(pz)) aib[pz] += val;
}
int query(int pz) {
  int rz = 0;
  for (; pz > 0; pz -= lsb(pz)) rz += aib[pz];
  return rz;
}
bool cmp(ura a, ura b) {
  if (a.x < b.x) return true;
  if (b.x < a.x) return false;
  return a.tip < b.tip;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m, i;
  cin >> n >> m;
  int j = 0, cnt = 0;
  long long rz = 0;
  for (i = 1; i <= n; ++i) {
    int y, a, b;
    cin >> y >> a >> b;
    if (a == 0) {
      v[++j] = {1, b + 1, y};
      update(y, 1);
    } else {
      v[++j] = {2, a, y};
      ++cnt;
    }
  }
  for (i = 1; i <= m; ++i) {
    int x, a, b;
    cin >> x >> a >> b;
    if (a == 0)
      v[++j] = {3, x, b};
    else
      v[++j] = {4, x, a};
  }
  sort(v + 1, v + j + 1, cmp);
  int pz = 1;
  for (int xc = 1; xc < 1000000; ++xc) {
    while (v[pz].tip == 1 && v[pz].x == xc) {
      update(v[pz].y, -1);
      ++pz;
    }
    while (v[pz].tip == 2 && v[pz].x == xc) {
      update(v[pz].y, 1);
      ++pz;
    }
    while (v[pz].tip == 3 && v[pz].x == xc) {
      int st = 0;
      int dr = v[pz].y;
      if (dr == 1000000) ++rz;
      rz += query(dr);
      ++pz;
    }
    while (v[pz].tip == 4 && v[pz].x == xc) {
      int st = v[pz].y;
      int dr = 1000000;
      if (st == 0) ++rz;
      rz += query(dr) - query(st - 1);
      ++pz;
    }
  }
  while (v[pz].tip == 1 && v[pz].x == 1000000) {
    update(v[pz].y, -1);
    ++pz;
  }
  rz += query(1000000) + 1LL;
  cout << rz - cnt;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 0
3 1 1000000
1 0 1000000
2 1 1000000


(G.2) Fast Input

3 0
3 1 1000000
1 1 1000000
2 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct ura { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int tip, x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} v[200005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int aib[1000006]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int lsb(int x) { return x & -x; } /* line 7 slow_hit_count: 65, fast_hit_count: 65 */
void update(int pz, int val) { /* line 8 slow_hit_count: 61, fast_hit_count: 61 */
  for (; pz <= 1000000; pz += lsb(pz)) aib[pz] += val; /* line 9 slow_hit_count: 61, fast_hit_count: 61 */
} /* line 10 slow_hit_count: 3, fast_hit_count: 3 */
int query(int pz) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int rz = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (; pz > 0; pz -= lsb(pz)) rz += aib[pz]; /* line 13 slow_hit_count: 8, fast_hit_count: 8 */
  return rz; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(ura a, ura b) { /* line 16 slow_hit_count: 5, fast_hit_count: 4 */
  if (a.x < b.x) return true; /* line 17 slow_hit_count: 5, fast_hit_count: 4 */
  if (b.x < a.x) return false; /* line 18 slow_hit_count: 4, fast_hit_count: 4 */
  return a.tip < b.tip; /* line 19 slow_hit_count: 2, fast_hit_count: 4 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  int j = 0, cnt = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  long long rz = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; ++i) { /* line 28 slow_hit_count: 4, fast_hit_count: 4 */
    int y, a, b; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> y >> a >> b; /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
    if (a == 0) { /* line 31 slow_hit_count: 3, fast_hit_count: 3 */
      v[++j] = {1, b + 1, y}; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
      update(y, 1); /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
    } else { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      v[++j] = {2, a, y}; /* line 35 slow_hit_count: 2, fast_hit_count: 3 */
      ++cnt; /* line 36 slow_hit_count: 2, fast_hit_count: 3 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= m; ++i) { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    int x, a, b; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> a >> b; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    if (a == 0) /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      v[++j] = {3, x, b}; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      v[++j] = {4, x, a}; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v + 1, v + j + 1, cmp); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  int pz = 1; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (int xc = 1; xc < 1000000; ++xc) { /* line 49 slow_hit_count: 1000000, fast_hit_count: 1000000 */
    while (v[pz].tip == 1 && v[pz].x == xc) { /* line 50 slow_hit_count: 999999, fast_hit_count: 999999 */
      update(v[pz].y, -1); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      ++pz; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    while (v[pz].tip == 2 && v[pz].x == xc) { /* line 54 slow_hit_count: 1000001, fast_hit_count: 1000002 */
      update(v[pz].y, 1); /* line 55 slow_hit_count: 2, fast_hit_count: 3 */
      ++pz; /* line 56 slow_hit_count: 2, fast_hit_count: 3 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    while (v[pz].tip == 3 && v[pz].x == xc) { /* line 58 slow_hit_count: 999999, fast_hit_count: 999999 */
      int st = 0; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      int dr = v[pz].y; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      if (dr == 1000000) ++rz; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      rz += query(dr); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      ++pz; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    while (v[pz].tip == 4 && v[pz].x == xc) { /* line 65 slow_hit_count: 999999, fast_hit_count: 999999 */
      int st = v[pz].y; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      int dr = 1000000; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
      if (st == 0) ++rz; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      rz += query(dr) - query(st - 1); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      ++pz; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  while (v[pz].tip == 1 && v[pz].x == 1000000) { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
    update(v[pz].y, -1); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    ++pz; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  rz += query(1000000) + 1LL; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  cout << rz - cnt; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 79 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided code and the hit count analysis, let's proceed with the analysis and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Hit Counts Comparison:**
   - Lines within the main loop (lines 49-71) are hit 1,000,000 times regardless of input, indicating they are iterating over the full range of possible x-coordinates.
   - The conditions within the loops on lines 50, 54, 58, and 65 are evaluated frequently, showing significant differences in how many times they result in execution of the body.

2. **Pinpointing Lines with More Hits on Slow Input:**
   - Line 54 (checks for type 2 segments) shows more activity on the slow input, indicating it does more work due to more conditions being met compared to the fast input.

3. **Interaction with Data Structures:**
   - The `update` function is called within the loop, modifying the `aib` array. On the slow input, this seems to be called more often because there are more segments of type 2.
   - The `query` function is involved after the loops (lines 62 and 69), but doesn't show as much difference in hits as `update`.

### Phase 2: Derive Performance-Characterizing Invariants

Using insights from Phase 1, we can derive conditions under which the program slows down:

1. **Invariant 1: High Frequency of Updates**
   - **Natural Language Description:** "If a large number of segments start near the origin, leading to a high number of updates to the `aib` array, the performance may degrade due to frequent modifications. This is particularly true when the number of type 2 segments is high relative to the total number of segments."
   - **Condition Check:** Triggered when a significant portion of horizontal segments (type 2) have low x-values close to 0.

2. **Invariant 2: Unbalanced Segment Distribution**
   - **Natural Language Description:** "If there is an imbalance where most segments are concentrated in a narrow vertical band, leading to many updates and queries within that range, the program might enter a slow path."
   - **Condition Check:** This happens when vertical segments have a small range of x-coordinates, causing repeated updates and queries in a narrow band.

3. **Invariant 3: Large Number of Type 1 Segments**
   - **Natural Language Description:** "If many horizontal segments (type 1) span across large parts of the x-axis, particularly starting from the origin, frequent updates and queries can slow down execution due to extensive coverage."
   - **Condition Check:** Observed when there is a high number of type 1 segments with starting points at or near x = 0.

### Summary of Conditions

These performance conditions reflect the relationship between the type and positioning of segments. They focus on spatial distribution and how it affects the execution flow, particularly around critical operations like updates to the `aib` array. By abstracting the conditions, we can anticipate future slowdowns without needing specific input values, remaining within the constraints of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant identified in the previous phase, we will create a C++ function to check the condition at runtime.

1. **Invariant 1: High Frequency of Updates**
   - **Description:** High number of type 2 segments starting near origin.
   - **Checker Code:**
   ```cpp
   void check_high_update_frequency(int type2_count, int total_segments) {
       if (type2_count > 0.8 * total_segments) {
           cerr << "Warning: Performance bottleneck condition triggered - high frequency of updates!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Unbalanced Segment Distribution**
   - **Description:** Vertical segments concentrated in a narrow band.
   - **Checker Code:**
   ```cpp
   void check_unbalanced_distribution(int narrow_band_count, int m) {
       if (narrow_band_count > 0.7 * m) {
           cerr << "Warning: Performance bottleneck condition triggered - unbalanced segment distribution!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Large Number of Type 1 Segments**
   - **Description:** High number of type 1 segments spanning large x-range.
   - **Checker Code:**
   ```cpp
   void check_large_type1_segments(int type1_count, int total_segments) {
       if (type1_count > 0.6 * total_segments) {
           cerr << "Warning: Performance bottleneck condition triggered - many large type 1 segments!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Now, we will integrate these checks into the existing C++ program. Checks should be placed after the input is read and before the main processing loop, ensuring no overhead is added within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
struct ura {
  int tip, x, y;
} v[200005];
int aib[1000006];
int lsb(int x) { return x & -x; }
void update(int pz, int val) {
  for (; pz <= 1000000; pz += lsb(pz)) aib[pz] += val;
}
int query(int pz) {
  int rz = 0;
  for (; pz > 0; pz -= lsb(pz)) rz += aib[pz];
  return rz;
}
bool cmp(ura a, ura b) {
  if (a.x < b.x) return true;
  if (b.x < a.x) return false;
  return a.tip < b.tip;
}

// Invariant 1 Checker
void check_high_update_frequency(int type2_count, int total_segments) {
    if (type2_count > 0.8 * total_segments) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of updates!" << endl;
        abort();
    }
}

// Invariant 2 Checker
void check_unbalanced_distribution(int narrow_band_count, int m) {
    if (narrow_band_count > 0.7 * m) {
        cerr << "Warning: Performance bottleneck condition triggered - unbalanced segment distribution!" << endl;
        abort();
    }
}

// Invariant 3 Checker
void check_large_type1_segments(int type1_count, int total_segments) {
    if (type1_count > 0.6 * total_segments) {
        cerr << "Warning: Performance bottleneck condition triggered - many large type 1 segments!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  int n, m, i;
  cin >> n >> m;
  int j = 0, cnt = 0;
  long long rz = 0;
  
  int type2_count = 0;
  int type1_count = 0;
  int narrow_band_count = 0;
  
  for (i = 1; i <= n; ++i) {
    int y, a, b;
    cin >> y >> a >> b;
    if (a == 0) {
      v[++j] = {1, b + 1, y};
      update(y, 1);
      type1_count++;
    } else {
      v[++j] = {2, a, y};
      ++cnt;
      type2_count++;
    }
  }

  for (i = 1; i <= m; ++i) {
    int x, a, b;
    cin >> x >> a >> b;
    if (a == 0) {
      v[++j] = {3, x, b};
      if (b - a < 100000) {
          narrow_band_count++;
      }
    } else {
      v[++j] = {4, x, a};
    }
  }
  
  int total_segments = n + m;
  
  // Applying the invariant checks
  check_high_update_frequency(type2_count, total_segments);
  check_unbalanced_distribution(narrow_band_count, m);
  check_large_type1_segments(type1_count, total_segments);
  
  sort(v + 1, v + j + 1, cmp);
  int pz = 1;
  for (int xc = 1; xc < 1000000; ++xc) {
    while (v[pz].tip == 1 && v[pz].x == xc) {
      update(v[pz].y, -1);
      ++pz;
    }
    while (v[pz].tip == 2 && v[pz].x == xc) {
      update(v[pz].y, 1);
      ++pz;
    }
    while (v[pz].tip == 3 && v[pz].x == xc) {
      int st = 0;
      int dr = v[pz].y;
      if (dr == 1000000) ++rz;
      rz += query(dr);
      ++pz;
    }
    while (v[pz].tip == 4 && v[pz].x == xc) {
      int st = v[pz].y;
      int dr = 1000000;
      if (st == 0) ++rz;
      rz += query(dr) - query(st - 1);
      ++pz;
    }
  }

  while (v[pz].tip == 1 && v[pz].x == 1000000) {
    update(v[pz].y, -1);
    ++pz;
  }
  rz += query(1000000) + 1LL;
  cout << rz - cnt;
}
```

### Explanation

- **Invariant 1 Check**: After reading all segments, it checks if a high proportion of type 2 segments start near the origin, which could lead to many updates.
- **Invariant 2 Check**: It checks if there is a large number of vertical segments concentrated in a narrow vertical band.
- **Invariant 3 Check**: It checks if there are many type 1 segments covering a large horizontal range, which can lead to excessive updates and slow performance.

These checks will help identify performance bottlenecks and guide fuzz testing by detecting slow scenarios.

