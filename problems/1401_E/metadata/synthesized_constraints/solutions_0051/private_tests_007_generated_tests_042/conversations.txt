system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 100010, M = 1000010;
long long n, m, ans = 1, sum[M];
struct Segment {
  long long t, p, val;
} seg[N << 1];
struct Query {
  long long t, l, r;
} que[N << 1];
inline long long read() {
  long long x = 0, tmp = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-') tmp = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  return tmp * x;
}
inline long long lowbit(long long x) { return x & (-x); }
inline void update(Segment p) {
  for (long long i = p.p; i < M; i += lowbit(i)) sum[i] += p.val;
}
inline long long query(Query p) {
  long long ans = 0;
  for (long long i = p.r; i; i -= lowbit(i)) ans += sum[i];
  for (long long i = p.l - 1; i; i -= lowbit(i)) ans -= sum[i];
  return ans;
}
inline bool cmp_seg(Segment a, Segment b) { return a.t < b.t; }
inline bool cmp_que(Query a, Query b) { return a.t < b.t; }
int main() {
  n = read();
  m = read();
  for (long long i = 1; i <= n; i++) {
    long long y = read() + 1, lx = read() + 1, rx = read() + 1;
    if (lx == 1 && rx == 1000001) ans++;
    seg[i * 2 - 1] = Segment{lx - 1, y, 1};
    seg[i * 2] = Segment{rx, y, -1};
  }
  for (long long i = 1; i <= m; i++) {
    long long x = read() + 1, ly = read() + 1, ry = read() + 1;
    if (ly == 1 && ry == 1000001) ans++;
    que[i] = Query{x, ly, ry};
  }
  sort(seg + 1, seg + 1 + n * 2, cmp_seg);
  sort(que + 1, que + 1 + m, cmp_que);
  long long now_seg = 1, now_que = 1;
  for (; now_seg <= n * 2 && seg[now_seg].t == 0; now_seg++)
    update(seg[now_seg]);
  for (long long i = 1; i < M; i++) {
    for (; now_que <= m && que[now_que].t == i; now_que++)
      ans += query(que[now_que]);
    for (; now_seg <= n * 2 && seg[now_seg].t == i; now_seg++)
      update(seg[now_seg]);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
999999 999999 1000000
999999 0 999999


(G.2) Fast Input

0 1
51191 113730 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 100010, M = 1000010; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, ans = 1, sum[M]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct Segment { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long t, p, val; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} seg[N << 1]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
struct Query { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long t, l, r; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} que[N << 1]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
inline long long read() { /* line 11 slow_hit_count: 8, fast_hit_count: 5 */
  long long x = 0, tmp = 1; /* line 12 slow_hit_count: 8, fast_hit_count: 5 */
  char ch = getchar(); /* line 13 slow_hit_count: 8, fast_hit_count: 5 */
  while (!isdigit(ch)) { /* line 14 slow_hit_count: 8, fast_hit_count: 5 */
    if (ch == '-') tmp = -1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) { /* line 18 slow_hit_count: 42, fast_hit_count: 25 */
    x = (x << 3) + (x << 1) + (ch ^ 48); /* line 19 slow_hit_count: 34, fast_hit_count: 20 */
    ch = getchar(); /* line 20 slow_hit_count: 34, fast_hit_count: 20 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return tmp * x; /* line 22 slow_hit_count: 8, fast_hit_count: 5 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
inline long long lowbit(long long x) { return x & (-x); } /* line 24 slow_hit_count: 9, fast_hit_count: 16 */
inline void update(Segment p) { /* line 25 slow_hit_count: 2, fast_hit_count: 0 */
  for (long long i = p.p; i < M; i += lowbit(i)) sum[i] += p.val; /* line 26 slow_hit_count: 4, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 2, fast_hit_count: 0 */
inline long long query(Query p) { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = p.r; i; i -= lowbit(i)) ans += sum[i]; /* line 30 slow_hit_count: 8, fast_hit_count: 9 */
  for (long long i = p.l - 1; i; i -= lowbit(i)) ans -= sum[i]; /* line 31 slow_hit_count: 1, fast_hit_count: 9 */
  return ans; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
inline bool cmp_seg(Segment a, Segment b) { return a.t < b.t; } /* line 34 slow_hit_count: 2, fast_hit_count: 0 */
inline bool cmp_que(Query a, Query b) { return a.t < b.t; } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  m = read(); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 39 slow_hit_count: 2, fast_hit_count: 1 */
    long long y = read() + 1, lx = read() + 1, rx = read() + 1; /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
    if (lx == 1 && rx == 1000001) ans++; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
    seg[i * 2 - 1] = Segment{lx - 1, y, 1}; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
    seg[i * 2] = Segment{rx, y, -1}; /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= m; i++) { /* line 45 slow_hit_count: 2, fast_hit_count: 2 */
    long long x = read() + 1, ly = read() + 1, ry = read() + 1; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    if (ly == 1 && ry == 1000001) ans++; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    que[i] = Query{x, ly, ry}; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  sort(seg + 1, seg + 1 + n * 2, cmp_seg); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  sort(que + 1, que + 1 + m, cmp_que); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  long long now_seg = 1, now_que = 1; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (; now_seg <= n * 2 && seg[now_seg].t == 0; now_seg++) /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    update(seg[now_seg]); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i < M; i++) { /* line 55 slow_hit_count: 1000010, fast_hit_count: 1000010 */
    for (; now_que <= m && que[now_que].t == i; now_que++) /* line 56 slow_hit_count: 1000010, fast_hit_count: 1000010 */
      ans += query(que[now_que]); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    for (; now_seg <= n * 2 && seg[now_seg].t == i; now_seg++) /* line 58 slow_hit_count: 1000011, fast_hit_count: 1000009 */
      update(seg[now_seg]); /* line 59 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C code, we'll follow the given phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts provided:

1. **High Hit Count Discrepancy**:
   - The line `for (long long i = 1; i < M; i++)` (Line 55) runs `1,000,010` times for both fast and slow inputs, indicating a loop over a large range, which is expected. However, the segments and queries are processed only a few times, so the line itself isn't directly the bottleneck.
   - The `update` function (Line 26) within the loop is called more for the slow input, suggesting that the slow path involves more updates to the `sum` array. This indicates that horizontal segments in the slow input are likely causing more operations.
   - The `query` function (Line 30 and 31) shows fewer hits for the slow input, indicating the bottleneck isn't due to querying but rather updating.

2. **Data Structure Usage**:
   - The `sum` array is updated frequently in the slow input, indicating that the combination of segments requires more updates due to their coordinates or arrangement.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can characterize the conditions leading to slowdowns in natural language:

1. **Invariant Related to Segment Configuration**:
   - **Description**: "If the horizontal segments span or nearly span the entire width of the square, and vertical segments intersect these, the updates to the internal data structure become extensive."
   - **Explanation**: When horizontal segments either start very close to 0 or end very close to `10^6`, they require updates across many positions in the `sum` array, especially if they overlap with vertical segments.

2. **Invariant Related to High-Volume Updates**:
   - **Description**: "If a large number of updates are required due to segments overlapping extensively with one or more borders of the square, performance degrades as updates propagate through a large section of the data structure."
   - **Explanation**: Horizontal and vertical segments that cause updates over long spans or intersect multiple times with each other increase the operations needed on the `sum` array, leading to slower performance.

These invariants suggest that performance issues arise mainly due to extensive overlap or coverage by the segments, which corresponds to increased updating and processing in the data structures used. By avoiding configurations where segments cause long or numerous updates, we can prevent slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, we need to check conditions that might lead to performance bottlenecks.

1. **Invariant for Segment Configuration**:
   - We want to check if horizontal segments span or nearly span the entire width of the square, causing extensive updates.

```cpp
void check_segment_span(long long lx, long long rx) {
    if (lx == 1 && rx == 1000001) {  // Checks if the segment spans across the width
        cerr << "Warning: Performance bottleneck condition triggered due to segment spanning the entire width!" << endl;
        abort();
    }
}
```

2. **Invariant for High-Volume Updates**:
   - A check to see if segments cause extensive overlaps leading to many updates.

```cpp
void check_high_volume_updates(long long n, long long m) {
    if (n > 10000 || m > 10000) {  // Arbitrary threshold to capture high volume update scenarios
        cerr << "Warning: Performance bottleneck condition triggered due to high volume of segments!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

We will now integrate the checker functions into the original C++ code. The checks will be placed after reading the input and before the main loop to avoid any unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 100010, M = 1000010;
long long n, m, ans = 1, sum[M];
struct Segment {
  long long t, p, val;
} seg[N << 1];
struct Query {
  long long t, l, r;
} que[N << 1];
inline long long read() {
  long long x = 0, tmp = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-') tmp = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  return tmp * x;
}
inline long long lowbit(long long x) { return x & (-x); }
inline void update(Segment p) {
  for (long long i = p.p; i < M; i += lowbit(i)) sum[i] += p.val;
}
inline long long query(Query p) {
  long long ans = 0;
  for (long long i = p.r; i; i -= lowbit(i)) ans += sum[i];
  for (long long i = p.l - 1; i; i -= lowbit(i)) ans -= sum[i];
  return ans;
}
inline bool cmp_seg(Segment a, Segment b) { return a.t < b.t; }
inline bool cmp_que(Query a, Query b) { return a.t < b.t; }

// Checker function for segment spanning
void check_segment_span(long long lx, long long rx) {
    if (lx == 1 && rx == 1000001) {
        cerr << "Warning: Performance bottleneck condition triggered due to segment spanning the entire width!" << endl;
        abort();
    }
}

// Checker function for high volume of updates
void check_high_volume_updates(long long n, long long m) {
    if (n > 10000 || m > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high volume of segments!" << endl;
        abort();
    }
}

int main() {
  n = read();
  m = read();
  
  // Check for high volume of updates
  check_high_volume_updates(n, m);
  
  for (long long i = 1; i <= n; i++) {
    long long y = read() + 1, lx = read() + 1, rx = read() + 1;
    // Check if any horizontal segment spans the entire width
    check_segment_span(lx, rx);
    if (lx == 1 && rx == 1000001) ans++;
    seg[i * 2 - 1] = Segment{lx - 1, y, 1};
    seg[i * 2] = Segment{rx, y, -1};
  }
  for (long long i = 1; i <= m; i++) {
    long long x = read() + 1, ly = read() + 1, ry = read() + 1;
    if (ly == 1 && ry == 1000001) ans++;
    que[i] = Query{x, ly, ry};
  }
  sort(seg + 1, seg + 1 + n * 2, cmp_seg);
  sort(que + 1, que + 1 + m, cmp_que);
  long long now_seg = 1, now_que = 1;
  for (; now_seg <= n * 2 && seg[now_seg].t == 0; now_seg++)
    update(seg[now_seg]);
  for (long long i = 1; i < M; i++) {
    for (; now_que <= m && que[now_que].t == i; now_que++)
      ans += query(que[now_que]);
    for (; now_seg <= n * 2 && seg[now_seg].t == i; now_seg++)
      update(seg[now_seg]);
  }
  cout << ans << endl;
  return 0;
}
```

This code introduces performance checks without impacting the core computational logic. It efficiently detects potential bottlenecks based on segment configurations and input volume.

