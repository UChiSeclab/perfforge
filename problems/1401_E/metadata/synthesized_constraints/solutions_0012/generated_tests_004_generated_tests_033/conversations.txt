system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using ll = long long;
constexpr ll mod = 1e9 + 7;
constexpr ll INF = 1LL << 60;
template <class T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <class T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
ll gcd(ll n, ll m) {
  ll tmp;
  while (m != 0) {
    tmp = n % m;
    n = m;
    m = tmp;
  }
  return n;
}
ll lcm(ll n, ll m) { return abs(n) / gcd(n, m) * abs(m); }
using namespace std;
template <typename T>
struct BIT {
  vector<T> bit;
  int N;
  BIT(int n) : N(n) { bit.assign(++n, 0); }
  T sum(int i) {
    T s = 0;
    ++i;
    while (i > 0) {
      s += bit[i];
      i -= i & -i;
    }
    return s;
  }
  void add(int i, T x) {
    ++i;
    while (i < (int)bit.size()) {
      bit[i] += x;
      i += i & -i;
    }
  }
  T Lower_bound(T k) {
    if (k <= 0) return 0;
    T x = 0;
    T mul = 1;
    while (mul < N) {
      mul *= 2;
    }
    for (T i = mul; i > 0; i /= 2) {
      if (x + i <= N && bit[x + i] < k) {
        k -= bit[x + i];
        x += i;
      }
    }
    return x;
  }
};
using P = pair<ll, ll>;
void solve() {
  ll n, m;
  cin >> n >> m;
  ll ans = 0;
  vector<ll> x(m);
  vector<ll> ly(m), ry(m);
  vector<pair<ll, P>> v;
  for (int i = (int)0; i < (int)n; ++i) {
    ll y, lx, rx;
    cin >> y >> lx >> rx;
    v.emplace_back(y, P{lx, rx});
    if (lx == 0 && rx == 1e6) ++ans;
  }
  for (int i = (int)0; i < (int)m; ++i) {
    cin >> x[i];
    cin >> ly[i] >> ry[i];
    if (ly[i] == 0 && ry[i] == 1e6) ++ans;
  }
  vector<P> add(m), sub(m);
  for (int i = (int)0; i < (int)m; ++i) {
    add[i] = P{ry[i], x[i]};
    sub[i] = P{ly[i], x[i]};
  }
  sort(add.rbegin(), add.rend());
  sort(sub.rbegin(), sub.rend());
  sort(v.rbegin(), v.rend());
  int pos = 0, pos2 = 0, py = 0;
  BIT<ll> tree(1e6 + 1);
  for (int i = 1e6; i >= 0; --i) {
    while (pos < m && add[pos].first == i) {
      tree.add(add[pos].second, 1);
      ++pos;
    }
    if (py < n && v[py].first == i) {
      ans += tree.sum(v[py].second.second) - tree.sum(v[py].second.first - 1);
      ++py;
    }
    while (pos2 < m && sub[pos2].first == i) {
      tree.add(sub[pos2].second, -1);
      ++pos2;
    }
  }
  ans++;
  cout << ans << "\n";
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout << fixed << setprecision(15);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 2 1000000


(G.2) Fast Input

3 0
3 0 1000000
1 0 1000000
2 4 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
constexpr ll mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
constexpr ll INF = 1LL << 60; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmin(T &a, T b) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmax(T &a, T b) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
ll gcd(ll n, ll m) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  ll tmp; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  while (m != 0) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    tmp = n % m; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    n = m; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    m = tmp; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return n; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
ll lcm(ll n, ll m) { return abs(n) / gcd(n, m) * abs(m); } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
struct BIT { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T> bit; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  int N; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  BIT(int n) : N(n) { bit.assign(++n, 0); } /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  T sum(int i) { /* line 37 slow_hit_count: 6, fast_hit_count: 6 */
    T s = 0; /* line 38 slow_hit_count: 6, fast_hit_count: 6 */
    ++i; /* line 39 slow_hit_count: 6, fast_hit_count: 6 */
    while (i > 0) { /* line 40 slow_hit_count: 26, fast_hit_count: 31 */
      s += bit[i]; /* line 41 slow_hit_count: 20, fast_hit_count: 25 */
      i -= i & -i; /* line 42 slow_hit_count: 20, fast_hit_count: 25 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    return s; /* line 44 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  void add(int i, T x) { /* line 46 slow_hit_count: 6, fast_hit_count: 0 */
    ++i; /* line 47 slow_hit_count: 6, fast_hit_count: 0 */
    while (i < (int)bit.size()) { /* line 48 slow_hit_count: 118, fast_hit_count: 0 */
      bit[i] += x; /* line 49 slow_hit_count: 112, fast_hit_count: 0 */
      i += i & -i; /* line 50 slow_hit_count: 112, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 6, fast_hit_count: 0 */
  T Lower_bound(T k) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    if (k <= 0) return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    T x = 0; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    T mul = 1; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    while (mul < N) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      mul *= 2; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    for (T i = mul; i > 0; i /= 2) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      if (x + i <= N && bit[x + i] < k) { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
        k -= bit[x + i]; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
        x += i; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    return x; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
using P = pair<ll, ll>; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  ll n, m; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  ll ans = 0; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  vector<ll> x(m); /* line 74 slow_hit_count: 2, fast_hit_count: 2 */
  vector<ll> ly(m), ry(m); /* line 75 slow_hit_count: 3, fast_hit_count: 3 */
  vector<pair<ll, P>> v; /* line 76 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (int)0; i < (int)n; ++i) { /* line 77 slow_hit_count: 4, fast_hit_count: 4 */
    ll y, lx, rx; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> y >> lx >> rx; /* line 79 slow_hit_count: 3, fast_hit_count: 3 */
    v.emplace_back(y, P{lx, rx}); /* line 80 slow_hit_count: 3, fast_hit_count: 3 */
    if (lx == 0 && rx == 1e6) ++ans; /* line 81 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (int)0; i < (int)m; ++i) { /* line 83 slow_hit_count: 4, fast_hit_count: 1 */
    cin >> x[i]; /* line 84 slow_hit_count: 3, fast_hit_count: 0 */
    cin >> ly[i] >> ry[i]; /* line 85 slow_hit_count: 3, fast_hit_count: 0 */
    if (ly[i] == 0 && ry[i] == 1e6) ++ans; /* line 86 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  vector<P> add(m), sub(m); /* line 88 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = (int)0; i < (int)m; ++i) { /* line 89 slow_hit_count: 4, fast_hit_count: 1 */
    add[i] = P{ry[i], x[i]}; /* line 90 slow_hit_count: 3, fast_hit_count: 0 */
    sub[i] = P{ly[i], x[i]}; /* line 91 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  sort(add.rbegin(), add.rend()); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  sort(sub.rbegin(), sub.rend()); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  sort(v.rbegin(), v.rend()); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  int pos = 0, pos2 = 0, py = 0; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  BIT<ll> tree(1e6 + 1); /* line 97 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1e6; i >= 0; --i) { /* line 98 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    while (pos < m && add[pos].first == i) { /* line 99 slow_hit_count: 1000004, fast_hit_count: 1000001 */
      tree.add(add[pos].second, 1); /* line 100 slow_hit_count: 3, fast_hit_count: 0 */
      ++pos; /* line 101 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    if (py < n && v[py].first == i) { /* line 103 slow_hit_count: 1000001, fast_hit_count: 1000001 */
      ans += tree.sum(v[py].second.second) - tree.sum(v[py].second.first - 1); /* line 104 slow_hit_count: 3, fast_hit_count: 3 */
      ++py; /* line 105 slow_hit_count: 3, fast_hit_count: 3 */
    } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
    while (pos2 < m && sub[pos2].first == i) { /* line 107 slow_hit_count: 1000004, fast_hit_count: 1000001 */
      tree.add(sub[pos2].second, -1); /* line 108 slow_hit_count: 3, fast_hit_count: 0 */
      ++pos2; /* line 109 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
  ans++; /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << "\n"; /* line 113 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 114 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 115 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 116 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed << setprecision(15); /* line 118 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 120 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 121 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Analyzing the hit counts from both the slow and fast runs, we observe the following:

1. **High Hit Counts in Loops (Lines 98-110):**
   - The loop from line 98 iterates over the range from 1,000,000 to 0, logging 1,000,002 hits in both slow and fast runs. This implies it runs for each integer in this range, which is expected.
   - However, inside this loop, the while loops at lines 99 and 107 are executed significantly more times in the slow run than in the fast run. These while loops operate over the vertical segment lists (`add` and `sub`), which indicates these lists are more frequently iterated over in the slow run.

2. **Frequent Calls to `tree.add` (Lines 100 and 108):**
   - `tree.add` is called repeatedly during the slow run but not at all during the fast run. This suggests that the manipulation of the binary indexed tree (BIT) structure is a potential bottleneck. 

3. **Frequent Use of `tree.sum` (Lines 104):**
   - The `tree.sum` function is called equally in both runs, suggesting it is necessary for both scenarios. However, the cost associated with these calls might differ based on the tree's state maintained by the `tree.add` operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant on Vertical Segment Count:**
   - **Natural Language Description:** "The program may experience a slowdown when there is a significant number of vertical segments (`m`), leading to repeated updates in the BIT. This situation can be particularly expensive if the segments are densely packed, causing the BIT to be updated frequently for overlapping ranges."
   - **Threshold Suggestion:** Since the original constraints specify `m <= 100,000`, a high threshold such as `m > 10,000` may indicate problematic input configurations.

2. **Invariant on Overlapping Segments:**
   - **Natural Language Description:** "A slowdown is likely when vertical segments have a considerable overlap in their y-ranges, causing frequent updates and adjustments in the BIT for the same indices."
   - **Threshold Suggestion:** If a substantial proportion (e.g., more than 50%) of the segments overlap significantly, it could trigger the slowdown.

3. **Invariant on BIT Updates:**
   - **Natural Language Description:** "When many vertical segments intersect or influence the same set of horizontal lines, the BIT frequently undergoes updates across a large range of indices, slowing down computation."
   - **Threshold Suggestion:** Repeated updates (> 10,000) on common indices within the BIT could serve as an indicator of this condition. 

These invariants aim to abstract the specific triggers of the slowdown and help guide understanding of potential performance bottlenecks without relying on specific input values. They are particularly useful for creating fuzzer utilities that can identify problematic scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we will implement checks for potential performance bottlenecks.

1. **Checker for Vertical Segment Count:**
   - We want to check if the number of vertical segments (`m`) is significantly large, which might indicate a performance issue due to frequent BIT updates.
   
   ```cpp
   void check_vertical_segment_count(int m) {
       if (m > 10000) {  // Use a threshold that represents a large number of vertical segments
           cerr << "Warning: Performance bottleneck condition triggered - too many vertical segments!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Overlapping Segments:**
   - Check if a substantial portion of vertical segments have overlapping y-ranges.
   
   ```cpp
   void check_overlapping_segments(const vector<ll>& ly, const vector<ll>& ry) {
       int overlapCount = 0;
       for (size_t i = 0; i < ly.size(); ++i) {
           for (size_t j = i + 1; j < ry.size(); ++j) {
               if (ly[j] <= ry[i] && ry[j] >= ly[i]) {
                   overlapCount++;
                   break;  // Only count each overlapping once
               }
           }
       }
       if (overlapCount > ly.size() / 2) {  // Consider a substantial overlap if more than half overlap
           cerr << "Warning: Performance bottleneck condition triggered - overlapping vertical segments!" << endl;
           abort();
       }
   }
   ```

3. **Checker for BIT Updates:**
   - While we cannot directly count BIT operations without modifying the original code structure, we can simulate a condition based on the input data characteristics.
   
   ```cpp
   void check_frequent_bit_updates(int pos, int pos2, int m) {
       if (pos > m / 2 || pos2 > m / 2) {  // Simulate frequent updates if either position crosses half
           cerr << "Warning: Performance bottleneck condition triggered - frequent BIT updates!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is how we can integrate the checker functions into the original C++ program:

```cpp
#include <bits/stdc++.h>
using ll = long long;
constexpr ll mod = 1e9 + 7;
constexpr ll INF = 1LL << 60;
using namespace std;

template <typename T>
struct BIT {
    vector<T> bit;
    int N;
    BIT(int n) : N(n) { bit.assign(++n, 0); }
    T sum(int i) {
        T s = 0;
        ++i;
        while (i > 0) {
            s += bit[i];
            i -= i & -i;
        }
        return s;
    }
    void add(int i, T x) {
        ++i;
        while (i < (int)bit.size()) {
            bit[i] += x;
            i += i & -i;
        }
    }
};

// Checkers for performance bottlenecks
void check_vertical_segment_count(int m) {
    if (m > 10000) {  // Check if there are too many vertical segments
        cerr << "Warning: Performance bottleneck condition triggered - too many vertical segments!" << endl;
        abort();
    }
}

void check_overlapping_segments(const vector<ll>& ly, const vector<ll>& ry) {
    int overlapCount = 0;
    for (size_t i = 0; i < ly.size(); ++i) {
        for (size_t j = i + 1; j < ry.size(); ++j) {
            if (ly[j] <= ry[i] && ry[j] >= ly[i]) {
                overlapCount++;
                break;  // Only count each overlapping once
            }
        }
    }
    if (overlapCount > ly.size() / 2) {  // Check for substantial overlap
        cerr << "Warning: Performance bottleneck condition triggered - overlapping vertical segments!" << endl;
        abort();
    }
}

void check_frequent_bit_updates(int pos, int pos2, int m) {
    if (pos > m / 2 || pos2 > m / 2) {  // Simulate frequent updates if either position crosses half
        cerr << "Warning: Performance bottleneck condition triggered - frequent BIT updates!" << endl;
        abort();
    }
}

void solve() {
    ll n, m;
    cin >> n >> m;
    check_vertical_segment_count(m);  // Check for too many vertical segments

    ll ans = 0;
    vector<ll> x(m);
    vector<ll> ly(m), ry(m);
    vector<pair<ll, pair<ll, ll>>> v;
    for (int i = 0; i < n; ++i) {
        ll y, lx, rx;
        cin >> y >> lx >> rx;
        v.emplace_back(y, make_pair(lx, rx));
        if (lx == 0 && rx == 1e6) ++ans;
    }
    for (int i = 0; i < m; ++i) {
        cin >> x[i] >> ly[i] >> ry[i];
        if (ly[i] == 0 && ry[i] == 1e6) ++ans;
    }

    check_overlapping_segments(ly, ry);  // Check for overlapping segments

    vector<pair<ll, ll>> add(m), sub(m);
    for (int i = 0; i < m; ++i) {
        add[i] = make_pair(ry[i], x[i]);
        sub[i] = make_pair(ly[i], x[i]);
    }
    sort(add.rbegin(), add.rend());
    sort(sub.rbegin(), sub.rend());
    sort(v.rbegin(), v.rend());
    int pos = 0, pos2 = 0, py = 0;
    BIT<ll> tree(1e6 + 1);
    for (int i = 1e6; i >= 0; --i) {
        while (pos < m && add[pos].first == i) {
            tree.add(add[pos].second, 1);
            ++pos;
        }
        if (py < n && v[py].first == i) {
            ans += tree.sum(v[py].second.second) - tree.sum(v[py].second.first - 1);
            ++py;
        }
        while (pos2 < m && sub[pos2].first == i) {
            tree.add(sub[pos2].second, -1);
            ++pos2;
        }
    }
    
    check_frequent_bit_updates(pos, pos2, m);  // Check for frequent BIT updates
    
    ans++;
    cout << ans << "\n";
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout << fixed << setprecision(15);
    solve();
    return 0;
}
```

In this integration:

- **Vertical Segment Count Check** is placed right after reading the number of segments.
- **Overlapping Segments Check** is after reading all vertical segment data.
- **Frequent BIT Updates Check** is after the main BIT manipulation loop to ensure we capture any potential bottlenecks caused by excessive updates. 

These checks will help to detect performance issues proactively and can support fuzz testing by flagging potential slow inputs.

