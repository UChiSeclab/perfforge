system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v) {
  os << '{';
  string sep;
  for (const auto &x : v) os << sep << x, sep = ", ";
  return os << '}';
}
template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}
void dbg_out() { cerr << endl; }
template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}
const int MOD = 1000000000 + 7;
struct Fenwick {
  int n;
  vector<long long> bit;
  Fenwick(int _n) {
    n = _n + 1;
    bit.assign(n + 1, 0);
  }
  void upd(int i, int delta) {
    i++;
    while (i < n + 1) {
      bit[i] += delta;
      i += i & -i;
    }
  }
  long long query(int i) {
    i++;
    long long sum = 0;
    while (i > 0) {
      sum += bit[i];
      i -= i & -i;
    }
    return sum;
  }
  long long query(int i, int j) { return query(j) - query(i - 1); }
  int lower_bound(long long sum) {
    if (sum < 0) return -1;
    if (sum == 0) return 0;
    int pos = 0;
    for (int pw = 1 << 22; pw; pw >>= 1) {
      if (pos + pw < (int)(bit).size() && bit[pos + pw] < sum)
        pos += pw, sum -= bit[pos];
    }
    if (pos == n) return n - 1;
    return pos;
  }
};
vector<pair<pair<int, int>, int>> h;
vector<pair<int, pair<int, int>>> v;
Fenwick ft = Fenwick(1000005);
vector<vector<int>> active(1000005);
void solve() {
  int n, m;
  cin >> n >> m;
  long long count = 1;
  for (int i = 0; i < (n); ++i) {
    int y, l, r;
    cin >> y >> l >> r;
    if (l == 0 && r == 1000000) count++;
    h.push_back({{l, r}, y});
  }
  h.push_back({{0, 1000000}, 0});
  h.push_back({{0, 1000000}, 1000000});
  for (int i = 0; i < (m); ++i) {
    int x, l, r;
    cin >> x >> l >> r;
    v.push_back({x, {l, r}});
  }
  v.push_back({0, {0, 1000000}});
  sort(begin(v), end(v));
  sort(begin(h), end(h));
  int last_x = 0;
  int last_h_idx = 0;
  for (auto &vertical : v) {
    int x = vertical.first;
    while (last_h_idx < (int)(h).size() && h[last_h_idx].first.first <= x) {
      pair<pair<int, int>, int> horizontal = h[last_h_idx];
      active[horizontal.first.second].push_back(horizontal.second);
      ft.upd(horizontal.second, 1);
      last_h_idx++;
    }
    while (last_x < x) {
      for (auto &yy : active[last_x]) ft.upd(yy, -1);
      active[last_x].clear();
      last_x++;
    }
    if (x != 0) {
      count += ft.query(vertical.second.first, vertical.second.second) - 1;
    }
  }
  cout << count << endl;
}
int main() {
  long long t = 1;
  for (int i = 0; i < (t); ++i) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
999999 999999 1000000
999999 0 999999


(G.2) Fast Input

0 1
51191 113730 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, const vector<T> &v) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  os << '{'; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  string sep; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  for (const auto &x : v) os << sep << x, sep = ", "; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return os << '}'; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, const pair<A, B> &p) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return os << '(' << p.first << ", " << p.second << ')'; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void dbg_out() { cerr << endl; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Head, typename... Tail> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void dbg_out(Head H, Tail... T) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << ' ' << H; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  dbg_out(T...); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000000 + 7; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
struct Fenwick { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> bit; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  Fenwick(int _n) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    n = _n + 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    bit.assign(n + 1, 0); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  void upd(int i, int delta) { /* line 28 slow_hit_count: 3, fast_hit_count: 2 */
    i++; /* line 29 slow_hit_count: 3, fast_hit_count: 2 */
    while (i < n + 1) { /* line 30 slow_hit_count: 27, fast_hit_count: 25 */
      bit[i] += delta; /* line 31 slow_hit_count: 24, fast_hit_count: 23 */
      i += i & -i; /* line 32 slow_hit_count: 24, fast_hit_count: 23 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 3, fast_hit_count: 2 */
  long long query(int i) { /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
    i++; /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
    long long sum = 0; /* line 37 slow_hit_count: 2, fast_hit_count: 2 */
    while (i > 0) { /* line 38 slow_hit_count: 9, fast_hit_count: 18 */
      sum += bit[i]; /* line 39 slow_hit_count: 7, fast_hit_count: 16 */
      i -= i & -i; /* line 40 slow_hit_count: 7, fast_hit_count: 16 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    return sum; /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  long long query(int i, int j) { return query(j) - query(i - 1); } /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  int lower_bound(long long sum) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum < 0) return -1; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum == 0) return 0; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    int pos = 0; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    for (int pw = 1 << 22; pw; pw >>= 1) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      if (pos + pw < (int)(bit).size() && bit[pos + pw] < sum) /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        pos += pw, sum -= bit[pos]; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    if (pos == n) return n - 1; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    return pos; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<pair<int, int>, int>> h; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, pair<int, int>>> v; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
Fenwick ft = Fenwick(1000005); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> active(1000005); /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  long long count = 1; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); ++i) { /* line 65 slow_hit_count: 2, fast_hit_count: 1 */
    int y, l, r; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> y >> l >> r; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
    if (l == 0 && r == 1000000) count++; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
    h.push_back({{l, r}, y}); /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  h.push_back({{0, 1000000}, 0}); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  h.push_back({{0, 1000000}, 1000000}); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (m); ++i) { /* line 73 slow_hit_count: 2, fast_hit_count: 2 */
    int x, l, r; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> l >> r; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
    v.push_back({x, {l, r}}); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  v.push_back({0, {0, 1000000}}); /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  sort(begin(v), end(v)); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  sort(begin(h), end(h)); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  int last_x = 0; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  int last_h_idx = 0; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto &vertical : v) { /* line 83 slow_hit_count: 3, fast_hit_count: 3 */
    int x = vertical.first; /* line 84 slow_hit_count: 2, fast_hit_count: 2 */
    while (last_h_idx < (int)(h).size() && h[last_h_idx].first.first <= x) { /* line 85 slow_hit_count: 5, fast_hit_count: 4 */
      pair<pair<int, int>, int> horizontal = h[last_h_idx]; /* line 86 slow_hit_count: 3, fast_hit_count: 2 */
      active[horizontal.first.second].push_back(horizontal.second); /* line 87 slow_hit_count: 3, fast_hit_count: 2 */
      ft.upd(horizontal.second, 1); /* line 88 slow_hit_count: 3, fast_hit_count: 2 */
      last_h_idx++; /* line 89 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    while (last_x < x) { /* line 91 slow_hit_count: 1000001, fast_hit_count: 51193 */
      for (auto &yy : active[last_x]) ft.upd(yy, -1); /* line 92 slow_hit_count: 999999, fast_hit_count: 51191 */
      active[last_x].clear(); /* line 93 slow_hit_count: 999999, fast_hit_count: 51191 */
      last_x++; /* line 94 slow_hit_count: 999999, fast_hit_count: 51191 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    if (x != 0) { /* line 96 slow_hit_count: 2, fast_hit_count: 2 */
      count += ft.query(vertical.second.first, vertical.second.second) - 1; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  cout << count << endl; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1; /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (t); ++i) solve(); /* line 104 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 105 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program and derive relevant performance-characterizing invariants, we need to carefully analyze the hit count data to identify which parts of the code are executed significantly more in the slow input compared to the fast input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The loop on line 91: `while (last_x < x)` is executed 1,000,001 times for the slow input but only 51,193 times for the fast input. This indicates that this loop is a major contributor to the slowdown.
   - Inside this loop, lines 92, 93, and 94 are also executed 999,999 times for the slow input.

2. **Possible Inefficiency:**
   - The loop iterates over a large range of `last_x` values (from 0 to 999,999), suggesting that it may be doing redundant or unnecessary operations for each coordinate in this range.
   - This behavior is likely triggered because both the horizontal and vertical segments are located close to the edges of the square, leading to extended iterations due to the high range of values being processed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant Related to Loop Overhead:**
   - **Natural language description:** "If the horizontal and vertical segments are positioned such that they cover large continuous ranges close to the boundaries of the square, the program may experience a performance slowdown due to excessive iterations over these ranges."
   - **Explanation:** This invariant captures the condition where segments lying near the edges of the square could lead to a high number of redundant iterations in the loop that processes `last_x`.

2. **Invariant Related to Segment Coverage:**
   - **Natural language description:** "If the horizontal or vertical segments span almost the entire length or height of the square, the program may experience performance degradation due to the need to manage numerous overlapping or contiguous segment operations."
   - **Explanation:** This invariant focuses on the scenario where the length of the segments approaches the full width or height of the square, which increases the number of operations needed to process these segments.

3. **Invariant Related to Large-Scale Operations:**
   - **Natural language description:** "When the number of segments approaches the upper constraint limits (n, m close to 100,000), coupled with segments that nearly span the full dimensions of the square, performance may degrade significantly due to the extensive processing required."
   - **Explanation:** This invariant highlights the potential slowdown in cases where the input size is large (near constraint limits) and segments extensively cover the square, causing a high volume of operations.

These invariants should help capture potential slow scenarios and assist in improving the performance or detecting slow inputs in future cases. They avoid relying on specific numeric values from the provided slow input but instead generalize the conditions under which slow performance is likely to occur.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language descriptions of the performance-characterizing invariants, let's translate them into runtime checks in C++ code.

1. **Invariant Related to Loop Overhead:**

```cpp
void check_loop_overhead_invariant(int last_x_max, int x) {
    if (last_x_max - x > 100000) { // Arbitrary threshold; detects large ranges
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in loop due to large x range!" << endl;
        abort();
    }
}
```

2. **Invariant Related to Segment Coverage:**

```cpp
void check_segment_coverage_invariant(int l, int r, int max_val) {
    if ((r - l) > 0.9 * max_val) { // Set as 90% of the maximum range arbitrarily
        cerr << "Warning: Performance bottleneck condition triggered - segment spans nearly the full dimension of the square!" << endl;
        abort();
    }
}
```

3. **Invariant Related to Large-Scale Operations:**

```cpp
void check_large_scale_operations_invariant(int n, int m) {
    if (n + m > 150000) { // Arbitrary threshold; close to constraint limits
        cerr << "Warning: Performance bottleneck condition triggered - excessive segments leading to high processing load!" << endl;
        abort();
    }
}
```

Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the given C++ program, ensuring that they are placed effectively without introducing additional overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_loop_overhead_invariant(int last_x_max, int x) {
    if (last_x_max - x > 100000) { // Arbitrary threshold; detects large ranges
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in loop due to large x range!" << endl;
        abort();
    }
}

void check_segment_coverage_invariant(int l, int r, int max_val) {
    if ((r - l) > 0.9 * max_val) { // Set as 90% of the maximum range arbitrarily
        cerr << "Warning: Performance bottleneck condition triggered - segment spans nearly the full dimension of the square!" << endl;
        abort();
    }
}

void check_large_scale_operations_invariant(int n, int m) {
    if (n + m > 150000) { // Arbitrary threshold; close to constraint limits
        cerr << "Warning: Performance bottleneck condition triggered - excessive segments leading to high processing load!" << endl;
        abort();
    }
}

struct Fenwick {
    int n;
    vector<long long> bit;
    Fenwick(int _n) {
        n = _n + 1;
        bit.assign(n + 1, 0);
    }
    void upd(int i, int delta) {
        i++;
        while (i < n + 1) {
            bit[i] += delta;
            i += i & -i;
        }
    }
    long long query(int i) {
        i++;
        long long sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= i & -i;
        }
        return sum;
    }
    long long query(int i, int j) { return query(j) - query(i - 1); }
};

vector<pair<pair<int, int>, int>> h;
vector<pair<int, pair<int, int>>> v;
Fenwick ft = Fenwick(1000005);
vector<vector<int>> active(1000005);

void solve() {
    int n, m;
    cin >> n >> m;

    // Check for large-scale operations invariant
    check_large_scale_operations_invariant(n, m);

    long long count = 1;
    for (int i = 0; i < n; ++i) {
        int y, l, r;
        cin >> y >> l >> r;

        // Check segment coverage invariant
        check_segment_coverage_invariant(l, r, 1000000);

        if (l == 0 && r == 1000000) count++;
        h.push_back({{l, r}, y});
    }

    h.push_back({{0, 1000000}, 0});
    h.push_back({{0, 1000000}, 1000000});

    for (int i = 0; i < m; ++i) {
        int x, l, r;
        cin >> x >> l >> r;
        v.push_back({x, {l, r}});
    }

    v.push_back({0, {0, 1000000}});
    sort(begin(v), end(v));
    sort(begin(h), end(h));

    int last_x = 0;
    int last_h_idx = 0;
    for (auto &vertical : v) {
        int x = vertical.first;

        // Check loop overhead invariant
        check_loop_overhead_invariant(last_x, x);

        while (last_h_idx < (int)(h).size() && h[last_h_idx].first.first <= x) {
            pair<pair<int, int>, int> horizontal = h[last_h_idx];
            active[horizontal.first.second].push_back(horizontal.second);
            ft.upd(horizontal.second, 1);
            last_h_idx++;
        }
        while (last_x < x) {
            for (auto &yy : active[last_x]) ft.upd(yy, -1);
            active[last_x].clear();
            last_x++;
        }
        if (x != 0) {
            count += ft.query(vertical.second.first, vertical.second.second) - 1;
        }
    }
    cout << count << endl;
}

int main() {
    long long t = 1;
    for (int i = 0; i < t; ++i) solve();
}
```

### Explanation of Integration:

- **Loop Overhead Invariant:** Check inserted before the while loop that processes vertical segments.
- **Segment Coverage Invariant:** Check inserted after reading each segment to ensure it doesn't span nearly the entire dimension.
- **Large-Scale Operations Invariant:** Check inserted immediately after reading `n` and `m` to ensure the sum doesn't exceed a threshold.

These checks serve as early warnings for bottleneck conditions, helping identify performance issues without significantly impacting the execution time for typical scenarios.

