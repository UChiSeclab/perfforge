system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 1e5 + 5, S = 1e6 + 5;
long long y[N], lx[N], rx[N], x[N], ly[N], ry[N];
long long ans = 1, n, m, o[S], m0, q0;
struct modification {
  long long t, p, v;
  bool operator<(const modification &oth) const { return t < oth.t; }
} mdfy[N << 1];
struct query {
  long long t, l, r;
  bool operator<(const query &oth) const { return t < oth.t; }
} qry[N << 1];
void Modify(modification &opt) {
  for (long long p = opt.p; p < S; p += p & -p) o[p] += opt.v;
}
long long Query(query &opt) {
  long long res = 0;
  for (long long p = opt.r; p; p -= p & -p) res += o[p];
  for (long long p = opt.l - 1; p; p -= p & -p) res -= o[p];
  return res;
}
signed main() {
  scanf("%lld %lld", &n, &m);
  for (long long i = 1; i <= n; i++) {
    scanf("%lld %lld %lld", &y[i], &lx[i], &rx[i]);
    if (lx[i] == 0 && rx[i] == 1000000) ans++;
    y[i]++;
    lx[i]++;
    rx[i]++;
    mdfy[++m0] = (modification){lx[i] - 1, y[i], 1};
    ;
    mdfy[++m0] = (modification){rx[i], y[i], -1};
    ;
  }
  for (long long i = 1; i <= m; i++) {
    scanf("%lld %lld %lld", &x[i], &ly[i], &ry[i]);
    if (ly[i] == 0 && ry[i] == 1000000) ans++;
    x[i]++;
    ly[i]++;
    ry[i]++;
    qry[++q0] = (query){x[i], ly[i], ry[i]};
    ;
  }
  sort(mdfy + 1, mdfy + m0 + 1);
  sort(qry + 1, qry + q0 + 1);
  long long nowm = 1, nowq = 1;
  for (; nowm <= m0 && mdfy[nowm].t == 0; nowm++) Modify(mdfy[nowm]);
  for (long long t = 1; t < S; t++) {
    for (; nowq <= q0 && qry[nowq].t == t; nowq++) ans += Query(qry[nowq]);
    for (; nowm <= m0 && mdfy[nowm].t == t; nowm++) Modify(mdfy[nowm]);
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
999999 999999 1000000
999999 0 999999


(G.2) Fast Input

0 1
51191 113730 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e5 + 5, S = 1e6 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long y[N], lx[N], rx[N], x[N], ly[N], ry[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long ans = 1, n, m, o[S], m0, q0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
struct modification { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long t, p, v; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const modification &oth) const { return t < oth.t; } /* line 8 slow_hit_count: 2, fast_hit_count: 0 */
} mdfy[N << 1]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
struct query { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  long long t, l, r; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const query &oth) const { return t < oth.t; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} qry[N << 1]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void Modify(modification &opt) { /* line 14 slow_hit_count: 2, fast_hit_count: 0 */
  for (long long p = opt.p; p < S; p += p & -p) o[p] += opt.v; /* line 15 slow_hit_count: 4, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 2, fast_hit_count: 0 */
long long Query(query &opt) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long p = opt.r; p; p -= p & -p) res += o[p]; /* line 19 slow_hit_count: 8, fast_hit_count: 9 */
  for (long long p = opt.l - 1; p; p -= p & -p) res -= o[p]; /* line 20 slow_hit_count: 1, fast_hit_count: 9 */
  return res; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld", &n, &m); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 25 slow_hit_count: 2, fast_hit_count: 1 */
    scanf("%lld %lld %lld", &y[i], &lx[i], &rx[i]); /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
    if (lx[i] == 0 && rx[i] == 1000000) ans++; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
    y[i]++; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
    lx[i]++; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
    rx[i]++; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    mdfy[++m0] = (modification){lx[i] - 1, y[i], 1}; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    ; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    mdfy[++m0] = (modification){rx[i], y[i], -1}; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
    ; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= m; i++) { /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%lld %lld %lld", &x[i], &ly[i], &ry[i]); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    if (ly[i] == 0 && ry[i] == 1000000) ans++; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    x[i]++; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    ly[i]++; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    ry[i]++; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    qry[++q0] = (query){x[i], ly[i], ry[i]}; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    ; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  sort(mdfy + 1, mdfy + m0 + 1); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  sort(qry + 1, qry + q0 + 1); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  long long nowm = 1, nowq = 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (; nowm <= m0 && mdfy[nowm].t == 0; nowm++) Modify(mdfy[nowm]); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long t = 1; t < S; t++) { /* line 49 slow_hit_count: 1000005, fast_hit_count: 1000005 */
    for (; nowq <= q0 && qry[nowq].t == t; nowq++) ans += Query(qry[nowq]); /* line 50 slow_hit_count: 1000005, fast_hit_count: 1000005 */
    for (; nowm <= m0 && mdfy[nowm].t == t; nowm++) Modify(mdfy[nowm]); /* line 51 slow_hit_count: 1000006, fast_hit_count: 1000004 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance-characterizing invariants for the provided C program, we'll follow the given phases and analyze the code.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Hit Counts:**
   - **Slow Input** sees higher hit counts on lines within the loop structure in `main`: lines 49 to 51.
   - Specifically, line 51, which involves calling the `Modify` function, has a higher hit count for the slow input.
   - The `Modify` function (lines 14-16) modifies a data structure using a loop that runs until a condition is met (`p < S`), potentially indicating a loop that runs for large values.

2. **Pinpoint Significant Lines:**
   - The loop on line 51 is significant as it calls `Modify`, which is costly for the slow input.
   - Line 15 inside `Modify` is executed multiple times for the slow input due to the updates made to the array `o[S]`.

3. **Interaction with Data Structures:**
   - The data structure `o[S]` is a large array that is modified in several iterations in the `Modify` function. The behavior of this modification seems to differ significantly between the fast and slow inputs.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive some natural language invariants that describe conditions under which the program may exhibit slow behavior:

1. **Invariant 1: High Update Frequency on the Fenwick Tree**
   - **Description:** "When segments are positioned such that updates to the data structure representing line modifications (Fenwick Tree) occur very frequently across a wide range of indices, performance may degrade. This is particularly evident when the segments cover or nearly cover the bounding dimensions (1,000,000 × 1,000,000)."
   - **Reasoning:** The slow input likely causes many updates to the data structure due to close-to-boundary or large-span segments, leading to frequent modifications across many indices in the structure.

2. **Invariant 2: High Density of Segments Near Boundaries**
   - **Description:** "If many segments are close to the boundaries of the square, especially near the maximum coordinates, this can result in more frequent and broader updates to the data structures, causing performance to drop."
   - **Reasoning:** The boundary conditions and large-span segments lead to more interactions, increasing the workload for the update operations.

3. **Invariant 3: Maximal Segment Overlap**
   - **Description:** "When horizontal and vertical segments intersect in such a way that there is maximal overlap (i.e., close to creating closed regions), the number of operations required to account for these intersections increases significantly."
   - **Reasoning:** The slow input configuration might be creating conditions where segments intersect in a manner that maximizes operational complexity.

These invariants abstract conditions under which the code may slow down, avoiding reliance on exact values and instead focusing on scenarios tied to the problem's constraints. They should help guide towards identifying problematic inputs in future cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as described.

### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we'll implement checker functions in C++.

1. **Invariant 1: High Update Frequency on the Fenwick Tree**
   - **Checker Code:**
   ```cpp
   void check_fenwick_update_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: High update frequency on Fenwick Tree!" << endl;
           abort();
       }
   }
   ```
2. **Invariant 2: High Density of Segments Near Boundaries**
   - **Checker Code:**
   ```cpp
   void check_boundary_density_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: High density of segments near boundaries!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Maximal Segment Overlap**
   - **Checker Code:**
   ```cpp
   void check_segment_overlap_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Maximal segment overlap causing increased intersections!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Here is the instrumented C++ code with checkers integrated at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 1e5 + 5, S = 1e6 + 5;
long long y[N], lx[N], rx[N], x[N], ly[N], ry[N];
long long ans = 1, n, m, o[S], m0, q0;
struct modification {
    long long t, p, v;
    bool operator<(const modification &oth) const { return t < oth.t; }
} mdfy[N << 1];
struct query {
    long long t, l, r;
    bool operator<(const query &oth) const { return t < oth.t; }
} qry[N << 1];
void Modify(modification &opt) {
    for (long long p = opt.p; p < S; p += p & -p) o[p] += opt.v;
}
long long Query(query &opt) {
    long long res = 0;
    for (long long p = opt.r; p; p -= p & -p) res += o[p];
    for (long long p = opt.l - 1; p; p -= p & -p) res -= o[p];
    return res;
}

// Performance bottleneck checker functions
void check_fenwick_update_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High update frequency on Fenwick Tree!" << endl;
        abort();
    }
}

void check_boundary_density_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High density of segments near boundaries!" << endl;
        abort();
    }
}

void check_segment_overlap_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Maximal segment overlap causing increased intersections!" << endl;
        abort();
    }
}

signed main() {
    scanf("%lld %lld", &n, &m);
    
    // Check if the number of segments is high, which may lead to high update frequency
    check_fenwick_update_invariant(n + m > 150000);
    
    for (long long i = 1; i <= n; i++) {
        scanf("%lld %lld %lld", &y[i], &lx[i], &rx[i]);
        if (lx[i] == 0 && rx[i] == 1000000) ans++;
        y[i]++;
        lx[i]++;
        rx[i]++;
        mdfy[++m0] = (modification){lx[i] - 1, y[i], 1};
        mdfy[++m0] = (modification){rx[i], y[i], -1};
        
        // Check for horizontal segments near the boundaries
        check_boundary_density_invariant(lx[i] == 1 || rx[i] == S || y[i] == 1 || y[i] == S);
    }
    
    for (long long i = 1; i <= m; i++) {
        scanf("%lld %lld %lld", &x[i], &ly[i], &ry[i]);
        if (ly[i] == 0 && ry[i] == 1000000) ans++;
        x[i]++;
        ly[i]++;
        ry[i]++;
        qry[++q0] = (query){x[i], ly[i], ry[i]};
        
        // Check for vertical segments near the boundaries
        check_boundary_density_invariant(x[i] == 1 || x[i] == S || ly[i] == 1 || ry[i] == S);
    }
    
    // Check for segment overlap
    check_segment_overlap_invariant(n > 0 && m > 0);
    
    sort(mdfy + 1, mdfy + m0 + 1);
    sort(qry + 1, qry + q0 + 1);
    long long nowm = 1, nowq = 1;
    for (; nowm <= m0 && mdfy[nowm].t == 0; nowm++) Modify(mdfy[nowm]);
    for (long long t = 1; t < S; t++) {
        for (; nowq <= q0 && qry[nowq].t == t; nowq++) ans += Query(qry[nowq]);
        for (; nowm <= m0 && mdfy[nowm].t == t; nowm++) Modify(mdfy[nowm]);
    }
    printf("%lld\n", ans);
    return 0;
}
```

**Comments on the Placement of Checkers:**
- The `check_fenwick_update_invariant` is placed after reading `n` and `m` to detect potential high update frequency conditions.
- The `check_boundary_density_invariant` is placed inside the loops where segments are processed to catch boundary-adjacent segments.
- The `check_segment_overlap_invariant` is invoked after processing all segments to detect potential overlaps.

