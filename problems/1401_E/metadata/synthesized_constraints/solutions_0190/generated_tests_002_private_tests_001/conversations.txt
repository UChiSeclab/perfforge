system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using uint32 = uint32_t;
template <typename T, class bit_array>
struct wavelet_matrix {
  using uT = typename make_unsigned<T>::type;
  wavelet_matrix() = default;
  wavelet_matrix(const vector<T> &data, uint32 m_level = 0) {
    n = data.size();
    max_value = (n == 0 ? 0UL : *max_element(data.begin(), data.end()));
    if (m_level == 0) do {
        ++m_level;
      } while ((static_cast<uT>(1) << m_level) <= max_value);
    max_level = m_level;
    bit_arrays.assign(max_level, bit_array(n));
    zero_cnt.assign(max_level, 0UL);
    vector<T> level = data, next_level = level;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      uT mask = static_cast<uT>(1) << (max_level - lvl - 1);
      uint32 &zeros = zero_cnt[lvl] = 0;
      for (uint32 i = 0; i < n; ++i) zeros += (level[i] & mask) == 0;
      bit_array &ba = bit_arrays[lvl];
      uint32 zero_pos = 0, one_pos = zeros;
      for (uint32 i = 0; i < n; ++i)
        if (level[i] & mask)
          ba.set_bit(i), next_level[one_pos++] = level[i];
        else
          next_level[zero_pos++] = level[i];
      ba.build();
      level.swap(next_level);
    }
  }
  T operator[](uint32 pos) const {
    T value = 0;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const bool one = ba.get_bit(pos);
      value = value << 1 | one;
      pos = ba.rank(pos, one);
      if (one) pos += zero_cnt[lvl];
    }
    return value;
  }
  tuple<int, int, int> rank_all(T c, uint32 begin_pos, uint32 end_pos) const {
    if (c > max_value) return make_tuple(end_pos - begin_pos, 0UL, 0UL);
    uint32 more_and_less[2] = {0};
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const bool one = (c >> (max_level - lvl - 1)) & 1;
      more_and_less[one] += end_pos - begin_pos;
      begin_pos = ba.rank(begin_pos, one);
      end_pos = ba.rank(end_pos, one);
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl];
      more_and_less[one] -= end_pos - begin_pos;
    }
    return make_tuple(more_and_less[1], end_pos - begin_pos, more_and_less[0]);
  }
  T quantile(uint32 begin_pos, uint32 end_pos, uint32 k) const {
    T value = 0;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const uint32 zeros = ba.rank(end_pos, 0) - ba.rank(begin_pos, 0);
      const bool one = k >= zeros;
      value = value << 1 | one;
      begin_pos = ba.rank(begin_pos, one);
      end_pos = ba.rank(end_pos, one);
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl], k -= zeros;
    }
    return value;
  }

 private:
  uint32 n;
  uint32 max_level;
  uint32 max_value;
  vector<bit_array> bit_arrays;
  vector<uint32> zero_cnt;
};
struct bit_array {
  bit_array() = default;
  bit_array(uint32 n, bool one = false) {
    blocks.assign((n + 31) / 32, one ? 0xffffffffUL : 0);
    rank_table.assign(blocks.size(), 0UL);
  }
  void build() {
    uint32 sum = 0;
    for (size_t i = 0; i < rank_table.size(); ++i)
      rank_table[i] = (sum += bit_count(blocks[i]));
  }
  uint32 rank(uint32 pos, bool one = true) const {
    uint32 block = pos >> 5;
    uint32 bit = pos & 31;
    uint32 sum = (block >= 1 ? rank_table[block - 1] : 0) +
                 bit_count(blocks[block] & ((1UL << bit) - 1));
    return one ? sum : pos - sum;
  }
  void set_bit(uint32 pos, bool one = true) {
    uint32 block = pos >> 5;
    uint32 bit = pos & 31;
    if (one)
      blocks[block] |= 1UL << bit;
    else
      blocks[block] &= ~(1ULL << bit);
  }
  bool get_bit(uint32 pos) const { return blocks[pos >> 5] >> (pos & 31) & 1; }

 private:
  static inline uint32 bit_count(uint32 x) {
    x -= (x >> 1) & 0x55555555UL;
    x = ((x >> 2) & 0x33333333UL) + (x & 0x33333333UL);
    x = ((x >> 4) + x) & 0x0f0f0f0fUL;
    x *= 0x01010101UL;
    return x >> 24;
  }
  vector<uint32> blocks;
  vector<uint32> rank_table;
};
struct bit_array_vec : vector<int> {
  bit_array_vec() = default;
  bit_array_vec(uint32 n, bool one = false) : vector<int>(n, one) {}
  void build() { partial_sum(this->begin(), this->end(), this->begin()); }
  inline uint32 rank(uint32 pos, bool one = true) const {
    uint32 sum = (pos >= 1 ? (*this)[pos - 1] : 0);
    return one ? sum : pos - sum;
  }
  inline void set_bit(uint32 pos, bool one = true) { (*this)[pos] = one; }
  inline bool get_bit(uint32 pos) const {
    return (*this)[pos] - (pos ? (*this)[pos - 1] : 0);
  }
};
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  int n, m;
  cin >> n >> m;
  const int N = 1e6;
  long long ans = 1;
  vector<int> a(N + 1, 0), b(N + 1, N + 1);
  for (int y, l, r, i = 0; i < n; ++i) {
    cin >> y >> l >> r;
    ans += l == 0 && r == N;
    if (l == 0) a[y] = r;
    if (r == N && l != 0) b[y] = l;
  }
  wavelet_matrix<int, bit_array> wa(a), wb(b);
  for (int x, l, r, i = 0; i < m; ++i) {
    cin >> x >> l >> r;
    ans += l == 0 && r == N;
    if (l == 0) {
      ans += get<2>(wa.rank_all(x - 1, 0, r + 1));
      ans += get<0>(wb.rank_all(x + 1, 0, r + 1));
    }
    if (r == N && l != 0) {
      ans += get<2>(wa.rank_all(x - 1, l, N + 1));
      ans += get<0>(wb.rank_all(x + 1, l, N + 1));
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 0
3 0 1000000
1 1 1000000
2 1 1000000


(G.2) Fast Input

3 0
3 1 1000000
1 1 1000000
2 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using uint32 = uint32_t; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, class bit_array> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct wavelet_matrix { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  using uT = typename make_unsigned<T>::type; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  wavelet_matrix() = default; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  wavelet_matrix(const vector<T> &data, uint32 m_level = 0) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    n = data.size(); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    max_value = (n == 0 ? 0UL : *max_element(data.begin(), data.end())); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    if (m_level == 0) do { /* line 11 slow_hit_count: 40, fast_hit_count: 21 */
        ++m_level; /* line 12 slow_hit_count: 40, fast_hit_count: 21 */
      } while ((static_cast<uT>(1) << m_level) <= max_value); /* line 13 slow_hit_count: 40, fast_hit_count: 21 */
    max_level = m_level; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
    bit_arrays.assign(max_level, bit_array(n)); /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    zero_cnt.assign(max_level, 0UL); /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
    vector<T> level = data, next_level = level; /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
    for (uint32 lvl = 0; lvl < max_level; ++lvl) { /* line 18 slow_hit_count: 42, fast_hit_count: 23 */
      uT mask = static_cast<uT>(1) << (max_level - lvl - 1); /* line 19 slow_hit_count: 40, fast_hit_count: 21 */
      uint32 &zeros = zero_cnt[lvl] = 0; /* line 20 slow_hit_count: 40, fast_hit_count: 21 */
      for (uint32 i = 0; i < n; ++i) zeros += (level[i] & mask) == 0; /* line 21 slow_hit_count: 40000080, fast_hit_count: 21000042 */
      bit_array &ba = bit_arrays[lvl]; /* line 22 slow_hit_count: 40, fast_hit_count: 21 */
      uint32 zero_pos = 0, one_pos = zeros; /* line 23 slow_hit_count: 40, fast_hit_count: 21 */
      for (uint32 i = 0; i < n; ++i) /* line 24 slow_hit_count: 40000080, fast_hit_count: 21000042 */
        if (level[i] & mask) /* line 25 slow_hit_count: 40000040, fast_hit_count: 21000021 */
          ba.set_bit(i), next_level[one_pos++] = level[i]; /* line 26 slow_hit_count: 8000001, fast_hit_count: 7999987 */
        else /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
          next_level[zero_pos++] = level[i]; /* line 28 slow_hit_count: 32000039, fast_hit_count: 13000034 */
      ba.build(); /* line 29 slow_hit_count: 40, fast_hit_count: 21 */
      level.swap(next_level); /* line 30 slow_hit_count: 40, fast_hit_count: 21 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  T operator[](uint32 pos) const { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    T value = 0; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    for (uint32 lvl = 0; lvl < max_level; ++lvl) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      const bit_array &ba = bit_arrays[lvl]; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      const bool one = ba.get_bit(pos); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      value = value << 1 | one; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      pos = ba.rank(pos, one); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      if (one) pos += zero_cnt[lvl]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    return value; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  tuple<int, int, int> rank_all(T c, uint32 begin_pos, uint32 end_pos) const { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    if (c > max_value) return make_tuple(end_pos - begin_pos, 0UL, 0UL); /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    uint32 more_and_less[2] = {0}; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    for (uint32 lvl = 0; lvl < max_level; ++lvl) { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      const bit_array &ba = bit_arrays[lvl]; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      const bool one = (c >> (max_level - lvl - 1)) & 1; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      more_and_less[one] += end_pos - begin_pos; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      begin_pos = ba.rank(begin_pos, one); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      end_pos = ba.rank(end_pos, one); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl]; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      more_and_less[one] -= end_pos - begin_pos; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    return make_tuple(more_and_less[1], end_pos - begin_pos, more_and_less[0]); /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  T quantile(uint32 begin_pos, uint32 end_pos, uint32 k) const { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    T value = 0; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    for (uint32 lvl = 0; lvl < max_level; ++lvl) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      const bit_array &ba = bit_arrays[lvl]; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      const uint32 zeros = ba.rank(end_pos, 0) - ba.rank(begin_pos, 0); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      const bool one = k >= zeros; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      value = value << 1 | one; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      begin_pos = ba.rank(begin_pos, one); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      end_pos = ba.rank(end_pos, one); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl], k -= zeros; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    return value; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  uint32 n; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  uint32 max_level; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  uint32 max_value; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  vector<bit_array> bit_arrays; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  vector<uint32> zero_cnt; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
struct bit_array { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  bit_array() = default; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  bit_array(uint32 n, bool one = false) { /* line 81 slow_hit_count: 2, fast_hit_count: 2 */
    blocks.assign((n + 31) / 32, one ? 0xffffffffUL : 0); /* line 82 slow_hit_count: 2, fast_hit_count: 2 */
    rank_table.assign(blocks.size(), 0UL); /* line 83 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 84 slow_hit_count: 2, fast_hit_count: 2 */
  void build() { /* line 85 slow_hit_count: 40, fast_hit_count: 21 */
    uint32 sum = 0; /* line 86 slow_hit_count: 40, fast_hit_count: 21 */
    for (size_t i = 0; i < rank_table.size(); ++i) /* line 87 slow_hit_count: 1250080, fast_hit_count: 656292 */
      rank_table[i] = (sum += bit_count(blocks[i])); /* line 88 slow_hit_count: 1250040, fast_hit_count: 656271 */
  } /* line 89 slow_hit_count: 40, fast_hit_count: 21 */
  uint32 rank(uint32 pos, bool one = true) const { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    uint32 block = pos >> 5; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    uint32 bit = pos & 31; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    uint32 sum = (block >= 1 ? rank_table[block - 1] : 0) + /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
                 bit_count(blocks[block] & ((1UL << bit) - 1)); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    return one ? sum : pos - sum; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  void set_bit(uint32 pos, bool one = true) { /* line 97 slow_hit_count: 8000001, fast_hit_count: 7999987 */
    uint32 block = pos >> 5; /* line 98 slow_hit_count: 8000001, fast_hit_count: 7999987 */
    uint32 bit = pos & 31; /* line 99 slow_hit_count: 8000001, fast_hit_count: 7999987 */
    if (one) /* line 100 slow_hit_count: 8000001, fast_hit_count: 7999987 */
      blocks[block] |= 1UL << bit; /* line 101 slow_hit_count: 8000001, fast_hit_count: 7999987 */
    else /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
      blocks[block] &= ~(1ULL << bit); /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 104 slow_hit_count: 8000001, fast_hit_count: 7999987 */
  bool get_bit(uint32 pos) const { return blocks[pos >> 5] >> (pos & 31) & 1; } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
  static inline uint32 bit_count(uint32 x) { /* line 108 slow_hit_count: 1250040, fast_hit_count: 656271 */
    x -= (x >> 1) & 0x55555555UL; /* line 109 slow_hit_count: 1250040, fast_hit_count: 656271 */
    x = ((x >> 2) & 0x33333333UL) + (x & 0x33333333UL); /* line 110 slow_hit_count: 1250040, fast_hit_count: 656271 */
    x = ((x >> 4) + x) & 0x0f0f0f0fUL; /* line 111 slow_hit_count: 1250040, fast_hit_count: 656271 */
    x *= 0x01010101UL; /* line 112 slow_hit_count: 1250040, fast_hit_count: 656271 */
    return x >> 24; /* line 113 slow_hit_count: 1250040, fast_hit_count: 656271 */
  } /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
  vector<uint32> blocks; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  vector<uint32> rank_table; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
struct bit_array_vec : vector<int> { /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  bit_array_vec() = default; /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
  bit_array_vec(uint32 n, bool one = false) : vector<int>(n, one) {} /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
  void build() { partial_sum(this->begin(), this->end(), this->begin()); } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
  inline uint32 rank(uint32 pos, bool one = true) const { /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    uint32 sum = (pos >= 1 ? (*this)[pos - 1] : 0); /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
    return one ? sum : pos - sum; /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
  inline void set_bit(uint32 pos, bool one = true) { (*this)[pos] = one; } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  inline bool get_bit(uint32 pos) const { /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
    return (*this)[pos] - (pos ? (*this)[pos - 1] : 0); /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 131 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0); /* line 132 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 134 slow_hit_count: 1, fast_hit_count: 1 */
  const int N = 1e6; /* line 135 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 136 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(N + 1, 0), b(N + 1, N + 1); /* line 137 slow_hit_count: 2, fast_hit_count: 2 */
  for (int y, l, r, i = 0; i < n; ++i) { /* line 138 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> y >> l >> r; /* line 139 slow_hit_count: 3, fast_hit_count: 3 */
    ans += l == 0 && r == N; /* line 140 slow_hit_count: 3, fast_hit_count: 3 */
    if (l == 0) a[y] = r; /* line 141 slow_hit_count: 3, fast_hit_count: 3 */
    if (r == N && l != 0) b[y] = l; /* line 142 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  wavelet_matrix<int, bit_array> wa(a), wb(b); /* line 144 slow_hit_count: 2, fast_hit_count: 2 */
  for (int x, l, r, i = 0; i < m; ++i) { /* line 145 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> x >> l >> r; /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
    ans += l == 0 && r == N; /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
    if (l == 0) { /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
      ans += get<2>(wa.rank_all(x - 1, 0, r + 1)); /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
      ans += get<0>(wb.rank_all(x + 1, 0, r + 1)); /* line 150 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 151 slow_hit_count: 0, fast_hit_count: 0 */
    if (r == N && l != 0) { /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
      ans += get<2>(wa.rank_all(x - 1, l, N + 1)); /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
      ans += get<0>(wb.rank_all(x + 1, l, N + 1)); /* line 154 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 157 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 158 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 159 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Line-Level Hit Counts

1. **High Hit Counts**:
   - **Line 21**: `for (uint32 i = 0; i < n; ++i) zeros += (level[i] & mask) == 0;`
     - Slow Hit Count: 40,000,080
     - Fast Hit Count: 21,000,042
   - **Line 24**: `for (uint32 i = 0; i < n; ++i)`
     - Slow Hit Count: 40,000,080
     - Fast Hit Count: 21,000,042
   - **Line 25**: `if (level[i] & mask)`
     - Slow Hit Count: 40,000,040
     - Fast Hit Count: 21,000,021
   - **Line 28**: `next_level[zero_pos++] = level[i];`
     - Slow Hit Count: 32,000,039
     - Fast Hit Count: 13,000,034

2. **Explanation of High Hit Counts**:
   - These lines are part of nested loops within the `wavelet_matrix` constructor. The loops iterate over the elements of the data vector `level` for each bit level in `max_level`. The repeated operations at these lines suggest a quadratic-like complexity that is more sensitive to the number of zero and one bits, which can increase significantly based on the input.

3. **Data Structure Interaction**:
   - The wavelet matrix is used as a sophisticated data structure to manage and query the data efficiently, but its setup seems particularly costly, especially due to its reliance on bit manipulation and counting steps that accumulate when processing large inputs.

## Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

### Invariants

1. **Invariant #1: Large Input Size with Uniform Distribution**:
   - **Description**: "If the number of horizontal or vertical segments is large, and they are uniformly distributed across the input space, the initialization of the wavelet matrix can become computationally expensive due to the increased number of operations required to set up each bit level."
   - **Explanation**: The wavelet matrix setup involves repeated bit-level operations. With a large number of segments uniformly distributed, the operations increase, leading to a high number of hit counts in the initialization part of the wavelet matrix.

2. **Invariant #2: Dense Segments at Extremes**:
   - **Description**: "If many segments start or end at the boundaries of the square, it increases the likelihood of triggering complex setup operations in the wavelet matrix, as extreme values require more bits to represent and manage, increasing computation."
   - **Explanation**: The extreme values (like coordinates close to 0 or 10^6) increase the complexity of operations within the wavelet matrix, especially when the segments are dense near these edges.

3. **Invariant #3: High Number of Segments Requiring Long Bit Manipulations**:
   - **Description**: "If the majority of segments require manipulation of more bit levels (e.g., due to a wide range of values or dense clusters), the setup phase becomes expensive due to the increased number of operations across multiple bit levels."
   - **Explanation**: A higher number of bits being manipulated increases the cost of setup operations in the wavelet matrix, as indicated by the high hit counts in the loop processing each level.

### Conclusion

The performance bottlenecks identified revolve around the wavelet matrix's setup phase, which is sensitive to the distribution and extremity of input data. Addressing these invariants in code optimizations or input handling can help mitigate these performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the previously identified natural language performance invariants into C++ runtime checks.

#### Invariant #1: Large Input Size with Uniform Distribution
This invariant relates to large numbers of segments that might uniformly fill the grid, leading to expensive operations in the wavelet matrix. We'll check the size of the input vectors.

```cpp
void check_large_input_invariant(int n, int m) {
    if (n > 50000 || m > 50000) { // Threshold chosen based on problem constraints where n, m <= 100000
        cerr << "Warning: Large input size invariant triggered - potential performance bottleneck!" << endl;
        abort();
    }
}
```

#### Invariant #2: Dense Segments at Extremes
Segments that start or end near the boundaries can increase complexity. We'll check for segments near these boundaries.

```cpp
void check_dense_extremes_invariant(const vector<int>& a, const vector<int>& b) {
    int extreme_count = 0;
    for (int x : a) {
        if (x == 0 || x == 1000000) ++extreme_count;
    }
    for (int y : b) {
        if (y == 0 || y == 1000000) ++extreme_count;
    }
    if (extreme_count > 10000) { // Arbitrary threshold
        cerr << "Warning: Dense segments at extremes invariant triggered - increased complexity!" << endl;
        abort();
    }
}
```

#### Invariant #3: High Number of Segments Requiring Long Bit Manipulations
This invariant is about the complexity of bit manipulations due to many segments. We'll check the proportion of long segments.

```cpp
void check_long_segment_invariant(const vector<int>& a_segments, const vector<int>& b_segments) {
    int long_segments = 0;
    for (int r : a_segments) {
        if (r > 800000) ++long_segments; // Arbitrary threshold for long segments
    }
    for (int l : b_segments) {
        if (l < 200000) ++long_segments; // Arbitrary threshold for long segments
    }
    if (long_segments > 5000) { // Arbitrary threshold for long segments count
        cerr << "Warning: Long segments invariant triggered - potential performance issue!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

Here is the instrumented C++ code with the runtime checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
using uint32 = uint32_t;

// Checker functions
void check_large_input_invariant(int n, int m) {
    if (n > 50000 || m > 50000) {
        cerr << "Warning: Large input size invariant triggered - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_dense_extremes_invariant(const vector<int>& a, const vector<int>& b) {
    int extreme_count = 0;
    for (int x : a) {
        if (x == 0 || x == 1000000) ++extreme_count;
    }
    for (int y : b) {
        if (y == 0 || y == 1000000) ++extreme_count;
    }
    if (extreme_count > 10000) {
        cerr << "Warning: Dense segments at extremes invariant triggered - increased complexity!" << endl;
        abort();
    }
}

void check_long_segment_invariant(const vector<int>& a_segments, const vector<int>& b_segments) {
    int long_segments = 0;
    for (int r : a_segments) {
        if (r > 800000) ++long_segments;
    }
    for (int l : b_segments) {
        if (l < 200000) ++long_segments;
    }
    if (long_segments > 5000) {
        cerr << "Warning: Long segments invariant triggered - potential performance issue!" << endl;
        abort();
    }
}

template <typename T, class bit_array>
struct wavelet_matrix {
  using uT = typename make_unsigned<T>::type;
  wavelet_matrix() = default;
  wavelet_matrix(const vector<T> &data, uint32 m_level = 0) {
    n = data.size();
    max_value = (n == 0 ? 0UL : *max_element(data.begin(), data.end()));
    if (m_level == 0) do {
        ++m_level;
      } while ((static_cast<uT>(1) << m_level) <= max_value);
    max_level = m_level;
    bit_arrays.assign(max_level, bit_array(n));
    zero_cnt.assign(max_level, 0UL);
    vector<T> level = data, next_level = level;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      uT mask = static_cast<uT>(1) << (max_level - lvl - 1);
      uint32 &zeros = zero_cnt[lvl] = 0;
      for (uint32 i = 0; i < n; ++i) zeros += (level[i] & mask) == 0;
      bit_array &ba = bit_arrays[lvl];
      uint32 zero_pos = 0, one_pos = zeros;
      for (uint32 i = 0; i < n; ++i)
        if (level[i] & mask)
          ba.set_bit(i), next_level[one_pos++] = level[i];
        else
          next_level[zero_pos++] = level[i];
      ba.build();
      level.swap(next_level);
    }
  }
  T operator[](uint32 pos) const {
    T value = 0;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const bool one = ba.get_bit(pos);
      value = value << 1 | one;
      pos = ba.rank(pos, one);
      if (one) pos += zero_cnt[lvl];
    }
    return value;
  }
  tuple<int, int, int> rank_all(T c, uint32 begin_pos, uint32 end_pos) const {
    if (c > max_value) return make_tuple(end_pos - begin_pos, 0UL, 0UL);
    uint32 more_and_less[2] = {0};
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const bool one = (c >> (max_level - lvl - 1)) & 1;
      more_and_less[one] += end_pos - begin_pos;
      begin_pos = ba.rank(begin_pos, one);
      end_pos = ba.rank(end_pos, one);
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl];
      more_and_less[one] -= end_pos - begin_pos;
    }
    return make_tuple(more_and_less[1], end_pos - begin_pos, more_and_less[0]);
  }
  T quantile(uint32 begin_pos, uint32 end_pos, uint32 k) const {
    T value = 0;
    for (uint32 lvl = 0; lvl < max_level; ++lvl) {
      const bit_array &ba = bit_arrays[lvl];
      const uint32 zeros = ba.rank(end_pos, 0) - ba.rank(begin_pos, 0);
      const bool one = k >= zeros;
      value = value << 1 | one;
      begin_pos = ba.rank(begin_pos, one);
      end_pos = ba.rank(end_pos, one);
      if (one) begin_pos += zero_cnt[lvl], end_pos += zero_cnt[lvl], k -= zeros;
    }
    return value;
  }

 private:
  uint32 n;
  uint32 max_level;
  uint32 max_value;
  vector<bit_array> bit_arrays;
  vector<uint32> zero_cnt;
};

struct bit_array {
  bit_array() = default;
  bit_array(uint32 n, bool one = false) {
    blocks.assign((n + 31) / 32, one ? 0xffffffffUL : 0);
    rank_table.assign(blocks.size(), 0UL);
  }
  void build() {
    uint32 sum = 0;
    for (size_t i = 0; i < rank_table.size(); ++i)
      rank_table[i] = (sum += bit_count(blocks[i]));
  }
  uint32 rank(uint32 pos, bool one = true) const {
    uint32 block = pos >> 5;
    uint32 bit = pos & 31;
    uint32 sum = (block >= 1 ? rank_table[block - 1] : 0) +
                 bit_count(blocks[block] & ((1UL << bit) - 1));
    return one ? sum : pos - sum;
  }
  void set_bit(uint32 pos, bool one = true) {
    uint32 block = pos >> 5;
    uint32 bit = pos & 31;
    if (one)
      blocks[block] |= 1UL << bit;
    else
      blocks[block] &= ~(1ULL << bit);
  }
  bool get_bit(uint32 pos) const { return blocks[pos >> 5] >> (pos & 31) & 1; }

 private:
  static inline uint32 bit_count(uint32 x) {
    x -= (x >> 1) & 0x55555555UL;
    x = ((x >> 2) & 0x33333333UL) + (x & 0x33333333UL);
    x = ((x >> 4) + x) & 0x0f0f0f0fUL;
    x *= 0x01010101UL;
    return x >> 24;
  }
  vector<uint32> blocks;
  vector<uint32> rank_table;
};

struct bit_array_vec : vector<int> {
  bit_array_vec() = default;
  bit_array_vec(uint32 n, bool one = false) : vector<int>(n, one) {}
  void build() { partial_sum(this->begin(), this->end(), this->begin()); }
  inline uint32 rank(uint32 pos, bool one = true) const {
    uint32 sum = (pos >= 1 ? (*this)[pos - 1] : 0);
    return one ? sum : pos - sum;
  }
  inline void set_bit(uint32 pos, bool one = true) { (*this)[pos] = one; }
  inline bool get_bit(uint32 pos) const {
    return (*this)[pos] - (pos ? (*this)[pos - 1] : 0);
  }
};

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  int n, m;
  cin >> n >> m;

  // Check for large input size invariant
  check_large_input_invariant(n, m);

  const int N = 1e6;
  long long ans = 1;
  vector<int> a(N + 1, 0), b(N + 1, N + 1);
  for (int y, l, r, i = 0; i < n; ++i) {
    cin >> y >> l >> r;
    ans += l == 0 && r == N;
    if (l == 0) a[y] = r;
    if (r == N && l != 0) b[y] = l;
  }

  // Check for dense segments at extremes
  check_dense_extremes_invariant(a, b);

  wavelet_matrix<int, bit_array> wa(a), wb(b);
  for (int x, l, r, i = 0; i < m; ++i) {
    cin >> x >> l >> r;
    ans += l == 0 && r == N;
    if (l == 0) {
      ans += get<2>(wa.rank_all(x - 1, 0, r + 1));
      ans += get<0>(wb.rank_all(x + 1, 0, r + 1));
    }
    if (r == N && l != 0) {
      ans += get<2>(wa.rank_all(x - 1, l, N + 1));
      ans += get<0>(wb.rank_all(x + 1, l, N + 1));
    }
  }

  // Check for long segment invariant
  check_long_segment_invariant(a, b);

  cout << ans << "\n";
  return 0;
}
```

### Explanation

- **Invariant Checks**: The checks are implemented as functions and called in the `main` function after reading the inputs and before computationally heavy parts.
- **Thresholds**: Chosen in accordance with the problem constraints and potential hotspots identified in the code.
- **Warnings and Aborts**: If a condition is met, a warning message is logged, and the program aborts to prevent further execution on potentially problematic inputs.

These checks are designed to be non-intrusive and only trigger under conditions that are likely to cause performance degradation, thus providing useful feedback during testing or fuzzing.

