system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
long long ans = 1;
struct par {
  int h, l;
  par(int x = 0, int y = 0) : h(x), l(y) {}
};
vector<par> l, r, u, d;
struct SPLAY {
  struct node {
    int val, tot, size;
    node *zuo, *you, *fa;
    node(int x, node *Fa)
        : val(x), tot(1), size(1), zuo(NULL), you(NULL), fa(Fa) {}
    node *find(int x) {
      if (zuo && x < val) return zuo->find(x);
      if (you && x > val) return you->find(x);
      return this;
    }
    void check() {
      size = tot;
      if (zuo) size += zuo->size;
      if (you) size += you->size;
    }
  } * root;
  void rotate(node *x) {
    node *fa = x->fa, *gfa = fa->fa;
    if (fa->zuo == x) {
      fa->zuo = x->you;
      if (x->you) x->you->fa = fa;
      x->you = fa;
    } else {
      fa->you = x->zuo;
      if (x->zuo) x->zuo->fa = fa;
      x->zuo = fa;
    }
    fa->fa = x;
    x->fa = gfa;
    if (gfa && gfa->zuo == fa) gfa->zuo = x;
    if (gfa && gfa->you == fa) gfa->you = x;
    fa->check();
    x->check();
  }
  void splay(node *x, node *to = NULL) {
    while (x->fa != to) {
      if (x->fa->fa != to && (x->fa->zuo == x) == (x->fa->fa->zuo == x->fa))
        rotate(x->fa), rotate(x);
      else
        rotate(x);
    }
    if (!to) root = x;
  }
  void add(int x) {
    if (root == NULL) {
      root = new node(x, NULL);
      return;
    }
    node *p = root->find(x);
    if (x == p->val)
      p->tot++, p->size++, splay(p);
    else if (x < p->val)
      p->zuo = new node(x, p), splay(p->zuo);
    else
      p->you = new node(x, p), splay(p->you);
  }
  int findrk(int x) {
    node *p = root->find(x);
    splay(p);
    if (p->val < x) {
      if (!p->you) return p->size + 1;
      p = p->you;
      while (p->zuo) p = p->zuo;
      splay(p);
    }
    return (p->zuo ? p->zuo->size : 0) + 1;
  }
} U, D;
bool cmp1(par x, par y) { return x.l < y.l; };
bool cmp2(par x, par y) { return x.l > y.l; };
int main() {
  scanf("%d %d", &n, &m);
  l.clear();
  r.clear();
  for (int i = 1; i <= n; i++) {
    int y, lx, rx;
    scanf("%d %d %d", &y, &lx, &rx);
    if (lx == 0)
      l.push_back(par(y, rx));
    else
      r.push_back(par(y, lx));
  }
  sort(l.begin(), l.end(), cmp1);
  sort(r.begin(), r.end(), cmp2);
  d.clear();
  u.clear();
  for (int i = 1; i <= m; i++) {
    int x, ly, ry;
    scanf("%d %d %d", &x, &ly, &ry);
    if (ly == 0) {
      d.push_back(par(ry, x));
      if (ry == 1000000) ans++;
    } else
      u.push_back(par(1000000 - ly, x));
  }
  U.root = NULL;
  D.root = NULL;
  sort(d.begin(), d.end(), cmp1);
  sort(u.begin(), u.end(), cmp1);
  int now1 = 0, now2 = 0, now3 = 0;
  for (int i = 0; i <= 1000000; i++) {
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++;
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++;
    if (i == 1000000) now1++;
    while (now3 < l.size() && l[now3].l == i) {
      int st = ans;
      if (D.root)
        ans += now1 - (D.findrk(l[now3].h) - 1);
      else
        ans += now1;
      if (U.root)
        ans += now2 - (U.findrk(1000000 - l[now3].h) - 1);
      else
        ans += now2;
      now3++;
    }
  }
  D.root = NULL;
  U.root = NULL;
  reverse(d.begin(), d.end());
  reverse(u.begin(), u.end());
  now1 = now2 = now3 = 0;
  for (int i = 1000000; i >= 0; i--) {
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++;
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++;
    if (i == 0) now1++;
    while (now3 < r.size() && r[now3].l == i) {
      if (D.root)
        ans += now1 - (D.findrk(r[now3].h) - 1);
      else
        ans += now1;
      if (U.root)
        ans += now2 - (U.findrk(1000000 - r[now3].h) - 1);
      else
        ans += now2;
      now3++;
    }
  }
  printf("%lld", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
500000 2 1000000
500000 0 999999


(G.2) Fast Input

1 1
999999 999999 1000000
999999 0 999999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long ans = 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct par { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int h, l; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  par(int x = 0, int y = 0) : h(x), l(y) {} /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<par> l, r, u, d; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
struct SPLAY { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  struct node { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    int val, tot, size; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    node *zuo, *you, *fa; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    node(int x, node *Fa) /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
        : val(x), tot(1), size(1), zuo(NULL), you(NULL), fa(Fa) {} /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    node *find(int x) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
      if (zuo && x < val) return zuo->find(x); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      if (you && x > val) return you->find(x); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      return this; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    void check() { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      size = tot; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      if (zuo) size += zuo->size; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      if (you) size += you->size; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } * root; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  void rotate(node *x) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    node *fa = x->fa, *gfa = fa->fa; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (fa->zuo == x) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      fa->zuo = x->you; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      if (x->you) x->you->fa = fa; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      x->you = fa; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      fa->you = x->zuo; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      if (x->zuo) x->zuo->fa = fa; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      x->zuo = fa; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    fa->fa = x; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    x->fa = gfa; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (gfa && gfa->zuo == fa) gfa->zuo = x; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (gfa && gfa->you == fa) gfa->you = x; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    fa->check(); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    x->check(); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  void splay(node *x, node *to = NULL) { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    while (x->fa != to) { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      if (x->fa->fa != to && (x->fa->zuo == x) == (x->fa->fa->zuo == x->fa)) /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        rotate(x->fa), rotate(x); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
        rotate(x); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    if (!to) root = x; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  void add(int x) { /* line 54 slow_hit_count: 2, fast_hit_count: 2 */
    if (root == NULL) { /* line 55 slow_hit_count: 2, fast_hit_count: 2 */
      root = new node(x, NULL); /* line 56 slow_hit_count: 2, fast_hit_count: 2 */
      return; /* line 57 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    node *p = root->find(x); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    if (x == p->val) /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      p->tot++, p->size++, splay(p); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    else if (x < p->val) /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      p->zuo = new node(x, p), splay(p->zuo); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      p->you = new node(x, p), splay(p->you); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  int findrk(int x) { /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
    node *p = root->find(x); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    splay(p); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
    if (p->val < x) { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
      if (!p->you) return p->size + 1; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      p = p->you; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      while (p->zuo) p = p->zuo; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      splay(p); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    return (p->zuo ? p->zuo->size : 0) + 1; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
} U, D; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp1(par x, par y) { return x.l < y.l; }; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp2(par x, par y) { return x.l > y.l; }; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  l.clear(); /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  r.clear(); /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 85 slow_hit_count: 2, fast_hit_count: 2 */
    int y, lx, rx; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %d", &y, &lx, &rx); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
    if (lx == 0) /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
      l.push_back(par(y, rx)); /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      r.push_back(par(y, lx)); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  sort(l.begin(), l.end(), cmp1); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  sort(r.begin(), r.end(), cmp2); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  d.clear(); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  u.clear(); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 97 slow_hit_count: 2, fast_hit_count: 2 */
    int x, ly, ry; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %d", &x, &ly, &ry); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
    if (ly == 0) { /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
      d.push_back(par(ry, x)); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
      if (ry == 1000000) ans++; /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
    } else /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      u.push_back(par(1000000 - ly, x)); /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  U.root = NULL; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  D.root = NULL; /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  sort(d.begin(), d.end(), cmp1); /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  sort(u.begin(), u.end(), cmp1); /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  int now1 = 0, now2 = 0, now3 = 0; /* line 110 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 1000000; i++) { /* line 111 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++; /* line 112 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++; /* line 113 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    if (i == 1000000) now1++; /* line 114 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    while (now3 < l.size() && l[now3].l == i) { /* line 115 slow_hit_count: 1000001, fast_hit_count: 1000001 */
      int st = ans; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
      if (D.root) /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now1 - (D.findrk(l[now3].h) - 1); /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now1; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
      if (U.root) /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now2 - (U.findrk(1000000 - l[now3].h) - 1); /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now2; /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
      now3++; /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
  D.root = NULL; /* line 128 slow_hit_count: 1, fast_hit_count: 1 */
  U.root = NULL; /* line 129 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(d.begin(), d.end()); /* line 130 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(u.begin(), u.end()); /* line 131 slow_hit_count: 1, fast_hit_count: 1 */
  now1 = now2 = now3 = 0; /* line 132 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1000000; i >= 0; i--) { /* line 133 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++; /* line 134 slow_hit_count: 1000002, fast_hit_count: 1000002 */
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++; /* line 135 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    if (i == 0) now1++; /* line 136 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    while (now3 < r.size() && r[now3].l == i) { /* line 137 slow_hit_count: 1000002, fast_hit_count: 1000002 */
      if (D.root) /* line 138 slow_hit_count: 1, fast_hit_count: 1 */
        ans += now1 - (D.findrk(r[now3].h) - 1); /* line 139 slow_hit_count: 1, fast_hit_count: 1 */
      else /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now1; /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
      if (U.root) /* line 142 slow_hit_count: 1, fast_hit_count: 1 */
        ans += now2 - (U.findrk(1000000 - r[now3].h) - 1); /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
        ans += now2; /* line 145 slow_hit_count: 1, fast_hit_count: 1 */
      now3++; /* line 146 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld", ans); /* line 149 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 150 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The critical difference in hit counts between the fast and slow inputs is observed in the loops from lines 111 to 148, specifically lines 111-137. These loops iterate over a range that spans the entire side of the square (0 to 1,000,000), impacting performance due to their high iteration counts.

2. **Notable Functionality**:
   - The loops on lines 111 and 133 involve repeatedly iterating over the full range of possible coordinates (0 to 1,000,000). This full range iteration becomes a significant bottleneck as it results in computationally expensive operations over potentially sparse data (segments).

3. **Data Structure Interaction**:
   - The `SPLAY` tree operations (particularly the `add` and `findrk` functions) are executed repeatedly. The inefficiencies stem from frequent splay operations which, although amortized, can be costly when performed over large ranges.

### Phase 2: Derive Performance-Characterizing Invariants

#### Invariant #1: Full Range Iteration
Natural Language Description: "If the algorithm involves iterating over the full range of coordinates (0 to 1,000,000) when processing segments, it may lead to significant slowdowns. This is especially pertinent when segments are positioned such that they do not necessitate full range checks."

#### Invariant #2: Sparse Segment Usage
Natural Language Description: "When the number of segments `n` or `m` is small relative to the grid size, yet the algorithm processes each coordinate from 0 to 1,000,000, unnecessary computations can cause performance degradation. Optimizing to handle only relevant coordinate ranges can improve efficiency."

#### Invariant #3: Unnecessary Splay Tree Operations
Natural Language Description: "Performance may degrade if splay tree operations (such as finding ranks or adding nodes) are carried out across the entire coordinate space. The overhead of maintaining balance through frequent rotations can accumulate, especially when actual segment density is low."

### Conclusion
To optimize the existing implementation, it is crucial to avoid iterating over the full coordinate range and to minimize unnecessary operations on the splay trees by focusing on the actual segments' coordinate ranges. These adjustments should be guided by the aforementioned invariants, thereby ensuring the program handles both sparse and dense segment scenarios efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below, I will translate the previously derived natural language invariants into C++ code that can be used to check for performance bottlenecks at runtime.

#### Invariant #1: Full Range Iteration

```cpp
void check_full_range_iteration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to full range iteration!" << endl;
        abort();
    }
}
```

#### Invariant #2: Sparse Segment Usage

```cpp
void check_sparse_segment_usage(int n, int m) {
    if ((n > 0 && n < 10) || (m > 0 && m < 10)) {
        cerr << "Warning: Potential performance bottleneck due to sparse segment usage!" << endl;
        abort();
    }
}
```

#### Invariant #3: Unnecessary Splay Tree Operations

```cpp
void check_splay_tree_operations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to unnecessary splay tree operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, I will integrate these checks into the original C++ code at strategic points to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
long long ans = 1;

struct par {
  int h, l;
  par(int x = 0, int y = 0) : h(x), l(y) {}
};

vector<par> l, r, u, d;

struct SPLAY {
  struct node {
    int val, tot, size;
    node *zuo, *you, *fa;
    node(int x, node *Fa) : val(x), tot(1), size(1), zuo(NULL), you(NULL), fa(Fa) {}
    node *find(int x) {
      if (zuo && x < val) return zuo->find(x);
      if (you && x > val) return you->find(x);
      return this;
    }
    void check() {
      size = tot;
      if (zuo) size += zuo->size;
      if (you) size += you->size;
    }
  } *root;
  
  void rotate(node *x) {
    node *fa = x->fa, *gfa = fa->fa;
    if (fa->zuo == x) {
      fa->zuo = x->you;
      if (x->you) x->you->fa = fa;
      x->you = fa;
    } else {
      fa->you = x->zuo;
      if (x->zuo) x->zuo->fa = fa;
      x->zuo = fa;
    }
    fa->fa = x;
    x->fa = gfa;
    if (gfa && gfa->zuo == fa) gfa->zuo = x;
    if (gfa && gfa->you == fa) gfa->you = x;
    fa->check();
    x->check();
  }
  
  void splay(node *x, node *to = NULL) {
    while (x->fa != to) {
      if (x->fa->fa != to && (x->fa->zuo == x) == (x->fa->fa->zuo == x->fa))
        rotate(x->fa), rotate(x);
      else
        rotate(x);
    }
    if (!to) root = x;
  }
  
  void add(int x) {
    if (root == NULL) {
      root = new node(x, NULL);
      return;
    }
    node *p = root->find(x);
    if (x == p->val)
      p->tot++, p->size++, splay(p);
    else if (x < p->val)
      p->zuo = new node(x, p), splay(p->zuo);
    else
      p->you = new node(x, p), splay(p->you);
  }
  
  int findrk(int x) {
    node *p = root->find(x);
    splay(p);
    if (p->val < x) {
      if (!p->you) return p->size + 1;
      p = p->you;
      while (p->zuo) p = p->zuo;
      splay(p);
    }
    return (p->zuo ? p->zuo->size : 0) + 1;
  }
} U, D;

// Function to check for full range iteration bottleneck
void check_full_range_iteration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to full range iteration!" << endl;
        abort();
    }
}

// Function to check for sparse segment usage bottleneck
void check_sparse_segment_usage(int n, int m) {
    if ((n > 0 && n < 10) || (m > 0 && m < 10)) {
        cerr << "Warning: Potential performance bottleneck due to sparse segment usage!" << endl;
        abort();
    }
}

// Function to check for unnecessary splay tree operations bottleneck
void check_splay_tree_operations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to unnecessary splay tree operations!" << endl;
        abort();
    }
}

bool cmp1(par x, par y) { return x.l < y.l; };
bool cmp2(par x, par y) { return x.l > y.l; };

int main() {
  scanf("%d %d", &n, &m);

  // Check for sparse segment usage
  check_sparse_segment_usage(n, m);

  l.clear();
  r.clear();
  for (int i = 1; i <= n; i++) {
    int y, lx, rx;
    scanf("%d %d %d", &y, &lx, &rx);
    if (lx == 0)
      l.push_back(par(y, rx));
    else
      r.push_back(par(y, lx));
  }
  
  sort(l.begin(), l.end(), cmp1);
  sort(r.begin(), r.end(), cmp2);
  
  d.clear();
  u.clear();
  for (int i = 1; i <= m; i++) {
    int x, ly, ry;
    scanf("%d %d %d", &x, &ly, &ry);
    if (ly == 0) {
      d.push_back(par(ry, x));
      if (ry == 1000000) ans++;
    } else
      u.push_back(par(1000000 - ly, x));
  }
  
  U.root = NULL;
  D.root = NULL;
  sort(d.begin(), d.end(), cmp1);
  sort(u.begin(), u.end(), cmp1);
  
  int now1 = 0, now2 = 0, now3 = 0;

  // Check for full range iteration bottleneck
  check_full_range_iteration((n > 0 || m > 0) && (l.size() > 0 || r.size() > 0 || u.size() > 0 || d.size() > 0));

  for (int i = 0; i <= 1000000; i++) {
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++;
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++;
    if (i == 1000000) now1++;
    while (now3 < l.size() && l[now3].l == i) {
      int st = ans;
      if (D.root)
        ans += now1 - (D.findrk(l[now3].h) - 1);
      else
        ans += now1;
      if (U.root)
        ans += now2 - (U.findrk(1000000 - l[now3].h) - 1);
      else
        ans += now2;
      now3++;
    }
  }
  
  D.root = NULL;
  U.root = NULL;
  reverse(d.begin(), d.end());
  reverse(u.begin(), u.end());
  
  now1 = now2 = now3 = 0;

  for (int i = 1000000; i >= 0; i--) {
    while (now1 < d.size() && d[now1].l == i) D.add(d[now1].h), now1++;
    while (now2 < u.size() && u[now2].l == i) U.add(u[now2].h), now2++;
    if (i == 0) now1++;
    while (now3 < r.size() && r[now3].l == i) {
      if (D.root)
        ans += now1 - (D.findrk(r[now3].h) - 1);
      else
        ans += now1;
      if (U.root)
        ans += now2 - (U.findrk(1000000 - r[now3].h) - 1);
      else
        ans += now2;
      now3++;
    }
  }

  // Check for unnecessary splay tree operations bottleneck
  check_splay_tree_operations((U.root != NULL && D.root != NULL) && (l.size() >= 10 || r.size() >= 10));

  printf("%lld", ans);
}
```

### Explanation

1. **Sparse Segment Usage Check**: The check is placed right after reading `n` and `m` from input to immediately detect when the number of segments is too low, which might not justify the overhead of processing the full coordinate range.

2. **Full Range Iteration Check**: This check is placed before the loops that iterate over the full coordinate range to avoid unnecessary computation when not justified by the number of segments.

3. **Unnecessary Splay Tree Operations Check**: This check is placed at the end of the main operations to catch cases where expensive splay tree operations might be executed unnecessarily.

By placing checks strategically within the program, we ensure they do not add significant overhead while effectively identifying potential performance bottlenecks.

