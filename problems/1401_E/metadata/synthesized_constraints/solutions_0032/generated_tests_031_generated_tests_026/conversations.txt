system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int N = 1e6 + 5;
int lowbit(int x) { return x & -x; }
struct Fenwick {
  int c[N];
  void update(int x, int y) {
    for (; x < N; x += lowbit(x)) c[x] += y;
  }
  int query(int x) {
    int answer = 0;
    for (; x > 0; x ^= lowbit(x)) answer += c[x];
    return answer;
  }
} bit;
int n, m;
std::vector<std::pair<int, int>> v[N];
struct que {
  int x, l, r;
} q[N];
bool cmp(que x, que y) { return x.x < y.x; }
int main() {
  int64_t answer = 1;
  scanf("%d %d", &n, &m);
  for (int i = 1; i <= n; i++) {
    int x, l, r;
    scanf("%d %d %d", &x, &l, &r);
    if (l == 0 && r == 1e6) ++answer;
    v[l].emplace_back(x, 1);
    v[r + 1].emplace_back(x, -1);
  }
  for (int i = 1; i <= m; i++) {
    int x, l, r;
    scanf("%d %d %d", &x, &l, &r);
    if (l == 0 && r == 1e6) ++answer;
    q[i] = {x, l, r};
  }
  std::sort(q + 1, q + m + 1, cmp);
  int cur = 0;
  for (int i = 1; i <= m; i++) {
    while (cur <= q[i].x) {
      for (auto j : v[cur]) {
        bit.update(j.first, j.second);
      }
      ++cur;
    }
    answer += bit.query(q[i].r) - bit.query(q[i].l - 1);
  }
  printf("%lld\n", answer);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
231451 171893 1000000
584396 1 1000000


(G.2) Fast Input

1 1
231451 171893 1000000
120927 0 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 5; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int lowbit(int x) { return x & -x; } /* line 3 slow_hit_count: 20, fast_hit_count: 7 */
struct Fenwick { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int c[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  void update(int x, int y) { /* line 6 slow_hit_count: 14, fast_hit_count: 0 */
    for (; x < N; x += lowbit(x)) c[x] += y; /* line 7 slow_hit_count: 14, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 1, fast_hit_count: 0 */
  int query(int x) { /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    int answer = 0; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    for (; x > 0; x ^= lowbit(x)) answer += c[x]; /* line 11 slow_hit_count: 9, fast_hit_count: 9 */
    return answer; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} bit; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<std::pair<int, int>> v[N]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
struct que { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int x, l, r; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} q[N]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(que x, que y) { return x.x < y.x; } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t answer = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
    int x, l, r; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %d", &x, &l, &r); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    if (l == 0 && r == 1e6) ++answer; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    v[l].emplace_back(x, 1); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    v[r + 1].emplace_back(x, -1); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) { /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    int x, l, r; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %d", &x, &l, &r); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    if (l == 0 && r == 1e6) ++answer; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    q[i] = {x, l, r}; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  std::sort(q + 1, q + m + 1, cmp); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int cur = 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 39 slow_hit_count: 2, fast_hit_count: 2 */
    while (cur <= q[i].x) { /* line 40 slow_hit_count: 584398, fast_hit_count: 120929 */
      for (auto j : v[cur]) { /* line 41 slow_hit_count: 584398, fast_hit_count: 120928 */
        bit.update(j.first, j.second); /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      ++cur; /* line 44 slow_hit_count: 584397, fast_hit_count: 120928 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    answer += bit.query(q[i].r) - bit.query(q[i].l - 1); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", answer); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C program, we begin with Phase 1, identifying the expensive or inefficient code segments.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The slow input has significantly higher hit counts on lines 40 and 41 compared to the fast input. For the slow input, line 40 is hit 584,398 times, and line 41 is hit 584,398 times as well, whereas these lines are hit only 120,929 and 120,928 times respectively for the fast input.
   - These lines are part of a loop that processes segments using a Fenwick Tree (BIT).

2. **Focus on the Inner Loop (Lines 40-44):**
   - The while loop at line 40 is conditionally executed based on the positional value `cur` relative to `q[i].x`. The loop increments `cur` and updates the BIT for each `cur` until it surpasses `q[i].x`.
   - The high hit count indicates that this loop runs many more times for the slow input, suggesting extensive processing of segments.

3. **Data Structure Interaction:**
   - The vector `v[cur]` stores segment updates, which are applied in this loop (line 41). This results in a longer execution time when `cur` spans a large range.

4. **Potential Cause of Slowdown:**
   - The large value of `cur` traversing nearly the entire range of `x` on the coordinate plane (from 0 to `q[i].x`) for the slow input suggests that the segments described in the input, particularly vertical segments, influence how extensively the loop executes.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and understanding of the code, we derive the following performance-characterizing invariants:

1. **Invariant: Extensive Segment Range Processing**
   - **Natural Language Statement:**
     - "If a vertical segment extends over a large portion of the coordinate plane from a low starting point to a high endpoint, it results in extensive processing in the loop that updates the BIT, causing significant slowdowns."
   - **Rationale:**
     - The slow input's vertical segment spans nearly the full height of the plane (from 1 to 1000000), triggering many updates in the Fenwick Tree over a vast range of `cur`.

2. **Invariant: Large Intersection Range Handling**
   - **Natural Language Statement:**
     - "When horizontal or vertical segments intersect the maximum boundaries of the square, especially from one side to the other, the program must process a broad range of intersections, leading to performance degradation."
   - **Rationale:**
     - The intersections at the edges of the square cause full-range updates, which are computationally expensive due to the large number of entries in the BIT.

3. **Invariant: Input Pattern Effect on Query Execution**
   - **Natural Language Statement:**
     - "If the segments are structured such that one or more segments require processing of many intervening segments, this can increase the query count and slow the program."
   - **Rationale:**
     - A long vertical segment leads to numerous intervening horizontal segments being processed, increasing complexity and computational overhead.

These invariants focus on the broad conditions under which the performance declines, such as large ranges of segment processing and maximum boundary intersections, adhering to the problem constraints and avoiding reliance on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There is a square of size 10^6 × 10^6 on the coordinate plane with four points (0, 0), (0, 10^6), (10^6, 0), and (10^6, 10^6) as its vertices.

You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square.

Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.

Input

The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of horizontal segments and the number of vertical segments.

The next n lines contain descriptions of the horizontal segments. The i-th line contains three integers y_i, lx_i and rx_i (0 < y_i < 10^6; 0 ≤ lx_i < rx_i ≤ 10^6), which means the segment connects (lx_i, y_i) and (rx_i, y_i).

The next m lines contain descriptions of the vertical segments. The i-th line contains three integers x_i, ly_i and ry_i (0 < x_i < 10^6; 0 ≤ ly_i < ry_i ≤ 10^6), which means the segment connects (x_i, ly_i) and (x_i, ry_i).

It's guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square's sides.

Output

Print the number of pieces the square is divided into after drawing all the segments.

Example

Input


3 3
2 3 1000000
4 0 4
3 0 1000000
4 0 1
2 0 5
3 1 1000000


Output


7

Note

The sample is like this:

<image>

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived earlier in the form of runtime checks in C++. We'll then integrate these checks into the original program.

### Phase 3: Implement the Natural Language Invariants in C++

1. **Invariant: Extensive Segment Range Processing**
   ```cpp
   void check_extensive_segment_range(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - extensive segment range processing!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Large Intersection Range Handling**
   ```cpp
   void check_large_intersection_range(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large intersection range handling!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Input Pattern Effect on Query Execution**
   ```cpp
   void check_input_pattern_impact(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - input pattern affecting query execution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Here is the original code with the newly integrated performance checks:

```cpp
#include <bits/stdc++.h>

const int N = 1e6 + 5;

int lowbit(int x) { return x & -x; }

struct Fenwick {
    int c[N];
    void update(int x, int y) {
        for (; x < N; x += lowbit(x)) c[x] += y;
    }
    int query(int x) {
        int answer = 0;
        for (; x > 0; x ^= lowbit(x)) answer += c[x];
        return answer;
    }
} bit;

int n, m;
std::vector<std::pair<int, int>> v[N];
struct que {
    int x, l, r;
} q[N];

bool cmp(que x, que y) { return x.x < y.x; }

// Function to check extensive segment range processing
void check_extensive_segment_range(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive segment range processing!" << endl;
        abort();
    }
}

// Function to check large intersection range handling
void check_large_intersection_range(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large intersection range handling!" << endl;
        abort();
    }
}

// Function to check input pattern effect on query execution
void check_input_pattern_impact(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - input pattern affecting query execution!" << endl;
        abort();
    }
}

int main() {
    int64_t answer = 1;
    scanf("%d %d", &n, &m);
    
    for (int i = 1; i <= n; i++) {
        int x, l, r;
        scanf("%d %d %d", &x, &l, &r);
        if (l == 0 && r == 1e6) ++answer;
        v[l].emplace_back(x, 1);
        v[r + 1].emplace_back(x, -1);
    }
    
    for (int i = 1; i <= m; i++) {
        int x, l, r;
        scanf("%d %d %d", &x, &l, &r);
        if (l == 0 && r == 1e6) ++answer;
        q[i] = {x, l, r};
    }
    
    // Check large intersection range after input is read
    check_large_intersection_range((n > 0 && m > 0) && (q[1].l == 0 && q[1].r == 1e6));

    std::sort(q + 1, q + m + 1, cmp);
    
    int cur = 0;
    for (int i = 1; i <= m; i++) {
        while (cur <= q[i].x) {
            for (auto j : v[cur]) {
                bit.update(j.first, j.second);
            }
            ++cur;
        }
        // Check input pattern impact just before heavy query execution
        check_input_pattern_impact(q[i].r - q[i].l > 500000);

        // Check extensive segment range processing
        check_extensive_segment_range(cur > 900000);

        answer += bit.query(q[i].r) - bit.query(q[i].l - 1);
    }
    
    printf("%lld\n", answer);
    return 0;
}
```

### Explanation of Check Insertions

- **`check_large_intersection_range`**: Placed after reading input to flag scenarios that might involve horizontal/vertical segments spanning the entire square boundary.
- **`check_input_pattern_impact`**: Placed before query operations to detect configurations that might cause extensive query processing.
- **`check_extensive_segment_range`**: Placed inside the while loop to trigger when processing extensive ranges of `cur`, which can lead to performance hits.

By executing this instrumented code, the program will abort if any of the conditions that trigger performance bottlenecks are detected, thus helping identify slow scenarios.

