system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Heidi has finally found the mythical Tree of Life – a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.

On the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).

To decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree – these are paths of length 2, i.e., consisting of two edges. Help her!

Input

The first line of the input contains a single integer n – the number of vertices in the tree (1 ≤ n ≤ 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b – the labels of the vertices connected by the edge (1 ≤ a < b ≤ n). It is guaranteed that the input represents a tree.

Output

Print one integer – the number of lifelines in the tree.

Examples

Input

4
1 2
1 3
1 4


Output

3

Input

5
1 2
2 3
3 4
3 5


Output

4

Note

In the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int maxx, l, k, minn, w, d, n, m, x, z, y, a[100001], b, np, nl, c, p;
queue<int> s;
vector<long long int> v[100001];
bool mark[100001], markk[100001];
void clean(queue<int> &s) {
  while (!s.empty()) s.pop();
}
int main() {
  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  for (int i = 1; i <= n; i++) {
    fill(a, a + 100001, 0);
    fill(mark, mark + 100001, 0);
    a[i] = 0;
    s.push(i);
    l = 1;
    while (s.size() != 0 && l != 0) {
      k = s.front();
      s.pop();
      z = v[k].size();
      for (int j = 0; j < z; j++) {
        if (mark[v[k][j]] == 0) {
          s.push(v[k][j]);
          mark[v[k][j]] = 1;
          a[v[k][j]] = a[k] + 1;
          if (a[v[k][j]] == 2 && v[k][j] > i) p++;
          if (a[v[k][j]] == 4) {
            l = 0;
          }
        }
      }
    }
    clean(s);
  }
  cout << p;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5 2
1 2
9 3
10 5
6 3
8 5
2 7
2 3
9 4


(G.2) Fast Input

5
1 2
1 3
3 4
3 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int maxx, l, k, minn, w, d, n, m, x, z, y, a[100001], b, np, nl, c, p; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
queue<int> s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> v[100001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool mark[100001], markk[100001]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void clean(queue<int> &s) { /* line 7 slow_hit_count: 31, fast_hit_count: 5 */
  while (!s.empty()) s.pop(); /* line 8 slow_hit_count: 31, fast_hit_count: 5 */
} /* line 9 slow_hit_count: 10, fast_hit_count: 5 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n - 1; i++) { /* line 12 slow_hit_count: 10, fast_hit_count: 5 */
    cin >> x >> y; /* line 13 slow_hit_count: 9, fast_hit_count: 4 */
    v[x].push_back(y); /* line 14 slow_hit_count: 9, fast_hit_count: 4 */
    v[y].push_back(x); /* line 15 slow_hit_count: 9, fast_hit_count: 4 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 17 slow_hit_count: 11, fast_hit_count: 6 */
    fill(a, a + 100001, 0); /* line 18 slow_hit_count: 10, fast_hit_count: 5 */
    fill(mark, mark + 100001, 0); /* line 19 slow_hit_count: 10, fast_hit_count: 5 */
    a[i] = 0; /* line 20 slow_hit_count: 10, fast_hit_count: 5 */
    s.push(i); /* line 21 slow_hit_count: 10, fast_hit_count: 5 */
    l = 1; /* line 22 slow_hit_count: 10, fast_hit_count: 5 */
    while (s.size() != 0 && l != 0) { /* line 23 slow_hit_count: 95, fast_hit_count: 35 */
      k = s.front(); /* line 24 slow_hit_count: 85, fast_hit_count: 30 */
      s.pop(); /* line 25 slow_hit_count: 85, fast_hit_count: 30 */
      z = v[k].size(); /* line 26 slow_hit_count: 85, fast_hit_count: 30 */
      for (int j = 0; j < z; j++) { /* line 27 slow_hit_count: 254, fast_hit_count: 78 */
        if (mark[v[k][j]] == 0) { /* line 28 slow_hit_count: 169, fast_hit_count: 48 */
          s.push(v[k][j]); /* line 29 slow_hit_count: 96, fast_hit_count: 25 */
          mark[v[k][j]] = 1; /* line 30 slow_hit_count: 96, fast_hit_count: 25 */
          a[v[k][j]] = a[k] + 1; /* line 31 slow_hit_count: 96, fast_hit_count: 25 */
          if (a[v[k][j]] == 2 && v[k][j] > i) p++; /* line 32 slow_hit_count: 96, fast_hit_count: 25 */
          if (a[v[k][j]] == 4) { /* line 33 slow_hit_count: 96, fast_hit_count: 25 */
            l = 0; /* line 34 slow_hit_count: 14, fast_hit_count: 0 */
          } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    clean(s); /* line 39 slow_hit_count: 10, fast_hit_count: 5 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << p; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After comparing the line-level hit counts of the slow and fast inputs, the following observations are made:

1. **Loop Over Vertices**: The outer loop at line 17, which iterates over each vertex from 1 to n, is executed more times in the slow input. This suggests the slow input has some structural properties that lead to increased computation per vertex.

2. **Breadth-First Search (BFS) Loop**: The loop starting at line 23 uses a queue for BFS, and this loop's execution significantly increases in the slow input. This indicates that the BFS traversals are covering more nodes or paths in the slow input, thus requiring more processing time.

3. **Inner Loop Over Neighbors**: Lines 27-32, which iterate over the neighbors of a node, have a much higher hit count in the slow input. This suggests that nodes in the slow input have more neighbors, leading to increased iterations and operations.

4. **Condition Check for Path Length**: The check at line 32, where paths of length 2 (lifelines) are counted, sees a higher hit count. This implies more potential paths of length 2 are being processed.

5. **Loop Termination Condition**: The check at line 33 for a path length of 4 suggests that paths in the slow input extend further, causing earlier termination of BFS in some cases.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis and hit counts, the following performance-characterizing invariants are identified:

1. **Dense Node Connectivity**: 
   - **Invariant**: "If the tree has nodes with high connectivity (many neighbors), the BFS algorithm processes more paths, leading to increased execution time."
   - **Explanation**: Trees with nodes that have a high degree (many edges) will result in more iterations in the inner loop, thus increasing the overall path calculations for lifelines.

2. **High Branching Factor in BFS**:
   - **Invariant**: "When nodes explored in the BFS have high branching factors, the number of potential lifelines increases, causing the program to slow."
   - **Explanation**: A high branching factor means each node connects to many others, causing BFS to explore many paths and increasing the likelihood of path of length 2.

3. **Extended Path Exploration**:
   - **Invariant**: "If the BFS frequently approaches paths of length 4, it may prematurely terminate exploration for some nodes, indicating inefficient handling of deep paths."
   - **Explanation**: Paths extending close to length 4 trigger the condition at line 33 and suggest inefficiencies if such paths are frequently approached but not contributing to lifeline counts.

4. **Large Search Space**:
   - **Invariant**: "For trees where BFS must traverse a large search space due to the structure, the algorithm can become inefficient."
   - **Explanation**: Trees that require extended exploration due to their structure (many nodes connected indirectly) will create more BFS work, especially if many paths are evaluated before the length condition.

By understanding these invariants, the program's performance issues can be better anticipated and addressed, especially for similar tree structures that might emerge in future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Heidi has finally found the mythical Tree of Life – a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.

On the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).

To decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree – these are paths of length 2, i.e., consisting of two edges. Help her!

Input

The first line of the input contains a single integer n – the number of vertices in the tree (1 ≤ n ≤ 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b – the labels of the vertices connected by the edge (1 ≤ a < b ≤ n). It is guaranteed that the input represents a tree.

Output

Print one integer – the number of lifelines in the tree.

Examples

Input

4
1 2
1 3
1 4


Output

3

Input

5
1 2
2 3
3 4
3 5


Output

4

Note

In the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing the natural language invariants as runtime checks:

1. **Dense Node Connectivity**:
   ```cpp
   void check_dense_node_connectivity(int nodeDegree) {
       if (nodeDegree > 10) { // Assume a threshold for high connectivity
           cerr << "Warning: Performance bottleneck condition triggered - dense node connectivity!" << endl;
           abort();
       }
   }
   ```

2. **High Branching Factor in BFS**:
   ```cpp
   void check_high_branching_factor(int branchingFactor) {
       if (branchingFactor > 10) { // Assume a threshold for high branching factor
           cerr << "Warning: Performance bottleneck condition triggered - high branching factor in BFS!" << endl;
           abort();
       }
   }
   ```

3. **Extended Path Exploration**:
   ```cpp
   void check_extended_path_exploration(int pathLength) {
       if (pathLength >= 4) {
           cerr << "Warning: Performance bottleneck condition triggered - extended path exploration!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Below is the instrumented C++ code with integrated performance checkers. Comments are added for each check to explain which bottleneck it detects:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long int maxx, l, k, minn, w, d, n, m, x, z, y, a[100001], b, np, nl, c, p;
queue<int> s;
vector<long long int> v[100001];
bool mark[100001], markk[100001];

void clean(queue<int> &s) {
    while (!s.empty()) s.pop();
}

// Checker for dense node connectivity
void check_dense_node_connectivity(int nodeDegree) {
    if (nodeDegree > 10) { // Assume a threshold for high connectivity
        cerr << "Warning: Performance bottleneck condition triggered - dense node connectivity!" << endl;
        abort();
    }
}

// Checker for high branching factor in BFS
void check_high_branching_factor(int branchingFactor) {
    if (branchingFactor > 10) { // Assume a threshold for high branching factor
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor in BFS!" << endl;
        abort();
    }
}

// Checker for extended path exploration
void check_extended_path_exploration(int pathLength) {
    if (pathLength >= 4) {
        cerr << "Warning: Performance bottleneck condition triggered - extended path exploration!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    for (int i = 0; i < n - 1; i++) {
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    
    for (int i = 1; i <= n; i++) {
        fill(a, a + 100001, 0);
        fill(mark, mark + 100001, 0);
        a[i] = 0;
        s.push(i);
        l = 1;
        while (s.size() != 0 && l != 0) {
            k = s.front();
            s.pop();
            z = v[k].size();
            
            // Check dense node connectivity
            check_dense_node_connectivity(z);
            
            for (int j = 0; j < z; j++) {
                if (mark[v[k][j]] == 0) {
                    s.push(v[k][j]);
                    mark[v[k][j]] = 1;
                    a[v[k][j]] = a[k] + 1;

                    // Check path length
                    check_extended_path_exploration(a[v[k][j]]);
                    
                    if (a[v[k][j]] == 2 && v[k][j] > i) p++;
                    if (a[v[k][j]] == 4) {
                        l = 0;
                    }
                }
            }
        }
        clean(s);
    }
    
    cout << p;
    return 0;
}
```

### Summary of Changes:
- **Dense Node Connectivity**: Added a check to monitor the degree of each node and trigger a warning if it exceeds a threshold.
- **High Branching Factor in BFS**: While the current program does not directly expose a branching factor, the same logic applies to node degree, which is checked.
- **Extended Path Exploration**: Added a check for path lengths reaching 4 during BFS, as this indicates potential inefficiencies.

These checks help to identify performance bottlenecks related to tree structure, ensuring that the program remains efficient across different inputs.

