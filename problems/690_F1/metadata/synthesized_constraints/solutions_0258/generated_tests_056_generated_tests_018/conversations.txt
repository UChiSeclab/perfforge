system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Heidi has finally found the mythical Tree of Life – a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.

On the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).

To decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree – these are paths of length 2, i.e., consisting of two edges. Help her!

Input

The first line of the input contains a single integer n – the number of vertices in the tree (1 ≤ n ≤ 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b – the labels of the vertices connected by the edge (1 ≤ a < b ≤ n). It is guaranteed that the input represents a tree.

Output

Print one integer – the number of lifelines in the tree.

Examples

Input

4
1 2
1 3
1 4


Output

3

Input

5
1 2
2 3
3 4
3 5


Output

4

Note

In the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MAXN = 1e4 + 200;
long long n, ans;
vector<long long> adj[MAXN];
bool mark[MAXN];
void dfs(long long x, long long cnt) {
  if (cnt == 2) {
    ans++;
    return;
  }
  mark[x] = 1;
  for (int i = 0; i < (long long)adj[x].size(); i++) {
    if (mark[adj[x][i]] == 0) {
      dfs(adj[x][i], cnt + 1);
    }
  }
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (long long i = 0; i < n - 1; i++) {
    long long x, y;
    cin >> x >> y;
    adj[x].push_back(y);
    adj[y].push_back(x);
  }
  for (long long i = 1; i <= n; i++) {
    dfs(i, 0);
    fill(mark, mark + MAXN, 0);
  }
  cout << ans / 2 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
5 2
1 2
9 5
10 5
6 3
8 10
2 7
1 3
1 4


(G.2) Fast Input

5
1 2
1 3
1 4
3 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAXN = 1e4 + 200; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> adj[MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool mark[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(long long x, long long cnt) { /* line 7 slow_hit_count: 50, fast_hit_count: 21 */
  if (cnt == 2) { /* line 8 slow_hit_count: 50, fast_hit_count: 21 */
    ans++; /* line 9 slow_hit_count: 22, fast_hit_count: 8 */
    return; /* line 10 slow_hit_count: 22, fast_hit_count: 8 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  mark[x] = 1; /* line 12 slow_hit_count: 28, fast_hit_count: 13 */
  for (int i = 0; i < (long long)adj[x].size(); i++) { /* line 13 slow_hit_count: 86, fast_hit_count: 37 */
    if (mark[adj[x][i]] == 0) { /* line 14 slow_hit_count: 58, fast_hit_count: 24 */
      dfs(adj[x][i], cnt + 1); /* line 15 slow_hit_count: 40, fast_hit_count: 16 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n - 1; i++) { /* line 24 slow_hit_count: 10, fast_hit_count: 5 */
    long long x, y; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 26 slow_hit_count: 9, fast_hit_count: 4 */
    adj[x].push_back(y); /* line 27 slow_hit_count: 9, fast_hit_count: 4 */
    adj[y].push_back(x); /* line 28 slow_hit_count: 9, fast_hit_count: 4 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 30 slow_hit_count: 11, fast_hit_count: 6 */
    dfs(i, 0); /* line 31 slow_hit_count: 10, fast_hit_count: 5 */
    fill(mark, mark + MAXN, 0); /* line 32 slow_hit_count: 10, fast_hit_count: 5 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans / 2 << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program's performance bottlenecks and generate performance-characterizing invariants, let's go through the provided code and hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The function `dfs` is called more frequently in the slow input than in the fast input. In particular, the lines inside the `dfs` function (lines 8 to 15) have significantly higher hit counts in the slow input.
   - The loop at line 13 inside the `dfs` function is hit 86 times in the slow run compared to 37 times in the fast run.
   - The condition at line 14 and subsequent recursive call at line 15 suggest that recursion deepens or branches more frequently in the slow run.
   
2. **Potential Causes of Slowdown:**
   - The structure of the tree in the slow input likely causes more recursive calls, especially when there are branches that lead to deeper or more frequent recursive traversals.
   - The `dfs` function's depth and the branching factor can significantly increase for trees with specific structures, causing the increased hit counts.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some potential performance-characterizing invariants in natural language:

1. **Invariant on Recursion Depth and Branching:**
   - **Natural Language Description:** "If the tree contains vertices with a high degree of connections (i.e., high branching factor), the depth-first search will explore many paths, potentially leading to more recursive calls and thus slowing down the algorithm."
   - **Conditions to Monitor:** Monitor if a vertex has a degree close to the maximum possible (n - 1), as this suggests a high branching factor.

2. **Invariant on Tree Structure:**
   - **Natural Language Description:** "When the tree structure allows for repeated exploration of shared sub-paths across multiple branches, recursive traversal may become excessive, leading to performance degradation."
   - **Conditions to Monitor:** Track the degree of nodes and their distribution across the tree to identify potential sub-structures that are heavily retraversed.

3. **Invariant on Tree Density:**
   - **Natural Language Description:** "If the tree has dense connectivity in a localized area (many nodes connected to a few central nodes), the computation may slow down due to repeated checks and traversals over these densely connected nodes."
   - **Conditions to Monitor:** Check if there are nodes with degrees significantly larger than others, suggesting localized density.

4. **Invariant on Node Degrees:**
   - **Natural Language Description:** "A slowdown can occur when a single node or a few nodes have a significantly higher number of edges, causing the depth-first search to recurse deeply or repeatedly from these nodes."
   - **Conditions to Monitor:** Identify nodes with degree values approaching or exceeding a threshold, such as a proportion of the total number of nodes (like degree > n/2).

These invariants help identify scenarios where the algorithm encounters performance issues due to the tree's structure, potentially applicable to future similar inputs. By focusing on node degrees, branching factors, and the tree's density, we can better predict when the code might experience slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Heidi has finally found the mythical Tree of Life – a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.

On the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).

To decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree – these are paths of length 2, i.e., consisting of two edges. Help her!

Input

The first line of the input contains a single integer n – the number of vertices in the tree (1 ≤ n ≤ 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b – the labels of the vertices connected by the edge (1 ≤ a < b ≤ n). It is guaranteed that the input represents a tree.

Output

Print one integer – the number of lifelines in the tree.

Examples

Input

4
1 2
1 3
1 4


Output

3

Input

5
1 2
2 3
3 4
3 5


Output

4

Note

In the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, I will implement the performance-characterizing invariants as C++ check functions:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Check if a node has a high degree, indicating potential slowdowns due to high branching factor
void check_high_branching_factor(int degree, int threshold) {
    if (degree > threshold) {
        cerr << "Warning: High branching factor detected at a node!" << endl;
        abort();
    }
}

// Check if a node is part of a densely connected region, which can cause repeated traversals
void check_dense_connectivity(int degree, int n) {
    if (degree > n / 2) {  // Arbitrary threshold, could be adjusted
        cerr << "Warning: Dense connectivity detected at a node!" << endl;
        abort();
    }
}

// Function to detect if the tree structure suggests repeated exploration of sub-paths
void check_repeated_subpaths(int degree) {
    if (degree > 5) {  // Arbitrary threshold for repeated sub-paths
        cerr << "Warning: Potential for repeated sub-paths detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original C++ Program

Now, let's integrate these checks into the original program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
const long long MAXN = 1e4 + 200;
long long n, ans;
vector<long long> adj[MAXN];
bool mark[MAXN];

// Check if a node has a high degree, indicating potential slowdowns due to high branching factor
void check_high_branching_factor(int degree, int threshold) {
    if (degree > threshold) {
        cerr << "Warning: High branching factor detected at a node!" << endl;
        abort();
    }
}

// Check if a node is part of a densely connected region, which can cause repeated traversals
void check_dense_connectivity(int degree, int n) {
    if (degree > n / 2) {  // Arbitrary threshold, could be adjusted
        cerr << "Warning: Dense connectivity detected at a node!" << endl;
        abort();
    }
}

// Function to detect if the tree structure suggests repeated exploration of sub-paths
void check_repeated_subpaths(int degree) {
    if (degree > 5) {  // Arbitrary threshold for repeated sub-paths
        cerr << "Warning: Potential for repeated sub-paths detected!" << endl;
        abort();
    }
}

void dfs(long long x, long long cnt) {
    if (cnt == 2) {
        ans++;
        return;
    }
    mark[x] = 1;
    for (int i = 0; i < (long long)adj[x].size(); i++) {
        if (mark[adj[x][i]] == 0) {
            dfs(adj[x][i], cnt + 1);
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n;
    for (long long i = 0; i < n - 1; i++) {
        long long x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    // Check for high branching factor and dense connectivity
    for (long long i = 1; i <= n; i++) {
        int degree = adj[i].size();
        check_high_branching_factor(degree, 10);  // Example threshold
        check_dense_connectivity(degree, n);
        check_repeated_subpaths(degree);
    }

    for (long long i = 1; i <= n; i++) {
        dfs(i, 0);
        fill(mark, mark + MAXN, 0);
    }
    cout << ans / 2 << endl;
}
```

### Explanation:
- **`check_high_branching_factor`:** This checks if any node has a degree greater than a set threshold, indicating a high branching factor.
- **`check_dense_connectivity`:** This checks if any node has a degree greater than half the total number of nodes, indicating dense connectivity.
- **`check_repeated_subpaths`:** This checks if the degree of a node exceeds a particular value, suggesting repeated sub-paths.

These checks are invoked after the adjacency list is constructed, ensuring that any structural properties that may cause performance bottlenecks are identified early in the program's execution.

