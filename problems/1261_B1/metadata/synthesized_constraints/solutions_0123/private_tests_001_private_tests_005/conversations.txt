system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

This is the easier version of the problem. In this version 1 ≤ n, m ≤ 100. You can hack this problem only if you solve and lock both problems.

You are given a sequence of integers a=[a_1,a_2,...,a_n] of length n. Its subsequence is obtained by removing zero or more elements from the sequence a (they do not necessarily go consecutively). For example, for the sequence a=[11,20,11,33,11,20,11]:

  * [11,20,11,33,11,20,11], [11,20,11,33,11,20], [11,11,11,11], [20], [33,20] are subsequences (these are just some of the long list); 
  * [40], [33,33], [33,20,20], [20,20,11,11] are not subsequences. 



Suppose that an additional non-negative integer k (1 ≤ k ≤ n) is given, then the subsequence is called optimal if:

  * it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k; 
  * and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. 



Recall that the sequence b=[b_1, b_2, ..., b_k] is lexicographically smaller than the sequence c=[c_1, c_2, ..., c_k] if the first element (from the left) in which they differ less in the sequence b than in c. Formally: there exists t (1 ≤ t ≤ k) such that b_1=c_1, b_2=c_2, ..., b_{t-1}=c_{t-1} and at the same time b_t<c_t. For example:

  * [10, 20, 20] lexicographically less than [10, 21, 1], 
  * [7, 99, 99] is lexicographically less than [10, 21, 1], 
  * [10, 21, 0] is lexicographically less than [10, 21, 1]. 



You are given a sequence of a=[a_1,a_2,...,a_n] and m requests, each consisting of two numbers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j). For each query, print the value that is in the index pos_j of the optimal subsequence of the given sequence a for k=k_j.

For example, if n=4, a=[10,20,30,20], k_j=2, then the optimal subsequence is [20,30] — it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_j=2, pos_j=1 is the number 20, and the answer to the request k_j=2, pos_j=2 is the number 30.

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence a.

The second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).

The third line contains an integer m (1 ≤ m ≤ 100) — the number of requests.

The following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests.

Output

Print m integers r_1, r_2, ..., r_m (1 ≤ r_j ≤ 10^9) one per line: answers to the requests in the order they appear in the input. The value of r_j should be equal to the value contained in the position pos_j of the optimal subsequence for k=k_j.

Examples

Input


3
10 20 10
6
1 1
2 1
2 2
3 1
3 2
3 3


Output


20
10
20
10
20
10


Input


7
1 2 1 3 1 2 1
9
2 1
2 2
3 1
3 2
3 3
1 1
7 1
7 7
7 4


Output


2
3
2
3
2
3
1
1
3

Note

In the first example, for a=[10,20,10] the optimal subsequences are: 

  * for k=1: [20], 
  * for k=2: [10,20], 
  * for k=3: [10,20,10]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long MOD = 1e9 + 7;
const long long maxn = 2e5 + 5;
long long a[maxn];
long long n, m, t;
vector<long long> v;
vector<long long> temp;
unordered_map<long long, long long> mymap;
unordered_map<long long, long long> current;
long long help(long long id, long long x) {
  current.clear();
  long long index = -1;
  for (long long i = id; i <= t - 1; i++) {
    if (temp[i] == x) {
      index = i;
      break;
    }
  }
  for (long long i = index; i <= t - 1; i++) {
    current[temp[i]]++;
  }
  for (auto it : mymap) {
    if (current[it.first] < it.second) return -1;
  }
  return index;
}
long long f(long long k, long long pos) {
  set<long long> s;
  temp.clear();
  mymap.clear();
  for (long long i = 0; i < k; ++i) {
    mymap[v[i]]++;
    s.insert(v[i]);
  }
  vector<long long> flag;
  for (auto it : s) flag.emplace_back(it);
  for (long long i = 1; i <= n; ++i) {
    if (mymap[a[i]]) temp.emplace_back(a[i]);
  }
  vector<long long> ans;
  long long prev = 0;
  t = temp.size();
  while (ans.size() != k) {
    for (auto it : flag) {
      if (mymap[it] == 0) continue;
      long long id = help(prev, it);
      if (id != -1) {
        ans.emplace_back(it);
        prev = id + 1;
        mymap[it]--;
        break;
      }
    }
    if (ans.size() == pos) return ans.back();
  }
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  ;
  cin >> n;
  for (long long i = 1; i <= n; i++) cin >> a[i], v.emplace_back(a[i]);
  cin >> m;
  sort(v.begin(), v.end());
  reverse(v.begin(), v.end());
  while (m--) {
    long long k, pos;
    cin >> k >> pos;
    cout << f(k, pos) << endl;
    ;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
3 1 4 1 2
15
5 5
5 4
5 3
5 2
5 1
4 4
4 3
4 2
4 1
3 3
3 2
3 1
2 2
2 1
1 1


(G.2) Fast Input

1
1000000000
1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long maxn = 2e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long a[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, t; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> temp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, long long> mymap; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, long long> current; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long help(long long id, long long x) { /* line 11 slow_hit_count: 66, fast_hit_count: 1 */
  current.clear(); /* line 12 slow_hit_count: 66, fast_hit_count: 1 */
  long long index = -1; /* line 13 slow_hit_count: 66, fast_hit_count: 1 */
  for (long long i = id; i <= t - 1; i++) { /* line 14 slow_hit_count: 133, fast_hit_count: 1 */
    if (temp[i] == x) { /* line 15 slow_hit_count: 133, fast_hit_count: 1 */
      index = i; /* line 16 slow_hit_count: 66, fast_hit_count: 1 */
      break; /* line 17 slow_hit_count: 66, fast_hit_count: 1 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = index; i <= t - 1; i++) { /* line 20 slow_hit_count: 241, fast_hit_count: 2 */
    current[temp[i]]++; /* line 21 slow_hit_count: 175, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it : mymap) { /* line 23 slow_hit_count: 251, fast_hit_count: 2 */
    if (current[it.first] < it.second) return -1; /* line 24 slow_hit_count: 216, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return index; /* line 26 slow_hit_count: 35, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long k, long long pos) { /* line 28 slow_hit_count: 15, fast_hit_count: 1 */
  set<long long> s; /* line 29 slow_hit_count: 15, fast_hit_count: 1 */
  temp.clear(); /* line 30 slow_hit_count: 15, fast_hit_count: 1 */
  mymap.clear(); /* line 31 slow_hit_count: 15, fast_hit_count: 1 */
  for (long long i = 0; i < k; ++i) { /* line 32 slow_hit_count: 70, fast_hit_count: 2 */
    mymap[v[i]]++; /* line 33 slow_hit_count: 55, fast_hit_count: 1 */
    s.insert(v[i]); /* line 34 slow_hit_count: 55, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> flag; /* line 36 slow_hit_count: 15, fast_hit_count: 1 */
  for (auto it : s) flag.emplace_back(it); /* line 37 slow_hit_count: 65, fast_hit_count: 2 */
  for (long long i = 1; i <= n; ++i) { /* line 38 slow_hit_count: 90, fast_hit_count: 2 */
    if (mymap[a[i]]) temp.emplace_back(a[i]); /* line 39 slow_hit_count: 75, fast_hit_count: 1 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> ans; /* line 41 slow_hit_count: 15, fast_hit_count: 1 */
  long long prev = 0; /* line 42 slow_hit_count: 15, fast_hit_count: 1 */
  t = temp.size(); /* line 43 slow_hit_count: 15, fast_hit_count: 1 */
  while (ans.size() != k) { /* line 44 slow_hit_count: 35, fast_hit_count: 1 */
    for (auto it : flag) { /* line 45 slow_hit_count: 78, fast_hit_count: 1 */
      if (mymap[it] == 0) continue; /* line 46 slow_hit_count: 78, fast_hit_count: 1 */
      long long id = help(prev, it); /* line 47 slow_hit_count: 66, fast_hit_count: 1 */
      if (id != -1) { /* line 48 slow_hit_count: 66, fast_hit_count: 1 */
        ans.emplace_back(it); /* line 49 slow_hit_count: 35, fast_hit_count: 1 */
        prev = id + 1; /* line 50 slow_hit_count: 35, fast_hit_count: 1 */
        mymap[it]--; /* line 51 slow_hit_count: 35, fast_hit_count: 1 */
        break; /* line 52 slow_hit_count: 35, fast_hit_count: 1 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans.size() == pos) return ans.back(); /* line 55 slow_hit_count: 50, fast_hit_count: 2 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) cin >> a[i], v.emplace_back(a[i]); /* line 62 slow_hit_count: 6, fast_hit_count: 2 */
  cin >> m; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  sort(v.begin(), v.end()); /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(v.begin(), v.end()); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  while (m--) { /* line 66 slow_hit_count: 16, fast_hit_count: 2 */
    long long k, pos; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> k >> pos; /* line 68 slow_hit_count: 15, fast_hit_count: 1 */
    cout << f(k, pos) << endl; /* line 69 slow_hit_count: 15, fast_hit_count: 1 */
    ; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided problem statement and the hit count information, let's analyze the code to identify performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Lines:**
   - The `help` function (Lines 11-26) has high hit counts, especially within its loops and conditional checks. This function clears a map, searches for an element, and checks conditions in another loop, which can be computationally expensive.
   - The loop inside function `f` (Lines 44-55) and the calls to `help` within it are also hit multiple times, indicating repeated operations.

2. **Data Structure Interactions:**
   - `unordered_map` is used to keep track of elements, and frequent clearing and updating (Lines 12, 31, 46, 51) can cause overhead.
   - The `temp` vector is rebuilt often, potentially leading to inefficient use of resources (Lines 30, 39).

3. **Loops and Recursion:**
   - The first loop in the `help` function scans from `id` to `t-1` to find a target value, which could be linear in the worst case.
   - The second loop in `help` counts occurrences of elements, iterating from the found `index` to `t-1`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the expensive operations and their interaction with input constraints, here are some performance-characterizing invariants:

1. **Subsequence Search Overhead:**
   - **Natural Language Description:** "If the sequence length `n` is large and the number of requests `m` is high, especially when `k` is close to `n`, the repeated search for optimal subsequences can cause performance degradation. This is due to frequent iterations over large parts of the sequence for each request."
   - **Example Implementation:**
     ```cpp
     void check_subsequence_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: subsequence_invariant triggered - excessive subsequence searches" << endl;
             abort();
         }
     }

     check_subsequence_invariant(n > 80 && m > 80); // Example threshold
     ```

2. **Map and Vector Resizing Overhead:**
   - **Natural Language Description:** "If the sequence contains many unique large elements and the operations frequently clear and repopulate data structures, the overhead of map and vector resizing can slow the program significantly."
   - **Example Implementation:**
     ```cpp
     void check_map_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: map_invariant triggered - high data structure overhead" << endl;
             abort();
         }
     }

     check_map_invariant(mymap.size() > 50); // Example threshold for high unique count
     ```

3. **Repeated Element Checks:**
   - **Natural Language Description:** "When the sequence is long and contains many repeated elements, the repeated checking and counting of these elements in nested loops can lead to performance issues."
   - **Example Implementation:**
     ```cpp
     void check_repeated_elements_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: repeated_elements_invariant triggered - high repetition checks" << endl;
             abort();
         }
     }

     check_repeated_elements_invariant(n > 90); // Example threshold
     ```

By placing these checks strategically, potentially outside of tight loops, we can help identify conditions that trigger performance slowdowns without significantly degrading the performance of the typical execution path. These invariants are designed to help detect and diagnose cases where the program might slow down due to inefficient data structure and loop management related to the input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
This is the easier version of the problem. In this version 1 ≤ n, m ≤ 100. You can hack this problem only if you solve and lock both problems.

You are given a sequence of integers a=[a_1,a_2,...,a_n] of length n. Its subsequence is obtained by removing zero or more elements from the sequence a (they do not necessarily go consecutively). For example, for the sequence a=[11,20,11,33,11,20,11]:

  * [11,20,11,33,11,20,11], [11,20,11,33,11,20], [11,11,11,11], [20], [33,20] are subsequences (these are just some of the long list); 
  * [40], [33,33], [33,20,20], [20,20,11,11] are not subsequences. 



Suppose that an additional non-negative integer k (1 ≤ k ≤ n) is given, then the subsequence is called optimal if:

  * it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k; 
  * and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. 



Recall that the sequence b=[b_1, b_2, ..., b_k] is lexicographically smaller than the sequence c=[c_1, c_2, ..., c_k] if the first element (from the left) in which they differ less in the sequence b than in c. Formally: there exists t (1 ≤ t ≤ k) such that b_1=c_1, b_2=c_2, ..., b_{t-1}=c_{t-1} and at the same time b_t<c_t. For example:

  * [10, 20, 20] lexicographically less than [10, 21, 1], 
  * [7, 99, 99] is lexicographically less than [10, 21, 1], 
  * [10, 21, 0] is lexicographically less than [10, 21, 1]. 



You are given a sequence of a=[a_1,a_2,...,a_n] and m requests, each consisting of two numbers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j). For each query, print the value that is in the index pos_j of the optimal subsequence of the given sequence a for k=k_j.

For example, if n=4, a=[10,20,30,20], k_j=2, then the optimal subsequence is [20,30] — it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_j=2, pos_j=1 is the number 20, and the answer to the request k_j=2, pos_j=2 is the number 30.

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence a.

The second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).

The third line contains an integer m (1 ≤ m ≤ 100) — the number of requests.

The following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests.

Output

Print m integers r_1, r_2, ..., r_m (1 ≤ r_j ≤ 10^9) one per line: answers to the requests in the order they appear in the input. The value of r_j should be equal to the value contained in the position pos_j of the optimal subsequence for k=k_j.

Examples

Input


3
10 20 10
6
1 1
2 1
2 2
3 1
3 2
3 3


Output


20
10
20
10
20
10


Input


7
1 2 1 3 1 2 1
9
2 1
2 2
3 1
3 2
3 3
1 1
7 1
7 7
7 4


Output


2
3
2
3
2
3
1
1
3

Note

In the first example, for a=[10,20,10] the optimal subsequences are: 

  * for k=1: [20], 
  * for k=2: [10,20], 
  * for k=3: [10,20,10]. 

Solution (C++ code):
{solution}


assistant: Let's proceed with the tasks as outlined. 

### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously inferred natural language descriptions, here are the runtime checks:

1. **Subsequence Search Overhead:**
   ```cpp
   void check_subsequence_invariant(long long n, long long m) {
       if (n > 80 && m > 80) { // Example threshold based on description
           cerr << "Warning: subsequence_invariant triggered - excessive subsequence searches" << endl;
           abort();
       }
   }
   ```

2. **Map and Vector Resizing Overhead:**
   ```cpp
   void check_map_invariant(const unordered_map<long long, long long>& mymap) {
       if (mymap.size() > 50) { // Example threshold for high unique count
           cerr << "Warning: map_invariant triggered - high data structure overhead" << endl;
           abort();
       }
   }
   ```

3. **Repeated Element Checks:**
   ```cpp
   void check_repeated_elements_invariant(long long n) {
       if (n > 90) { // Example threshold to detect high repetition
           cerr << "Warning: repeated_elements_invariant triggered - high repetition checks" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Now, let's integrate these checks into the provided C++ solution:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for excessive subsequence searches
void check_subsequence_invariant(long long n, long long m) {
    if (n > 80 && m > 80) {
        cerr << "Warning: subsequence_invariant triggered - excessive subsequence searches" << endl;
        abort();
    }
}

// Function to check for high data structure overhead
void check_map_invariant(const unordered_map<long long, long long>& mymap) {
    if (mymap.size() > 50) {
        cerr << "Warning: map_invariant triggered - high data structure overhead" << endl;
        abort();
    }
}

// Function to check for high repetition checks
void check_repeated_elements_invariant(long long n) {
    if (n > 90) {
        cerr << "Warning: repeated_elements_invariant triggered - high repetition checks" << endl;
        abort();
    }
}

long long MOD = 1e9 + 7;
const long long maxn = 2e5 + 5;
long long a[maxn];
long long n, m, t;
vector<long long> v;
vector<long long> temp;
unordered_map<long long, long long> mymap;
unordered_map<long long, long long> current;

long long help(long long id, long long x) {
    current.clear();
    long long index = -1;
    for (long long i = id; i <= t - 1; i++) {
        if (temp[i] == x) {
            index = i;
            break;
        }
    }
    for (long long i = index; i <= t - 1; i++) {
        current[temp[i]]++;
    }
    for (auto it : mymap) {
        if (current[it.first] < it.second) return -1;
    }
    return index;
}

long long f(long long k, long long pos) {
    set<long long> s;
    temp.clear();
    mymap.clear();
    for (long long i = 0; i < k; ++i) {
        mymap[v[i]]++;
        s.insert(v[i]);
    }
    vector<long long> flag;
    for (auto it : s) flag.emplace_back(it);
    for (long long i = 1; i <= n; ++i) {
        if (mymap[a[i]]) temp.emplace_back(a[i]);
    }
    vector<long long> ans;
    long long prev = 0;
    t = temp.size();
    while (ans.size() != k) {
        for (auto it : flag) {
            if (mymap[it] == 0) continue;
            long long id = help(prev, it);
            if (id != -1) {
                ans.emplace_back(it);
                prev = id + 1;
                mymap[it]--;
                break;
            }
        }
        if (ans.size() == pos) return ans.back();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin >> n;

    // Checking for high repetition checks
    check_repeated_elements_invariant(n);

    for (long long i = 1; i <= n; i++) cin >> a[i], v.emplace_back(a[i]);
    cin >> m;

    // Checking for excessive subsequence searches
    check_subsequence_invariant(n, m);

    sort(v.begin(), v.end());
    reverse(v.begin(), v.end());

    while (m--) {
        long long k, pos;
        cin >> k >> pos;
        cout << f(k, pos) << endl;
        // Check for map size within function
        check_map_invariant(mymap);
    }
    return 0;
}
```

### Explanation of Insertions:
- **`check_subsequence_invariant`** is called right after reading `n` and `m`, to ensure that the number of subsequence searches doesn't overwhelm the system.
- **`check_map_invariant`** is called after modifying `mymap` in `f()`, to ensure the map doesn't grow too large.
- **`check_repeated_elements_invariant`** is called immediately after input of `n` to handle cases of high repetition.

These checks help catch performance bottlenecks early without adding significant overhead to the tight loops.

