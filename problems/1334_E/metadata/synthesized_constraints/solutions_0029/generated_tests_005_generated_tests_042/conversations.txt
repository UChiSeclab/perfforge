system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a positive integer D. Let's build the following graph from it: 

  * each vertex is a divisor of D (not necessarily prime, 1 and D itself are also included); 
  * two vertices x and y (x > y) have an undirected edge between them if x is divisible by y and \frac x y is a prime; 
  * the weight of an edge is the number of divisors of x that are not divisors of y. 



For example, here is the graph for D=12: 

<image>

Edge (4,12) has weight 3 because 12 has divisors [1,2,3,4,6,12] and 4 has divisors [1,2,4]. Thus, there are 3 divisors of 12 that are not divisors of 4 — [3,6,12].

There is no edge between 3 and 2 because 3 is not divisible by 2. There is no edge between 12 and 3 because 12/3=4 is not a prime.

Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)] has length 1+2+2+3+1+2=11. The empty path has length 0.

So the shortest path between two vertices v and u is the path that has the minimal possible length.

Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_i and b_i are different edges.

You are given q queries of the following form: 

  * v u — calculate the number of the shortest paths between vertices v and u. 



The answer for each query might be large so print it modulo 998244353.

Input

The first line contains a single integer D (1 ≤ D ≤ 10^{15}) — the number the graph is built from.

The second line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.

Each of the next q lines contains two integers v and u (1 ≤ v, u ≤ D). It is guaranteed that D is divisible by both v and u (both v and u are divisors of D).

Output

Print q integers — for each query output the number of the shortest paths between the two given vertices modulo 998244353.

Examples

Input


12
3
4 4
12 1
3 4


Output


1
3
1


Input


1
1
1 1


Output


1


Input


288807105787200
4
46 482955026400
12556830686400 897
414 12556830686400
4443186242880 325


Output


547558588
277147129
457421435
702277623

Note

In the first example: 

  * The first query is only the empty path — length 0; 
  * The second query are paths [(12, 4), (4, 2), (2, 1)] (length 3+1+1=5), [(12, 6), (6, 2), (2, 1)] (length 2+2+1=5) and [(12, 6), (6, 3), (3, 1)] (length 2+2+1=5). 
  * The third query is only the path [(3, 1), (1, 2), (2, 4)] (length 1+1+1=3). 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100;
const int MOD = 998244353;
int fact[105];
int inv[105];
int lgput(int a, int b) {
  int ans = 1;
  for (; b; b >>= 1) {
    if (b & 1) ans = 1LL * ans * a % MOD;
    a = 1LL * a * a % MOD;
  }
  return ans;
}
map<long long, int> ways;
long long gcd(long long a, long long b) {
  while (b) {
    long long r = a % b;
    a = b;
    b = r;
  }
  return a;
}
int main() {
  long long d;
  scanf("%lld", &d);
  vector<long long> div;
  for (int i = 1; 1LL * i * i <= d; ++i) {
    if (d % i == 0) {
      div.push_back(i);
      if (d / i != i) div.push_back(d / i);
    }
  }
  vector<long long> pr;
  for (int i = 2; 1LL * i * i <= d; ++i) {
    if (d % i == 0) {
      pr.push_back(i);
      while (d % i == 0) d /= i;
    }
  }
  if (d > 1) pr.push_back(d);
  fact[0] = 1;
  for (int i = 1; i <= MAXN; ++i) fact[i] = 1LL * fact[i - 1] * i % MOD;
  inv[MAXN] = lgput(fact[MAXN], MOD - 2);
  for (int i = MAXN - 1; i >= 0; --i) inv[i] = 1LL * inv[i + 1] * (i + 1) % MOD;
  for (auto it : div) {
    int nr = 1;
    long long aux = it;
    int dd = 0;
    for (auto it1 : pr) {
      int d1 = 0;
      while (aux % it1 == 0) {
        d1++;
        aux /= it1;
      }
      dd += d1;
      nr = 1LL * nr * inv[d1] % MOD;
    }
    nr = 1LL * nr * fact[dd] % MOD;
    ways[it] = nr;
  }
  int q;
  scanf("%d", &q);
  for (int i = 1; i <= q; ++i) {
    long long u, v;
    scanf("%lld%lld", &u, &v);
    long long g = gcd(u, v);
    int ans1 = ways[u / g];
    int ans2 = ways[v / g];
    printf("%d\n", 1LL * ans1 * ans2 % MOD);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

17592186044416
1
17592186044416 2


(G.2) Fast Input

1
1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 998244353; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int fact[105]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int inv[105]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int lgput(int a, int b) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (; b; b >>= 1) { /* line 9 slow_hit_count: 31, fast_hit_count: 31 */
    if (b & 1) ans = 1LL * ans * a % MOD; /* line 10 slow_hit_count: 30, fast_hit_count: 30 */
    a = 1LL * a * a % MOD; /* line 11 slow_hit_count: 30, fast_hit_count: 30 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, int> ways; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
  while (b) { /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    long long r = a % b; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    a = b; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    b = r; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  long long d; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld", &d); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> div; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; 1LL * i * i <= d; ++i) { /* line 28 slow_hit_count: 4194305, fast_hit_count: 2 */
    if (d % i == 0) { /* line 29 slow_hit_count: 4194304, fast_hit_count: 1 */
      div.push_back(i); /* line 30 slow_hit_count: 23, fast_hit_count: 1 */
      if (d / i != i) div.push_back(d / i); /* line 31 slow_hit_count: 23, fast_hit_count: 1 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> pr; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; 1LL * i * i <= d; ++i) { /* line 35 slow_hit_count: 2, fast_hit_count: 1 */
    if (d % i == 0) { /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
      pr.push_back(i); /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
      while (d % i == 0) d /= i; /* line 38 slow_hit_count: 45, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (d > 1) pr.push_back(d); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  fact[0] = 1; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= MAXN; ++i) fact[i] = 1LL * fact[i - 1] * i % MOD; /* line 43 slow_hit_count: 101, fast_hit_count: 101 */
  inv[MAXN] = lgput(fact[MAXN], MOD - 2); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = MAXN - 1; i >= 0; --i) inv[i] = 1LL * inv[i + 1] * (i + 1) % MOD; /* line 45 slow_hit_count: 101, fast_hit_count: 101 */
  for (auto it : div) { /* line 46 slow_hit_count: 46, fast_hit_count: 2 */
    int nr = 1; /* line 47 slow_hit_count: 45, fast_hit_count: 1 */
    long long aux = it; /* line 48 slow_hit_count: 45, fast_hit_count: 1 */
    int dd = 0; /* line 49 slow_hit_count: 45, fast_hit_count: 1 */
    for (auto it1 : pr) { /* line 50 slow_hit_count: 90, fast_hit_count: 1 */
      int d1 = 0; /* line 51 slow_hit_count: 45, fast_hit_count: 0 */
      while (aux % it1 == 0) { /* line 52 slow_hit_count: 1035, fast_hit_count: 0 */
        d1++; /* line 53 slow_hit_count: 990, fast_hit_count: 0 */
        aux /= it1; /* line 54 slow_hit_count: 990, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      dd += d1; /* line 56 slow_hit_count: 45, fast_hit_count: 0 */
      nr = 1LL * nr * inv[d1] % MOD; /* line 57 slow_hit_count: 45, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    nr = 1LL * nr * fact[dd] % MOD; /* line 59 slow_hit_count: 45, fast_hit_count: 1 */
    ways[it] = nr; /* line 60 slow_hit_count: 45, fast_hit_count: 1 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  int q; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &q); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= q; ++i) { /* line 64 slow_hit_count: 2, fast_hit_count: 2 */
    long long u, v; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%lld%lld", &u, &v); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    long long g = gcd(u, v); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
    int ans1 = ways[u / g]; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    int ans2 = ways[v / g]; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%d\n", 1LL * ans1 * ans2 % MOD); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's analyze the hit count information and the code provided to identify potential performance bottlenecks:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The line `for (int i = 1; 1LL * i * i <= d; ++i)` at line 28 is executed 4,194,305 times in the slow input, compared to only 2 times in the fast input.
   - The lines within this loop, especially the divisor checks and additions to the vector `div`, are also hit significantly more times.
   - Another loop `for (auto it1 : pr)` at line 50 is executed 90 times in the slow input and only 1 time in the fast input.
   - The loop `while (aux % it1 == 0)` at line 52 is executed 1,035 times in the slow input, highlighting a potentially expensive operation related to factorization.

2. **Potential Bottleneck**:
   - The main bottleneck seems to be the divisor enumeration and factorization process when `d` is large or has many divisors.
   - Prime factorization and handling of divisors are computationally intensive steps, especially with large numbers like 17592186044416.

3. **Data Structures and Loops**:
   - The `div` vector grows significantly when `d` is large, causing repeated operations.
   - The nested loops iterating over `div` and `pr` (prime factors) contribute to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Based on Observations**:

   **Invariant #1**: 
   - **Natural Language**: "If the number `D` has a large number of divisors, the process of finding all divisors and subsequently prime factorizing them may result in significant slowdowns."
   - This is because the divisors contribute to the size of the loops iterating over them, leading to considerable computational cost when `D` is large.

   **Invariant #2**:
   - **Natural Language**: "When `D` is a large number or has a large prime factor, the iteration over potential divisors becomes expensive, particularly when checking divisibility and computing factorization."
   - This relates to the nested loop structure, where a large number of iterations are performed due to numerous divisor checks and factorization operations.

2. **Threshold Considerations**:
   - While the exact values of `D` are not specified in the problem constraints, any scenario where the divisor count or prime factorization depth increases significantly can trigger these invariants.
   - Particularly, when `D` has many small divisors or includes a large prime factor, the performance deteriorates.

3. **Utility for Fuzzing**:
   - These checks can help in fuzz-testing scenarios to identify slow-performing cases when `D` leads to extensive divisor and prime calculations.

By understanding how these invariants are triggered, we can better predict and manage the performance of the program under different input conditions, especially those involving large numbers or complex factorization landscapes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a positive integer D. Let's build the following graph from it: 

  * each vertex is a divisor of D (not necessarily prime, 1 and D itself are also included); 
  * two vertices x and y (x > y) have an undirected edge between them if x is divisible by y and \frac x y is a prime; 
  * the weight of an edge is the number of divisors of x that are not divisors of y. 



For example, here is the graph for D=12: 

<image>

Edge (4,12) has weight 3 because 12 has divisors [1,2,3,4,6,12] and 4 has divisors [1,2,4]. Thus, there are 3 divisors of 12 that are not divisors of 4 — [3,6,12].

There is no edge between 3 and 2 because 3 is not divisible by 2. There is no edge between 12 and 3 because 12/3=4 is not a prime.

Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)] has length 1+2+2+3+1+2=11. The empty path has length 0.

So the shortest path between two vertices v and u is the path that has the minimal possible length.

Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_i and b_i are different edges.

You are given q queries of the following form: 

  * v u — calculate the number of the shortest paths between vertices v and u. 



The answer for each query might be large so print it modulo 998244353.

Input

The first line contains a single integer D (1 ≤ D ≤ 10^{15}) — the number the graph is built from.

The second line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.

Each of the next q lines contains two integers v and u (1 ≤ v, u ≤ D). It is guaranteed that D is divisible by both v and u (both v and u are divisors of D).

Output

Print q integers — for each query output the number of the shortest paths between the two given vertices modulo 998244353.

Examples

Input


12
3
4 4
12 1
3 4


Output


1
3
1


Input


1
1
1 1


Output


1


Input


288807105787200
4
46 482955026400
12556830686400 897
414 12556830686400
4443186242880 325


Output


547558588
277147129
457421435
702277623

Note

In the first example: 

  * The first query is only the empty path — length 0; 
  * The second query are paths [(12, 4), (4, 2), (2, 1)] (length 3+1+1=5), [(12, 6), (6, 2), (2, 1)] (length 2+2+1=5) and [(12, 6), (6, 3), (3, 1)] (length 2+2+1=5). 
  * The third query is only the path [(3, 1), (1, 2), (2, 4)] (length 1+1+1=3). 

Solution (C++ code):
{solution}


assistant: Phase 3: Implementing Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we need to implement the following C++ checkers:

### Checker #1: Divisor Count Check
This checker will identify if `D` has a large number of divisors, which may result in a slowdown due to the overhead of processing these divisors.

```cpp
void check_divisor_count_invariant(size_t divisorCount) {
    if (divisorCount > 100000) { // Threshold can be adjusted based on empirical analysis
        cerr << "Warning: High divisor count invariant triggered - potential performance bottleneck." << endl;
        abort();
    }
}
```

### Checker #2: Prime Factorization Depth Check
This checker will identify if `D` has a high depth of factorization, which may lead to slow performance.

```cpp
void check_prime_factorization_depth_invariant(size_t factorizationDepth) {
    if (factorizationDepth > 100) { // Arbitrary threshold for demonstration
        cerr << "Warning: High factorization depth invariant triggered - potential performance bottleneck." << endl;
        abort();
    }
}
```

Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checkers into the provided C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100;
const int MOD = 998244353;
int fact[105];
int inv[105];

void check_divisor_count_invariant(size_t divisorCount) {
    if (divisorCount > 100000) {
        cerr << "Warning: High divisor count invariant triggered - potential performance bottleneck." << endl;
        abort();
    }
}

void check_prime_factorization_depth_invariant(size_t factorizationDepth) {
    if (factorizationDepth > 100) {
        cerr << "Warning: High factorization depth invariant triggered - potential performance bottleneck." << endl;
        abort();
    }
}

int lgput(int a, int b) {
    int ans = 1;
    for (; b; b >>= 1) {
        if (b & 1) ans = 1LL * ans * a % MOD;
        a = 1LL * a * a % MOD;
    }
    return ans;
}
map<long long, int> ways;
long long gcd(long long a, long long b) {
    while (b) {
        long long r = a % b;
        a = b;
        b = r;
    }
    return a;
}

int main() {
    long long d;
    scanf("%lld", &d);
    vector<long long> div;
    for (int i = 1; 1LL * i * i <= d; ++i) {
        if (d % i == 0) {
            div.push_back(i);
            if (d / i != i) div.push_back(d / i);
        }
    }

    // Check for high divisor count
    check_divisor_count_invariant(div.size());

    vector<long long> pr;
    for (int i = 2; 1LL * i * i <= d; ++i) {
        if (d % i == 0) {
            pr.push_back(i);
            while (d % i == 0) d /= i;
        }
    }
    if (d > 1) pr.push_back(d);

    // Check for high prime factorization depth
    check_prime_factorization_depth_invariant(pr.size());

    fact[0] = 1;
    for (int i = 1; i <= MAXN; ++i) fact[i] = 1LL * fact[i - 1] * i % MOD;
    inv[MAXN] = lgput(fact[MAXN], MOD - 2);
    for (int i = MAXN - 1; i >= 0; --i) inv[i] = 1LL * inv[i + 1] * (i + 1) % MOD;
    for (auto it : div) {
        int nr = 1;
        long long aux = it;
        int dd = 0;
        for (auto it1 : pr) {
            int d1 = 0;
            while (aux % it1 == 0) {
                d1++;
                aux /= it1;
            }
            dd += d1;
            nr = 1LL * nr * inv[d1] % MOD;
        }
        nr = 1LL * nr * fact[dd] % MOD;
        ways[it] = nr;
    }
    int q;
    scanf("%d", &q);
    for (int i = 1; i <= q; ++i) {
        long long u, v;
        scanf("%lld%lld", &u, &v);
        long long g = gcd(u, v);
        int ans1 = ways[u / g];
        int ans2 = ways[v / g];
        printf("%d\n", 1LL * ans1 * ans2 % MOD);
    }
    return 0;
}
```

### Explanation of Integration

- **Divisor Count Check**: The check is placed immediately after the divisor list is populated to prevent excess computation if the count is already too high.
- **Prime Factorization Depth Check**: The check is added right after all prime factors of `D` have been determined. This allows early detection of potential bottlenecks from excessive factorization depth.

These checks help ensure that the program avoids scenarios where it might perform poorly due to excessive overhead from processing divisors or factorizing large numbers.

