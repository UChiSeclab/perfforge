system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a positive integer D. Let's build the following graph from it: 

  * each vertex is a divisor of D (not necessarily prime, 1 and D itself are also included); 
  * two vertices x and y (x > y) have an undirected edge between them if x is divisible by y and \frac x y is a prime; 
  * the weight of an edge is the number of divisors of x that are not divisors of y. 



For example, here is the graph for D=12: 

<image>

Edge (4,12) has weight 3 because 12 has divisors [1,2,3,4,6,12] and 4 has divisors [1,2,4]. Thus, there are 3 divisors of 12 that are not divisors of 4 — [3,6,12].

There is no edge between 3 and 2 because 3 is not divisible by 2. There is no edge between 12 and 3 because 12/3=4 is not a prime.

Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)] has length 1+2+2+3+1+2=11. The empty path has length 0.

So the shortest path between two vertices v and u is the path that has the minimal possible length.

Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_i and b_i are different edges.

You are given q queries of the following form: 

  * v u — calculate the number of the shortest paths between vertices v and u. 



The answer for each query might be large so print it modulo 998244353.

Input

The first line contains a single integer D (1 ≤ D ≤ 10^{15}) — the number the graph is built from.

The second line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.

Each of the next q lines contains two integers v and u (1 ≤ v, u ≤ D). It is guaranteed that D is divisible by both v and u (both v and u are divisors of D).

Output

Print q integers — for each query output the number of the shortest paths between the two given vertices modulo 998244353.

Examples

Input


12
3
4 4
12 1
3 4


Output


1
3
1


Input


1
1
1 1


Output


1


Input


288807105787200
4
46 482955026400
12556830686400 897
414 12556830686400
4443186242880 325


Output


547558588
277147129
457421435
702277623

Note

In the first example: 

  * The first query is only the empty path — length 0; 
  * The second query are paths [(12, 4), (4, 2), (2, 1)] (length 3+1+1=5), [(12, 6), (6, 2), (2, 1)] (length 2+2+1=5) and [(12, 6), (6, 3), (3, 1)] (length 2+2+1=5). 
  * The third query is only the path [(3, 1), (1, 2), (2, 4)] (length 1+1+1=3). 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
long long int gcd(long long int a, long long int b) {
  return a ? gcd(b % a, a) : b;
}
long long int power(long long int a, long long int b) {
  long long int ans = 1;
  long long int s = a;
  long long int t = b;
  while (t) {
    if (t % 2 == 1) ans *= s, ans %= 998244353;
    s *= s, s %= 998244353;
    t /= 2;
  }
  return ans;
}
long long int inv(long long int k) { return power(k, 998244353 - 2); }
long long int fact[110];
long long int invFact[110];
std::vector<long long int> prime;
int check[110];
std::vector<int> V;
long long int func(long long int k) {
  V.clear();
  for (int i = 0; i < prime.size(); i++) {
    if (k % prime[i] != 0) continue;
    int count = 0;
    while (k % prime[i] == 0) count++, k /= prime[i];
    V.push_back(count);
  }
  int sum = 0;
  for (int i = 0; i < V.size(); i++) sum += V[i];
  long long int ans = fact[sum];
  for (int i = 0; i < V.size(); i++) ans *= invFact[V[i]], ans %= 998244353;
  return ans;
}
std::vector<long long int> P;
int main() {
  fact[0] = 1;
  for (int i = 1; i <= 100; i++)
    fact[i] = fact[i - 1] * i, fact[i] %= 998244353;
  for (int i = 0; i <= 100; i++) invFact[i] = inv(fact[i]);
  long long int a;
  int b;
  scanf("%lld%d", &a, &b);
  long long int a2 = a;
  for (long long int i = 2; i * i <= a; i++) {
    if (a2 % i == 0) {
      prime.push_back(i);
      while (a2 % i == 0) a2 /= i;
    }
  }
  if (a2 > 1) prime.push_back(a2);
  for (int i = 1; i <= b; i++) {
    long long int c, d;
    scanf("%lld%lld", &c, &d);
    long long int e = gcd(c, d);
    long long int s1 = func(c / e);
    long long int s2 = func(d / e);
    printf("%lld\n", (s1 * s2) % 998244353);
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

17592186044416
1
17592186044416 2


(G.2) Fast Input

1
1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
long long int gcd(long long int a, long long int b) { /* line 2 slow_hit_count: 3, fast_hit_count: 2 */
  return a ? gcd(b % a, a) : b; /* line 3 slow_hit_count: 3, fast_hit_count: 2 */
} /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int power(long long int a, long long int b) { /* line 5 slow_hit_count: 101, fast_hit_count: 101 */
  long long int ans = 1; /* line 6 slow_hit_count: 101, fast_hit_count: 101 */
  long long int s = a; /* line 7 slow_hit_count: 101, fast_hit_count: 101 */
  long long int t = b; /* line 8 slow_hit_count: 101, fast_hit_count: 101 */
  while (t) { /* line 9 slow_hit_count: 3131, fast_hit_count: 3131 */
    if (t % 2 == 1) ans *= s, ans %= 998244353; /* line 10 slow_hit_count: 3030, fast_hit_count: 3030 */
    s *= s, s %= 998244353; /* line 11 slow_hit_count: 3030, fast_hit_count: 3030 */
    t /= 2; /* line 12 slow_hit_count: 3030, fast_hit_count: 3030 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 14 slow_hit_count: 101, fast_hit_count: 101 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long int inv(long long int k) { return power(k, 998244353 - 2); } /* line 16 slow_hit_count: 101, fast_hit_count: 101 */
long long int fact[110]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long int invFact[110]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<long long int> prime; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int check[110]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<int> V; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long int func(long long int k) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  V.clear(); /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < prime.size(); i++) { /* line 24 slow_hit_count: 4, fast_hit_count: 2 */
    if (k % prime[i] != 0) continue; /* line 25 slow_hit_count: 2, fast_hit_count: 0 */
    int count = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
    while (k % prime[i] == 0) count++, k /= prime[i]; /* line 27 slow_hit_count: 44, fast_hit_count: 0 */
    V.push_back(count); /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int sum = 0; /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < V.size(); i++) sum += V[i]; /* line 31 slow_hit_count: 3, fast_hit_count: 2 */
  long long int ans = fact[sum]; /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < V.size(); i++) ans *= invFact[V[i]], ans %= 998244353; /* line 33 slow_hit_count: 3, fast_hit_count: 2 */
  return ans; /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<long long int> P; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  fact[0] = 1; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 100; i++) /* line 39 slow_hit_count: 101, fast_hit_count: 101 */
    fact[i] = fact[i - 1] * i, fact[i] %= 998244353; /* line 40 slow_hit_count: 100, fast_hit_count: 100 */
  for (int i = 0; i <= 100; i++) invFact[i] = inv(fact[i]); /* line 41 slow_hit_count: 102, fast_hit_count: 102 */
  long long int a; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  int b; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld%d", &a, &b); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  long long int a2 = a; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 2; i * i <= a; i++) { /* line 46 slow_hit_count: 4194304, fast_hit_count: 1 */
    if (a2 % i == 0) { /* line 47 slow_hit_count: 4194303, fast_hit_count: 0 */
      prime.push_back(i); /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
      while (a2 % i == 0) a2 /= i; /* line 49 slow_hit_count: 45, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  if (a2 > 1) prime.push_back(a2); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= b; i++) { /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
    long long int c, d; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%lld%lld", &c, &d); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    long long int e = gcd(c, d); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    long long int s1 = func(c / e); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    long long int s2 = func(d / e); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%lld\n", (s1 * s2) % 998244353); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Hit Count Analysis:**

1. **Line 46:** The loop `for (long long int i = 2; i * i <= a; i++)` has an extremely high hit count in the slow input (`4,194,304`) compared to the fast input (`1`). This indicates a significant bottleneck when iterating over potential divisors of `a`.

2. **Line 47-49:** These lines are executed numerous times for the slow input. The significant hit count in line 47 (`4,194,303`) suggests frequent checking if `a2 % i == 0`, while line 49 (`45`) indicates that inner operations for reducing `a2` also occur often.

**Insights:**
- The primary bottleneck is the loop for finding prime factors of `D`. As `D` becomes large, the `i * i <= a` loop condition results in many iterations, especially if `D` has a large number of divisors.
- The nested operations when a divisor `i` is found contribute to further slowdown, particularly during reductions of `a2` in line 49.

### Phase 2: Derive Performance-Characterizing Invariants

**Invariant 1: Large Divisor Range**
- **Natural Language Description:** "When the number `D` has a very large range of potential divisors, the program may slow down due to extensive iterations to find prime factors."
  
**Invariant 2: Dense Divisor Composition**
- **Natural Language Description:** "If `D` is composed of a significant number of small prime factors, the loop for finding these factors will repeat extensively, causing a slowdown."

**Invariant 3: Large Prime Factor Component**
- **Natural Language Description:** "If `D` includes a large prime factor, the operations to divide `D` by its prime factors will take longer, exacerbating performance issues."

**Threshold Suggestions:**
- Given `n <= 100`, consider focusing on the cumulative effect of divisor checks rather than individual factor sizes.
- Monitor when the divisor iteration loop exceeds a threshold of several million iterations, indicating a potential performance penalty.

These performance-characterizing invariants capture the primary sources of slowdown without relying on specific input values. They highlight how the structure and composition of the input number `D` influence execution time, aligning with the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a positive integer D. Let's build the following graph from it: 

  * each vertex is a divisor of D (not necessarily prime, 1 and D itself are also included); 
  * two vertices x and y (x > y) have an undirected edge between them if x is divisible by y and \frac x y is a prime; 
  * the weight of an edge is the number of divisors of x that are not divisors of y. 



For example, here is the graph for D=12: 

<image>

Edge (4,12) has weight 3 because 12 has divisors [1,2,3,4,6,12] and 4 has divisors [1,2,4]. Thus, there are 3 divisors of 12 that are not divisors of 4 — [3,6,12].

There is no edge between 3 and 2 because 3 is not divisible by 2. There is no edge between 12 and 3 because 12/3=4 is not a prime.

Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)] has length 1+2+2+3+1+2=11. The empty path has length 0.

So the shortest path between two vertices v and u is the path that has the minimal possible length.

Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_i and b_i are different edges.

You are given q queries of the following form: 

  * v u — calculate the number of the shortest paths between vertices v and u. 



The answer for each query might be large so print it modulo 998244353.

Input

The first line contains a single integer D (1 ≤ D ≤ 10^{15}) — the number the graph is built from.

The second line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.

Each of the next q lines contains two integers v and u (1 ≤ v, u ≤ D). It is guaranteed that D is divisible by both v and u (both v and u are divisors of D).

Output

Print q integers — for each query output the number of the shortest paths between the two given vertices modulo 998244353.

Examples

Input


12
3
4 4
12 1
3 4


Output


1
3
1


Input


1
1
1 1


Output


1


Input


288807105787200
4
46 482955026400
12556830686400 897
414 12556830686400
4443186242880 325


Output


547558588
277147129
457421435
702277623

Note

In the first example: 

  * The first query is only the empty path — length 0; 
  * The second query are paths [(12, 4), (4, 2), (2, 1)] (length 3+1+1=5), [(12, 6), (6, 2), (2, 1)] (length 2+2+1=5) and [(12, 6), (6, 3), (3, 1)] (length 2+2+1=5). 
  * The third query is only the path [(3, 1), (1, 2), (2, 4)] (length 1+1+1=3). 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checker Code

Below are the C++ snippets to perform the runtime checks based on the natural language invariants identified in Phase 2.

#### Invariant 1: Large Divisor Range
```cpp
void check_large_divisor_range(long long a, long long i) {
    if (i * i <= a && i > 1e7) { // Assume a large threshold for divisor range
        cerr << "Warning: Large divisor range detected!" << endl;
        abort();
    }
}
```

#### Invariant 2: Dense Divisor Composition
```cpp
void check_dense_divisor_composition(long long a2, long long i) {
    if (a2 % i == 0 && i < 1000) { // Assume small prime factors are dense
        cerr << "Warning: Dense divisor composition!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Prime Factor Component
```cpp
void check_large_prime_factor_component(long long a2) {
    if (a2 > 1 && a2 > 1e8) { // Assume a large value for prime factor
        cerr << "Warning: Large prime factor component in divisor!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original C++ Program

Below is the instrumented C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>

long long int gcd(long long int a, long long int b) {
    return a ? gcd(b % a, a) : b;
}

long long int power(long long int a, long long int b) {
    long long int ans = 1;
    long long int s = a;
    long long int t = b;
    while (t) {
        if (t % 2 == 1) ans *= s, ans %= 998244353;
        s *= s, s %= 998244353;
        t /= 2;
    }
    return ans;
}

long long int inv(long long int k) {
    return power(k, 998244353 - 2);
}

long long int fact[110];
long long int invFact[110];
std::vector<long long int> prime;
int check[110];
std::vector<int> V;

long long int func(long long int k) {
    V.clear();
    for (int i = 0; i < prime.size(); i++) {
        if (k % prime[i] != 0) continue;
        int count = 0;
        while (k % prime[i] == 0) count++, k /= prime[i];
        V.push_back(count);
    }
    int sum = 0;
    for (int i = 0; i < V.size(); i++) sum += V[i];
    long long int ans = fact[sum];
    for (int i = 0; i < V.size(); i++) ans *= invFact[V[i]], ans %= 998244353;
    return ans;
}

void check_large_divisor_range(long long a, long long i) {
    if (i * i <= a && i > 1e7) { // Threshold to detect large divisor range
        cerr << "Warning: Large divisor range detected!" << endl;
        abort();
    }
}

void check_dense_divisor_composition(long long a2, long long i) {
    if (a2 % i == 0 && i < 1000) { // Threshold to detect dense divisor composition
        cerr << "Warning: Dense divisor composition!" << endl;
        abort();
    }
}

void check_large_prime_factor_component(long long a2) {
    if (a2 > 1 && a2 > 1e8) { // Threshold to detect large prime factor component
        cerr << "Warning: Large prime factor component in divisor!" << endl;
        abort();
    }
}

std::vector<long long int> P;
int main() {
    fact[0] = 1;
    for (int i = 1; i <= 100; i++)
        fact[i] = fact[i - 1] * i, fact[i] %= 998244353;
    
    for (int i = 0; i <= 100; i++) 
        invFact[i] = inv(fact[i]);
    
    long long int a;
    int b;
    scanf("%lld%d", &a, &b);
    long long int a2 = a;
    
    for (long long int i = 2; i * i <= a; i++) {
        check_large_divisor_range(a, i);
        if (a2 % i == 0) {
            check_dense_divisor_composition(a2, i);
            prime.push_back(i);
            while (a2 % i == 0) a2 /= i;
        }
    }
    
    check_large_prime_factor_component(a2);
    
    if (a2 > 1) prime.push_back(a2);
    
    for (int i = 1; i <= b; i++) {
        long long int c, d;
        scanf("%lld%lld", &c, &d);
        long long int e = gcd(c, d);
        long long int s1 = func(c / e);
        long long int s2 = func(d / e);
        printf("%lld\n", (s1 * s2) % 998244353);
    }
}
```

### Explanation:
- **Checker Placement:** The checks are placed in the divisor loop for detecting large divisor ranges and dense compositions. The large prime factor check is placed after the loop exits when `a2` is reduced.
- **Thresholds:** These are assumed values to illustrate detection. Adjust them based on empirical observations or domain-specific knowledge.
- **Abort on Detection:** If any of the performance bottleneck conditions are met, the program emits a warning and aborts execution.

