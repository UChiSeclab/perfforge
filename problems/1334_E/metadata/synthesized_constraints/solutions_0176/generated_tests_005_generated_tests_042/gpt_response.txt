=== Invariants Response ===
## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts:
1. **Line 49**: The loop `for (long long i = 2; i * i <= n; ++i)` in the `main` function is hit a massive 4,194,304 times for the slow input, compared to just 1 for the fast input. This indicates significant inefficiency here.
2. **Lines 50 and 51**: The condition `if (tmp % i == 0)` and the subsequent line `a[++tot] = i` are hit 4,194,303 times, suggesting that iteration over potential divisors of a large number is the main contributor to slow performance.
3. **Lines 52-53**: The inner `while` loop further compounds the inefficiency by executing 45 times for the slow input, although this is relatively small compared to the main loop.
4. **Function `qpow` (Lines 10-21)**: The function `qpow` is involved in a significant number of operations (lines 12-19 repeatedly executed), indicating that power calculation and large number modulo operations are costly for the slow input.

### Inference:
- The primary bottleneck is the loop that iterates over potential divisors of `n` (`for (i = 2; i * i <= n; ++i)`). This loop is generally expensive when `n` is large, specifically when `n` has a large square root and possibly many divisors.
- The `qpow` function becomes expensive due to repeated exponentiation and modulo operations, especially when invoked multiple times for large `n`.

## Phase 2: Derive Performance-Characterizing Invariants

### Invariants in Natural Language:

1. **Large Divisor Space Exploration**:
   - "When the number `D` has a large number of divisors, especially when `D` is close to its upper bound (10^15), the program may slow down due to extensive exploration of possible divisors. This occurs because the divisor-check loop runs for each divisor of `D`, leading to high computational overhead."

2. **Heavy Computational Load from Exponentiation**:
   - "If `D` results in high power calculations due to the structure of the divisor graph, the `qpow` function can become a performance bottleneck. This is especially true when the function is repeatedly called with large values and high exponentiation demands."

3. **Significant Prime Factorization Effort**:
   - "The inefficiency is further exacerbated when `D` has a large prime as its factor or many repeated smaller factors, leading to increased iterations within the divisor calculation loop and more frequent updates to arrays and calculations."

These performance-characterizing invariants help us understand the conditions under which the code encounters performance degradation, mainly when `D` is large and complex in terms of its divisor composition, leading to extensive calculations and recursive operations.

=== Checker Response ===
## Phase 3: Implement Invariants as Checker Code in C++

Here, I'll implement the performance-characterizing invariants that I previously described in natural language as C++ checker code.

### Invariant 1: Large Divisor Space Exploration
This invariant captures performance degradation when `D` has many divisors, especially when `D` is close to its maximum value.

```cpp
void check_large_divisor_space(long long n) {
    if (n > 1e14) { // Example threshold for large numbers
        cerr << "Warning: Performance bottleneck condition triggered - large divisor space exploration!" << endl;
        abort();
    }
}
```

### Invariant 2: Heavy Computational Load from Exponentiation
This invariant checks for expensive power calculations within the `qpow` function, particularly for large numbers or excessive calls.

```cpp
void check_expensive_exponentiation(long long x, long long y) {
    if (y > 30) { // Threshold for high exponentiation demands
        cerr << "Warning: Performance bottleneck condition triggered - heavy exponentiation!" << endl;
        abort();
    }
}
```

### Invariant 3: Significant Prime Factorization Effort
This invariant triggers when `D` requires significant effort to be factorized, such as when `D` is composed of large prime factors.

```cpp
void check_prime_factorization_effort(long long n, long long currentDivisor) {
    if (currentDivisor > 1e7) { // Example threshold for large prime factors
        cerr << "Warning: Performance bottleneck condition triggered - significant prime factorization effort!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into Original Program

Now, let's integrate these checker functions into the original C++ program at appropriate positions to effectively detect performance bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 998244353;
const double eps = 1e-8;
const double pi = acos(-1.0);
long long cnt[60];
long long a[60], b[60];
long long n, q, u, v, tot, cost, ans;
long long gcd(long long x, long long y) { return y == 0 ? x : gcd(y, x % y); }
long long qpow(long long x, long long y) {
    check_expensive_exponentiation(x, y); // Check for heavy exponentiation
    long long res = 1;
    while (y) {
        if (y & 1) {
            res *= x;
            res %= mod;
        }
        x *= x;
        x %= mod;
        y >>= 1;
    }
    return res;
}
void check_large_divisor_space(long long n) {
    if (n > 1e14) { // Example threshold for large numbers
        cerr << "Warning: Performance bottleneck condition triggered - large divisor space exploration!" << endl;
        abort();
    }
}
void check_prime_factorization_effort(long long n, long long currentDivisor) {
    if (currentDivisor > 1e7) { // Example threshold for large prime factors
        cerr << "Warning: Performance bottleneck condition triggered - significant prime factorization effort!" << endl;
        abort();
    }
}
long long slove() {
    long long res = 1, sum = 0, cnt;
    for (int i = 1; i <= tot; ++i) {
        if (cost % a[i] == 0) {
            cnt = 0;
            while (cost % a[i] == 0) {
                cost /= a[i];
                cnt++;
                sum++;
            }
            res *= qpow(b[cnt], mod - 2);
            res %= mod;
        }
    }
    res *= b[sum];
    res %= mod;
    return res;
}
int main() {
    ios_base::sync_with_stdio(false);
    b[0] = 1;
    for (long long i = 1; i < 60; ++i) {
        b[i] = (b[i - 1] * i) % mod;
    }
    cin >> n;
    check_large_divisor_space(n); // Check for large divisor space exploration
    long long tmp = n;
    for (long long i = 2; i * i <= n; ++i) {
        check_prime_factorization_effort(n, i); // Check for significant prime factorization effort
        if (tmp % i == 0) {
            a[++tot] = i;
            while (tmp % i == 0) {
                tmp /= i;
            }
        }
    }
    if (tmp > 1) a[++tot] = tmp;
    cin >> q;
    while (q--) {
        ans = 0;
        cin >> u >> v;
        if (u == v) {
            cout << "1\n";
            continue;
        }
        if (u < v) swap(u, v);
        if (u % v == 0) {
            cost = u / v;
            ans = slove();
        } else {
            long long g = gcd(u, v);
            cost = u / g;
            ans = slove();
            cost = v / g;
            ans *= slove();
            ans %= mod;
        }
        cout << ans << "\n";
    }
    return 0;
}
```

### Explanation:
- **`check_large_divisor_space(n)`**: Positioned right after reading input `n`, this checks if `n` could trigger a slowdown due to large divisor space exploration.
- **`check_expensive_exponentiation(x, y)`**: Integrated into `qpow` to catch scenarios of heavy computation during power calculations.
- **`check_prime_factorization_effort(n, i)`**: Added within the loop that factorizes `n`, to detect if the factorization effort is too high due to large prime factors.

These checks are strategically placed to capture potential performance issues early without adding significant overhead during normal execution.
