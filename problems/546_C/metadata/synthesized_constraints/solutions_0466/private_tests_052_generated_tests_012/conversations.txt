system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int tc, n, m, k;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  cin >> n;
  long long int k1, k2;
  cin >> k1;
  queue<long long int> q1;
  for (__typeof(k1) i = (0) - ((0) > (k1)); i != (k1) - ((0) > (k1));
       i += 1 - 2 * ((0) > (k1))) {
    long long int a;
    cin >> a;
    q1.push(a);
  }
  cin >> k2;
  queue<long long int> q2;
  for (__typeof(k2) i = (0) - ((0) > (k2)); i != (k2) - ((0) > (k2));
       i += 1 - 2 * ((0) > (k2))) {
    long long int a;
    cin >> a;
    q2.push(a);
  }
  long long int af = q1.front();
  long long int bf = q2.front();
  long long int sa = ((int)(q1).size());
  long long int sb = ((int)(q2).size());
  long long int ans = 0;
  while (((int)(q1).size()) && ((int)(q2).size())) {
    long long int a = q1.front();
    long long int b = q2.front();
    if ((ans > 4e7)) {
      cout << -1;
      return 0;
    }
    if (a < b) {
      q2.push(a);
      q2.push(b);
    } else {
      q1.push(b);
      q1.push(a);
    }
    q1.pop();
    q2.pop();
    ans++;
  }
  cout << ans << " ";
  if (((int)(q1).size()) == 0)
    cout << 2;
  else
    cout << 1;
  return 0;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
4 2 4 3 1
1 5


(G.2) Fast Input

5
4 2 4 3 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int tc, n, m, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long int k1, k2; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  queue<long long int> q1; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  for (__typeof(k1) i = (0) - ((0) > (k1)); i != (k1) - ((0) > (k1)); /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
       i += 1 - 2 * ((0) > (k1))) { /* line 14 slow_hit_count: 4, fast_hit_count: 4 */
    long long int a; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
    q1.push(a); /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k2; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  queue<long long int> q2; /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
  for (__typeof(k2) i = (0) - ((0) > (k2)); i != (k2) - ((0) > (k2)); /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
       i += 1 - 2 * ((0) > (k2))) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    long long int a; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    q2.push(a); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  long long int af = q1.front(); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  long long int bf = q2.front(); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long int sa = ((int)(q1).size()); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  long long int sb = ((int)(q2).size()); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  long long int ans = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  while (((int)(q1).size()) && ((int)(q2).size())) { /* line 32 slow_hit_count: 40000002, fast_hit_count: 2 */
    long long int a = q1.front(); /* line 33 slow_hit_count: 40000002, fast_hit_count: 1 */
    long long int b = q2.front(); /* line 34 slow_hit_count: 40000002, fast_hit_count: 1 */
    if ((ans > 4e7)) { /* line 35 slow_hit_count: 40000002, fast_hit_count: 1 */
      cout << -1; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (a < b) { /* line 39 slow_hit_count: 40000001, fast_hit_count: 1 */
      q2.push(a); /* line 40 slow_hit_count: 20000002, fast_hit_count: 0 */
      q2.push(b); /* line 41 slow_hit_count: 20000002, fast_hit_count: 0 */
    } else { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      q1.push(b); /* line 43 slow_hit_count: 19999999, fast_hit_count: 1 */
      q1.push(a); /* line 44 slow_hit_count: 19999999, fast_hit_count: 1 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    q1.pop(); /* line 46 slow_hit_count: 40000001, fast_hit_count: 1 */
    q2.pop(); /* line 47 slow_hit_count: 40000001, fast_hit_count: 1 */
    ans++; /* line 48 slow_hit_count: 40000001, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << " "; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
  if (((int)(q1).size()) == 0) /* line 51 slow_hit_count: 0, fast_hit_count: 1 */
    cout << 2; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    cout << 1; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**: 
   - The lines within the main game loop (lines 32-48) show a dramatic difference in hit counts between the slow and fast inputs. 
   - Specifically, line 32 (`while` loop) is hit 40,000,002 times for the slow input compared to just 2 times for the fast input. 
   - The condition checks and subsequent actions in lines 33-48 are also executed 40,000,001 times for the slow input, demonstrating that the loop is being repeated excessively.

2. **Pinpoint Specific Lines**: 
   - The main loop on line 32 and its body (lines 33-48) are responsible for the slowdown. This loop is intended to simulate the game rounds and should theoretically end when one player's deck is empty.
   - The condition at line 35 triggers when the loop reaches a certain hit count (4e7), indicating a potential infinite game loop.

3. **Inference on Code Behavior**:
   - The game logic leads to an excessive number of iterations on the slow input, which suggests that the conditions for a player to lose aren't being met quickly enough, potentially leading to a stalemate or infinitely repeating state.
   - The data structure interaction involves repeatedly transferring cards between the two queues (`q1` and `q2`), leading to an excessive number of operations due to a repetitive pattern in card values.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements**:
   - **Invariant 1**: "If the sequence of card values causes the game to reach a repetitive state where the same card configurations recur repeatedly, the game may take a very long time to conclude, or may not conclude at all."
   - **Invariant 2**: "When both players have card values that lead to a cyclic or non-converging sequence of hands, the game can enter a slow path, potentially iterating indefinitely."
   - **Invariant 3**: "If neither player can gain a definitive advantage due to the value distribution of cards, leading to constant switching of cards without reducing the size of one player's stack, the performance may degrade into an infinite loop."

2. **Thresholds and Conditions**:
   - These invariants do not rely on specific numeric values but instead focus on the structural pattern of the game—specifically, when the game dynamics create a loop or stalemate. Given the problem constraints of n ≤ 10, this behavior is realistic and can be anticipated.

3. **Future Scenarios**:
   - By focusing on the behavior of the card values and how they influence the game state, these invariants are broad enough to capture future inputs that might trigger similar slowdowns. For example, any distribution of cards leading to a continuing cycle without progress toward a player winning will likely trigger this slow path. 

These performance-characterizing invariants should guide enhancements or checks within the code to detect and mitigate these slow scenarios effectively, potentially by identifying repeating game states and breaking out of these cycles early.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

For the given natural language invariants, I will implement checker functions that catch potential infinite loops or excessively long game sequences based on the described conditions.

#### Invariant 1: Repetitive State Leading to Long Execution
```cpp
void check_repetitive_state_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: repetitive_state_invariant triggered - game may enter a repetitive state with no progress!" << endl;
        abort();
    }
}
```

This checker can be invoked if the game reaches a certain large number of iterations without ending. Since our problem constraint is small (n ≤ 10), we can set a threshold based on theoretical maximum combinations, such as a few thousand.

#### Invariant 2: Cyclic or Non-Converging Sequence
```cpp
void check_cyclic_sequence_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: cyclic_sequence_invariant triggered - potential cyclic sequence detected!" << endl;
        abort();
    }
}
```

This can be implemented by maintaining a history of seen states and checking for repetitive cycles.

### Phase 4: Integrating Checker Code into the Original Program

Below is the instrumented version of the original C++ code, incorporating the checker functions at suitable places:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for repetitive state invariant
void check_repetitive_state_invariant(long long ans) {
    if (ans > 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: repetitive_state_invariant triggered - game may enter a repetitive state with no progress!" << endl;
        abort();
    }
}

// Checker for cyclic sequence invariant
void check_cyclic_sequence_invariant(set<pair<queue<long long int>, queue<long long int>>> &previousStates, queue<long long int> &q1, queue<long long int> &q2) {
    if (previousStates.find({q1, q2}) != previousStates.end()) {
        cerr << "Warning: cyclic_sequence_invariant triggered - potential cyclic sequence detected!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    long long int k1, k2;
    cin >> k1;
    queue<long long int> q1;
    for (__typeof(k1) i = 0; i != k1; ++i) {
        long long int a;
        cin >> a;
        q1.push(a);
    }
    cin >> k2;
    queue<long long int> q2;
    for (__typeof(k2) i = 0; i != k2; ++i) {
        long long int a;
        cin >> a;
        q2.push(a);
    }

    long long int ans = 0;
    set<pair<queue<long long int>, queue<long long int>>> previousStates;

    while (!q1.empty() && !q2.empty()) {
        check_repetitive_state_invariant(ans); // Checking for excessive iterations

        // Record the current state and check for cycles
        check_cyclic_sequence_invariant(previousStates, q1, q2);
        previousStates.insert({q1, q2});

        long long int a = q1.front();
        long long int b = q2.front();
        if (ans > 4e7) {
            cout << -1;
            return 0;
        }
        if (a < b) {
            q2.push(a);
            q2.push(b);
        } else {
            q1.push(b);
            q1.push(a);
        }
        q1.pop();
        q2.pop();
        ans++;
    }

    cout << ans << " ";
    if (q1.empty())
        cout << 2;
    else
        cout << 1;
    return 0;
}
```

### Explanation
1. **Repetitive State Checker**: This was added to the main loop to monitor for excessive iterations, suggesting slow game progress. The threshold of 1000 is arbitrary and should be adjusted based on further analysis.

2. **Cyclic Sequence Checker**: This uses a set to store past states of the queues. If a current state has been seen before, a cycle is detected, and the program aborts.

These checkers are strategically placed outside of tight loops and heavy operations, thus minimizing performance impact while effectively detecting bottleneck conditions.

