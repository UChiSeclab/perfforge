system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
class node {
 public:
  long long int second;
  long long int length;
};
int main() {
  long long int n, i, a, b, val;
  cin >> n;
  cin >> a;
  queue<long long int> A, B;
  for (i = 0; i < a; i++) cin >> val, A.push(val);
  cin >> b;
  for (i = 0; i < b; i++) cin >> val, B.push(val);
  long long int count = 0, val1, val2;
  for (count = 0; !A.empty() && !B.empty() && count < 10000000; count++) {
    val1 = A.front(), val2 = B.front();
    A.pop(), B.pop();
    if (val1 > val2)
      A.push(val2), A.push(val1);
    else
      B.push(val1), B.push(val2);
  }
  if (count == 10000000)
    cout << "-1\n";
  else {
    if (A.empty())
      cout << count << " "
           << "2\n";
    else
      cout << count << " "
           << "1\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
4 2 4 3 1
1 5


(G.2) Fast Input

5
4 2 4 3 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
class node { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long int second; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long int length; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, i, a, b, val; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  queue<long long int> A, B; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < a; i++) cin >> val, A.push(val); /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
  cin >> b; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < b; i++) cin >> val, B.push(val); /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  long long int count = 0, val1, val2; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (count = 0; !A.empty() && !B.empty() && count < 10000000; count++) { /* line 17 slow_hit_count: 10000001, fast_hit_count: 2 */
    val1 = A.front(), val2 = B.front(); /* line 18 slow_hit_count: 10000000, fast_hit_count: 1 */
    A.pop(), B.pop(); /* line 19 slow_hit_count: 10000000, fast_hit_count: 1 */
    if (val1 > val2) /* line 20 slow_hit_count: 10000000, fast_hit_count: 1 */
      A.push(val2), A.push(val1); /* line 21 slow_hit_count: 4999999, fast_hit_count: 1 */
    else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      B.push(val1), B.push(val2); /* line 23 slow_hit_count: 5000001, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (count == 10000000) /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1\n"; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (A.empty()) /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
      cout << count << " " /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
           << "2\n"; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      cout << count << " " /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
           << "1\n"; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze why the program runs slowly for the slow input and derive performance-characterizing invariants, let's follow the structure you've outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The loop on line 17 is executed 10,000,001 times for the slow input compared to only 2 times for the fast input. This indicates that this loop is the major contributor to the performance difference.
   - The operations inside the loop (lines 18-23) also have significantly higher hit counts for the slow input.

2. **Potential Causes:**
   - The loop iterates while both queues `A` and `B` have cards and until a count of 10,000,000. This suggests a potential infinite loop, or a very long sequence of operations where neither player is able to win quickly.
   - Each iteration involves comparing the top cards of both queues and appending the cards to the winning player's queue, which can lead to repetitive cycles if the card order reaches the same state multiple times.

3. **Interaction with Data Structures:**
   - The program uses two queues to simulate the players' decks, and the operations within the loop manipulate these queues by popping from the front and pushing to the back based on the card comparison.
   - The potential repetitive nature of these operations indicates that certain card sequences cause the game to reach a repeating state, leading to excessive iterations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant #1: Infinite or Excessive Loop Iteration**
   - **Natural Language Description:** "If the sequence of card comparisons leads to a repeating cycle, the number of fights may grow excessively, potentially never reaching a game-ending condition."
   - **Implementation Suggestion:** Introduce a mechanism to detect if the current state of both players' decks has been encountered before, which indicates the start of a loop.

2. **Invariant #2: Card Arrangement Causing Repetitive States**
   - **Natural Language Description:** "Certain initial card distributions, when the values are close and interleaved in a manner that causes frequent swaps without progress, can cause the game to drag on for an extended period."
   - **Implementation Suggestion:** Check for specific patterns in the initial card arrangement that might lead to such states and warn if detected.

3. **Invariant #3: Threshold-Based Performance Degradation**
   - **Natural Language Description:** "When the number of fights approaches a high threshold relative to the number of cards, the likelihood of the game being in a loop increases, requiring intervention."
   - **Implementation Suggestion:** Set a reasonable threshold for the number of fights (much lower than 10,000,000 given n is only up to 10) and detect if it is exceeded without a resolution.

These invariants suggest that the program's performance issues are primarily due to the potential for entering a long or infinite loop due to repetitive card sequences. To mitigate this, the implementation should focus on detecting and handling cycles or repetitive states, potentially by storing past states or implementing an early exit strategy when a threshold is reached.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Checkers

Let's create C++ checkers for the performance-characterizing invariants we discussed:

1. **Invariant #1: Infinite or Excessive Loop Iteration**
   ```cpp
   // Function to check if the number of fights is excessively high
   void check_excessive_fights(long long count) {
       if (count > 1000) {  // Arbitrary threshold for excessive fights
           cerr << "Warning: Performance bottleneck condition triggered - excessive fights!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Card Arrangement Causing Repetitive States**
   ```cpp
   // Function to check if current state of card arrangement is repeating
   set<pair<queue<long long>, queue<long long>>> previous_states;

   bool check_repeating_state(queue<long long> A, queue<long long> B) {
       pair<queue<long long>, queue<long long>> current_state = {A, B};
       if (previous_states.find(current_state) != previous_states.end()) {
           cerr << "Warning: Performance bottleneck condition triggered - repeating state detected!" << endl;
           abort();
       }
       previous_states.insert(current_state);
       return false;
   }
   ```

3. **Invariant #3: Threshold-Based Performance Degradation**
   ```cpp
   // Function to check if the number of fights approaches the threshold
   void check_fight_threshold(long long count) {
       if (count == 10'000'000) {  // The loop's hardcoded maximum iterations
           cerr << "Warning: Performance bottleneck condition triggered - fight threshold reached!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, we'll integrate these checkers into the provided C++ code at strategic points to avoid overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions defined
void check_excessive_fights(long long count) {
    if (count > 1000) {  // Arbitrary threshold for excessive fights
        cerr << "Warning: Performance bottleneck condition triggered - excessive fights!" << endl;
        abort();
    }
}

set<pair<queue<long long>, queue<long long>>> previous_states;

bool check_repeating_state(queue<long long> A, queue<long long> B) {
    pair<queue<long long>, queue<long long>> current_state = {A, B};
    if (previous_states.find(current_state) != previous_states.end()) {
        cerr << "Warning: Performance bottleneck condition triggered - repeating state detected!" << endl;
        abort();
    }
    previous_states.insert(current_state);
    return false;
}

void check_fight_threshold(long long count) {
    if (count == 10'000'000) {  // The loop's hardcoded maximum iterations
        cerr << "Warning: Performance bottleneck condition triggered - fight threshold reached!" << endl;
        abort();
    }
}

int main() {
    long long int n, i, a, b, val;
    cin >> n;
    cin >> a;
    queue<long long int> A, B;
    for (i = 0; i < a; i++) cin >> val, A.push(val);
    cin >> b;
    for (i = 0; i < b; i++) cin >> val, B.push(val);
    long long int count = 0, val1, val2;
    
    // Check the initial state for potential repeating state
    check_repeating_state(A, B);

    for (count = 0; !A.empty() && !B.empty() && count < 10'000'000; count++) {
        val1 = A.front(), val2 = B.front();
        A.pop(), B.pop();
        if (val1 > val2)
            A.push(val2), A.push(val1);
        else
            B.push(val1), B.push(val2);
        
        // Check for repeating state
        check_repeating_state(A, B);
        
        // Check for excessive fights
        if (count % 100 == 0) { // Only check every 100 iterations to reduce overhead
            check_excessive_fights(count);
        }
    }
    
    // Check if the maximum fight threshold is reached
    check_fight_threshold(count);

    if (count == 10'000'000)
        cout << "-1\n";
    else {
        if (A.empty())
            cout << count << " "
                 << "2\n";
        else
            cout << count << " "
                 << "1\n";
    }
    return 0;
}
```

### Comments on Integration
- **Placement of Checks:** The checks are placed outside the tight loop iterations where possible, and periodically within the loop to minimize overhead.
- **Repetition Detection:** We use a set to track past states of the queues to detect repetition, which can be expensive but necessary to catch infinite loops.
- **Threshold Checks:** We have two different thresholds, one for excessive fights and one for the hardcoded iteration limit. This ensures we catch both infinite loops and inefficient play.

