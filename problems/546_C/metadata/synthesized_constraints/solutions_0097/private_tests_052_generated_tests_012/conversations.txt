system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long mod = 9223372036854775807;
long long fastPow(long long b, long long e) {
  long long r = 1;
  while (e) {
    if (e % 2 == 1) {
      r *= b;
      r %= mod;
    }
    b *= b;
    b %= mod;
    e /= 2;
  }
  return r;
}
long long pgcd(long long a, long long b) {
  if (a % b == 0)
    return b;
  else
    return pgcd(b, a % b);
}
long long sign(long long a) {
  if (a < 0) {
    return -1;
  }
  if (a == 0) {
    return 0;
  }
  if (a > 0) {
    return 1;
  }
}
bool isPrime(long long a) {
  if (a == 1) {
    return false;
  }
  long long f = sqrt(a);
  for (long long i = 2; i <= f; i++) {
    if (a % i == 0) {
      return false;
    }
  }
  return true;
}
long long toInt(string s) {
  long long tot = 0;
  for (long long i = s.size() - 1; i >= 0; i--) {
    tot += ((s[i] - '0') % mod) * fastPow(10, i);
    tot %= mod;
  }
  return tot;
}
string toString(long long a) {
  string s = "";
  while (a) {
    s = (char)('0' + a % 10) + s;
    a /= 10;
  }
  return s;
}
signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  long long n;
  cin >> n;
  deque<long long> a;
  deque<long long> b;
  long long c;
  cin >> c;
  for (long long i = 0; i < c; i++) {
    long long d;
    cin >> d;
    a.push_back(d);
  }
  long long d;
  cin >> d;
  for (long long i = 0; i < d; i++) {
    long long e;
    cin >> e;
    b.push_back(e);
  }
  long long tot = 0;
  while (!a.empty() && !b.empty()) {
    long long e = a.front();
    long long f = b.front();
    a.pop_front();
    b.pop_front();
    if (e > f) {
      a.push_back(f);
      a.push_back(e);
    } else {
      b.push_back(e);
      b.push_back(f);
    }
    tot++;
    if (tot >= 10000000) break;
  }
  if (tot >= 10000000) {
    cout << -1 << endl;
    return 0;
  } else
    cout << tot << ' ';
  if (a.empty()) {
    cout << 2 << endl;
  } else {
    cout << 1 << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
4 2 4 3 1
1 5


(G.2) Fast Input

5
4 2 4 3 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 9223372036854775807; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long fastPow(long long b, long long e) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  while (e) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    if (e % 2 == 1) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
      r *= b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
      r %= mod; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    b *= b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    b %= mod; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    e /= 2; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long pgcd(long long a, long long b) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (a % b == 0) /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return pgcd(b, a % b); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long sign(long long a) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < 0) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    return -1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > 0) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(long long a) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 1) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    return false; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  long long f = sqrt(a); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i <= f; i++) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (a % i == 0) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
long long toInt(string s) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long tot = 0; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = s.size() - 1; i >= 0; i--) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    tot += ((s[i] - '0') % mod) * fastPow(10, i); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    tot %= mod; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return tot; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
string toString(long long a) { /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  string s = ""; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  while (a) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    s = (char)('0' + a % 10) + s; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    a /= 10; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  return s; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  deque<long long> a; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  deque<long long> b; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  long long c; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> c; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < c; i++) { /* line 71 slow_hit_count: 5, fast_hit_count: 5 */
    long long d; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> d; /* line 73 slow_hit_count: 4, fast_hit_count: 4 */
    a.push_back(d); /* line 74 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  long long d; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> d; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < d; i++) { /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
    long long e; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> e; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
    b.push_back(e); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  long long tot = 0; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  while (!a.empty() && !b.empty()) { /* line 84 slow_hit_count: 10000000, fast_hit_count: 2 */
    long long e = a.front(); /* line 85 slow_hit_count: 10000000, fast_hit_count: 1 */
    long long f = b.front(); /* line 86 slow_hit_count: 10000000, fast_hit_count: 1 */
    a.pop_front(); /* line 87 slow_hit_count: 10000000, fast_hit_count: 1 */
    b.pop_front(); /* line 88 slow_hit_count: 10000000, fast_hit_count: 1 */
    if (e > f) { /* line 89 slow_hit_count: 10000000, fast_hit_count: 1 */
      a.push_back(f); /* line 90 slow_hit_count: 4999999, fast_hit_count: 1 */
      a.push_back(e); /* line 91 slow_hit_count: 4999999, fast_hit_count: 1 */
    } else { /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      b.push_back(e); /* line 93 slow_hit_count: 5000001, fast_hit_count: 0 */
      b.push_back(f); /* line 94 slow_hit_count: 5000001, fast_hit_count: 0 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    tot++; /* line 96 slow_hit_count: 10000000, fast_hit_count: 1 */
    if (tot >= 10000000) break; /* line 97 slow_hit_count: 10000000, fast_hit_count: 1 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  if (tot >= 10000000) { /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << endl; /* line 100 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 0 */
  } else /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    cout << tot << ' '; /* line 103 slow_hit_count: 0, fast_hit_count: 1 */
  if (a.empty()) { /* line 104 slow_hit_count: 0, fast_hit_count: 1 */
    cout << 2 << endl; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
    cout << 1 << endl; /* line 107 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 109 slow_hit_count: 0, fast_hit_count: 1 */


assistant: To analyze the performance of the given C program for the card game, let's go through the process step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**  
   The lines with significantly more hits in the slow input compared to the fast input are primarily within the game loop starting at line 84. The loop runs an exceptionally high number of iterations for the slow input (10 million hits), indicating that the game is stuck in this loop without reaching a conclusion.

2. **Pinpoint Lines/Functions with More Hits:**  
   - Lines 84-97 are hit 10 million times in the slow input, indicating that the game loop is the primary bottleneck.
   - Lines 85-88 handle deque operations (front and pop_front), contributing to the high cost in each iteration.
   - Lines 90-94 involve pushing cards back into the deques, which further extends the game when conditions do not change significantly.

3. **Infer Interactions with Data Structures:**  
   The game is implemented using two deques representing the players' cards. The primary issue arises from situations where card exchanges lead to state repetition, causing the game loop to iterate excessively without resolving, hinting at a potential infinite loop or prolonged game state cycling.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, let's derive natural language invariants describing conditions triggering performance issues:

1. **Invariant for Repeated Cycles:**
   - **Natural Language Description:** "When the sequence of card exchanges between players forms a cycle, causing repeated states without progress, the game may fall into an infinite loop or an excessive number of iterations."
   - **Explanation:** This condition arises when the order and values of cards result in states that repeat over time, preventing a decisive outcome and prolonging the game.

2. **Invariant for Balanced Card Values:**
   - **Natural Language Description:** "If both players have card values that consistently allow for the exchange of cards but do not significantly change the order or lead to a player losing all cards, the game may take an excessive number of turns to resolve."
   - **Explanation:** This condition occurs when neither player's stack diminishes effectively due to similar value distribution, leading to prolonged gameplay.

3. **Invariant for Large Iteration Limits:**
   - **Natural Language Description:** "If the game exceeds a predefined maximum number of iterations without reaching a conclusion, it may indicate a non-terminating or excessively long game due to repetitive gameplay patterns."
   - **Explanation:** This condition represents a fail-safe for detecting potential infinite loops by counting iterations and enforcing an upper limit.

These performance invariants help in understanding the conditions under which the program may slow down or become non-terminating, particularly focusing on cyclical or balanced gameplay that doesn't lead to a resolution. These insights can guide optimization efforts or adjustments in the game's rules or implementation to prevent such scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Inferred Invariants into C++ Checker Code

Let's implement the natural language invariants derived previously into C++ code snippets. We will create checker functions for each invariant condition:

1. **Invariant for Repeated Cycles:**

   ```cpp
   void check_cycle_invariant(int iterationCount, const deque<long long>& a, const deque<long long>& b) {
       if (iterationCount > 1000000) { // Example threshold to indicate non-termination
           cerr << "Warning: cycle_invariant triggered - excessive iterations indicating potential cycle" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Balanced Card Values:**

   ```cpp
   void check_balanced_invariant(const deque<long long>& a, const deque<long long>& b) {
       if (a.size() == b.size() && a.size() > 1) { // Example condition: both players have similar deck sizes
           cerr << "Warning: balanced_invariant triggered - balanced decks may cause prolonged gameplay" << endl;
           abort();
       }
   }
   ```

3. **Invariant for Large Iteration Limits:**

   ```cpp
   void check_iteration_invariant(int iterationCount) {
       if (iterationCount >= 10000000) { // Upper limit on iterations
           cerr << "Warning: iteration_invariant triggered - exceeded maximum iteration limit" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checks into the original program to effectively detect the performance issues:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for excessive iterations indicating potential cycle
void check_cycle_invariant(int iterationCount, const deque<long long>& a, const deque<long long>& b) {
    if (iterationCount > 1000000) { // Example threshold to indicate non-termination
        cerr << "Warning: cycle_invariant triggered - excessive iterations indicating potential cycle" << endl;
        abort();
    }
}

// Checker for balanced decks potentially causing prolonged gameplay
void check_balanced_invariant(const deque<long long>& a, const deque<long long>& b) {
    if (a.size() == b.size() && a.size() > 1) { // Example condition: both players have similar deck sizes
        cerr << "Warning: balanced_invariant triggered - balanced decks may cause prolonged gameplay" << endl;
        abort();
    }
}

// Checker for upper limit on iterations
void check_iteration_invariant(int iterationCount) {
    if (iterationCount >= 10000000) { // Upper limit on iterations
        cerr << "Warning: iteration_invariant triggered - exceeded maximum iteration limit" << endl;
        abort();
    }
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    long long n;
    cin >> n;
    deque<long long> a;
    deque<long long> b;
    long long c;
    cin >> c;
    for (long long i = 0; i < c; i++) {
        long long d;
        cin >> d;
        a.push_back(d);
    }
    long long d;
    cin >> d;
    for (long long i = 0; i < d; i++) {
        long long e;
        cin >> e;
        b.push_back(e);
    }
    
    long long tot = 0;
    
    // Check for balanced decks
    check_balanced_invariant(a, b);
    
    while (!a.empty() && !b.empty()) {
        long long e = a.front();
        long long f = b.front();
        a.pop_front();
        b.pop_front();
        
        if (e > f) {
            a.push_back(f);
            a.push_back(e);
        } else {
            b.push_back(e);
            b.push_back(f);
        }
        
        tot++;
        
        // Check for excessive iterations or potential cycle
        check_cycle_invariant(tot, a, b);
        
        // Check for iteration limit
        check_iteration_invariant(tot);
    }
    
    if (tot >= 10000000) {
        cout << -1 << endl;
        return 0;
    } else {
        cout << tot << ' ';
    }
    
    if (a.empty()) {
        cout << 2 << endl;
    } else {
        cout << 1 << endl;
    }
}
```

### Explanation of Integration

- The `check_balanced_invariant` is called after initializing the decks to immediately warn if the decks have a balanced distribution that can lead to prolonged gameplay.
- The `check_cycle_invariant` and `check_iteration_invariant` are placed inside the game loop to continuously monitor for excessive iterations or potential cycles.
- These checks ensure the program can abort early under conditions known to cause significant slowdowns or non-termination.

