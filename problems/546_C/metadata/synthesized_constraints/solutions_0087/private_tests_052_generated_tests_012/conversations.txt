system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k1, k2, x, y, i;
  cin >> n;
  queue<int> q1;
  queue<int> q2;
  cin >> k1;
  for (i = 0; i < k1; i++) {
    cin >> x;
    q1.push(x);
  }
  cin >> k2;
  for (i = 0; i < k2; i++) {
    cin >> x;
    q2.push(x);
  }
  for (i = 1; i <= 40000000; i++) {
    x = q1.front();
    q1.pop();
    y = q2.front();
    q2.pop();
    if (x > y) {
      q1.push(y);
      q1.push(x);
    } else if (y > x) {
      q2.push(x);
      q2.push(y);
    }
    if (q1.empty()) break;
    if (q2.empty()) break;
  }
  if (q1.empty())
    cout << i << " "
         << "2" << endl;
  else if (q2.empty())
    cout << i << " "
         << "1" << endl;
  else
    cout << "-1" << endl;
  return (0);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
4 2 4 3 1
1 5


(G.2) Fast Input

5
4 2 4 3 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k1, k2, x, y, i; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  queue<int> q1; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  queue<int> q2; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < k1; i++) { /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> x; /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
    q1.push(x); /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k2; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < k2; i++) { /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> x; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    q2.push(x); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= 40000000; i++) { /* line 18 slow_hit_count: 40000001, fast_hit_count: 1 */
    x = q1.front(); /* line 19 slow_hit_count: 40000000, fast_hit_count: 1 */
    q1.pop(); /* line 20 slow_hit_count: 40000000, fast_hit_count: 1 */
    y = q2.front(); /* line 21 slow_hit_count: 40000000, fast_hit_count: 1 */
    q2.pop(); /* line 22 slow_hit_count: 40000000, fast_hit_count: 1 */
    if (x > y) { /* line 23 slow_hit_count: 40000000, fast_hit_count: 1 */
      q1.push(y); /* line 24 slow_hit_count: 19999999, fast_hit_count: 1 */
      q1.push(x); /* line 25 slow_hit_count: 19999999, fast_hit_count: 1 */
    } else if (y > x) { /* line 26 slow_hit_count: 20000001, fast_hit_count: 0 */
      q2.push(x); /* line 27 slow_hit_count: 20000001, fast_hit_count: 0 */
      q2.push(y); /* line 28 slow_hit_count: 20000001, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (q1.empty()) break; /* line 30 slow_hit_count: 40000000, fast_hit_count: 1 */
    if (q2.empty()) break; /* line 31 slow_hit_count: 40000000, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  if (q1.empty()) /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    cout << i << " " /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
         << "2" << endl; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  else if (q2.empty()) /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    cout << i << " " /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
         << "1" << endl; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1" << endl; /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
  return (0); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C code for performance bottlenecks and generate performance-characterizing invariants, we will follow the outlined phases to identify and describe conditions that can cause slow execution.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The code segment within the loop starting at line 18 has significantly more hits in the slow input compared to the fast input. Specifically, lines 19 through 31 are executed 40,000,000 times for the slow input, but only once for the fast input.

2. **Pinpointing Bottlenecks:**
   - The loop on line 18 with the condition `i <= 40000000` is clearly a major source of inefficiency as it allows up to 40 million iterations.
   - Lines 19-31 are heavily executed, indicating that the game logic for card comparisons can result in many repetitive cycles, especially if neither player can empty their stack quickly.

3. **Interaction with Data Structures:**
   - The queues `q1` and `q2` are used to manage the cards for both players. Frequent operations on these queues (popping and pushing back cards) suggest that the game state changes slowly over time, leading to many iterations when the card strengths are balanced or lead to repeated cycles.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the above analysis, we can describe potential slow paths in natural language as follows:

1. **Invariant 1: Cyclical Card Exchanges**
   - **Description:** "If the card values between the players are close such that neither player consistently wins rounds, the game may enter a cycle where the same cards are repeatedly exchanged without depleting either player's stack, potentially leading to an infinite loop."
   - **Context:** In the slow input example, `q1` and `q2` repeatedly reach the same state, causing the loop to continue indefinitely until the iteration limit is reached.

2. **Invariant 2: Balanced Initial Distribution**
   - **Description:** "When players start with a balanced distribution of strong and weak cards, the game may result in prolonged rounds of play without any player depleting their cards quickly."
   - **Context:** Balanced strength means that players will often tie in card value, leading to many repeated battles before a stack is emptied.

3. **Invariant 3: Large Number of Iterations in Game Loop**
   - **Description:** "If the condition for ending the game loop allows for a high number of iterations (such as 40 million), it is critical to ensure that the game logic breaks out due to one player's stack being emptied, otherwise it risks running indefinitely."
   - **Context:** The high iteration count cap paired with unresolved game state changes can cause the program to reach this limit, as seen in the slow input.

These invariants help us understand why certain input configurations slow down the program significantly while adhering to the constraint of `n <= 10`. They highlight the need to manage cyclical conditions in the game logic, particularly with balanced or near-balanced initial card distributions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a "war"-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.

Input

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k1 (1 ≤ k1 ≤ n - 1), the number of the first soldier's cards. Then follow k1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k2 (k1 + k2 = n), the number of the second soldier's cards. Then follow k2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.

Output

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.

Examples

Input

4
2 1 3
2 4 2


Output

6 2

Input

3
1 2
2 1 3


Output

-1

Note

First sample: 

<image>

Second sample: 

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Based on the performance-characterizing invariants described earlier, we will write C++ code to check for these conditions at runtime.

1. **Invariant 1: Cyclical Card Exchanges**
   ```cpp
   void check_cyclical_exchange(bool condition, int iteration) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - cyclical card exchanges detected!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Balanced Initial Distribution**
   ```cpp
   void check_balanced_distribution(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - balanced initial card distribution!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Large Number of Iterations in Game Loop**
   ```cpp
   void check_large_iterations(bool condition, int iteration) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in game loop!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

We will now integrate the checker functions into the original C++ program, placing them strategically to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_cyclical_exchange(bool condition, int iteration) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - cyclical card exchanges detected at iteration " << iteration << "!" << endl;
        abort();
    }
}

void check_balanced_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - balanced initial card distribution!" << endl;
        abort();
    }
}

void check_large_iterations(bool condition, int iteration) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in game loop at iteration " << iteration << "!" << endl;
        abort();
    }
}

int main() {
    int n, k1, k2, x, y, i;
    cin >> n;
    queue<int> q1;
    queue<int> q2;
    cin >> k1;
    for (i = 0; i < k1; i++) {
        cin >> x;
        q1.push(x);
    }
    cin >> k2;
    for (i = 0; i < k2; i++) {
        cin >> x;
        q2.push(x);
    }

    // Check for balanced initial distribution
    // This is a simplistic check assuming if both players have half of the cards, it might be balanced.
    check_balanced_distribution(k1 == k2);

    set<pair<vector<int>, vector<int>>> previous_states; // Track previous states to detect cycles
    for (i = 1; i <= 40000000; i++) {
        x = q1.front();
        q1.pop();
        y = q2.front();
        q2.pop();
        if (x > y) {
            q1.push(y);
            q1.push(x);
        } else if (y > x) {
            q2.push(x);
            q2.push(y);
        }
        if (q1.empty()) break;
        if (q2.empty()) break;

        // Detect cyclical exchanges
        vector<int> state_q1, state_q2;
        queue<int> temp1 = q1, temp2 = q2;
        while (!temp1.empty()) { state_q1.push_back(temp1.front()); temp1.pop(); }
        while (!temp2.empty()) { state_q2.push_back(temp2.front()); temp2.pop(); }
        check_cyclical_exchange(previous_states.count({state_q1, state_q2}) > 0, i);
        previous_states.insert({state_q1, state_q2});

        // Check for excessive iterations
        check_large_iterations(i >= 1000000, i);  // Example threshold
    }

    if (q1.empty())
        cout << i << " "
             << "2" << endl;
    else if (q2.empty())
        cout << i << " "
             << "1" << endl;
    else
        cout << "-1" << endl;

    return 0;
}
```

**Explanation:**
- **Balanced Initial Distribution:** Checks if the players start with an equal number of cards. This is a simple heuristic and can be adjusted based on more complex balance logic.
- **Cyclical Card Exchanges:** Uses a set to track previous game states and checks for repeats, indicating a cycle.
- **Large Iterations:** Monitors the loop iteration count and aborts if it exceeds a reasonable threshold, suggesting the game could run indefinitely.

These checks help identify potential performance bottlenecks that can lead to slow execution, aiding in debugging and optimizing the program's behavior.

