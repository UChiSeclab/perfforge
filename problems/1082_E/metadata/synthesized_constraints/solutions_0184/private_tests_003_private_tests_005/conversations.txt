system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 5e5 + 4;
const long long mod = 1e9 + 7;
const int INF = 1e9 + 4;
const double eps = 1e-7;
int a[N], b[N];
string s;
int n, m, t, k;
vector<int> seg[N];
int sum[N];
int las[N];
int Mval;
int get(vector<int> t) {
  int mx = -INF;
  int tmp = 0;
  for (int i = 0; i < t.size(); ++i) {
    tmp = max(0, tmp + t[i]);
    mx = max(mx, tmp);
  }
  return mx;
}
int solve() {
  for (int i = 1; i <= n; ++i) {
    seg[a[i]].push_back(sum[las[a[i]]] - sum[i]);
    las[a[i]] = i;
    seg[a[i]].push_back(1);
  }
  for (int i = 0; i <= Mval; ++i) {
    seg[i].push_back(sum[las[i]] - sum[n]);
  }
  int res = 0;
  for (int i = 0; i <= Mval; ++i) {
    if (i == k) continue;
    res = max(res, get(seg[i]));
  }
  return res;
}
int main() {
  cin >> n >> k;
  int num = 0;
  for (int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
    Mval = max(Mval, a[i]);
    sum[i] = sum[i - 1] + (a[i] == k);
    num += (a[i] == k);
  }
  sum[n + 1] = sum[n];
  Mval++;
  int d = solve();
  cout << num + d << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
500000


(G.2) Fast Input

2 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e5 + 4; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9 + 4; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int a[N], b[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, t, k; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> seg[N]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int sum[N]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int las[N]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int Mval; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int get(vector<int> t) { /* line 14 slow_hit_count: 500001, fast_hit_count: 3 */
  int mx = -INF; /* line 15 slow_hit_count: 500001, fast_hit_count: 3 */
  int tmp = 0; /* line 16 slow_hit_count: 500001, fast_hit_count: 3 */
  for (int i = 0; i < t.size(); ++i) { /* line 17 slow_hit_count: 1000004, fast_hit_count: 8 */
    tmp = max(0, tmp + t[i]); /* line 18 slow_hit_count: 500003, fast_hit_count: 5 */
    mx = max(mx, tmp); /* line 19 slow_hit_count: 500003, fast_hit_count: 5 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return mx; /* line 21 slow_hit_count: 500001, fast_hit_count: 3 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int solve() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 24 slow_hit_count: 2, fast_hit_count: 3 */
    seg[a[i]].push_back(sum[las[a[i]]] - sum[i]); /* line 25 slow_hit_count: 1, fast_hit_count: 2 */
    las[a[i]] = i; /* line 26 slow_hit_count: 1, fast_hit_count: 2 */
    seg[a[i]].push_back(1); /* line 27 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= Mval; ++i) { /* line 29 slow_hit_count: 500003, fast_hit_count: 5 */
    seg[i].push_back(sum[las[i]] - sum[n]); /* line 30 slow_hit_count: 500002, fast_hit_count: 4 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= Mval; ++i) { /* line 33 slow_hit_count: 500003, fast_hit_count: 5 */
    if (i == k) continue; /* line 34 slow_hit_count: 500002, fast_hit_count: 4 */
    res = max(res, get(seg[i])); /* line 35 slow_hit_count: 500001, fast_hit_count: 3 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int num = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 42 slow_hit_count: 2, fast_hit_count: 3 */
    scanf("%d", a + i); /* line 43 slow_hit_count: 1, fast_hit_count: 2 */
    Mval = max(Mval, a[i]); /* line 44 slow_hit_count: 1, fast_hit_count: 2 */
    sum[i] = sum[i - 1] + (a[i] == k); /* line 45 slow_hit_count: 1, fast_hit_count: 2 */
    num += (a[i] == k); /* line 46 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  sum[n + 1] = sum[n]; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  Mval++; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  int d = solve(); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  cout << num + d << endl; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program and derive conditions under which it slows down, we need to analyze the line-level hit count information for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `get` function, particularly the loop inside it (lines 17-19), is the most hit section for the slow input with over a million hits. This indicates that this function and loop are likely responsible for the slowdown.
   - The `solve` function (lines 29-35) also has significantly higher hit counts for the slow input, suggesting a strong interaction with the data structures and loops.

2. **Interaction with Data Structures and Loops:**
   - The `seg` vector, which is a vector of vectors, is populated in the `solve` function and then processed in the `get` function. The number of elements in each `seg[i]` directly affects the execution time.
   - The second loop in `solve` (lines 29-35) iterates over `Mval`, which is incremented to be at least as large as the maximum value in the array `a`. This loop's execution time is directly tied to the value of `Mval`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following invariants that characterize when the program is likely to enter a slow path:

1. **Invariant #1: High Maximum Value in Array**
   - Natural Language Description: "If the maximum value in the array `a` is high, the program may slow down significantly due to extended processing time in loops iterating over all possible values."
   - Explanation: The `Mval` variable determines the range of the outer loop in the `solve` function. A high maximum value results in a larger loop range, leading to more iterations and, consequently, more calls to `get`.

2. **Invariant #2: Large Segments in Data Structures**
   - Natural Language Description: "When there are large segments in the `seg` data structure, especially with many elements per segment, the execution time may degrade due to processing each segment multiple times."
   - Explanation: The `get` function processes each segment in `seg` by iterating through its elements. Larger segments result in more computational load.

3. **Invariant #3: High Frequency of Element Values Close to `c`**
   - Natural Language Description: "If a large portion of the array `a` consists of values close to `c`, the number of updates and manipulations required might increase, causing a slowdown."
   - Explanation: The logic inside the `solve` function considers the differences from `c` to determine segment adjustments, and having many elements near `c` could make adjustments less effective or require more iterations.

### Conclusion

These invariants help identify scenarios that can lead to slow execution. They abstract away from specific input values and focus on the general conditions and structures leading to performance issues, which is crucial for broader testing and optimization.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

#### Invariant #1: High Maximum Value in Array
```cpp
void check_max_value_invariant(int Mval) {
    if (Mval > 1e5) {  // Arbitrary threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - high max value in array!" << endl;
        abort();
    }
}
```

#### Invariant #2: Large Segments in Data Structures
```cpp
void check_large_segments_invariant(const vector<int>& seg) {
    for (const auto& segment : seg) {
        if (segment.size() > 1e4) {  // Assumed threshold for large segment size
            cerr << "Warning: Performance bottleneck condition triggered - large segment in seg data structure!" << endl;
            abort();
        }
    }
}
```

#### Invariant #3: High Frequency of Element Values Close to `c`
```cpp
void check_high_frequency_invariant(int countCloseToC, int n) {
    if (countCloseToC > n * 0.8) {  // If more than 80% of elements are close to `c`
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of elements close to c!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Program

Here is the instrumented C++ code with the integrated invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 5e5 + 4;
const long long mod = 1e9 + 7;
const int INF = 1e9 + 4;
const double eps = 1e-7;
int a[N], b[N];
string s;
int n, m, t, k;
vector<int> seg[N];
int sum[N];
int las[N];
int Mval;

int get(vector<int> t) {
    int mx = -INF;
    int tmp = 0;
    for (int i = 0; i < t.size(); ++i) {
        tmp = max(0, tmp + t[i]);
        mx = max(mx, tmp);
    }
    return mx;
}

int solve() {
    for (int i = 1; i <= n; ++i) {
        seg[a[i]].push_back(sum[las[a[i]]] - sum[i]);
        las[a[i]] = i;
        seg[a[i]].push_back(1);
    }
    for (int i = 0; i <= Mval; ++i) {
        seg[i].push_back(sum[las[i]] - sum[n]);
    }
    
    // Check for large segments in the 'seg' data structure
    for (int i = 0; i <= Mval; ++i) {
        check_large_segments_invariant(seg[i]);
    }
    
    int res = 0;
    for (int i = 0; i <= Mval; ++i) {
        if (i == k) continue;
        res = max(res, get(seg[i]));
    }
    return res;
}

int main() {
    cin >> n >> k;
    int num = 0;
    int countCloseToC = 0;

    for (int i = 1; i <= n; ++i) {
        scanf("%d", a + i);
        Mval = max(Mval, a[i]);
        sum[i] = sum[i - 1] + (a[i] == k);
        num += (a[i] == k);
        if (abs(a[i] - k) < 10) {  // Assuming 'close to c' means within a certain range
            countCloseToC++;
        }
    }
    
    sum[n + 1] = sum[n];
    Mval++;
    
    // Check for high maximum value in the array
    check_max_value_invariant(Mval);
    
    // Check for high frequency of elements close to 'c'
    check_high_frequency_invariant(countCloseToC, n);
    
    int d = solve();
    cout << num + d << endl;
    return 0;
}
```

### Explanation:
- **`check_max_value_invariant`** is called after determining the maximum value in the array to ensure it doesn't exceed a certain threshold.
- **`check_large_segments_invariant`** is called inside the `solve` function to check that each segment in `seg` does not become too large.
- **`check_high_frequency_invariant`** is called in `main` after reading the input to check if a large portion of the array is close to `c`. 

This instrumented code includes runtime checks to warn about and abort execution when potential performance bottlenecks are detected according to the identified invariants.

