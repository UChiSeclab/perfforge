system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int v[500010], st[500010], dr[500010], d[500010];
vector<int> poz[500010];
int main() {
  int n, c, maxx = 0;
  scanf("%d%d", &n, &c);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &v[i]);
    poz[v[i]].push_back(i);
    st[i] = st[i - 1];
    if (v[i] == c) st[i]++;
    maxx = max(maxx, v[i]);
  }
  for (int i = n; i >= 1; i--) {
    dr[i] = dr[i + 1];
    if (v[i] == c) dr[i]++;
  }
  int sol = dr[1];
  for (int i = 1; i <= maxx; i++) {
    if (i == c) continue;
    if (poz[i].size() == 0) continue;
    d[poz[i][0]] = st[poz[i][0]] + 1;
    sol = max(sol, d[poz[i][0]] + dr[poz[i][0] + 1]);
    for (int j = 1; j < poz[i].size(); j++) {
      int pozz = poz[i][j];
      d[pozz] = max(st[pozz] + 1, d[poz[i][j - 1]] + 1);
      sol = max(sol, d[pozz] + dr[pozz + 1]);
    }
  }
  printf("%d", sol);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
500000


(G.2) Fast Input

2 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int v[500010], st[500010], dr[500010], d[500010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> poz[500010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, c, maxx = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &c); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 8 slow_hit_count: 2, fast_hit_count: 3 */
    scanf("%d", &v[i]); /* line 9 slow_hit_count: 1, fast_hit_count: 2 */
    poz[v[i]].push_back(i); /* line 10 slow_hit_count: 1, fast_hit_count: 2 */
    st[i] = st[i - 1]; /* line 11 slow_hit_count: 1, fast_hit_count: 2 */
    if (v[i] == c) st[i]++; /* line 12 slow_hit_count: 1, fast_hit_count: 2 */
    maxx = max(maxx, v[i]); /* line 13 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= 1; i--) { /* line 15 slow_hit_count: 2, fast_hit_count: 3 */
    dr[i] = dr[i + 1]; /* line 16 slow_hit_count: 1, fast_hit_count: 2 */
    if (v[i] == c) dr[i]++; /* line 17 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int sol = dr[1]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= maxx; i++) { /* line 20 slow_hit_count: 500001, fast_hit_count: 3 */
    if (i == c) continue; /* line 21 slow_hit_count: 500000, fast_hit_count: 2 */
    if (poz[i].size() == 0) continue; /* line 22 slow_hit_count: 499999, fast_hit_count: 1 */
    d[poz[i][0]] = st[poz[i][0]] + 1; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    sol = max(sol, d[poz[i][0]] + dr[poz[i][0] + 1]); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 1; j < poz[i].size(); j++) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      int pozz = poz[i][j]; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      d[pozz] = max(st[pozz] + 1, d[poz[i][j - 1]] + 1); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      sol = max(sol, d[pozz] + dr[pozz + 1]); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", sol); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottleneck in the provided C program, we'll analyze the hit count information and identify potential inefficiencies. Then, we'll derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analyzing Line-Level Hit Counts:**
   - **Line 20 (`for (int i = 1; i <= maxx; i++)`):** This line has a significantly higher hit count in the slow input scenario (500,001 times) compared to the fast input (3 times). The loop iterates over all possible values in the array, up to the maximum value `maxx`.
   - **Lines 21 and 22 (`if (i == c) continue;` and `if (poz[i].size() == 0) continue;`):** These lines are executed 500,000 times in the slow input because the conditions frequently skip large portions of the loop. This indicates the presence of many non-target values.
   - The rest of the loop body has minimal hits in the slow run, suggesting that the majority of the iterations are effectively no-ops due to the `continue` statements.

2. **Observations:**
   - The slow input results in many unnecessary iterations over values that do not contribute to the solution. Specifically, the loop is iterating over many values that do not exist in the input array (`poz[i].size() == 0`).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **High Maximum Value Iteration:**
   - **Natural Language Invariant:** "If the maximum value in the array (`maxx`) is significantly larger than the number of unique values in the array, the program may iterate unnecessarily over non-existent values, causing a slowdown."
   - **Rationale:** The loop iterates over all potential values up to `maxx`, but many of these values may not appear in the array, leading to unnecessary operations.

2. **Sparse Target Element Distribution:**
   - **Natural Language Invariant:** "If the target value `c` is rare compared to the variety of other values, the checks and segmentation logic can lead to a high number of skipped iterations, slowing down the process."
   - **Rationale:** The check `if (i == c) continue;` is frequently true in cases where `c` is uncommon, leading to loop inefficiencies.

3. **Inefficient Population Mapping:**
   - **Natural Language Invariant:** "When the distribution of values is sparse, especially when `c` is not the most frequent element, the mapping of positions (`poz[i]`) may become inefficient, leading to performance degradation."
   - **Rationale:** The `poz` array maps positions of each value, and when many values do not exist, the program checks these empty mappings repeatedly.

These invariants help identify conditions under which the program is likely to slow down, particularly when it processes inputs with certain value distributions that lead to inefficient looping and checking behavior. Avoiding large gaps between `maxx` and actual populated values, or ensuring that `c` is a more common element, could mitigate these inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

Solution (C++ code):
{solution}


assistant: Let's translate the performance-characterizing invariants into C++ code snippets that can be used to check these conditions at runtime. We'll then integrate these checks into the provided C++ program.

### Phase 3: Implementing Invariant Checks in C++

1. **High Maximum Value Iteration:**
   - This invariant checks if the maximum value `maxx` is significantly larger than the number of unique values in the array.
   ```cpp
   void check_max_value_iteration_invariant(int maxx, const vector<int>& unique_values) {
       if (maxx > 2 * unique_values.size()) {
           cerr << "Warning: Performance bottleneck condition triggered - high max value iteration!" << endl;
           abort();
       }
   }
   ```

2. **Sparse Target Element Distribution:**
   - This invariant checks if the target value `c` is rare compared to other values in the array.
   ```cpp
   void check_sparse_target_distribution_invariant(int target_count, int n) {
       if (target_count < n / 10) { // Assuming a threshold where c is less than 10% of array
           cerr << "Warning: Performance bottleneck condition triggered - sparse target element distribution!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Population Mapping:**
   - This invariant checks if there are many non-existent value checks in the loop.
   ```cpp
   void check_population_mapping_invariant(const vector<int>& values, int n) {
       int non_existent_count = 0;
       for (int i = 1; i <= n; ++i) {
           if (values[i] == 0) {
               non_existent_count++;
           }
       }
       if (non_existent_count > n / 2) { // More than half of possible values are non-existent
           cerr << "Warning: Performance bottleneck condition triggered - inefficient population mapping!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program. We'll place them strategically to ensure they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int v[500010], st[500010], dr[500010], d[500010];
vector<int> poz[500010];

// Check for high maximum value iteration
void check_max_value_iteration_invariant(int maxx, const vector<int>& unique_values) {
    if (maxx > 2 * unique_values.size()) {
        cerr << "Warning: Performance bottleneck condition triggered - high max value iteration!" << endl;
        abort();
    }
}

// Check for sparse target element distribution
void check_sparse_target_distribution_invariant(int target_count, int n) {
    if (target_count < n / 10) { // Assuming a threshold where c is less than 10% of array
        cerr << "Warning: Performance bottleneck condition triggered - sparse target element distribution!" << endl;
        abort();
    }
}

// Check for inefficient population mapping
void check_population_mapping_invariant(const vector<int>& values, int n) {
    int non_existent_count = 0;
    for (int i = 1; i <= n; ++i) {
        if (values[i] == 0) {
            non_existent_count++;
        }
    }
    if (non_existent_count > n / 2) { // More than half of possible values are non-existent
        cerr << "Warning: Performance bottleneck condition triggered - inefficient population mapping!" << endl;
        abort();
    }
}

int main() {
    int n, c, maxx = 0;
    scanf("%d%d", &n, &c);
    
    set<int> unique_values;  // To keep track of unique values

    for (int i = 1; i <= n; i++) {
        scanf("%d", &v[i]);
        poz[v[i]].push_back(i);
        st[i] = st[i - 1];
        if (v[i] == c) st[i]++;
        maxx = max(maxx, v[i]);
        unique_values.insert(v[i]);
    }

    // Check invariants after input processing
    check_max_value_iteration_invariant(maxx, vector<int>(unique_values.begin(), unique_values.end()));
    check_sparse_target_distribution_invariant(st[n], n);
    check_population_mapping_invariant(v, n);

    for (int i = n; i >= 1; i--) {
        dr[i] = dr[i + 1];
        if (v[i] == c) dr[i]++;
    }

    int sol = dr[1];
    for (int i = 1; i <= maxx; i++) {
        if (i == c) continue;
        if (poz[i].size() == 0) continue;
        d[poz[i][0]] = st[poz[i][0]] + 1;
        sol = max(sol, d[poz[i][0]] + dr[poz[i][0] + 1]);
        for (int j = 1; j < poz[i].size(); j++) {
            int pozz = poz[i][j];
            d[pozz] = max(st[pozz] + 1, d[poz[i][j - 1]] + 1);
            sol = max(sol, d[pozz] + dr[pozz + 1]);
        }
    }
    printf("%d", sol);
    return 0;
}
```

### Explanation

- **Invariant Checks:** Each check is placed after input processing but before the core logic begins, ensuring we don't add overhead during the main processing loops.
- **Unique Values Tracking:** We use a `set` to track unique values in the input, which is used in the first invariant.
- **Target Count Tracking:** We use the `st` array to track the count of target elements (`c`) during input processing, which is utilized in the second invariant.
- **Population Mapping:** We verify that the loop will not repeatedly check non-existent values, using the `v` array for the third invariant.

This approach helps us diagnose potential performance issues early in the execution of the program while avoiding runtime overhead in critical sections.

