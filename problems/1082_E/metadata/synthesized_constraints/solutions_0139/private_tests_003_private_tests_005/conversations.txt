system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 500005;
int n, c, prec[maxn], x, cnt[maxn];
vector<int> posi[maxn];
int main() {
  int mma = -1;
  scanf("%d%d", &n, &c);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &x);
    mma = max(mma, x);
    prec[i] = prec[i - 1];
    if (x == c)
      prec[i]++;
    else
      posi[x].push_back(i);
  }
  int ans = prec[n];
  for (int i = 1; i <= mma; i++) {
    if (!posi[i].size()) continue;
    int tmp = 0;
    for (int j = 0; j < posi[i].size(); j++) {
      int nowpos = posi[i][j];
      tmp = max(tmp, prec[nowpos - 1] - cnt[i]);
      cnt[i]++;
      ans = max(ans, prec[n] - prec[nowpos] + tmp + cnt[i]);
    }
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
500000


(G.2) Fast Input

2 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 500005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, c, prec[maxn], x, cnt[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> posi[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int mma = -1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &c); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 9 slow_hit_count: 2, fast_hit_count: 3 */
    scanf("%d", &x); /* line 10 slow_hit_count: 1, fast_hit_count: 2 */
    mma = max(mma, x); /* line 11 slow_hit_count: 1, fast_hit_count: 2 */
    prec[i] = prec[i - 1]; /* line 12 slow_hit_count: 1, fast_hit_count: 2 */
    if (x == c) /* line 13 slow_hit_count: 1, fast_hit_count: 2 */
      prec[i]++; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      posi[x].push_back(i); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = prec[n]; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= mma; i++) { /* line 19 slow_hit_count: 500001, fast_hit_count: 3 */
    if (!posi[i].size()) continue; /* line 20 slow_hit_count: 500000, fast_hit_count: 2 */
    int tmp = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 0; j < posi[i].size(); j++) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
      int nowpos = posi[i][j]; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
      tmp = max(tmp, prec[nowpos - 1] - cnt[i]); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
      cnt[i]++; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      ans = max(ans, prec[n] - prec[nowpos] + tmp + cnt[i]); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify performance bottlenecks in the given C program, we analyze the hit counts from the fast and slow inputs. The goal is to understand why certain segments of code are executed more frequently and lead to slower performance.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Execution:** 
   - **Line 19 (`for (int i = 1; i <= mma; i++)`):** This line is executed significantly more times in the slow input (500,001 hits) than in the fast input (3 hits). This suggests that the loop iterates over a wide range of values, potentially up to the maximum element value, `mma`.
   - **Line 20 (`if (!posi[i].size()) continue;`):** This line gets hit 500,000 times in the slow input, indicating that many iterations are skipped due to empty `posi[i]` vectors. The `posi` array stores indices of elements in the array `a` that don't equal `c`, so empty checks are frequent.
   
2. **Data Structure Interaction:**
   - The `posi` data structure is a vector of vectors, storing positions of elements not equal to `c`. This structure causes significant overhead due to its usage in nested loops.
   
3. **High Hit Count in Outer Loop:**
   - The outer loop iterates over each possible integer value from 1 to the maximum element in `a` (`mma`). Given the constraint `n <= 5 ⋅ 10^5`, this can lead to a huge number of iterations in cases where `mma` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants in natural language:

1. **High Maximum Element Value:**
   - "If the maximum element value `mma` in the array `a` is large, the iteration over potential values (`mma`) causes a significant number of checks, leading to performance degradation. This is particularly pronounced when `mma` approaches its upper constraint limit, 5 ⋅ 10^5."

2. **Sparse Non-Target Elements:**
   - "When the array contains a large number of elements equal to `c` interspersed with very few non-`c` elements, the code's efficiency drops. This pattern causes frequent skipping of elements in the loop, leading to unnecessary iterations."

3. **Excessive Array Operations:**
   - "If the posi array is sparsely populated, meaning most elements in `a` are equal to `c`, the outer loop iterates up to the maximum element value `mma` needlessly, incurring a performance hit due to the lack of meaningful data processing within those iterations."

These invariants highlight conditions under which the program might slow down, providing useful indicators for future performance testing or optimization efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the identified natural language invariants into runtime checkers in C++ code:

1. **High Maximum Element Value:**
   - "If the maximum element value `mma` in the array `a` is large, the iteration over potential values (`mma`) causes a significant number of checks, leading to performance degradation. This is particularly pronounced when `mma` approaches its upper constraint limit, 5 ⋅ 10^5."

```cpp
void check_max_element_invariant(int mma) {
    if (mma > 400000) { // choosing a threshold lower than the max constraint of 500,000
        cerr << "Warning: Performance bottleneck condition triggered due to high maximum element value!" << endl;
        abort();
    }
}
```

2. **Sparse Non-Target Elements:**
   - "When the array contains a large number of elements equal to `c` interspersed with very few non-`c` elements, the code's efficiency drops. This pattern causes frequent skipping of elements in the loop, leading to unnecessary iterations."

```cpp
void check_sparse_elements_invariant(int num_c_elements, int n) {
    if (num_c_elements > n * 0.9) { // if more than 90% of elements are equal to `c`
        cerr << "Warning: Performance bottleneck due to sparse non-target elements!" << endl;
        abort();
    }
}
```

3. **Excessive Array Operations:**
   - "If the posi array is sparsely populated, meaning most elements in `a` are equal to `c`, the outer loop iterates up to the maximum element value `mma` needlessly, incurring a performance hit due to the lack of meaningful data processing within those iterations."

```cpp
void check_excessive_operations_invariant(int meaningful_operations, int mma) {
    if (meaningful_operations < mma * 0.1) { // if less than 10% of `mma` iterations do meaningful work
        cerr << "Warning: Performance bottleneck due to excessive operations with little processing!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checks into the C++ Program

Now, let's integrate these checks into the original program by placing them in appropriate positions to monitor the performance conditions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 500005;
int n, c, prec[maxn], x, cnt[maxn];
vector<int> posi[maxn];

void check_max_element_invariant(int mma) {
    if (mma > 400000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high maximum element value!" << endl;
        abort();
    }
}

void check_sparse_elements_invariant(int num_c_elements, int n) {
    if (num_c_elements > n * 0.9) {
        cerr << "Warning: Performance bottleneck due to sparse non-target elements!" << endl;
        abort();
    }
}

void check_excessive_operations_invariant(int meaningful_operations, int mma) {
    if (meaningful_operations < mma * 0.1) {
        cerr << "Warning: Performance bottleneck due to excessive operations with little processing!" << endl;
        abort();
    }
}

int main() {
    int mma = -1;
    scanf("%d%d", &n, &c);
    int num_c_elements = 0; // Count the number of elements equal to `c`
    
    for (int i = 1; i <= n; i++) {
        scanf("%d", &x);
        mma = max(mma, x);
        prec[i] = prec[i - 1];
        if (x == c) {
            prec[i]++;
            num_c_elements++;
        } else {
            posi[x].push_back(i);
        }
    }

    // Check performance conditions after input processing
    check_max_element_invariant(mma);
    check_sparse_elements_invariant(num_c_elements, n);

    int ans = prec[n];
    int meaningful_operations = 0; // To track how many times the inner loop has meaningful work

    for (int i = 1; i <= mma; i++) {
        if (!posi[i].size()) continue;
        meaningful_operations++;
        int tmp = 0;
        for (int j = 0; j < posi[i].size(); j++) {
            int nowpos = posi[i][j];
            tmp = max(tmp, prec[nowpos - 1] - cnt[i]);
            cnt[i]++;
            ans = max(ans, prec[n] - prec[nowpos] + tmp + cnt[i]);
        }
    }

    // Final check for excessive operations
    check_excessive_operations_invariant(meaningful_operations, mma);

    printf("%d\n", ans);
    return 0;
}
```

### Explanation of Insertion Points

- **`check_max_element_invariant`** is placed after the calculation of `mma` to ensure the iteration does not proceed with a problematic `mma` value.
- **`check_sparse_elements_invariant`** is used after counting elements equal to `c`.
- **`check_excessive_operations_invariant`** is placed at the end of the loop execution to ensure it wasn't wasteful in terms of meaningful processing. 

These checks are strategically placed to monitor performance without adding overhead within tight loops.

