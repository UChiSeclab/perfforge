system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> g[500005];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, c;
  cin >> n >> c;
  vector<int> a(n + 1), pre(n + 1, 0);
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    g[a[i]].push_back(i);
    pre[i] = pre[i - 1] + (a[i] == c);
  }
  if (pre[n] == n) {
    cout << n << endl;
    return 0;
  }
  int ans = 0;
  for (int i = 1; i < 500005; i++) {
    int cans = 1, mi = INT_MAX;
    for (int j = 0; j < g[i].size(); j++) {
      if (j) {
        cans = max(cans, j + 1 - pre[g[i][j]] - mi);
      }
      mi = min(mi, j - pre[g[i][j] - 1]);
    }
    ans = max(ans, cans);
  }
  cout << ans + pre[n] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

39 1
4 2 1 1 3 5 1 5 1 1 3 3 4 3 1 1 4 5 1 5 3 3 3 1 5 1 2 1 1 4 1 1 5 2 2 1 1 2 4


(G.2) Fast Input

18 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[500005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, c; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> c; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n + 1), pre(n + 1, 0); /* line 9 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 40, fast_hit_count: 19 */
    cin >> a[i]; /* line 11 slow_hit_count: 39, fast_hit_count: 18 */
    g[a[i]].push_back(i); /* line 12 slow_hit_count: 39, fast_hit_count: 18 */
    pre[i] = pre[i - 1] + (a[i] == c); /* line 13 slow_hit_count: 39, fast_hit_count: 18 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (pre[n] == n) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    cout << n << endl; /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < 500005; i++) { /* line 20 slow_hit_count: 500005, fast_hit_count: 0 */
    int cans = 1, mi = INT_MAX; /* line 21 slow_hit_count: 500004, fast_hit_count: 0 */
    for (int j = 0; j < g[i].size(); j++) { /* line 22 slow_hit_count: 500043, fast_hit_count: 0 */
      if (j) { /* line 23 slow_hit_count: 39, fast_hit_count: 0 */
        cans = max(cans, j + 1 - pre[g[i][j]] - mi); /* line 24 slow_hit_count: 34, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      mi = min(mi, j - pre[g[i][j] - 1]); /* line 26 slow_hit_count: 39, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, cans); /* line 28 slow_hit_count: 500004, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans + pre[n] << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and derive performance-characterizing invariants, we can follow the outlined phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**

   - **Line 20:** The loop iterating over `i` from 1 to 500005 is hit 500005 times in the slow input but not at all in the fast input. This indicates that the entire loop is responsible for the slowdown.
   - **Line 22:** An inner loop iterating over `g[i]` is also hit significantly (500043 times), suggesting that the interaction between `i` and the vector `g[i]` is costly.
   - **Line 28:** The `ans` update within the outer loop is hit many times as well, implying that `ans` is recalculated frequently.

2. **Interaction with Data Structures:**

   - The vector `g` holds indices of elements in `a` that match each possible value up to the maximum value seen in `a`. This means that the outer loop is iterating over all possible values, even those not present in `a`, leading to inefficiency.
   - The logic inside the inner loop (lines 23-26) depends on the size of `g[i]`, which is directly tied to how many times each value appears in `a`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Statements:**

   - **Invariant 1:** "If the array `a` contains many unique elements, such that most values from 1 to `5 * 10^5` are present, the outer loop will perform excessive iterations, significantly slowing down execution."
   
   - **Invariant 2:** "If the number of elements in `a` that match the target value `c` is significantly less than `n`, the algorithm will spend more time calculating possible segments, as the initial check for `pre[n] == n` (all elements are `c`) will fail, leading to additional processing."
   
   - **Invariant 3:** "If a large portion of elements in `a` are close to a single value that is not `c`, the nested loops will have to consider many combinations, recalculating potential maximum segments extensively."

2. **Correlate with Input Patterns:**

   - These invariants suggest that performance degrades when there is high diversity in the elements of `a` or when `c` is not the predominant value. The slow input likely caused issues because elements were diverse with many unique values.

### Summary

The slow execution is primarily due to the inefficient handling of diverse elements in `a` and excessive looping over a large potential value space. By identifying these patterns, the invariants help predict slow scenarios and are useful for further optimization or debugging efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given array a of length n. You can choose one segment [l, r] (1 ≤ l ≤ r ≤ n) and integer value k (positive, negative or even zero) and change a_l, a_{l + 1}, ..., a_r by k each (i.e. a_i := a_i + k for each l ≤ i ≤ r).

What is the maximum possible number of elements with value c that can be obtained after one such operation?

Input

The first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.

The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a.

Output

Print one integer — the maximum possible number of elements with value c which can be obtained after performing operation described above.

Examples

Input


6 9
9 9 9 9 9 9


Output


6


Input


3 2
6 2 6


Output


2

Note

In the first example we can choose any segment and k = 0. The array will stay same.

In the second example we can choose segment [1, 3] and k = -4. The array will become [2, -2, 2].

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing and integrating the runtime checks based on the performance-characterizing invariants derived earlier. We'll perform this in two phases as requested:

### Phase 3: Implement the Natural Language Invariants as C++ Code

For each invariant, we will write a separate check function.

1. **Invariant 1 Check:**
   
   We will check if there are many unique elements in `a` that lead to excessive iterations.

```cpp
void check_unique_elements_condition(int unique_values_count, int threshold) {
    if (unique_values_count > threshold) {
        cerr << "Warning: Performance bottleneck - too many unique elements causing excessive iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2 Check:**

   We will check if the number of `c` elements is significantly less than `n`, which leads to more segment calculations.

```cpp
void check_target_elements_condition(int target_count, int n, double threshold_ratio) {
    if (target_count < n * threshold_ratio) {
        cerr << "Warning: Performance bottleneck - insufficient target elements leading to additional processing!" << endl;
        abort();
    }
}
```

3. **Invariant 3 Check:**

   We will check if a large portion of elements are close to a single non-`c` value.

```cpp
void check_dominant_non_c_elements(int dominant_count, int n, double threshold_ratio) {
    if (dominant_count > n * threshold_ratio) {
        cerr << "Warning: Performance bottleneck - dominant non-target elements causing recalculations!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now, we'll integrate these checks into the original C++ program to detect performance bottlenecks effectively.

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<int> g[500005];

void check_unique_elements_condition(int unique_values_count, int threshold) {
    if (unique_values_count > threshold) {
        cerr << "Warning: Performance bottleneck - too many unique elements causing excessive iterations!" << endl;
        abort();
    }
}

void check_target_elements_condition(int target_count, int n, double threshold_ratio) {
    if (target_count < n * threshold_ratio) {
        cerr << "Warning: Performance bottleneck - insufficient target elements leading to additional processing!" << endl;
        abort();
    }
}

void check_dominant_non_c_elements(int dominant_count, int n, double threshold_ratio) {
    if (dominant_count > n * threshold_ratio) {
        cerr << "Warning: Performance bottleneck - dominant non-target elements causing recalculations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, c;
    cin >> n >> c;
    
    vector<int> a(n + 1), pre(n + 1, 0);
    unordered_map<int, int> value_count;
    
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        g[a[i]].push_back(i);
        pre[i] = pre[i - 1] + (a[i] == c);
        value_count[a[i]]++;
    }
    
    // Check for invariant 1: too many unique elements
    check_unique_elements_condition(value_count.size(), 1e5); // Threshold is a broad estimate

    // Check for invariant 2: insufficient target elements
    check_target_elements_condition(pre[n], n, 0.1); // Threshold ratio is a broad estimate

    // Check for invariant 3: dominant non-target elements
    int dominant_value_count = 0;
    for (const auto& entry : value_count) {
        if (entry.first != c) {
            dominant_value_count = max(dominant_value_count, entry.second);
        }
    }
    check_dominant_non_c_elements(dominant_value_count, n, 0.5); // Threshold ratio is a broad estimate

    if (pre[n] == n) {
        cout << n << endl;
        return 0;
    }
    
    int ans = 0;
    for (int i = 1; i < 500005; i++) {
        int cans = 1, mi = INT_MAX;
        for (int j = 0; j < g[i].size(); j++) {
            if (j) {
                cans = max(cans, j + 1 - pre[g[i][j]] - mi);
            }
            mi = min(mi, j - pre[g[i][j] - 1]);
        }
        ans = max(ans, cans);
    }
    cout << ans + pre[n] << endl;
    return 0;
}
```

### Explanation

- **Unique Elements Check:** We count the number of unique values in `a` and set a threshold to trigger a warning if there are too many unique values.
- **Target Elements Check:** We check if the count of elements equal to `c` is less than a certain ratio of `n`.
- **Dominant Non-`c` Elements Check:** We find the most common non-`c` value in `a` and check if its count exceeds a specific ratio of `n`.

By integrating these checks, we create a program that can dynamically identify performance bottlenecks and abort execution when conditions that lead to inefficiencies are detected.

