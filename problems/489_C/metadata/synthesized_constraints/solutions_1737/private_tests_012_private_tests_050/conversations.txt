system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int m, s;
bool dp[1001][200], dp2[1001][200];
string solve(string curAns, int curSum, int curPos) {
  if (curSum > s) return "-1";
  if (dp[curSum][curPos]) return "-1";
  dp[curSum][curPos] = true;
  if (curPos == m) {
    if (curSum == s) return curAns;
    return "-1";
  }
  for (int i = 9; i >= 0; i--) {
    if (curPos == 0 && m > 1 && i == 0) continue;
    char num = i + '0';
    string ret = solve(curAns + num, curSum + i, curPos + 1);
    if (ret != "-1") return ret;
  }
  return "-1";
}
string solve2(string curAns, int curSum, int curPos) {
  if (curSum > s) return "-1";
  if (dp2[curSum][curPos]) return "-1";
  dp2[curSum][curPos] = true;
  if (curPos == m) {
    if (curSum == s) return curAns;
    return "-1";
  }
  for (int i = 0; i <= 9; i++) {
    if (i == 0 && curPos == 0 && m > 1) continue;
    char num = i + '0';
    string ret = solve2(curAns + num, curSum + i, curPos + 1);
    if (ret != "-1") return ret;
  }
  return "-1";
}
int main() {
  cin >> m >> s;
  cout << solve2("", 0, 0) << " " << solve("", 0, 0) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

100 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int m, s; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool dp[1001][200], dp2[1001][200]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string solve(string curAns, int curSum, int curPos) { /* line 5 slow_hit_count: 901, fast_hit_count: 10 */
  if (curSum > s) return "-1"; /* line 6 slow_hit_count: 901, fast_hit_count: 10 */
  if (dp[curSum][curPos]) return "-1"; /* line 7 slow_hit_count: 101, fast_hit_count: 1 */
  dp[curSum][curPos] = true; /* line 8 slow_hit_count: 101, fast_hit_count: 1 */
  if (curPos == m) { /* line 9 slow_hit_count: 101, fast_hit_count: 1 */
    if (curSum == s) return curAns; /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
    return "-1"; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 9; i >= 0; i--) { /* line 13 slow_hit_count: 900, fast_hit_count: 11 */
    if (curPos == 0 && m > 1 && i == 0) continue; /* line 14 slow_hit_count: 900, fast_hit_count: 10 */
    char num = i + '0'; /* line 15 slow_hit_count: 900, fast_hit_count: 9 */
    string ret = solve(curAns + num, curSum + i, curPos + 1); /* line 16 slow_hit_count: 900, fast_hit_count: 9 */
    if (ret != "-1") return ret; /* line 17 slow_hit_count: 900, fast_hit_count: 9 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return "-1"; /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
string solve2(string curAns, int curSum, int curPos) { /* line 21 slow_hit_count: 5150, fast_hit_count: 10 */
  if (curSum > s) return "-1"; /* line 22 slow_hit_count: 5150, fast_hit_count: 10 */
  if (dp2[curSum][curPos]) return "-1"; /* line 23 slow_hit_count: 5150, fast_hit_count: 1 */
  dp2[curSum][curPos] = true; /* line 24 slow_hit_count: 695, fast_hit_count: 1 */
  if (curPos == m) { /* line 25 slow_hit_count: 695, fast_hit_count: 1 */
    if (curSum == s) return curAns; /* line 26 slow_hit_count: 100, fast_hit_count: 0 */
    return "-1"; /* line 27 slow_hit_count: 99, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 9; i++) { /* line 29 slow_hit_count: 5645, fast_hit_count: 11 */
    if (i == 0 && curPos == 0 && m > 1) continue; /* line 30 slow_hit_count: 5150, fast_hit_count: 10 */
    char num = i + '0'; /* line 31 slow_hit_count: 5149, fast_hit_count: 9 */
    string ret = solve2(curAns + num, curSum + i, curPos + 1); /* line 32 slow_hit_count: 5149, fast_hit_count: 9 */
    if (ret != "-1") return ret; /* line 33 slow_hit_count: 5149, fast_hit_count: 9 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return "-1"; /* line 35 slow_hit_count: 495, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> s; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cout << solve2("", 0, 0) << " " << solve("", 0, 0) << endl; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Compare Line-Level Hit Counts:**

- The function `solve2` shows significant hit counts in the slow input, especially lines 21 to 33. This suggests high recursion due to its depth-first search strategy.
- The function `solve` also has elevated hit counts (though less than `solve2`), particularly around lines 5 to 17, indicating similar recursion issues.
- Both functions have hit counts in their respective loops (lines 13 and 29) suggesting frequent iteration through potential digit choices.

**2. Pinpoint Lines or Functions with More Hits:**

- `solve2`, which constructs the minimum number, has much higher hit counts than `solve`, indicating that generating the minimum number with the sum of 100 is more computationally intensive.
- Specifically, the recursive call lines (`solve2`: line 32 and `solve`: line 16) and their surrounding loop structures are hit intensively, highlighting them as computational bottlenecks.

**3. Infer Interaction with Data Structures:**

- The recursive nature of `solve` and `solve2` suggests that the problem arises from exploring many potential digit combinations to satisfy the constraints, especially with a high sum like 100 and large digit length.
- The memoization arrays `dp` and `dp2` are used to prevent redundant calculations, but the complexity still potentially grows due to the large space explored (up to 10^m possible combinations).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: High Sum with Large Digit Count Causes Recursion Depth Issues**

   Natural Language: "When the sum of digits is high relative to the number of digits (e.g., both are close to their upper constraints), the solution space explored by the recursive functions becomes expansive, leading to significant slowdown."

2. **Invariant: Sparse Sum Distribution Increases Computation**

   Natural Language: "If the digit sum is non-zero and significantly less than the maximum possible sum for the given number of digits, the recursive search space becomes large due to the many potential combinations of digits that must be explored."

3. **Invariant: Recursive Call Overhead with High Branching Factor**

   Natural Language: "When recursion is used alongside multiple choices per step (branching factor of up to 10), and this combination is repeated in a deeply nested manner, performance may degrade due to overhead from extensive recursive calls."

4. **Invariant: Memoization Table Utilization at Limits**

   Natural Language: "If the digit sum or position is near the bounds of the memoization tables (given their sizes), the effectiveness of caching results becomes crucial, and more computation may occur if the tables become less effective due to repeated states."

These performance-characterizing invariants help identify scenarios where the algorithm might slow down without relying on specific input values, abstracting the problem into broader conditions tied to its recursive exploration and digit choice space.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Here, we'll implement the previously derived natural language invariants as C++ checker functions:

1. **Invariant: High Sum with Large Digit Count Causes Recursion Depth Issues**

```cpp
void check_high_sum_large_m(int m, int s) {
    if (m > 90 && s > 800) { // Thresholds based on the upper limit of constraints
        cerr << "Warning: Performance bottleneck condition triggered - high sum with large digit count!" << endl;
        abort();
    }
}
```

2. **Invariant: Sparse Sum Distribution Increases Computation**

```cpp
void check_sparse_sum_distribution(int m, int s) {
    if ((s > 0 && s < 10) && m > 90) { // Sparse sum with maximum digit length
        cerr << "Warning: Performance bottleneck condition triggered - sparse sum distribution!" << endl;
        abort();
    }
}
```

3. **Invariant: Recursive Call Overhead with High Branching Factor**

```cpp
void check_recursive_overhead(int maxBranching) {
    if (maxBranching > 9) { // Number of branches (digit choices) in recursion
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor in recursion!" << endl;
        abort();
    }
}
```

4. **Invariant: Memoization Table Utilization at Limits**

```cpp
void check_memoization_limits(int m, int s) {
    if (s >= 200 && m > 80) { // Close to memoization table bounds
        cerr << "Warning: Performance bottleneck condition triggered - memoization table limits reached!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now let's integrate these checks into the provided C++ code to catch potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
int m, s;
bool dp[1001][200], dp2[1001][200];

// Checker functions implementation
void check_high_sum_large_m(int m, int s) {
    if (m > 90 && s > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - high sum with large digit count!" << endl;
        abort();
    }
}

void check_sparse_sum_distribution(int m, int s) {
    if ((s > 0 && s < 10) && m > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse sum distribution!" << endl;
        abort();
    }
}

void check_recursive_overhead(int maxBranching) {
    if (maxBranching > 9) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor in recursion!" << endl;
        abort();
    }
}

void check_memoization_limits(int m, int s) {
    if (s >= 200 && m > 80) {
        cerr << "Warning: Performance bottleneck condition triggered - memoization table limits reached!" << endl;
        abort();
    }
}

string solve(string curAns, int curSum, int curPos) {
    if (curSum > s) return "-1";
    if (dp[curSum][curPos]) return "-1";
    dp[curSum][curPos] = true;
    if (curPos == m) {
        if (curSum == s) return curAns;
        return "-1";
    }
    for (int i = 9; i >= 0; i--) {
        if (curPos == 0 && m > 1 && i == 0) continue;
        char num = i + '0';
        string ret = solve(curAns + num, curSum + i, curPos + 1);
        if (ret != "-1") return ret;
    }
    return "-1";
}

string solve2(string curAns, int curSum, int curPos) {
    if (curSum > s) return "-1";
    if (dp2[curSum][curPos]) return "-1";
    dp2[curSum][curPos] = true;
    if (curPos == m) {
        if (curSum == s) return curAns;
        return "-1";
    }
    for (int i = 0; i <= 9; i++) {
        if (i == 0 && curPos == 0 && m > 1) continue;
        char num = i + '0';
        string ret = solve2(curAns + num, curSum + i, curPos + 1);
        if (ret != "-1") return ret;
    }
    return "-1";
}

int main() {
    cin >> m >> s;

    // Apply checks related to performance bottlenecks
    check_high_sum_large_m(m, s);
    check_sparse_sum_distribution(m, s);
    check_recursive_overhead(10); // Check high branching factor due to digit choices
    check_memoization_limits(m, s);

    cout << solve2("", 0, 0) << " " << solve("", 0, 0) << endl;
    return 0;
}
```

**Notes:**
- Various checks are placed after reading input values (`m` and `s`) to ensure they are evaluated before any recursive operations begin.
- These checks help identify and abort execution if any performance bottlenecks are likely based on the input constraints and derived conditions.

