=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Compare Line-Level Hit Counts:**

- The function `solve2` shows significant hit counts in the slow input, especially lines 21 to 33. This suggests high recursion due to its depth-first search strategy.
- The function `solve` also has elevated hit counts (though less than `solve2`), particularly around lines 5 to 17, indicating similar recursion issues.
- Both functions have hit counts in their respective loops (lines 13 and 29) suggesting frequent iteration through potential digit choices.

**2. Pinpoint Lines or Functions with More Hits:**

- `solve2`, which constructs the minimum number, has much higher hit counts than `solve`, indicating that generating the minimum number with the sum of 100 is more computationally intensive.
- Specifically, the recursive call lines (`solve2`: line 32 and `solve`: line 16) and their surrounding loop structures are hit intensively, highlighting them as computational bottlenecks.

**3. Infer Interaction with Data Structures:**

- The recursive nature of `solve` and `solve2` suggests that the problem arises from exploring many potential digit combinations to satisfy the constraints, especially with a high sum like 100 and large digit length.
- The memoization arrays `dp` and `dp2` are used to prevent redundant calculations, but the complexity still potentially grows due to the large space explored (up to 10^m possible combinations).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: High Sum with Large Digit Count Causes Recursion Depth Issues**

   Natural Language: "When the sum of digits is high relative to the number of digits (e.g., both are close to their upper constraints), the solution space explored by the recursive functions becomes expansive, leading to significant slowdown."

2. **Invariant: Sparse Sum Distribution Increases Computation**

   Natural Language: "If the digit sum is non-zero and significantly less than the maximum possible sum for the given number of digits, the recursive search space becomes large due to the many potential combinations of digits that must be explored."

3. **Invariant: Recursive Call Overhead with High Branching Factor**

   Natural Language: "When recursion is used alongside multiple choices per step (branching factor of up to 10), and this combination is repeated in a deeply nested manner, performance may degrade due to overhead from extensive recursive calls."

4. **Invariant: Memoization Table Utilization at Limits**

   Natural Language: "If the digit sum or position is near the bounds of the memoization tables (given their sizes), the effectiveness of caching results becomes crucial, and more computation may occur if the tables become less effective due to repeated states."

These performance-characterizing invariants help identify scenarios where the algorithm might slow down without relying on specific input values, abstracting the problem into broader conditions tied to its recursive exploration and digit choice space.

=== Checker Response ===
### Phase 3: Implementing Invariants as Checker Code in C++

Here, we'll implement the previously derived natural language invariants as C++ checker functions:

1. **Invariant: High Sum with Large Digit Count Causes Recursion Depth Issues**

```cpp
void check_high_sum_large_m(int m, int s) {
    if (m > 90 && s > 800) { // Thresholds based on the upper limit of constraints
        cerr << "Warning: Performance bottleneck condition triggered - high sum with large digit count!" << endl;
        abort();
    }
}
```

2. **Invariant: Sparse Sum Distribution Increases Computation**

```cpp
void check_sparse_sum_distribution(int m, int s) {
    if ((s > 0 && s < 10) && m > 90) { // Sparse sum with maximum digit length
        cerr << "Warning: Performance bottleneck condition triggered - sparse sum distribution!" << endl;
        abort();
    }
}
```

3. **Invariant: Recursive Call Overhead with High Branching Factor**

```cpp
void check_recursive_overhead(int maxBranching) {
    if (maxBranching > 9) { // Number of branches (digit choices) in recursion
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor in recursion!" << endl;
        abort();
    }
}
```

4. **Invariant: Memoization Table Utilization at Limits**

```cpp
void check_memoization_limits(int m, int s) {
    if (s >= 200 && m > 80) { // Close to memoization table bounds
        cerr << "Warning: Performance bottleneck condition triggered - memoization table limits reached!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now let's integrate these checks into the provided C++ code to catch potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
int m, s;
bool dp[1001][200], dp2[1001][200];

// Checker functions implementation
void check_high_sum_large_m(int m, int s) {
    if (m > 90 && s > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - high sum with large digit count!" << endl;
        abort();
    }
}

void check_sparse_sum_distribution(int m, int s) {
    if ((s > 0 && s < 10) && m > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse sum distribution!" << endl;
        abort();
    }
}

void check_recursive_overhead(int maxBranching) {
    if (maxBranching > 9) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor in recursion!" << endl;
        abort();
    }
}

void check_memoization_limits(int m, int s) {
    if (s >= 200 && m > 80) {
        cerr << "Warning: Performance bottleneck condition triggered - memoization table limits reached!" << endl;
        abort();
    }
}

string solve(string curAns, int curSum, int curPos) {
    if (curSum > s) return "-1";
    if (dp[curSum][curPos]) return "-1";
    dp[curSum][curPos] = true;
    if (curPos == m) {
        if (curSum == s) return curAns;
        return "-1";
    }
    for (int i = 9; i >= 0; i--) {
        if (curPos == 0 && m > 1 && i == 0) continue;
        char num = i + '0';
        string ret = solve(curAns + num, curSum + i, curPos + 1);
        if (ret != "-1") return ret;
    }
    return "-1";
}

string solve2(string curAns, int curSum, int curPos) {
    if (curSum > s) return "-1";
    if (dp2[curSum][curPos]) return "-1";
    dp2[curSum][curPos] = true;
    if (curPos == m) {
        if (curSum == s) return curAns;
        return "-1";
    }
    for (int i = 0; i <= 9; i++) {
        if (i == 0 && curPos == 0 && m > 1) continue;
        char num = i + '0';
        string ret = solve2(curAns + num, curSum + i, curPos + 1);
        if (ret != "-1") return ret;
    }
    return "-1";
}

int main() {
    cin >> m >> s;

    // Apply checks related to performance bottlenecks
    check_high_sum_large_m(m, s);
    check_sparse_sum_distribution(m, s);
    check_recursive_overhead(10); // Check high branching factor due to digit choices
    check_memoization_limits(m, s);

    cout << solve2("", 0, 0) << " " << solve("", 0, 0) << endl;
    return 0;
}
```

**Notes:**
- Various checks are placed after reading input values (`m` and `s`) to ensure they are evaluated before any recursive operations begin.
- These checks help identify and abort execution if any performance bottlenecks are likely based on the input constraints and derived conditions.
