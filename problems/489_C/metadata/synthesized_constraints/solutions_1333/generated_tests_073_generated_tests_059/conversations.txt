system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using lint = long long;
vector<vector<bool>> dp;
vector<string> result(2);
int n, sum;
int get(int idx, int sum, int maximum, int done = 1) {
  if (idx == 0) return (sum ? 0 : 1);
  if (done) return dp[idx][sum];
  int works = 0;
  int cur;
  if (maximum)
    cur = INT_MIN;
  else
    cur = INT_MAX;
  for (int i = 0; i <= 9; ++i) {
    if (sum - i >= 0)
      if (idx != n || i) {
        works |= get(idx - 1, sum - i, -1);
        if (works) {
          if (maximum)
            cur = max(cur, i);
          else
            cur = min(cur, i);
        }
      }
  }
  if (maximum == 1) {
    result[maximum].push_back(cur + '0');
    return get(idx - 1, sum - cur, 1, 0);
  } else if (maximum == 0) {
    result[maximum].push_back(cur + '0');
    return get(idx - 1, sum - cur, 0, 0);
  }
  return dp[idx][sum] = works;
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  cin >> n >> sum;
  dp = vector<vector<bool>>(n + 1, vector<bool>(sum + 1, false));
  if (n == 1 && sum == 0) {
    cout << "0 0\n";
    exit(0);
  }
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= sum; ++j) {
      get(i, j, -1, 0);
    }
  }
  if (get(n, sum, -1) == 0) {
    cout << "-1 -1\n";
    exit(0);
  }
  get(n, sum, 1, 0);
  get(n, sum, 0, 0);
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < result[i].size(); ++j) cout << result[i][j];
    if (i == 0)
      cout << ' ';
    else
      cout << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 1233


(G.2) Fast Input

4 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using lint = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<bool>> dp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> result(2); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, sum; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int get(int idx, int sum, int maximum, int done = 1) { /* line 7 slow_hit_count: 54117, fast_hit_count: 114 */
  if (idx == 0) return (sum ? 0 : 1); /* line 8 slow_hit_count: 54117, fast_hit_count: 114 */
  if (done) return dp[idx][sum]; /* line 9 slow_hit_count: 40588, fast_hit_count: 87 */
  int works = 0; /* line 10 slow_hit_count: 4936, fast_hit_count: 28 */
  int cur; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (maximum) /* line 12 slow_hit_count: 4936, fast_hit_count: 28 */
    cur = INT_MIN; /* line 13 slow_hit_count: 4936, fast_hit_count: 24 */
  else /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    cur = INT_MAX; /* line 15 slow_hit_count: 0, fast_hit_count: 4 */
  for (int i = 0; i <= 9; ++i) { /* line 16 slow_hit_count: 54296, fast_hit_count: 308 */
    if (sum - i >= 0) /* line 17 slow_hit_count: 49360, fast_hit_count: 280 */
      if (idx != n || i) { /* line 18 slow_hit_count: 49180, fast_hit_count: 85 */
        works |= get(idx - 1, sum - i, -1); /* line 19 slow_hit_count: 47946, fast_hit_count: 78 */
        if (works) { /* line 20 slow_hit_count: 47946, fast_hit_count: 78 */
          if (maximum) /* line 21 slow_hit_count: 552, fast_hit_count: 65 */
            cur = max(cur, i); /* line 22 slow_hit_count: 552, fast_hit_count: 52 */
          else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
            cur = min(cur, i); /* line 24 slow_hit_count: 0, fast_hit_count: 13 */
        } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (maximum == 1) { /* line 28 slow_hit_count: 4936, fast_hit_count: 28 */
    result[maximum].push_back(cur + '0'); /* line 29 slow_hit_count: 0, fast_hit_count: 4 */
    return get(idx - 1, sum - cur, 1, 0); /* line 30 slow_hit_count: 0, fast_hit_count: 4 */
  } else if (maximum == 0) { /* line 31 slow_hit_count: 4936, fast_hit_count: 24 */
    result[maximum].push_back(cur + '0'); /* line 32 slow_hit_count: 0, fast_hit_count: 4 */
    return get(idx - 1, sum - cur, 0, 0); /* line 33 slow_hit_count: 0, fast_hit_count: 4 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[idx][sum] = works; /* line 35 slow_hit_count: 4936, fast_hit_count: 20 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> sum; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  dp = vector<vector<bool>>(n + 1, vector<bool>(sum + 1, false)); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1 && sum == 0) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "0 0\n"; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    exit(0); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; ++i) { /* line 45 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j <= sum; ++j) { /* line 46 slow_hit_count: 6175, fast_hit_count: 30 */
      get(i, j, -1, 0); /* line 47 slow_hit_count: 6170, fast_hit_count: 25 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  if (get(n, sum, -1) == 0) { /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1 -1\n"; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
    exit(0); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  get(n, sum, 1, 0); /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
  get(n, sum, 0, 0); /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
  for (int i = 0; i < 2; ++i) { /* line 56 slow_hit_count: 0, fast_hit_count: 3 */
    for (int j = 0; j < result[i].size(); ++j) cout << result[i][j]; /* line 57 slow_hit_count: 0, fast_hit_count: 10 */
    if (i == 0) /* line 58 slow_hit_count: 0, fast_hit_count: 2 */
      cout << ' '; /* line 59 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      cout << '\n'; /* line 61 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 1 */


assistant: To analyze the given C code and identify performance-characterizing invariants, we will follow the outlined phases and tasks.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**
1. The function `get` (lines 7-35) is called extensively, with particularly high hit counts for the slow input compared to the fast input. For instance, line 7 is hit 54,117 times for the slow input versus 114 times for the fast.
2. Lines within `get` that are hit significantly more in the slow run include the recursive call on line 19 and the checks on lines 16, 17, and 18.
3. The nested loop on line 45-49 and the recursive nature of `get` suggest that the slowdown may be related to excessive recursive calls, especially with larger values of `sum`.

**Key Observations:**
- The recursive calls in `get` are likely causing a large number of computations, especially when `sum` is large.
- The hit counts indicate a high level of recursion and redundancy in calculations, particularly when trying to find combinations of digits summing to `s`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants that describe conditions under which the program may enter a slow path:

1. **High Sum Combinations:**
   - "When the sum of digits `s` is large relative to the number of digits `m`, the recursive search space significantly increases, leading to repeated calculations and potential slowdown."
   - This is because a large `s` requires exploring many combinations of digits to satisfy the sum, increasing recursive calls.

2. **Recursive Depth and Redundancy:**
   - "If the sum of digits `s` approaches the upper limit of its range, the recursive function `get` explores a vast space of digit combinations, causing redundant computations and slowing down the program."
   - This invariant reflects high recursion levels due to attempting to fit a large sum within a limited number of digits.

3. **Digit Limitations:**
   - "When the number of digits `m` is fixed and the sum `s` is disproportionately high, the constraint of no leading zeroes forces more complex digit arrangements, increasing computational overhead."
   - The invariant captures how constraints affect the complexity of finding valid digit combinations.

These performance invariants reflect broad conditions likely to trigger slow execution paths, such as when `s` is high relative to `m`, requiring extensive recursive exploration. They avoid specific input values, focus on structural issues, and consider the input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as C++ Checkers

Based on the natural language invariants derived earlier, let's implement them as runtime checks in C++.

#### Invariant 1: High Sum Combinations
```cpp
void check_high_sum_combination(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - sum too high for digit count!" << endl;
        abort();
    }
}
```

#### Invariant 2: Recursive Depth and Redundancy
```cpp
void check_recursive_depth(int m, int s) {
    if (s > 800 && m < 20) { // Example threshold; adjust as per domain knowledge
        cerr << "Warning: Performance bottleneck condition triggered - high recursive depth due to large sum!" << endl;
        abort();
    }
}
```

#### Invariant 3: Digit Limitations
```cpp
void check_digit_limitations(int m, int s) {
    if (m == 1 && s == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - impossible configuration!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, integrate these checkers into the given C++ program at suitable points.

```cpp
#include <bits/stdc++.h>
using namespace std;
using lint = long long;
vector<vector<bool>> dp;
vector<string> result(2);
int n, sum;

// Checker functions
void check_high_sum_combination(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - sum too high for digit count!" << endl;
        abort();
    }
}

void check_recursive_depth(int m, int s) {
    if (s > 800 && m < 20) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursive depth due to large sum!" << endl;
        abort();
    }
}

void check_digit_limitations(int m, int s) {
    if (m == 1 && s == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - impossible configuration!" << endl;
        abort();
    }
}

int get(int idx, int sum, int maximum, int done = 1) {
    if (idx == 0) return (sum ? 0 : 1);
    if (done) return dp[idx][sum];
    int works = 0;
    int cur;
    if (maximum)
        cur = INT_MIN;
    else
        cur = INT_MAX;
    for (int i = 0; i <= 9; ++i) {
        if (sum - i >= 0)
            if (idx != n || i) {
                works |= get(idx - 1, sum - i, -1);
                if (works) {
                    if (maximum)
                        cur = max(cur, i);
                    else
                        cur = min(cur, i);
                }
            }
    }
    if (maximum == 1) {
        result[maximum].push_back(cur + '0');
        return get(idx - 1, sum - cur, 1, 0);
    } else if (maximum == 0) {
        result[maximum].push_back(cur + '0');
        return get(idx - 1, sum - cur, 0, 0);
    }
    return dp[idx][sum] = works;
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n >> sum;

    // Insert checkers after input is read
    check_high_sum_combination(n, sum);
    check_recursive_depth(n, sum);
    check_digit_limitations(n, sum);

    dp = vector<vector<bool>>(n + 1, vector<bool>(sum + 1, false));
    if (n == 1 && sum == 0) {
        cout << "0 0\n";
        exit(0);
    }
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= sum; ++j) {
            get(i, j, -1, 0);
        }
    }
    if (get(n, sum, -1) == 0) {
        cout << "-1 -1\n";
        exit(0);
    }
    get(n, sum, 1, 0);
    get(n, sum, 0, 0);
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < result[i].size(); ++j) cout << result[i][j];
        if (i == 0)
            cout << ' ';
        else
            cout << '\n';
    }
}
```

**Explanation:**
- Each checker function is placed after reading the input but before any significant computation occurs, ensuring the program aborts early if a performance bottleneck condition is detected.
- The conditions in each checker reflect the natural language invariants and attempt to identify potential performance issues based on input characteristics.

