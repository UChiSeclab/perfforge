system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void plus1(int a[], int m) {
  if (a[0] == 9 && m == 0) {
    a[0] = -1;
    exit;
  }
  if (a[m] != 9)
    a[m]++;
  else
    plus1(a, m - 1);
}
void minus1(int b[], int m) {
  if (b[0] == 0 && m == 0) {
    b[0] = -1;
    exit;
  }
  if (b[m] != 0)
    b[m]--;
  else
    minus1(b, m - 1);
}
int main() {
  int i, j, m, sum, ans = 0;
  int a[101], b[101];
  std::cin >> m >> sum;
  a[0] = 1;
  if (m != 1 && sum == 0) {
    std::cout << "-1 -1";
    return 0;
  }
  if (sum > 9 * m) {
    std::cout << "-1 -1";
    return 0;
  }
  if (m == 1 && sum == 0) {
    std::cout << "0 0";
    return 0;
  }
  for (i = 1; i < m; i++) a[i] = 0;
  for (i = 0; i < m; i++) b[i] = 9;
  int ss = 1;
  while (ss != sum) {
    plus1(a, m - 1);
    ss++;
    if (a[0] == -1) {
      std::cout << "-1 -1";
      return 0;
    }
  }
  ss = m * 9;
  while (ss != sum) {
    minus1(b, m - 1);
    ss--;
    ss = 0;
    for (i = 0; i < m; i++) ss += b[i];
  }
  for (i = 0; i < m; i++) std::cout << a[i];
  std::cout << ' ';
  for (i = 0; i < m; i++) std::cout << b[i];
  std::cin >> i;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

3 100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void plus1(int a[], int m) { /* line 3 slow_hit_count: 594, fast_hit_count: 0 */
  if (a[0] == 9 && m == 0) { /* line 4 slow_hit_count: 594, fast_hit_count: 0 */
    a[0] = -1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    exit; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a[m] != 9) /* line 8 slow_hit_count: 594, fast_hit_count: 0 */
    a[m]++; /* line 9 slow_hit_count: 99, fast_hit_count: 0 */
  else /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    plus1(a, m - 1); /* line 11 slow_hit_count: 495, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 594, fast_hit_count: 0 */
void minus1(int b[], int m) { /* line 13 slow_hit_count: 35956, fast_hit_count: 0 */
  if (b[0] == 0 && m == 0) { /* line 14 slow_hit_count: 35956, fast_hit_count: 0 */
    b[0] = -1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    exit; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (b[m] != 0) /* line 18 slow_hit_count: 35956, fast_hit_count: 0 */
    b[m]--; /* line 19 slow_hit_count: 800, fast_hit_count: 0 */
  else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    minus1(b, m - 1); /* line 21 slow_hit_count: 35156, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 35956, fast_hit_count: 0 */
int main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, m, sum, ans = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int a[101], b[101]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> m >> sum; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  a[0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  if (m != 1 && sum == 0) { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    std::cout << "-1 -1"; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum > 9 * m) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    std::cout << "-1 -1"; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (m == 1 && sum == 0) { /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
    std::cout << "0 0"; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i < m; i++) a[i] = 0; /* line 40 slow_hit_count: 100, fast_hit_count: 0 */
  for (i = 0; i < m; i++) b[i] = 9; /* line 41 slow_hit_count: 101, fast_hit_count: 0 */
  int ss = 1; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  while (ss != sum) { /* line 43 slow_hit_count: 100, fast_hit_count: 0 */
    plus1(a, m - 1); /* line 44 slow_hit_count: 99, fast_hit_count: 0 */
    ss++; /* line 45 slow_hit_count: 99, fast_hit_count: 0 */
    if (a[0] == -1) { /* line 46 slow_hit_count: 99, fast_hit_count: 0 */
      std::cout << "-1 -1"; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  ss = m * 9; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
  while (ss != sum) { /* line 52 slow_hit_count: 801, fast_hit_count: 0 */
    minus1(b, m - 1); /* line 53 slow_hit_count: 800, fast_hit_count: 0 */
    ss--; /* line 54 slow_hit_count: 800, fast_hit_count: 0 */
    ss = 0; /* line 55 slow_hit_count: 800, fast_hit_count: 0 */
    for (i = 0; i < m; i++) ss += b[i]; /* line 56 slow_hit_count: 80800, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < m; i++) std::cout << a[i]; /* line 58 slow_hit_count: 101, fast_hit_count: 0 */
  std::cout << ' '; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 0; i < m; i++) std::cout << b[i]; /* line 60 slow_hit_count: 101, fast_hit_count: 0 */
  std::cin >> i; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the provided C program, we need to follow the structured approach described and generate performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison**: 
   - The `plus1` and `minus1` functions are heavily used in the slow input, indicated by thousands of hit counts, whereas they are not used at all in the fast input.
   - Specifically, `minus1` has an exceptionally high hit count, particularly in the recursive call (`line 21`).

2. **Analysis of Functionality**:
   - Both `plus1` and `minus1` are recursively called to adjust the digit arrays `a` and `b` to achieve the desired sum of digits.
   - The recursion in `minus1` suggests a deep call stack due to the decrement operation being carried out as long as the last digit is zero, which implies a high branching factor and depth based on input values.

3. **Input Constraints Interaction**:
   - The program is designed to handle `m` up to 100 and `s` up to 900.
   - The slow input `100 100` likely causes recursion to occur deeply or frequently due to the high complexity of adjusting the number to meet the digit sum.
   - The fast input `3 100` does not trigger recursion since the constraints are not pushing it to its limits.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Recursion Depth and Iteration**:
   - **Natural Language Description**: "If the recursion depth is likely to exceed a certain level or if many recursive calls are required to adjust the digit sum, the computation may become very expensive."
   - **Threshold Consideration**: Given that `m` can be up to 100, high recursion depth and extensive loops are expected when `s` and `m` are near their upper bounds, potentially leading to many adjustments.

2. **Invariant on Input Size and Limits**:
   - **Natural Language Description**: "When both m and s are large, such that m is close to 100 and s approaches its upper limit relative to m (i.e., near the maximum digit sum possible for m), the code may enter a slow path due to high computational demand for number adjustments."
   - **Threshold Consideration**: The threshold here revolves around `m` and `s` being high, with `s` needing a precise configuration that requires many incremental adjustments.

### Final Set of Invariants

1. **Recursion and Loop Invariant**:
   - **Description**: "If a large number of recursive adjustments are needed due to the digit constraints of `m` and `s`, performance can degrade. This is especially true when the number of such recursive adjustments crosses a high threshold."

2. **Input Size and Constraint Invariant**:
   - **Description**: "The program is likely to experience slowdowns when both `m` and `s` are near their maximum constraints, causing extensive number configuration adjustments to achieve the target digit sum."

By focusing on these two key invariants, we can predict and understand performance bottlenecks without relying on specific input values, ensuring the invariants are general and applicable to a broader range of scenarios within the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: To implement the performance-characterizing invariants in C++, we will first create checker functions based on the natural language descriptions. Then, we will integrate these checkers into the original program at appropriate places to catch performance bottlenecks without adding overhead in tight loops.

### Phase 3: Implement the Checkers in C++

Here are the C++ code snippets for the two performance invariants:

1. **Invariant on Recursion Depth and Iteration**:
   - We will create a checker function that monitors the depth of recursive calls and the number of iterations.

```cpp
void check_recursion_invariant(int recursionDepth, int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}
```

2. **Invariant on Input Size and Limits**:
   - A checker function that validates whether inputs `m` and `s` are pushing the program towards its complexity limits.

```cpp
void check_input_size_invariant(int m, int s) {
    if (m > 90 && s > 810) { // Assuming these as thresholds near the upper limit
        cerr << "Warning: Performance bottleneck condition triggered - input size at limit!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers in the Original Program

We will now integrate these checker functions into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance invariants
void check_recursion_invariant(int recursionDepth, int maxDepth) {
    if (recursionDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_input_size_invariant(int m, int s) {
    if (m > 90 && s > 810) { // Assuming these as thresholds near the upper limit
        cerr << "Warning: Performance bottleneck condition triggered - input size at limit!" << endl;
        abort();
    }
}

// Update the plus1 and minus1 functions to track recursion depth
void plus1(int a[], int m, int depth) {
    check_recursion_invariant(depth, 100); // Check recursion depth
    if (a[0] == 9 && m == 0) {
        a[0] = -1;
        exit;
    }
    if (a[m] != 9)
        a[m]++;
    else
        plus1(a, m - 1, depth + 1);
}

void minus1(int b[], int m, int depth) {
    check_recursion_invariant(depth, 100); // Check recursion depth
    if (b[0] == 0 && m == 0) {
        b[0] = -1;
        exit;
    }
    if (b[m] != 0)
        b[m]--;
    else
        minus1(b, m - 1, depth + 1);
}

int main() {
    int i, j, m, sum, ans = 0;
    int a[101], b[101];
    std::cin >> m >> sum;

    // Input size invariant check
    check_input_size_invariant(m, sum);

    a[0] = 1;
    if (m != 1 && sum == 0) {
        std::cout << "-1 -1";
        return 0;
    }
    if (sum > 9 * m) {
        std::cout << "-1 -1";
        return 0;
    }
    if (m == 1 && sum == 0) {
        std::cout << "0 0";
        return 0;
    }
    for (i = 1; i < m; i++) a[i] = 0;
    for (i = 0; i < m; i++) b[i] = 9;
    int ss = 1;
    while (ss != sum) {
        plus1(a, m - 1, 1); // Start recursion depth at 1
        ss++;
        if (a[0] == -1) {
            std::cout << "-1 -1";
            return 0;
        }
    }
    ss = m * 9;
    while (ss != sum) {
        minus1(b, m - 1, 1); // Start recursion depth at 1
        ss--;
        ss = 0;
        for (i = 0; i < m; i++) ss += b[i];
    }
    for (i = 0; i < m; i++) std::cout << a[i];
    std::cout << ' ';
    for (i = 0; i < m; i++) std::cout << b[i];
    std::cin >> i;
    return 0;
}
```

### Explanation

- **Recursion Depth Check**: The `plus1` and `minus1` functions now take an additional parameter `depth` to track the depth of recursion. The `check_recursion_invariant` function is called to ensure that the recursion depth does not exceed a predefined threshold.
  
- **Input Size Check**: The `check_input_size_invariant` function is called immediately after reading `m` and `s` to verify that they do not approach the complexity limits that may cause performance issues.

These checks help identify situations where the program may slow down, especially during testing or fuzzing, to ensure robust performance.

