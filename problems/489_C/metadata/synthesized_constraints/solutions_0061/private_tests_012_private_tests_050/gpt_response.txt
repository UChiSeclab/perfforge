=== Invariants Response ===
## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, the following observations can be made:

1. **Function `dp`**:
   - Line 7 (function call) and line 22 (recursive call) have significantly higher hit counts in the slow input run compared to the fast input. Specifically, line 22 has 6047 hits for the slow input and 0 for the fast input.
   - Lines 9-10 and 12-16 contain conditional checks and return statements. These lines are heavily hit when `dp` explores potential digit combinations for the number.

2. **Conditional Checks**:
   - The recursive function explores multiple potential combinations, checking whether they fulfill the criteria `i < 0 || j < 0` and `i == 0 && j == 0`. This indicates that the function is searching a large potential space of possibilities.

3. **Loop through Digits**:
   - The loop in line 21 iterates through possible digits for number construction. The high hit count on line 21 indicates that the loop is executed many times, which suggests an exhaustive search attempting to construct a valid combination.

4. **Dynamic Programming Table Initialization**:
   - The dynamic programming table (`table`) is initialized as `vector<vector<string>> min_dp(m, vector<string>(s, ""));`, which can be large when `s` is high. This has implications for both memory usage and the number of recursive calls made.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants for the program:

1. **Invariant: High Sum of Digits with Maximum Length**:
   - **Natural Language Description**: "If the sum of digits `s` is close to the upper limit while `m` is at its maximum, the recursive function `dp` will explore a very large number of possibilities, significantly slowing down execution."
   - **Rationale**: The bounds for `m` and `s` (with `m` up to 100 and `s` up to 900) suggest a large search space when `s` is high relative to `m`. This results in many recursive calls as the program attempts to distribute the sum `s` across `m` digits.

2. **Invariant: Use of Dynamic Programming Table with Large Dimensions**:
   - **Natural Language Description**: "When the dynamic programming table dimensions are large, the memory footprint and the number of recursive operations increase, leading to slow performance."
   - **Rationale**: The table size is determined by `m` and `s`, and when `s` is high, the table occupies more memory, and more cells need to be filled during recursive calls.

3. **Invariant: Exhaustive Search in Digit Loops**:
   - **Natural Language Description**: "When exploring all possible digits to form a number, especially with large possible sums, the loop and recursive calls may become computationally expensive."
   - **Rationale**: The loop iterating over digits (0-9) combined with the recursive search suggests that for high values of `s`, the computational cost of finding a valid combination increases significantly.

These invariants characterize the conditions under which the given C program becomes inefficient, particularly when handling inputs with large digit sums and maximum-length constraints. These statements provide insights into potential performance bottlenecks without relying on specific input values.

=== Checker Response ===
## Phase 3: Implement Invariant Checkers in C++

Here, I will implement the runtime checks for the performance-characterizing invariants identified in Phase 2.

### Invariant Checkers

1. **High Sum of Digits with Maximum Length**:
   This invariant suggests that when both `m` and `s` are large, the program may slow down due to exploring a large number of possibilities.

```cpp
void check_high_sum_max_length(int m, int s) {
    if (m == 100 && s > 800) { // Arbitrary threshold close to the upper limit
        cerr << "Warning: Performance bottleneck condition triggered - high sum with maximum length!" << endl;
        abort();
    }
}
```

2. **Large Dynamic Programming Table**:
   This invariant indicates that when `s` is large, the dynamic programming table's dimensions increase, which can lead to performance issues.

```cpp
void check_large_dp_table(int m, int s) {
    if (s > 800) { // Arbitrary threshold for large `s`
        cerr << "Warning: Performance bottleneck condition triggered - large DP table dimensions!" << endl;
        abort();
    }
}
```

3. **Exhaustive Search in Digit Loops**:
   This invariant highlights that if the sum of digits is large, the loop iterating through possible digits might perform many operations.

```cpp
void check_exhaustive_digit_search(int s) {
    if (s > 800) { // Arbitrary threshold for large `s`
        cerr << "Warning: Performance bottleneck condition triggered - exhaustive digit search!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

Below is the original C++ program with integrated invariant checkers. The checks are placed strategically to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_high_sum_max_length(int m, int s) {
    if (m == 100 && s > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - high sum with maximum length!" << endl;
        abort();
    }
}

void check_large_dp_table(int m, int s) {
    if (s > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - large DP table dimensions!" << endl;
        abort();
    }
}

void check_exhaustive_digit_search(int s) {
    if (s > 800) {
        cerr << "Warning: Performance bottleneck condition triggered - exhaustive digit search!" << endl;
        abort();
    }
}

string dp(int i, int j, int m, int s, vector<vector<string>> &table, const string &digits) {
    if (i < 0 || j < 0) {
        return "-1";
    }
    if (i == 0) {
        if (j == 0) {
            return "";
        } else {
            return "-1";
        }
    }
    if (table[i][j] == "") {
        table[i][j] = "-1";
        for (auto digit : digits) {
            auto result = dp(i - 1, j - digit + '0', m, s, table, digits);
            if (result != "-1") {
                table[i][j] = (digit + result);
                break;
            }
        }
    }
    return table[i][j];
}

int main() {
    int m, s;
    scanf("%d %d", &m, &s);

    // Runtime checks for performance bottlenecks
    check_high_sum_max_length(m, s);
    check_large_dp_table(m, s);
    check_exhaustive_digit_search(s);

    if (m == 1 && s == 0) {
        printf("0 0 \n");
        return 0;
    }
    string digits = "0123456789";
    vector<vector<string>> min_dp(m, vector<string>(s, ""));
    string min_answer = "-1";
    for (int i = 1; i < digits.size(); i++) {
        string result = dp(m - 1, s - digits[i] + '0', m, s, min_dp, digits);
        if (result != "-1") {
            min_answer = digits[i] + result;
            break;
        }
    }
    reverse(digits.begin(), digits.end());
    string max_answer = "-1";
    for (int i = 0; i < digits.size() - 1; i++) {
        string result = dp(m - 1, s - digits[i] + '0', m, s, min_dp, digits);
        if (result != "-1") {
            max_answer = digits[i] + result;
            break;
        }
    }
    printf("%s %s\n", min_answer.c_str(), max_answer.c_str());
    return 0;
}
```

### Explanation

- **Placement**: The checkers are placed immediately after reading the input values. This ensures that we catch any performance bottlenecks early without introducing overhead into the recursive `dp` function or the loops.
- **Thresholds**: The thresholds for `s` are chosen to be high, close to the maximum possible value, to catch significant slowdowns while avoiding false positives for lesser values.
