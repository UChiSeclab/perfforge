system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int32_t main() {
  int m, sum;
  cin >> m >> sum;
  vector<int> digitsMax;
  vector<int> digitsMin;
  if ((sum > 9 && m == 1) || (sum == 0 && m > 1)) {
    cout << -1 << " " << -1 << endl;
    return 0;
  } else if (sum == 0 && m == 1) {
    cout << 0 << " " << 0 << endl;
    return 0;
  } else if (sum <= 9 && m == 1) {
    cout << sum << " " << sum << endl;
    return 0;
  } else if (sum <= 9 && m > 1) {
    digitsMax.push_back(sum);
    for (int i = 0; i < m - 1; i++) {
      digitsMax.push_back(0);
    }
    digitsMin.push_back(1);
    for (int i = 0; i < m - 2; i++) {
      digitsMin.push_back(0);
    }
    digitsMin.push_back(sum - 1);
    for (int i = 0; i < digitsMin.size(); i++) {
      cout << digitsMin[i];
    }
    cout << " ";
    for (int i = 0; i < digitsMax.size(); i++) {
      cout << digitsMax[i];
    }
    return 0;
  } else if (sum > 9 && m >= 1) {
    int storeSum = sum;
    int storeSize = m;
    int storeSecond = m;
    int sumSecond = sum;
    while (storeSum > 0) {
      if (storeSum > 9) {
        digitsMax.push_back(9);
        storeSum -= 9;
      } else {
        digitsMax.push_back(storeSum);
        storeSum = 0;
      }
      m -= 1;
      if (m == 0 && storeSum > 0) {
        cout << -1 << " " << -1 << endl;
        return 0;
      }
    }
    while (m > 0) {
      digitsMax.push_back(0);
      m--;
    }
    m = storeSecond;
    sum = sumSecond;
    for (int i = 0; i < 10000000; i++) {
      if (sum > 9) {
        digitsMin.push_back(9);
        sum -= 9;
        m--;
      } else if (sum > 1 && m > 1) {
        digitsMin.push_back(sum - 1);
        sum = sum - (sum - 1);
        m--;
      }
      if (m == 0 || m == 1) break;
    }
    while (m - 1 > 0) {
      digitsMin.push_back(0);
      m--;
    }
    digitsMin.push_back(sum);
    reverse(digitsMin.begin(), digitsMin.end());
    for (int i = 0; i < digitsMin.size(); i++) {
      cout << digitsMin[i];
    }
    cout << " ";
    for (int i = 0; i < digitsMax.size(); i++) {
      cout << digitsMax[i];
    }
    return 0;
  } else {
    cout << -1 << " " << -1 << endl;
    return 0;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

100 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int m, sum; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> sum; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> digitsMax; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> digitsMin; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  if ((sum > 9 && m == 1) || (sum == 0 && m > 1)) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << " " << -1 << endl; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
  } else if (sum == 0 && m == 1) { /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
    cout << 0 << " " << 0 << endl; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (sum <= 9 && m == 1) { /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
    cout << sum << " " << sum << endl; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (sum <= 9 && m > 1) { /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
    digitsMax.push_back(sum); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < m - 1; i++) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      digitsMax.push_back(0); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    digitsMin.push_back(1); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < m - 2; i++) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      digitsMin.push_back(0); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    digitsMin.push_back(sum - 1); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < digitsMin.size(); i++) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      cout << digitsMin[i]; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cout << " "; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < digitsMax.size(); i++) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      cout << digitsMax[i]; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (sum > 9 && m >= 1) { /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
    int storeSum = sum; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
    int storeSize = m; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    int storeSecond = m; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
    int sumSecond = sum; /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
    while (storeSum > 0) { /* line 40 slow_hit_count: 13, fast_hit_count: 0 */
      if (storeSum > 9) { /* line 41 slow_hit_count: 12, fast_hit_count: 0 */
        digitsMax.push_back(9); /* line 42 slow_hit_count: 11, fast_hit_count: 0 */
        storeSum -= 9; /* line 43 slow_hit_count: 11, fast_hit_count: 0 */
      } else { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        digitsMax.push_back(storeSum); /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
        storeSum = 0; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      m -= 1; /* line 48 slow_hit_count: 12, fast_hit_count: 0 */
      if (m == 0 && storeSum > 0) { /* line 49 slow_hit_count: 12, fast_hit_count: 0 */
        cout << -1 << " " << -1 << endl; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    while (m > 0) { /* line 54 slow_hit_count: 89, fast_hit_count: 0 */
      digitsMax.push_back(0); /* line 55 slow_hit_count: 88, fast_hit_count: 0 */
      m--; /* line 56 slow_hit_count: 88, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    m = storeSecond; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
    sum = sumSecond; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < 10000000; i++) { /* line 60 slow_hit_count: 10000001, fast_hit_count: 0 */
      if (sum > 9) { /* line 61 slow_hit_count: 10000000, fast_hit_count: 0 */
        digitsMin.push_back(9); /* line 62 slow_hit_count: 11, fast_hit_count: 0 */
        sum -= 9; /* line 63 slow_hit_count: 11, fast_hit_count: 0 */
        m--; /* line 64 slow_hit_count: 11, fast_hit_count: 0 */
      } else if (sum > 1 && m > 1) { /* line 65 slow_hit_count: 9999989, fast_hit_count: 0 */
        digitsMin.push_back(sum - 1); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
        sum = sum - (sum - 1); /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        m--; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      if (m == 0 || m == 1) break; /* line 70 slow_hit_count: 10000000, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    while (m - 1 > 0) { /* line 72 slow_hit_count: 89, fast_hit_count: 0 */
      digitsMin.push_back(0); /* line 73 slow_hit_count: 88, fast_hit_count: 0 */
      m--; /* line 74 slow_hit_count: 88, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    digitsMin.push_back(sum); /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
    reverse(digitsMin.begin(), digitsMin.end()); /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < digitsMin.size(); i++) { /* line 78 slow_hit_count: 101, fast_hit_count: 0 */
      cout << digitsMin[i]; /* line 79 slow_hit_count: 100, fast_hit_count: 0 */
    } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    cout << " "; /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < digitsMax.size(); i++) { /* line 82 slow_hit_count: 101, fast_hit_count: 0 */
      cout << digitsMax[i]; /* line 83 slow_hit_count: 100, fast_hit_count: 0 */
    } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 85 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1 << " " << -1 << endl; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we have to analyze the differences in hit counts between the fast and slow inputs, and then derive conditions or invariants that characterize the performance.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon reviewing the hit counts:

1. **High Iteration Loops:**
   - The `for` loop at line 60, which runs a very high number of times (`10,000,000` iterations), is a major contributor to the slowdown. It checks and potentially modifies elements of the `digitsMin` vector.
   - The `while` loop starting at line 40 executes a considerable number of times (13 iterations), particularly when `sum` is initially high and greater than 9.

2. **Loop with High Condition Check Frequency:**
   - The loop at line 54 iterates 89 times, filling zeros into `digitsMax` when `m` is significantly reduced after the first while loop.

3. **Conditional Logic:**
   - The conditional checks at line 61 and 65 within the loop starting at line 60 are frequent and likely inefficient when `sum` approaches lower values but is still large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis:

1. **Large Sum with Maximum Digits:**
   - When both `m` (the number of digits) and `s` (sum of digits) are near their maximum (e.g., `m = 100` and `s = 100`), the program spends more time in iterative loops, especially when attempting to find the minimal number configuration.

   **Natural Language Invariant:**
   - "If both the number of digits `m` and the sum of the digits `s` are near their maximum constraints, the program may slow down significantly due to extensive loop iterations aimed at constructing feasible digit sequences."

2. **High Iteration Count in Search Loops:**
   - The loop that attempts to compute the minimum number by exhaustive checks (line 60) becomes a performance bottleneck when `s` is large relative to `m`, as each digit potential combination is evaluated iteratively.

   **Natural Language Invariant:**
   - "When the sum `s` is large relative to the number of digits `m`, the program may enter a slow path due to high iteration counts in loops that attempt to balance the digit sum across multiple positions."

3. **When Zero Filling is Required:**
   - Adding many zeros to the `digitsMax` vector becomes costly if `m` is large, but the sum `s` has already been mostly allocated to higher valued digits.

   **Natural Language Invariant:**
   - "If a substantial portion of the digits must be filled with zeros after satisfying the sum condition, the zero-filling process may degrade performance, particularly when `m` remains large after initial high-value digit allocation."

These invariants abstractly capture the conditions leading to the slowdown and can guide future optimizations or testing scenarios by ensuring configurations that hit such slow paths are identified and managed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Based on the performance-characterizing invariants identified previously, here are the translated runtime checks in C++:

#### Invariant 1: Large Sum with Maximum Digits

```cpp
void check_large_sum_and_digits(int m, int s) {
    if (m == 100 && s >= 90) {  // Adjust threshold based on constraints
        cerr << "Warning: Performance bottleneck condition triggered - large sum with maximum digits" << endl;
        abort();
    }
}
```

#### Invariant 2: High Iteration Count in Search Loops

```cpp
void check_high_iteration_count(int m, int s) {
    if (s > 9 * (m - 9)) {  // When sum is disproportionately large
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count due to large sum" << endl;
        abort();
    }
}
```

#### Invariant 3: Zero Filling

```cpp
void check_excessive_zero_filling(int m, int storeSum) {
    if (m > 10 && storeSum < 10) {  // Heuristic to catch excessive zero filling
        cerr << "Warning: Performance bottleneck condition triggered - excessive zero filling" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, incorporate these checks into the original C++ program at optimal locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function definitions
void check_large_sum_and_digits(int m, int s) {
    if (m == 100 && s >= 90) {
        cerr << "Warning: Performance bottleneck condition triggered - large sum with maximum digits" << endl;
        abort();
    }
}

void check_high_iteration_count(int m, int s) {
    if (s > 9 * (m - 9)) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count due to large sum" << endl;
        abort();
    }
}

void check_excessive_zero_filling(int m, int storeSum) {
    if (m > 10 && storeSum < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive zero filling" << endl;
        abort();
    }
}

int32_t main() {
    int m, sum;
    cin >> m >> sum;

    // Check for large sum with maximum digits
    check_large_sum_and_digits(m, sum);

    vector<int> digitsMax;
    vector<int> digitsMin;

    if ((sum > 9 && m == 1) || (sum == 0 && m > 1)) {
        cout << -1 << " " << -1 << endl;
        return 0;
    } else if (sum == 0 && m == 1) {
        cout << 0 << " " << 0 << endl;
        return 0;
    } else if (sum <= 9 && m == 1) {
        cout << sum << " " << sum << endl;
        return 0;
    } else if (sum <= 9 && m > 1) {
        digitsMax.push_back(sum);
        for (int i = 0; i < m - 1; i++) {
            digitsMax.push_back(0);
        }
        digitsMin.push_back(1);
        for (int i = 0; i < m - 2; i++) {
            digitsMin.push_back(0);
        }
        digitsMin.push_back(sum - 1);
        for (int i = 0; i < digitsMin.size(); i++) {
            cout << digitsMin[i];
        }
        cout << " ";
        for (int i = 0; i < digitsMax.size(); i++) {
            cout << digitsMax[i];
        }
        return 0;
    } else if (sum > 9 && m >= 1) {
        int storeSum = sum;
        int storeSize = m;
        int storeSecond = m;
        int sumSecond = sum;

        // Check excessive zero filling scenario
        check_excessive_zero_filling(m, storeSum);

        while (storeSum > 0) {
            if (storeSum > 9) {
                digitsMax.push_back(9);
                storeSum -= 9;
            } else {
                digitsMax.push_back(storeSum);
                storeSum = 0;
            }
            m -= 1;
            if (m == 0 && storeSum > 0) {
                cout << -1 << " " << -1 << endl;
                return 0;
            }
        }
        while (m > 0) {
            digitsMax.push_back(0);
            m--;
        }
        m = storeSecond;
        sum = sumSecond;

        // Check for high iteration count in search loop
        check_high_iteration_count(m, sum);

        for (int i = 0; i < 10000000; i++) {
            if (sum > 9) {
                digitsMin.push_back(9);
                sum -= 9;
                m--;
            } else if (sum > 1 && m > 1) {
                digitsMin.push_back(sum - 1);
                sum = sum - (sum - 1);
                m--;
            }
            if (m == 0 || m == 1) break;
        }
        while (m - 1 > 0) {
            digitsMin.push_back(0);
            m--;
        }
        digitsMin.push_back(sum);
        reverse(digitsMin.begin(), digitsMin.end());
        for (int i = 0; i < digitsMin.size(); i++) {
            cout << digitsMin[i];
        }
        cout << " ";
        for (int i = 0; i < digitsMax.size(); i++) {
            cout << digitsMax[i];
        }
        return 0;
    } else {
        cout << -1 << " " << -1 << endl;
        return 0;
    }
}
```

### Explanation
- **Check for Large Sum with Maximum Digits:** Added after input, before any significant processing, to catch problematic inputs early.
- **Check for High Iteration Count in Search Loops:** Placed before loops that may iterate excessively based on the sum and digit count relationship.
- **Check for Excessive Zero Filling:** Before filling zeros in `digitsMax`, to avoid unnecessary operations.

These checks will help identify performance issues during runtime and allow further analysis or optimization.

