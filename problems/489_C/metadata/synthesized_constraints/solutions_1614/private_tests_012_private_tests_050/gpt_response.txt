=== Invariants Response ===
To diagnose the performance bottleneck, we need to analyze the code and the hit count information for both the fast and slow inputs. Here's a step-by-step breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The `solve` function (lines 8-22) is hit 5149 times during the slow input but not hit at all in the fast input.
   - The `solve2` function (lines 23-37) is hit 100 times during the slow input but not at all in the fast input.
   - Lines 17-21 inside the `solve` function loop have extensive hit counts, suggesting significant recursion or repeated looping.
   - The recurrence checks (`if (dp[s][S] != -1)`) indicate that memoization is being used, but the recursion depth and branching are still significant.

2. **Interaction with Data Structures**:
   - The code uses recursion with memoization (`dp` array). However, the slow input likely causes deep recursion due to a high branching factor (since `s` has to reach `n`).

3. **Input Constraints Impact**:
   - The input constraint `n <= 100` combined with a large sum `s` (up to 900) can lead to exploring many combinations to reach a valid number representation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can generate natural language statements describing conditions under which the program enters a slow path:

1. **Invariant #1: Large Sum with Maximum Length**
   - "If the digit sum `s` is significantly large relative to the number length `m`, the recursive generation of numbers may result in excessive combinations, thereby causing a slowdown."

2. **Invariant #2: Recursion with High Branching Factor**
   - "When trying to construct numbers with a large sum `s`, the recursive calls in the `solve` function may branch excessively, especially when `s` is close to its upper constraint (900), leading to performance degradation."

3. **Invariant #3: Inefficient Memoization Checks**
   - "Even with memoization, if the recursion explores a broad state space due to high possible digit sums, it may lead to repeated calculations that slow down execution."

4. **Invariant #4: Recursive Exploration for Maximum and Minimum**
   - "Constructing both the smallest and largest numbers simultaneously with high branching due to large `s` values may result in inefficient exploration of the solution space."

These invariants capture scenarios where the program might slow down due to the interaction of the input size and required sum constraints, leading to extensive recursion and branching. They provide insight into the conditions that should be monitored to prevent slow execution in future scenarios.

=== Checker Response ===
### Phase 3: Implement Performance-Characterizing Invariants in C++

Below are C++ code snippets that implement the performance-characterizing invariants derived from the natural language statements:

```cpp
// Invariant #1: Large Sum with Maximum Length
void check_large_sum_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - large sum compared to length!" << endl;
        abort();
    }
}

// Invariant #2: Recursion with High Branching Factor
void check_recursion_invariant(int m, int s, int current_level) {
    if (current_level > m || s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion branching!" << endl;
        abort();
    }
}

// Invariant #3: Inefficient Memoization Checks
void check_memoization_invariant(int m, int current_s, long long dp_value) {
    if (current_s >= 0 && current_s <= m * 9 && dp_value == -1) {
        cerr << "Warning: Memoization not effective - repeated calculations detected!" << endl;
        abort();
    }
}

// Invariant #4: Recursive Exploration for Maximum and Minimum
void check_recursive_exploration_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive exploration inefficient!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now we will integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 7;
int factors[maxn];
long long mod = 998244353;
string p1, p2;
long long dp[105][905];

// Checker functions
void check_large_sum_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - large sum compared to length!" << endl;
        abort();
    }
}

void check_recursion_invariant(int m, int s, int current_level) {
    if (current_level > m || s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion branching!" << endl;
        abort();
    }
}

void check_memoization_invariant(int m, int current_s, long long dp_value) {
    if (current_s >= 0 && current_s <= m * 9 && dp_value == -1) {
        cerr << "Warning: Memoization not effective - repeated calculations detected!" << endl;
        abort();
    }
}

void check_recursive_exploration_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive exploration inefficient!" << endl;
        abort();
    }
}

long long solve(long long S, long long s, long long n, string num) {
    // Check recursion invariant
    check_recursion_invariant(n, S, s);
    
    if (s == n) {
        if (S == 0) {
            p1 = num;
            return dp[s][S] = 1;
        }
        return dp[s][S] = 0;
    }
    if (dp[s][S] != -1) return dp[s][S];
    check_memoization_invariant(n, S, dp[s][S]);
    for (int i = 0; i <= 9; i++) {
        if (S - i >= 0)
            if (solve(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
}

long long solve2(long long S, long long s, long long n, string num) {
    // Check recursion invariant
    check_recursion_invariant(n, S, s);

    if (s == n) {
        if (S == 0) {
            p2 = num;
            return dp[s][S] = 1;
        }
        return dp[s][S] = 0;
    }
    if (dp[s][S] != -1) return dp[s][S];
    check_memoization_invariant(n, S, dp[s][S]);
    for (int i = 9; i >= 0; i--) {
        if (S - i >= 0)
            if (solve2(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    long long m, s;
    cin >> m >> s;

    // Check large sum invariant
    check_large_sum_invariant(m, s);
    check_recursive_exploration_invariant(m, s);

    if (s == 0) {
        if (m == 1)
            cout << "0 0";
        else
            cout << "-1 -1";
        return 0;
    }

    p1 = "";
    p2 = "";
    memset(dp, -1, sizeof(dp));
    for (int i = 1; i <= 9; i++) {
        if (solve(m - i, 1, m, to_string(i))) break;
    }
    memset(dp, -1, sizeof(dp));
    for (int i = 9; i >= 1; i--) {
        if (solve2(m - i, 1, m, to_string(i))) break;
    }
    if (p1 == "" || p2 == "")
        cout << -1 << " " << -1;
    else
        cout << p1 << " " << p2;
    cout << "\n";

    return 0;
}
```

### Explanation

- **Placement of Checks**: The checks are placed around the recursive calls and after reading inputs to capture potential performance bottlenecks early.
- **Invariant Checks**: Each check function captures a specific performance condition and will abort the program if any condition indicative of a slowdown is met. This helps in identifying slow execution paths during testing.
- **Utility**: These checks can be useful in debugging and optimizing the program by helping identify when and why it slows down.
