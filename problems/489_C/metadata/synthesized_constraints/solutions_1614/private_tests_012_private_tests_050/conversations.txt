system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 7;
int factors[maxn];
long long mod = 998244353;
string p1, p2;
long long dp[105][905];
long long solve(long long S, long long s, long long n, string num) {
  if (s == n) {
    if (S == 0) {
      p1 = num;
      return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
  };
  if (dp[s][S] != -1) return dp[s][S];
  for (int i = 0; i <= 9; i++) {
    if (S - i >= 0)
      if (solve(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
  }
  return dp[s][S] = 0;
}
long long solve2(long long S, long long s, long long n, string num) {
  if (s == n) {
    if (S == 0) {
      p2 = num;
      return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
  };
  if (dp[s][S] != -1) return dp[s][S];
  for (int i = 9; i >= 0; i--) {
    if (S - i >= 0)
      if (solve2(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
  }
  return dp[s][S] = 0;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  long long n, m;
  cin >> n >> m;
  if (m == 0) {
    if (n == 1)
      cout << "0 0";
    else
      cout << "-1 -1";
    return 0;
  }
  p1 = "";
  p2 = "";
  memset(dp, -1, sizeof(dp));
  for (int i = 1; i <= 9; i++) {
    if (solve(m - i, 1, n, to_string(i))) break;
  }
  memset(dp, -1, sizeof(dp));
  for (int i = 9; i >= 1; i--) {
    if (solve2(m - i, 1, n, to_string(i))) break;
  }
  if (p1 == "" || p2 == "")
    cout << -1 << " " << -1;
  else
    cout << p1 << " " << p2;
  cout << "\n";
  ;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

100 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 2e5 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int factors[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string p1, p2; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[105][905]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(long long S, long long s, long long n, string num) { /* line 8 slow_hit_count: 5149, fast_hit_count: 0 */
  if (s == n) { /* line 9 slow_hit_count: 5149, fast_hit_count: 0 */
    if (S == 0) { /* line 10 slow_hit_count: 910, fast_hit_count: 0 */
      p1 = num; /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
      return dp[s][S] = 1; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[s][S] = 0; /* line 14 slow_hit_count: 909, fast_hit_count: 0 */
  }; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[s][S] != -1) return dp[s][S]; /* line 16 slow_hit_count: 4239, fast_hit_count: 0 */
  for (int i = 0; i <= 9; i++) { /* line 17 slow_hit_count: 5643, fast_hit_count: 0 */
    if (S - i >= 0) /* line 18 slow_hit_count: 5148, fast_hit_count: 0 */
      if (solve(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1; /* line 19 slow_hit_count: 5148, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[s][S] = 0; /* line 21 slow_hit_count: 495, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long solve2(long long S, long long s, long long n, string num) { /* line 23 slow_hit_count: 100, fast_hit_count: 0 */
  if (s == n) { /* line 24 slow_hit_count: 100, fast_hit_count: 0 */
    if (S == 0) { /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
      p2 = num; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
      return dp[s][S] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[s][S] = 0; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[s][S] != -1) return dp[s][S]; /* line 31 slow_hit_count: 99, fast_hit_count: 0 */
  for (int i = 9; i >= 0; i--) { /* line 32 slow_hit_count: 899, fast_hit_count: 0 */
    if (S - i >= 0) /* line 33 slow_hit_count: 899, fast_hit_count: 0 */
      if (solve2(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1; /* line 34 slow_hit_count: 99, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[s][S] = 0; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  long long n, m; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  if (m == 0) { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    if (n == 1) /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
      cout << "0 0"; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "-1 -1"; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  p1 = ""; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  p2 = ""; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= 9; i++) { /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
    if (solve(m - i, 1, n, to_string(i))) break; /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 9; i >= 1; i--) { /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
    if (solve2(m - i, 1, n, to_string(i))) break; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  if (p1 == "" || p2 == "") /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
    cout << -1 << " " << -1; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    cout << p1 << " " << p2; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  cout << "\n"; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
  ; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck, we need to analyze the code and the hit count information for both the fast and slow inputs. Here's a step-by-step breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The `solve` function (lines 8-22) is hit 5149 times during the slow input but not hit at all in the fast input.
   - The `solve2` function (lines 23-37) is hit 100 times during the slow input but not at all in the fast input.
   - Lines 17-21 inside the `solve` function loop have extensive hit counts, suggesting significant recursion or repeated looping.
   - The recurrence checks (`if (dp[s][S] != -1)`) indicate that memoization is being used, but the recursion depth and branching are still significant.

2. **Interaction with Data Structures**:
   - The code uses recursion with memoization (`dp` array). However, the slow input likely causes deep recursion due to a high branching factor (since `s` has to reach `n`).

3. **Input Constraints Impact**:
   - The input constraint `n <= 100` combined with a large sum `s` (up to 900) can lead to exploring many combinations to reach a valid number representation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can generate natural language statements describing conditions under which the program enters a slow path:

1. **Invariant #1: Large Sum with Maximum Length**
   - "If the digit sum `s` is significantly large relative to the number length `m`, the recursive generation of numbers may result in excessive combinations, thereby causing a slowdown."

2. **Invariant #2: Recursion with High Branching Factor**
   - "When trying to construct numbers with a large sum `s`, the recursive calls in the `solve` function may branch excessively, especially when `s` is close to its upper constraint (900), leading to performance degradation."

3. **Invariant #3: Inefficient Memoization Checks**
   - "Even with memoization, if the recursion explores a broad state space due to high possible digit sums, it may lead to repeated calculations that slow down execution."

4. **Invariant #4: Recursive Exploration for Maximum and Minimum**
   - "Constructing both the smallest and largest numbers simultaneously with high branching due to large `s` values may result in inefficient exploration of the solution space."

These invariants capture scenarios where the program might slow down due to the interaction of the input size and required sum constraints, leading to extensive recursion and branching. They provide insight into the conditions that should be monitored to prevent slow execution in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Below are C++ code snippets that implement the performance-characterizing invariants derived from the natural language statements:

```cpp
// Invariant #1: Large Sum with Maximum Length
void check_large_sum_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - large sum compared to length!" << endl;
        abort();
    }
}

// Invariant #2: Recursion with High Branching Factor
void check_recursion_invariant(int m, int s, int current_level) {
    if (current_level > m || s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion branching!" << endl;
        abort();
    }
}

// Invariant #3: Inefficient Memoization Checks
void check_memoization_invariant(int m, int current_s, long long dp_value) {
    if (current_s >= 0 && current_s <= m * 9 && dp_value == -1) {
        cerr << "Warning: Memoization not effective - repeated calculations detected!" << endl;
        abort();
    }
}

// Invariant #4: Recursive Exploration for Maximum and Minimum
void check_recursive_exploration_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive exploration inefficient!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now we will integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 7;
int factors[maxn];
long long mod = 998244353;
string p1, p2;
long long dp[105][905];

// Checker functions
void check_large_sum_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - large sum compared to length!" << endl;
        abort();
    }
}

void check_recursion_invariant(int m, int s, int current_level) {
    if (current_level > m || s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion branching!" << endl;
        abort();
    }
}

void check_memoization_invariant(int m, int current_s, long long dp_value) {
    if (current_s >= 0 && current_s <= m * 9 && dp_value == -1) {
        cerr << "Warning: Memoization not effective - repeated calculations detected!" << endl;
        abort();
    }
}

void check_recursive_exploration_invariant(int m, int s) {
    if (s > m * 9) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive exploration inefficient!" << endl;
        abort();
    }
}

long long solve(long long S, long long s, long long n, string num) {
    // Check recursion invariant
    check_recursion_invariant(n, S, s);
    
    if (s == n) {
        if (S == 0) {
            p1 = num;
            return dp[s][S] = 1;
        }
        return dp[s][S] = 0;
    }
    if (dp[s][S] != -1) return dp[s][S];
    check_memoization_invariant(n, S, dp[s][S]);
    for (int i = 0; i <= 9; i++) {
        if (S - i >= 0)
            if (solve(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
}

long long solve2(long long S, long long s, long long n, string num) {
    // Check recursion invariant
    check_recursion_invariant(n, S, s);

    if (s == n) {
        if (S == 0) {
            p2 = num;
            return dp[s][S] = 1;
        }
        return dp[s][S] = 0;
    }
    if (dp[s][S] != -1) return dp[s][S];
    check_memoization_invariant(n, S, dp[s][S]);
    for (int i = 9; i >= 0; i--) {
        if (S - i >= 0)
            if (solve2(S - i, s + 1, n, num + to_string(i)) == 1) return dp[s][S] = 1;
    }
    return dp[s][S] = 0;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    long long m, s;
    cin >> m >> s;

    // Check large sum invariant
    check_large_sum_invariant(m, s);
    check_recursive_exploration_invariant(m, s);

    if (s == 0) {
        if (m == 1)
            cout << "0 0";
        else
            cout << "-1 -1";
        return 0;
    }

    p1 = "";
    p2 = "";
    memset(dp, -1, sizeof(dp));
    for (int i = 1; i <= 9; i++) {
        if (solve(m - i, 1, m, to_string(i))) break;
    }
    memset(dp, -1, sizeof(dp));
    for (int i = 9; i >= 1; i--) {
        if (solve2(m - i, 1, m, to_string(i))) break;
    }
    if (p1 == "" || p2 == "")
        cout << -1 << " " << -1;
    else
        cout << p1 << " " << p2;
    cout << "\n";

    return 0;
}
```

### Explanation

- **Placement of Checks**: The checks are placed around the recursive calls and after reading inputs to capture potential performance bottlenecks early.
- **Invariant Checks**: Each check function captures a specific performance condition and will abort the program if any condition indicative of a slowdown is met. This helps in identifying slow execution paths during testing.
- **Utility**: These checks can be useful in debugging and optimizing the program by helping identify when and why it slows down.

