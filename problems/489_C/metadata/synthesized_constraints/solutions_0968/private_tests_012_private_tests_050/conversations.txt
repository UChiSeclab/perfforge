system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int m, l, s;
char c[103];
unsigned long long int dp[105][905];
unsigned long long int fun(int pos, int fl) {
  int l;
  if (pos == m) {
    if (fl == 0)
      return 1LL;
    else
      return 0LL;
  }
  if (pos == 0)
    l = 1;
  else
    l = 0;
  if (m == 1 && pos == 0) l = 0;
  unsigned long long int &r = dp[pos][fl];
  if (r != -1) return r;
  r = 0;
  for (int i = l; i < 10; i++) {
    if ((fl - i) >= 0)
      r |= fun(pos + 1, fl - i);
    else
      break;
  }
  return r;
}
void path(int pos, int fl, unsigned long long int cnt) {
  if (pos == m) {
    return;
  }
  if (pos == 0)
    l = 1;
  else
    l = 0;
  for (int i = l; i < 10; i++) {
    if ((fl - i) >= 0) {
      unsigned long long int l = fun(pos, fl);
      cout << l << "con" << endl;
      if (cnt <= l) {
        cout << i;
        return path(pos + 1, fl - i, cnt);
      }
      cnt -= fun(pos + 1, fl - i);
    }
  }
  return;
}
void path1(int pos, int fl) {
  if (pos == m) {
    return;
  }
  if (pos == 0)
    l = 1;
  else
    l = 0;
  if (m == 1 && pos == 0) l = 0;
  for (int i = l; i < 10; i++) {
    if ((fl - i) >= 0) {
      unsigned long long int l = fun(pos + 1, fl - i);
      if (l >= 1) {
        cout << i;
        return path1(pos + 1, fl - i);
      }
    }
  }
  return;
}
void path2(int pos, int fl) {
  if (pos == m) {
    return;
  }
  if (pos == 0)
    l = 1;
  else
    l = 0;
  if (m == 1 && pos == 0) l = 0;
  for (int i = 9; i >= 0; i--) {
    if ((fl - i) >= 0) {
      unsigned long long int l = fun(pos, fl);
      if (l == 1) {
        cout << i;
        return path2(pos + 1, fl - i);
      }
    }
  }
  return;
}
int main() {
  cin >> m >> s;
  memset(dp, -1, sizeof(dp));
  unsigned long long int r = fun(0, s);
  if (r) {
    path1(0, s);
  } else
    cout << "-1";
  cout << " ";
  if (r) {
    path2(0, s);
    cout << endl;
  } else
    cout << "-1" << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

100 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int m, l, s; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char c[103]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long int dp[105][905]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long int fun(int pos, int fl) { /* line 6 slow_hit_count: 90253, fast_hit_count: 1 */
  int l; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == m) { /* line 8 slow_hit_count: 90253, fast_hit_count: 1 */
    if (fl == 0) /* line 9 slow_hit_count: 965, fast_hit_count: 0 */
      return 1LL; /* line 10 slow_hit_count: 11, fast_hit_count: 0 */
    else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      return 0LL; /* line 12 slow_hit_count: 954, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == 0) /* line 14 slow_hit_count: 89288, fast_hit_count: 1 */
    l = 1; /* line 15 slow_hit_count: 2, fast_hit_count: 1 */
  else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    l = 0; /* line 17 slow_hit_count: 89286, fast_hit_count: 0 */
  if (m == 1 && pos == 0) l = 0; /* line 18 slow_hit_count: 89288, fast_hit_count: 1 */
  unsigned long long int &r = dp[pos][fl]; /* line 19 slow_hit_count: 89288, fast_hit_count: 1 */
  if (r != -1) return r; /* line 20 slow_hit_count: 89288, fast_hit_count: 1 */
  r = 0; /* line 21 slow_hit_count: 9395, fast_hit_count: 1 */
  for (int i = l; i < 10; i++) { /* line 22 slow_hit_count: 99348, fast_hit_count: 1 */
    if ((fl - i) >= 0) /* line 23 slow_hit_count: 90753, fast_hit_count: 1 */
      r |= fun(pos + 1, fl - i); /* line 24 slow_hit_count: 89953, fast_hit_count: 0 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 26 slow_hit_count: 800, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 28 slow_hit_count: 9395, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
void path(int pos, int fl, unsigned long long int cnt) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == m) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == 0) /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    l = 1; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    l = 0; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = l; i < 10; i++) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if ((fl - i) >= 0) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      unsigned long long int l = fun(pos, fl); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      cout << l << "con" << endl; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt <= l) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        cout << i; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        return path(pos + 1, fl - i, cnt); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      cnt -= fun(pos + 1, fl - i); /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
void path1(int pos, int fl) { /* line 51 slow_hit_count: 101, fast_hit_count: 0 */
  if (pos == m) { /* line 52 slow_hit_count: 101, fast_hit_count: 0 */
    return; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == 0) /* line 55 slow_hit_count: 100, fast_hit_count: 0 */
    l = 1; /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    l = 0; /* line 58 slow_hit_count: 99, fast_hit_count: 0 */
  if (m == 1 && pos == 0) l = 0; /* line 59 slow_hit_count: 100, fast_hit_count: 0 */
  for (int i = l; i < 10; i++) { /* line 60 slow_hit_count: 199, fast_hit_count: 0 */
    if ((fl - i) >= 0) { /* line 61 slow_hit_count: 199, fast_hit_count: 0 */
      unsigned long long int l = fun(pos + 1, fl - i); /* line 62 slow_hit_count: 199, fast_hit_count: 0 */
      if (l >= 1) { /* line 63 slow_hit_count: 199, fast_hit_count: 0 */
        cout << i; /* line 64 slow_hit_count: 100, fast_hit_count: 0 */
        return path1(pos + 1, fl - i); /* line 65 slow_hit_count: 100, fast_hit_count: 0 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
void path2(int pos, int fl) { /* line 71 slow_hit_count: 101, fast_hit_count: 0 */
  if (pos == m) { /* line 72 slow_hit_count: 101, fast_hit_count: 0 */
    return; /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == 0) /* line 75 slow_hit_count: 100, fast_hit_count: 0 */
    l = 1; /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    l = 0; /* line 78 slow_hit_count: 99, fast_hit_count: 0 */
  if (m == 1 && pos == 0) l = 0; /* line 79 slow_hit_count: 100, fast_hit_count: 0 */
  for (int i = 9; i >= 0; i--) { /* line 80 slow_hit_count: 900, fast_hit_count: 0 */
    if ((fl - i) >= 0) { /* line 81 slow_hit_count: 900, fast_hit_count: 0 */
      unsigned long long int l = fun(pos, fl); /* line 82 slow_hit_count: 100, fast_hit_count: 0 */
      if (l == 1) { /* line 83 slow_hit_count: 100, fast_hit_count: 0 */
        cout << i; /* line 84 slow_hit_count: 100, fast_hit_count: 0 */
        return path2(pos + 1, fl - i); /* line 85 slow_hit_count: 100, fast_hit_count: 0 */
      } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> s; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long int r = fun(0, s); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  if (r) { /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
    path1(0, s); /* line 96 slow_hit_count: 1, fast_hit_count: 0 */
  } else /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1"; /* line 98 slow_hit_count: 0, fast_hit_count: 1 */
  cout << " "; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  if (r) { /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
    path2(0, s); /* line 101 slow_hit_count: 1, fast_hit_count: 0 */
    cout << endl; /* line 102 slow_hit_count: 1, fast_hit_count: 0 */
  } else /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1" << endl; /* line 104 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 105 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify performance bottlenecks and derive performance-characterizing invariants, let's analyze the given C program and hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The function `fun` is called significantly more times with the slow input (90253 times) compared to the fast input (1 time). This indicates that the `fun` function is likely where the performance bottleneck lies.
   - The `for` loop inside `fun` (lines 22-26) is heavily involved, suggesting that the loop, and particularly the recursive call `fun(pos + 1, fl - i)`, is frequently executed for the slow input.

2. **Interaction with Data Structures**:
   - This function `fun` employs a dynamic programming approach, as suggested by the use of the `dp` array for memoization. However, the hit count suggests that memoization might not be effectively reducing the number of recursive calls for the slow input.
   - The problem constraints imply that `s` is the sum of digits, and for the slow input (`m=100, s=100`), the function explores many combinations of digits that sum to `100` over `100` positions, leading to excessive recursion.

3. **Input Constraints and Recursion**:
   - The recursion depth and branching factor are inherently tied to `m` and `s`. For larger values of `s` relative to `m`, there are more digit combinations to check, potentially causing a large recursive search space.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursion Depth and Branching Factor**:
   - Natural Language Description: "If the sum of digits `s` is relatively high compared to the number of digits `m`, the recursion may explore a vast number of combinations, significantly slowing down the execution."
   - This invariant captures the condition where large sums must be distributed over a smaller number of digits, leading to high recursive call depth and extensive exploration.

2. **Memoization and DP Table Effectiveness**:
   - Natural Language Description: "If the dynamic programming table is not effectively reducing the number of recursive calls due to large unexplored states, performance may degrade."
   - This condition is met when the memoization (`dp` array) is either too large to be efficiently filled or frequently reset or bypassed.

3. **Digit Constraints and Feasibility**:
   - Natural Language Description: "For input combinations where the digit sum `s` is significantly large relative to `m`, and feasible digit assignments become scarce, execution time may increase."
   - This deals with the feasibility of arranging digits such that their sum is `s`, which becomes computationally expensive as `s` approaches the theoretical maximum (`9 * m`).

### Summary of Performance Invariants

- **Invariant A**: "When `s` approaches the maximum possible sum for `m` digits (`9*m`), the recursive exploration space increases, leading to potential slowdowns, especially when `m` is large."
- **Invariant B**: "If the memoization table (`dp`) is not fully utilized or optimally accessed, recursive calls may become excessive, degrading performance."
- **Invariant C**: "When digit sum `s` is large enough to require most digits to be near their maximum value, the search space may become larger, slowing down the function."

These statements help in understanding potential slow paths without relying on specific slow input values, adhering to the input constraints (`1 ≤ m ≤ 100, 0 ≤ s ≤ 900`). They also provide guidance for creating tests that could reveal performance issues with other similar inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 by translating the identified performance-characterizing invariants into runtime checks in C++.

### Phase 3: Implement Performance-Characterizing Invariants in C++

1. **Invariant A**: "When `s` approaches the maximum possible sum for `m` digits (`9*m`), the recursive exploration space increases, leading to potential slowdowns, especially when `m` is large."
   
   ```cpp
   void check_recursion_bottleneck(int m, int s) {
       if (s > 8 * m) {  // A threshold to capture scenarios close to maximum digit sum
           cerr << "Warning: Recursion bottleneck triggered - large sum s relative to m" << endl;
           abort();
       }
   }
   ```

2. **Invariant B**: "If the memoization table (`dp`) is not fully utilized or optimally accessed, recursive calls may become excessive, degrading performance."
   
   This invariant is typically harder to check directly at runtime without performance profiling tools, but we can check the initialization state:

   ```cpp
   void check_dp_initialization(unsigned long long int dp[105][905]) {
       // Check if the dp table has been reset properly
       for (int i = 0; i <= 100; ++i) {
           for (int j = 0; j <= 900; ++j) {
               if (dp[i][j] != -1) {
                   cerr << "Warning: DP table not initialized properly!" << endl;
                   abort();
               }
           }
       }
   }
   ```

3. **Invariant C**: "When digit sum `s` is large enough to require most digits to be near their maximum value, the search space may become larger, slowing down the function."
   
   This invariant overlaps with Invariant A, so we can handle it with the same check.

### Phase 4: Integrate Checks with the Original Program

Now, let's integrate these checkers into the provided C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;

int m, l, s;
char c[103];
unsigned long long int dp[105][905];

// Checker functions for performance invariants

void check_recursion_bottleneck(int m, int s) {
    if (s > 8 * m) {  // A threshold to capture scenarios close to maximum digit sum
        cerr << "Warning: Recursion bottleneck triggered - large sum s relative to m" << endl;
        abort();
    }
}

void check_dp_initialization(unsigned long long int dp[105][905]) {
    // Check if the dp table has been reset properly
    for (int i = 0; i <= 100; ++i) {
        for (int j = 0; j <= 900; ++j) {
            if (dp[i][j] != -1) {
                cerr << "Warning: DP table not initialized properly!" << endl;
                abort();
            }
        }
    }
}

unsigned long long int fun(int pos, int fl) {
    int l;
    if (pos == m) {
        if (fl == 0)
            return 1LL;
        else
            return 0LL;
    }
    if (pos == 0)
        l = 1;
    else
        l = 0;
    if (m == 1 && pos == 0) l = 0;
    unsigned long long int &r = dp[pos][fl];
    if (r != -1) return r;
    r = 0;
    for (int i = l; i < 10; i++) {
        if ((fl - i) >= 0)
            r |= fun(pos + 1, fl - i);
        else
            break;
    }
    return r;
}

void path(int pos, int fl, unsigned long long int cnt) {
    if (pos == m) {
        return;
    }
    if (pos == 0)
        l = 1;
    else
        l = 0;
    for (int i = l; i < 10; i++) {
        if ((fl - i) >= 0) {
            unsigned long long int l = fun(pos, fl);
            cout << l << "con" << endl;
            if (cnt <= l) {
                cout << i;
                return path(pos + 1, fl - i, cnt);
            }
            cnt -= fun(pos + 1, fl - i);
        }
    }
    return;
}

void path1(int pos, int fl) {
    if (pos == m) {
        return;
    }
    if (pos == 0)
        l = 1;
    else
        l = 0;
    if (m == 1 && pos == 0) l = 0;
    for (int i = l; i < 10; i++) {
        if ((fl - i) >= 0) {
            unsigned long long int l = fun(pos + 1, fl - i);
            if (l >= 1) {
                cout << i;
                return path1(pos + 1, fl - i);
            }
        }
    }
    return;
}

void path2(int pos, int fl) {
    if (pos == m) {
        return;
    }
    if (pos == 0)
        l = 1;
    else
        l = 0;
    if (m == 1 && pos == 0) l = 0;
    for (int i = 9; i >= 0; i--) {
        if ((fl - i) >= 0) {
            unsigned long long int l = fun(pos, fl);
            if (l == 1) {
                cout << i;
                return path2(pos + 1, fl - i);
            }
        }
    }
    return;
}

int main() {
    cin >> m >> s;
    
    // Invariant check: recursion bottleneck due to large s relative to m
    check_recursion_bottleneck(m, s);

    memset(dp, -1, sizeof(dp));
    
    // Invariant check: ensure dp table is reset before use
    check_dp_initialization(dp);

    unsigned long long int r = fun(0, s);
    if (r) {
        path1(0, s);
    } else
        cout << "-1";
    cout << " ";
    if (r) {
        path2(0, s);
        cout << endl;
    } else
        cout << "-1" << endl;
}
```

### Explanation

- **Performance Invariants**: The checks are inserted immediately after reading the input and resetting the `dp` table. They ensure:
  - The program aborts if `s` is so large relative to `m` that it risks entering slow recursive paths.
  - The `dp` table is properly initialized, guarding against excessive recursive calls due to faulty memoization.
- **Placement**: The checks are strategically placed before the expensive computations begin, ensuring minimal overhead while still safeguarding the critical execution paths.

