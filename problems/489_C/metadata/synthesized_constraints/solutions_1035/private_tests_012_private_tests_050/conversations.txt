system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char tochar(int n) {
  int m = n;
  char x;
  stringstream ss;
  ss << m;
  ss >> x;
  return x;
}
string revers_(string s) {
  string x;
  for (int i = s.size() - 1, j = 0; i >= 0, j < s.size(); i--, j++) {
    x += s[i];
  }
  for (int i = 0; i < x.size(); i++) {
    for (int j = i + 1; j < x.size(); j++) {
      if (x[i] == '0' && x[j] != '0') {
        x[i] = '1';
        x[j] = tochar((x[j] - '0') - 1);
        return x;
      }
    }
  }
  return x;
}
int main() {
  int n, m, x;
  cin >> n >> m;
  x = m;
  string s;
  if (m == 0 && n != 1 || m > 9 * n) {
    cout << -1 << " " << -1;
    cout << endl;
    ;
    return 0;
  }
  if (m < 10) {
    for (int i = 0; i < n; i++) {
      s += tochar(m);
      m = 0;
    }
  } else {
    for (int i = 0; i < n; i++) {
      if (m >= 10) {
        s += tochar(9);
        m -= 9;
      } else {
        s += tochar(m);
        m = 0;
      }
    }
  }
  if (x < 10 && n != 1) {
    for (int i = 0; i < n; i++) {
      if (i == 0) {
        cout << 1;
        x -= 1;
      } else if (i == n - 1)
        cout << x;
      else
        cout << 0;
    }
    cout << " " << s;
    cout << endl;
  } else
    cout << revers_(s) << " " << s;
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100


(G.2) Fast Input

100 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char tochar(int n) { /* line 3 slow_hit_count: 101, fast_hit_count: 0 */
  int m = n; /* line 4 slow_hit_count: 101, fast_hit_count: 0 */
  char x; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream ss; /* line 6 slow_hit_count: 101, fast_hit_count: 0 */
  ss << m; /* line 7 slow_hit_count: 101, fast_hit_count: 0 */
  ss >> x; /* line 8 slow_hit_count: 101, fast_hit_count: 0 */
  return x; /* line 9 slow_hit_count: 202, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
string revers_(string s) { /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
  string x; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = s.size() - 1, j = 0; i >= 0, j < s.size(); i--, j++) { /* line 13 slow_hit_count: 101, fast_hit_count: 0 */
    x += s[i]; /* line 14 slow_hit_count: 100, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < x.size(); i++) { /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
    for (int j = i + 1; j < x.size(); j++) { /* line 17 slow_hit_count: 88, fast_hit_count: 0 */
      if (x[i] == '0' && x[j] != '0') { /* line 18 slow_hit_count: 88, fast_hit_count: 0 */
        x[i] = '1'; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
        x[j] = tochar((x[j] - '0') - 1); /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
        return x; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, x; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  x = m; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  if (m == 0 && n != 1 || m > 9 * n) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << " " << -1; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
    cout << endl; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
    ; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (m < 10) { /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      s += tochar(m); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      m = 0; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) { /* line 44 slow_hit_count: 101, fast_hit_count: 0 */
      if (m >= 10) { /* line 45 slow_hit_count: 100, fast_hit_count: 0 */
        s += tochar(9); /* line 46 slow_hit_count: 11, fast_hit_count: 0 */
        m -= 9; /* line 47 slow_hit_count: 11, fast_hit_count: 0 */
      } else { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        s += tochar(m); /* line 49 slow_hit_count: 89, fast_hit_count: 0 */
        m = 0; /* line 50 slow_hit_count: 89, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < 10 && n != 1) { /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (i == 0) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        cout << 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        x -= 1; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (i == n - 1) /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        cout << x; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
        cout << 0; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    cout << " " << s; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    cout << revers_(s) << " " << s; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
  cout << endl; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slowdown of the given C program for the provided inputs and to derive performance-characterizing invariants, we'll go through two phases: identifying inefficient code segments and deriving natural language invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `tochar` function has a significant hit count during the slow execution, specifically 101 calls. This function uses a `stringstream` which can be inefficient for converting integers to characters, especially when called repeatedly in a loop.
   - The loop from lines 44 to 52 iterates 100 times during the slow execution, indicating that it processes many elements. This loop contains the `tochar` function call, amplifying the inefficiency.
   - The `revers_` function is called once during the slow execution, but the nested loops inside it (lines 13 to 18) process the input string, iterating over its length, which can be substantial due to `n = 100`.

2. **Interaction with Data Structures:**
   - The program constructs a string `s` by repeatedly calling `tochar` and appending characters. This construction involves repeated dynamic memory allocations and deallocations.
   - The nested loop in `revers_` tries to adjust the digits to avoid leading zeros, which involves iterating over the string multiple times.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified hotspots and inefficiencies, we can formulate the following performance invariants:

1. **Invariant: High Loop Iterations with Inefficient Conversion**
   - **Natural language description:** "When the length of the number (`n`) is large, and the process involves repeated conversion of integers to characters using inefficient methods, the program may slow down significantly. This is especially impactful if the sum of the digits (`s`) requires multiple iterations to distribute the digits optimally."
   
2. **Invariant: Nested Loop Processing on Large Strings**
   - **Natural language description:** "If the string representing the digits is long, and operations involve nested loops to adjust the digits (such as avoiding leading zeros), the program may incur a performance penalty. This is particularly true when `n` is large and the digit adjustments are frequent."

3. **Invariant: Large Input Size with Suboptimal Memory Handling**
   - **Natural language description:** "For large input sizes (`n` close to 100), if the program uses dynamic memory operations intensively (like appending characters in loops), it may experience slowdown due to increased overhead in managing memory allocations."

### Conclusion

The slow performance arises primarily due to the inefficient conversion of digits to characters and the handling of long strings with nested loops. The identified invariants capture conditions under which these inefficiencies become prominent, considering the constraints (1 ≤ m ≤ 100, 0 ≤ s ≤ 900). These invariants are broad enough to anticipate similar slowdowns with different inputs that satisfy these patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Below are the C++ code snippets that implement the performance-characterizing invariants derived from the analysis:

1. **Invariant: High Loop Iterations with Inefficient Conversion**

```cpp
void check_conversion_invariant(int n, int m) {
    if (n > 50 && m > 450) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient digit-to-character conversion!" << endl;
        abort();
    }
}
```

2. **Invariant: Nested Loop Processing on Large Strings**

```cpp
void check_nested_loop_invariant(int n, const string& s) {
    if (n > 50 && s.length() > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to nested loop processing on large strings!" << endl;
        abort();
    }
}
```

3. **Invariant: Large Input Size with Suboptimal Memory Handling**

```cpp
void check_memory_invariant(int n, int m) {
    if (n > 90 && m > 800) {
        cerr << "Warning: Performance bottleneck due to large input size and potential suboptimal memory handling!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here is the instrumented C++ code with the above checkers integrated at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

char tochar(int n) {
    int m = n;
    char x;
    stringstream ss;
    ss << m;
    ss >> x;
    return x;
}

string revers_(string s) {
    string x;
    for (int i = s.size() - 1, j = 0; i >= 0, j < s.size(); i--, j++) {
        x += s[i];
    }
    for (int i = 0; i < x.size(); i++) {
        for (int j = i + 1; j < x.size(); j++) {
            if (x[i] == '0' && x[j] != '0') {
                x[i] = '1';
                x[j] = tochar((x[j] - '0') - 1);
                return x;
            }
        }
    }
    return x;
}

void check_conversion_invariant(int n, int m) {
    if (n > 50 && m > 450) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient digit-to-character conversion!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n, const string& s) {
    if (n > 50 && s.length() > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to nested loop processing on large strings!" << endl;
        abort();
    }
}

void check_memory_invariant(int n, int m) {
    if (n > 90 && m > 800) {
        cerr << "Warning: Performance bottleneck due to large input size and potential suboptimal memory handling!" << endl;
        abort();
    }
}

int main() {
    int n, m, x;
    cin >> n >> m;

    // Check for potential performance bottlenecks
    check_conversion_invariant(n, m);
    check_memory_invariant(n, m);

    x = m;
    string s;
    if (m == 0 && n != 1 || m > 9 * n) {
        cout << -1 << " " << -1;
        cout << endl;
        return 0;
    }
    if (m < 10) {
        for (int i = 0; i < n; i++) {
            s += tochar(m);
            m = 0;
        }
    } else {
        for (int i = 0; i < n; i++) {
            if (m >= 10) {
                s += tochar(9);
                m -= 9;
            } else {
                s += tochar(m);
                m = 0;
            }
        }
    }

    // Check after constructing the string
    check_nested_loop_invariant(n, s);

    if (x < 10 && n != 1) {
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                cout << 1;
                x -= 1;
            } else if (i == n - 1)
                cout << x;
            else
                cout << 0;
        }
        cout << " " << s;
        cout << endl;
    } else
        cout << revers_(s) << " " << s;
    cout << endl;
    return 0;
}
```

### Explanation of Instrumentation

- **Conversion Invariant:** Implemented as `check_conversion_invariant`, this is called immediately after reading inputs to catch inefficiencies early.
- **Nested Loop Invariant:** This is checked after generating the string `s`, using `check_nested_loop_invariant`, to detect when the nested loops might cause performance issues.
- **Memory Invariant:** The `check_memory_invariant` is also invoked early to analyze the overall size of the inputs and warn in advance. 

Each check is strategically placed to avoid overhead within the main processing loops, ensuring minimal performance degradation while rigorously detecting potential bottlenecks.

