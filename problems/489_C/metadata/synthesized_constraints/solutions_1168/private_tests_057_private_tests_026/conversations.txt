system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long m = 0, s = 0;
string ans;
vector<map<long long, long long> > mp;
bool DP(long long m1, long long s1) {
  if (m1 == m) return s1 == s;
  if (mp[m1].find(s1) != mp[m1].end())
    return mp[m1][s1];
  else {
    if (m1 == 0) {
      for (long long i = 1; i < 10; i++) {
        if (DP(m1 + 1, s1 + i)) {
          ans[m1] = '0' + i;
          mp[m1][s1] = true;
          return true;
        }
      }
      mp[m1][s1] = false;
      return false;
    } else {
      for (long long i = 0; i < 10; i++) {
        if (DP(m1 + 1, s1 + i)) {
          ans[m1] = '0' + i;
          mp[m1][s1] = true;
          return true;
        }
      }
      mp[m1][s1] = false;
      return false;
    }
  }
}
bool DPmx(long long m1, long long s1) {
  if (m1 == m) return s1 == s;
  if (mp[m1].find(s1) != mp[m1].end())
    return mp[m1][s1];
  else {
    if (m1 == 0) {
      for (long long i = 9; i >= 1; i--) {
        if (DPmx(m1 + 1, s1 + i)) {
          ans[m1] = '0' + i;
          mp[m1][s1] = true;
          return true;
        }
      }
      mp[m1][s1] = false;
      return false;
    } else {
      for (long long i = 9; i >= 0; i--) {
        if (DPmx(m1 + 1, s1 + i)) {
          ans[m1] = '0' + i;
          mp[m1][s1] = true;
          return true;
        }
      }
      mp[m1][s1] = false;
      return false;
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false), cin.tie(NULL);
  cin >> m >> s;
  ans.resize(m);
  mp.clear();
  mp.resize(m + 1);
  if (m == 1) {
    if (s <= 9)
      cout << s << " " << s << "\n";
    else
      cout << "-1 -1"
           << "\n";
    return 0;
  }
  if (DP(0, 0))
    cout << ans << " ";
  else
    cout << "-1"
         << " ";
  mp.clear();
  mp.resize(m + 1);
  if (DPmx(0, 0))
    cout << ans;
  else
    cout << "-1";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long m = 0, s = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<map<long long, long long> > mp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool DP(long long m1, long long s1) { /* line 6 slow_hit_count: 101, fast_hit_count: 0 */
  if (m1 == m) return s1 == s; /* line 7 slow_hit_count: 101, fast_hit_count: 0 */
  if (mp[m1].find(s1) != mp[m1].end()) /* line 8 slow_hit_count: 100, fast_hit_count: 0 */
    return mp[m1][s1]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    if (m1 == 0) { /* line 11 slow_hit_count: 100, fast_hit_count: 0 */
      for (long long i = 1; i < 10; i++) { /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
        if (DP(m1 + 1, s1 + i)) { /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
          ans[m1] = '0' + i; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
          mp[m1][s1] = true; /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
          return true; /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      mp[m1][s1] = false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long i = 0; i < 10; i++) { /* line 22 slow_hit_count: 99, fast_hit_count: 0 */
        if (DP(m1 + 1, s1 + i)) { /* line 23 slow_hit_count: 99, fast_hit_count: 0 */
          ans[m1] = '0' + i; /* line 24 slow_hit_count: 99, fast_hit_count: 0 */
          mp[m1][s1] = true; /* line 25 slow_hit_count: 99, fast_hit_count: 0 */
          return true; /* line 26 slow_hit_count: 99, fast_hit_count: 0 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      mp[m1][s1] = false; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
bool DPmx(long long m1, long long s1) { /* line 34 slow_hit_count: 445510, fast_hit_count: 0 */
  if (m1 == m) return s1 == s; /* line 35 slow_hit_count: 445510, fast_hit_count: 0 */
  if (mp[m1].find(s1) != mp[m1].end()) /* line 36 slow_hit_count: 436600, fast_hit_count: 0 */
    return mp[m1][s1]; /* line 37 slow_hit_count: 392049, fast_hit_count: 0 */
  else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (m1 == 0) { /* line 39 slow_hit_count: 44551, fast_hit_count: 0 */
      for (long long i = 9; i >= 1; i--) { /* line 40 slow_hit_count: 9, fast_hit_count: 0 */
        if (DPmx(m1 + 1, s1 + i)) { /* line 41 slow_hit_count: 9, fast_hit_count: 0 */
          ans[m1] = '0' + i; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
          mp[m1][s1] = true; /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
          return true; /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      mp[m1][s1] = false; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long i = 9; i >= 0; i--) { /* line 50 slow_hit_count: 489951, fast_hit_count: 0 */
        if (DPmx(m1 + 1, s1 + i)) { /* line 51 slow_hit_count: 445500, fast_hit_count: 0 */
          ans[m1] = '0' + i; /* line 52 slow_hit_count: 99, fast_hit_count: 0 */
          mp[m1][s1] = true; /* line 53 slow_hit_count: 99, fast_hit_count: 0 */
          return true; /* line 54 slow_hit_count: 99, fast_hit_count: 0 */
        } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      mp[m1][s1] = false; /* line 57 slow_hit_count: 44451, fast_hit_count: 0 */
      return false; /* line 58 slow_hit_count: 44451, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(NULL); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> s; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  ans.resize(m); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  mp.clear(); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  mp.resize(m + 1); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  if (m == 1) { /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    if (s <= 9) /* line 69 slow_hit_count: 0, fast_hit_count: 1 */
      cout << s << " " << s << "\n"; /* line 70 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "-1 -1" /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
           << "\n"; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 74 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  if (DP(0, 0)) /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
    cout << ans << " "; /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1" /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
         << " "; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  mp.clear(); /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
  mp.resize(m + 1); /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
  if (DPmx(0, 0)) /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
    cout << ans; /* line 84 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1"; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 87 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 88 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze and derive performance-characterizing invariants for the given C code, we will follow a two-phase approach: identifying expensive or inefficient code segments and then deriving natural language invariants describing the slowdown conditions.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts

1. **Function Calls**:
   - `DPmx` function is called significantly more times (445,510 times) compared to `DP` (101 times) in the slow input case.

2. **Conditional and Loop Analysis**:
   - In `DPmx`, the loop on line 50 is heavily executed (489,951 times), indicating a deep recursion or extensive search space exploration.
   - The memoization map (`mp`) lookup (line 36) and store (line 53) are also frequently hit, suggesting repeated states or inefficient state management.
   - The hit counts for `DPmx` in lines 35, 36, and 37 indicate repetitive checking of conditions without significant progress, likely due to redundant recursive calls.

3. **General Observations**:
   - The slow input (`100 1`) causes deep recursion, with `m1` and `s1` being explored extensively without efficient pruning of impossible states.
   - The recursive call stack depth and breadth (high number of branches at each level) contribute to the slowdown, especially with a high `m` value.

### Phase 2: Derive Performance-Characterizing Invariants

From the above observations, we can derive the following natural language invariants to describe conditions under which the code enters a slow path:

1. **Recursive Depth and State Space**:
   - Natural Language Invariant: "If the number of digits `m` is large and the sum of digits `s` is small, the recursion in finding the maximum number triggers excessive calls due to a large search space with many equivalent states."

2. **Redundant State Exploration**:
   - Natural Language Invariant: "When `m` is high and `s` approaches zero, the recursive function explores a vast state space with redundant checks, causing inefficiencies and a slowdown due to insufficient pruning of the state tree."

3. **Memoization Inefficiency**:
   - Natural Language Invariant: "For large values of `m` combined with a low value of `s`, memoization fails to effectively reduce the number of computations, resulting in excessive redundant operations and contributing to the slow performance."

These invariants highlight the conditions under which the recursive approach becomes inefficient due to extensive state exploration without effective pruning or memoization, especially when `m` is large and `s` is small. The high hit counts on recursive calls and state checks confirm these conditions as performance bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: Let's first implement the natural language invariants as C++ checker functions and then integrate them into the original C++ code.

### Phase 3: Implement Natural Language Invariants as Checkers

Here are the checkers implementing the derived invariants:

```cpp
void check_recursive_depth_invariant(int m, int s) {
    // This checks if m is large and s is small, leading to large recursive depth
    if (m > 50 && s < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive depth due to large m and small s!" << endl;
        abort();
    }
}

void check_redundant_state_invariant(int m, int s) {
    // This checks for conditions where redundant state exploration might occur
    if (m > 50 && s <= 5) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant state exploration due to low sum!" << endl;
        abort();
    }
}

void check_memoization_inefficiency(int m, int s) {
    // Checking if memoization is ineffective with current m and s
    if (m > 75 && s <= 2) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization with high m and low s!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the C++ program, placing them at effective points in the control flow to catch potential slowdowns without adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance bottlenecks
void check_recursive_depth_invariant(int m, int s) {
    if (m > 50 && s < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive depth due to large m and small s!" << endl;
        abort();
    }
}

void check_redundant_state_invariant(int m, int s) {
    if (m > 50 && s <= 5) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant state exploration due to low sum!" << endl;
        abort();
    }
}

void check_memoization_inefficiency(int m, int s) {
    if (m > 75 && s <= 2) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization with high m and low s!" << endl;
        abort();
    }
}

long long m = 0, s = 0;
string ans;
vector<map<long long, long long>> mp;

bool DP(long long m1, long long s1) {
    if (m1 == m) return s1 == s;
    if (mp[m1].find(s1) != mp[m1].end())
        return mp[m1][s1];
    else {
        if (m1 == 0) {
            for (long long i = 1; i < 10; i++) {
                if (DP(m1 + 1, s1 + i)) {
                    ans[m1] = '0' + i;
                    mp[m1][s1] = true;
                    return true;
                }
            }
            mp[m1][s1] = false;
            return false;
        } else {
            for (long long i = 0; i < 10; i++) {
                if (DP(m1 + 1, s1 + i)) {
                    ans[m1] = '0' + i;
                    mp[m1][s1] = true;
                    return true;
                }
            }
            mp[m1][s1] = false;
            return false;
        }
    }
}

bool DPmx(long long m1, long long s1) {
    if (m1 == m) return s1 == s;
    if (mp[m1].find(s1) != mp[m1].end())
        return mp[m1][s1];
    else {
        if (m1 == 0) {
            for (long long i = 9; i >= 1; i--) {
                if (DPmx(m1 + 1, s1 + i)) {
                    ans[m1] = '0' + i;
                    mp[m1][s1] = true;
                    return true;
                }
            }
            mp[m1][s1] = false;
            return false;
        } else {
            for (long long i = 9; i >= 0; i--) {
                if (DPmx(m1 + 1, s1 + i)) {
                    ans[m1] = '0' + i;
                    mp[m1][s1] = true;
                    return true;
                }
            }
            mp[m1][s1] = false;
            return false;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(NULL);
    cin >> m >> s;

    // Place checkers after input to catch potential slowdowns
    check_recursive_depth_invariant(m, s);
    check_redundant_state_invariant(m, s);
    check_memoization_inefficiency(m, s);

    ans.resize(m);
    mp.clear();
    mp.resize(m + 1);
    if (m == 1) {
        if (s <= 9)
            cout << s << " " << s << "\n";
        else
            cout << "-1 -1"
                 << "\n";
        return 0;
    }
    if (DP(0, 0))
        cout << ans << " ";
    else
        cout << "-1"
             << " ";
    mp.clear();
    mp.resize(m + 1);
    if (DPmx(0, 0))
        cout << ans;
    else
        cout << "-1";
    return 0;
}
```

In this instrumented code, the checkers are placed right after reading the input values `m` and `s` in the `main` function. This ensures that before any heavy computations or recursive calls, the program verifies whether it is at risk of entering a known performance bottleneck. If any of the specified conditions are met, the program will output a warning and terminate, thus aiding in identifying performance issues during testing or fuzzing.

