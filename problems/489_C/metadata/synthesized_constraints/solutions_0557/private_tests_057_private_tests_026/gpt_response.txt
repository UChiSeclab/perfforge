=== Invariants Response ===
To analyze the given C code and derive performance-characterizing invariants, we need to look into how the program handles inputs that cause slow execution. The slow input causes significantly more hits on certain lines, particularly inside the `dp` and `dpmin` functions, suggesting that these areas are potential bottlenecks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `dpmin` function is heavily hit with the slow input compared to the fast input, particularly at lines 46-79. This indicates that the recursion depth or the number of recursive calls is much higher in `dpmin`.
   - The `dp` function also shows increased hits, but not as excessively as `dpmin`.
   - The loops inside these functions (lines 32-41 and 57-66) contribute to increased hit counts due to multiple iterations needed to find a solution.

2. **Analysis of Code Structure:**
   - Both `dp` and `dpmin` functions use recursion to explore different combinations of digits that sum up to the specified `need`.
   - The slow input causes deep recursion and repeated calls, as the recursion attempts every possibility for digit placements to satisfy the conditions (especially when `m` is large).
   - The use of memoization (`learnt`, `mem`, `learntmin`, `memmin`) appears insufficient in reducing repeated calculations, potentially due to the nature of the input where `s` is very small compared to `m`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Description of Invariants:**

   - **Invariant 1:** "If the number of digits `m` is large and the sum `s` is small, the program may experience a significant slowdown. This is because the recursive function needs to explore a vast number of combinations to find viable digit arrangements, leading to deep recursion and high computational cost."
   
   - **Invariant 2:** "When attempting to find a number with the maximum or minimum digit sum, if the recursive exploration involves multiple branches and deep recursion, particularly when `m` is close to its upper limit and `s` is minimal, the execution time may increase significantly."
   
   - **Invariant 3:** "If memoization is insufficient due to limited `s` (sum of digits) compared to `m` (number of digits), the recursion in both `dp` and `dpmin` can result in repeated evaluations of similar states, causing performance degradation."

2. **General Observations:**
   - The recursive nature with high branching factors leads to increased execution time, especially when `s` is small, leading to many recursive calls with unbalanced needs.
   - The program relies on exploring all possible digit combinations, which becomes computationally expensive when the constraints of `m` and `s` are not well-balanced (e.g., large `m`, small `s`).

3. **Threshold Considerations:**
   - Given the constraints (`m <= 100` and `s <= 900`), the slowdown is most evident when `m` is at its maximum and `s` is minimal, requiring the exploration of many invalid or non-optimal paths.

By understanding these invariants, developers and testers can design input scenarios and optimizations that avoid triggering these slow paths, ensuring efficient execution under a wider range of conditions.

=== Checker Response ===
### Phase 3: Implementing the Natural Language Invariants as C++ Checks

Based on the previously derived natural language performance-characterizing invariants, I will now produce C++ code to check these conditions at runtime.

1. **Invariant 1: Large `m` and Small `s`**

   This invariant suggests that when `m` is large and `s` is small, the recursion can become expensive. We will introduce a checker for this condition.

   ```cpp
   void check_large_m_small_s_invariant(int m, int s) {
       if (m > 90 && s < 10) { // example condition with threshold
           cerr << "Warning: Large m and small s invariant triggered - potential recursion depth issue!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Recursive Exploration with Many Branches**

   This invariant monitors if the recursive functions are exploring too many branches due to an unbalanced `m` and `s`.

   ```cpp
   void check_recursive_exploration_invariant(int m, int s) {
       if (m > 80 && s < 10) {
           cerr << "Warning: Recursive exploration invariant triggered - high branching factor possible!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Insufficient Memoization due to Limited `s`**

   If `s` is very small compared to `m`, memoization might not efficiently reduce repeated evaluations.

   ```cpp
   void check_memoization_efficiency_invariant(int m, int s) {
       if (m > 70 && s < 5) {
           cerr << "Warning: Memoization efficiency invariant triggered - repeated evaluations possible!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original C++ Program

Now, I will integrate these checker functions into the original C++ program at appropriate points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function prototypes for invariant checks
void check_large_m_small_s_invariant(int m, int s) {
    if (m > 90 && s < 10) {
        cerr << "Warning: Large m and small s invariant triggered - potential recursion depth issue!" << endl;
        abort();
    }
}

void check_recursive_exploration_invariant(int m, int s) {
    if (m > 80 && s < 10) {
        cerr << "Warning: Recursive exploration invariant triggered - high branching factor possible!" << endl;
        abort();
    }
}

void check_memoization_efficiency_invariant(int m, int s) {
    if (m > 70 && s < 5) {
        cerr << "Warning: Memoization efficiency invariant triggered - repeated evaluations possible!" << endl;
        abort();
    }
}

bool learnt[102][901];
bool learntmin[102][901];
bool mem[102][901];
bool memmin[102][901];
int maxnum[102];
int minnum[102];
int sum;
int n;

bool dp(int pos, int need) {
    if (pos > n) {
        if (need != 0)
            return false;
        else
            return true;
    }
    if (learnt[pos][need]) return mem[pos][need];
    int mx = -1;
    bool able = false;
    bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
    if (pos != 1) {
        bool can = dp(pos + 1, need);
        if (can) {
            learnt[pos][need] = true;
            mem[pos][need] = true;
            mx = 0;
            maxnum[pos] = mx;
            return true;
        }
    }
    for (int i = 1; i <= 9; i++) {
        bool can = dp(pos + 1, need - i);
        if (can) {
            learnt[pos][need] = true;
            mem[pos][need] = true;
            mx = i;
            maxnum[pos] = mx;
            return true;
        }
    }
    learnt[pos][need] = true;
    mem[pos][need] = false;
    return false;
}

bool dpmin(int pos, int need) {
    if (pos > n) {
        if (need == 0)
            return true;
        else
            return false;
    }
    if (learntmin[pos][need]) return memmin[pos][need];
    int mx = -1;
    bool able = false;
    bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
    for (int i = 9; i >= 1; i--) {
        bool can = dpmin(pos + 1, need - i);
        if (can) {
            learntmin[pos][need] = true;
            memmin[pos][need] = true;
            mx = i;
            minnum[pos] = mx;
            return true;
        }
    }
    if (pos != 1) {
        bool can = dpmin(pos + 1, need);
        if (can) {
            learntmin[pos][need] = true;
            memmin[pos][need] = true;
            mx = 0;
            minnum[pos] = mx;
            return true;
        }
    }
    learntmin[pos][need] = true;
    memmin[pos][need] = false;
    return false;
}

int main() {
    cin >> n >> sum;

    // Perform invariant checks after input reading
    check_large_m_small_s_invariant(n, sum);
    check_recursive_exploration_invariant(n, sum);
    check_memoization_efficiency_invariant(n, sum);

    memset(mem, false, sizeof(mem));
    memset(learnt, false, sizeof(learnt));
    memset(learntmin, false, sizeof(learntmin));
    memset(memmin, false, sizeof(memmin));
    memset(maxnum, -1, sizeof(maxnum));
    memset(minnum, -1, sizeof(minnum));

    if (n == 1 && sum == 0) {
        cout << "0 0";
        return 0;
    }
    bool posmin = dp(1, sum);
    bool posmax = dpmin(1, sum);
    if (posmax && posmin) {
        for (int i = 1; i <= n; i++) {
            cout << maxnum[i];
        }
        cout << " ";
        for (int i = 1; i <= n; i++) {
            cout << minnum[i];
        }
    } else
        cout << "-1 -1";
    return 0;
}
```

### Explanation

- **Invariant Checks**: The invariant checks are placed right after reading inputs to ensure they are evaluated before any computationally expensive operations begin.

- **Integration**: Each check verifies a potential performance bottleneck condition derived from the analysis in Phase 2, ensuring they reflect realistic triggers given the constraints.

These checks will help identify when the program might enter a slow execution path, allowing developers to diagnose and optimize these scenarios effectively.
