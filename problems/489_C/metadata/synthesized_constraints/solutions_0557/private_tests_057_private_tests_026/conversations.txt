system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool learnt[102][901];
bool learntmin[102][901];
bool mem[102][901];
bool memmin[102][901];
int maxnum[102];
int minnum[102];
int sum;
int n;
bool dp(int pos, int need) {
  if (pos > n) {
    if (need != 0)
      return false;
    else
      return true;
  }
  if (learnt[pos][need]) return mem[pos][need];
  int mx = -1;
  bool able = false;
  bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
  if (pos != 1) {
    bool can = dp(pos + 1, need);
    if (can) {
      learnt[pos][need] = true;
      mem[pos][need] = true;
      mx = 0;
      maxnum[pos] = mx;
      return true;
    }
  }
  for (int i = 1; i <= 9; i++) {
    bool can = dp(pos + 1, need - i);
    if (can) {
      learnt[pos][need] = true;
      mem[pos][need] = true;
      mx = i;
      maxnum[pos] = mx;
      return true;
    }
  }
  learnt[pos][need] = true;
  mem[pos][need] = false;
  return false;
}
bool dpmin(int pos, int need) {
  if (pos > n) {
    if (need == 0)
      return true;
    else
      return false;
  }
  if (learntmin[pos][need]) return memmin[pos][need];
  int mx = -1;
  bool able = false;
  bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
  for (int i = 9; i >= 1; i--) {
    bool can = dpmin(pos + 1, need - i);
    if (can) {
      learntmin[pos][need] = true;
      memmin[pos][need] = true;
      mx = i;
      minnum[pos] = mx;
      return true;
    }
  }
  if (pos != 1) {
    bool can = dpmin(pos + 1, need);
    if (can) {
      learntmin[pos][need] = true;
      memmin[pos][need] = true;
      mx = 0;
      minnum[pos] = mx;
      return true;
    }
  }
  learntmin[pos][need] = true;
  memmin[pos][need] = false;
  return false;
}
int main() {
  cin >> n;
  memset(mem, false, sizeof(mem));
  memset(learnt, false, sizeof(learnt));
  memset(learntmin, false, sizeof(learntmin));
  memset(memmin, false, sizeof(memmin));
  memset(maxnum, -1, sizeof(maxnum));
  memset(minnum, -1, sizeof(minnum));
  cin >> sum;
  if (n == 1 && sum == 0) {
    cout << "0 0";
    return 0;
  }
  bool posmin = dp(1, sum);
  bool posmax = dpmin(1, sum);
  if (posmax && posmin) {
    for (int i = 1; i <= n; i++) {
      cout << maxnum[i];
    }
    cout << " ";
    for (int i = 1; i <= n; i++) {
      cout << minnum[i];
    }
  } else
    cout << "-1 -1";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool learnt[102][901]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool learntmin[102][901]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool mem[102][901]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool memmin[102][901]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int maxnum[102]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int minnum[102]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int sum; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool dp(int pos, int need) { /* line 11 slow_hit_count: 101, fast_hit_count: 2 */
  if (pos > n) { /* line 12 slow_hit_count: 101, fast_hit_count: 2 */
    if (need != 0) /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
      return false; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      return true; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (learnt[pos][need]) return mem[pos][need]; /* line 18 slow_hit_count: 100, fast_hit_count: 1 */
  int mx = -1; /* line 19 slow_hit_count: 100, fast_hit_count: 1 */
  bool able = false; /* line 20 slow_hit_count: 100, fast_hit_count: 1 */
  bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos != 1) { /* line 22 slow_hit_count: 100, fast_hit_count: 1 */
    bool can = dp(pos + 1, need); /* line 23 slow_hit_count: 99, fast_hit_count: 0 */
    if (can) { /* line 24 slow_hit_count: 99, fast_hit_count: 0 */
      learnt[pos][need] = true; /* line 25 slow_hit_count: 99, fast_hit_count: 0 */
      mem[pos][need] = true; /* line 26 slow_hit_count: 99, fast_hit_count: 0 */
      mx = 0; /* line 27 slow_hit_count: 99, fast_hit_count: 0 */
      maxnum[pos] = mx; /* line 28 slow_hit_count: 99, fast_hit_count: 0 */
      return true; /* line 29 slow_hit_count: 99, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 9; i++) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    bool can = dp(pos + 1, need - i); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    if (can) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      learnt[pos][need] = true; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      mem[pos][need] = true; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
      mx = i; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
      maxnum[pos] = mx; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
      return true; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  learnt[pos][need] = true; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  mem[pos][need] = false; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
bool dpmin(int pos, int need) { /* line 46 slow_hit_count: 445510, fast_hit_count: 10 */
  if (pos > n) { /* line 47 slow_hit_count: 445510, fast_hit_count: 10 */
    if (need == 0) /* line 48 slow_hit_count: 8910, fast_hit_count: 9 */
      return true; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 51 slow_hit_count: 8909, fast_hit_count: 8 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  if (learntmin[pos][need]) return memmin[pos][need]; /* line 53 slow_hit_count: 436600, fast_hit_count: 1 */
  int mx = -1; /* line 54 slow_hit_count: 44551, fast_hit_count: 1 */
  bool able = false; /* line 55 slow_hit_count: 44551, fast_hit_count: 1 */
  bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 9; i >= 1; i--) { /* line 57 slow_hit_count: 445509, fast_hit_count: 9 */
    bool can = dpmin(pos + 1, need - i); /* line 58 slow_hit_count: 400959, fast_hit_count: 9 */
    if (can) { /* line 59 slow_hit_count: 400959, fast_hit_count: 9 */
      learntmin[pos][need] = true; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
      memmin[pos][need] = true; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
      mx = i; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
      minnum[pos] = mx; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
      return true; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos != 1) { /* line 67 slow_hit_count: 44550, fast_hit_count: 0 */
    bool can = dpmin(pos + 1, need); /* line 68 slow_hit_count: 44550, fast_hit_count: 0 */
    if (can) { /* line 69 slow_hit_count: 44550, fast_hit_count: 0 */
      learntmin[pos][need] = true; /* line 70 slow_hit_count: 99, fast_hit_count: 0 */
      memmin[pos][need] = true; /* line 71 slow_hit_count: 99, fast_hit_count: 0 */
      mx = 0; /* line 72 slow_hit_count: 99, fast_hit_count: 0 */
      minnum[pos] = mx; /* line 73 slow_hit_count: 99, fast_hit_count: 0 */
      return true; /* line 74 slow_hit_count: 99, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  learntmin[pos][need] = true; /* line 77 slow_hit_count: 44451, fast_hit_count: 0 */
  memmin[pos][need] = false; /* line 78 slow_hit_count: 44451, fast_hit_count: 0 */
  return false; /* line 79 slow_hit_count: 44451, fast_hit_count: 0 */
} /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  memset(mem, false, sizeof(mem)); /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  memset(learnt, false, sizeof(learnt)); /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  memset(learntmin, false, sizeof(learntmin)); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  memset(memmin, false, sizeof(memmin)); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  memset(maxnum, -1, sizeof(maxnum)); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  memset(minnum, -1, sizeof(minnum)); /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> sum; /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1 && sum == 0) { /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "0 0"; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  bool posmin = dp(1, sum); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  bool posmax = dpmin(1, sum); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  if (posmax && posmin) { /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 97 slow_hit_count: 101, fast_hit_count: 2 */
      cout << maxnum[i]; /* line 98 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
    cout << " "; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 101 slow_hit_count: 101, fast_hit_count: 2 */
      cout << minnum[i]; /* line 102 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  } else /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1 -1"; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 107 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C code and derive performance-characterizing invariants, we need to look into how the program handles inputs that cause slow execution. The slow input causes significantly more hits on certain lines, particularly inside the `dp` and `dpmin` functions, suggesting that these areas are potential bottlenecks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `dpmin` function is heavily hit with the slow input compared to the fast input, particularly at lines 46-79. This indicates that the recursion depth or the number of recursive calls is much higher in `dpmin`.
   - The `dp` function also shows increased hits, but not as excessively as `dpmin`.
   - The loops inside these functions (lines 32-41 and 57-66) contribute to increased hit counts due to multiple iterations needed to find a solution.

2. **Analysis of Code Structure:**
   - Both `dp` and `dpmin` functions use recursion to explore different combinations of digits that sum up to the specified `need`.
   - The slow input causes deep recursion and repeated calls, as the recursion attempts every possibility for digit placements to satisfy the conditions (especially when `m` is large).
   - The use of memoization (`learnt`, `mem`, `learntmin`, `memmin`) appears insufficient in reducing repeated calculations, potentially due to the nature of the input where `s` is very small compared to `m`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Description of Invariants:**

   - **Invariant 1:** "If the number of digits `m` is large and the sum `s` is small, the program may experience a significant slowdown. This is because the recursive function needs to explore a vast number of combinations to find viable digit arrangements, leading to deep recursion and high computational cost."
   
   - **Invariant 2:** "When attempting to find a number with the maximum or minimum digit sum, if the recursive exploration involves multiple branches and deep recursion, particularly when `m` is close to its upper limit and `s` is minimal, the execution time may increase significantly."
   
   - **Invariant 3:** "If memoization is insufficient due to limited `s` (sum of digits) compared to `m` (number of digits), the recursion in both `dp` and `dpmin` can result in repeated evaluations of similar states, causing performance degradation."

2. **General Observations:**
   - The recursive nature with high branching factors leads to increased execution time, especially when `s` is small, leading to many recursive calls with unbalanced needs.
   - The program relies on exploring all possible digit combinations, which becomes computationally expensive when the constraints of `m` and `s` are not well-balanced (e.g., large `m`, small `s`).

3. **Threshold Considerations:**
   - Given the constraints (`m <= 100` and `s <= 900`), the slowdown is most evident when `m` is at its maximum and `s` is minimal, requiring the exploration of many invalid or non-optimal paths.

By understanding these invariants, developers and testers can design input scenarios and optimizations that avoid triggering these slow paths, ensuring efficient execution under a wider range of conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.

Input

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.

Output

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers "-1 -1" (without the quotes).

Examples

Input

2 15


Output

69 96


Input

3 0


Output

-1 -1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checks

Based on the previously derived natural language performance-characterizing invariants, I will now produce C++ code to check these conditions at runtime.

1. **Invariant 1: Large `m` and Small `s`**

   This invariant suggests that when `m` is large and `s` is small, the recursion can become expensive. We will introduce a checker for this condition.

   ```cpp
   void check_large_m_small_s_invariant(int m, int s) {
       if (m > 90 && s < 10) { // example condition with threshold
           cerr << "Warning: Large m and small s invariant triggered - potential recursion depth issue!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Recursive Exploration with Many Branches**

   This invariant monitors if the recursive functions are exploring too many branches due to an unbalanced `m` and `s`.

   ```cpp
   void check_recursive_exploration_invariant(int m, int s) {
       if (m > 80 && s < 10) {
           cerr << "Warning: Recursive exploration invariant triggered - high branching factor possible!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Insufficient Memoization due to Limited `s`**

   If `s` is very small compared to `m`, memoization might not efficiently reduce repeated evaluations.

   ```cpp
   void check_memoization_efficiency_invariant(int m, int s) {
       if (m > 70 && s < 5) {
           cerr << "Warning: Memoization efficiency invariant triggered - repeated evaluations possible!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original C++ Program

Now, I will integrate these checker functions into the original C++ program at appropriate points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function prototypes for invariant checks
void check_large_m_small_s_invariant(int m, int s) {
    if (m > 90 && s < 10) {
        cerr << "Warning: Large m and small s invariant triggered - potential recursion depth issue!" << endl;
        abort();
    }
}

void check_recursive_exploration_invariant(int m, int s) {
    if (m > 80 && s < 10) {
        cerr << "Warning: Recursive exploration invariant triggered - high branching factor possible!" << endl;
        abort();
    }
}

void check_memoization_efficiency_invariant(int m, int s) {
    if (m > 70 && s < 5) {
        cerr << "Warning: Memoization efficiency invariant triggered - repeated evaluations possible!" << endl;
        abort();
    }
}

bool learnt[102][901];
bool learntmin[102][901];
bool mem[102][901];
bool memmin[102][901];
int maxnum[102];
int minnum[102];
int sum;
int n;

bool dp(int pos, int need) {
    if (pos > n) {
        if (need != 0)
            return false;
        else
            return true;
    }
    if (learnt[pos][need]) return mem[pos][need];
    int mx = -1;
    bool able = false;
    bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
    if (pos != 1) {
        bool can = dp(pos + 1, need);
        if (can) {
            learnt[pos][need] = true;
            mem[pos][need] = true;
            mx = 0;
            maxnum[pos] = mx;
            return true;
        }
    }
    for (int i = 1; i <= 9; i++) {
        bool can = dp(pos + 1, need - i);
        if (can) {
            learnt[pos][need] = true;
            mem[pos][need] = true;
            mx = i;
            maxnum[pos] = mx;
            return true;
        }
    }
    learnt[pos][need] = true;
    mem[pos][need] = false;
    return false;
}

bool dpmin(int pos, int need) {
    if (pos > n) {
        if (need == 0)
            return true;
        else
            return false;
    }
    if (learntmin[pos][need]) return memmin[pos][need];
    int mx = -1;
    bool able = false;
    bool can0, can1, can2, can3, can4, can5, can6, can7, can8, can9;
    for (int i = 9; i >= 1; i--) {
        bool can = dpmin(pos + 1, need - i);
        if (can) {
            learntmin[pos][need] = true;
            memmin[pos][need] = true;
            mx = i;
            minnum[pos] = mx;
            return true;
        }
    }
    if (pos != 1) {
        bool can = dpmin(pos + 1, need);
        if (can) {
            learntmin[pos][need] = true;
            memmin[pos][need] = true;
            mx = 0;
            minnum[pos] = mx;
            return true;
        }
    }
    learntmin[pos][need] = true;
    memmin[pos][need] = false;
    return false;
}

int main() {
    cin >> n >> sum;

    // Perform invariant checks after input reading
    check_large_m_small_s_invariant(n, sum);
    check_recursive_exploration_invariant(n, sum);
    check_memoization_efficiency_invariant(n, sum);

    memset(mem, false, sizeof(mem));
    memset(learnt, false, sizeof(learnt));
    memset(learntmin, false, sizeof(learntmin));
    memset(memmin, false, sizeof(memmin));
    memset(maxnum, -1, sizeof(maxnum));
    memset(minnum, -1, sizeof(minnum));

    if (n == 1 && sum == 0) {
        cout << "0 0";
        return 0;
    }
    bool posmin = dp(1, sum);
    bool posmax = dpmin(1, sum);
    if (posmax && posmin) {
        for (int i = 1; i <= n; i++) {
            cout << maxnum[i];
        }
        cout << " ";
        for (int i = 1; i <= n; i++) {
            cout << minnum[i];
        }
    } else
        cout << "-1 -1";
    return 0;
}
```

### Explanation

- **Invariant Checks**: The invariant checks are placed right after reading inputs to ensure they are evaluated before any computationally expensive operations begin.

- **Integration**: Each check verifies a potential performance bottleneck condition derived from the analysis in Phase 2, ensuring they reflect realistic triggers given the constraints.

These checks will help identify when the program might enter a slow execution path, allowing developers to diagnose and optimize these scenarios effectively.

