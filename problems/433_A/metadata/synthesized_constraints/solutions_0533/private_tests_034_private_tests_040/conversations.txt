system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/stack:102400000,102400000")
using namespace std;
int f_abs(int x) { return x < 0 ? -x : x; }
int lowbit(int x) { return (x & -x); }
int f_max(int a, int b) { return a > b ? a : b; }
int f_min(int a, int b) { return a < b ? a : b; }
int gcd(int a, int b) {
  while (int t = a % b) a = b, b = t;
  return b;
}
bool isdig(char ch) { return ch >= '0' && ch <= '9'; }
bool isup(char ch) { return ch >= 'A' && ch <= 'Z'; }
bool islow(char ch) { return ch >= 'a' && ch <= 'z'; }
void swap(int& a, int& b) {
  int t = a;
  a = b;
  b = t;
}
const int inf = 0x7fffffff;
const int mod = 1000000007;
const int N = 20003;
int n, a, b, sum, dp[N];
void init() {
  a = b = sum = 0;
  memset(dp, 0, sizeof(dp));
}
void get_data() {
  int t;
  for (int i = 0; i < n; ++i) {
    scanf("%d", &t);
    if (t == 100) {
      a++;
      sum++;
    } else {
      b++;
      sum += 2;
    }
  }
}
void solve() {
  int i, j;
  dp[0] = 1;
  for (i = 0; i < a; ++i) {
    for (j = 0; j < N - 1; ++j) {
      if (dp[j]) dp[j + 1] = 1;
    }
  }
  for (i = 0; i < b; ++i) {
    for (j = 0; j < N - 2; ++j) {
      if (dp[j]) dp[j + 2] = 1;
    }
  }
  if (sum % 2 == 0 && dp[sum / 2])
    puts("YES");
  else
    puts("NO");
}
int main() {
  while (~scanf("%d", &n)) {
    init();
    get_data();
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200


(G.2) Fast Input

32
200 200 200 100 100 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/stack:102400000,102400000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int f_abs(int x) { return x < 0 ? -x : x; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int lowbit(int x) { return (x & -x); } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int f_max(int a, int b) { return a > b ? a : b; } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int f_min(int a, int b) { return a < b ? a : b; } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int gcd(int a, int b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (int t = a % b) a = b, b = t; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return b; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
bool isdig(char ch) { return ch >= '0' && ch <= '9'; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
bool isup(char ch) { return ch >= 'A' && ch <= 'Z'; } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
bool islow(char ch) { return ch >= 'a' && ch <= 'z'; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void swap(int& a, int& b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  int t = a; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  a = b; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  b = t; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 0x7fffffff; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000000007; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 20003; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int n, a, b, sum, dp[N]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  a = b = sum = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0, sizeof(dp)); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
void get_data() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 30 slow_hit_count: 101, fast_hit_count: 33 */
    scanf("%d", &t); /* line 31 slow_hit_count: 100, fast_hit_count: 32 */
    if (t == 100) { /* line 32 slow_hit_count: 100, fast_hit_count: 32 */
      a++; /* line 33 slow_hit_count: 1, fast_hit_count: 4 */
      sum++; /* line 34 slow_hit_count: 1, fast_hit_count: 4 */
    } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      b++; /* line 36 slow_hit_count: 99, fast_hit_count: 28 */
      sum += 2; /* line 37 slow_hit_count: 99, fast_hit_count: 28 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
void solve() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0] = 1; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < a; ++i) { /* line 44 slow_hit_count: 2, fast_hit_count: 5 */
    for (j = 0; j < N - 1; ++j) { /* line 45 slow_hit_count: 20003, fast_hit_count: 80012 */
      if (dp[j]) dp[j + 1] = 1; /* line 46 slow_hit_count: 20002, fast_hit_count: 80008 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < b; ++i) { /* line 49 slow_hit_count: 100, fast_hit_count: 29 */
    for (j = 0; j < N - 2; ++j) { /* line 50 slow_hit_count: 1980198, fast_hit_count: 560056 */
      if (dp[j]) dp[j + 2] = 1; /* line 51 slow_hit_count: 1980099, fast_hit_count: 560028 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum % 2 == 0 && dp[sum / 2]) /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    puts("YES"); /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    puts("NO"); /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 59 slow_hit_count: 2, fast_hit_count: 2 */
  while (~scanf("%d", &n)) { /* line 60 slow_hit_count: 2, fast_hit_count: 2 */
    init(); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    get_data(); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    solve(); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance differences between the "fast" and "slow" inputs and derive performance-characterizing invariants, we need to examine the code and hit count data closely.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The hit counts for lines 50 and 51 are significantly higher for the slow input compared to the fast input.
   - This indicates that the nested loop starting at line 50 runs considerably more times for the slow input.

2. **Pinpointing Inefficient Code Segments**:
   - **Lines 49-53**: This loop iterates `b` times, and within it, the inner loop iterates `N - 2` times.
   - The line `if (dp[j]) dp[j + 2] = 1;` indicates a dynamic programming approach to solving the partition problem.
   - For the slow input, `b` (number of 200 gram apples) is 99, whereas for the fast input, `b` is only 29. This higher value of `b` leads to much more computation in the nested loop.

3. **Reason for Increased Hit Counts**:
   - For the slow input, having a large number of 200 gram apples increases the iterations in the inner loop significantly, leading to larger hit counts and slower execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Large Number of 200 Gram Apples**:
   - **Natural Language Description**: "If the number of 200 gram apples is significantly large, especially close to the maximum possible value of n, the nested loop processing these apples may lead to slow execution."
   - This is because the loop iterates `b` times, and a large value for `b` increases the computational cost dramatically due to the double iteration over `N`.

2. **Invariant 2: Sum and Dynamic Programming Array Utilization**:
   - **Natural Language Description**: "If the total weight is such that it heavily utilizes the dynamic programming array, with many updates occurring, the performance may degrade due to extensive state management in the array."
   - This relates to the extensive updates to the `dp` array when the sum of weights causes many states to be explored in the array.

3. **Invariant 3: Imbalance in Weight Distribution**:
   - **Natural Language Description**: "When the distribution of apple weights leads to a large imbalance handled by the dynamic programming approach, the state space grows, potentially slowing down the execution."
   - This is when there is an imbalance in the number of 100 gram and 200 gram apples that challenges the partitioning logic.

By keeping these invariants in mind, one can anticipate and detect slow performance scenarios in similar inputs without direct reliance on specific numeric values from the examples given.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets to check each of the previously derived performance-characterizing invariants:

1. **Invariant 1: Large Number of 200 Gram Apples**
   ```cpp
   void check_200_gram_apples_invariant(int b) {
       if (b > 80) { // Assuming a threshold indicating a large number of 200 gram apples
           cerr << "Warning: Large number of 200 gram apples may cause slow execution!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Sum and Dynamic Programming Array Utilization**
   ```cpp
   void check_dp_utilization_invariant(int sum) {
       if (sum > 150) { // Assuming a high sum can lead to large dp utilization
           cerr << "Warning: High sum value leading to extensive dp utilization!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Imbalance in Weight Distribution**
   ```cpp
   void check_weight_distribution_invariant(int a, int b) {
       if (a < 10 && b > 90) { // Checking for imbalance (arbitrary example thresholds)
           cerr << "Warning: Imbalanced weight distribution may cause slow execution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Here's the instrumented C++ code for the provided solution, with the performance checks added at appropriate locations:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/stack:102400000,102400000")
using namespace std;

const int N = 20003;
int n, a, b, sum, dp[N];

void init() {
  a = b = sum = 0;
  memset(dp, 0, sizeof(dp));
}

void get_data() {
  int t;
  for (int i = 0; i < n; ++i) {
    scanf("%d", &t);
    if (t == 100) {
      a++;
      sum++;
    } else {
      b++;
      sum += 2;
    }
  }
}

void check_200_gram_apples_invariant(int b) {
    if (b > 80) { // Threshold for large number of 200 gram apples
        cerr << "Warning: Large number of 200 gram apples may cause slow execution!" << endl;
        abort();
    }
}

void check_dp_utilization_invariant(int sum) {
    if (sum > 150) { // Threshold for high sum value
        cerr << "Warning: High sum value leading to extensive dp utilization!" << endl;
        abort();
    }
}

void check_weight_distribution_invariant(int a, int b) {
    if (a < 10 && b > 90) { // Threshold for weight distribution imbalance
        cerr << "Warning: Imbalanced weight distribution may cause slow execution!" << endl;
        abort();
    }
}

void solve() {
  int i, j;
  dp[0] = 1;
  
  check_200_gram_apples_invariant(b);
  check_dp_utilization_invariant(sum);
  check_weight_distribution_invariant(a, b);

  for (i = 0; i < a; ++i) {
    for (j = 0; j < N - 1; ++j) {
      if (dp[j]) dp[j + 1] = 1;
    }
  }
  for (i = 0; i < b; ++i) {
    for (j = 0; j < N - 2; ++j) {
      if (dp[j]) dp[j + 2] = 1;
    }
  }
  if (sum % 2 == 0 && dp[sum / 2])
    puts("YES");
  else
    puts("NO");
}

int main() {
  while (~scanf("%d", &n)) {
    init();
    get_data();
    solve();
  }
  return 0;
}
```

**Explanation of the Instrumented Code:**

- **`check_200_gram_apples_invariant`:** Added after computing the number of 200 gram apples (`b`).
- **`check_dp_utilization_invariant`:** Added before the dynamic programming loops to ensure `sum` is not excessively large.
- **`check_weight_distribution_invariant`:** Added to detect significant imbalance between the number of 100 gram and 200 gram apples.

These checks are strategically inserted before performance-critical loops and operations to help a fuzzer or developer quickly identify conditions leading to slow execution.

