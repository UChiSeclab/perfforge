system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, sum = 0, ca = 0, cb = 0;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    if (x == 100)
      ++ca;
    else
      ++cb;
    sum += x;
  }
  if (sum % 2 == 1)
    cout << "NO\n";
  else {
    bool ok = 0;
    for (int i = 0; i <= ca; ++i)
      for (int j = 0; j <= cb; ++j)
        if (i * 100 + j * 200 == sum / 2) ok = 1;
    if (ok)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
100 100 200 200 100 200 100 100 100 100 100 100 200 100 200 200 200 100 100 200 200 200 200 200 100 200 100 200 100 100 100 200 100 100 200 100 200 100 100 100 200 200 100 100 100 200 200 200 200 200 100 200 200 100 100 100 100 200 100 100 200 100 100 100 100 200 200 200 100 200 100 200 200 200 100 100 200 200 200 200 100 200 100 200 200 100 200 100 200 200 200 200 200 200 100 100 100 200 200 100


(G.2) Fast Input

4
100 100 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, sum = 0, ca = 0, cb = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 6 slow_hit_count: 101, fast_hit_count: 5 */
    int x; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 8 slow_hit_count: 100, fast_hit_count: 4 */
    if (x == 100) /* line 9 slow_hit_count: 100, fast_hit_count: 4 */
      ++ca; /* line 10 slow_hit_count: 49, fast_hit_count: 2 */
    else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      ++cb; /* line 12 slow_hit_count: 51, fast_hit_count: 2 */
    sum += x; /* line 13 slow_hit_count: 100, fast_hit_count: 4 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum % 2 == 1) /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO\n"; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    bool ok = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i <= ca; ++i) /* line 19 slow_hit_count: 51, fast_hit_count: 4 */
      for (int j = 0; j <= cb; ++j) /* line 20 slow_hit_count: 2650, fast_hit_count: 12 */
        if (i * 100 + j * 200 == sum / 2) ok = 1; /* line 21 slow_hit_count: 2600, fast_hit_count: 9 */
    if (ok) /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "YES\n"; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO\n"; /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To understand the performance bottlenecks in the given C code, let's analyze it based on the line-level hit counts for both the slow and fast inputs. We will then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Hit Analysis**:
   - **Lines 19-21** are the most hit in the slow input compared to the fast input.
     - **Line 19 (`for (int i = 0; i <= ca; ++i)`)**: Hit 51 times for the slow input vs. 4 times for the fast input.
     - **Line 20 (`for (int j = 0; j <= cb; ++j)`)**: Hit 2650 times for the slow input vs. 12 times for the fast input.
     - **Line 21 (`if (i * 100 + j * 200 == sum / 2)`)**: Hit 2600 times for the slow input vs. 9 times for the fast input.
   - The nested loop structure indicates that the algorithm is testing combinations of `ca` (count of 100g apples) and `cb` (count of 200g apples) to find a balance.

2. **Interaction with Data Structures and Logic**:
   - The hit counts suggest that the nested loops are executed many more times for the slow input, likely due to a higher number of combinations evaluated to achieve a balanced split.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the findings above, here are the natural language invariants describing conditions under which the program slows down:

1. **Nested Loop Combinations**:
   - **Invariant Description**: "If there is a large imbalance in the count of 100g apples (`ca`) and 200g apples (`cb`), leading to many iterations of a nested loop to find a balanced distribution, the program may slow down."
   - **Explanation**: The program attempts to find combinations that sum up to half the total weight, which can lead to many iterations, especially if there's a large number of either type of apple.

2. **Combinatorial Search Complexity**:
   - **Invariant Description**: "When `n` approaches its upper limit (close to 100), and the distribution of apple weights is such that achieving an exact balance requires checking many combinations, the program may experience a slowdown due to increased computational complexity."
   - **Explanation**: As `n` increases, the number of possible combinations examined in the nested loops increases, particularly when `sum` is even but the division is non-trivial, requiring extensive searching.

3. **Inefficiency in Finding Balance**:
   - **Invariant Description**: "If the sum of apple weights is even but a straightforward halving strategy cannot be applied due to the specific distribution of `100`g and `200`g apples, the effort to find an exact balance can lead to excessive iterations."
   - **Explanation**: The recursive nature of trying to balance the apples can become inefficient if the distribution doesn’t naturally lend itself to a quick division, requiring exhaustive testing.

By focusing on these performance triggers, a fuzzer could be designed to detect these scenarios, helping to identify potential slow cases without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

To translate the natural language invariants into runtime checks, we will create conditions that align with the identified bottlenecks, using specific checks in the C++ code.

```cpp
// Check for large imbalance in count of apples
void check_imbalance_invariant(int ca, int cb) {
    if (ca > 50 || cb > 50) {
        cerr << "Warning: Imbalance invariant triggered - large imbalance in apple counts" << endl;
        abort();
    }
}

// Check for nearing maximum input size with complex combinations
void check_complexity_invariant(int n, int ca, int cb) {
    if (n > 90 && abs(ca - cb) > 30) {
        cerr << "Warning: Complexity invariant triggered - nearing max input with complex combinations" << endl;
        abort();
    }
}

// Check for inefficient balance finding due to specific distribution
void check_distribution_invariant(int ca, int cb, int sum) {
    if ((sum % 200 == 0 && cb == 0) || (sum % 100 == 0 && ca == 0)) {
        cerr << "Warning: Distribution invariant triggered - inefficient balance due to specific distribution" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original C++ Program

Here is the original program, now instrumented with the performance-checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for large imbalance in count of apples
void check_imbalance_invariant(int ca, int cb) {
    if (ca > 50 || cb > 50) {
        cerr << "Warning: Imbalance invariant triggered - large imbalance in apple counts" << endl;
        abort();
    }
}

// Check for nearing maximum input size with complex combinations
void check_complexity_invariant(int n, int ca, int cb) {
    if (n > 90 && abs(ca - cb) > 30) {
        cerr << "Warning: Complexity invariant triggered - nearing max input with complex combinations" << endl;
        abort();
    }
}

// Check for inefficient balance finding due to specific distribution
void check_distribution_invariant(int ca, int cb, int sum) {
    if ((sum % 200 == 0 && cb == 0) || (sum % 100 == 0 && ca == 0)) {
        cerr << "Warning: Distribution invariant triggered - inefficient balance due to specific distribution" << endl;
        abort();
    }
}

int main() {
    int n, sum = 0, ca = 0, cb = 0;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        if (x == 100)
            ++ca;
        else
            ++cb;
        sum += x;
    }
    
    // Place checks after collecting input data
    check_imbalance_invariant(ca, cb);
    check_complexity_invariant(n, ca, cb);
    check_distribution_invariant(ca, cb, sum);

    if (sum % 2 == 1)
        cout << "NO\n";
    else {
        bool ok = 0;
        for (int i = 0; i <= ca; ++i)
            for (int j = 0; j <= cb; ++j)
                if (i * 100 + j * 200 == sum / 2) ok = 1;
        if (ok)
            cout << "YES\n";
        else
            cout << "NO\n";
    }
}
```

### Comments on Integrated Checks:
- **Imbalance Check**: This condition checks for a significant imbalance in the number of 100g vs 200g apples, which could cause excessive iterations in the nested loop.
- **Complexity Check**: This condition is triggered when `n` is close to the maximum and the difference between `ca` and `cb` is large, indicating a complex scenario.
- **Distribution Check**: This checks for specific distributions where only one type of apple is needed to achieve an even sum, which could be inefficient to resolve.

These checks are designed to be simple yet effective at identifying input conditions that could lead to inefficient computations.

