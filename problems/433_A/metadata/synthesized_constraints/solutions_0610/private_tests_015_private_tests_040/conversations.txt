system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, sum, f[10005], a[105];
int main() {
  scanf("%d", &n);
  for (register int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
    sum += a[i];
  }
  sum /= 2;
  for (register int i = 1; i <= n; i++)
    for (register int j = sum; j >= a[i]; j--)
      f[j] = max(f[j], f[j - a[i]] + a[i]);
  if (f[sum] == sum)
    printf("YES\n");
  else
    printf("NO\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200


(G.2) Fast Input

32
200 200 200 100 100 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, sum, f[10005], a[105]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= n; i++) { /* line 6 slow_hit_count: 101, fast_hit_count: 33 */
    scanf("%d", &a[i]); /* line 7 slow_hit_count: 100, fast_hit_count: 32 */
    sum += a[i]; /* line 8 slow_hit_count: 100, fast_hit_count: 32 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  sum /= 2; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= n; i++) /* line 11 slow_hit_count: 101, fast_hit_count: 33 */
    for (register int j = sum; j >= a[i]; j--) /* line 12 slow_hit_count: 980200, fast_hit_count: 90064 */
      f[j] = max(f[j], f[j - a[i]] + a[i]); /* line 13 slow_hit_count: 980100, fast_hit_count: 90032 */
  if (f[sum] == sum) /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    printf("YES\n"); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    printf("NO\n"); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the provided C code, let's analyze the hit counts and identify the expensive operations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The loops at lines 11 and 12 have significantly higher hit counts in the slow input (980,200 hits) compared to the fast input (90,064 hits). This indicates that these nested loops are the primary source of the slowdown.
   - Specifically, the inner loop (lines 12-13) is executed much more frequently due to a larger value of `sum` and possibly the values in the array `a`.

2. **Interaction with Data Structures**:
   - The algorithm attempts to solve a subset sum problem, checking all possible weights up to half the total weight (`sum`). The use of a dynamic programming approach with the array `f` can lead to many repeated calculations if the conditions are not optimal.

3. **Input Constraints & Observations**:
   - With `n` up to 100, the array `a` can contain many `200`s, leading to a large initial `sum` (e.g., 10,000). This results in extensive iterations in the loops, especially when the array is dominated by larger weights, making it challenging to find partitions.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Sum from Large Weights**:
   - **Natural Language Invariant**: "If the input consists predominantly of apples weighing 200 grams, causing the target weight (`sum`) to approach its maximum possible value, the program will perform extensive calculations as it processes potential partitions."

2. **Imbalanced Distribution of Weights**:
   - **Natural Language Invariant**: "When there is an imbalance in the count of apples weighing 100 grams versus 200 grams, leading to a high initial target sum, the nested loops will iterate extensively over potential sums, slowing down execution."

3. **Potential Inefficiency due to High Loop Iterations**:
   - **Natural Language Invariant**: "If the combined weight of the apples frequently reaches the upper threshold, the nested loop executes repeatedly, resulting in a performance bottleneck."

These invariants reflect the conditions under which the program is likely to slow down based on the composition of the input data and the algorithm's structure. They help identify potential slow paths without relying on specific input values, using categories like dominance of large weights and imbalance in weight distribution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we convert the performance-characterizing invariants into C++ code that checks these conditions.

### Phase 3: Implementing Performance-Characterizing Invariants in C++ Checkers

1. **Invariant: High Sum from Large Weights**
   ```cpp
   void check_high_sum_condition(int sum, int n) {
       if (sum > (n * 200 / 2) * 0.9) {  // 90% of maximum possible sum
           cerr << "Warning: Performance bottleneck condition triggered due to high sum!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Imbalanced Distribution of Weights**
   ```cpp
   void check_imbalance_condition(int count100, int count200, int n) {
       if (count100 < n * 0.1 && count200 > n * 0.9) {  // Imbalance towards 200s
           cerr << "Warning: Performance bottleneck condition triggered due to imbalance in weights!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Potential Inefficiency due to High Loop Iterations**
   ```cpp
   void check_high_iterations_condition(int sum) {
       if (sum > 9000) {  // Arbitrary threshold indicating potential for high iterations
           cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Code

Now, let's integrate these checkers into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high sum condition
void check_high_sum_condition(int sum, int n) {
    if (sum > (n * 200 / 2) * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered due to high sum!" << endl;
        abort();
    }
}

// Checker for imbalance in weights
void check_imbalance_condition(int count100, int count200, int n) {
    if (count100 < n * 0.1 && count200 > n * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalance in weights!" << endl;
        abort();
    }
}

// Checker for high iteration potential
void check_high_iterations_condition(int sum) {
    if (sum > 9000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
        abort();
    }
}

int main() {
    int n, sum = 0, f[10005] = {0}, a[105];
    int count100 = 0, count200 = 0;

    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        sum += a[i];
        if (a[i] == 100) count100++;
        else if (a[i] == 200) count200++;
    }

    // Check for high sum condition
    check_high_sum_condition(sum, n);

    // Check for imbalance in weights
    check_imbalance_condition(count100, count200, n);

    // Calculate the target sum for partitioning
    sum /= 2;

    // Check for potential high iterations
    check_high_iterations_condition(sum);

    for (int i = 1; i <= n; i++) {
        for (int j = sum; j >= a[i]; j--) {
            f[j] = max(f[j], f[j - a[i]] + a[i]);
        }
    }

    if (f[sum] == sum) {
        printf("YES\n");
    } else {
        printf("NO\n");
    }

    return 0;
}
```

### Explanation

- **Checkers Integration**: The checkers are placed after reading the input and before the main computation loops to ensure they don't add overhead during critical operation phases.
- **Check Conditions**: Each checker covers a specific condition to prevent performance degradation under certain input scenarios.
- **Abort on Trigger**: The program will abort if any performance bottleneck conditions are detected, which helps identify slow paths during testing or fuzzing.

