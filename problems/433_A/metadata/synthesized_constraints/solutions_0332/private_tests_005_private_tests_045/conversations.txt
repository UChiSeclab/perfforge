system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, x, y, tmp;
  bool flag = false;
  cin >> n;
  int apple[n];
  for (int i = 0; i < n; i++) cin >> apple[i];
  x = apple[0];
  for (int i = 1; i < n; i++) {
    y = apple[i];
    for (int j = 1; j < n; j++) {
      if (j == i) continue;
      tmp = apple[j];
      if (x <= y)
        x += tmp;
      else
        y += tmp;
    }
    if (x == y) {
      cout << "YES" << endl;
      flag = true;
      break;
    } else {
      x = apple[0];
      flag = false;
    }
  }
  if (!flag) cout << "NO" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
100 100 200 200 100 200 100 100 100 100 100 100 200 100 200 200 200 100 100 200 200 200 200 200 100 200 100 200 100 100 100 200 100 100 200 100 200 100 100 100 200 200 100 100 100 200 200 200 200 200 100 200 200 100 100 100 100 200 100 100 200 100 100 100 100 200 200 200 100 200 100 200 200 200 100 100 200 200 200 200 100 200 100 200 200 100 200 100 200 200 200 200 200 200 100 100 100 200 200 100


(G.2) Fast Input

4
100 100 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y, tmp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  bool flag = false; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int apple[n]; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> apple[i]; /* line 8 slow_hit_count: 101, fast_hit_count: 5 */
  x = apple[0]; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; i++) { /* line 10 slow_hit_count: 100, fast_hit_count: 1 */
    y = apple[i]; /* line 11 slow_hit_count: 99, fast_hit_count: 1 */
    for (int j = 1; j < n; j++) { /* line 12 slow_hit_count: 9900, fast_hit_count: 4 */
      if (j == i) continue; /* line 13 slow_hit_count: 9801, fast_hit_count: 3 */
      tmp = apple[j]; /* line 14 slow_hit_count: 9702, fast_hit_count: 2 */
      if (x <= y) /* line 15 slow_hit_count: 9702, fast_hit_count: 2 */
        x += tmp; /* line 16 slow_hit_count: 4932, fast_hit_count: 1 */
      else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        y += tmp; /* line 18 slow_hit_count: 4770, fast_hit_count: 1 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    if (x == y) { /* line 20 slow_hit_count: 99, fast_hit_count: 1 */
      cout << "YES" << endl; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
      flag = true; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      x = apple[0]; /* line 25 slow_hit_count: 99, fast_hit_count: 0 */
      flag = false; /* line 26 slow_hit_count: 99, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  if (!flag) cout << "NO" << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided problem statement, code, and hit count analysis, let's go through the tasks and derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**

   - The loop starting at line 10 (`for (int i = 1; i < n; i++)`) is executed 100 times for the slow input compared to only once for the fast input.
   - The nested loop at line 12 (`for (int j = 1; j < n; j++)`) is executed 9900 times for the slow input compared to just 4 times for the fast input.
   - The conditional statement at line 13 (`if (j == i) continue;`) is executed 9801 times, indicating that the program often skips operations in the inner loop.
   - Lines 15 to 18 are executed approximately 9702 times for the slow input, with the decision to increment `x` or `y` being split almost evenly.

2. **Inference on Line Interaction with Data Structures:**

   - The algorithm appears to compare combinations of apple distributions (represented by the `x` and `y` variables) to find an equal division of apple weights.
   - The inefficient performance arises from the need to repeatedly evaluate the potential apple distribution for all possible pairs `(i, j)`, attempting to find a balance between the two friends.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant Related to Nested Loop Exhaustion:**

   - **Natural Language Description:** "If the number of apples `n` is large and the weights involve a complex combination of 100g and 200g apples, the program may enter a slow path due to exhaustive pairwise checking."

2. **Invariant Related to Absence of Immediate Balance:**

   - **Natural Language Description:** "If the initial setup of apples does not produce a quick balance using one or two apples, the nested loop will be heavily utilized, leading to performance degradation."

3. **Invariant Related to Weight Distribution Complexity:**

   - **Natural Language Description:** "When the distribution of apple weights requires exploring many combinations due to lack of direct symmetry or balance (e.g., equal numbers of each weight), the algorithm will become inefficient because it resorts to brute force attempts to balance weights."

These invariants provide insights into why the slow input takes significantly longer despite similar constraints. They abstract the conditions triggering slowdowns and are useful for future input configurations that might cause similar performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing C++ Checkers for Natural Language Invariants

Based on the performance-characterizing invariants derived earlier, here are the C++ checkers for each invariant:

1. **Checker for Nested Loop Exhaustion:**

   This checker identifies when the program is about to engage in exhaustive pairwise checking due to a large number of apples and complex weight combinations.

   ```cpp
   void check_exhaustive_combination_invariant(int n, const vector<int>& apple) {
       int count100 = count(apple.begin(), apple.end(), 100);
       int count200 = n - count100;
       if (n > 50 && abs(count100 - count200) > 10) {
           cerr << "Warning: Performance bottleneck - exhaustive combinations likely due to imbalanced weights." << endl;
           abort();
       }
   }
   ```

2. **Checker for Absence of Immediate Balance:**

   This checker triggers when no quick balance can be achieved, causing the nested loops to be heavily utilized.

   ```cpp
   void check_initial_balance_invariant(int totalWeight) {
       if (totalWeight % 200 != 0) {
           cerr << "Warning: Performance bottleneck - no immediate balance possible due to indivisible total weight." << endl;
           abort();
       }
   }
   ```

3. **Checker for Weight Distribution Complexity:**

   This checker identifies when the distribution is such that it requires many combinations to be evaluated due to lack of symmetry.

   ```cpp
   void check_complex_distribution_invariant(int n, const vector<int>& apple) {
       int count100 = count(apple.begin(), apple.end(), 100);
       int count200 = n - count100;
       if (abs(count100 - count200) > 20) {
           cerr << "Warning: Performance bottleneck - complex weight distribution requiring many combinations." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the C++ Program

Now, integrate these checkers into the original C++ program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check exhaustive combination conditions
void check_exhaustive_combination_invariant(int n, const vector<int>& apple) {
    int count100 = count(apple.begin(), apple.end(), 100);
    int count200 = n - count100;
    if (n > 50 && abs(count100 - count200) > 10) {
        cerr << "Warning: Performance bottleneck - exhaustive combinations likely due to imbalanced weights." << endl;
        abort();
    }
}

// Function to check if a quick initial balance is impossible
void check_initial_balance_invariant(int totalWeight) {
    if (totalWeight % 200 != 0) {
        cerr << "Warning: Performance bottleneck - no immediate balance possible due to indivisible total weight." << endl;
        abort();
    }
}

// Function to check complex weight distribution conditions
void check_complex_distribution_invariant(int n, const vector<int>& apple) {
    int count100 = count(apple.begin(), apple.end(), 100);
    int count200 = n - count100;
    if (abs(count100 - count200) > 20) {
        cerr << "Warning: Performance bottleneck - complex weight distribution requiring many combinations." << endl;
        abort();
    }
}

int main() {
    int n, x, y, tmp;
    bool flag = false;
    cin >> n;
    vector<int> apple(n);
    for (int i = 0; i < n; i++) cin >> apple[i];
    
    // Calculate total weight and check for immediate balance impossibility
    int totalWeight = accumulate(apple.begin(), apple.end(), 0);
    check_initial_balance_invariant(totalWeight);

    // Check for complex distribution conditions
    check_complex_distribution_invariant(n, apple);

    x = apple[0];
    for (int i = 1; i < n; i++) {
        y = apple[i];
        for (int j = 1; j < n; j++) {
            if (j == i) continue;
            tmp = apple[j];
            if (x <= y)
                x += tmp;
            else
                y += tmp;
        }
        if (x == y) {
            cout << "YES" << endl;
            flag = true;
            break;
        } else {
            x = apple[0];
            flag = false;
        }
    }
    if (!flag) cout << "NO" << endl;
    return 0;
}
```

### Explanation:

- **Check Placement:** The checks are placed right after reading inputs and calculating initial variables, avoiding performance overhead in the nested loops.
- **Rationale:** These checks are designed to detect early conditions that are indicative of potential performance bottlenecks, providing a warning and stopping execution if these conditions are met. This is useful for debugging and optimizing performance-critical paths.

