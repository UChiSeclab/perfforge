system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  while (scanf("%d", &n) != EOF) {
    int sum = 0, sum1 = 0, sum2 = 0;
    for (int i = 0; i < n; i++) {
      int k;
      cin >> k;
      sum += k;
      if (k == 100) {
        sum1++;
      } else {
        sum2++;
      }
    }
    if (n == 1) {
      puts("NO");
      continue;
    }
    if (sum % 2 != 0) {
      puts("NO");
      continue;
    }
    int k = sum / 2;
    int flag = 0;
    for (int i = 0; i <= sum1; i++) {
      for (int j = 0; j <= sum2; j++) {
        if (i * 100 + j * 200 == k) {
          flag = 1;
          break;
        }
      }
      if (flag) break;
    }
    if (flag) {
      puts("YES");
    } else {
      puts("NO");
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
100 100 200 200 100 200 100 100 100 100 100 100 200 100 200 200 200 100 100 200 200 200 200 200 100 200 100 200 100 100 100 200 100 100 200 100 200 100 100 100 200 200 100 100 100 200 200 200 200 200 100 200 200 100 100 100 100 200 100 100 200 100 100 100 100 200 200 200 100 200 100 200 200 200 100 100 200 200 200 200 100 200 100 200 200 100 200 100 200 200 200 200 200 200 100 100 100 200 200 100


(G.2) Fast Input

4
100 100 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 2, fast_hit_count: 2 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d", &n) != EOF) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
    int sum = 0, sum1 = 0, sum2 = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 101, fast_hit_count: 5 */
      int k; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> k; /* line 9 slow_hit_count: 100, fast_hit_count: 4 */
      sum += k; /* line 10 slow_hit_count: 100, fast_hit_count: 4 */
      if (k == 100) { /* line 11 slow_hit_count: 100, fast_hit_count: 4 */
        sum1++; /* line 12 slow_hit_count: 49, fast_hit_count: 2 */
      } else { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
        sum2++; /* line 14 slow_hit_count: 51, fast_hit_count: 2 */
      } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (n == 1) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      puts("NO"); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum % 2 != 0) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
      puts("NO"); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    int k = sum / 2; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    int flag = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i <= sum1; i++) { /* line 27 slow_hit_count: 51, fast_hit_count: 2 */
      for (int j = 0; j <= sum2; j++) { /* line 28 slow_hit_count: 2650, fast_hit_count: 6 */
        if (i * 100 + j * 200 == k) { /* line 29 slow_hit_count: 2600, fast_hit_count: 5 */
          flag = 1; /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
          break; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      if (flag) break; /* line 34 slow_hit_count: 50, fast_hit_count: 2 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
      puts("YES"); /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
    } else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      puts("NO"); /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze why the provided C program runs more slowly with the slow input compared to the fast input, let's break down the code and hit count information:

### Phase 1: Identifying Expensive Code Segments

1. **Hit Count Analysis**: 
   - The nested loops at lines 27-34 are significantly more frequently hit in the slow run compared to the fast run:
     - Outer loop (line 27): 51 hits in slow input vs. 2 hits in fast input.
     - Inner loop (line 28): 2650 hits in slow input vs. 6 hits in fast input.
     - Conditional check inside the inner loop (line 29): 2600 hits in slow run vs. 5 hits in fast run.
   
2. **Loop Analysis**: 
   - The loops iterate over the counts of 100g and 200g apples (`sum1` and `sum2`). The goal is to find a combination where the total weight equals half of the total sum of all apples.
   - The number of iterations in these loops is directly related to the combination of `sum1` and `sum2`, i.e., the number of apples weighing 100 grams and 200 grams, respectively.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants describing conditions that may lead to slow execution:

1. **Invariant on Apple Count and Combination**:
   - **Natural Language Description**: "The program may experience a slowdown when there are many combinations of 100g and 200g apples to check, especially when the sum of 100g and 200g apples is high. This is because the solution space becomes larger, requiring more iterations to check for a valid division."
   - **Condition**: If `sum1` (number of 100g apples) and `sum2` (number of 200g apples) together create a large search space, particularly when both counts are close to `n/2`, the number of iterations increases, potentially slowing down the program.

2. **Invariant on Balanced Weight Distribution**:
   - **Natural Language Description**: "Slow performance can occur if the total weight of the apples is even, but the distribution between 100g and 200g apples forms a complex pattern that requires many checks to determine if an equal division is possible."
   - **Condition**: When the total weight is evenly divisible by 2, but there isn't an obvious distribution pattern (e.g., equal numbers of 100g and 200g apples), the program must exhaustively check many combinations to find a solution.

These invariants suggest that the complexity arises from needing to explore a large solution space due to the constraints on combinations of apple weights. Therefore, scenarios where the solution space is complex or large are more likely to trigger slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checker Code

Here I'll write code snippets that implement the performance characterizing invariants in C++ as runtime checks.

#### Invariant 1: Apple Count and Combination
**Natural Language Description**: The program may experience a slowdown when there are many combinations of 100g and 200g apples to check, especially when the sum of 100g and 200g apples is high.

```cpp
void check_apple_combination_invariant(int sum1, int sum2) {
    if ((sum1 + sum2) > 50) {  // This threshold is arbitrary, based on the combination space being large
        cerr << "Warning: Performance bottleneck condition triggered due to large combination space!" << endl;
        abort();
    }
}
```

#### Invariant 2: Balanced Weight Distribution
**Natural Language Description**: Slow performance can occur if the total weight of the apples is even, but the distribution between 100g and 200g apples forms a complex pattern that requires many checks to determine if an equal division is possible.

```cpp
void check_balanced_distribution_invariant(int sum1, int sum2, int totalWeight) {
    if ((totalWeight % 2 == 0) && (sum1 > 0 && sum2 > 0) && abs(sum1 - sum2) < 10) {  // Threshold for arbitrary complexity
        cerr << "Warning: Performance bottleneck condition triggered due to complex distribution pattern!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code with the Original Program

Below is the instrumented C++ program incorporating the invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large combination space
void check_apple_combination_invariant(int sum1, int sum2) {
    if ((sum1 + sum2) > 50) {  // This threshold is arbitrary, based on the combination space being large
        cerr << "Warning: Performance bottleneck condition triggered due to large combination space!" << endl;
        abort();
    }
}

// Checker function for complex distribution pattern
void check_balanced_distribution_invariant(int sum1, int sum2, int totalWeight) {
    if ((totalWeight % 2 == 0) && (sum1 > 0 && sum2 > 0) && abs(sum1 - sum2) < 10) {  // Threshold for arbitrary complexity
        cerr << "Warning: Performance bottleneck condition triggered due to complex distribution pattern!" << endl;
        abort();
    }
}

int main() {
    int n;
    while (scanf("%d", &n) != EOF) {
        int sum = 0, sum1 = 0, sum2 = 0;
        for (int i = 0; i < n; i++) {
            int k;
            cin >> k;
            sum += k;
            if (k == 100) {
                sum1++;
            } else {
                sum2++;
            }
        }
        
        // Insert checker for large combination space
        check_apple_combination_invariant(sum1, sum2);

        if (n == 1) {
            puts("NO");
            continue;
        }
        if (sum % 2 != 0) {
            puts("NO");
            continue;
        }
        
        int k = sum / 2;
        int flag = 0;
        
        // Insert checker for complex distribution pattern
        check_balanced_distribution_invariant(sum1, sum2, sum);
        
        for (int i = 0; i <= sum1; i++) {
            for (int j = 0; j <= sum2; j++) {
                if (i * 100 + j * 200 == k) {
                    flag = 1;
                    break;
                }
            }
            if (flag) break;
        }
        
        if (flag) {
            puts("YES");
        } else {
            puts("NO");
        }
    }
    return 0;
}
```

### Explanation:
- **Checker Integration**: The invariant checks are placed after computing `sum1`, `sum2`, and `sum` to avoid adding overhead inside the loops.
- **Purpose**: The checks serve to warn and terminate execution when the program encounters scenarios that are likely to lead to performance bottlenecks. This can be useful for testing and debugging purposes to catch potential inefficiencies early.
- **Thresholds**: The thresholds are arbitrary but chosen based on reasonable assumptions about what constitutes a large or complex combination space within the problem's constraints. Adjustments may be necessary based on further testing and profiling.

