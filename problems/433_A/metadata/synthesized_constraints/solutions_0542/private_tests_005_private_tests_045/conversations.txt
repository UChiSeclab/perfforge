system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAX = 205;
int a[MAX];
bool dp[MAX];
int main() {
  int n;
  scanf("%d", &n);
  int odd = 0;
  int sum = 0;
  for (int i = 1; i <= n; ++i) {
    scanf("%d", &a[i]);
    a[i] /= 100;
    sum += a[i];
  }
  dp[0] = 1;
  for (int i = 1; i <= n; ++i) {
    for (int j = 200; j >= 1; --j) {
      if (dp[j - a[i]]) dp[j] = 1;
    }
  }
  if (sum % 2 || !dp[sum / 2])
    printf("NO\n");
  else
    printf("YES\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
100 100 200 200 100 200 100 100 100 100 100 100 200 100 200 200 200 100 100 200 200 200 200 200 100 200 100 200 100 100 100 200 100 100 200 100 200 100 100 100 200 200 100 100 100 200 200 200 200 200 100 200 200 100 100 100 100 200 100 100 200 100 100 100 100 200 200 200 100 200 100 200 200 200 100 100 200 200 200 200 100 200 100 200 200 100 200 100 200 200 200 200 200 200 100 100 100 200 200 100


(G.2) Fast Input

4
100 100 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 205; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAX]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool dp[MAX]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int odd = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int sum = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 11 slow_hit_count: 101, fast_hit_count: 5 */
    scanf("%d", &a[i]); /* line 12 slow_hit_count: 100, fast_hit_count: 4 */
    a[i] /= 100; /* line 13 slow_hit_count: 100, fast_hit_count: 4 */
    sum += a[i]; /* line 14 slow_hit_count: 100, fast_hit_count: 4 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0] = 1; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 17 slow_hit_count: 101, fast_hit_count: 5 */
    for (int j = 200; j >= 1; --j) { /* line 18 slow_hit_count: 20100, fast_hit_count: 804 */
      if (dp[j - a[i]]) dp[j] = 1; /* line 19 slow_hit_count: 20000, fast_hit_count: 800 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (sum % 2 || !dp[sum / 2]) /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    printf("NO\n"); /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    printf("YES\n"); /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issue in the C program provided for splitting apples, we must analyze the code's behavior, especially focusing on the differences between the fast and slow inputs based on the hit count information. Let's go through the analysis and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Key Observations
1. **Nested Loop Analysis**:
   - The nested loop structure on lines 17-19 is where most of the hit counts concentrate, especially notable with the slow input.
   - The slow input causes the inner loop to execute 20,100 times, while the fast input only executes 804 times.

2. **Data Dependency**:
   - The outer loop iterates over the number of apples `n` (up to 100), while the inner loop iterates over potential sum values up to 200.
   - The condition `if (dp[j - a[i]]) dp[j] = 1;` suggests that the computation complexity is heavily influenced by the distribution and count of `100`-gram and `200`-gram apples.

3. **Effect of Sum Calculation**:
   - The sum of apple weights (multiplied by the loop mechanism) appears to have a significant role in determining execution time, especially when the sum is large and requires many updates to the `dp` array.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can define the following conditions or invariants that are likely to trigger the slow performance paths:

#### Performance Invariants

1. **High Count of Apples and Maximum Possible Weight Combinations**:
   - **Natural Language Description**: "If the number of apples is close to the upper constraint (n ≈ 100) and the distribution includes a large number of `200`-gram apples, the exhaustive checks for equal division may lead to significant slowdowns."
   
   This captures the scenario where the possibilities for splitting the total weight increase the workload on the dynamic programming approach.

2. **Complex Weight Distributions**:
   - **Natural Language Description**: "When the weight total is large and consists of many heavy (200 g) apples, the number of potential combinations to check for equal distribution grows, increasing execution time."
   
   This reflects that large sums, particularly those that necessitate exploring many partition possibilities, increase the time complexity sharply.

3. **Dynamic Programming Array Saturation**:
   - **Natural Language Description**: "If a broader range of possible weight sums is activated in the dynamic programming array due to varied apple combinations, the checking process becomes more extensive, slowing down the execution."
   
   This condition arises when the `dp` array is densely populated with possible sums, leading to more computations during array updates.

By understanding these invariants, developers and fuzzers can identify inputs that might lead to performance issues, ensuring that the C program is evaluated comprehensively for efficiency even under worst-case input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, we will implement checker functions to monitor potential performance bottlenecks.

```cpp
#include <iostream>
using namespace std;

// Checker function to monitor high count of apples and weight distribution
void check_apple_count_and_distribution(int n, int num_200g) {
    if (n >= 95 && num_200g > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - high apple count and many 200g apples!" << endl;
        abort();
    }
}

// Checker function to monitor complex weight distributions
void check_weight_distribution(int sum, int num_200g) {
    if (sum > 150 && num_200g > sum / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - complex weight distribution!" << endl;
        abort();
    }
}

// Checker function to monitor dynamic programming array saturation
void check_dp_saturation(bool *dp, int sum) {
    int active_states = 0;
    for (int i = 0; i <= sum; ++i) {
        if (dp[i]) ++active_states;
    }
    if (active_states > 150) {
        cerr << "Warning: Performance bottleneck condition triggered - DP array saturation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ program to effectively monitor the performance when processing inputs.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAX = 205;
int a[MAX];
bool dp[MAX];

// Checker functions (as defined in Phase 3)
void check_apple_count_and_distribution(int n, int num_200g);
void check_weight_distribution(int sum, int num_200g);
void check_dp_saturation(bool *dp, int sum);

int main() {
    int n;
    scanf("%d", &n);
    int num_200g = 0;
    int sum = 0;
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &a[i]);
        if (a[i] == 200) {
            num_200g++;
        }
        a[i] /= 100;
        sum += a[i];
    }

    // Add checkers after reading inputs
    check_apple_count_and_distribution(n, num_200g);
    check_weight_distribution(sum, num_200g);

    dp[0] = 1;
    for (int i = 1; i <= n; ++i) {
        for (int j = 200; j >= 1; --j) {
            if (dp[j - a[i]]) dp[j] = 1;
        }
    }

    // Check for DP saturation just before the final decision
    check_dp_saturation(dp, sum);

    if (sum % 2 || !dp[sum / 2])
        printf("NO\n");
    else
        printf("YES\n");
    return 0;
}
```

### Explanation of Integration

- **Checkers Placement**: The checkers are placed right after reading the input and computing initial values. This ensures that any potential bottleneck conditions are flagged early in the execution without interfering with the core computation loop.
- **Checker Conditions**: Each checker function is tailored to monitor aspects such as high amounts of 200g apples, complex weight distributions, and the saturation of the dynamic programming array.
- **Abort on Detection**: Each checker will output a warning and abort the program if a bottleneck condition is triggered, helping identify problematic input patterns for further optimization.

