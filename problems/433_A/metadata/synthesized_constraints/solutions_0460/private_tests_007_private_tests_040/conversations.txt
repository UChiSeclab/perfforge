system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[400];
int can[1000];
int main() {
  int n;
  scanf("%d", &n);
  int s = 0;
  can[0] = 1;
  for (int i = 0; i < n; i++) {
    int k;
    scanf("%d", &k);
    k /= 100;
    s += k;
    for (int t = 1000 - 1; t >= 0; t--)
      if (can[t]) can[t + k] = 1;
  }
  if (s % 2)
    puts("NO");
  else {
    int p = s / 2;
    if (can[p])
      puts("YES");
    else
      puts("NO");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 100 200 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200


(G.2) Fast Input

32
200 200 200 100 100 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[400]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int can[1000]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int s = 0; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  can[0] = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 10 slow_hit_count: 101, fast_hit_count: 33 */
    int k; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &k); /* line 12 slow_hit_count: 100, fast_hit_count: 32 */
    k /= 100; /* line 13 slow_hit_count: 100, fast_hit_count: 32 */
    s += k; /* line 14 slow_hit_count: 100, fast_hit_count: 32 */
    for (int t = 1000 - 1; t >= 0; t--) /* line 15 slow_hit_count: 100100, fast_hit_count: 32032 */
      if (can[t]) can[t + k] = 1; /* line 16 slow_hit_count: 100000, fast_hit_count: 32000 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (s % 2) /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    puts("NO"); /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
  else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    int p = s / 2; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
    if (can[p]) /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      puts("YES"); /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      puts("NO"); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, let's analyze the hit count data and identify the expensive segments in the code.

### Phase 1: Identify Expensive Code Segments

**Line-Level Hit Count Analysis:**

1. **Outer Loop (Line 10):**  
   - Slow Input: 101 hits
   - Fast Input: 33 hits

   The outer loop runs for each apple, so naturally, the hit count is high for both inputs, especially for the slow input, where `n` is 100 compared to 32 in the fast input.

2. **Inner Loop (Line 15):**
   - Slow Input: 100100 hits
   - Fast Input: 32032 hits

   There is a significant increase in hits for the slow input compared to the fast input, suggesting the inner loop (`for (int t = 1000 - 1; t >= 0; t--)`) is a major contributor to the slowdown. The inner loop iterates 1000 times for each apple, leading to a large number of iterations, particularly when `n` is large or when the sums being tracked are close to 1000.

3. **Conditional Update (Line 16):**
   - Slow Input: 100000 hits
   - Fast Input: 32000 hits

   This conditional update within the inner loop is executed almost every time the loop runs, indicating that many elements in the `can` array are being checked and updated.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariant #1:**
   - **Description:** When the number of apples `n` approaches the upper limit and consists mostly of 200-gram apples, the algorithm's inner loop executes excessively, leading to significant slowdowns.
   - **Explanation:** The hit count analysis indicates the inner loop's execution time increases drastically with more 200-gram apples, especially when `n` is large, as this increases the range of sums to be checked for possible splits.

2. **Natural Language Invariant #2:**
   - **Description:** If the apple weights result in high cumulative sums that require the `can` array to be frequently updated over a large range, the performance is degraded.
   - **Explanation:** The frequent and widespread updates to the `can` array suggest that maintaining possible partitions is computationally intensive, especially when the sum of the apple weights reaches high values near the capacity of the `can` array (i.e., 1000).

3. **Natural Language Invariant #3:**
   - **Description:** A slowdown occurs when the distribution of apples is such that there are few ways to split them evenly, causing repeated and extensive searching through potential weight combinations.
   - **Explanation:** When the sum of weights is not easily divisible or when most apples are of the same type, the algorithm spends more time evaluating many permutations of weight combinations.

These invariants capture the conditions under which the program experiences performance bottlenecks and are broad enough to anticipate similar issues with other inputs within the constraint that `n <= 100`. By abstracting the issue to focus on the distribution and type of apple weights, these conditions highlight the factors leading to excessive computational overhead.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Below are the C++ implementations of the natural language invariants derived in Phase 2. Each checker is designed to detect the condition described in the invariant.

1. **Checker for Invariant #1: Large Number of 200-gram Apples**

```cpp
void check_large_200_gram_apples(int n, int count_200) {
    if (n == 100 && count_200 > 70) { // Adjusted threshold based on inferred condition
        cerr << "Warning: Performance bottleneck condition triggered - too many 200-gram apples" << endl;
        abort();
    }
}
```

2. **Checker for Invariant #2: Frequent Updates to `can` Array**

```cpp
void check_frequent_updates(int potential_updates) {
    if (potential_updates > 50000) { // Example threshold for excessive updates
        cerr << "Warning: Performance bottleneck condition triggered - too many updates to 'can' array" << endl;
        abort();
    }
}
```

3. **Checker for Invariant #3: Difficult Weight Partitioning**

```cpp
void check_difficult_partitioning(int sum) {
    if (sum > 900) { // Example threshold where partitioning becomes challenging
        cerr << "Warning: Performance bottleneck condition triggered - difficult weight partitioning" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, we will integrate these checks into the given C++ program, placing them at strategic points to minimize runtime overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for Invariant #1
void check_large_200_gram_apples(int n, int count_200) {
    if (n == 100 && count_200 > 70) {
        cerr << "Warning: Performance bottleneck condition triggered - too many 200-gram apples" << endl;
        abort();
    }
}

// Checker for Invariant #2
void check_frequent_updates(int potential_updates) {
    if (potential_updates > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - too many updates to 'can' array" << endl;
        abort();
    }
}

// Checker for Invariant #3
void check_difficult_partitioning(int sum) {
    if (sum > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - difficult weight partitioning" << endl;
        abort();
    }
}

int a[400];
int can[1000];

int main() {
    int n;
    scanf("%d", &n);
    int s = 0;
    can[0] = 1;

    int count_200 = 0; // Count the number of 200-gram apples
    for (int i = 0; i < n; i++) {
        int k;
        scanf("%d", &k);
        k /= 100;
        if (k == 2) count_200++; // Increment count for 200-gram apples

        s += k;

        int potential_updates = 0; // Track potential updates to 'can'
        for (int t = 1000 - 1; t >= 0; t--) {
            if (can[t]) {
                can[t + k] = 1;
                potential_updates++;
            }
        }
        check_frequent_updates(potential_updates); // Check for excessive updates
    }

    check_large_200_gram_apples(n, count_200); // Check for too many 200-gram apples
    check_difficult_partitioning(s); // Check for difficult partitioning
    
    if (s % 2)
        puts("NO");
    else {
        int p = s / 2;
        if (can[p])
            puts("YES");
        else
            puts("NO");
    }
    return 0;
}
```

**Explanation of Integration:**
- **Invariant #1:** Check after reading all inputs to see if there are too many 200-gram apples, which increases complexity.
- **Invariant #2:** Implemented inside the loop that updates the `can` array to monitor the potential number of updates and check if it crosses an excessive threshold.
- **Invariant #3:** Performed after calculating the total sum to detect potentially difficult partition cases.

These checks help identify conditions that may lead to performance degradation, aligning with the analysis conducted in earlier phases.

