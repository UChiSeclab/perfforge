system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, w, v1, v2, cont1, cont2, q, total;
  bool flag = 0;
  cin >> n;
  cont1 = cont2 = 0;
  for (int i = 0; i < n; i++) {
    cin >> w;
    if (w == 100)
      cont1++;
    else
      cont2++;
  }
  if (n == 1)
    cout << "NO";
  else {
    if ((cont1 * 100) == (cont2 * 200))
      cout << "YES";
    else {
      total = (cont1 * 100) + (cont2 * 200);
      q = total / 2;
      for (int i = 0; i <= cont1 and !flag; i++) {
        for (int j = 0; j <= cont2 and !flag; j++) {
          v1 = (i * 100) + (j * 200);
          v2 = total - v1;
          if (v1 == v2) flag = 1;
        }
      }
      if (flag)
        cout << "YES";
      else
        cout << "NO";
    }
  }
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
100 100 200 200 100 200 100 100 100 100 100 100 200 100 200 200 200 100 100 200 200 200 200 200 100 200 100 200 100 100 100 200 100 100 200 100 200 100 100 100 200 200 100 100 100 200 200 200 200 200 100 200 200 100 100 100 100 200 100 100 200 100 100 100 100 200 200 200 100 200 100 200 200 200 100 100 200 200 200 200 100 200 100 200 200 100 200 100 200 200 200 200 200 200 100 100 100 200 200 100


(G.2) Fast Input

4
100 100 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, w, v1, v2, cont1, cont2, q, total; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  bool flag = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cont1 = cont2 = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 101, fast_hit_count: 5 */
    cin >> w; /* line 9 slow_hit_count: 100, fast_hit_count: 4 */
    if (w == 100) /* line 10 slow_hit_count: 100, fast_hit_count: 4 */
      cont1++; /* line 11 slow_hit_count: 49, fast_hit_count: 2 */
    else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      cont2++; /* line 13 slow_hit_count: 51, fast_hit_count: 2 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 1) /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO"; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if ((cont1 * 100) == (cont2 * 200)) /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "YES"; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      total = (cont1 * 100) + (cont2 * 200); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
      q = total / 2; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
      for (int i = 0; i <= cont1 and !flag; i++) { /* line 23 slow_hit_count: 51, fast_hit_count: 3 */
        for (int j = 0; j <= cont2 and !flag; j++) { /* line 24 slow_hit_count: 2650, fast_hit_count: 7 */
          v1 = (i * 100) + (j * 200); /* line 25 slow_hit_count: 2600, fast_hit_count: 5 */
          v2 = total - v1; /* line 26 slow_hit_count: 2600, fast_hit_count: 5 */
          if (v1 == v2) flag = 1; /* line 27 slow_hit_count: 2600, fast_hit_count: 5 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (flag) /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
        cout << "YES"; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
      else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "NO"; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the given C program, we need to focus on identifying which parts of the code run inefficiently on the slow input. By comparing the line-level hit counts from the slow and fast runs, we can pinpoint where the slowdown occurs, and from there, derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Discrepancies**:
   - The slow input triggers a significantly larger number of iterations in the nested loop found in lines 23-27. Specifically, line 24 (the inner loop) has 2650 hits for the slow input compared to just 7 for the fast input.
   - The lines within the nested loop (25-27) are also hit 2600 times during the slow input execution, indicating intensive computation here.

2. **Interaction with Data Structures**:
   - The program uses two counters, `cont1` and `cont2`, to count the number of 100-gram and 200-gram apples, respectively.
   - The nested loops test combinations of these counts to find a fair split of apples.

3. **Reason for Slowdown**:
   - The slow input results in many more iterations of the nested loops due to higher values of `cont1` and `cont2`. This results in a combinatorial explosion of possible `i` and `j` combinations, making it computationally expensive to check all possibilities.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can infer conditions under which the program is likely to enter a slow path. Here are some natural language invariants that describe these conditions:

1. **Invariant on Combination Checking**:
   - Natural language description: "When the number of 100-gram apples (`cont1`) and 200-gram apples (`cont2`) allow for many possible combinations to reach half the total weight, the program may slow down significantly due to extensive loop iterations."
   - Contextual threshold: Given `n` can be up to 100, slowdowns occur when the sum of potential combinations of `cont1` and `cont2` results in a high number of iterations, especially if neither `cont1` nor `cont2` are zero or small.

2. **Invariant on Equal Weight Condition**:
   - Natural language description: "If the total weight of all apples is odd, a fair division is immediately impossible; however, if not, extensive checking through nested loops is required to determine possible splits, which can be slow."
   - Contextual threshold: This directly relates to the necessity of checking combinations only when the total weight is even, but the fairness condition is not immediately met.

3. **Invariant on Early Termination**:
   - Natural language description: "The execution time can increase if a fair split is not found early in the nested loops, leading to complete iteration over all combinations of apple counts."
   - Contextual threshold: If a fair split is not detected early, the loop will continue for all possible values of `i` and `j`, leading to slowdowns proportional to `cont1 * cont2`.

These invariants reflect realistic triggers for slow performance based on input patterns and the constraints given (n ≤ 100). They help identify conditions that would likely lead the program down a slow execution path without relying on specific numeric values from the inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here, I'll translate the performance-characterizing invariants derived previously into C++ runtime checks:

1. **Invariant on Combination Checking**:
   - If the potential combinations of `cont1` and `cont2` lead to excessive iterations, trigger a warning. Given the constraints, define a threshold for when this becomes expensive.
   
   ```cpp
   void check_combination_invariant(int cont1, int cont2) {
       if (cont1 * cont2 > 2500) { // Example threshold considering 100 * 25 as a rough guideline
           cerr << "Warning: Combination invariant triggered - excessive potential combinations" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Equal Weight Condition**:
   - If the total weight is odd, it's impossible to split evenly, but further checks are needed when the weights seem balanceable.
   
   ```cpp
   void check_weight_invariant(int total) {
       if (total % 2 != 0) {
           cerr << "Warning: Weight invariant triggered - odd total weight, cannot split evenly" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Early Termination**:
   - Ensure that the nested loops do not iterate excessively without finding a solution early.
   
   ```cpp
   void check_early_termination_invariant(bool flag, int max_iter) {
       if (!flag && max_iter > 2500) { // Example iteration limit before deciding it's a bottleneck
           cerr << "Warning: Early termination invariant triggered - no solution found early" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into Original C++ Code

Now, we integrate the above checkers into the original C++ program at appropriate points to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance-characterizing invariants
void check_combination_invariant(int cont1, int cont2) {
    if (cont1 * cont2 > 2500) { // Example threshold
        cerr << "Warning: Combination invariant triggered - excessive potential combinations" << endl;
        abort();
    }
}

void check_weight_invariant(int total) {
    if (total % 2 != 0) {
        cerr << "Warning: Weight invariant triggered - odd total weight, cannot split evenly" << endl;
        abort();
    }
}

void check_early_termination_invariant(bool flag, int max_iter) {
    if (!flag && max_iter > 2500) { // Example iteration limit
        cerr << "Warning: Early termination invariant triggered - no solution found early" << endl;
        abort();
    }
}

int main() {
    int n, w, v1, v2, cont1, cont2, q, total;
    bool flag = 0;
    cin >> n;
    cont1 = cont2 = 0;
    for (int i = 0; i < n; i++) {
        cin >> w;
        if (w == 100)
            cont1++;
        else
            cont2++;
    }

    // Check weight invariant
    total = (cont1 * 100) + (cont2 * 200);
    check_weight_invariant(total);

    if (n == 1)
        cout << "NO";
    else {
        if ((cont1 * 100) == (cont2 * 200))
            cout << "YES";
        else {
            q = total / 2;

            // Check combination invariant before entering nested loops
            check_combination_invariant(cont1, cont2);

            int iteration_count = 0;
            for (int i = 0; i <= cont1 and !flag; i++) {
                for (int j = 0; j <= cont2 and !flag; j++) {
                    iteration_count++;
                    v1 = (i * 100) + (j * 200);
                    v2 = total - v1;
                    if (v1 == v2) flag = 1;
                }
            }

            // Check early termination invariant after the nested loops
            check_early_termination_invariant(flag, iteration_count);

            if (flag)
                cout << "YES";
            else
                cout << "NO";
        }
    }
    cout << endl;
    return 0;
}
```

### Explanation:

- **`check_combination_invariant`** is called before entering the nested loops, ensuring that the combinations of `cont1` and `cont2` don't lead to excessive iterations.
- **`check_weight_invariant`** is called after calculating the total weight to detect if it's odd and avoid unnecessary checks.
- **`check_early_termination_invariant`** is called after the nested loops to ensure that the solution was found early enough; otherwise, a warning is triggered.

These integrations ensure the program checks for conditions under which slow performance is likely, without incurring additional overhead during execution.

