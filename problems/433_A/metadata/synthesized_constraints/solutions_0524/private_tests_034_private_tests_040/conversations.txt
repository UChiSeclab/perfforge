system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  vector<int> v(n);
  for (int i = 0; i < n; i++) cin >> v[i];
  int s1 = 0, s2 = 0;
  for (int i = 0; i < n; i++) {
    if (v[i] == 100)
      s1++;
    else
      s2++;
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int m = 0; m < n; m++) {
          if (i + j + k + m == n && i + k == s1 && j + m == s2) {
            int a = j - m;
            int b = k - i;
            if (200 * a == 100 * b) {
              cout << "YES" << '\n';
              return 0;
            }
          }
        }
      }
    }
  }
  cout << "NO" << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200


(G.2) Fast Input

32
200 200 200 100 100 100 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 100 200 200 200 200 200 200


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) cin >> v[i]; /* line 10 slow_hit_count: 101, fast_hit_count: 33 */
  int s1 = 0, s2 = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 12 slow_hit_count: 101, fast_hit_count: 33 */
    if (v[i] == 100) /* line 13 slow_hit_count: 100, fast_hit_count: 32 */
      s1++; /* line 14 slow_hit_count: 1, fast_hit_count: 4 */
    else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      s2++; /* line 16 slow_hit_count: 99, fast_hit_count: 28 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 18 slow_hit_count: 101, fast_hit_count: 1 */
    for (int j = 0; j < n; j++) { /* line 19 slow_hit_count: 10100, fast_hit_count: 16 */
      for (int k = 0; k < n; k++) { /* line 20 slow_hit_count: 1010000, fast_hit_count: 500 */
        for (int m = 0; m < n; m++) { /* line 21 slow_hit_count: 101000000, fast_hit_count: 15986 */
          if (i + j + k + m == n && i + k == s1 && j + m == s2) { /* line 22 slow_hit_count: 100000000, fast_hit_count: 15502 */
            int a = j - m; /* line 23 slow_hit_count: 200, fast_hit_count: 16 */
            int b = k - i; /* line 24 slow_hit_count: 200, fast_hit_count: 16 */
            if (200 * a == 100 * b) { /* line 25 slow_hit_count: 200, fast_hit_count: 16 */
              cout << "YES" << '\n'; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
              return 0; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
            } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "NO" << '\n'; /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Comparison of Line-Level Hit Counts:**
   - Lines inside the nested loops (lines 18 to 25) are executed a significantly greater number of times for the slow input compared to the fast input. Specifically, line 21, which represents the innermost loop, executes 101,000,000 times for the slow input versus 15,986 times for the fast input.
   
2. **Pinpointing Lines with Significant Hits:**
   - Line 21, which corresponds to the innermost loop, sees the most substantial difference in hit counts between the slow and fast inputs. This indicates that the nested loops are the main contributors to the performance bottleneck.
   
3. **Interaction with Data Structures and Code Constructs:**
   - The code includes four nested loops iterating up to `n`, which results in a complexity of `O(n^4)`. Given `n` can be at most 100, this complexity leads to 100 million iterations in the worst case. The critical condition in line 22 frequently evaluates to `false`, leading to continued iteration without early termination.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Natural Language Performance Invariants:**
   - **Invariant #1: High Iteration Count in Nested Loops**
     - "When the number of apples `n` is large and the distribution of apple weights results in the condition `i + j + k + m == n && i + k == s1 && j + m == s2` rarely being satisfied, the nested loops iterate excessively, leading to significant slowdowns."
   
   - **Invariant #2: Imbalanced Weight Distribution**
     - "When there is an imbalanced distribution of apple weights (e.g., a large number of 200-gram apples and few 100-gram apples), the condition checking logic inside the nested loops becomes inefficient as it attempts to satisfy a nearly impossible balance condition."
   
2. **Thresholds and Input Patterns:**
   - These invariants should be considered when `n` is close to 100, especially when there is a skewed distribution of 100-gram and 200-gram apples. The nested loop structure and the conditional checks are particularly sensitive to apple weight combinations that do not allow equal weight distribution.

3. **Concise Descriptive Statements:**
   - The performance may degrade significantly when:
     - The number of apples `n` approaches its upper limit, increasing the iteration count of deeply nested loops.
     - The apple weights are predominantly one type, making it challenging to find a valid partition that satisfies the equality condition.
   
These insights should help in identifying performance bottlenecks and guide optimizations or alternative algorithmic strategies to efficiently solve the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.

Each apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.

But unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?

Input

The first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.

Output

In a single line print "YES" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print "NO" (without the quotes).

Examples

Input

3
100 200 100


Output

YES


Input

4
100 100 100 200


Output

NO

Note

In the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implementing Performance-Characterizing Invariants in C++**

Based on the derived natural language invariants, let's write C++ code snippets to check these conditions at runtime. We'll implement two distinct checks:

1. **High Iteration Count in Nested Loops**
    - We need a check to ensure that the nested loops do not iterate excessively.
   
2. **Imbalanced Weight Distribution**
    - We need a check to ensure that the distribution of 100-gram and 200-gram apples is not highly skewed such that it causes inefficiency in verifying the balance condition.

```cpp
void check_large_iteration_invariant(int n) {
    // Approximately check if the combination leads to excessive iterations
    if (n >= 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to large iteration count!" << endl;
        abort();
    }
}

void check_imbalanced_weights_invariant(int s1, int s2) {
    // Check for highly imbalanced distribution
    if (s1 == 0 || s2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalanced weight distribution!" << endl;
        abort();
    }
}
```

**Phase 4: Integrate Checker Code into the Original C++ Program**

Now, we'll integrate these checker functions into the original C++ program to monitor for potential performance bottlenecks. We'll place these checks after reading the inputs and before the nested loops, which are the critical sections contributing to the slowdown.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_iteration_invariant(int n) {
    // Approximately check if the combination leads to excessive iterations
    if (n >= 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to large iteration count!" << endl;
        abort();
    }
}

void check_imbalanced_weights_invariant(int s1, int s2) {
    // Check for highly imbalanced distribution
    if (s1 == 0 || s2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalanced weight distribution!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  int n;
  cin >> n;
  vector<int> v(n);
  for (int i = 0; i < n; i++) cin >> v[i];
  
  int s1 = 0, s2 = 0;
  for (int i = 0; i < n; i++) {
    if (v[i] == 100)
      s1++;
    else
      s2++;
  }

  // Insert checks after computing s1 and s2
  check_large_iteration_invariant(n);
  check_imbalanced_weights_invariant(s1, s2);

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int m = 0; m < n; m++) {
          if (i + j + k + m == n && i + k == s1 && j + m == s2) {
            int a = j - m;
            int b = k - i;
            if (200 * a == 100 * b) {
              cout << "YES" << '\n';
              return 0;
            }
          }
        }
      }
    }
  }
  cout << "NO" << '\n';
  return 0;
}
```

**Explanation of Changes:**

- **Large Iteration Count Check:** This check is placed after reading `n` to ensure that when `n` reaches its upper limit, it warns of potential slowdown due to excessive looping.
  
- **Imbalanced Weights Check:** This check is placed after calculating the number of 100-gram and 200-gram apples, ensuring that if one type is overly dominant, it triggers a warning about inefficient balance checks.

