=== Invariants Response ===
**Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Comparison of Line-Level Hit Counts:**
   - Lines inside the nested loops (lines 18 to 25) are executed a significantly greater number of times for the slow input compared to the fast input. Specifically, line 21, which represents the innermost loop, executes 101,000,000 times for the slow input versus 15,986 times for the fast input.
   
2. **Pinpointing Lines with Significant Hits:**
   - Line 21, which corresponds to the innermost loop, sees the most substantial difference in hit counts between the slow and fast inputs. This indicates that the nested loops are the main contributors to the performance bottleneck.
   
3. **Interaction with Data Structures and Code Constructs:**
   - The code includes four nested loops iterating up to `n`, which results in a complexity of `O(n^4)`. Given `n` can be at most 100, this complexity leads to 100 million iterations in the worst case. The critical condition in line 22 frequently evaluates to `false`, leading to continued iteration without early termination.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Natural Language Performance Invariants:**
   - **Invariant #1: High Iteration Count in Nested Loops**
     - "When the number of apples `n` is large and the distribution of apple weights results in the condition `i + j + k + m == n && i + k == s1 && j + m == s2` rarely being satisfied, the nested loops iterate excessively, leading to significant slowdowns."
   
   - **Invariant #2: Imbalanced Weight Distribution**
     - "When there is an imbalanced distribution of apple weights (e.g., a large number of 200-gram apples and few 100-gram apples), the condition checking logic inside the nested loops becomes inefficient as it attempts to satisfy a nearly impossible balance condition."
   
2. **Thresholds and Input Patterns:**
   - These invariants should be considered when `n` is close to 100, especially when there is a skewed distribution of 100-gram and 200-gram apples. The nested loop structure and the conditional checks are particularly sensitive to apple weight combinations that do not allow equal weight distribution.

3. **Concise Descriptive Statements:**
   - The performance may degrade significantly when:
     - The number of apples `n` approaches its upper limit, increasing the iteration count of deeply nested loops.
     - The apple weights are predominantly one type, making it challenging to find a valid partition that satisfies the equality condition.
   
These insights should help in identifying performance bottlenecks and guide optimizations or alternative algorithmic strategies to efficiently solve the problem.

=== Checker Response ===
**Phase 3: Implementing Performance-Characterizing Invariants in C++**

Based on the derived natural language invariants, let's write C++ code snippets to check these conditions at runtime. We'll implement two distinct checks:

1. **High Iteration Count in Nested Loops**
    - We need a check to ensure that the nested loops do not iterate excessively.
   
2. **Imbalanced Weight Distribution**
    - We need a check to ensure that the distribution of 100-gram and 200-gram apples is not highly skewed such that it causes inefficiency in verifying the balance condition.

```cpp
void check_large_iteration_invariant(int n) {
    // Approximately check if the combination leads to excessive iterations
    if (n >= 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to large iteration count!" << endl;
        abort();
    }
}

void check_imbalanced_weights_invariant(int s1, int s2) {
    // Check for highly imbalanced distribution
    if (s1 == 0 || s2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalanced weight distribution!" << endl;
        abort();
    }
}
```

**Phase 4: Integrate Checker Code into the Original C++ Program**

Now, we'll integrate these checker functions into the original C++ program to monitor for potential performance bottlenecks. We'll place these checks after reading the inputs and before the nested loops, which are the critical sections contributing to the slowdown.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_iteration_invariant(int n) {
    // Approximately check if the combination leads to excessive iterations
    if (n >= 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to large iteration count!" << endl;
        abort();
    }
}

void check_imbalanced_weights_invariant(int s1, int s2) {
    // Check for highly imbalanced distribution
    if (s1 == 0 || s2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalanced weight distribution!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  int n;
  cin >> n;
  vector<int> v(n);
  for (int i = 0; i < n; i++) cin >> v[i];
  
  int s1 = 0, s2 = 0;
  for (int i = 0; i < n; i++) {
    if (v[i] == 100)
      s1++;
    else
      s2++;
  }

  // Insert checks after computing s1 and s2
  check_large_iteration_invariant(n);
  check_imbalanced_weights_invariant(s1, s2);

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int m = 0; m < n; m++) {
          if (i + j + k + m == n && i + k == s1 && j + m == s2) {
            int a = j - m;
            int b = k - i;
            if (200 * a == 100 * b) {
              cout << "YES" << '\n';
              return 0;
            }
          }
        }
      }
    }
  }
  cout << "NO" << '\n';
  return 0;
}
```

**Explanation of Changes:**

- **Large Iteration Count Check:** This check is placed after reading `n` to ensure that when `n` reaches its upper limit, it warns of potential slowdown due to excessive looping.
  
- **Imbalanced Weights Check:** This check is placed after calculating the number of 100-gram and 200-gram apples, ensuring that if one type is overly dominant, it triggers a warning about inefficient balance checks.
