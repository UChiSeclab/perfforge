system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string txt, pat;
string con(int x) {
  stringstream ss;
  ss << x;
  return ss.str();
}
int sv_sub[1000005][10];
int F[1000005];
void fail() {
  int i = 0, j = -1;
  F[0] = -1;
  while (i < pat.size()) {
    while (j >= 0 && pat[i] != pat[j]) j = F[j];
    i++, j++;
    F[i] = j;
  }
}
vector<int> sv2;
bool chk(int sz, vector<int> sv) {
  string sz_s = con(sz);
  for (char c : sz_s) sv[c - '0']--;
  int cnt = 0;
  for (int i = 0; i < 10; i++) cnt += sv[i];
  if (cnt != sz) return 0;
  for (int i = 0; i <= 9; i++)
    if (sv[i] < 0) return 0;
  for (int i = 0; i <= 9; i++)
    if (sv[i] < sv2[i]) return 0;
  for (int i = 1; i <= 9; i++)
    if (sv[i]) return 1;
  return 0;
}
vector<int> sv;
void get_txt(int sz) {
  string sz_s = con(sz);
  for (char c : sz_s) sv[c - '0']--;
}
bool chk(int idx, int add, int match) {
  auto tmp_sv = sv;
  if (!idx && !add) return 0;
  if (!tmp_sv[add]) return 0;
  tmp_sv[add]--;
  while (match >= 0 && add != (pat[match] - '0')) match = F[match];
  match++;
  for (int i = 0; i < 10; i++)
    if (tmp_sv[i] < sv_sub[match][i]) return 0;
  return 1;
}
int main() {
  cin >> txt >> pat;
  if (txt.size() == 2) {
    if (txt[0] == '1')
      txt.erase(txt.begin());
    else
      txt.erase(txt.begin() + 1);
    cout << txt << '\n';
    return 0;
  }
  sv.assign(10, 0);
  sv2.assign(10, 0);
  for (char c : txt) sv[c - '0']++;
  for (char c : pat) sv2[c - '0']++;
  int i = 1;
  for (int i = pat.size() - 1; i >= 0; i--)
    for (int j = 0; j < 10; j++)
      sv_sub[i][j] = sv_sub[i + 1][j] + (j == (pat[i] - '0'));
  for (;; i++) {
    if (chk(i, sv)) break;
  }
  int sz = i;
  get_txt(sz);
  string ans = "";
  int f = 0;
  i = 0;
  fail();
  while (i < sz) {
    for (int j = (i == 0); j < 10; j++) {
      if (chk(i, j, f)) {
        ans.push_back(j + '0');
        sv[j]--;
        break;
      }
    }
    while (f >= 0 && ans[i] != pat[f]) f = F[f];
    i++, f++;
    if (f == pat.size()) break;
  }
  for (int i = 0; i < 10; i++)
    while (sv[i]--) ans.push_back('0' + i);
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

320403902031031110003113410860101243100423120201101124080311242010930103200001451200132304400000
3


(G.2) Fast Input

13
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string txt, pat; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string con(int x) { /* line 4 slow_hit_count: 95, fast_hit_count: 0 */
  stringstream ss; /* line 5 slow_hit_count: 190, fast_hit_count: 0 */
  ss << x; /* line 6 slow_hit_count: 95, fast_hit_count: 0 */
  return ss.str(); /* line 7 slow_hit_count: 190, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int sv_sub[1000005][10]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int F[1000005]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void fail() { /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
  int i = 0, j = -1; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
  F[0] = -1; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
  while (i < pat.size()) { /* line 14 slow_hit_count: 2, fast_hit_count: 0 */
    while (j >= 0 && pat[i] != pat[j]) j = F[j]; /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
    i++, j++; /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
    F[i] = j; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
vector<int> sv2; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool chk(int sz, vector<int> sv) { /* line 21 slow_hit_count: 94, fast_hit_count: 0 */
  string sz_s = con(sz); /* line 22 slow_hit_count: 188, fast_hit_count: 0 */
  for (char c : sz_s) sv[c - '0']--; /* line 23 slow_hit_count: 273, fast_hit_count: 0 */
  int cnt = 0; /* line 24 slow_hit_count: 94, fast_hit_count: 0 */
  for (int i = 0; i < 10; i++) cnt += sv[i]; /* line 25 slow_hit_count: 1034, fast_hit_count: 0 */
  if (cnt != sz) return 0; /* line 26 slow_hit_count: 94, fast_hit_count: 0 */
  for (int i = 0; i <= 9; i++) /* line 27 slow_hit_count: 11, fast_hit_count: 0 */
    if (sv[i] < 0) return 0; /* line 28 slow_hit_count: 10, fast_hit_count: 0 */
  for (int i = 0; i <= 9; i++) /* line 29 slow_hit_count: 11, fast_hit_count: 0 */
    if (sv[i] < sv2[i]) return 0; /* line 30 slow_hit_count: 10, fast_hit_count: 0 */
  for (int i = 1; i <= 9; i++) /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    if (sv[i]) return 1; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> sv; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void get_txt(int sz) { /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
  string sz_s = con(sz); /* line 37 slow_hit_count: 2, fast_hit_count: 0 */
  for (char c : sz_s) sv[c - '0']--; /* line 38 slow_hit_count: 3, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
bool chk(int idx, int add, int match) { /* line 40 slow_hit_count: 117, fast_hit_count: 0 */
  auto tmp_sv = sv; /* line 41 slow_hit_count: 234, fast_hit_count: 0 */
  if (!idx && !add) return 0; /* line 42 slow_hit_count: 117, fast_hit_count: 0 */
  if (!tmp_sv[add]) return 0; /* line 43 slow_hit_count: 117, fast_hit_count: 0 */
  tmp_sv[add]--; /* line 44 slow_hit_count: 69, fast_hit_count: 0 */
  while (match >= 0 && add != (pat[match] - '0')) match = F[match]; /* line 45 slow_hit_count: 137, fast_hit_count: 0 */
  match++; /* line 46 slow_hit_count: 69, fast_hit_count: 0 */
  for (int i = 0; i < 10; i++) /* line 47 slow_hit_count: 759, fast_hit_count: 0 */
    if (tmp_sv[i] < sv_sub[match][i]) return 0; /* line 48 slow_hit_count: 690, fast_hit_count: 0 */
  return 1; /* line 49 slow_hit_count: 69, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> txt >> pat; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  if (txt.size() == 2) { /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    if (txt[0] == '1') /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
      txt.erase(txt.begin()); /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      txt.erase(txt.begin() + 1); /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    cout << txt << '\n'; /* line 58 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 59 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  sv.assign(10, 0); /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  sv2.assign(10, 0); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  for (char c : txt) sv[c - '0']++; /* line 63 slow_hit_count: 97, fast_hit_count: 0 */
  for (char c : pat) sv2[c - '0']++; /* line 64 slow_hit_count: 2, fast_hit_count: 0 */
  int i = 1; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = pat.size() - 1; i >= 0; i--) /* line 66 slow_hit_count: 2, fast_hit_count: 0 */
    for (int j = 0; j < 10; j++) /* line 67 slow_hit_count: 11, fast_hit_count: 0 */
      sv_sub[i][j] = sv_sub[i + 1][j] + (j == (pat[i] - '0')); /* line 68 slow_hit_count: 10, fast_hit_count: 0 */
  for (;; i++) { /* line 69 slow_hit_count: 93, fast_hit_count: 0 */
    if (chk(i, sv)) break; /* line 70 slow_hit_count: 94, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  int sz = i; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  get_txt(sz); /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
  string ans = ""; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
  int f = 0; /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
  i = 0; /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
  fail(); /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
  while (i < sz) { /* line 78 slow_hit_count: 69, fast_hit_count: 0 */
    for (int j = (i == 0); j < 10; j++) { /* line 79 slow_hit_count: 117, fast_hit_count: 0 */
      if (chk(i, j, f)) { /* line 80 slow_hit_count: 117, fast_hit_count: 0 */
        ans.push_back(j + '0'); /* line 81 slow_hit_count: 69, fast_hit_count: 0 */
        sv[j]--; /* line 82 slow_hit_count: 69, fast_hit_count: 0 */
        break; /* line 83 slow_hit_count: 69, fast_hit_count: 0 */
      } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    while (f >= 0 && ans[i] != pat[f]) f = F[f]; /* line 86 slow_hit_count: 137, fast_hit_count: 0 */
    i++, f++; /* line 87 slow_hit_count: 69, fast_hit_count: 0 */
    if (f == pat.size()) break; /* line 88 slow_hit_count: 69, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 10; i++) /* line 90 slow_hit_count: 11, fast_hit_count: 0 */
    while (sv[i]--) ans.push_back('0' + i); /* line 91 slow_hit_count: 35, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 92 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 94 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance Invariants

Based on the analysis of the given C program and the hit counts for both slow and fast inputs, we can derive the following natural language performance invariants that describe conditions under which the code execution becomes slow:

1. **Repeated String Conversion**: 
   - **Invariant Description**: "If the function converting integers to strings (`con(int x)`) is called frequently within loops, it can become a bottleneck due to repeated unnecessary conversions."
   - **Implementation Insight**: The `con` function is called 95 times for the slow input, indicating it is executed within some iterative or recursive structure. The conversion of integer sizes to strings, especially for large integers, can be computationally expensive if repeated often, contributing to the slowdown.

2. **Excessive Checks in Nested Loops**:
   - **Invariant Description**: "When nested loops perform checks involving large data structures or complex conditions, such as verifying character counts or string matching, the performance may degrade significantly."
   - **Implementation Insight**: The `chk` function is a key hotspot with 117 hits for slow input, indicating heavy usage and complex logic inside. It involves operations on vectors and possibly contains nested loop structures. Checking conditions like vector size mismatches or character occurrences frequently can slow down execution.

3. **String Matching with High Frequency**:
   - **Invariant Description**: "If there is a high frequency of string matching operations or pattern matching (e.g., KMP algorithm usage), performance may degrade, especially with longer patterns or strings."
   - **Implementation Insight**: The use of the `fail` function (part of the KMP algorithm) shown in the code and its subsequent operations indicate potential slow paths when the pattern `pat` size is significant relative to the input size.

4. **Frequent Modifications to Data Structures**:
   - **Invariant Description**: "Frequent updates to data structures such as vectors, especially in a manner that is non-linear or requires contiguous memory operations, can slow down performance."
   - **Implementation Insight**: The code modifies `sv` and `sv_sub` vectors frequently. With large text inputs and repeated decrements or adjustments, the cost of these operations accumulates, exacerbating slow performance.

5. **Exponential Growth of Iterations**:
   - **Invariant Description**: "When iterative constructs (like indefinite loops) have exponentially growing conditions, they can significantly slow down execution, especially if a terminating condition takes a large number of steps to be satisfied."
   - **Implementation Insight**: The loop starting with `for (;; i++)` in the code indicates an unbounded loop that continues until a condition is satisfied, potentially taking numerous iterations for complex or large inputs.

### Considerations

- **Avoid Hardcoded Values**: When generating conditions or thresholds, ensure they relate to the problem constraints, like string length, but do not hardcode specific values from slow inputs.
- **Efficient Checks**: Condition checks or invariant validations should not be placed within tight loops or performance-critical paths to avoid further degradation of performance.
- **Broad Applicability**: The described conditions should be broad enough to apply to various input sizes or structures within problem constraints but specific enough to catch realistic slow execution scenarios.

These performance-characterizing invariants help identify and predict potential performance issues in similar scenarios or future inputs, aiding in optimization and debugging efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived earlier into C++ code checks as follows:

### Phase 3: Implementing Invariants as Checker Functions

1. **Repeated String Conversion**:
   ```cpp
   void check_conversion_invariant(int conversionCalls) {
       if (conversionCalls > 50) { // Arbitrary threshold for excessive conversions
           cerr << "Warning: Performance bottleneck condition triggered due to excessive string conversions!" << endl;
           abort();
       }
   }
   ```

2. **Excessive Checks in Nested Loops**:
   ```cpp
   void check_nested_check_invariant(int nestedChecks) {
       if (nestedChecks > 1000) { // Arbitrary threshold for nested loop checks
           cerr << "Warning: Performance bottleneck condition triggered due to excessive checks in nested loops!" << endl;
           abort();
       }
   }
   ```

3. **String Matching with High Frequency**:
   ```cpp
   void check_string_matching_invariant(int matchOperations, int patSize) {
       if (matchOperations > 100 && patSize > 5) { // Arbitrary thresholds
           cerr << "Warning: Performance bottleneck condition triggered due to high-frequency string matching!" << endl;
           abort();
       }
   }
   ```

4. **Frequent Modifications to Data Structures**:
   ```cpp
   void check_modification_invariant(int modifications) {
       if (modifications > 500) { // Arbitrary threshold for modifications
           cerr << "Warning: Performance bottleneck condition triggered due to frequent modifications to data structures!" << endl;
           abort();
       }
   }
   ```

5. **Exponential Growth of Iterations**:
   ```cpp
   void check_iteration_growth_invariant(int iterations) {
       if (iterations > 100) { // Arbitrary threshold for iteration count
           cerr << "Warning: Performance bottleneck condition triggered due to exponential growth of iterations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Functions into the Original Program

Below is the instrumented C++ code that includes the checker functions at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

string txt, pat;
string con(int x) {
    static int conversionCalls = 0; // Counter for string conversions
    conversionCalls++;
    check_conversion_invariant(conversionCalls);

    stringstream ss;
    ss << x;
    return ss.str();
}

int sv_sub[1000005][10];
int F[1000005];

void fail() {
    int i = 0, j = -1;
    F[0] = -1;
    while (i < pat.size()) {
        while (j >= 0 && pat[i] != pat[j]) j = F[j];
        i++, j++;
        F[i] = j;
    }
}

vector<int> sv2;

bool chk(int sz, vector<int> sv) {
    static int nestedChecks = 0; // Counter for nested loop checks
    nestedChecks++;
    check_nested_check_invariant(nestedChecks);

    string sz_s = con(sz);
    for (char c : sz_s) sv[c - '0']--;
    int cnt = 0;
    for (int i = 0; i < 10; i++) cnt += sv[i];
    if (cnt != sz) return 0;
    for (int i = 0; i <= 9; i++)
        if (sv[i] < 0) return 0;
    for (int i = 0; i <= 9; i++)
        if (sv[i] < sv2[i]) return 0;
    for (int i = 1; i <= 9; i++)
        if (sv[i]) return 1;
    return 0;
}

vector<int> sv;

void get_txt(int sz) {
    string sz_s = con(sz);
    for (char c : sz_s) sv[c - '0']--;
}

bool chk(int idx, int add, int match) {
    static int matchOperations = 0; // Counter for match operations
    matchOperations++;
    check_string_matching_invariant(matchOperations, pat.size());

    auto tmp_sv = sv;
    if (!idx && !add) return 0;
    if (!tmp_sv[add]) return 0;
    tmp_sv[add]--;
    while (match >= 0 && add != (pat[match] - '0')) match = F[match];
    match++;
    for (int i = 0; i < 10; i++)
        if (tmp_sv[i] < sv_sub[match][i]) return 0;
    return 1;
}

int main() {
    cin >> txt >> pat;
    if (txt.size() == 2) {
        if (txt[0] == '1')
            txt.erase(txt.begin());
        else
            txt.erase(txt.begin() + 1);
        cout << txt << '\n';
        return 0;
    }

    sv.assign(10, 0);
    sv2.assign(10, 0);
    for (char c : txt) sv[c - '0']++;
    for (char c : pat) sv2[c - '0']++;

    int i = 1;
    for (int i = pat.size() - 1; i >= 0; i--)
        for (int j = 0; j < 10; j++)
            sv_sub[i][j] = sv_sub[i + 1][j] + (j == (pat[i] - '0'));

    int iterationCount = 0; // Counter for iterations

    for (;; i++) {
        check_iteration_growth_invariant(iterationCount);
        iterationCount++;
        if (chk(i, sv)) break;
    }

    int sz = i;
    get_txt(sz);
    string ans = "";
    int f = 0;
    i = 0;
    fail();

    while (i < sz) {
        for (int j = (i == 0); j < 10; j++) {
            if (chk(i, j, f)) {
                ans.push_back(j + '0');
                sv[j]--;
                break;
            }
        }
        while (f >= 0 && ans[i] != pat[f]) f = F[f];
        i++, f++;
        if (f == pat.size()) break;
    }

    static int modifications = 0; // Counter for modifications

    for (int i = 0; i < 10; i++) {
        check_modification_invariant(modifications);
        while (sv[i]--) {
            modifications++;
            ans.push_back('0' + i);
        }
    }

    cout << ans << '\n';
    return 0;
}

// Add the checker function implementations here
void check_conversion_invariant(int conversionCalls) {
    if (conversionCalls > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive string conversions!" << endl;
        abort();
    }
}

void check_nested_check_invariant(int nestedChecks) {
    if (nestedChecks > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive checks in nested loops!" << endl;
        abort();
    }
}

void check_string_matching_invariant(int matchOperations, int patSize) {
    if (matchOperations > 100 && patSize > 5) {
        cerr << "Warning: Performance bottleneck condition triggered due to high-frequency string matching!" << endl;
        abort();
    }
}

void check_modification_invariant(int modifications) {
    if (modifications > 500) {
        cerr << "Warning: Performance bottleneck condition triggered due to frequent modifications to data structures!" << endl;
        abort();
    }
}

void check_iteration_growth_invariant(int iterations) {
    if (iterations > 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to exponential growth of iterations!" << endl;
        abort();
    }
}
```

This instrumented code adds checkers at strategic points in the program to detect performance bottlenecks related to string conversions, nested loop checks, high-frequency string matching, excessive data structure modifications, and exponential iteration growth. The thresholds are arbitrary and should be fine-tuned based on profiling and benchmarking.

