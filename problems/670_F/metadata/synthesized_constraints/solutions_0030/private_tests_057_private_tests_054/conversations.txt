system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline int in() {
  int32_t x;
  scanf("%d", &x);
  return x;
}
inline string get() {
  char ch[1000010];
  scanf("%s", ch);
  return ch;
}
const int MAX_LG = 21;
const int maxn = 5e5 + 10;
const int base = 29;
const int mod = 1e9 + 7;
const int INF = 1e9;
inline int getlen(int x) {
  int ret = 0;
  while (x) ret++, x /= 10;
  return ret;
}
int has[20], cnt2[20], cnt[20], theln;
string res, ans, check, mini;
int32_t main() {
  string s = get(), t = get();
  if (s == "0" || s == "00") {
    cout << 0 << "\n";
    return 0;
  }
  for (int i = 1; i <= 1000000; i++) {
    int ln = getlen(i);
    if (i + ln == s.size()) {
      theln = i;
      break;
    }
  }
  for (int i = 0; i < s.size(); i++) cnt[s[i] - '0']++;
  while (theln) {
    cnt[theln % 10]--;
    theln /= 10;
  }
  for (int i = 0; i < t.size(); i++) cnt[t[i] - '0']--;
  for (int i = 0; i <= 10; i++) cnt2[i] = cnt[i];
  for (int i = 0; i <= 9; i++)
    while (cnt2[i]) cnt2[i]--, mini += char(i + '0');
  int lim = -1;
  if (!cnt[0]) {
    for (int i = 1; i <= 9; i++) {
      while (cnt[i]) {
        res += char('1' + i - 1);
        cnt[i]--;
      }
    }
  } else {
    int mrk = -1;
    for (int i = 1; i <= 9; i++) {
      if (cnt[i]) {
        mrk = i;
        cnt[i]--;
        break;
      }
    }
    if (mrk != -1) res += char('1' + mrk - 1);
    for (int i = 0; i <= 9; i++) {
      while (cnt[i]) {
        res += char('1' + i - 1);
        cnt[i]--;
      }
    }
  }
  if (res.size() >= 2 && res[1] == '0')
    for (int j = 1; j < res.size() && res[j] == '0'; j++) lim = j;
  if (!res.size()) {
    cout << t << "\n";
    return 0;
  }
  for (int i = 0; i < res.size(); i++) has[res[i] - '0']++;
  if (res[0] == '0') {
    cout << t << res << "\n";
    return 0;
  }
  if (t[0] != '0') {
    ans = t + mini;
  } else {
    for (int i = 0; i <= 1e6; i++) ans += '9';
  }
  int yk = -1;
  if (t.size() > 1)
    for (int i = 1; i < t.size(); i++) {
      if (yk == -1 && t[i] != t[0]) {
        yk = t[i] - '0';
      }
    }
  if (!has[t[0] - '0']) {
    bool fl = false;
    for (int i = lim + 1; i < s.size(); i++) {
      if (s[i] > t[0]) {
        lim = max(lim, i - 1);
        break;
      }
    }
    for (int i = 0; i < res.size(); i++) {
      if (i > lim && (t[i] != '0' || i) && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  } else if (yk == -1 || yk > (t[0] - '0')) {
    bool fl = false;
    for (int i = 0; i < res.size(); i++) {
      if (res[i] > t[0]) break;
      if (res[i] == t[0]) lim = i;
    }
    for (int i = 0; i < res.size(); i++) {
      if (i > lim && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  } else {
    bool fl = false;
    for (int i = lim + 1; i < res.size(); i++) {
      if (res[i] == t[0]) {
        lim = max(lim, i - 1);
        break;
      }
    }
    for (int i = 0; i < res.size(); i++) {
      if (i > lim && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  }
  ans = min(ans, check);
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11003040044200003323519101102070252000010622902208104150200400140042011224011154237302003323632011235
0


(G.2) Fast Input

01
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline int in() { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int32_t x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &x); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline string get() { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  char ch[1000010]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%s", ch); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  return ch; /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX_LG = 21; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 5e5 + 10; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const int base = 29; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
inline int getlen(int x) { /* line 18 slow_hit_count: 99, fast_hit_count: 1 */
  int ret = 0; /* line 19 slow_hit_count: 99, fast_hit_count: 1 */
  while (x) ret++, x /= 10; /* line 20 slow_hit_count: 288, fast_hit_count: 2 */
  return ret; /* line 21 slow_hit_count: 99, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int has[20], cnt2[20], cnt[20], theln; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
string res, ans, check, mini; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  string s = get(), t = get(); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  if (s == "0" || s == "00") { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << "\n"; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 1000000; i++) { /* line 31 slow_hit_count: 99, fast_hit_count: 1 */
    int ln = getlen(i); /* line 32 slow_hit_count: 99, fast_hit_count: 1 */
    if (i + ln == s.size()) { /* line 33 slow_hit_count: 99, fast_hit_count: 1 */
      theln = i; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < s.size(); i++) cnt[s[i] - '0']++; /* line 38 slow_hit_count: 102, fast_hit_count: 3 */
  while (theln) { /* line 39 slow_hit_count: 3, fast_hit_count: 2 */
    cnt[theln % 10]--; /* line 40 slow_hit_count: 2, fast_hit_count: 1 */
    theln /= 10; /* line 41 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < t.size(); i++) cnt[t[i] - '0']--; /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i <= 10; i++) cnt2[i] = cnt[i]; /* line 44 slow_hit_count: 12, fast_hit_count: 12 */
  for (int i = 0; i <= 9; i++) /* line 45 slow_hit_count: 11, fast_hit_count: 11 */
    while (cnt2[i]) cnt2[i]--, mini += char(i + '0'); /* line 46 slow_hit_count: 108, fast_hit_count: 10 */
  int lim = -1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  if (!cnt[0]) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= 9; i++) { /* line 49 slow_hit_count: 0, fast_hit_count: 10 */
      while (cnt[i]) { /* line 50 slow_hit_count: 0, fast_hit_count: 9 */
        res += char('1' + i - 1); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        cnt[i]--; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    int mrk = -1; /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i <= 9; i++) { /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
      if (cnt[i]) { /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
        mrk = i; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
        cnt[i]--; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
        break; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    if (mrk != -1) res += char('1' + mrk - 1); /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i <= 9; i++) { /* line 65 slow_hit_count: 11, fast_hit_count: 0 */
      while (cnt[i]) { /* line 66 slow_hit_count: 107, fast_hit_count: 0 */
        res += char('1' + i - 1); /* line 67 slow_hit_count: 97, fast_hit_count: 0 */
        cnt[i]--; /* line 68 slow_hit_count: 97, fast_hit_count: 0 */
      } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  if (res.size() >= 2 && res[1] == '0') /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 1; j < res.size() && res[j] == '0'; j++) lim = j; /* line 73 slow_hit_count: 34, fast_hit_count: 0 */
  if (!res.size()) { /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
    cout << t << "\n"; /* line 75 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 76 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < res.size(); i++) has[res[i] - '0']++; /* line 78 slow_hit_count: 99, fast_hit_count: 0 */
  if (res[0] == '0') { /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
    cout << t << res << "\n"; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  if (t[0] != '0') { /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
    ans = t + mini; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i <= 1e6; i++) ans += '9'; /* line 86 slow_hit_count: 1000002, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  int yk = -1; /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
  if (t.size() > 1) /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i < t.size(); i++) { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      if (yk == -1 && t[i] != t[0]) { /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
        yk = t[i] - '0'; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  if (!has[t[0] - '0']) { /* line 95 slow_hit_count: 1, fast_hit_count: 0 */
    bool fl = false; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = lim + 1; i < s.size(); i++) { /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i] > t[0]) { /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
        lim = max(lim, i - 1); /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < res.size(); i++) { /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > lim && (t[i] != '0' || i) && !fl) { /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
        check += t; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
        fl = true; /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (yk == -1 || yk > (t[0] - '0')) { /* line 111 slow_hit_count: 1, fast_hit_count: 0 */
    bool fl = false; /* line 112 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < res.size(); i++) { /* line 113 slow_hit_count: 1, fast_hit_count: 0 */
      if (res[i] > t[0]) break; /* line 114 slow_hit_count: 1, fast_hit_count: 0 */
      if (res[i] == t[0]) lim = i; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < res.size(); i++) { /* line 117 slow_hit_count: 99, fast_hit_count: 0 */
      if (i > lim && !fl) { /* line 118 slow_hit_count: 98, fast_hit_count: 0 */
        check += t; /* line 119 slow_hit_count: 1, fast_hit_count: 0 */
        fl = true; /* line 120 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 122 slow_hit_count: 98, fast_hit_count: 0 */
    } /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 124 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
    bool fl = false; /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = lim + 1; i < res.size(); i++) { /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
      if (res[i] == t[0]) { /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
        lim = max(lim, i - 1); /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < res.size(); i++) { /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > lim && !fl) { /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
        check += t; /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
        fl = true; /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
  ans = min(ans, check); /* line 142 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 143 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 144 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the given C program and derive performance-characterizing invariants, we'll go through the phases of identifying expensive code segments and then articulate conditions under which the program slows down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level hit count comparison:**
   - The `getlen` function (lines 18-21) is called 99 times in the slow input vs. 1 time in the fast input.
   - Line 31, which contains the loop iterating up to 1,000,000, is executed 99 times in the slow input and only once in the fast input.
   - Line 86, which constructs the `ans` string by appending '9' up to 1,000,002 times, is heavily executed only in the slow input.

2. **Identifying frequent lines or loops:**
   - The loop from lines 31-37 runs significantly more times in the slow input because it attempts to match the size condition (`i + ln == s.size()`). This indicates that the loop's termination condition is associated with the input size `s.size()`.
   - Line 86 is executed for a large number of iterations (1,000,002), indicating that constructing the `ans` string by repeatedly appending '9' is computationally expensive.

3. **Interaction with input constraints:**
   - The loop in lines 31-37 is directly related to the size of the input string `s` and attempts to find a value of `theln` such that `i + ln` matches `s.size()`.
   - The excessive length of the constructed string `ans` on line 86 is contingent upon whether or not `t[0] != '0'`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above observations, we'll derive natural language invariants that describe performance conditions:

1. **Invariant on the loop iterating over potential lengths:**
   - **Natural language description:** "If the input string length is close to 1,000,000 and no early match for `theln` is found, the computation may slow due to excessive iterations searching for `theln`."
   - **Explanation:** This invariant captures the scenario where the slow input causes the loop to iterate nearly the entire range due to `s.size()` being large and no early termination, leading to performance degradation.

2. **Invariant on constructing the `ans` string:**
   - **Natural language description:** "If the substring `t` has a leading '0', and other conditions lead to constructing a large result string filled with '9's, this can lead to slowdowns due to excessive string operations."
   - **Explanation:** This invariant highlights that excessive concatenation operations occur when filling `ans` with '9', especially if `t` starts with zero, and no other conditions prevent this.

3. **General invariant on string operations:**
   - **Natural language description:** "If constructing or modifying strings involves operations proportional to large input constraints, performance can degrade substantially due to high overhead in string manipulation."
   - **Explanation:** This invariant suggests that operations heavily dependent on input size, like those modifying strings based on the input, can lead to significant slowdowns.

These invariants focus on understanding the conditions leading to slow execution paths and highlight potential inefficiencies in loops and string operations, especially under large input sizes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Invariants as Runtime Checks

Here, we will translate the derived natural language invariants into C++ checker code. These checks will help identify conditions leading to performance bottlenecks.

### Invariant Checker for Loop Iterating Over Potential Lengths

**Natural language invariant:** If the input string length is close to 1,000,000 and no early match for `theln` is found, the computation may slow due to excessive iterations searching for `theln`.

**C++ code implementing this invariant:**

```cpp
void check_thelength_invariant(int s_size, int i) {
    if (s_size >= 999000 && i >= 999000) {
        cerr << "Warning: thelength_invariant triggered - excessive iterations searching for length" << endl;
        abort();
    }
}
```

### Invariant Checker for Constructing the `ans` String

**Natural language invariant:** If the substring `t` has a leading '0', and other conditions lead to constructing a large result string filled with '9's, this can lead to slowdowns due to excessive string operations.

**C++ code implementing this invariant:**

```cpp
void check_ans_string_invariant(const string& t, int ans_size) {
    if (t[0] == '0' && ans_size > 1000000) {
        cerr << "Warning: ans_string_invariant triggered - constructing excessively large string" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Original Program

The checker code will be embedded at the appropriate locations in the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

inline string get() {
    char ch[1000010];
    scanf("%s", ch);
    return ch;
}

inline int getlen(int x) {
    int ret = 0;
    while (x) ret++, x /= 10;
    return ret;
}

// Checker for excessive iterations in the length calculation loop
void check_thelength_invariant(int s_size, int i) {
    if (s_size >= 999000 && i >= 999000) {
        cerr << "Warning: thelength_invariant triggered - excessive iterations searching for length" << endl;
        abort();
    }
}

// Checker for constructing an excessively large string `ans`
void check_ans_string_invariant(const string& t, int ans_size) {
    if (t[0] == '0' && ans_size > 1000000) {
        cerr << "Warning: ans_string_invariant triggered - constructing excessively large string" << endl;
        abort();
    }
}

int has[20], cnt2[20], cnt[20], theln;
string res, ans, check, mini;

int32_t main() {
    string s = get(), t = get();
    
    // Early return for trivial cases
    if (s == "0" || s == "00") {
        cout << 0 << "\n";
        return 0;
    }

    // Loop to determine theln
    for (int i = 1; i <= 1000000; i++) {
        int ln = getlen(i);
        check_thelength_invariant(s.size(), i);  // Check for excessive iterations
        if (i + ln == s.size()) {
            theln = i;
            break;
        }
    }

    for (int i = 0; i < s.size(); i++) cnt[s[i] - '0']++;
    while (theln) {
        cnt[theln % 10]--;
        theln /= 10;
    }
    for (int i = 0; i < t.size(); i++) cnt[t[i] - '0']--;
    for (int i = 0; i <= 10; i++) cnt2[i] = cnt[i];
    for (int i = 0; i <= 9; i++)
        while (cnt2[i]) cnt2[i]--, mini += char(i + '0');
    
    int lim = -1;
    if (!cnt[0]) {
        for (int i = 1; i <= 9; i++) {
            while (cnt[i]) {
                res += char('1' + i - 1);
                cnt[i]--;
            }
        }
    } else {
        int mrk = -1;
        for (int i = 1; i <= 9; i++) {
            if (cnt[i]) {
                mrk = i;
                cnt[i]--;
                break;
            }
        }
        if (mrk != -1) res += char('1' + mrk - 1);
        for (int i = 0; i <= 9; i++) {
            while (cnt[i]) {
                res += char('1' + i - 1);
                cnt[i]--;
            }
        }
    }
    
    if (res.size() >= 2 && res[1] == '0')
        for (int j = 1; j < res.size() && res[j] == '0'; j++) lim = j;

    if (!res.size()) {
        cout << t << "\n";
        return 0;
    }

    for (int i = 0; i < res.size(); i++) has[res[i] - '0']++;
    
    if (res[0] == '0') {
        cout << t << res << "\n";
        return 0;
    }
    
    // Constructing ans based on t and mini
    if (t[0] != '0') {
        ans = t + mini;
    } else {
        for (int i = 0; i <= 1e6; i++) ans += '9';
        check_ans_string_invariant(t, ans.size());  // Check for large `ans` construction
    }

    int yk = -1;
    if (t.size() > 1)
        for (int i = 1; i < t.size(); i++) {
            if (yk == -1 && t[i] != t[0]) {
                yk = t[i] - '0';
            }
        }

    if (!has[t[0] - '0']) {
        bool fl = false;
        for (int i = lim + 1; i < s.size(); i++) {
            if (s[i] > t[0]) {
                lim = max(lim, i - 1);
                break;
            }
        }
        for (int i = 0; i < res.size(); i++) {
            if (i > lim && (t[i] != '0' || i) && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    } else if (yk == -1 || yk > (t[0] - '0')) {
        bool fl = false;
        for (int i = 0; i < res.size(); i++) {
            if (res[i] > t[0]) break;
            if (res[i] == t[0]) lim = i;
        }
        for (int i = 0; i < res.size(); i++) {
            if (i > lim && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    } else {
        bool fl = false;
        for (int i = lim + 1; i < res.size(); i++) {
            if (res[i] == t[0]) {
                lim = max(lim, i - 1);
                break;
            }
        }
        for (int i = 0; i < res.size(); i++) {
            if (i > lim && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    }
    
    ans = min(ans, check);
    cout << ans << "\n";
}
```

### Explanation of the Integrated Checks

- **`check_thelength_invariant`:** This check is placed inside the loop that runs up to 1,000,000 times to find a matching length (`theln`). It ensures that we do not perform excessive iterations that could lead to performance issues.
  
- **`check_ans_string_invariant`:** This check is positioned after the construction of the `ans` string when `t[0]` is '0', ensuring we do not build an excessively large string, which could significantly slow down the program.

By embedding these checks, the program can flag potential performance bottlenecks during execution, which can be particularly useful for testing or during fuzzer-based evaluations.

