system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int cnt[11];
int cnt2[11];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  string s;
  cin >> s;
  if (s == "01" || s == "10") {
    cout << 0 << '\n';
    return 0;
  }
  int len = 1;
  for (;; ++len) {
    stringstream ss;
    ss << len;
    string q = ss.str();
    if (len == (int)s.size() - q.size()) {
      break;
    }
  }
  for (int i = 0; i < s.size(); ++i) {
    ++cnt[s[i] - '0'];
  }
  stringstream ss;
  ss << len;
  string q = ss.str();
  for (int i = 0; i < q.size(); ++i) {
    --cnt[q[i] - '0'];
  }
  string s2;
  cin >> s2;
  for (int i = 0; i < s2.size(); ++i) {
    ++cnt2[s2[i] - '0'];
  }
  string ans;
  string ans2 = s2;
  if (s2[0] != '0') {
    for (int i = 0; i < 10; ++i) {
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans2.push_back(i + '0');
    }
  } else {
    ans2.clear();
    for (int i = 0; i < len; ++i) {
      ans2.push_back('9');
    }
  }
  int qq = 1;
  for (int i = 0; i < s2.size(); ++i) {
    if (s2[i] != s2[0]) {
      if (s2[i] < s2[0]) {
        qq = 0;
        break;
      }
      if (s2[i] > s2[0]) {
        qq = 2;
        break;
      }
    }
  }
  if (cnt[0] > 0) {
    for (int i = 1; i < 10; ++i) {
      if (cnt[i] > cnt2[i]) {
        --cnt[i];
        ans.push_back(i + '0');
        goto ohi3;
      }
    }
    cout << ans2 << '\n';
    return 0;
  ohi3:;
  }
  if (qq == 0) {
    for (int i = 0; i < 10; ++i) {
      if (i + '0' == s2[0]) {
        for (int j = 0; j < s2.size(); ++j) {
          ans.push_back(s2[j]);
        }
      }
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0');
    }
  } else {
    for (int i = 0; i < 10; ++i) {
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0');
      if (i + '0' == s2[0]) {
        for (int j = 0; j < s2.size(); ++j) {
          ans.push_back(s2[j]);
        }
      }
    }
  }
  ans = min(ans, ans2);
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11003040044200003323519101102070252000010622902208104150200400140042011224011154237302003323632011235
0


(G.2) Fast Input

01
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[11]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int cnt2[11]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> s; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  if (s == "01" || s == "10") { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << '\n'; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  int len = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
  for (;; ++len) { /* line 15 slow_hit_count: 98, fast_hit_count: 0 */
    stringstream ss; /* line 16 slow_hit_count: 99, fast_hit_count: 0 */
    ss << len; /* line 17 slow_hit_count: 99, fast_hit_count: 0 */
    string q = ss.str(); /* line 18 slow_hit_count: 99, fast_hit_count: 0 */
    if (len == (int)s.size() - q.size()) { /* line 19 slow_hit_count: 99, fast_hit_count: 0 */
      break; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 98, fast_hit_count: 0 */
  for (int i = 0; i < s.size(); ++i) { /* line 23 slow_hit_count: 102, fast_hit_count: 0 */
    ++cnt[s[i] - '0']; /* line 24 slow_hit_count: 101, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream ss; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  ss << len; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  string q = ss.str(); /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < q.size(); ++i) { /* line 29 slow_hit_count: 3, fast_hit_count: 0 */
    --cnt[q[i] - '0']; /* line 30 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  string s2; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  cin >> s2; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < s2.size(); ++i) { /* line 34 slow_hit_count: 2, fast_hit_count: 0 */
    ++cnt2[s2[i] - '0']; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  string ans; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
  string ans2 = s2; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  if (s2[0] != '0') { /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < 10; ++i) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans2.push_back(i + '0'); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    ans2.clear(); /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < len; ++i) { /* line 45 slow_hit_count: 100, fast_hit_count: 0 */
      ans2.push_back('9'); /* line 46 slow_hit_count: 99, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  int qq = 1; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < s2.size(); ++i) { /* line 50 slow_hit_count: 2, fast_hit_count: 0 */
    if (s2[i] != s2[0]) { /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
      if (s2[i] < s2[0]) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        qq = 0; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (s2[i] > s2[0]) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        qq = 2; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt[0] > 0) { /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i < 10; ++i) { /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
      if (cnt[i] > cnt2[i]) { /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
        --cnt[i]; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
        ans.push_back(i + '0'); /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
        goto ohi3; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans2 << '\n'; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  ohi3:; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  if (qq == 0) { /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < 10; ++i) { /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
      if (i + '0' == s2[0]) { /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
        for (int j = 0; j < s2.size(); ++j) { /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
          ans.push_back(s2[j]); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0'); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < 10; ++i) { /* line 84 slow_hit_count: 11, fast_hit_count: 0 */
      for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0'); /* line 85 slow_hit_count: 107, fast_hit_count: 0 */
      if (i + '0' == s2[0]) { /* line 86 slow_hit_count: 10, fast_hit_count: 0 */
        for (int j = 0; j < s2.size(); ++j) { /* line 87 slow_hit_count: 2, fast_hit_count: 0 */
          ans.push_back(s2[j]); /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  ans = min(ans, ans2); /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 94 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 95 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C++ program, we need to examine the line-level hit counts and identify segments of code that are executed significantly more times with the slow input compared to the fast input.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts, the following observations can be made:

1. **Line 15-22 (`for (;;) ++len`)**:
   - This loop executes 98 times for the slow input but not at all for the fast input. The loop is calculating the length of the number `n` based on the size of the input string `s` minus the number of digits in the length itself.
   - This indicates that the slow input `s` is significantly larger than the fast input, which causes this loop to iterate many more times.

2. **Line 23-25**:
   - The loop iterating over the entire string `s` (`s.size()` times) is executed 102 times for the slow input and not at all for the fast input.
   - This line counts the occurrences of each digit in the string `s`, suggesting that `s` is large in the slow input case, contributing to increased runtime.

3. **Line 45-47**:
   - This loop executes 100 times during the slow run but not at all during the fast run. It constructs a string of nines the same length as `len` when `s2` starts with '0'.

4. **Line 84-91**:
   - This outer loop over digits 0 to 9 is hit 11 times, and the inner operations (Line 85) are executed extensively, suggesting loops within loops are contributing to the slowdown by repeating the digit counting and construction.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, we can derive the following natural language performance invariants:

1. **Invariant #1: Large Input Size Iteration**
   - Natural Language: "If the size of the input string `s` is close to the upper limit (1,000,000 characters), the computation of `len` becomes expensive due to repeated conversions and comparisons."
   - This invariant captures the expensive computation in lines 15-22 due to large input size.

2. **Invariant #2: Extensive Character Counting**
   - Natural Language: "When the input string `s` contains numerous digits, particularly when close to the maximum size limit, counting digit occurrences across the entire string results in increased overhead."
   - This describes the inefficiencies in lines 23-25 when `s` is large.

3. **Invariant #3: Large String Construction**
   - Natural Language: "If the remembered substring `s2` starts with '0' and the calculated length `len` is large, constructing a string of nines of this length can significantly increase execution time."
   - This invariant explains the performance hit observed in lines 45-47.

4. **Invariant #4: Nested Loop Complexity**
   - Natural Language: "When processing all digits from 0 to 9, if internal operations are dependent on large difference counts, nested loops incur substantial execution time."
   - This captures the nested loop inefficiency seen in lines 84-91.

These invariants aim to generalize the conditions under which the program may slow down, focusing on input characteristics such as size and structure rather than specific values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Invariants

Let's translate the natural language performance invariants into C++ runtime checks.

#### Invariant #1: Large Input Size Iteration

```cpp
void check_large_input_invariant(size_t inputSize) {
    if (inputSize > 100000) { // Arbitrary threshold less than the maximum allowed size
        cerr << "Warning: Large input invariant triggered - input size close to limit!" << endl;
        abort();
    }
}
```

#### Invariant #2: Extensive Character Counting

```cpp
void check_character_counting_invariant(size_t sSize) {
    if (sSize > 100000) { // Arbitrary threshold less than the maximum allowed size
        cerr << "Warning: Character counting invariant triggered - processing large input string!" << endl;
        abort();
    }
}
```

#### Invariant #3: Large String Construction

```cpp
void check_large_string_construction_invariant(int len) {
    if (len > 100000) { // Arbitrary threshold
        cerr << "Warning: Large string construction invariant triggered - constructing large sequence!" << endl;
        abort();
    }
}
```

#### Invariant #4: Nested Loop Complexity

```cpp
void check_nested_loop_invariant(int cntSize) {
    if (cntSize > 100) { // Threshold for digit counts
        cerr << "Warning: Nested loop invariant triggered - excessive digit operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the C++ Program

Below is the instrumented C++ code with the checker functions integrated effectively:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_input_invariant(size_t inputSize) {
    if (inputSize > 100000) { // Arbitrary threshold
        cerr << "Warning: Large input invariant triggered - input size close to limit!" << endl;
        abort();
    }
}

void check_character_counting_invariant(size_t sSize) {
    if (sSize > 100000) { // Arbitrary threshold
        cerr << "Warning: Character counting invariant triggered - processing large input string!" << endl;
        abort();
    }
}

void check_large_string_construction_invariant(int len) {
    if (len > 100000) { // Arbitrary threshold
        cerr << "Warning: Large string construction invariant triggered - constructing large sequence!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int cntSize) {
    if (cntSize > 100) { // Threshold for digit counts
        cerr << "Warning: Nested loop invariant triggered - excessive digit operations!" << endl;
        abort();
    }
}

int cnt[11];
int cnt2[11];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    string s;
    cin >> s;

    // Check for large input size
    check_large_input_invariant(s.size());
    
    if (s == "01" || s == "10") {
        cout << 0 << '\n';
        return 0;
    }

    int len = 1;
    for (;; ++len) {
        stringstream ss;
        ss << len;
        string q = ss.str();
        if (len == (int)s.size() - q.size()) {
            break;
        }
    }
    
    // Check for large string construction
    check_large_string_construction_invariant(len);

    for (int i = 0; i < s.size(); ++i) {
        ++cnt[s[i] - '0'];
    }

    // Check for extensive character counting
    check_character_counting_invariant(s.size());

    stringstream ss;
    ss << len;
    string q = ss.str();
    for (int i = 0; i < q.size(); ++i) {
        --cnt[q[i] - '0'];
    }
    
    string s2;
    cin >> s2;
    for (int i = 0; i < s2.size(); ++i) {
        ++cnt2[s2[i] - '0'];
    }
    
    string ans;
    string ans2 = s2;
    if (s2[0] != '0') {
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans2.push_back(i + '0');
        }
    } else {
        ans2.clear();
        for (int i = 0; i < len; ++i) {
            ans2.push_back('9');
        }
    }

    int qq = 1;
    for (int i = 0; i < s2.size(); ++i) {
        if (s2[i] != s2[0]) {
            if (s2[i] < s2[0]) {
                qq = 0;
                break;
            }
            if (s2[i] > s2[0]) {
                qq = 2;
                break;
            }
        }
    }

    if (cnt[0] > 0) {
        for (int i = 1; i < 10; ++i) {
            if (cnt[i] > cnt2[i]) {
                --cnt[i];
                ans.push_back(i + '0');
                goto ohi3;
            }
        }
        cout << ans2 << '\n';
        return 0;
    ohi3:;
    }

    if (qq == 0) {
        for (int i = 0; i < 10; ++i) {
            if (i + '0' == s2[0]) {
                for (int j = 0; j < s2.size(); ++j) {
                    ans.push_back(s2[j]);
                }
            }
            for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0');
        }
    } else {
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < cnt[i] - cnt2[i]; ++j) ans.push_back(i + '0');
            if (i + '0' == s2[0]) {
                for (int j = 0; j < s2.size(); ++j) {
                    ans.push_back(s2[j]);
                }
            }
        }
    }

    ans = min(ans, ans2);
    cout << ans << '\n';
}
```

### Notes

- **Check Points**: The checks are placed after significant computational steps, like reading the input size, to catch potential bottlenecks before executing the main algorithm.
- **Thresholds**: The thresholds in the checker functions (e.g., 100,000) are arbitrary but reasonable values to ensure they trigger for large input sizes or operations while adhering to the constraints of the problem.
- **Avoiding Overhead**: Checks are strategically placed outside of tight loops to prevent additional performance overhead.

