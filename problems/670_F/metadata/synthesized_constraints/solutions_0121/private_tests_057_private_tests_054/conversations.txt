system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int sum[10], S[1000010], T[1000010], len, n, m;
int c1[1000010], c2[1000010], c3[1000010], ans[1000010];
char ch[1000010];
bool judge(int l) {
  int tmp[10], t = 0, ll = l;
  memset(tmp, 0, sizeof(tmp));
  while (l) {
    t++;
    tmp[l % 10]++;
    l /= 10;
  }
  for (int i = 0; i <= 9; i++)
    if (sum[i] < tmp[i]) return false;
  if (n - t != ll) return false;
  for (int i = 0; i <= 9; i++) sum[i] -= tmp[i];
  for (int i = 1; i <= m; i++) sum[T[i]]--;
  return true;
}
bool cmp(int a[], int b[]) {
  for (int i = 1; i <= len; i++) {
    if (a[i] == b[i]) continue;
    if (a[i] < b[i])
      return true;
    else
      return false;
  }
  return true;
}
int main() {
  scanf("%s", ch + 1);
  n = strlen(ch + 1);
  for (int i = 1; i <= n; i++) S[i] = ch[i] - '0';
  scanf("%s", ch + 1);
  m = strlen(ch + 1);
  for (int i = 1; i <= m; i++) T[i] = ch[i] - '0';
  for (int i = 1; i <= n; i++) sum[S[i]]++;
  for (int i = 1; i <= n; i++) {
    if (judge(i)) {
      len = i;
      break;
    }
  }
  if (len == 1 && T[1] == 0) {
    printf("0\n");
    return 0;
  }
  if (T[1] == 0) {
    c1[1] = 0x3f3f3f3f;
  } else {
    for (int i = 1; i <= m; i++) c1[i] = T[i];
    int tot = m;
    for (int i = 0; i <= 9; i++) {
      for (int j = 1; j <= sum[i]; j++) {
        c1[++tot] = i;
      }
    }
  }
  for (int i = 1; i <= 9; i++) {
    int tot2 = 0, tot3 = 0;
    if (sum[i] != 0) {
      sum[i]--;
      c2[++tot2] = i;
      c3[++tot3] = i;
      for (int j = 0; j <= 9; j++) {
        if (j != T[1]) {
          for (int k = 1; k <= sum[j]; k++) {
            c2[++tot2] = j;
          }
          for (int k = 1; k <= sum[j]; k++) {
            c3[++tot3] = j;
          }
        } else {
          for (int k = 1; k <= sum[j]; k++) {
            c2[++tot2] = j;
          }
          for (int k = 1; k <= m; k++) {
            c2[++tot2] = T[k];
          }
          for (int k = 1; k <= m; k++) {
            c3[++tot3] = T[k];
          }
          for (int k = 1; k <= sum[j]; k++) {
            c3[++tot3] = j;
          }
        }
      }
      break;
    }
  }
  if (c2[1] == 0) {
    c2[1] = 0x3f3f3f3f;
    c3[1] = 0x3f3f3f3f;
  }
  ans[1] = 0x3f3f3f3f;
  if (cmp(c1, ans)) memcpy(ans, c1, sizeof(ans));
  if (cmp(c2, ans)) memcpy(ans, c2, sizeof(ans));
  if (cmp(c3, ans)) memcpy(ans, c3, sizeof(ans));
  for (int i = 1; i <= len; i++) printf("%d", ans[i]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11003040044200003323519101102070252000010622902208104150200400140042011224011154237302003323632011235
0


(G.2) Fast Input

01
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int sum[10], S[1000010], T[1000010], len, n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int c1[1000010], c2[1000010], c3[1000010], ans[1000010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char ch[1000010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool judge(int l) { /* line 6 slow_hit_count: 99, fast_hit_count: 1 */
  int tmp[10], t = 0, ll = l; /* line 7 slow_hit_count: 99, fast_hit_count: 1 */
  memset(tmp, 0, sizeof(tmp)); /* line 8 slow_hit_count: 99, fast_hit_count: 1 */
  while (l) { /* line 9 slow_hit_count: 288, fast_hit_count: 2 */
    t++; /* line 10 slow_hit_count: 189, fast_hit_count: 1 */
    tmp[l % 10]++; /* line 11 slow_hit_count: 189, fast_hit_count: 1 */
    l /= 10; /* line 12 slow_hit_count: 189, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 9; i++) /* line 14 slow_hit_count: 1087, fast_hit_count: 11 */
    if (sum[i] < tmp[i]) return false; /* line 15 slow_hit_count: 989, fast_hit_count: 10 */
  if (n - t != ll) return false; /* line 16 slow_hit_count: 98, fast_hit_count: 1 */
  for (int i = 0; i <= 9; i++) sum[i] -= tmp[i]; /* line 17 slow_hit_count: 11, fast_hit_count: 11 */
  for (int i = 1; i <= m; i++) sum[T[i]]--; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  return true; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(int a[], int b[]) { /* line 21 slow_hit_count: 3, fast_hit_count: 0 */
  for (int i = 1; i <= len; i++) { /* line 22 slow_hit_count: 201, fast_hit_count: 0 */
    if (a[i] == b[i]) continue; /* line 23 slow_hit_count: 199, fast_hit_count: 0 */
    if (a[i] < b[i]) /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
      return true; /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
    else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      return false; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 29 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", ch + 1); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  n = strlen(ch + 1); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) S[i] = ch[i] - '0'; /* line 34 slow_hit_count: 102, fast_hit_count: 3 */
  scanf("%s", ch + 1); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  m = strlen(ch + 1); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) T[i] = ch[i] - '0'; /* line 37 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= n; i++) sum[S[i]]++; /* line 38 slow_hit_count: 102, fast_hit_count: 3 */
  for (int i = 1; i <= n; i++) { /* line 39 slow_hit_count: 99, fast_hit_count: 1 */
    if (judge(i)) { /* line 40 slow_hit_count: 99, fast_hit_count: 1 */
      len = i; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  if (len == 1 && T[1] == 0) { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    printf("0\n"); /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  if (T[1] == 0) { /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
    c1[1] = 0x3f3f3f3f; /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) c1[i] = T[i]; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    int tot = m; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i <= 9; i++) { /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 1; j <= sum[i]; j++) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
        c1[++tot] = i; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 9; i++) { /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
    int tot2 = 0, tot3 = 0; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
    if (sum[i] != 0) { /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
      sum[i]--; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
      c2[++tot2] = i; /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
      c3[++tot3] = i; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
      for (int j = 0; j <= 9; j++) { /* line 66 slow_hit_count: 11, fast_hit_count: 0 */
        if (j != T[1]) { /* line 67 slow_hit_count: 10, fast_hit_count: 0 */
          for (int k = 1; k <= sum[j]; k++) { /* line 68 slow_hit_count: 73, fast_hit_count: 0 */
            c2[++tot2] = j; /* line 69 slow_hit_count: 64, fast_hit_count: 0 */
          } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
          for (int k = 1; k <= sum[j]; k++) { /* line 71 slow_hit_count: 73, fast_hit_count: 0 */
            c3[++tot3] = j; /* line 72 slow_hit_count: 64, fast_hit_count: 0 */
          } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
          for (int k = 1; k <= sum[j]; k++) { /* line 75 slow_hit_count: 34, fast_hit_count: 0 */
            c2[++tot2] = j; /* line 76 slow_hit_count: 33, fast_hit_count: 0 */
          } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
          for (int k = 1; k <= m; k++) { /* line 78 slow_hit_count: 2, fast_hit_count: 0 */
            c2[++tot2] = T[k]; /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
          } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
          for (int k = 1; k <= m; k++) { /* line 81 slow_hit_count: 2, fast_hit_count: 0 */
            c3[++tot3] = T[k]; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
          } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
          for (int k = 1; k <= sum[j]; k++) { /* line 84 slow_hit_count: 34, fast_hit_count: 0 */
            c3[++tot3] = j; /* line 85 slow_hit_count: 33, fast_hit_count: 0 */
          } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  if (c2[1] == 0) { /* line 92 slow_hit_count: 1, fast_hit_count: 0 */
    c2[1] = 0x3f3f3f3f; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    c3[1] = 0x3f3f3f3f; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  ans[1] = 0x3f3f3f3f; /* line 96 slow_hit_count: 1, fast_hit_count: 0 */
  if (cmp(c1, ans)) memcpy(ans, c1, sizeof(ans)); /* line 97 slow_hit_count: 1, fast_hit_count: 0 */
  if (cmp(c2, ans)) memcpy(ans, c2, sizeof(ans)); /* line 98 slow_hit_count: 1, fast_hit_count: 0 */
  if (cmp(c3, ans)) memcpy(ans, c3, sizeof(ans)); /* line 99 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= len; i++) printf("%d", ans[i]); /* line 100 slow_hit_count: 100, fast_hit_count: 0 */
  return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottlenecks in the given C program, let's analyze the code and hit count information. We will then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The `judge` function is called 99 times for the slow input and only once for the fast input, with the loop inside (`while (l)`) being executed 189 times for the slow input.
   - The line `for (int i = 0; i <= 9; i++) if (sum[i] < tmp[i]) return false;` is hit 989 times for the slow input, indicating a repeated check.
   - The `cmp` function is called 3 times for the slow input and not at all for the fast input, indicating a potentially costly comparison routine.
   - Lines leading to forming and comparing permutations (`for` loops starting at lines 60 and 66) are hit multiple times, suggesting inefficiencies in handling permutations of digits.

2. **Functional Analysis**:
   - The `judge` function is heavily used to verify potential lengths of the original number `n`. Given the prolonged execution for the slow input, repeatedly evaluating this condition suggests complexity.
   - The nested loops (lines 66 to 88) suggest the creation and manipulation of digit sequences, which becomes costly as it involves multiple checks and updates to arrays `c2` and `c3`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Length Check in `judge`**:
   - **Natural Language**: "If the number of calls to check potential lengths of `n` grows significantly, performance may degrade. This is especially true if the input string is large, causing repetitive digit analysis."
   - **Code Hint**: This can be monitored by checking if the length of the input string is beyond a certain threshold, causing excessive calls to `judge`.

2. **Invariant on Array and Loop Interactions**:
   - **Natural Language**: "When the program engages in multiple permutations of digit sequences, especially during nested loops, performance may degrade. This is likely when the input string has many repeated or similar digits."
   - **Code Hint**: Track the number of unique permutations created and manipulated, especially if repeated for large input sizes.

3. **Invariant on Digit Counting and Sorting**:
   - **Natural Language**: "If the program repeatedly evaluates and compares digit sequences, performance may degrade due to excessive computational overhead. This effect amplifies when the input contains many similar digits."
   - **Code Hint**: Check how frequently digit sequences are checked and compared, and avoid unnecessary reevaluations.

4. **Invariant on Sorting and Comparison**:
   - **Natural Language**: "Frequent sorting and comparison of digit sequences can slow down the computation, particularly when processing larger permutations."
   - **Code Hint**: Limit the depth and frequency of sorting operations, especially in loops iterating over digit sets.

### Output Summary

- The slowdown is primarily due to excessive checks and manipulations of digit sequences, exacerbated by large input sizes that trigger repeated calls to `judge` and permutations in nested loops.
- Monitoring the size of the input and the frequency of digit operations can help identify when these performance bottlenecks might occur, and safeguards can be set based on these conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, I will translate the identified natural language invariants into C++ code that can be used to check these conditions at runtime.

#### Invariant 1: Length Check in `judge`

```cpp
void check_length_invariant(int judgeCalls, int threshold) {
    if (judgeCalls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to judge function!" << endl;
        abort();
    }
}
```

#### Invariant 2: Array and Loop Interactions for Permutations

```cpp
void check_permutation_invariant(int uniquePermutations, int threshold) {
    if (uniquePermutations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive permutations of digit sequences!" << endl;
        abort();
    }
}
```

#### Invariant 3: Digit Counting and Sorting

```cpp
void check_digit_sort_invariant(int sortOperations, int threshold) {
    if (sortOperations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive digit sorting operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Here, I'll integrate the above checkers into the provided C++ code. I'll strategically place these checks to ensure they do not interfere with the performance of the program.

```cpp
#include <bits/stdc++.h>
using namespace std;

int sum[10], S[1000010], T[1000010], len, n, m;
int c1[1000010], c2[1000010], c3[1000010], ans[1000010];
char ch[1000010];
int judgeCallCount = 0; // Counter for judge function calls
int permutationCount = 0; // Counter for permutations attempted
int sortOperationCount = 0; // Counter for sorting operations

// Checker functions from Phase 3
void check_length_invariant(int judgeCalls, int threshold) {
    if (judgeCalls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to judge function!" << endl;
        abort();
    }
}

void check_permutation_invariant(int uniquePermutations, int threshold) {
    if (uniquePermutations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive permutations of digit sequences!" << endl;
        abort();
    }
}

void check_digit_sort_invariant(int sortOperations, int threshold) {
    if (sortOperations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive digit sorting operations!" << endl;
        abort();
    }
}

bool judge(int l) {
    int tmp[10], t = 0, ll = l;
    memset(tmp, 0, sizeof(tmp));
    while (l) {
        t++;
        tmp[l % 10]++;
        l /= 10;
    }
    for (int i = 0; i <= 9; i++)
        if (sum[i] < tmp[i]) return false;
    if (n - t != ll) return false;
    for (int i = 0; i <= 9; i++) sum[i] -= tmp[i];
    for (int i = 1; i <= m; i++) sum[T[i]]--;
    judgeCallCount++; // Increment the judge call count
    return true;
}

bool cmp(int a[], int b[]) {
    for (int i = 1; i <= len; i++) {
        if (a[i] == b[i]) continue;
        if (a[i] < b[i])
            return true;
        else
            return false;
    }
    return true;
}

int main() {
    scanf("%s", ch + 1);
    n = strlen(ch + 1);
    for (int i = 1; i <= n; i++) S[i] = ch[i] - '0';
    scanf("%s", ch + 1);
    m = strlen(ch + 1);
    for (int i = 1; i <= m; i++) T[i] = ch[i] - '0';
    for (int i = 1; i <= n; i++) sum[S[i]]++;

    // Check length invariant before proceeding
    check_length_invariant(judgeCallCount, 100); // Example threshold

    for (int i = 1; i <= n; i++) {
        if (judge(i)) {
            len = i;
            break;
        }
    }

    if (len == 1 && T[1] == 0) {
        printf("0\n");
        return 0;
    }

    if (T[1] == 0) {
        c1[1] = 0x3f3f3f3f;
    } else {
        for (int i = 1; i <= m; i++) c1[i] = T[i];
        int tot = m;
        for (int i = 0; i <= 9; i++) {
            for (int j = 1; j <= sum[i]; j++) {
                c1[++tot] = i;
            }
        }
    }

    check_permutation_invariant(permutationCount, 1000); // Example threshold

    for (int i = 1; i <= 9; i++) {
        int tot2 = 0, tot3 = 0;
        if (sum[i] != 0) {
            sum[i]--;
            c2[++tot2] = i;
            c3[++tot3] = i;
            for (int j = 0; j <= 9; j++) {
                if (j != T[1]) {
                    for (int k = 1; k <= sum[j]; k++) {
                        c2[++tot2] = j;
                    }
                    for (int k = 1; k <= sum[j]; k++) {
                        c3[++tot3] = j;
                    }
                } else {
                    for (int k = 1; k <= sum[j]; k++) {
                        c2[++tot2] = j;
                    }
                    for (int k = 1; k <= m; k++) {
                        c2[++tot2] = T[k];
                    }
                    for (int k = 1; k <= m; k++) {
                        c3[++tot3] = T[k];
                    }
                    for (int k = 1; k <= sum[j]; k++) {
                        c3[++tot3] = j;
                    }
                }
            }
            permutationCount++; // Increment permutation count
            break;
        }
    }

    if (c2[1] == 0) {
        c2[1] = 0x3f3f3f3f;
        c3[1] = 0x3f3f3f3f;
    }

    ans[1] = 0x3f3f3f3f;
    if (cmp(c1, ans)) memcpy(ans, c1, sizeof(ans));
    if (cmp(c2, ans)) memcpy(ans, c2, sizeof(ans));
    if (cmp(c3, ans)) memcpy(ans, c3, sizeof(ans));

    // Check digit sort invariant before output
    check_digit_sort_invariant(sortOperationCount, 50); // Example threshold

    for (int i = 1; i <= len; i++) printf("%d", ans[i]);
    return 0;
}
```

### Explanation

- **`check_length_invariant`**: This check is placed after the initial setup and before looping through potential lengths of `n`. It alerts if `judge` is called excessively.
- **`check_permutation_invariant`**: Placed before handling permutations of digit sequences to detect if too many permutations are being attempted.
- **`check_digit_sort_invariant`**: Placed after constructing result permutations, ensuring no excessive sorting of digits occurred.

These checks will help in detecting potential performance bottlenecks when handling large or complex input patterns.

