system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline int in() {
  int32_t x;
  scanf("%d", &x);
  return x;
}
inline string get() {
  char ch[1000010];
  scanf("%s", ch);
  return ch;
}
const int MAX_LG = 21;
const long long maxn = 5e5 + 10;
const long long base = 29;
const long long mod = 1e9 + 7;
const long long INF = 1e9;
inline long long getlen(long long x) {
  long long ret = 0;
  while (x) ret++, x /= 10;
  return ret;
}
long long has[20];
long long cnt2[20];
long long cnt[20];
string res;
string ans;
string check;
string mini;
int32_t main() {
  string v = "21111222211112222222222112";
  long long sz = (long long)v.size();
  string s = get();
  bool c = false;
  if ((long long)s.size() > sz && s.substr(0, sz) == v) {
    c = true;
  }
  string t = get();
  if (s == "0" || s == "00") {
    cout << 0 << "\n";
    return 0;
  }
  long long theln = 0;
  for (long long i = 1; i <= 1000000; i++) {
    long long ln = getlen(i);
    if (i + ln == s.size()) {
      theln = i;
      break;
    }
  }
  for (long long i = 0; i < s.size(); i++) {
    cnt[s[i] - '0']++;
  }
  while (theln) {
    cnt[theln % 10]--;
    theln /= 10;
  }
  for (long long i = 0; i < t.size(); i++) cnt[t[i] - '0']--;
  for (long long i = 0; i <= 10; i++) cnt2[i] = cnt[i];
  for (long long i = 0; i <= 9; i++) {
    while (cnt2[i]) {
      cnt2[i]--, mini += char(i + '0');
    }
  }
  long long lim = -1;
  if (!cnt[0]) {
    for (long long i = 1; i <= 9; i++) {
      while (cnt[i]) {
        res += char('1' + i - 1);
        cnt[i]--;
      }
    }
  } else {
    long long mrk = -1;
    for (long long i = 1; i <= 9; i++) {
      if (cnt[i]) {
        mrk = i;
        cnt[i]--;
        break;
      }
    }
    if (mrk != -1) res += char('1' + mrk - 1);
    for (long long i = 0; i <= 9; i++) {
      while (cnt[i]) {
        res += char('1' + i - 1);
        cnt[i]--;
      }
    }
  }
  if (res.size() >= 2 && res[1] == '0') {
    for (long long j = 1; j < res.size() && res[j] == '0'; j++) lim = j;
  }
  if (!res.size()) {
    cout << t << "\n";
    return 0;
  }
  for (long long i = 0; i < res.size(); i++) has[res[i] - '0']++;
  if (res[0] == '0') {
    cout << t << res << "\n";
    return 0;
  }
  if (t[0] != '0') {
    ans = t + mini;
  } else {
    for (long long i = 0; i <= 1e6; i++) ans += '9';
  }
  long long yk = -1;
  if (t.size() > 1)
    for (long long i = 1; i < t.size(); i++) {
      if (yk == -1 && t[i] != t[0]) {
        yk = t[i] - '0';
      }
    }
  if (!has[t[0] - '0']) {
    bool fl = false;
    if (c) return cout << 2 << "\n", 0;
    for (long long i = lim + 1; i < s.size(); i++) {
      if (s[i] > t[0]) {
        lim = max(lim, i - 1);
        break;
      }
    }
    for (long long i = 0; i < res.size(); i++) {
      if (i > lim && (t[i] != '0' || i) && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  } else if (yk == -1 || yk > (t[0] - '0')) {
    bool fl = false;
    for (long long i = 0; i < res.size(); i++) {
      if (res[i] > t[0]) break;
      if (res[i] == t[0]) lim = i;
    }
    for (long long i = 0; i < res.size(); i++) {
      if (i > lim && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  } else {
    if (c) return cout << 4 << "\n", 0;
    bool fl = false;
    for (long long i = lim + 1; i < res.size(); i++) {
      if (res[i] == t[0]) {
        lim = max(lim, i - 1);
        break;
      }
    }
    for (long long i = 0; i < res.size(); i++) {
      if (i > lim && !fl) {
        check += t;
        fl = true;
      }
      check += res[i];
    }
    if (!fl) check += t;
  }
  ans = min(ans, check);
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

11003040044200003323519101102070252000010622902208104150200400140042011224011154237302003323632011235
0


(G.2) Fast Input

01
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline int in() { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int32_t x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &x); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline string get() { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  char ch[1000010]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%s", ch); /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  return ch; /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX_LG = 21; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const long long maxn = 5e5 + 10; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const long long base = 29; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
inline long long getlen(long long x) { /* line 18 slow_hit_count: 99, fast_hit_count: 1 */
  long long ret = 0; /* line 19 slow_hit_count: 99, fast_hit_count: 1 */
  while (x) ret++, x /= 10; /* line 20 slow_hit_count: 288, fast_hit_count: 2 */
  return ret; /* line 21 slow_hit_count: 99, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long has[20]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt2[20]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt[20]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
string res; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
string ans; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
string check; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
string mini; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  string v = "21111222211112222222222112"; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  long long sz = (long long)v.size(); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  string s = get(); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  bool c = false; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  if ((long long)s.size() > sz && s.substr(0, sz) == v) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    c = true; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  string t = get(); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  if (s == "0" || s == "00") { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << "\n"; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  long long theln = 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= 1000000; i++) { /* line 44 slow_hit_count: 99, fast_hit_count: 1 */
    long long ln = getlen(i); /* line 45 slow_hit_count: 99, fast_hit_count: 1 */
    if (i + ln == s.size()) { /* line 46 slow_hit_count: 99, fast_hit_count: 1 */
      theln = i; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < s.size(); i++) { /* line 51 slow_hit_count: 102, fast_hit_count: 3 */
    cnt[s[i] - '0']++; /* line 52 slow_hit_count: 101, fast_hit_count: 2 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  while (theln) { /* line 54 slow_hit_count: 3, fast_hit_count: 2 */
    cnt[theln % 10]--; /* line 55 slow_hit_count: 2, fast_hit_count: 1 */
    theln /= 10; /* line 56 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < t.size(); i++) cnt[t[i] - '0']--; /* line 58 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i <= 10; i++) cnt2[i] = cnt[i]; /* line 59 slow_hit_count: 12, fast_hit_count: 12 */
  for (long long i = 0; i <= 9; i++) { /* line 60 slow_hit_count: 11, fast_hit_count: 11 */
    while (cnt2[i]) { /* line 61 slow_hit_count: 108, fast_hit_count: 10 */
      cnt2[i]--, mini += char(i + '0'); /* line 62 slow_hit_count: 98, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  long long lim = -1; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  if (!cnt[0]) { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 1; i <= 9; i++) { /* line 67 slow_hit_count: 0, fast_hit_count: 10 */
      while (cnt[i]) { /* line 68 slow_hit_count: 0, fast_hit_count: 9 */
        res += char('1' + i - 1); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
        cnt[i]--; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    long long mrk = -1; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 1; i <= 9; i++) { /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
      if (cnt[i]) { /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
        mrk = i; /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
        cnt[i]--; /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
        break; /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    if (mrk != -1) res += char('1' + mrk - 1); /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 0; i <= 9; i++) { /* line 83 slow_hit_count: 11, fast_hit_count: 0 */
      while (cnt[i]) { /* line 84 slow_hit_count: 107, fast_hit_count: 0 */
        res += char('1' + i - 1); /* line 85 slow_hit_count: 97, fast_hit_count: 0 */
        cnt[i]--; /* line 86 slow_hit_count: 97, fast_hit_count: 0 */
      } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  if (res.size() >= 2 && res[1] == '0') { /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long j = 1; j < res.size() && res[j] == '0'; j++) lim = j; /* line 91 slow_hit_count: 34, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  if (!res.size()) { /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
    cout << t << "\n"; /* line 94 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 95 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < res.size(); i++) has[res[i] - '0']++; /* line 97 slow_hit_count: 99, fast_hit_count: 0 */
  if (res[0] == '0') { /* line 98 slow_hit_count: 1, fast_hit_count: 0 */
    cout << t << res << "\n"; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  if (t[0] != '0') { /* line 102 slow_hit_count: 1, fast_hit_count: 0 */
    ans = t + mini; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i <= 1e6; i++) ans += '9'; /* line 105 slow_hit_count: 1000002, fast_hit_count: 0 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  long long yk = -1; /* line 107 slow_hit_count: 1, fast_hit_count: 0 */
  if (t.size() > 1) /* line 108 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 1; i < t.size(); i++) { /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
      if (yk == -1 && t[i] != t[0]) { /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
        yk = t[i] - '0'; /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  if (!has[t[0] - '0']) { /* line 114 slow_hit_count: 1, fast_hit_count: 0 */
    bool fl = false; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    if (c) return cout << 2 << "\n", 0; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = lim + 1; i < s.size(); i++) { /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i] > t[0]) { /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
        lim = max(lim, i - 1); /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < res.size(); i++) { /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > lim && (t[i] != '0' || i) && !fl) { /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
        check += t; /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
        fl = true; /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (yk == -1 || yk > (t[0] - '0')) { /* line 131 slow_hit_count: 1, fast_hit_count: 0 */
    bool fl = false; /* line 132 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 0; i < res.size(); i++) { /* line 133 slow_hit_count: 1, fast_hit_count: 0 */
      if (res[i] > t[0]) break; /* line 134 slow_hit_count: 1, fast_hit_count: 0 */
      if (res[i] == t[0]) lim = i; /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < res.size(); i++) { /* line 137 slow_hit_count: 99, fast_hit_count: 0 */
      if (i > lim && !fl) { /* line 138 slow_hit_count: 98, fast_hit_count: 0 */
        check += t; /* line 139 slow_hit_count: 1, fast_hit_count: 0 */
        fl = true; /* line 140 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 142 slow_hit_count: 98, fast_hit_count: 0 */
    } /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 144 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
    if (c) return cout << 4 << "\n", 0; /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
    bool fl = false; /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = lim + 1; i < res.size(); i++) { /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
      if (res[i] == t[0]) { /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
        lim = max(lim, i - 1); /* line 150 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 151 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i < res.size(); i++) { /* line 154 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > lim && !fl) { /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
        check += t; /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
        fl = true; /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 158 slow_hit_count: 0, fast_hit_count: 0 */
      check += res[i]; /* line 159 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
    if (!fl) check += t; /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
  ans = min(ans, check); /* line 163 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 164 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 165 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts for both the slow and fast inputs, here are the observations:

1. **Line 44 (For Loop):** The loop iterating `i` from 1 to 1,000,000 is costly. On the slow input, the loop runs 99 times, while it only runs once on the fast input.
   
2. **Function `getlen` (Lines 18-21):** This function is called 99 times for the slow input compared to only once for the fast input. It is used within the loop on line 44.

3. **Conditional Execution and Inner Loop:**
   - **Line 60 (`for` Loop):** The loop and its inner `while` loop on lines 61-62 run significantly more for the slow input. The inner loop runs 98 times on slow input compared to none on the fast input.
   - **Line 76-81:** The conditional check and operations related to `cnt` and `mrk` are executed several times on the slow input but not on the fast input.
   
4. **String Manipulation (Lines 97-164):** String operations involving `res`, `check`, and `ans` exhibit more loops and condition checks for the slow input, especially in the sections around lines 137-142.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks and the nature of the code, we can derive the following performance-characterizing invariants:

1. **Costly Loop Due to Size Calculation:**
   - **Invariant:** "When the size of the string `s` is large, especially with a number of digits close to the upper bound, the loop that calculates potential lengths for `n` may run many times, increasing the execution time."
   
2. **Repetitive String and Count Operations:**
   - **Invariant:** "If there are many non-zero digits in the string `s` and they need sorting or manipulation, repetitive operations on character arrays and counts become frequent, slowing down performance."

3. **Imbalance in Character Count Array:**
   - **Invariant:** "The program may slow down when the character count array `cnt` requires numerous adjustments to create the smallest result, especially when there are many permutations of digits leading to deeper nesting or longer loop execution."
   
4. **Large `s` Size Leading to String Construction Overhead:**
   - **Invariant:** "With very large input sizes, the construction and manipulation of strings `res`, `check`, and `ans` can slow operations due to the potentially exponential number of permutations that need evaluation."

These invariants reflect situations that can degrade performance under certain input patterns, aligning with the constraints of the given problem, such as having a large string `s` with complex digit arrangements.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).

Input

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.

Output

Print the smalles integer n which Vasya could pass to Kate.

Examples

Input

003512
021


Output

30021


Input

199966633300
63


Output

3036366999

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, let's translate each invariant into C++ checker code:

1. **Costly Loop Due to Size Calculation:**

```cpp
void check_size_calculation_invariant(long long s_size, int loop_count) {
    if (s_size > 100 && loop_count > 50) {
        cerr << "Warning: size_calculation_invariant triggered - excessive loop iterations due to large size" << endl;
        abort();
    }
}
```

2. **Repetitive String and Count Operations:**

```cpp
void check_repetitive_operations(const long long cnt[], int threshold) {
    int high_frequency_digits = 0;
    for (int i = 0; i < 10; ++i) {
        if (cnt[i] > threshold) {
            high_frequency_digits++;
        }
    }
    if (high_frequency_digits > 3) {
        cerr << "Warning: repetitive_operations_invariant triggered - high frequency of digit operations" << endl;
        abort();
    }
}
```

3. **Imbalance in Character Count Array:**

```cpp
void check_character_count_imbalance(const long long cnt[], int threshold) {
    int imbalance_count = 0;
    for (int i = 0; i < 10; ++i) {
        if (cnt[i] < 0) {
            imbalance_count++;
        }
    }
    if (imbalance_count > threshold) {
        cerr << "Warning: character_count_imbalance_invariant triggered - imbalance in digit counts" << endl;
        abort();
    }
}
```

4. **Large `s` Size Leading to String Construction Overhead:**

```cpp
void check_string_construction_overhead(long long s_size, long long res_size) {
    if (s_size > 100000 && res_size > 10000) {
        cerr << "Warning: string_construction_overhead_invariant triggered - potential large string construction overhead" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Functions into the Original Program

Below is the instrumented C++ code with checker functions integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_size_calculation_invariant(long long s_size, int loop_count) {
    if (s_size > 100 && loop_count > 50) {
        cerr << "Warning: size_calculation_invariant triggered - excessive loop iterations due to large size" << endl;
        abort();
    }
}

void check_repetitive_operations(const long long cnt[], int threshold) {
    int high_frequency_digits = 0;
    for (int i = 0; i < 10; ++i) {
        if (cnt[i] > threshold) {
            high_frequency_digits++;
        }
    }
    if (high_frequency_digits > 3) {
        cerr << "Warning: repetitive_operations_invariant triggered - high frequency of digit operations" << endl;
        abort();
    }
}

void check_character_count_imbalance(const long long cnt[], int threshold) {
    int imbalance_count = 0;
    for (int i = 0; i < 10; ++i) {
        if (cnt[i] < 0) {
            imbalance_count++;
        }
    }
    if (imbalance_count > threshold) {
        cerr << "Warning: character_count_imbalance_invariant triggered - imbalance in digit counts" << endl;
        abort();
    }
}

void check_string_construction_overhead(long long s_size, long long res_size) {
    if (s_size > 100000 && res_size > 10000) {
        cerr << "Warning: string_construction_overhead_invariant triggered - potential large string construction overhead" << endl;
        abort();
    }
}

inline int in() {
    int32_t x;
    scanf("%d", &x);
    return x;
}

inline string get() {
    char ch[1000010];
    scanf("%s", ch);
    return ch;
}

const int MAX_LG = 21;
const long long maxn = 5e5 + 10;
const long long base = 29;
const long long mod = 1e9 + 7;
const long long INF = 1e9;

inline long long getlen(long long x) {
    long long ret = 0;
    while (x) ret++, x /= 10;
    return ret;
}

long long has[20];
long long cnt2[20];
long long cnt[20];
string res;
string ans;
string check;
string mini;

int32_t main() {
    string v = "21111222211112222222222112";
    long long sz = (long long)v.size();
    string s = get();
    bool c = false;
    
    if ((long long)s.size() > sz && s.substr(0, sz) == v) {
        c = true;
    }
    
    string t = get();
    if (s == "0" || s == "00") {
        cout << 0 << "\n";
        return 0;
    }
    
    long long theln = 0;
    int loop_count = 0; // Counter for loop iterations
    
    for (long long i = 1; i <= 1000000; i++) {
        long long ln = getlen(i);
        loop_count++;
        if (i + ln == s.size()) {
            theln = i;
            break;
        }
    }
    check_size_calculation_invariant(s.size(), loop_count); // Check for invariant

    for (long long i = 0; i < s.size(); i++) {
        cnt[s[i] - '0']++;
    }
    
    while (theln) {
        cnt[theln % 10]--;
        theln /= 10;
    }
    
    for (long long i = 0; i < t.size(); i++) cnt[t[i] - '0']--;
    
    for (long long i = 0; i <= 10; i++) cnt2[i] = cnt[i];
    
    for (long long i = 0; i <= 9; i++) {
        while (cnt2[i]) {
            cnt2[i]--, mini += char(i + '0');
        }
    }
    
    check_repetitive_operations(cnt, 50); // Check for invariant
    check_character_count_imbalance(cnt, 3); // Check for invariant
    
    long long lim = -1;
    if (!cnt[0]) {
        for (long long i = 1; i <= 9; i++) {
            while (cnt[i]) {
                res += char('1' + i - 1);
                cnt[i]--;
            }
        }
    } else {
        long long mrk = -1;
        for (long long i = 1; i <= 9; i++) {
            if (cnt[i]) {
                mrk = i;
                cnt[i]--;
                break;
            }
        }
        if (mrk != -1) res += char('1' + mrk - 1);
        for (long long i = 0; i <= 9; i++) {
            while (cnt[i]) {
                res += char('1' + i - 1);
                cnt[i]--;
            }
        }
    }
    
    if (res.size() >= 2 && res[1] == '0') {
        for (long long j = 1; j < res.size() && res[j] == '0'; j++) lim = j;
    }
    
    if (!res.size()) {
        cout << t << "\n";
        return 0;
    }
    
    for (long long i = 0; i < res.size(); i++) has[res[i] - '0']++;
    
    check_string_construction_overhead(s.size(), res.size()); // Check for invariant
    
    if (res[0] == '0') {
        cout << t << res << "\n";
        return 0;
    }
    
    if (t[0] != '0') {
        ans = t + mini;
    } else {
        for (long long i = 0; i <= 1e6; i++) ans += '9';
    }
    
    long long yk = -1;
    if (t.size() > 1)
        for (long long i = 1; i < t.size(); i++) {
            if (yk == -1 && t[i] != t[0]) {
                yk = t[i] - '0';
            }
        }
    
    if (!has[t[0] - '0']) {
        bool fl = false;
        if (c) return cout << 2 << "\n", 0;
        for (long long i = lim + 1; i < s.size(); i++) {
            if (s[i] > t[0]) {
                lim = max(lim, i - 1);
                break;
            }
        }
        for (long long i = 0; i < res.size(); i++) {
            if (i > lim && (t[i] != '0' || i) && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    } else if (yk == -1 || yk > (t[0] - '0')) {
        bool fl = false;
        for (long long i = 0; i < res.size(); i++) {
            if (res[i] > t[0]) break;
            if (res[i] == t[0]) lim = i;
        }
        for (long long i = 0; i < res.size(); i++) {
            if (i > lim && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    } else {
        if (c) return cout << 4 << "\n", 0;
        bool fl = false;
        for (long long i = lim + 1; i < res.size(); i++) {
            if (res[i] == t[0]) {
                lim = max(lim, i - 1);
                break;
            }
        }
        for (long long i = 0; i < res.size(); i++) {
            if (i > lim && !fl) {
                check += t;
                fl = true;
            }
            check += res[i];
        }
        if (!fl) check += t;
    }
    
    ans = min(ans, check);
    cout << ans << "\n";
}
```

### Explanation

- **Costly Loop Check:** Placed after the loop (line 44) calculating `theln` to ensure it doesn't execute excessively.
- **Repetitive Operations Check:** Placed after modifying `cnt` to monitor heavy operations on digit counts.
- **Character Count Imbalance Check:** Ensures the digit counts do not have significant imbalances after operations, placed after the counting logic.
- **String Construction Overhead Check:** Positioned where the string `res` is fully constructed to detect potential construction overhead due to large inputs.

Each check is strategically placed to avoid additional overhead during critical loops and only execute after significant computation points.

